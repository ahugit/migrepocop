nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    112.830      0.300000    
Tfreq:   10
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    112.830      0.300000    
Tfreq:   10
 Estimating   68 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2        376.10          4.39          0.47         17.95          0.43          0.01         23.25
iter,obj,time:      3        357.80          1.77          0.47         18.53          0.12          0.02         20.91
iter,obj,time:      4        531.61          1.78          0.47         18.50          0.17          0.02         20.93
iter,obj,time:      5        381.26          1.78          0.47         18.47          0.23          0.02         20.97
iter,obj,time:      6        362.24          1.78          0.47         18.51          0.20          0.01         20.98
iter,obj,time:      7        575.03          1.79          0.47         18.50          0.20          0.02         20.98
iter,obj,time:      8        372.20          1.78          0.47         18.59          0.09          0.02         20.95
iter,obj,time:      9        369.66          1.78          0.47         18.54          0.19          0.01         20.99
iter,obj,time:     10        386.86          1.78          0.47         18.56          0.21          0.01         21.04
iter,obj,time:     11        448.83          1.79          0.47         18.58          0.00          0.02         20.86
iter,obj,time:     12        377.06          1.78          0.47         18.55          0.22          0.02         21.04
iter,obj,time:     13        417.26          1.78          0.47         18.56          0.16          0.02         20.99
iter,obj,time:     14        990.12          1.78          0.47         18.48          0.28          0.01         21.03
iter,obj,time:     15        661.18          1.78          0.47         18.53          0.21          0.01         21.01
iter,obj,time:     16        389.00          1.79          0.47         18.52          0.08          0.01         20.88
iter,obj,time:     17        376.58          1.79          0.47         18.52          0.19          0.01         20.98
iter,obj,time:     18        364.12          1.78          0.47         18.54          0.20          0.01         21.01
iter,obj,time:     19        376.19          1.79          0.47         18.58          0.11          0.01         20.96
iter,obj,time:     20        402.37          1.79          0.47         18.54          0.23          0.01         21.04
iter,obj,time:     21        403.22          1.79          0.47         18.57          0.09          0.01         20.93
iter,obj,time:     22        393.93          1.79          0.48         18.51          0.20          0.01         20.99
iter,obj,time:     23        357.82          1.79          0.47         18.55          0.10          0.01         20.92
iter,obj,time:     24        708.29          1.79          0.47         18.54          0.21          0.01         21.02
iter,obj,time:     25        375.58          1.79          0.47         18.53          0.22          0.01         21.02
iter,obj,time:     26        365.77          1.79          0.47         18.58          0.08          0.01         20.94
iter,obj,time:     27        584.23          1.79          0.47         18.54          0.13          0.02         20.96
iter,obj,time:     28        416.11          1.78          0.47         18.55          0.15          0.01         20.97
iter,obj,time:     29       2219.92          1.78          0.47         18.59          0.05          0.02         20.90
iter,obj,time:     30       2107.50          1.79          0.47         18.55          0.19          0.01         21.02
iter,obj,time:     31       1867.40          1.79          0.47         18.54          0.08          0.01         20.89
iter,obj,time:     32       1962.61          1.79          0.47         18.57          0.00          0.01         20.85
iter,obj,time:     33       1970.13          1.79          0.47         18.58          0.08          0.01         20.93
iter,obj,time:     34       1869.90          1.79          0.47         18.55          0.16          0.01         20.99
iter,obj,time:     35       1824.63          1.79          0.47         18.58          0.05          0.02         20.91
iter,obj,time:     36       2429.58          1.79          0.47         18.56          0.08          0.02         20.91
iter,obj,time:     37        374.66          1.78          0.47         18.56          0.20          0.01         21.03
iter,obj,time:     38        395.58          1.79          0.47         18.58          0.21          0.02         21.07
iter,obj,time:     39       1520.18          1.78          0.47         18.50          0.24          0.01         21.01
iter,obj,time:     40       1221.87          1.79          0.47         18.55          0.15          0.01         20.98
iter,obj,time:     41       1424.58          1.79          0.48         18.58          0.16          0.02         21.02
iter,obj,time:     42        963.51          1.79          0.47         18.51          0.24          0.01         21.03
iter,obj,time:     43       1328.06          1.79          0.47         18.53          0.15          0.01         20.95
iter,obj,time:     44       1106.72          1.79          0.47         18.55          0.23          0.01         21.06
iter,obj,time:     45        947.15          1.79          0.47         18.53          0.18          0.01         20.99
iter,obj,time:     46       1202.97          1.79          0.47         18.59          0.08          0.01         20.94
iter,obj,time:     47       1527.03          1.78          0.47         18.54          0.14          0.01         20.95
iter,obj,time:     48        381.98          1.78          0.47         18.57          0.10          0.01         20.94
iter,obj,time:     49        381.08          1.79          0.47         18.52          0.12          0.01         20.91
iter,obj,time:     50        795.07          1.79          0.47         18.54          0.14          0.01         20.96
iter,obj,time:     51       1122.00          1.78          0.47         18.51          0.15          0.01         20.94
iter,obj,time:     52        434.19          1.78          0.47         18.58          0.04          0.01         20.89
iter,obj,time:     53        672.28          1.78          0.47         18.59          0.08          0.01         20.94
iter,obj,time:     54        378.27          1.79          0.48         18.54          0.10          0.01         20.92
iter,obj,time:     55        369.70          1.78          0.47         18.53          0.20          0.01         21.00
iter,obj,time:     56        364.39          1.78          0.47         18.60          0.11          0.01         20.97
iter,obj,time:     57        358.53          1.78          0.47         18.51          0.17          0.01         20.94
iter,obj,time:     58        388.38          1.79          0.47         18.53          0.17          0.01         20.96
iter,obj,time:     59        366.41          1.78          0.47         18.55          0.16          0.01         20.98
iter,obj,time:     60        373.87          1.78          0.47         18.56          0.12          0.01         20.95
iter,obj,time:     61        397.84          1.78          0.47         18.56          0.20          0.01         21.03
iter,obj,time:     62        370.67          1.78          0.47         18.49          0.21          0.01         20.96
iter,obj,time:     63        367.32          1.78          0.47         18.54          0.08          0.01         20.89
iter,obj,time:     64        377.36          1.78          0.47         18.57          0.12          0.01         20.96
iter,obj,time:     65        375.09          1.78          0.47         18.59          0.07          0.01         20.93
iter,obj,time:     66        450.83          1.79          0.47         18.50          0.21          0.01         20.98
iter,obj,time:     67        435.96          1.79          0.47         18.57          0.11          0.01         20.95
iter,obj,time:     68        381.05          1.78          0.47         18.56          0.15          0.01         20.97
iter,obj,time:     69        403.30          1.79          0.47         18.60          0.08          0.01         20.95
iter,obj,time:     70        398.86          1.78          0.47         18.50          0.15          0.01         20.92

    1    376.10        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

    2    357.80        3.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

    3    531.61        1.756     0.9665      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

    4    381.26        1.756     -1.034      5.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

    5    362.24        1.756     -1.034      3.256     -100.0      2.368    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

    6    575.03        1.756     -1.034      3.256     -100.0     0.1683    
                       1.149     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

    7    372.20        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506      2.388     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

    8    369.66        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      4.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

    9    386.86        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     0.6765    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   10    448.83        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                       1.171     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   11    377.06        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286    -0.8073      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   12    417.26        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                     -0.2619     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   13    990.12        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600     0.1693E+05  8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   14    661.18        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.     0.2108E+05 -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   15    389.00        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -1137.     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   16    376.58        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -10.03     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   17    364.12        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -7.764     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   18    376.19        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -8.809     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   19    402.37        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.196     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   20    403.22        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696      1145.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   21    393.93        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000      3141.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   22    357.82        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                       4550.      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   23    708.29        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2     0.1071E+05 -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   24    375.58        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.      4859.      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   25    365.77        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      5115.      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   26    584.23        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      7346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   27    416.11        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                       4084.     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   28    2219.9        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.8264    -0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   29    2107.5        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01 0.7327      0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   30    1867.4        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000     0.6694    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   31    1962.6        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                      0.6461    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   32    1970.1        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539     0.6828    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   33    1869.9        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172     0.6608    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   34    1824.6        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392     0.6314    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   35    2429.6        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686     0.7908    

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   36    374.66        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.5625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   37    395.58        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.622      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   38    1520.2        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.9938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   39    1221.9        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.8436    
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   40    1424.6        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.9022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   41    963.51        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022     0.7771    -0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   42    1328.1        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01 0.7430    -0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   43    1106.7        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01 0.7806    -0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   44    947.15        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01 0.7429    
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   45    1203.0        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                      0.7409     0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   46    1527.0        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.8911    -0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   47    381.98        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.7138E-01 -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   48    381.08        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -2.920      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   49    795.07        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                     -0.3751     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   50    1122.0        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375    -0.3682      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   51    434.19        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368     0.1032E+05  2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   52    672.28        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      8263.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   53    378.27        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.700      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   54    369.70        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.700      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   55    364.39        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.8000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   56    358.53        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.8000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   57    388.38        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      8.900      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   58    366.41        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.700     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   59    373.87        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -350.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   60    397.84        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.8000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   61    370.67        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.8000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   62    367.32        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.600      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   63    377.36        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      8.900    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   64    375.09        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -1750.     0.1000    -0.6000     0.1000      9.400    
                       9.200      8000.     0.1000    

   65    450.83        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000     0.1000     0.1000      9.400    
                       9.200      8000.     0.1000    

   66    435.96        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.8000      9.400    
                       9.200      8000.     0.1000    

   67    381.05        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.200    
                       9.200      8000.     0.1000    

   68    403.30        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.000      8000.     0.1000    

   69    398.86        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      8.900      8.900      0.000     0.1000    
                      0.1000     0.1000      9.100      8.900     -100.0    

                      0.1000     0.1000     0.1000      9.800      9.100    
                      -500.0     0.1000    -0.6000     0.1000      9.400    
                       9.200      9600.     0.1000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          69          69

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        1
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       79
neval,tstepnext:       69      79

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.192066      -1.64992      -186.160       186.160       376.099       562.258    
   2  0.495157     -0.702879      -79.3056       79.3056       357.798       437.104    
   3  0.185553      -1.68441      -190.052       190.052       531.606       721.658    
   4  0.350928E-01  -3.34976      -377.952       377.952       381.262       759.214    
   5  0.163167      -1.81298      -204.558       204.558       362.241       566.799    
   6  0.937470     -0.645701E-01  -7.28542       7.28542       575.025       582.311    
   7  0.529879     -0.635107      -71.6588       71.6588       372.198       443.857    
   8  0.754689     -0.281450      -31.7559       31.7559       369.662       401.418    
   9  0.536865     -0.622009      -70.1810       70.1810       386.862       457.043    
  10  0.396474     -0.925144      -104.384       104.384       448.828       553.212    
  11  0.189132      -1.66531      -187.896       187.896       377.061       564.957    
  12  0.259830      -1.34773      -152.064       152.064       417.257       569.320    
  13  0.416981     -0.874715      -98.6937       98.6937       990.121       1088.81    
  14  0.954834     -0.462182E-01  -5.21478       5.21478       661.185       666.400    
  15  0.320751      -1.13709      -128.297       128.297       389.002       517.300    
  16  0.405606E-01  -3.20496      -361.614       361.614       376.578       738.193    
  17  0.697180     -0.360712      -40.6989       40.6989       364.118       404.817    
  18  0.909227     -0.951599E-01  -10.7369       10.7369       376.192       386.929    
  19  0.983318     -0.168227E-01  -1.89810       1.89810       402.368       404.267    
  20  0.673248     -0.395642      -44.6401       44.6401       403.219       447.859    
  21  0.814570     -0.205095      -23.1408       23.1408       393.934       417.074    
  22  0.756029     -0.279676      -31.5557       31.5557       357.824       389.380    
  23  0.576701     -0.550432      -62.1049       62.1049       708.286       770.391    
  24  0.321232      -1.13559      -128.128       128.128       375.581       503.709    
  25  0.289360      -1.24008      -139.918       139.918       365.773       505.691    
  26  0.756206     -0.279442      -31.5293       31.5293       584.229       615.758    
  27  0.844183     -0.169386      -19.1118       19.1118       416.110       435.222    
  28  0.852202     -0.159931      -18.0450       18.0450       2219.92       2237.97    
  29  0.936639     -0.654568E-01  -7.38547       7.38547       2107.50       2114.88    
  30  0.601717E-01  -2.81055      -317.113       317.113       1867.40       2184.51    
  31  0.880020     -0.127811      -14.4208       14.4208       1962.61       1977.03    
  32  0.570196     -0.561774      -63.3848       63.3848       1970.13       2033.52    
  33  0.291898      -1.23135      -138.933       138.933       1869.90       2008.83    
  34  0.840841     -0.173352      -19.5593       19.5593       1824.63       1844.19    
  35  0.534635E-02  -5.23134      -590.250       590.250       2429.58       3019.83    
  36  0.508411     -0.676465      -76.3252       76.3252       374.663       450.988    
  37  0.524409     -0.645483      -72.8296       72.8296       395.584       468.414    
  38  0.408799     -0.894531      -100.930       100.930       1520.18       1621.11    
  39  0.119956      -2.12063      -239.269       239.269       1221.87       1461.14    
  40  0.122630      -2.09858      -236.782       236.782       1424.58       1661.36    
  41  0.612064     -0.490918      -55.3900       55.3900       963.512       1018.90    
  42  0.803626     -0.218621      -24.6669       24.6669       1328.06       1352.73    
  43  0.384701     -0.955288      -107.785       107.785       1106.72       1214.51    
  44  0.936906     -0.651721E-01  -7.35334       7.35334       947.149       954.502    
  45  0.985622     -0.144824E-01  -1.63405       1.63405       1202.97       1204.61    
  46  0.400198     -0.915795      -103.329       103.329       1527.03       1630.36    
  47  0.801690E-01  -2.52362      -284.739       284.739       381.984       666.722    
  48  0.802571     -0.219935      -24.8152       24.8152       381.085       405.900    
  49  0.473835     -0.746897      -84.2720       84.2720       795.069       879.341    
  50  0.261786      -1.34023      -151.217       151.217       1122.00       1273.22    
  51  0.306155      -1.18366      -133.552       133.552       434.191       567.743    
  52  0.586847     -0.532991      -60.1372       60.1372       672.280       732.417    
  53  0.589061     -0.529226      -59.7123       59.7123       378.273       437.986    
  54  0.978624     -0.216074E-01  -2.43796       2.43796       369.701       372.139    
  55  0.299667      -1.20508      -135.969       135.969       364.389       500.358    
  56  0.366531      -1.00367      -113.244       113.244       358.528       471.772    
  57  0.153257      -1.87564      -211.628       211.628       388.383       600.011    
  58  0.833987     -0.181537      -20.4828       20.4828       366.411       386.894    
  59  0.241279      -1.42180      -160.421       160.421       373.866       534.288    
  60  0.735602E-01  -2.60965      -294.446       294.446       397.839       692.285    
  61  0.310984      -1.16801      -131.786       131.786       370.669       502.455    
  62  0.233234      -1.45571      -164.247       164.247       367.317       531.564    
  63  0.944294     -0.573179E-01  -6.46715       6.46715       377.360       383.827    
  64  0.420296     -0.866795      -97.8002       97.8002       375.089       472.889    
  65  0.960761     -0.400298E-01  -4.51655       4.51655       450.832       455.348    
  66  0.580171E-01  -2.84702      -321.228       321.228       435.963       757.191    
  67  0.878204E-01  -2.43246      -274.454       274.454       381.049       655.502    
  68  0.981696     -0.184735E-01  -2.08436       2.08436       403.304       405.388    
  69  0.468486     -0.758249      -85.5529       85.5529       398.856       484.409    
loop,thermsimp(1:2)        1   186.160       79.3056    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     71        505.00          1.76          0.47         18.59          0.16          0.01         21.00
Just calling func    0   0         21.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    505.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    112.830                79
loop is:        1
neval is:       70
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        2
neval is:       70


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       79
neval,tstepnext:       70      79

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.877947     -0.130169      -14.6869       14.6869       369.701       384.388    
   2  0.829957     -0.186382      -21.0294       21.0294       377.360       398.390    
   3  0.533397     -0.628490      -70.9122       70.9122       366.411       437.323    
   4  0.840141     -0.174186      -19.6533       19.6533       376.192       395.845    
   5  0.952108E-02  -4.65425      -525.137       525.137       357.824       882.961    
   6  0.644471     -0.439325      -49.5689       49.5689       369.662       419.231    
   7  0.949623     -0.516897E-01  -5.83213       5.83213       402.368       408.201    
   8  0.261883      -1.33986      -151.176       151.176       364.118       515.293    
   9  0.537485     -0.620855      -70.0508       70.0508       403.304       473.355    
  10  0.967512     -0.330274E-01  -3.72647       3.72647       381.085       384.811    
  11  0.515125     -0.663345      -74.8449       74.8449       393.934       468.778    
  12  0.778801     -0.250000      -28.2074       28.2074       416.110       444.318    
  13  0.470031E-01  -3.05754      -344.981       344.981       357.798       702.779    
  14  0.868389     -0.141115      -15.9219       15.9219       378.273       394.195    
  15  0.306563      -1.18233      -133.402       133.402       372.198       505.600    
  16  0.882076     -0.125477      -14.1575       14.1575       403.219       417.377    
  17  0.378915     -0.970442      -109.495       109.495       374.663       484.157    
  18  0.796921     -0.226999      -25.6122       25.6122       450.832       476.444    
  19  0.817278     -0.201776      -22.7663       22.7663       386.862       409.628    
  20  0.966162     -0.344239E-01  -3.88404       3.88404       395.584       399.468    
  21  0.235578      -1.44571      -163.119       163.119       358.528       521.647    
  22  0.743896     -0.295854      -33.3810       33.3810       375.089       408.470    
  23  0.804551     -0.217471      -24.5371       24.5371       398.856       423.393    
  24  0.556828     -0.585499      -66.0616       66.0616       364.389       430.451    
  25  0.366038      -1.00502      -113.396       113.396       370.669       484.064    
  26  0.577638     -0.548808      -61.9218       61.9218       375.581       437.503    
  27  0.460967     -0.774430      -87.3786       87.3786       365.773       453.151    
  28  0.375327     -0.979957      -110.568       110.568       389.002       499.570    
  29  0.386648     -0.950240      -107.215       107.215       367.317       474.532    
  30  0.425491     -0.854512      -96.4142       96.4142       373.866       470.281    
  31  0.273048E-01  -3.60069      -406.265       406.265       448.828       855.093    
  32  0.468881     -0.757406      -85.4578       85.4578       376.099       461.556    
  33  0.143674      -1.94021      -218.913       218.913       377.061       595.974    
  34  0.426081     -0.853127      -96.2579       96.2579       362.241       458.499    
  35  0.839214     -0.175289      -19.7778       19.7778       434.191       453.969    
  36  0.650628E-01  -2.73240      -308.296       308.296       417.257       725.552    
  37  0.256237      -1.36165      -153.635       153.635       575.025       728.660    
  38  0.752676     -0.284121      -32.0572       32.0572       388.383       420.441    
  39  0.980822E-01  -2.32195      -261.985       261.985       584.229       846.213    
  40  0.230023E-02  -6.07475      -685.411       685.411       381.049       1066.46    
  41  0.100586      -2.29675      -259.141       259.141       661.185       920.326    
  42  0.802078     -0.220549      -24.8845       24.8845       381.984       406.868    
  43  0.187157      -1.67581      -189.081       189.081       397.839       586.920    
  44  0.563660     -0.573305      -64.6857       64.6857       531.606       596.292    
  45  0.252020      -1.37825      -155.507       155.507       672.280       827.787    
  46  0.319902      -1.13974      -128.597       128.597       376.578       505.175    
  47  0.818477     -0.200310      -22.6009       22.6009       435.963       458.564    
  48  0.798703     -0.224766      -25.3602       25.3602       381.262       406.623    
  49  0.209527      -1.56290      -176.342       176.342       708.286       884.628    
  50  0.644070     -0.439948      -49.6391       49.6391       795.069       844.708    
  51  0.793036E-01  -2.53447      -285.963       285.963       947.149       1233.11    
  52  0.318312E-02  -5.74989      -648.758       648.758       963.512       1612.27    
  53  0.713264     -0.337904      -38.1255       38.1255       990.121       1028.25    
  54  0.982669     -0.174834E-01  -1.97264       1.97264       1202.97       1204.95    
  55  0.898530     -0.106995      -12.0722       12.0722       1106.72       1118.80    
  56  0.860374     -0.150388      -16.9682       16.9682       1122.00       1138.97    
  57  0.296881      -1.21442      -137.023       137.023       1328.06       1465.09    
  58  0.554194     -0.590240      -66.5966       66.5966       1221.87       1288.46    
  59  0.533994     -0.627371      -70.7860       70.7860       1520.18       1590.97    
  60  0.332792      -1.10024      -124.139       124.139       1527.03       1651.17    
  61  0.351231      -1.04631      -118.055       118.055       1424.58       1542.63    
  62  0.954795E-01  -2.34884      -265.019       265.019       1824.63       2089.65    
  63  0.463456     -0.769045      -86.7710       86.7710       1962.61       2049.38    
  64  0.103065      -2.27239      -256.393       256.393       1869.90       2126.29    
  65  0.714752     -0.335819      -37.8903       37.8903       1970.13       2008.02    
  66  0.149137      -1.90289      -214.702       214.702       2107.50       2322.20    
  67  0.702773     -0.352722      -39.7974       39.7974       1867.40       1907.20    
  68  0.323052      -1.12994      -127.491       127.491       2219.92       2347.41    
  69  0.812913     -0.207131      -23.3706       23.3706       505.004       528.375    
loop,thermsimp(1:2)        2   14.6869       21.0294    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     72        465.92          1.78          0.47         18.55          0.15          0.01         20.97
Just calling func    0   0         20.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    465.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    112.830                79
loop is:        2
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        3
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       79
neval,tstepnext:       71      79

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.897662     -0.107962      -12.1813       12.1813       369.701       381.882    
   2  0.450153     -0.798167      -90.0568       90.0568       381.085       471.142    
   3  0.572569E-01  -2.86021      -322.716       322.716       378.273       700.989    
   4  0.188960      -1.66622      -187.999       187.999       376.192       564.191    
   5  0.738563E-01  -2.60563      -293.993       293.993       377.360       671.353    
   6  0.141703      -1.95402      -220.472       220.472       395.584       616.056    
   7  0.887038     -0.119867      -13.5246       13.5246       381.262       394.787    
   8  0.483365     -0.726983      -82.0251       82.0251       381.984       464.009    
   9  0.118507      -2.13278      -240.641       240.641       402.368       643.009    
  10  0.902048     -0.103087      -11.6313       11.6313       375.089       386.720    
  11  0.671318     -0.398512      -44.9639       44.9639       386.862       431.826    
  12  0.486994     -0.719505      -81.1814       81.1814       403.219       484.401    
  13  0.502692     -0.687779      -77.6018       77.6018       369.662       447.264    
  14  0.681811     -0.383002      -43.2140       43.2140       388.383       431.597    
  15  0.515633     -0.662361      -74.7339       74.7339       398.856       473.590    
  16  0.419532E-02  -5.47379      -617.605       617.605       364.389       981.994    
  17  0.560996E-01  -2.88063      -325.020       325.020       366.411       691.431    
  18  0.572389     -0.557937      -62.9518       62.9518       375.581       438.533    
  19  0.866528     -0.143260      -16.1640       16.1640       416.110       432.274    
  20  0.133741      -2.01185      -226.996       226.996       365.773       592.769    
  21  0.680978     -0.384226      -43.3520       43.3520       434.191       477.543    
  22  0.517524     -0.658700      -74.3208       74.3208       362.241       436.562    
  23  0.251548      -1.38012      -155.718       155.718       435.963       591.682    
  24  0.831536     -0.184481      -20.8149       20.8149       376.099       396.913    
  25  0.351126      -1.04661      -118.089       118.089       393.934       512.022    
  26  0.384786E-01  -3.25765      -367.560       367.560       373.866       741.426    
  27  0.684503     -0.379062      -42.7694       42.7694       403.304       446.073    
  28  0.449157     -0.800384      -90.3069       90.3069       367.317       457.624    
  29  0.476466E-01  -3.04394      -343.447       343.447       450.832       794.279    
  30  0.651372     -0.428674      -48.3672       48.3672       370.669       419.036    
  31  0.801033     -0.221853      -25.0316       25.0316       374.663       399.695    
  32  0.988574E-01  -2.31408      -261.096       261.096       389.002       650.098    
  33  0.661325     -0.413509      -46.6561       46.6561       376.578       423.234    
  34  0.579757     -0.545146      -61.5086       61.5086       372.198       433.707    
  35  0.966101E-03  -6.94224      -783.290       783.290       364.118       1147.41    
  36  0.618631     -0.480246      -54.1859       54.1859       358.528       412.714    
  37  0.670601     -0.399581      -45.0845       45.0845       505.004       550.089    
  38  0.212557      -1.54854      -174.721       174.721       397.839       572.560    
  39  0.120479      -2.11628      -238.779       238.779       377.061       615.840    
  40  0.975718     -0.245818E-01  -2.77355       2.77355       531.606       534.380    
  41  0.113216      -2.17845      -245.794       245.794       357.798       603.592    
  42  0.997786     -0.221618E-02 -0.250051      0.250051       417.257       417.507    
  43  0.989089     -0.109706E-01  -1.23781       1.23781       575.025       576.263    
  44  0.879733     -0.128137      -14.4576       14.4576       672.280       686.737    
  45  0.250352      -1.38489      -156.256       156.256       795.069       951.325    
  46  0.974215     -0.261234E-01  -2.94749       2.94749       584.229       587.176    
  47  0.696905     -0.361107      -40.7435       40.7435       448.828       489.572    
  48  0.386686     -0.950142      -107.204       107.204       357.824       465.028    
  49  0.161612      -1.82256      -205.638       205.638       708.286       913.924    
  50  0.316508      -1.15041      -129.800       129.800       661.185       790.984    
  51  0.296048      -1.21723      -137.340       137.340       990.121       1127.46    
  52  0.831401     -0.184643      -20.8332       20.8332       381.049       401.882    
  53  0.464983     -0.765755      -86.3998       86.3998       1106.72       1193.12    
  54  0.673151     -0.395786      -44.6563       44.6563       1122.00       1166.66    
  55  0.119448      -2.12488      -239.749       239.749       1202.97       1442.72    
  56  0.966822     -0.337413E-01  -3.80701       3.80701       947.149       950.956    
  57  0.579646     -0.545338      -61.5302       61.5302       1221.87       1283.40    
  58  0.288548      -1.24289      -140.235       140.235       1328.06       1468.30    
  59  0.668947     -0.402051      -45.3632       45.3632       1424.58       1469.94    
  60  0.308274      -1.17677      -132.774       132.774       1520.18       1652.96    
  61  0.361774      -1.01674      -114.718       114.718       963.512       1078.23    
  62  0.290785      -1.23517      -139.364       139.364       1527.03       1666.39    
  63  0.728019     -0.317429      -35.8153       35.8153       1867.40       1903.22    
  64  0.553119     -0.592182      -66.8156       66.8156       1970.13       2036.95    
  65  0.824090E-02  -4.79865      -541.429       541.429       1962.61       2504.03    
  66  0.622060     -0.474719      -53.5624       53.5624       1824.63       1878.19    
  67  0.629263     -0.463206      -52.2634       52.2634       1869.90       1922.16    
  68  0.976212E-01  -2.32666      -262.516       262.516       2107.50       2370.01    
  69  0.853700     -0.158175      -17.8468       17.8468       465.923       483.770    
loop,thermsimp(1:2)        3   12.1813       90.0568    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     73        528.05          1.78          0.47         18.58          0.19          0.03         21.05
Just calling func    0   0         21.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     74       2141.48          1.73          0.47         18.54          0.21          0.01         20.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    528.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    112.830                79
loop is:        3
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        4
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       79
neval,tstepnext:       73      79

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.866864     -0.142873      -16.1203       16.1203       369.701       385.821    
   2  0.701171     -0.355003      -40.0548       40.0548       375.089       415.144    
   3  0.722511     -0.325022      -36.6721       36.6721       381.262       417.934    
   4  0.198663E-01  -3.91873      -442.149       442.149       376.099       818.247    
   5  0.105347      -2.25050      -253.923       253.923       374.663       628.586    
   6  0.218724      -1.51994      -171.495       171.495       381.049       552.543    
   7  0.525917     -0.642611      -72.5056       72.5056       358.528       431.033    
   8  0.594413     -0.520181      -58.6918       58.6918       417.257       475.949    
   9  0.268718      -1.31409      -148.268       148.268       370.669       518.937    
  10  0.610451     -0.493557      -55.6878       55.6878       376.578       432.266    
  11  0.835669     -0.179523      -20.2555       20.2555       388.383       408.639    
  12  0.703128E-02  -4.95739      -559.340       559.340       386.862       946.202    
  13  0.892958     -0.113216      -12.7741       12.7741       416.110       428.884    
  14  0.902682     -0.102385      -11.5521       11.5521       372.198       383.751    
  15  0.941451     -0.603333E-01  -6.80738       6.80738       362.241       369.048    
  16  0.769347     -0.262214      -29.5854       29.5854       375.581       405.166    
  17  0.729446E-01  -2.61805      -295.394       295.394       403.304       698.698    
  18  0.233243      -1.45568      -164.243       164.243       369.662       533.905    
  19  0.600991     -0.509175      -57.4500       57.4500       367.317       424.767    
  20  0.490718     -0.711885      -80.3217       80.3217       381.984       462.305    
  21  0.445724     -0.808055      -91.1725       91.1725       357.824       448.996    
  22  0.929126     -0.735105E-01  -8.29416       8.29416       381.085       389.379    
  23  0.400462     -0.915136      -103.254       103.254       398.856       502.110    
  24  0.155979      -1.85803      -209.641       209.641       434.191       643.832    
  25  0.814919     -0.204666      -23.0924       23.0924       465.923       489.016    
  26  0.996273E-01  -2.30632      -260.221       260.221       403.219       663.440    
  27  0.375947E-01  -3.28089      -370.182       370.182       448.828       819.010    
  28  0.135874      -1.99603      -225.211       225.211       393.934       619.144    
  29  0.961023     -0.397567E-01  -4.48574       4.48574       531.606       536.092    
  30  0.711696     -0.340104      -38.3738       38.3738       505.004       543.378    
  31  0.762279     -0.271443      -30.6268       30.6268       376.192       406.819    
  32  0.716428     -0.333478      -37.6262       37.6262       397.839       435.465    
  33  0.927333     -0.754424E-01  -8.51214       8.51214       575.025       583.537    
  34  0.902334     -0.102771      -11.5956       11.5956       584.229       595.824    
  35  0.502479     -0.688201      -77.6494       77.6494       435.963       513.613    
  36  0.484775     -0.724071      -81.6966       81.6966       365.773       447.470    
  37  0.793981     -0.230696      -26.0293       26.0293       357.798       383.828    
  38  0.134216      -2.00830      -226.596       226.596       377.061       603.657    
  39  0.972881     -0.274937E-01  -3.10211       3.10211       395.584       398.687    
  40  0.152296      -1.88193      -212.338       212.338       402.368       614.706    
  41  0.714421E-01  -2.63887      -297.742       297.742       389.002       686.744    
  42  0.535272E-01  -2.92756      -330.316       330.316       377.360       707.676    
  43  0.326168      -1.12034      -126.408       126.408       672.280       798.687    
  44  0.193393      -1.64303      -185.382       185.382       366.411       551.793    
  45  0.301406      -1.19930      -135.316       135.316       378.273       513.590    
  46  0.244368      -1.40908      -158.986       158.986       373.866       532.852    
  47  0.701797     -0.354111      -39.9542       39.9542       661.185       701.139    
  48  0.514890     -0.663803      -74.8966       74.8966       450.832       525.728    
  49  0.356096      -1.03256      -116.503       116.503       708.286       824.789    
  50  0.295224      -1.22002      -137.654       137.654       947.149       1084.80    
  51  0.341947      -1.07310      -121.077       121.077       795.069       916.147    
  52  0.180006      -1.71477      -193.476       193.476       364.389       557.865    
  53  0.658718     -0.417459      -47.1017       47.1017       963.512       1010.61    
  54  0.563433     -0.573708      -64.7312       64.7312       990.121       1054.85    
  55  0.265103      -1.32764      -149.797       149.797       364.118       513.914    
  56  0.752815     -0.283936      -32.0364       32.0364       1122.00       1154.04    
  57  0.896332     -0.109444      -12.3485       12.3485       1106.72       1119.07    
  58  0.198065E-01  -3.92175      -442.489       442.489       1221.87       1664.36    
  59  0.253251      -1.37337      -154.957       154.957       1202.97       1357.93    
  60  0.237307      -1.43840      -162.294       162.294       1328.06       1490.36    
  61  0.375964     -0.978262      -110.377       110.377       1424.58       1534.95    
  62  0.698946     -0.358182      -40.4136       40.4136       1520.18       1560.60    
  63  0.703239     -0.352059      -39.7227       39.7227       1527.03       1566.75    
  64  0.423289     -0.859700      -96.9996       96.9996       1824.63       1921.63    
  65  0.647182     -0.435128      -49.0954       49.0954       1867.40       1916.50    
  66  0.964620     -0.360213E-01  -4.06427       4.06427       1869.90       1873.96    
  67  0.216064      -1.53218      -172.875       172.875       1970.13       2143.01    
  68  0.849664     -0.162914      -18.3816       18.3816       2107.50       2125.88    
  69  0.826914     -0.190055      -21.4438       21.4438       528.046       549.489    
loop,thermsimp(1:2)        4   16.1203       40.0548    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     75        474.15          1.78          0.47         18.61          0.13          0.01         21.00
Just calling func    0   0         21.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    474.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    112.830                79
loop is:        4
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        5
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       79
neval,tstepnext:       74      79

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.454482     -0.788596      -88.9770       88.9770       362.241       451.218    
   2  0.185688      -1.68369      -189.970       189.970       372.198       562.168    
   3  0.122182      -2.10224      -237.195       237.195       357.798       594.993    
   4  0.863652     -0.146586      -16.5392       16.5392       369.701       386.240    
   5  0.501877     -0.689400      -77.7847       77.7847       381.085       458.869    
   6  0.875018     -0.133510      -15.0639       15.0639       395.584       410.648    
   7  0.440938     -0.818851      -92.3906       92.3906       375.581       467.971    
   8  0.630584     -0.461108      -52.0266       52.0266       376.192       428.219    
   9  0.831156     -0.184938      -20.8665       20.8665       388.383       409.250    
  10  0.160291      -1.83076      -206.564       206.564       375.089       581.653    
  11  0.996842     -0.316261E-02 -0.356836      0.356836       381.262       381.619    
  12  0.652459     -0.427007      -48.1790       48.1790       367.317       415.496    
  13  0.412122     -0.886436      -100.016       100.016       416.110       516.126    
  14  0.403368     -0.907907      -102.439       102.439       358.528       460.967    
  15  0.341089E-01  -3.37820      -381.161       381.161       376.578       757.739    
  16  0.153683      -1.87287      -211.315       211.315       397.839       609.154    
  17  0.535519     -0.624519      -70.4642       70.4642       365.773       436.237    
  18  0.322701      -1.13103      -127.614       127.614       357.824       485.438    
  19  0.154733      -1.86606      -210.546       210.546       381.984       592.530    
  20  0.192116      -1.64965      -186.130       186.130       417.257       603.386    
  21  0.674696     -0.393494      -44.3977       44.3977       465.923       510.321    
  22  0.441277     -0.818083      -92.3039       92.3039       398.856       491.160    
  23  0.991468     -0.856866E-02 -0.966799      0.966799       378.273       379.240    
  24  0.689425     -0.371898      -41.9611       41.9611       435.963       477.924    
  25  0.955156     -0.458809E-01  -5.17672       5.17672       364.118       369.294    
  26  0.155340      -1.86214      -210.104       210.104       370.669       580.773    
  27  0.726516     -0.319494      -36.0484       36.0484       450.832       486.880    
  28  0.305516      -1.18575      -133.788       133.788       373.866       507.654    
  29  0.232214      -1.46010      -164.742       164.742       369.662       534.404    
  30  0.582883     -0.539768      -60.9018       60.9018       531.606       592.508    
  31  0.508093E-01  -2.97968      -336.196       336.196       505.004       841.200    
  32  0.859800E-01  -2.45364      -276.843       276.843       528.046       804.889    
  33  0.525190     -0.643996      -72.6617       72.6617       366.411       439.073    
  34  0.159402      -1.83632      -207.192       207.192       381.049       588.241    
  35  0.397282     -0.923110      -104.154       104.154       364.389       468.543    
  36  0.810490     -0.210117      -23.7074       23.7074       575.025       598.733    
  37  0.341567      -1.07421      -121.203       121.203       584.229       705.431    
  38  0.485110     -0.723379      -81.6185       81.6185       377.061       458.680    
  39  0.830364     -0.185891      -20.9740       20.9740       402.368       423.342    
  40  0.877434     -0.130753      -14.7528       14.7528       393.934       408.686    
  41  0.853383     -0.158547      -17.8887       17.8887       374.663       392.552    
  42  0.361889      -1.01642      -114.682       114.682       434.191       548.873    
  43  0.635634     -0.453133      -51.1268       51.1268       403.219       454.346    
  44  0.791955     -0.233250      -26.3175       26.3175       389.002       415.320    
  45  0.898385     -0.107156      -12.0904       12.0904       403.304       415.394    
  46  0.457569     -0.781827      -88.2132       88.2132       661.185       749.398    
  47  0.518789     -0.656258      -74.0453       74.0453       377.360       451.406    
  48  0.175000      -1.74297      -196.659       196.659       672.280       868.938    
  49  0.893133     -0.113020      -12.7520       12.7520       376.099       388.851    
  50  0.667709     -0.403902      -45.5721       45.5721       448.828       494.400    
  51  0.435308     -0.831701      -93.8405       93.8405       708.286       802.127    
  52  0.853042E-01  -2.46153      -277.734       277.734       795.069       1072.80    
  53  0.773502     -0.256827      -28.9777       28.9777       386.862       415.840    
  54  0.848319     -0.164498      -18.5602       18.5602       963.512       982.073    
  55  0.823942     -0.193656      -21.8501       21.8501       990.121       1011.97    
  56  0.518293     -0.657215      -74.1532       74.1532       947.149       1021.30    
  57  0.604988     -0.502546      -56.7021       56.7021       1106.72       1163.43    
  58  0.936768     -0.653196E-01  -7.36999       7.36999       1122.00       1129.37    
  59  0.937104     -0.649611E-01  -7.32953       7.32953       1202.97       1210.30    
  60  0.638908     -0.447995      -50.5471       50.5471       1328.06       1378.61    
  61  0.327213      -1.11714      -126.047       126.047       1424.58       1550.62    
  62  0.956323     -0.446598E-01  -5.03895       5.03895       1520.18       1525.22    
  63  0.906394     -0.982817E-01  -11.0891       11.0891       1527.03       1538.12    
  64  0.129830      -2.04153      -230.345       230.345       1221.87       1452.21    
  65  0.370183     -0.993758      -112.125       112.125       1869.90       1982.02    
  66  0.559656     -0.580433      -65.4900       65.4900       1867.40       1932.89    
  67  0.184455      -1.69035      -190.721       190.721       1824.63       2015.35    
  68  0.132761      -2.01921      -227.826       227.826       2107.50       2335.32    
  69  0.298479      -1.20906      -136.417       136.417       474.148       610.565    
loop,thermsimp(1:2)        5   88.9770       189.970    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76        491.03          1.78          0.48         18.61          0.08          0.03         20.98
Just calling func    0   0         20.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77        978.66          1.73          0.47         18.58          0.10          0.01         20.89
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    491.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    112.830                79
loop is:        5
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        6
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       79
neval,tstepnext:       76      79

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.692894     -0.366878      -41.3947       41.3947       364.118       405.512    
   2  0.531687     -0.631700      -71.2745       71.2745       378.273       449.548    
   3  0.337745E-01  -3.38805      -382.272       382.272       381.262       763.535    
   4  0.552292     -0.593678      -66.9844       66.9844       369.701       436.686    
   5  0.304527      -1.18899      -134.154       134.154       376.099       510.252    
   6  0.282198E-01  -3.56773      -402.546       402.546       374.663       777.209    
   7  0.333113      -1.09927      -124.031       124.031       393.934       517.964    
   8  0.181653      -1.70565      -192.448       192.448       388.383       580.832    
   9  0.863768E-01  -2.44904      -276.324       276.324       395.584       671.908    
  10  0.548350     -0.600841      -67.7927       67.7927       389.002       456.795    
  11  0.374576     -0.981962      -110.794       110.794       403.304       514.098    
  12  0.111193      -2.19649      -247.829       247.829       367.317       615.146    
  13  0.838177     -0.176526      -19.9174       19.9174       386.862       406.779    
  14  0.304274      -1.18983      -134.248       134.248       402.368       536.616    
  15  0.168381      -1.78152      -201.009       201.009       376.192       577.201    
  16  0.712616     -0.338812      -38.2280       38.2280       365.773       404.001    
  17  0.731365     -0.312843      -35.2979       35.2979       366.411       401.709    
  18  0.364084      -1.01037      -114.000       114.000       362.241       476.240    
  19  0.405329E-01  -3.20564      -361.691       361.691       377.360       739.051    
  20  0.108815      -2.21811      -250.268       250.268       403.219       653.488    
  21  0.459378E-01  -3.08047      -347.568       347.568       377.061       724.629    
  22  0.649238     -0.431956      -48.7374       48.7374       381.085       429.822    
  23  0.155979      -1.85803      -209.641       209.641       358.528       568.169    
  24  0.521205     -0.651611      -73.5210       73.5210       375.581       449.102    
  25  0.433511     -0.835838      -94.3072       94.3072       364.389       458.696    
  26  0.439178     -0.822851      -92.8419       92.8419       435.963       528.805    
  27  0.165949      -1.79608      -202.650       202.650       357.824       560.474    
  28  0.922206     -0.809871E-01  -9.13774       9.13774       450.832       459.969    
  29  0.665733     -0.406867      -45.9066       45.9066       398.856       444.762    
  30  0.620469     -0.477279      -53.8512       53.8512       448.828       502.679    
  31  0.253609      -1.37196      -154.798       154.798       373.866       528.664    
  32  0.779025     -0.249712      -28.1748       28.1748       465.923       494.098    
  33  0.289440      -1.23981      -139.887       139.887       416.110       555.997    
  34  0.125476      -2.07564      -234.194       234.194       369.662       603.856    
  35  0.325991      -1.12089      -126.469       126.469       434.191       560.660    
  36  0.159747      -1.83416      -206.948       206.948       372.198       579.146    
  37  0.945201     -0.563581E-01  -6.35886       6.35886       370.669       377.027    
  38  0.626825     -0.467089      -52.7014       52.7014       375.089       427.790    
  39  0.160186E-01  -4.13400      -466.438       466.438       381.049       847.486    
  40  0.725799     -0.320483      -36.1599       36.1599       531.606       567.766    
  41  0.190265      -1.65934      -187.222       187.222       381.984       569.206    
  42  0.922091     -0.811118E-01  -9.15181       9.15181       357.798       366.950    
  43  0.154525E-01  -4.16999      -470.498       470.498       575.025       1045.52    
  44  0.675302     -0.392595      -44.2963       44.2963       417.257       461.553    
  45  0.708627E-01  -2.64701      -298.661       298.661       397.839       696.500    
  46  0.885417     -0.121696      -13.7309       13.7309       474.148       487.879    
  47  0.734867     -0.308065      -34.7589       34.7589       584.229       618.987    
  48  0.440593     -0.819634      -92.4790       92.4790       661.185       753.664    
  49  0.252833      -1.37503      -155.144       155.144       376.578       531.722    
  50  0.928849     -0.738092E-01  -8.32786       8.32786       708.286       716.614    
  51  0.201790      -1.60053      -180.587       180.587       528.046       708.632    
  52  0.695010     -0.363829      -41.0507       41.0507       505.004       546.055    
  53  0.405924     -0.901588      -101.726       101.726       672.280       774.005    
  54  0.510045     -0.673257      -75.9633       75.9633       963.512       1039.48    
  55  0.139315      -1.97102      -222.389       222.389       990.121       1212.51    
  56  0.831427     -0.184612      -20.8297       20.8297       947.149       967.979    
  57  0.745229     -0.294064      -33.1791       33.1791       795.069       828.248    
  58  0.151686      -1.88595      -212.790       212.790       1122.00       1334.79    
  59  0.967318     -0.332277E-01  -3.74907       3.74907       1106.72       1110.47    
  60  0.203882      -1.59021      -179.423       179.423       1202.97       1382.40    
  61  0.230650      -1.46685      -165.505       165.505       1328.06       1493.57    
  62  0.591325     -0.525390      -59.2795       59.2795       1221.87       1281.15    
  63  0.633398     -0.456657      -51.5244       51.5244       1520.18       1571.71    
  64  0.812468E-01  -2.51026      -283.232       283.232       1527.03       1810.26    
  65  0.210976      -1.55601      -175.564       175.564       1424.58       1600.14    
  66  0.901587     -0.103598      -11.6890       11.6890       1867.40       1879.09    
  67  0.719861     -0.328697      -37.0868       37.0868       1869.90       1906.98    
  68  0.594354     -0.520281      -58.7030       58.7030       1824.63       1883.33    
  69  0.105870      -2.24555      -253.364       253.364       491.031       744.395    
loop,thermsimp(1:2)        6   41.3947       71.2745    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78        464.34          1.79          0.47         18.60          0.16          0.01         21.03
Just calling func    0   0         21.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    464.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    112.830                79
loop is:        6
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        7
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       79
neval,tstepnext:       77      79

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.659777     -0.415853      -46.9205       46.9205       357.798       404.719    
   2  0.779927     -0.248555      -28.0443       28.0443       370.669       398.713    
   3  0.281328      -1.26823      -143.094       143.094       366.411       509.505    
   4  0.691117     -0.369446      -41.6844       41.6844       365.773       407.457    
   5  0.914007E-02  -4.69509      -529.745       529.745       364.118       893.862    
   6  0.335184      -1.09307      -123.331       123.331       386.862       510.193    
   7  0.274452E-01  -3.59556      -405.686       405.686       375.089       780.775    
   8  0.967313     -0.332332E-01  -3.74969       3.74969       381.085       384.834    
   9  0.882291     -0.125233      -14.1300       14.1300       369.701       383.831    
  10  0.656193     -0.421300      -47.5351       47.5351       398.856       446.391    
  11  0.866763     -0.142990      -16.1335       16.1335       375.581       391.714    
  12  0.533531     -0.628238      -70.8838       70.8838       378.273       449.157    
  13  0.117864      -2.13822      -241.255       241.255       389.002       630.257    
  14  0.672045     -0.397430      -44.8419       44.8419       364.389       409.231    
  15  0.572712     -0.557372      -62.8881       62.8881       450.832       513.720    
  16  0.674502E-01  -2.69637      -304.230       304.230       417.257       721.486    
  17  0.873362     -0.135405      -15.2777       15.2777       362.241       377.518    
  18  0.604368     -0.503572      -56.8178       56.8178       474.148       530.966    
  19  0.962333     -0.383948E-01  -4.33207       4.33207       465.923       470.255    
  20  0.332990      -1.09964      -124.072       124.072       448.828       572.900    
  21  0.104743      -2.25625      -254.571       254.571       376.099       630.670    
  22  0.870726     -0.138428      -15.6188       15.6188       403.304       418.923    
  23  0.802702     -0.219772      -24.7967       24.7967       393.934       418.730    
  24  0.666952     -0.405038      -45.7002       45.7002       373.866       419.567    
  25  0.260417E-01  -3.64805      -411.608       411.608       435.963       847.572    
  26  0.443127     -0.813899      -91.8319       91.8319       376.578       468.410    
  27  0.593732     -0.521328      -58.8212       58.8212       402.368       461.190    
  28  0.946642     -0.548339E-01  -6.18689       6.18689       505.004       511.191    
  29  0.634659     -0.454668      -51.3000       51.3000       416.110       467.410    
  30  0.417446E-01  -3.17619      -358.368       358.368       357.824       716.192    
  31  0.164107      -1.80724      -203.910       203.910       434.191       638.101    
  32  0.981300     -0.188775E-01  -2.12994       2.12994       531.606       533.736    
  33  0.948678     -0.526863E-01  -5.94457       5.94457       358.528       364.472    
  34  0.543018     -0.610612      -68.8951       68.8951       381.984       450.879    
  35  0.581721     -0.541765      -61.1271       61.1271       376.192       437.319    
  36  0.583169E-02  -5.14445      -580.446       580.446       372.198       952.644    
  37  0.283344      -1.26109      -142.289       142.289       388.383       530.672    
  38  0.799038     -0.224347      -25.3130       25.3130       369.662       394.975    
  39  0.222820      -1.50139      -169.402       169.402       367.317       536.718    
  40  0.341170      -1.07537      -121.334       121.334       584.229       705.562    
  41  0.484705     -0.724214      -81.7128       81.7128       403.219       484.932    
  42  0.569987E-01  -2.86473      -323.226       323.226       395.584       718.810    
  43  0.253323      -1.37309      -154.925       154.925       397.839       552.764    
  44  0.520585     -0.652801      -73.6553       73.6553       528.046       601.701    
  45  0.164041      -1.80764      -203.955       203.955       708.286       912.241    
  46  0.946184     -0.553186E-01  -6.24158       6.24158       377.061       383.303    
  47  0.835065     -0.180245      -20.3370       20.3370       377.360       397.697    
  48  0.779938     -0.248541      -28.0428       28.0428       491.031       519.074    
  49  0.521147     -0.651722      -73.5336       73.5336       661.185       734.718    
  50  0.919292E-02  -4.68932      -529.094       529.094       381.262       910.356    
  51  0.684267     -0.379407      -42.8084       42.8084       672.280       715.088    
  52  0.449766     -0.799028      -90.1539       90.1539       374.663       464.817    
  53  0.464521     -0.766749      -86.5120       86.5120       795.069       881.581    
  54  0.903023     -0.102007      -11.5095       11.5095       381.049       392.558    
  55  0.851280     -0.161015      -18.1672       18.1672       947.149       965.316    
  56  0.534714E-01  -2.92861      -330.434       330.434       963.512       1293.95    
  57  0.871765E-01  -2.43982      -275.284       275.284       575.025       850.309    
  58  0.300103E-01  -3.50622      -395.605       395.605       1106.72       1502.33    
  59  0.752052     -0.284950      -32.1508       32.1508       990.121       1022.27    
  60  0.231888E-01  -3.76409      -424.700       424.700       1221.87       1646.57    
  61  0.887280     -0.119595      -13.4938       13.4938       1122.00       1135.50    
  62  0.759666     -0.274877      -31.0142       31.0142       1202.97       1233.99    
  63  0.498004     -0.697147      -78.6587       78.6587       1328.06       1406.72    
  64  0.137656      -1.98300      -223.740       223.740       1520.18       1743.92    
  65  0.795733     -0.228492      -25.7806       25.7806       1424.58       1450.36    
  66  0.541874     -0.612721      -69.1331       69.1331       1527.03       1596.16    
  67  0.205613      -1.58176      -178.469       178.469       1867.40       2045.87    
  68  0.219847E-01  -3.81741      -430.717       430.717       1824.63       2255.35    
  69  0.609945     -0.494386      -55.7814       55.7814       464.340       520.122    
loop,thermsimp(1:2)        7   46.9205       28.0443    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     79        459.87          1.78          0.47         18.60          0.19          0.01         21.06
Just calling func    0   0         21.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    459.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    112.830                79
loop is:        7
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        8
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       79
neval,tstepnext:       78      79

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.328320      -1.11377      -125.666       125.666       358.528       484.194    
   2  0.520747     -0.652490      -73.6202       73.6202       362.241       435.861    
   3  0.648011E-01  -2.73643      -308.751       308.751       377.061       685.812    
   4  0.419241     -0.869309      -98.0838       98.0838       369.701       467.785    
   5  0.513047     -0.667388      -75.3011       75.3011       381.085       456.386    
   6  0.653907     -0.424790      -47.9288       47.9288       375.581       423.510    
   7  0.200162      -1.60863      -181.501       181.501       381.049       562.549    
   8  0.144292      -1.93592      -218.429       218.429       369.662       588.091    
   9  0.237590E-02  -6.04238      -681.759       681.759       377.360       1059.12    
  10  0.549951     -0.597925      -67.4637       67.4637       370.669       438.132    
  11  0.606883     -0.499419      -56.3492       56.3492       357.798       414.148    
  12  0.642270     -0.442746      -49.9548       49.9548       365.773       415.728    
  13  0.801839     -0.220848      -24.9181       24.9181       364.389       389.307    
  14  0.282947      -1.26250      -142.447       142.447       393.934       536.380    
  15  0.920761     -0.825553E-01  -9.31468       9.31468       403.304       412.619    
  16  0.588445     -0.530272      -59.8304       59.8304       373.866       433.697    
  17  0.375752     -0.978827      -110.441       110.441       376.192       486.633    
  18  0.345431      -1.06296      -119.934       119.934       398.856       518.789    
  19  0.184500      -1.69011      -190.694       190.694       378.273       568.967    
  20  0.954415     -0.466564E-01  -5.26422       5.26422       381.984       387.248    
  21  0.989500     -0.105557E-01  -1.19099       1.19099       402.368       403.559    
  22  0.699927     -0.356779      -40.2552       40.2552       374.663       414.918    
  23  0.513835     -0.665853      -75.1279       75.1279       416.110       491.238    
  24  0.581971     -0.541334      -61.0785       61.0785       376.578       437.657    
  25  0.869799     -0.139493      -15.7389       15.7389       465.923       481.662    
  26  0.717113     -0.332522      -37.5183       37.5183       403.219       440.738    
  27  0.125070      -2.07888      -234.559       234.559       366.411       600.970    
  28  0.568832E-01  -2.86676      -323.455       323.455       386.862       710.317    
  29  0.144797      -1.93242      -218.034       218.034       505.004       723.039    
  30  0.955390     -0.456357E-01  -5.14906       5.14906       450.832       455.981    
  31  0.888800     -0.117883      -13.3007       13.3007       491.031       504.332    
  32  0.883075     -0.124345      -14.0298       14.0298       464.340       478.370    
  33  0.439170     -0.822869      -92.8439       92.8439       388.383       481.227    
  34  0.562066     -0.576135      -65.0051       65.0051       474.148       539.153    
  35  0.731299     -0.312933      -35.3081       35.3081       531.606       566.914    
  36  0.416935     -0.874824      -98.7060       98.7060       367.317       466.023    
  37  0.749811     -0.287934      -32.4875       32.4875       397.839       430.327    
  38  0.693466     -0.366053      -41.3016       41.3016       448.828       490.130    
  39  0.764992     -0.267889      -30.2258       30.2258       528.046       558.271    
  40  0.825042     -0.192321      -21.6995       21.6995       389.002       410.702    
  41  0.274759      -1.29186      -145.760       145.760       376.099       521.859    
  42  0.960502     -0.402995E-01  -4.54697       4.54697       434.191       438.738    
  43  0.624795     -0.470332      -53.0673       53.0673       584.229       637.296    
  44  0.706144     -0.347936      -39.2575       39.2575       672.280       711.537    
  45  0.586464     -0.533644      -60.2109       60.2109       357.824       418.035    
  46  0.629977     -0.462072      -52.1354       52.1354       395.584       447.720    
  47  0.441511     -0.817552      -92.2441       92.2441       417.257       509.501    
  48  0.763414     -0.269955      -30.4589       30.4589       661.185       691.644    
  49  0.447809     -0.803389      -90.6460       90.6460       375.089       465.735    
  50  0.951047     -0.501916E-01  -5.66310       5.66310       435.963       441.626    
  51  0.899103     -0.106358      -12.0003       12.0003       575.025       587.026    
  52  0.882633E-01  -2.42743      -273.886       273.886       795.069       1068.96    
  53  0.396362     -0.925427      -104.416       104.416       364.118       468.533    
  54  0.468639E-01  -3.06051      -345.316       345.316       381.262       726.578    
  55  0.519086     -0.655686      -73.9808       73.9808       708.286       782.267    
  56  0.804980     -0.216938      -24.4770       24.4770       372.198       396.675    
  57  0.515004     -0.663580      -74.8715       74.8715       947.149       1022.02    
  58  0.708804     -0.344177      -38.8333       38.8333       990.121       1028.95    
  59  0.399015     -0.918756      -103.663       103.663       1122.00       1225.66    
  60  0.496282     -0.700612      -79.0497       79.0497       1202.97       1282.02    
  61  0.803781     -0.218429      -24.6453       24.6453       963.512       988.158    
  62  0.492369E-02  -5.31370      -599.542       599.542       1328.06       1927.61    
  63  0.216735      -1.52908      -172.525       172.525       1424.58       1597.10    
  64  0.715354     -0.334978      -37.7954       37.7954       1106.72       1144.52    
  65  0.566725     -0.567881      -64.0737       64.0737       1527.03       1591.10    
  66  0.682119     -0.382551      -43.1631       43.1631       1221.87       1265.03    
  67  0.517708E-01  -2.96093      -334.080       334.080       1520.18       1854.26    
  68  0.500432     -0.692284      -78.1101       78.1101       1867.40       1945.51    
  69  0.247207      -1.39753      -157.683       157.683       459.873       617.556    
loop,thermsimp(1:2)        8   125.666       73.6202    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     80        483.57          1.78          0.47         18.59          0.16          0.03         21.03
Just calling func    0   0         21.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     81        955.04          1.73          0.47         18.58          0.11          0.01         20.91
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    955.04        1.900    -0.8894      3.400     -100.0     0.3268    
                     -0.7064     0.5326     -100.0      2.315     -1.179    
                     -0.6845     -2.663      2.009      0.000     0.6600    
                      -1.190     -20.00      0.000      0.000     -1.221    

                      -1.600      7505.      9345.     -503.9     -1451.    
                      -4.215     -5.374     -4.162     -15.33     -5.168    
                      -13.45     -2.660     -3495.      0.000     -1499.    

                      -89.91      6071.      219.3      475.3      2707.    
                      -555.3    -0.2632E-01-0.1108      0.000     -2.520    
                     -0.2035    -0.1637    -0.1799    -0.2064    -0.6521E-01

                     -0.7481     -2.808      1.382     0.2514     0.1012    
                      0.1598     0.3474E-01 0.6079E-03 0.3828E-01 0.5816E-03
                     -0.1420E-02 0.1488    -0.2570     -3.105      1.382    

                      -1.303     -1.296      3936.      3151.      0.000    
                       0.000      8.886      8.886      0.000     0.1000    
                      0.1504     0.1504      9.086      8.886     -118.0    

                      0.1000     0.1504     0.1504      9.786      9.086    
                      -590.1     0.1000    -0.5496     0.1504      9.386    
                       9.186      8115.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    483.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    112.830                79
loop is:        8
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    112.830                79
loop is:        9
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    33.8489                89

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       80      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.877763     -0.130379      -4.41317       4.41317       381.984       386.397    
   2  0.734564     -0.308478      -10.4416       10.4416       364.389       374.831    
   3  0.802876     -0.219555      -7.43169       7.43169       372.198       379.630    
   4  0.360303E-01  -3.32340      -112.493       112.493       402.368       514.862    
   5  0.370801     -0.992089      -33.5811       33.5811       389.002       422.583    
   6  0.981225     -0.189536E-01 -0.641559      0.641559       403.304       403.946    
   7  0.738773     -0.302764      -10.2482       10.2482       357.798       368.047    
   8  0.550490     -0.596947      -20.2060       20.2060       374.663       394.869    
   9  0.391314     -0.938244      -31.7585       31.7585       365.773       397.531    
  10  0.207980      -1.57031      -53.1533       53.1533       357.824       410.977    
  11  0.100935E-01  -4.59586      -155.565       155.565       375.581       531.146    
  12  0.245464      -1.40460      -47.5443       47.5443       397.839       445.383    
  13  0.184889      -1.68800      -57.1368       57.1368       373.866       431.003    
  14  0.748704     -0.289412      -9.79626       9.79626       362.241       372.037    
  15  0.144627      -1.93360      -65.4502       65.4502       376.578       442.029    
  16  0.131401      -2.02950      -68.6964       68.6964       370.669       439.365    
  17  0.549515     -0.598719      -20.2660       20.2660       434.191       454.457    
  18  0.657585E-01  -2.72177      -92.1287       92.1287       403.219       495.348    
  19  0.334771      -1.09431      -37.0411       37.0411       435.963       473.004    
  20  0.153580      -1.87353      -63.4170       63.4170       395.584       459.001    
  21  0.614612     -0.486763      -16.4764       16.4764       450.832       467.308    
  22  0.308247      -1.17685      -39.8352       39.8352       381.085       420.920    
  23  0.724228E-01  -2.62523      -88.8612       88.8612       375.089       463.950    
  24  0.354154      -1.03802      -35.1360       35.1360       367.317       402.453    
  25  0.513292     -0.666910      -22.5741       22.5741       369.701       392.275    
  26  0.709815     -0.342750      -11.6017       11.6017       364.118       375.719    
  27  0.452828     -0.792243      -26.8165       26.8165       464.340       491.157    
  28  0.932808     -0.695564E-01  -2.35441       2.35441       388.383       390.738    
  29  0.375302E-01  -3.28261      -111.113       111.113       465.923       577.036    
  30  0.529321     -0.636161      -21.5333       21.5333       358.528       380.061    
  31  0.102095E-01  -4.58443      -155.178       155.178       376.192       531.370    
  32  0.471924     -0.750936      -25.4183       25.4183       448.828       474.246    
  33  0.633455     -0.456567      -15.4543       15.4543       416.110       431.565    
  34  0.923765E-01  -2.38188      -80.6240       80.6240       491.031       571.655    
  35  0.348201      -1.05498      -35.7097       35.7097       417.257       452.966    
  36  0.807156     -0.214239      -7.25174       7.25174       398.856       406.108    
  37  0.887138     -0.119755      -4.05357       4.05357       376.099       380.152    
  38  0.624997     -0.470009      -15.9093       15.9093       393.934       409.843    
  39  0.369720E-01  -3.29759      -111.620       111.620       474.148       585.768    
  40  0.927894     -0.748379E-01  -2.53318       2.53318       528.046       530.579    
  41  0.906868     -0.977588E-01  -3.30903       3.30903       381.049       384.358    
  42  0.569036     -0.563811      -19.0844       19.0844       531.606       550.691    
  43  0.404667     -0.904691      -30.6228       30.6228       378.273       408.896    
  44  0.697897E-01  -2.66227      -90.1148       90.1148       575.025       665.140    
  45  0.427197     -0.850510      -28.7888       28.7888       369.662       398.451    
  46  0.646188     -0.436665      -14.7806       14.7806       366.411       381.191    
  47  0.750171     -0.287455      -9.73001       9.73001       459.873       469.603    
  48  0.202952      -1.59479      -53.9818       53.9818       584.229       638.210    
  49  0.116725      -2.14793      -72.7051       72.7051       377.061       449.766    
  50  0.122175      -2.10230      -71.1606       71.1606       661.185       732.345    
  51  0.790820     -0.234685      -7.94381       7.94381       386.862       394.806    
  52  0.471338     -0.752179      -25.4604       25.4604       672.280       697.740    
  53  0.645509     -0.437717      -14.8162       14.8162       505.004       519.821    
  54  0.440638     -0.819533      -27.7403       27.7403       381.262       409.003    
  55  0.819538     -0.199014      -6.73641       6.73641       708.286       715.022    
  56  0.994703     -0.531061E-02 -0.179758      0.179758       963.512       963.692    
  57  0.722752     -0.324689      -10.9903       10.9903       947.149       958.139    
  58  0.877904     -0.130218      -4.40772       4.40772       990.121       994.528    
  59  0.261353      -1.34188      -45.4213       45.4213       377.360       422.782    
  60  0.924845     -0.781286E-01  -2.64457       2.64457       795.069       797.714    
  61  0.783018     -0.244599      -8.27940       8.27940       1106.72       1115.00    
  62  0.630212E-01  -2.76428      -93.5679       93.5679       1122.00       1215.57    
  63  0.635731E-01  -2.75556      -93.2727       93.2727       1221.87       1315.14    
  64  0.909699     -0.946413E-01  -3.20350       3.20350       1202.97       1206.18    
  65  0.463544     -0.768855      -26.0249       26.0249       1527.03       1553.05    
  66  0.445786     -0.807917      -27.3471       27.3471       1424.58       1451.92    
  67  0.795228     -0.229127      -7.75568       7.75568       1520.18       1527.94    
  68  0.414666     -0.880282      -29.7965       29.7965       1328.06       1357.86    
  69  0.215747      -1.53365      -51.9122       51.9122       483.567       535.479    
loop,thermsimp(1:2)        9   4.41317       10.4416    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82        571.42          1.78          0.47         18.62          0.03          0.01         20.92
Just calling func    0   0         20.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    571.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:        9
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       10
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       81      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157564      -1.84792      -62.5501       62.5501       357.798       420.348    
   2  0.844415     -0.169111      -5.72421       5.72421       362.241       367.965    
   3  0.782747     -0.244946      -8.29113       8.29113       364.389       372.680    
   4  0.982270     -0.178895E-01 -0.605540      0.605540       364.118       364.723    
   5  0.868514E-01  -2.44356      -82.7116       82.7116       372.198       454.910    
   6  0.491266     -0.710770      -24.0588       24.0588       358.528       382.587    
   7  0.136944      -1.98818      -67.2977       67.2977       376.099       443.396    
   8  0.445477     -0.808610      -27.3705       27.3705       366.411       393.781    
   9  0.231542      -1.46300      -49.5207       49.5207       381.049       430.570    
  10  0.133870      -2.01088      -68.0662       68.0662       381.984       450.050    
  11  0.943595     -0.580585E-01  -1.96522       1.96522       388.383       390.349    
  12  0.535049     -0.625396      -21.1690       21.1690       369.701       390.870    
  13  0.606522     -0.500015      -16.9249       16.9249       386.862       403.787    
  14  0.941629     -0.601435E-01  -2.03579       2.03579       374.663       376.699    
  15  0.577270     -0.549446      -18.5981       18.5981       365.773       384.371    
  16  0.780862     -0.247357      -8.37275       8.37275       369.662       378.035    
  17  0.856580     -0.154808      -5.24007       5.24007       367.317       372.557    
  18  0.275585      -1.28886      -43.6265       43.6265       403.304       446.930    
  19  0.544534     -0.607825      -20.5742       20.5742       398.856       419.430    
  20  0.342227      -1.07228      -36.2955       36.2955       378.273       414.569    
  21  0.481353E-01  -3.03374      -102.689       102.689       381.262       483.951    
  22  0.966625     -0.339444E-01  -1.14898       1.14898       393.934       395.083    
  23  0.398699E-01  -3.22213      -109.066       109.066       357.824       466.890    
  24  0.843494     -0.170202      -5.76115       5.76115       381.085       386.846    
  25  0.831477     -0.184551      -6.24685       6.24685       389.002       395.249    
  26  0.465551     -0.764533      -25.8786       25.8786       377.360       403.239    
  27  0.888492E-01  -2.42081      -81.9418       81.9418       373.866       455.808    
  28  0.413877     -0.882187      -29.8610       29.8610       416.110       445.971    
  29  0.184012      -1.69275      -57.2978       57.2978       370.669       427.966    
  30  0.298120      -1.21026      -40.9659       40.9659       376.578       417.544    
  31  0.319271E-01  -3.44430      -116.586       116.586       397.839       514.425    
  32  0.869571     -0.139755      -4.73055       4.73055       377.061       381.792    
  33  0.377451     -0.974315      -32.9795       32.9795       417.257       450.236    
  34  0.895127     -0.110790      -3.75010       3.75010       434.191       437.941    
  35  0.234635      -1.44972      -49.0715       49.0715       395.584       444.656    
  36  0.612119     -0.490829      -16.6140       16.6140       375.089       391.703    
  37  0.209398      -1.56352      -52.9233       52.9233       450.832       503.755    
  38  0.429584E-02  -5.45011      -184.480       184.480       459.873       644.353    
  39  0.345056E-01  -3.36663      -113.957       113.957       435.963       549.920    
  40  0.215602      -1.53432      -51.9350       51.9350       448.828       500.763    
  41  0.612123     -0.490821      -16.6137       16.6137       464.340       480.954    
  42  0.739379     -0.301945      -10.2205       10.2205       403.219       413.440    
  43  0.367589      -1.00079      -33.8756       33.8756       402.368       436.244    
  44  0.339934      -1.07900      -36.5231       36.5231       505.004       541.528    
  45  0.995942     -0.406662E-02 -0.137651      0.137651       528.046       528.183    
  46  0.619617     -0.478654      -16.2019       16.2019       375.581       391.783    
  47  0.682694     -0.381709      -12.9204       12.9204       376.192       389.112    
  48  0.214428      -1.53978      -52.1198       52.1198       483.567       535.686    
  49  0.214870      -1.53772      -52.0502       52.0502       531.606       583.656    
  50  0.497100     -0.698964      -23.6592       23.6592       491.031       514.690    
  51  0.830493     -0.185736      -6.28696       6.28696       465.923       472.210    
  52  0.174561      -1.74548      -59.0826       59.0826       474.148       533.231    
  53  0.851955     -0.160221      -5.42331       5.42331       584.229       589.652    
  54  0.837364     -0.177497      -6.00806       6.00806       575.025       581.033    
  55  0.394767E-01  -3.23204      -109.401       109.401       672.280       781.681    
  56  0.681489     -0.383475      -12.9802       12.9802       708.286       721.266    
  57  0.900259     -0.105073      -3.55661       3.55661       661.185       664.741    
  58  0.664217     -0.409147      -13.8492       13.8492       795.069       808.918    
  59  0.480162     -0.733633      -24.8326       24.8326       947.149       971.982    
  60  0.631979     -0.458899      -15.5332       15.5332       963.512       979.045    
  61  0.630584E-01  -2.76369      -93.5479       93.5479       990.121       1083.67    
  62  0.414870     -0.879789      -29.7799       29.7799       1106.72       1136.50    
  63  0.696307     -0.361965      -12.2521       12.2521       1202.97       1215.22    
  64  0.785460     -0.241485      -8.17400       8.17400       1122.00       1130.18    
  65  0.753941E-01  -2.58503      -87.5002       87.5002       1221.87       1309.37    
  66  0.496540E-01  -3.00268      -101.637       101.637       1328.06       1429.70    
  67  0.458202     -0.780444      -26.4172       26.4172       1424.58       1450.99    
  68  0.867132     -0.142564      -4.82561       4.82561       1520.18       1525.01    
  69  0.162196      -1.81895      -61.5695       61.5695       571.417       632.987    
loop,thermsimp(1:2)       10   62.5501       5.72421    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83        605.97          1.01          0.36         14.08          5.55          0.01         21.00
Just calling func    0   0         21.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    605.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:       10
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       11
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       82      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.236443      -1.44205      -48.8117       48.8117       364.118       412.929    
   2  0.140885      -1.95981      -66.3373       66.3373       362.241       428.578    
   3  0.989167     -0.108921E-01 -0.368685      0.368685       367.317       367.685    
   4  0.678196     -0.388319      -13.1442       13.1442       364.389       377.533    
   5  0.519526     -0.654838      -22.1655       22.1655       374.663       396.828    
   6  0.147818      -1.91177      -64.7113       64.7113       369.662       434.373    
   7  0.440288     -0.820326      -27.7671       27.7671       377.061       404.828    
   8  0.472652     -0.749396      -25.3662       25.3662       358.528       383.894    
   9  0.423856     -0.858362      -29.0546       29.0546       365.773       394.827    
  10  0.853427     -0.158495      -5.36487       5.36487       381.085       386.450    
  11  0.230868      -1.46591      -49.6193       49.6193       376.192       425.811    
  12  0.556184     -0.586657      -19.8577       19.8577       388.383       408.241    
  13  0.226311      -1.48585      -50.2942       50.2942       369.701       419.995    
  14  0.327807      -1.11533      -37.7527       37.7527       375.089       412.841    
  15  0.141329E-02  -6.56184      -222.111       222.111       375.581       597.692    
  16  0.211560      -1.55325      -52.5757       52.5757       366.411       418.987    
  17  0.893110     -0.113046      -3.82648       3.82648       393.934       397.760    
  18  0.250919      -1.38263      -46.8004       46.8004       389.002       435.803    
  19  0.236218      -1.44300      -48.8439       48.8439       377.360       426.204    
  20  0.446666     -0.805943      -27.2803       27.2803       386.862       414.142    
  21  0.476973     -0.740295      -25.0582       25.0582       403.219       428.277    
  22  0.371424     -0.990410      -33.5242       33.5242       378.273       411.798    
  23  0.416395     -0.876122      -29.6557       29.6557       376.578       406.234    
  24  0.386728     -0.950034      -32.1576       32.1576       398.856       431.013    
  25  0.864178     -0.145977      -4.94115       4.94115       357.798       362.739    
  26  0.669442     -0.401310      -13.5839       13.5839       370.669       384.252    
  27  0.530151     -0.634593      -21.4803       21.4803       381.049       402.529    
  28  0.673834     -0.394771      -13.3626       13.3626       402.368       415.731    
  29  0.466305     -0.762915      -25.8238       25.8238       434.191       460.015    
  30  0.604354     -0.503594      -17.0461       17.0461       376.099       393.145    
  31  0.655746E-01  -2.72457      -92.2235       92.2235       395.584       487.808    
  32  0.159546      -1.83542      -62.1269       62.1269       416.110       478.237    
  33  0.455599     -0.786142      -26.6100       26.6100       403.304       429.914    
  34  0.447393     -0.804318      -27.2253       27.2253       381.984       409.209    
  35  0.632446     -0.458160      -15.5082       15.5082       417.257       432.765    
  36  0.997691     -0.231136E-02 -0.782369E-01  0.782369E-01   372.198       372.277    
  37  0.301220      -1.19992      -40.6158       40.6158       373.866       414.482    
  38  0.849136E-01  -2.46612      -83.4754       83.4754       357.824       441.299    
  39  0.196371      -1.62775      -55.0975       55.0975       465.923       521.021    
  40  0.691835     -0.368408      -12.4702       12.4702       464.340       476.811    
  41  0.870763     -0.138385      -4.68418       4.68418       381.262       385.947    
  42  0.672958E-01  -2.69866      -91.3465       91.3465       448.828       540.175    
  43  0.378851     -0.970611      -32.8541       32.8541       450.832       483.686    
  44  0.414447     -0.880810      -29.8144       29.8144       397.839       427.653    
  45  0.647775     -0.434212      -14.6976       14.6976       491.031       505.729    
  46  0.298273      -1.20975      -40.9485       40.9485       528.046       568.994    
  47  0.633840     -0.455959      -15.4337       15.4337       474.148       489.582    
  48  0.218661      -1.52023      -51.4582       51.4582       483.567       535.025    
  49  0.997247     -0.275701E-02 -0.933215E-01  0.933215E-01   505.004       505.098    
  50  0.131439E-01  -4.33180      -146.626       146.626       435.963       582.590    
  51  0.221429E-01  -3.81024      -128.972       128.972       575.025       703.998    
  52  0.765376E-02  -4.87256      -164.931       164.931       531.606       696.537    
  53  0.108165      -2.22409      -75.2831       75.2831       584.229       659.512    
  54  0.157719      -1.84694      -62.5169       62.5169       571.417       633.934    
  55  0.756490     -0.279066      -9.44608       9.44608       459.873       469.319    
  56  0.465584     -0.764463      -25.8762       25.8762       661.185       687.061    
  57  0.240911E-01  -3.72591      -126.118       126.118       708.286       834.404    
  58  0.330489E-01  -3.40977      -115.417       115.417       672.280       787.696    
  59  0.175030E-01  -4.04538      -136.932       136.932       795.069       932.001    
  60  0.518408     -0.656992      -22.2384       22.2384       947.149       969.387    
  61  0.686999     -0.375422      -12.7076       12.7076       963.512       976.220    
  62  0.919970     -0.834144E-01  -2.82348       2.82348       990.121       992.944    
  63  0.321196      -1.13570      -38.4423       38.4423       1122.00       1160.44    
  64  0.832970     -0.182758      -6.18615       6.18615       1106.72       1112.91    
  65  0.208660      -1.56705      -53.0428       53.0428       1202.97       1256.02    
  66  0.211985      -1.55124      -52.5077       52.5077       1221.87       1274.38    
  67  0.948360     -0.530207E-01  -1.79469       1.79469       1328.06       1329.86    
  68  0.228335      -1.47694      -49.9927       49.9927       1424.58       1474.57    
  69  0.929665     -0.729310E-01  -2.46863       2.46863       605.970       608.439    
loop,thermsimp(1:2)       11   48.8117       66.3373    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84        488.28          1.00          0.37         14.08          5.58          0.01         21.03
Just calling func    0   0         21.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    488.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:       11
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       12
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       83      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.425999     -0.853317      -28.8838       28.8838       357.798       386.682    
   2  0.635841     -0.452806      -15.3270       15.3270       367.317       382.644    
   3  0.246659      -1.39975      -47.3799       47.3799       372.198       419.578    
   4  0.470124     -0.754760      -25.5478       25.5478       364.389       389.937    
   5  0.285015      -1.25521      -42.4876       42.4876       358.528       401.015    
   6  0.482126     -0.729549      -24.6944       24.6944       370.669       395.363    
   7  0.920737E-01  -2.38517      -80.7352       80.7352       381.262       461.998    
   8  0.294578      -1.22221      -41.3705       41.3705       381.085       422.455    
   9  0.300188      -1.20334      -40.7319       40.7319       376.099       416.830    
  10  0.402618     -0.909767      -30.7946       30.7946       365.773       396.567    
  11  0.907093     -0.975100E-01  -3.30060       3.30060       374.663       377.964    
  12  0.896494     -0.109264      -3.69846       3.69846       393.934       397.632    
  13  0.412064     -0.886577      -30.0096       30.0096       381.049       411.058    
  14  0.971660     -0.287491E-01 -0.973125      0.973125       377.061       378.034    
  15  0.939388     -0.625269E-01  -2.11646       2.11646       376.578       378.695    
  16  0.910105     -0.941954E-01  -3.18841       3.18841       388.383       391.572    
  17  0.884020     -0.123275      -4.17273       4.17273       381.984       386.156    
  18  0.812111     -0.208119      -7.04458       7.04458       378.273       385.318    
  19  0.556119     -0.586773      -19.8616       19.8616       375.089       394.950    
  20  0.796980     -0.226925      -7.68116       7.68116       364.118       371.799    
  21  0.903877     -0.101062      -3.42083       3.42083       386.862       390.283    
  22  0.784602     -0.242578      -8.21100       8.21100       373.866       382.077    
  23  0.522504     -0.649122      -21.9721       21.9721       402.368       424.340    
  24  0.850426E-01  -2.46460      -83.4240       83.4240       366.411       449.835    
  25  0.549720     -0.598346      -20.2533       20.2533       369.701       389.955    
  26  0.946913     -0.545479E-01  -1.84639       1.84639       376.192       378.038    
  27  0.798033     -0.225606      -7.63651       7.63651       377.360       384.997    
  28  0.937633     -0.643969E-01  -2.17976       2.17976       397.839       400.019    
  29  0.771261     -0.259728      -8.79151       8.79151       403.219       412.011    
  30  0.185408      -1.68520      -57.0421       57.0421       362.241       419.283    
  31  0.228621      -1.47569      -49.9504       49.9504       403.304       453.254    
  32  0.438344     -0.824751      -27.9169       27.9169       398.856       426.773    
  33  0.472635     -0.749432      -25.3674       25.3674       417.257       442.624    
  34  0.693278     -0.366325      -12.3997       12.3997       369.662       382.062    
  35  0.741925     -0.298508      -10.1041       10.1041       389.002       399.106    
  36  0.240604      -1.42460      -48.2211       48.2211       357.824       406.045    
  37  0.481902     -0.730015      -24.7102       24.7102       434.191       458.901    
  38  0.799056     -0.224324      -7.59311       7.59311       459.873       467.466    
  39  0.692048     -0.368099      -12.4597       12.4597       464.340       476.800    
  40  0.759262E-01  -2.57799      -87.2622       87.2622       416.110       503.372    
  41  0.854151     -0.157647      -5.33617       5.33617       450.832       456.168    
  42  0.644038     -0.439997      -14.8934       14.8934       395.584       410.478    
  43  0.580267     -0.544267      -18.4228       18.4228       474.148       492.571    
  44  0.931999     -0.704237E-01  -2.38376       2.38376       505.004       507.388    
  45  0.407566     -0.897551      -30.3811       30.3811       491.031       521.412    
  46  0.586148     -0.534183      -18.0815       18.0815       465.923       484.005    
  47  0.739589     -0.301661      -10.2109       10.2109       483.567       493.778    
  48  0.868601     -0.140872      -4.76835       4.76835       448.828       453.596    
  49  0.534666     -0.626114      -21.1932       21.1932       528.046       549.239    
  50  0.912131     -0.919721E-01  -3.11315       3.11315       435.963       439.077    
  51  0.928361     -0.743345E-01  -2.51614       2.51614       375.581       378.097    
  52  0.846963E-01  -2.46868      -83.5621       83.5621       605.970       689.532    
  53  0.840828     -0.173368      -5.86832       5.86832       571.417       577.285    
  54  0.656689     -0.420545      -14.2350       14.2350       584.229       598.463    
  55  0.809399     -0.211463      -7.15778       7.15778       661.185       668.343    
  56  0.226820      -1.48360      -50.2181       50.2181       531.606       581.824    
  57  0.334450      -1.09527      -37.0736       37.0736       575.025       612.099    
  58  0.345447      -1.06292      -35.9785       35.9785       672.280       708.258    
  59  0.817968     -0.200932      -6.80132       6.80132       708.286       715.087    
  60  0.811039     -0.209439      -7.08926       7.08926       795.069       802.158    
  61  0.754038     -0.282312      -9.55594       9.55594       947.149       956.705    
  62  0.906872     -0.977540E-01  -3.30886       3.30886       963.512       966.821    
  63  0.492867     -0.707515      -23.9486       23.9486       990.121       1014.07    
  64  0.968156     -0.323621E-01  -1.09542       1.09542       1106.72       1107.82    
  65  0.204627      -1.58657      -53.7035       53.7035       1122.00       1175.71    
  66  0.167371      -1.78754      -60.5063       60.5063       1202.97       1263.48    
  67  0.534260     -0.626872      -21.2189       21.2189       1221.87       1243.09    
  68  0.389408E-02  -5.54830      -187.804       187.804       1328.06       1515.87    
  69  0.326419      -1.11957      -37.8963       37.8963       488.277       526.173    
loop,thermsimp(1:2)       12   28.8838       15.3270    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85        506.04          1.00          0.37         14.15          5.46          0.01         20.98
Just calling func    0   0         20.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    506.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:       12
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       13
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       84      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.933256     -0.690760E-01  -2.33814       2.33814       364.118       366.456    
   2  0.721471     -0.326463      -11.0504       11.0504       374.663       385.713    
   3  0.991206     -0.883310E-02 -0.298990      0.298990       377.061       377.360    
   4  0.628850     -0.463863      -15.7012       15.7012       376.192       391.893    
   5  0.873552     -0.135188      -4.57596       4.57596       375.581       380.157    
   6  0.364458      -1.00934      -34.1652       34.1652       376.578       410.744    
   7  0.187260      -1.67526      -56.7056       56.7056       369.662       426.367    
   8  0.834213E-01  -2.48385      -84.0756       84.0756       373.866       457.942    
   9  0.102335E-01  -4.58209      -155.099       155.099       367.317       522.415    
  10  0.115664      -2.15707      -73.0142       73.0142       377.360       450.374    
  11  0.152927      -1.87779      -63.5612       63.5612       378.273       441.835    
  12  0.906717     -0.979253E-01  -3.31466       3.31466       381.984       385.298    
  13  0.352493      -1.04273      -35.2951       35.2951       357.798       393.093    
  14  0.928728     -0.739392E-01  -2.50276       2.50276       364.389       366.892    
  15  0.212925      -1.54682      -52.3580       52.3580       369.701       422.059    
  16  0.173429      -1.75199      -59.3028       59.3028       386.862       446.165    
  17  0.265935      -1.32450      -44.8329       44.8329       388.383       433.216    
  18  0.385207     -0.953975      -32.2910       32.2910       375.089       407.380    
  19  0.342579      -1.07125      -36.2607       36.2607       370.669       406.929    
  20  0.509031     -0.675246      -22.8563       22.8563       365.773       388.629    
  21  0.240319      -1.42579      -48.2614       48.2614       393.934       442.195    
  22  0.569520E-01  -2.86555      -96.9955       96.9955       389.002       485.998    
  23  0.444981     -0.809723      -27.4082       27.4082       397.839       425.247    
  24  0.711919     -0.339792      -11.5016       11.5016       358.528       370.029    
  25  0.756107     -0.279572      -9.46319       9.46319       357.824       367.287    
  26  0.200882      -1.60504      -54.3287       54.3287       395.584       449.913    
  27  0.129594      -2.04335      -69.1651       69.1651       381.049       450.214    
  28  0.303429      -1.19261      -40.3684       40.3684       403.219       443.588    
  29  0.517279     -0.659172      -22.3122       22.3122       376.099       398.411    
  30  0.168640      -1.77999      -60.2506       60.2506       362.241       422.491    
  31  0.298794      -1.20800      -40.8895       40.8895       372.198       413.088    
  32  0.873350     -0.135419      -4.58379       4.58379       381.085       385.669    
  33  0.513404     -0.666692      -22.5668       22.5668       402.368       424.935    
  34  0.927523     -0.752380E-01  -2.54672       2.54672       398.856       401.403    
  35  0.161036E-02  -6.43130      -217.692       217.692       435.963       653.655    
  36  0.969090     -0.313979E-01  -1.06278       1.06278       417.257       418.319    
  37  0.571678E-01  -2.86176      -96.8675       96.8675       366.411       463.278    
  38  0.210142      -1.55997      -52.8033       52.8033       403.304       456.107    
  39  0.467222     -0.760950      -25.7573       25.7573       448.828       474.585    
  40  0.139157      -1.97215      -66.7550       66.7550       450.832       517.587    
  41  0.174367      -1.74660      -59.1203       59.1203       434.191       493.312    
  42  0.859941     -0.150891      -5.10750       5.10750       381.262       386.370    
  43  0.920812E-01  -2.38508      -80.7324       80.7324       459.873       540.606    
  44  0.181021      -1.70914      -57.8526       57.8526       464.340       522.193    
  45  0.300729      -1.20154      -40.6709       40.6709       465.923       506.594    
  46  0.455680     -0.785965      -26.6040       26.6040       474.148       500.752    
  47  0.762925     -0.270595      -9.15935       9.15935       483.567       492.726    
  48  0.886394     -0.120594      -4.08196       4.08196       416.110       420.192    
  49  0.357149      -1.02960      -34.8509       34.8509       505.004       539.855    
  50  0.311312      -1.16696      -39.5003       39.5003       491.031       530.531    
  51  0.453744E-01  -3.09281      -104.688       104.688       488.277       592.965    
  52  0.705724     -0.348531      -11.7974       11.7974       528.046       539.843    
  53  0.892694     -0.113512      -3.84225       3.84225       571.417       575.259    
  54  0.539294E-01  -2.92008      -98.8414       98.8414       531.606       630.448    
  55  0.221524      -1.50722      -51.0178       51.0178       584.229       635.246    
  56  0.661009     -0.413988      -14.0130       14.0130       575.025       589.038    
  57  0.152587      -1.88002      -63.6365       63.6365       661.185       724.821    
  58  0.667355     -0.404433      -13.6896       13.6896       605.970       619.660    
  59  0.594785     -0.519556      -17.5864       17.5864       672.280       689.866    
  60  0.755712     -0.280095      -9.48088       9.48088       708.286       717.767    
  61  0.126380      -2.06846      -70.0152       70.0152       795.069       865.084    
  62  0.410593     -0.890153      -30.1307       30.1307       947.149       977.280    
  63  0.142168      -1.95074      -66.0305       66.0305       963.512       1029.54    
  64  0.577648     -0.548791      -18.5759       18.5759       990.121       1008.70    
  65  0.302353      -1.19616      -40.4886       40.4886       1106.72       1147.21    
  66  0.599069     -0.512378      -17.3434       17.3434       1122.00       1139.35    
  67  0.833512     -0.182107      -6.16412       6.16412       1221.87       1228.03    
  68  0.736870     -0.305344      -10.3355       10.3355       1202.97       1213.31    
  69  0.372166     -0.988415      -33.4567       33.4567       506.040       539.496    
loop,thermsimp(1:2)       13   2.33814       11.0504    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86        580.28          1.00          0.37         13.99          5.62          0.01         20.99
Just calling func    0   0         20.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    580.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:       13
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       14
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       85      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.598353     -0.513575      -17.3839       17.3839       364.118       381.502    
   2  0.567232     -0.566987      -19.1919       19.1919       364.389       383.581    
   3  0.264105E-01  -3.63399      -123.007       123.007       357.824       480.831    
   4  0.508306     -0.676672      -22.9046       22.9046       358.528       381.432    
   5  0.436021     -0.830065      -28.0967       28.0967       377.061       405.158    
   6  0.726926     -0.318930      -10.7954       10.7954       375.581       386.376    
   7  0.147643      -1.91296      -64.7516       64.7516       381.984       446.735    
   8  0.746595     -0.292233      -9.89174       9.89174       381.085       390.977    
   9  0.792921     -0.232032      -7.85403       7.85403       374.663       382.517    
  10  0.483115     -0.727502      -24.6251       24.6251       381.262       405.887    
  11  0.818996     -0.199676      -6.75881       6.75881       365.773       372.532    
  12  0.633919     -0.455834      -15.4295       15.4295       376.192       391.621    
  13  0.101820E-01  -4.58713      -155.269       155.269       357.798       513.068    
  14  0.948760     -0.525991E-01  -1.78042       1.78042       376.099       377.879    
  15  0.282393      -1.26446      -42.8004       42.8004       398.856       441.656    
  16  0.523290     -0.647619      -21.9212       21.9212       370.669       392.590    
  17  0.776984     -0.252335      -8.54125       8.54125       375.089       383.630    
  18  0.875198     -0.133305      -4.51223       4.51223       376.578       381.091    
  19  0.445609     -0.808314      -27.3605       27.3605       372.198       399.559    
  20  0.824844     -0.192561      -6.51796       6.51796       417.257       423.775    
  21  0.973888E-01  -2.32904      -78.8355       78.8355       416.110       494.946    
  22  0.831483     -0.184545      -6.24664       6.24664       369.701       375.948    
  23  0.169065      -1.77747      -60.1654       60.1654       362.241       422.406    
  24  0.345850      -1.06175      -35.9391       35.9391       402.368       438.308    
  25  0.706818     -0.346982      -11.7450       11.7450       397.839       409.584    
  26  0.183187      -1.69725      -57.4499       57.4499       369.662       427.112    
  27  0.118201      -2.13537      -72.2798       72.2798       388.383       460.663    
  28  0.368074     -0.999472      -33.8310       33.8310       378.273       412.104    
  29  0.212940      -1.54675      -52.3556       52.3556       393.934       446.289    
  30  0.340707      -1.07673      -36.4462       36.4462       403.219       439.665    
  31  0.689517     -0.371763      -12.5838       12.5838       386.862       399.446    
  32  0.890367     -0.116122      -3.93058       3.93058       395.584       399.515    
  33  0.701525     -0.354499      -11.9994       11.9994       381.049       393.048    
  34  0.985039E-01  -2.31766      -78.4501       78.4501       377.360       455.810    
  35  0.318948      -1.14273      -38.6800       38.6800       403.304       441.984    
  36  0.294738      -1.22167      -41.3521       41.3521       373.866       415.218    
  37  0.464121E-03  -7.67537      -259.802       259.802       366.411       626.213    
  38  0.672959E-02  -5.00124      -169.286       169.286       448.828       618.114    
  39  0.773124     -0.257316      -8.70985       8.70985       389.002       397.712    
  40  0.628792     -0.463954      -15.7043       15.7043       483.567       499.271    
  41  0.577748     -0.548618      -18.5701       18.5701       434.191       452.761    
  42  0.850099     -0.162403      -5.49715       5.49715       474.148       479.645    
  43  0.177455      -1.72904      -58.5260       58.5260       465.923       524.449    
  44  0.703344     -0.351909      -11.9117       11.9117       450.832       462.743    
  45  0.982074     -0.180890E-01 -0.612294      0.612294       464.340       464.953    
  46  0.400323     -0.915483      -30.9881       30.9881       367.317       398.305    
  47  0.325453      -1.12254      -37.9966       37.9966       491.031       529.028    
  48  0.114423      -2.16786      -73.3795       73.3795       506.040       579.419    
  49  0.331636      -1.10372      -37.3596       37.3596       528.046       565.405    
  50  0.313057      -1.16137      -39.3110       39.3110       505.004       544.315    
  51  0.481965     -0.729885      -24.7058       24.7058       459.873       484.579    
  52  0.112297      -2.18661      -74.0143       74.0143       571.417       645.431    
  53  0.731489     -0.312673      -10.5836       10.5836       575.025       585.609    
  54  0.480237     -0.733476      -24.8273       24.8273       488.277       513.104    
  55  0.455773     -0.785760      -26.5971       26.5971       605.970       632.567    
  56  0.134257      -2.00800      -67.9686       67.9686       531.606       599.575    
  57  0.600431     -0.510108      -17.2666       17.2666       584.229       601.495    
  58  0.497267     -0.698628      -23.6478       23.6478       435.963       459.611    
  59  0.823050     -0.194739      -6.59168       6.59168       672.280       678.871    
  60  0.180039      -1.71458      -58.0367       58.0367       708.286       766.323    
  61  0.654349     -0.424114      -14.3558       14.3558       661.185       675.541    
  62  0.536438     -0.622805      -21.0812       21.0812       795.069       816.150    
  63  0.266562      -1.32215      -44.7533       44.7533       947.149       991.902    
  64  0.925009     -0.779522E-01  -2.63859       2.63859       990.121       992.759    
  65  0.104826      -2.25546      -76.3446       76.3446       963.512       1039.86    
  66  0.320162      -1.13893      -38.5514       38.5514       1122.00       1160.55    
  67  0.762371     -0.271321      -9.18392       9.18392       1106.72       1115.91    
  68  0.399632     -0.917212      -31.0466       31.0466       1202.97       1234.02    
  69  0.191908      -1.65074      -55.8757       55.8757       580.284       636.160    
loop,thermsimp(1:2)       14   17.3839       19.1919    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     87        471.28          1.00          0.37         14.07          5.51          0.01         20.96
Just calling func    0   0         20.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    471.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:       14
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       15
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       86      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987642     -0.124347E-01 -0.420901      0.420901       365.773       366.194    
   2  0.296361E-01  -3.51876      -119.106       119.106       369.701       488.807    
   3  0.675298     -0.392601      -13.2891       13.2891       376.099       389.388    
   4  0.543539     -0.609654      -20.6361       20.6361       376.578       397.215    
   5  0.352033      -1.04403      -35.3392       35.3392       358.528       393.867    
   6  0.991772     -0.826180E-02 -0.279653      0.279653       364.118       364.397    
   7  0.395605     -0.927340      -31.3894       31.3894       374.663       406.052    
   8  0.721653     -0.326211      -11.0419       11.0419       364.389       375.431    
   9  0.476176     -0.741968      -25.1148       25.1148       375.089       400.204    
  10  0.324088      -1.12674      -38.1389       38.1389       375.581       413.720    
  11  0.293401      -1.22622      -41.5060       41.5060       381.085       422.591    
  12  0.904603     -0.100259      -3.39364       3.39364       376.192       379.586    
  13  0.394431     -0.930312      -31.4900       31.4900       370.669       402.159    
  14  0.189862E-01  -3.96404      -134.178       134.178       381.049       515.227    
  15  0.849126     -0.163548      -5.53591       5.53591       389.002       394.538    
  16  0.646435     -0.436283      -14.7677       14.7677       367.317       382.084    
  17  0.109585      -2.21105      -74.8417       74.8417       386.862       461.704    
  18  0.968930E-01  -2.33415      -79.0083       79.0083       395.584       474.593    
  19  0.936835     -0.652477E-01  -2.20856       2.20856       372.198       374.407    
  20  0.414118E-01  -3.18419      -107.781       107.781       377.061       484.842    
  21  0.834510     -0.180911      -6.12362       6.12362       381.262       387.386    
  22  0.162194      -1.81896      -61.5699       61.5699       397.839       459.409    
  23  0.500513     -0.692121      -23.4275       23.4275       378.273       401.701    
  24  0.799489     -0.223783      -7.57480       7.57480       373.866       381.441    
  25  0.790595     -0.234969      -7.95344       7.95344       362.241       370.194    
  26  0.606427     -0.500170      -16.9302       16.9302       417.257       434.187    
  27  0.591092     -0.525783      -17.7972       17.7972       369.662       387.459    
  28  0.818240     -0.200600      -6.79009       6.79009       402.368       409.159    
  29  0.112578      -2.18411      -73.9297       73.9297       403.219       477.149    
  30  0.745756     -0.293357      -9.92980       9.92980       398.856       408.786    
  31  0.422817     -0.860816      -29.1376       29.1376       403.304       432.442    
  32  0.665987E-01  -2.70907      -91.6989       91.6989       393.934       485.632    
  33  0.577479     -0.549084      -18.5859       18.5859       381.984       400.570    
  34  0.130705      -2.03482      -68.8762       68.8762       434.191       503.067    
  35  0.960776     -0.400137E-01  -1.35442       1.35442       377.360       378.715    
  36  0.624520     -0.470772      -15.9351       15.9351       435.963       451.898    
  37  0.592928     -0.522682      -17.6922       17.6922       388.383       406.076    
  38  0.801916     -0.220752      -7.47220       7.47220       450.832       458.304    
  39  0.464413     -0.766980      -25.9614       25.9614       464.340       490.302    
  40  0.965055     -0.355697E-01  -1.20399       1.20399       474.148       475.352    
  41  0.468335     -0.758572      -25.6768       25.6768       357.824       383.501    
  42  0.355929      -1.03302      -34.9667       34.9667       459.873       494.840    
  43  0.817600     -0.201382      -6.81657       6.81657       416.110       422.927    
  44  0.639544     -0.447000      -15.1304       15.1304       483.567       498.697    
  45  0.700141     -0.356473      -12.0662       12.0662       357.798       369.865    
  46  0.499640E-01  -2.99645      -101.427       101.427       488.277       589.704    
  47  0.812687     -0.207409      -7.02057       7.02057       465.923       472.944    
  48  0.702491     -0.353123      -11.9528       11.9528       491.031       502.984    
  49  0.729171     -0.315847      -10.6911       10.6911       505.004       515.695    
  50  0.293029      -1.22748      -41.5489       41.5489       528.046       569.595    
  51  0.377163     -0.975077      -33.0053       33.0053       506.040       539.045    
  52  0.555208     -0.588413      -19.9171       19.9171       575.025       594.942    
  53  0.608865     -0.496160      -16.7944       16.7944       531.606       548.401    
  54  0.484767     -0.724086      -24.5095       24.5095       584.229       608.738    
  55  0.815152E-01  -2.50697      -84.8579       84.8579       448.828       533.686    
  56  0.398980     -0.918844      -31.1018       31.1018       366.411       397.513    
  57  0.775528     -0.254211      -8.60477       8.60477       605.970       614.575    
  58  0.259695      -1.34825      -45.6367       45.6367       580.284       625.921    
  59  0.645110     -0.438334      -14.8371       14.8371       571.417       586.254    
  60  0.219623      -1.51584      -51.3095       51.3095       661.185       712.494    
  61  0.707681     -0.345761      -11.7036       11.7036       672.280       683.983    
  62  0.923129     -0.799868E-01  -2.70746       2.70746       708.286       710.993    
  63  0.190596      -1.65760      -56.1078       56.1078       795.069       851.177    
  64  0.493089     -0.707065      -23.9334       23.9334       947.149       971.082    
  65  0.787884     -0.238405      -8.06973       8.06973       990.121       998.190    
  66  0.621341     -0.475875      -16.1078       16.1078       963.512       979.620    
  67  0.248321      -1.39303      -47.1526       47.1526       1106.72       1153.88    
  68  0.984649     -0.154704E-01 -0.523656      0.523656       1122.00       1122.53    
  69  0.770724     -0.260425      -8.81510       8.81510       471.280       480.095    
loop,thermsimp(1:2)       15  0.420901       119.106    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88        611.98          1.00          0.37         14.11          5.55          0.01         21.04
Just calling func    0   0         21.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    611.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:       15
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       16
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       87      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.602212     -0.507146      -17.1663       17.1663       364.118       381.284    
   2  0.631178     -0.460167      -15.5761       15.5761       365.773       381.349    
   3  0.607907E-01  -2.80032      -94.7876       94.7876       357.798       452.586    
   4  0.921181     -0.820990E-01  -2.77896       2.77896       362.241       365.020    
   5  0.247824      -1.39504      -47.2205       47.2205       372.198       419.419    
   6  0.927358     -0.754157E-01  -2.55274       2.55274       364.389       366.942    
   7  0.685739     -0.377258      -12.7698       12.7698       377.360       390.130    
   8  0.427192     -0.850522      -28.7892       28.7892       376.192       404.981    
   9  0.235590E-01  -3.74825      -126.874       126.874       373.866       500.740    
  10  0.932116     -0.702978E-01  -2.37950       2.37950       367.317       369.696    
  11  0.300031      -1.20387      -40.7497       40.7497       357.824       398.574    
  12  0.306049      -1.18401      -40.0774       40.0774       381.262       421.340    
  13  0.541067     -0.614212      -20.7904       20.7904       369.662       390.452    
  14  0.199754      -1.61067      -54.5194       54.5194       376.099       430.618    
  15  0.510284     -0.672788      -22.7731       22.7731       358.528       381.301    
  16  0.814307     -0.205418      -6.95316       6.95316       389.002       395.955    
  17  0.924193     -0.788346E-01  -2.66846       2.66846       376.578       379.247    
  18  0.282516      -1.26402      -42.7857       42.7857       366.411       409.197    
  19  0.809975     -0.210752      -7.13371       7.13371       375.089       382.223    
  20  0.233711      -1.45367      -49.2051       49.2051       381.984       431.189    
  21  0.333954      -1.09675      -37.1239       37.1239       378.273       415.397    
  22  0.477053E-01  -3.04271      -102.992       102.992       370.669       473.661    
  23  0.658446     -0.417873      -14.1445       14.1445       374.663       388.807    
  24  0.628233E-01  -2.76743      -93.6744       93.6744       388.383       482.058    
  25  0.814411     -0.205290      -6.94883       6.94883       398.856       405.805    
  26  0.245308      -1.40524      -47.5658       47.5658       402.368       449.934    
  27  0.569693     -0.562657      -19.0453       19.0453       375.581       394.626    
  28  0.583486     -0.538735      -18.2356       18.2356       381.085       399.320    
  29  0.732472     -0.311330      -10.5382       10.5382       416.110       426.648    
  30  0.925393     -0.775369E-01  -2.62454       2.62454       403.304       405.929    
  31  0.528597     -0.637529      -21.5796       21.5796       417.257       438.836    
  32  0.828997     -0.187539      -6.34798       6.34798       435.963       442.311    
  33  0.433603     -0.835626      -28.2850       28.2850       450.832       479.117    
  34  0.804181     -0.217931      -7.37673       7.37673       397.839       405.216    
  35  0.867967E-01  -2.44419      -82.7330       82.7330       386.862       469.595    
  36  0.281319      -1.26827      -42.9293       42.9293       465.923       508.852    
  37  0.497793     -0.697571      -23.6120       23.6120       395.584       419.196    
  38  0.465558     -0.764520      -25.8781       25.8781       474.148       500.026    
  39  0.497611E-01  -3.00052      -101.564       101.564       403.219       504.784    
  40  0.268222      -1.31594      -44.5430       44.5430       471.280       515.823    
  41  0.663174     -0.410718      -13.9023       13.9023       377.061       390.963    
  42  0.983753     -0.163803E-01 -0.554456      0.554456       393.934       394.488    
  43  0.214173E-01  -3.84355      -130.100       130.100       369.701       499.801    
  44  0.928671     -0.740005E-01  -2.50483       2.50483       464.340       466.845    
  45  0.783444     -0.244055      -8.26100       8.26100       459.873       468.134    
  46  0.495099     -0.702998      -23.7957       23.7957       483.567       507.362    
  47  0.318334      -1.14465      -38.7452       38.7452       491.031       529.776    
  48  0.442591     -0.815109      -27.5905       27.5905       434.191       461.782    
  49  0.246382      -1.40087      -47.4179       47.4179       381.049       428.467    
  50  0.733525     -0.309894      -10.4896       10.4896       505.004       515.494    
  51  0.810196     -0.210479      -7.12447       7.12447       448.828       455.952    
  52  0.908239E-01  -2.39883      -81.1978       81.1978       506.040       587.237    
  53  0.948144     -0.532492E-01  -1.80243       1.80243       531.606       533.409    
  54  0.897360     -0.108298      -3.66576       3.66576       528.046       531.711    
  55  0.315634      -1.15317      -39.0335       39.0335       571.417       610.451    
  56  0.290734      -1.23535      -41.8151       41.8151       488.277       530.092    
  57  0.994042     -0.597595E-02 -0.202279      0.202279       575.025       575.228    
  58  0.485471     -0.722635      -24.4604       24.4604       584.229       608.689    
  59  0.755552     -0.280307      -9.48807       9.48807       605.970       615.458    
  60  0.841555     -0.172504      -5.83905       5.83905       580.284       586.123    
  61  0.502611E-01  -2.99052      -101.226       101.226       672.280       773.506    
  62  0.326944      -1.11797      -37.8419       37.8419       708.286       746.128    
  63  0.595085     -0.519051      -17.5693       17.5693       661.185       678.754    
  64  0.322603      -1.13133      -38.2943       38.2943       795.069       833.364    
  65  0.991224     -0.881445E-02 -0.298359      0.298359       947.149       947.447    
  66  0.806839     -0.214631      -7.26500       7.26500       963.512       970.777    
  67  0.856395     -0.155024      -5.24739       5.24739       990.121       995.368    
  68  0.569074     -0.563745      -19.0821       19.0821       1122.00       1141.08    
  69  0.498590     -0.695972      -23.5578       23.5578       611.982       635.540    
loop,thermsimp(1:2)       16   17.1663       15.5761    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     89        355.34          1.00          0.37         14.07          5.53          0.02         20.99
Just calling func    0   0         20.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     90        413.92          1.00          0.36         14.06          5.52          0.01         20.95
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    355.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:       16
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       17
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       89
neval,tstepnext:       89      89

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954044     -0.470456E-01  -1.59244       1.59244       362.241       363.833    
   2  0.555006     -0.588776      -19.9294       19.9294       364.389       384.318    
   3  0.999620     -0.380444E-03 -0.128776E-01  0.128776E-01   367.317       367.330    
   4  0.126665      -2.06621      -69.9389       69.9389       376.578       446.517    
   5  0.425853     -0.853660      -28.8954       28.8954       364.118       393.013    
   6  0.710277     -0.342100      -11.5797       11.5797       358.528       370.108    
   7  0.766463     -0.265969      -9.00275       9.00275       365.773       374.776    
   8  0.315485      -1.15364      -39.0495       39.0495       375.089       414.138    
   9  0.460966     -0.774432      -26.2136       26.2136       374.663       400.877    
  10  0.716434E-01  -2.63605      -89.2275       89.2275       377.360       466.588    
  11  0.524519     -0.645274      -21.8418       21.8418       369.662       391.504    
  12  0.861110     -0.149533      -5.06153       5.06153       377.061       382.123    
  13  0.293581      -1.22560      -41.4852       41.4852       393.934       435.419    
  14  0.672970     -0.396055      -13.4060       13.4060       375.581       388.987    
  15  0.978694     -0.215368E-01 -0.728995      0.728995       389.002       389.731    
  16  0.751168     -0.286126      -9.68503       9.68503       357.824       367.509    
  17  0.666362     -0.405922      -13.7400       13.7400       381.085       394.825    
  18  0.941025     -0.607861E-01  -2.05754       2.05754       376.192       378.250    
  19  0.606287     -0.500402      -16.9381       16.9381       397.839       414.777    
  20  0.956008     -0.449886E-01  -1.52281       1.52281       398.856       400.379    
  21  0.921017     -0.822772E-01  -2.78499       2.78499       403.304       406.089    
  22  0.741145     -0.299559      -10.1397       10.1397       366.411       376.551    
  23  0.942389     -0.593375E-01  -2.00851       2.00851       378.273       380.282    
  24  0.974752E-01  -2.32816      -78.8055       78.8055       395.584       474.390    
  25  0.525390     -0.643614      -21.7856       21.7856       372.198       393.984    
  26  0.498425     -0.696301      -23.5690       23.5690       381.262       404.831    
  27  0.864096     -0.146071      -4.94435       4.94435       416.110       421.055    
  28  0.428477E-01  -3.15010      -106.627       106.627       381.049       487.676    
  29  0.141255      -1.95719      -66.2486       66.2486       376.099       442.347    
  30  0.704919     -0.349672      -11.8360       11.8360       381.984       393.820    
  31  0.707839     -0.345539      -11.6961       11.6961       417.257       428.953    
  32  0.373599     -0.984571      -33.3266       33.3266       435.963       469.290    
  33  0.324318E-01  -3.42862      -116.055       116.055       402.368       518.423    
  34  0.133203      -2.01588      -68.2354       68.2354       357.798       426.034    
  35  0.329953E-02  -5.71398      -193.412       193.412       448.828       642.240    
  36  0.664668E-02  -5.01364      -169.706       169.706       434.191       603.897    
  37  0.396414     -0.925297      -31.3203       31.3203       464.340       495.661    
  38  0.485491     -0.722595      -24.4590       24.4590       459.873       484.332    
  39  0.996708     -0.329725E-02 -0.111608      0.111608       386.862       386.974    
  40  0.723646     -0.323453      -10.9485       10.9485       370.669       381.617    
  41  0.480674     -0.732567      -24.7966       24.7966       450.832       475.628    
  42  0.253556      -1.37217      -46.4464       46.4464       388.383       434.830    
  43  0.983305     -0.168360E-01 -0.569879      0.569879       369.701       370.271    
  44  0.443191     -0.813755      -27.5447       27.5447       474.148       501.693    
  45  0.968720     -0.317802E-01  -1.07572       1.07572       373.866       374.942    
  46  0.609193E-02  -5.10079      -172.656       172.656       403.219       575.875    
  47  0.485025     -0.723555      -24.4915       24.4915       483.567       508.058    
  48  0.852147     -0.159996      -5.41569       5.41569       465.923       471.339    
  49  0.526729     -0.641070      -21.6995       21.6995       505.004       526.704    
  50  0.215250      -1.53596      -51.9904       51.9904       471.280       523.270    
  51  0.715791     -0.334367      -11.3179       11.3179       491.031       502.349    
  52  0.279842      -1.27353      -43.1076       43.1076       488.277       531.385    
  53  0.992428     -0.760034E-02 -0.257263      0.257263       528.046       528.303    
  54  0.369862     -0.994625      -33.6669       33.6669       531.606       565.273    
  55  0.512065     -0.669304      -22.6552       22.6552       575.025       597.681    
  56  0.296127      -1.21697      -41.1929       41.1929       580.284       621.477    
  57  0.814211     -0.205536      -6.95716       6.95716       506.040       512.997    
  58  0.878801     -0.129197      -4.37316       4.37316       584.229       588.602    
  59  0.439842     -0.821340      -27.8014       27.8014       571.417       599.219    
  60  0.433853     -0.835049      -28.2655       28.2655       605.970       634.236    
  61  0.194737      -1.63610      -55.3803       55.3803       611.982       667.362    
  62  0.582132     -0.541057      -18.3142       18.3142       661.185       679.499    
  63  0.835683     -0.179507      -6.07609       6.07609       708.286       714.362    
  64  0.946238     -0.552613E-01  -1.87053       1.87053       672.280       674.150    
  65  0.815154     -0.204378      -6.91798       6.91798       795.069       801.987    
  66  0.620522     -0.477195      -16.1525       16.1525       947.149       963.302    
  67  0.867124     -0.142574      -4.82596       4.82596       963.512       968.338    
  68  0.775262     -0.254554      -8.61636       8.61636       990.121       998.737    
  69  0.508856     -0.675591      -22.8680       22.8680       355.343       378.211    
loop,thermsimp(1:2)       17   1.59244       19.9294    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     91        558.00          1.00          0.37         14.06          5.58          0.01         21.01
Just calling func    0   0         21.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    558.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    33.8489                89
loop is:       17
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    33.8489                89
loop is:       18
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    10.1547                99

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       99
neval,tstepnext:       90      99

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.580555     -0.543770      -5.52180       5.52180       362.241       367.763    
   2  0.507790E-01  -2.98027      -30.2637       30.2637       367.317       397.580    
   3  0.953901E-01  -2.34978      -23.8612       23.8612       357.824       381.685    
   4  0.374032     -0.983414      -9.98624       9.98624       358.528       368.514    
   5  0.114286      -2.16905      -22.0260       22.0260       369.701       391.727    
   6  0.919564     -0.838555E-01 -0.851525      0.851525       365.773       366.624    
   7  0.942438     -0.592848E-01 -0.602017      0.602017       373.866       374.468    
   8  0.437172     -0.827429      -8.40226       8.40226       366.411       374.813    
   9  0.860575E-01  -2.45274      -24.9067       24.9067       355.343       380.250    
  10  0.840181     -0.174138      -1.76832       1.76832       376.192       377.960    
  11  0.741720     -0.298783      -3.03404       3.03404       378.273       381.307    
  12  0.938363     -0.636185E-01 -0.646025      0.646025       370.669       371.315    
  13  0.724516     -0.322252      -3.27236       3.27236       377.061       380.333    
  14  0.294534      -1.22236      -12.4127       12.4127       364.389       376.802    
  15  0.327097      -1.11750      -11.3478       11.3478       386.862       398.210    
  16  0.255173      -1.36581      -13.8694       13.8694       375.581       389.450    
  17  0.610252     -0.493884      -5.01522       5.01522       389.002       394.017    
  18  0.104760      -2.25608      -22.9097       22.9097       369.662       392.572    
  19  0.560253     -0.579367      -5.88328       5.88328       364.118       370.001    
  20  0.961216     -0.395561E-01 -0.401679      0.401679       381.984       382.385    
  21  0.313742      -1.15918      -11.7711       11.7711       372.198       383.970    
  22  0.171352      -1.76404      -17.9132       17.9132       381.085       398.998    
  23  0.434673     -0.833160      -8.46046       8.46046       398.856       407.316    
  24  0.816522     -0.202702      -2.05837       2.05837       374.663       376.721    
  25  0.633625E-01  -2.75888      -28.0155       28.0155       381.262       409.278    
  26  0.391819     -0.936955      -9.51446       9.51446       403.304       412.818    
  27  0.955416     -0.456089E-01 -0.463143      0.463143       375.089       375.552    
  28  0.889592     -0.116992      -1.18801       1.18801       397.839       399.027    
  29  0.480292     -0.733361      -7.44703       7.44703       416.110       423.557    
  30  0.101697      -2.28575      -23.2111       23.2111       357.798       381.009    
  31  0.472137     -0.750485      -7.62092       7.62092       417.257       424.878    
  32  0.236497      -1.44182      -14.6412       14.6412       388.383       403.025    
  33  0.166160      -1.79480      -18.2256       18.2256       393.934       412.159    
  34  0.250541      -1.38413      -14.0554       14.0554       376.099       390.154    
  35  0.517682     -0.658395      -6.68577       6.68577       376.578       383.264    
  36  0.244599E-02  -6.01330      -61.0631       61.0631       377.360       438.423    
  37  0.122322E-02  -6.70626      -68.0998       68.0998       435.963       504.063    
  38  0.553046     -0.592313      -6.01474       6.01474       465.923       471.938    
  39  0.286804      -1.24896      -12.6827       12.6827       395.584       408.267    
  40  0.959489     -0.413542E-01 -0.419937      0.419937       450.832       451.252    
  41  0.903182     -0.101831      -1.03406       1.03406       459.873       460.907    
  42  0.242389      -1.41721      -14.3913       14.3913       381.049       395.440    
  43  0.448258     -0.802387      -8.14797       8.14797       464.340       472.488    
  44  0.312617      -1.16278      -11.8076       11.8076       474.148       485.956    
  45  0.804472     -0.217569      -2.20934       2.20934       491.031       493.240    
  46  0.833321     -0.182336      -1.85156       1.85156       483.567       485.418    
  47  0.476277     -0.741755      -7.53227       7.53227       506.040       513.572    
  48  0.978930     -0.212952E-01 -0.216246      0.216246       402.368       402.585    
  49  0.775870     -0.253771      -2.57695       2.57695       471.280       473.857    
  50  0.593636E-01  -2.82407      -28.6775       28.6775       505.004       533.682    
  51  0.998577     -0.142372E-02 -0.144574E-01  0.144574E-01   528.046       528.060    
  52  0.119510      -2.12436      -21.5721       21.5721       488.277       509.849    
  53  0.151758E-01  -4.18806      -42.5283       42.5283       531.606       574.135    
  54  0.124319      -2.08490      -21.1715       21.1715       403.219       424.391    
  55  0.430187     -0.843535      -8.56582       8.56582       584.229       592.794    
  56  0.191547      -1.65262      -16.7818       16.7818       575.025       591.807    
  57  0.772580     -0.258020      -2.62010       2.62010       571.417       574.037    
  58  0.412446     -0.885649      -8.99347       8.99347       434.191       443.185    
  59  0.824001     -0.193583      -1.96577       1.96577       580.284       582.250    
  60  0.362002      -1.01610      -10.3182       10.3182       605.970       616.288    
  61  0.647936     -0.433963      -4.40675       4.40675       448.828       453.235    
  62  0.223000      -1.50058      -15.2379       15.2379       611.982       627.220    
  63  0.547498     -0.602397      -6.11714       6.11714       672.280       678.397    
  64  0.664350     -0.408946      -4.15271       4.15271       661.185       665.337    
  65  0.474993     -0.744455      -7.55969       7.55969       708.286       715.846    
  66  0.573106E-01  -2.85927      -29.0349       29.0349       795.069       824.104    
  67  0.228601E-01  -3.77836      -38.3680       38.3680       947.149       985.517    
  68  0.632808     -0.457588      -4.64665       4.64665       963.512       968.159    
  69  0.770299     -0.260976      -2.65012       2.65012       558.004       560.654    
loop,thermsimp(1:2)       18   5.52180       30.2637    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92        498.66          1.00          0.37         14.11          5.49          0.01         20.98
Just calling func    0   0         20.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    498.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.1547                99
loop is:       18
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    10.1547                99
loop is:       19
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       99
neval,tstepnext:       91      99

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.126653      -2.06630      -20.9826       20.9826       365.773       386.756    
   2  0.479085     -0.735876      -7.47258       7.47258       362.241       369.713    
   3  0.559193     -0.581261      -5.90250       5.90250       358.528       364.430    
   4  0.730101     -0.314572      -3.19437       3.19437       364.118       367.312    
   5  0.984890     -0.152253E-01 -0.154608      0.154608       370.669       370.823    
   6  0.912409     -0.916664E-01 -0.930841      0.930841       373.866       374.797    
   7  0.161270      -1.82468      -18.5290       18.5290       366.411       384.940    
   8  0.926244     -0.766172E-01 -0.778022      0.778022       375.089       375.867    
   9  0.812263     -0.207932      -2.11148       2.11148       374.663       376.774    
  10  0.387788E-01  -3.24988      -33.0014       33.0014       364.389       397.390    
  11  0.618940     -0.479747      -4.87167       4.87167       376.192       381.064    
  12  0.714372     -0.336351      -3.41554       3.41554       355.343       358.759    
  13  0.971455     -0.289602E-01 -0.294081      0.294081       377.061       377.355    
  14  0.985500     -0.146062E-01 -0.148321      0.148321       357.798       357.947    
  15  0.891530     -0.114816      -1.16592       1.16592       378.273       379.439    
  16  0.919482     -0.839447E-01 -0.852430      0.852430       357.824       358.676    
  17  0.628692     -0.464113      -4.71292       4.71292       381.984       386.697    
  18  0.408518     -0.895220      -9.09066       9.09066       376.578       385.669    
  19  0.155660      -1.86008      -18.8885       18.8885       372.198       391.087    
  20  0.764033     -0.269144      -2.73306       2.73306       375.581       378.314    
  21  0.131296      -2.03030      -20.6171       20.6171       376.099       396.716    
  22  0.564857     -0.571182      -5.80016       5.80016       369.701       375.501    
  23  0.725059     -0.321503      -3.26475       3.26475       369.662       372.927    
  24  0.172812      -1.75555      -17.8270       17.8270       389.002       406.829    
  25  0.981862E-01  -2.32089      -23.5679       23.5679       381.049       404.617    
  26  0.817771     -0.201172      -2.04284       2.04284       367.317       369.360    
  27  0.168272      -1.78218      -18.0974       18.0974       386.862       404.959    
  28  0.748205     -0.290078      -2.94564       2.94564       381.085       384.030    
  29  0.521699     -0.650664      -6.60727       6.60727       397.839       404.446    
  30  0.667900E-01  -2.70620      -27.4806       27.4806       402.368       429.849    
  31  0.546929     -0.603437      -6.12769       6.12769       388.383       394.511    
  32  0.611591     -0.491692      -4.99296       4.99296       398.856       403.849    
  33  0.243960      -1.41075      -14.3257       14.3257       395.584       409.910    
  34  0.317283      -1.14796      -11.6572       11.6572       381.262       392.920    
  35  0.735628     -0.307031      -3.11780       3.11780       393.934       397.051    
  36  0.309137      -1.17397      -11.9213       11.9213       403.304       415.225    
  37  0.286339      -1.25058      -12.6992       12.6992       416.110       428.809    
  38  0.141288      -1.95695      -19.8722       19.8722       403.219       423.091    
  39  0.264163E-01  -3.63377      -36.8997       36.8997       417.257       454.156    
  40  0.426175     -0.852906      -8.66097       8.66097       377.360       386.021    
  41  0.787521     -0.238866      -2.42560       2.42560       434.191       436.617    
  42  0.415904     -0.877302      -8.90870       8.90870       450.832       459.740    
  43  0.155858      -1.85881      -18.8756       18.8756       448.828       467.704    
  44  0.259153      -1.35033      -13.7122       13.7122       459.873       473.585    
  45  0.553460     -0.591566      -6.00716       6.00716       465.923       471.930    
  46  0.466106     -0.763343      -7.75149       7.75149       464.340       472.092    
  47  0.344564      -1.06547      -10.8195       10.8195       471.280       482.099    
  48  0.971262     -0.291586E-01 -0.296096      0.296096       483.567       483.863    
  49  0.368403E-02  -5.60375      -56.9042       56.9042       474.148       531.052    
  50  0.140876      -1.95988      -19.9019       19.9019       491.031       510.933    
  51  0.139710      -1.96819      -19.9863       19.9863       435.963       455.950    
  52  0.320354      -1.13833      -11.5593       11.5593       488.277       499.836    
  53  0.922731     -0.804178E-01 -0.816615      0.816615       506.040       506.856    
  54  0.910476     -0.937873E-01 -0.952379      0.952379       528.046       528.998    
  55  0.550036E-01  -2.90036      -29.4521       29.4521       505.004       534.457    
  56  0.752031     -0.284978      -2.89385       2.89385       558.004       560.898    
  57  0.742373     -0.297903      -3.02511       3.02511       571.417       574.442    
  58  0.300586      -1.20202      -12.2061       12.2061       531.606       543.812    
  59  0.778317     -0.250621      -2.54497       2.54497       580.284       582.829    
  60  0.792867     -0.232100      -2.35690       2.35690       575.025       577.382    
  61  0.184296      -1.69121      -17.1737       17.1737       584.229       601.402    
  62  0.778680     -0.250155      -2.54024       2.54024       605.970       608.510    
  63  0.450162     -0.798148      -8.10492       8.10492       611.982       620.087    
  64  0.737124     -0.304999      -3.09716       3.09716       661.185       664.282    
  65  0.817233     -0.201831      -2.04953       2.04953       672.280       674.329    
  66  0.710963     -0.341135      -3.46411       3.46411       708.286       711.750    
  67  0.353482      -1.03992      -10.5601       10.5601       795.069       805.629    
  68  0.189683      -1.66240      -16.8811       16.8811       963.512       980.393    
  69  0.986480E-01  -2.31620      -23.5202       23.5202       498.664       522.184    
loop,thermsimp(1:2)       19   20.9826       7.47258    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     93        526.83          1.00          0.37         14.13          5.49          0.01         21.00
Just calling func    0   0         21.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    526.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.1547                99
loop is:       19
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    10.1547                99
loop is:       20
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       99
neval,tstepnext:       92      99

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566133     -0.568927      -5.77726       5.77726       357.798       363.576    
   2  0.761659     -0.272256      -2.76467       2.76467       357.824       360.589    
   3  0.589426     -0.528605      -5.36781       5.36781       355.343       360.711    
   4  0.680432     -0.385027      -3.90982       3.90982       358.528       362.438    
   5  0.670445E-01  -2.70240      -27.4419       27.4419       364.118       391.560    
   6  0.665072     -0.407860      -4.14168       4.14168       367.317       371.458    
   7  0.244749      -1.40752      -14.2929       14.2929       362.241       376.534    
   8  0.830110     -0.186197      -1.89077       1.89077       370.669       372.559    
   9  0.742150     -0.298204      -3.02816       3.02816       369.662       372.690    
  10  0.646056     -0.436870      -4.43626       4.43626       373.866       378.303    
  11  0.624340E-01  -2.77364      -28.1654       28.1654       369.701       397.867    
  12  0.797360     -0.226449      -2.29951       2.29951       375.089       377.388    
  13  0.381476     -0.963707      -9.78612       9.78612       374.663       384.449    
  14  0.629516     -0.462804      -4.69962       4.69962       377.061       381.761    
  15  0.829126     -0.187383      -1.90281       1.90281       375.581       377.484    
  16  0.624519     -0.470774      -4.78055       4.78055       378.273       383.054    
  17  0.681765     -0.383071      -3.88995       3.88995       376.192       380.082    
  18  0.802996     -0.219405      -2.22798       2.22798       381.085       383.313    
  19  0.647987     -0.433885      -4.40595       4.40595       366.411       370.817    
  20  0.368706     -0.997754      -10.1319       10.1319       376.578       386.710    
  21  0.266832      -1.32114      -13.4157       13.4157       377.360       390.776    
  22  0.766419     -0.266027      -2.70141       2.70141       381.984       384.685    
  23  0.546492     -0.604236      -6.13582       6.13582       365.773       371.909    
  24  0.738749     -0.302798      -3.07481       3.07481       372.198       375.273    
  25  0.239663      -1.42852      -14.5062       14.5062       381.262       395.769    
  26  0.678240     -0.388255      -3.94259       3.94259       388.383       392.326    
  27  0.225018      -1.49158      -15.1464       15.1464       376.099       391.245    
  28  0.318080      -1.14545      -11.6317       11.6317       393.934       405.565    
  29  0.718912     -0.330017      -3.35121       3.35121       364.389       367.740    
  30  0.320196      -1.13882      -11.5644       11.5644       398.856       410.420    
  31  0.941945     -0.598079E-01 -0.607329      0.607329       397.839       398.446    
  32  0.842036     -0.171933      -1.74592       1.74592       381.049       382.795    
  33  0.704010     -0.350962      -3.56391       3.56391       386.862       390.426    
  34  0.201628      -1.60133      -16.2610       16.2610       389.002       405.263    
  35  0.178203      -1.72483      -17.5151       17.5151       395.584       413.099    
  36  0.142531      -1.94819      -19.7833       19.7833       403.304       423.087    
  37  0.594627     -0.519821      -5.27861       5.27861       403.219       408.498    
  38  0.696429     -0.361790      -3.67385       3.67385       416.110       419.784    
  39  0.368239     -0.999024      -10.1448       10.1448       402.368       412.513    
  40  0.755632     -0.280200      -2.84534       2.84534       434.191       437.037    
  41  0.350099E-01  -3.35212      -34.0397       34.0397       417.257       451.296    
  42  0.854445     -0.157303      -1.59736       1.59736       435.963       437.561    
  43  0.580609     -0.543678      -5.52087       5.52087       450.832       456.353    
  44  0.441530     -0.817510      -8.30154       8.30154       448.828       457.130    
  45  0.162700      -1.81585      -18.4393       18.4393       465.923       484.362    
  46  0.794862     -0.229587      -2.33138       2.33138       464.340       466.672    
  47  0.455748     -0.785816      -7.97970       7.97970       459.873       467.853    
  48  0.581713     -0.541779      -5.50158       5.50158       471.280       476.781    
  49  0.847252E-01  -2.46834      -25.0652       25.0652       483.567       508.632    
  50  0.932517     -0.698683E-01 -0.709489      0.709489       488.277       488.986    
  51  0.777959     -0.251082      -2.54965       2.54965       506.040       508.589    
  52  0.440866     -0.819014      -8.31681       8.31681       491.031       499.348    
  53  0.630148     -0.461800      -4.68943       4.68943       498.664       503.353    
  54  0.789155     -0.236793      -2.40455       2.40455       528.046       530.450    
  55  0.462857E-01  -3.07292      -31.2045       31.2045       474.148       505.353    
  56  0.796103     -0.228026      -2.31553       2.31553       505.004       507.320    
  57  0.149188      -1.90255      -19.3197       19.3197       531.606       550.926    
  58  0.449548     -0.799514      -8.11879       8.11879       558.004       566.123    
  59  0.842134E-01  -2.47440      -25.1267       25.1267       571.417       596.544    
  60  0.319965      -1.13954      -11.5717       11.5717       575.025       586.597    
  61  0.103789      -2.26540      -23.0044       23.0044       580.284       603.288    
  62  0.442742     -0.814768      -8.27369       8.27369       584.229       592.502    
  63  0.199094      -1.61398      -16.3894       16.3894       605.970       622.360    
  64  0.498869     -0.695412      -7.06167       7.06167       611.982       619.044    
  65  0.442144     -0.816120      -8.28742       8.28742       661.185       669.472    
  66  0.953031     -0.481077E-01 -0.488517      0.488517       672.280       672.768    
  67  0.479738     -0.734516      -7.45876       7.45876       708.286       715.745    
  68  0.451974     -0.794131      -8.06414       8.06414       795.069       803.133    
  69  0.306639E-02  -5.78726      -58.7676       58.7676       526.830       585.598    
loop,thermsimp(1:2)       20   5.77726       2.76467    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94        346.62          1.00          0.37         14.09          5.54          0.02         21.02
Just calling func    0   0         21.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95        393.48          1.00          0.36         14.11          5.52          0.01         21.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    346.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.1547                99
loop is:       20
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    10.1547                99
loop is:       21
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       99
neval,tstepnext:       94      99

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.418736     -0.870514      -8.83978       8.83978       357.824       366.664    
   2  0.465061     -0.765587      -7.77428       7.77428       355.343       363.117    
   3  0.710504E-01  -2.64437      -26.8526       26.8526       358.528       385.381    
   4  0.229190      -1.47321      -14.9599       14.9599       357.798       372.758    
   5  0.794202     -0.230418      -2.33981       2.33981       364.389       366.729    
   6  0.810530     -0.210067      -2.13316       2.13316       366.411       368.544    
   7  0.253596      -1.37201      -13.9323       13.9323       367.317       381.249    
   8  0.584625     -0.536785      -5.45087       5.45087       365.773       371.224    
   9  0.488689     -0.716029      -7.27104       7.27104       370.669       377.940    
  10  0.790055     -0.235653      -2.39297       2.39297       369.662       372.055    
  11  0.118484E-01  -4.43556      -45.0416       45.0416       372.198       417.240    
  12  0.337126      -1.08730      -11.0411       11.0411       362.241       373.282    
  13  0.507493     -0.678273      -6.88763       6.88763       375.089       381.976    
  14  0.985959     -0.141401E-01 -0.143588      0.143588       375.581       375.724    
  15  0.570178     -0.561806      -5.70495       5.70495       373.866       379.571    
  16  0.998026     -0.197606E-02 -0.200662E-01  0.200662E-01   376.192       376.212    
  17  0.339502E-01  -3.38286      -34.3518       34.3518       377.061       411.413    
  18  0.146583      -1.92016      -19.4986       19.4986       381.049       400.547    
  19  0.730545     -0.313964      -3.18820       3.18820       378.273       381.462    
  20  0.408452     -0.895381      -9.09229       9.09229       381.085       390.177    
  21  0.614182     -0.487464      -4.95003       4.95003       374.663       379.613    
  22  0.186242      -1.68071      -17.0670       17.0670       381.984       399.051    
  23  0.514795E-01  -2.96657      -30.1245       30.1245       376.578       406.703    
  24  0.150396      -1.89448      -19.2378       19.2378       386.862       406.100    
  25  0.804261     -0.217831      -2.21200       2.21200       377.360       379.572    
  26  0.247888      -1.39478      -14.1635       14.1635       376.099       390.262    
  27  0.942830     -0.588693E-01 -0.597798      0.597798       364.118       364.715    
  28  0.742769     -0.297371      -3.01970       3.01970       388.383       391.403    
  29  0.554459E-01  -2.89235      -29.3708       29.3708       381.262       410.633    
  30  0.518430     -0.656950      -6.67111       6.67111       369.701       376.372    
  31  0.701592     -0.354403      -3.59884       3.59884       397.839       401.438    
  32  0.895623     -0.110236      -1.11940       1.11940       389.002       390.122    
  33  0.430014     -0.843938      -8.56990       8.56990       393.934       402.503    
  34  0.602611     -0.506484      -5.14317       5.14317       403.219       408.362    
  35  0.794457     -0.230096      -2.33655       2.33655       398.856       401.192    
  36  0.109185      -2.21471      -22.4896       22.4896       402.368       424.858    
  37  0.801812     -0.220881      -2.24297       2.24297       395.584       397.827    
  38  0.904677     -0.100177      -1.01727       1.01727       416.110       417.128    
  39  0.642760     -0.441985      -4.48820       4.48820       403.304       407.792    
  40  0.857070     -0.154236      -1.56621       1.56621       434.191       435.757    
  41  0.959870     -0.409571E-01 -0.415906      0.415906       435.963       436.379    
  42  0.776353     -0.253149      -2.57064       2.57064       417.257       419.827    
  43  0.397709     -0.922036      -9.36296       9.36296       450.832       460.195    
  44  0.281263E-01  -3.57105      -36.2628       36.2628       448.828       485.091    
  45  0.995173     -0.483910E-02 -0.491394E-01  0.491394E-01   464.340       464.390    
  46  0.306088      -1.18388      -12.0219       12.0219       459.873       471.895    
  47  0.349056      -1.05252      -10.6880       10.6880       471.280       481.968    
  48  0.894436     -0.111562      -1.13287       1.13287       465.923       467.056    
  49  0.316709      -1.14977      -11.6756       11.6756       488.277       499.953    
  50  0.234115      -1.45194      -14.7440       14.7440       491.031       505.775    
  51  0.776889     -0.252458      -2.56363       2.56363       498.664       501.227    
  52  0.475283     -0.743844      -7.55349       7.55349       474.148       481.702    
  53  0.364774      -1.00848      -10.2407       10.2407       505.004       515.245    
  54  0.964920     -0.357105E-01 -0.362628      0.362628       506.040       506.402    
  55  0.250604E-01  -3.68647      -37.4348       37.4348       483.567       521.001    
  56  0.504281     -0.684621      -6.95210       6.95210       528.046       534.998    
  57  0.643200     -0.441300      -4.48125       4.48125       531.606       536.087    
  58  0.373071     -0.985986      -10.0124       10.0124       558.004       568.016    
  59  0.660854     -0.414222      -4.20629       4.20629       526.830       531.036    
  60  0.245021      -1.40641      -14.2816       14.2816       575.025       589.307    
  61  0.774308     -0.255786      -2.59742       2.59742       584.229       586.826    
  62  0.211079      -1.55552      -15.7958       15.7958       571.417       587.213    
  63  0.438725     -0.823882      -8.36625       8.36625       580.284       588.650    
  64  0.172155      -1.75936      -17.8657       17.8657       611.982       629.848    
  65  0.535262     -0.624998      -6.34665       6.34665       605.970       612.317    
  66  0.213379      -1.54468      -15.6857       15.6857       661.185       676.870    
  67  0.810324E-01  -2.51291      -25.5177       25.5177       672.280       697.797    
  68  0.319478      -1.14107      -11.5872       11.5872       708.286       719.873    
  69  0.541439     -0.613526      -6.23015       6.23015       346.616       352.847    
loop,thermsimp(1:2)       21   8.83978       7.77428    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96        308.06          1.00          0.36         14.07          5.54          0.02         20.99
Just calling func    0   0         20.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     97        337.87          0.99          0.36         13.98          5.69          0.01         21.03
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    308.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.1547                99
loop is:       21
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    10.1547                99
loop is:       22
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       99
neval,tstepnext:       96      99

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.669908     -0.400615      -4.06811       4.06811       346.616       350.684    
   2  0.435448     -0.831379      -8.44237       8.44237       355.343       363.786    
   3  0.110374      -2.20388      -22.3797       22.3797       364.118       386.497    
   4  0.562182E-01  -2.87852      -29.2303       29.2303       357.824       387.054    
   5  0.875385     -0.133092      -1.35150       1.35150       364.389       365.741    
   6  0.386432     -0.950798      -9.65504       9.65504       366.411       376.066    
   7  0.536259     -0.623139      -6.32776       6.32776       365.773       372.101    
   8  0.887775     -0.119037      -1.20878       1.20878       369.662       370.871    
   9  0.831314     -0.184747      -1.87605       1.87605       357.798       359.674    
  10  0.503017E-01  -2.98972      -30.3596       30.3596       362.241       392.600    
  11  0.882297     -0.125226      -1.27163       1.27163       375.581       376.853    
  12  0.334650E-01  -3.39726      -34.4980       34.4980       376.192       410.690    
  13  0.332592      -1.10084      -11.1787       11.1787       369.701       380.880    
  14  0.673391     -0.395429      -4.01544       4.01544       370.669       374.684    
  15  0.833721     -0.181856      -1.84669       1.84669       373.866       375.713    
  16  0.203936      -1.58995      -16.1454       16.1454       377.360       393.506    
  17  0.474527     -0.745437      -7.56966       7.56966       374.663       382.233    
  18  0.656850     -0.420299      -4.26800       4.26800       367.317       371.585    
  19  0.843808     -0.169830      -1.72457       1.72457       378.273       379.998    
  20  0.195264      -1.63340      -16.5867       16.5867       375.089       391.675    
  21  0.544187     -0.608463      -6.17874       6.17874       358.528       364.707    
  22  0.142555      -1.94803      -19.7816       19.7816       389.002       408.784    
  23  0.390378     -0.940641      -9.55189       9.55189       381.085       390.637    
  24  0.431087     -0.841446      -8.54460       8.54460       376.099       384.643    
  25  0.169220E-01  -4.07914      -41.4223       41.4223       388.383       429.806    
  26  0.940582     -0.612562E-01 -0.622036      0.622036       395.584       396.206    
  27  0.278613E-01  -3.58052      -36.3589       36.3589       381.984       418.343    
  28  0.390975     -0.939112      -9.53636       9.53636       381.049       390.585    
  29  0.260794      -1.34402      -13.6481       13.6481       398.856       412.504    
  30  0.411813     -0.887186      -9.00907       9.00907       397.839       406.848    
  31  0.623700     -0.472085      -4.79386       4.79386       393.934       398.727    
  32  0.177007      -1.73156      -17.5834       17.5834       386.862       404.445    
  33  0.424690     -0.856395      -8.69640       8.69640       376.578       385.275    
  34  0.696177     -0.362151      -3.67752       3.67752       403.304       406.982    
  35  0.810418E-01  -2.51279      -25.5165       25.5165       403.219       428.736    
  36  0.385039     -0.954409      -9.69170       9.69170       381.262       390.954    
  37  0.953256     -0.478715E-01 -0.486119      0.486119       377.061       377.547    
  38  0.500608E-01  -2.99452      -30.4083       30.4083       416.110       446.519    
  39  0.784445     -0.242779      -2.46534       2.46534       372.198       374.664    
  40  0.431607     -0.840241      -8.53236       8.53236       417.257       425.789    
  41  0.270197      -1.30860      -13.2884       13.2884       402.368       415.657    
  42  0.142748      -1.94667      -19.7678       19.7678       434.191       453.959    
  43  0.132710      -2.01959      -20.5083       20.5083       435.963       456.472    
  44  0.531368     -0.632300      -6.42079       6.42079       450.832       457.252    
  45  0.995182     -0.482961E-02 -0.490430E-01  0.490430E-01   464.340       464.389    
  46  0.800353     -0.222703      -2.26147       2.26147       465.923       468.185    
  47  0.997297     -0.270716E-02 -0.274903E-01  0.274903E-01   459.873       459.901    
  48  0.792061E-03  -7.14087      -72.5131       72.5131       474.148       546.661    
  49  0.322029      -1.13311      -11.5064       11.5064       471.280       482.786    
  50  0.856019     -0.155462      -1.57867       1.57867       448.828       450.407    
  51  0.484323     -0.725002      -7.36215       7.36215       488.277       495.639    
  52  0.772073     -0.258676      -2.62677       2.62677       498.664       501.291    
  53  0.621600     -0.475459      -4.82813       4.82813       491.031       495.859    
  54  0.424805     -0.856125      -8.69366       8.69366       506.040       514.733    
  55  0.610689     -0.493168      -5.00795       5.00795       505.004       510.012    
  56  0.524204     -0.645874      -6.55863       6.55863       483.567       490.125    
  57  0.222641      -1.50220      -15.2543       15.2543       526.830       542.084    
  58  0.120645      -2.11490      -21.4761       21.4761       528.046       549.522    
  59  0.807340     -0.214010      -2.17320       2.17320       531.606       533.779    
  60  0.119876      -2.12130      -21.5410       21.5410       558.004       579.545    
  61  0.834111     -0.181389      -1.84194       1.84194       584.229       586.070    
  62  0.626406     -0.467757      -4.74991       4.74991       571.417       576.167    
  63  0.283227      -1.26151      -12.8102       12.8102       580.284       593.094    
  64  0.663705E-01  -2.71250      -27.5445       27.5445       575.025       602.570    
  65  0.160144      -1.83168      -18.6001       18.6001       605.970       624.570    
  66  0.926684     -0.761424E-01 -0.773200      0.773200       611.982       612.755    
  67  0.232422      -1.45920      -14.8177       14.8177       661.185       676.002    
  68  0.621075     -0.476303      -4.83670       4.83670       672.280       677.116    
  69  0.178185      -1.72493      -17.5161       17.5161       308.061       325.577    
loop,thermsimp(1:2)       22   4.06811       8.44237    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98        347.70          1.00          0.37         14.04          5.58          0.01         21.00
Just calling func    0   0         21.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    347.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.1547                99
loop is:       22
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    10.1547                99
loop is:       23
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       99
neval,tstepnext:       97      99

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.499451     -0.694247      -7.04984       7.04984       308.061       315.110    
   2  0.141891E-01  -4.25528      -43.2109       43.2109       346.616       389.827    
   3  0.138808      -1.97466      -20.0520       20.0520       357.798       377.850    
   4  0.483679     -0.726333      -7.37567       7.37567       355.343       362.719    
   5  0.889673     -0.116901      -1.18709       1.18709       358.528       359.715    
   6  0.873112     -0.135692      -1.37790       1.37790       364.389       365.767    
   7  0.650421     -0.430136      -4.36789       4.36789       369.662       374.030    
   8  0.190014      -1.66066      -16.8634       16.8634       367.317       384.180    
   9  0.501421     -0.690309      -7.00985       7.00985       365.773       372.783    
  10  0.631815E-01  -2.76174      -28.0446       28.0446       372.198       400.243    
  11  0.739777     -0.301407      -3.06069       3.06069       370.669       373.729    
  12  0.399496     -0.917553      -9.31744       9.31744       373.866       383.184    
  13  0.586889     -0.532919      -5.41161       5.41161       366.411       371.822    
  14  0.918117     -0.854306E-01 -0.867519      0.867519       375.581       376.448    
  15  0.442955     -0.814288      -8.26882       8.26882       377.061       385.330    
  16  0.732040E-01  -2.61450      -26.5494       26.5494       378.273       404.823    
  17  0.896326     -0.109451      -1.11144       1.11144       369.701       370.813    
  18  0.286671      -1.24942      -12.6874       12.6874       374.663       387.350    
  19  0.667358     -0.404429      -4.10684       4.10684       376.099       380.205    
  20  0.760840     -0.273332      -2.77559       2.77559       376.578       379.354    
  21  0.698666     -0.358583      -3.64129       3.64129       364.118       367.759    
  22  0.301101      -1.20031      -12.1887       12.1887       357.824       370.013    
  23  0.370765     -0.992186      -10.0753       10.0753       381.049       391.124    
  24  0.985839     -0.142620E-01 -0.144826      0.144826       381.085       381.230    
  25  0.743551     -0.296318      -3.00900       3.00900       381.262       384.271    
  26  0.180038      -1.71459      -17.4111       17.4111       375.089       392.500    
  27  0.334980      -1.09369      -11.1060       11.1060       362.241       373.347    
  28  0.616947     -0.482972      -4.90442       4.90442       377.360       382.265    
  29  0.899960     -0.105405      -1.07035       1.07035       395.584       396.655    
  30  0.875850E-01  -2.43515      -24.7281       24.7281       393.934       418.662    
  31  0.418257     -0.871660      -8.85141       8.85141       386.862       395.713    
  32  0.731820     -0.312221      -3.17049       3.17049       397.839       401.010    
  33  0.878217     -0.129862      -1.31870       1.31870       403.304       404.623    
  34  0.160233E-01  -4.13371      -41.9764       41.9764       389.002       430.979    
  35  0.322705      -1.13102      -11.4851       11.4851       376.192       387.677    
  36  0.211565      -1.55322      -15.7725       15.7725       398.856       414.628    
  37  0.720549     -0.327741      -3.32810       3.32810       402.368       405.697    
  38  0.230706      -1.46661      -14.8929       14.8929       381.984       396.877    
  39  0.640310     -0.445802      -4.52697       4.52697       417.257       421.784    
  40  0.867608E-01  -2.44460      -24.8241       24.8241       403.219       428.043    
  41  0.301663      -1.19844      -12.1698       12.1698       388.383       400.553    
  42  0.482492     -0.728792      -7.40063       7.40063       416.110       423.511    
  43  0.558285     -0.582885      -5.91900       5.91900       448.828       454.747    
  44  0.453601     -0.790537      -8.02763       8.02763       434.191       442.219    
  45  0.353795      -1.03904      -10.5511       10.5511       435.963       446.514    
  46  0.126830      -2.06491      -20.9685       20.9685       450.832       471.800    
  47  0.219551      -1.51617      -15.3962       15.3962       459.873       475.269    
  48  0.787766     -0.238554      -2.42244       2.42244       464.340       466.763    
  49  0.551184     -0.595686      -6.04899       6.04899       465.923       471.972    
  50  0.640009     -0.446273      -4.53175       4.53175       471.280       475.812    
  51  0.115249      -2.16066      -21.9408       21.9408       483.567       505.507    
  52  0.508578E-01  -2.97872      -30.2479       30.2479       488.277       518.525    
  53  0.844831E-01  -2.47120      -25.0942       25.0942       491.031       516.125    
  54  0.966041     -0.345486E-01 -0.350829      0.350829       498.664       499.015    
  55  0.340850      -1.07631      -10.9296       10.9296       505.004       515.934    
  56  0.302642      -1.19520      -12.1369       12.1369       506.040       518.177    
  57  0.742398     -0.297870      -3.02477       3.02477       531.606       534.631    
  58  0.252190      -1.37757      -13.9888       13.9888       526.830       540.819    
  59  0.751226     -0.286049      -2.90473       2.90473       474.148       477.053    
  60  0.827035     -0.189909      -1.92846       1.92846       528.046       529.974    
  61  0.769818     -0.261601      -2.65647       2.65647       571.417       574.074    
  62  0.808496     -0.212579      -2.15867       2.15867       558.004       560.162    
  63  0.289605      -1.23924      -12.5840       12.5840       584.229       596.813    
  64  0.994102     -0.591498E-02 -0.600646E-01  0.600646E-01   580.284       580.344    
  65  0.411121E-01  -3.19145      -32.4081       32.4081       575.025       607.433    
  66  0.915901     -0.878470E-01 -0.892056      0.892056       611.982       612.874    
  67  0.101101      -2.29163      -23.2708       23.2708       605.970       629.241    
  68  0.189150      -1.66521      -16.9097       16.9097       661.185       678.094    
  69  0.377261     -0.974819      -9.89896       9.89896       347.698       357.597    
loop,thermsimp(1:2)       23   7.04984       43.2109    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     99        569.77          1.00          0.37         14.10          5.53          0.01         21.01
Just calling func    0   0         21.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    569.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.1547                99
loop is:       23
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    10.1547                99
loop is:       24
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       99
neval,tstepnext:       98      99

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.846726     -0.166378      -1.68952       1.68952       308.061       309.750    
   2  0.494357     -0.704497      -7.15393       7.15393       347.698       354.852    
   3  0.698974     -0.358142      -3.63681       3.63681       358.528       362.165    
   4  0.633853     -0.455939      -4.62990       4.62990       355.343       359.973    
   5  0.856069     -0.155404      -1.57808       1.57808       364.389       365.967    
   6  0.176184      -1.73622      -17.6308       17.6308       364.118       381.748    
   7  0.609934     -0.494405      -5.02052       5.02052       357.824       362.844    
   8  0.266046      -1.32409      -13.4457       13.4457       369.701       383.147    
   9  0.435224     -0.831895      -8.44761       8.44761       366.411       374.858    
  10  0.723440     -0.323738      -3.28745       3.28745       365.773       369.060    
  11  0.477113     -0.740002      -7.51447       7.51447       362.241       369.755    
  12  0.299482E-01  -3.50829      -35.6255       35.6255       370.669       406.294    
  13  0.663688     -0.409944      -4.16284       4.16284       369.662       373.825    
  14  0.647038     -0.435350      -4.42083       4.42083       375.581       380.002    
  15  0.161679      -1.82214      -18.5032       18.5032       357.798       376.302    
  16  0.476794E-01  -3.04326      -30.9032       30.9032       376.578       407.482    
  17  0.113987      -2.17167      -22.0526       22.0526       376.099       398.151    
  18  0.497479     -0.698201      -7.09000       7.09000       381.085       388.175    
  19  0.177426      -1.72920      -17.5595       17.5595       377.360       394.920    
  20  0.987997     -0.120759E-01 -0.122627      0.122627       373.866       373.989    
  21  0.956289     -0.446954E-01 -0.453867      0.453867       367.317       367.771    
  22  0.892096     -0.114181      -1.15947       1.15947       381.262       382.422    
  23  0.155195      -1.86307      -18.9189       18.9189       377.061       395.980    
  24  0.527421     -0.639755      -6.49650       6.49650       374.663       381.159    
  25  0.654689     -0.423595      -4.30146       4.30146       376.192       380.493    
  26  0.708505     -0.344598      -3.49928       3.49928       346.616       350.116    
  27  0.723793     -0.323250      -3.28249       3.28249       381.049       384.331    
  28  0.451974     -0.794131      -8.06413       8.06413       375.089       383.153    
  29  0.890977     -0.115437      -1.17222       1.17222       386.862       388.034    
  30  0.364562E-01  -3.31164      -33.6286       33.6286       395.584       429.213    
  31  0.865026     -0.144996      -1.47239       1.47239       381.984       383.456    
  32  0.996186     -0.382099E-02 -0.388009E-01  0.388009E-01   372.198       372.237    
  33  0.911332     -0.928484E-01 -0.942844      0.942844       388.383       389.326    
  34  0.135455      -1.99912      -20.3004       20.3004       397.839       418.139    
  35  0.995351     -0.465996E-02 -0.473203E-01  0.473203E-01   403.304       403.351    
  36  0.683083E-01  -2.68372      -27.2523       27.2523       378.273       405.526    
  37  0.223861      -1.49673      -15.1988       15.1988       402.368       417.567    
  38  0.137796      -1.98198      -20.1264       20.1264       398.856       418.982    
  39  0.423454     -0.859310      -8.72600       8.72600       393.934       402.660    
  40  0.434213E-01  -3.13681      -31.8532       31.8532       417.257       449.110    
  41  0.472541     -0.749630      -7.61224       7.61224       416.110       423.723    
  42  0.446691     -0.805888      -8.18352       8.18352       403.219       411.403    
  43  0.281592      -1.26730      -12.8690       12.8690       389.002       401.871    
  44  0.302834      -1.19457      -12.1304       12.1304       434.191       446.322    
  45  0.559976     -0.579861      -5.88830       5.88830       435.963       441.852    
  46  0.718145     -0.331084      -3.36205       3.36205       448.828       452.190    
  47  0.546740     -0.603782      -6.13120       6.13120       464.340       470.472    
  48  0.655356     -0.422576      -4.29112       4.29112       450.832       455.123    
  49  0.656525     -0.420794      -4.27302       4.27302       465.923       470.196    
  50  0.674325     -0.394043      -4.00137       4.00137       459.873       463.875    
  51  0.954754     -0.463012E-01 -0.470173      0.470173       471.280       471.750    
  52  0.156732      -1.85322      -18.8188       18.8188       474.148       492.967    
  53  0.587560     -0.531777      -5.40001       5.40001       498.664       504.064    
  54  0.288949      -1.24151      -12.6071       12.6071       483.567       496.174    
  55  0.835535     -0.179683      -1.82462       1.82462       505.004       506.829    
  56  0.728219     -0.317153      -3.22059       3.22059       491.031       494.252    
  57  0.648257     -0.433468      -4.40172       4.40172       506.040       510.441    
  58  0.330881      -1.10600      -11.2310       11.2310       488.277       499.508    
  59  0.489725     -0.713910      -7.24952       7.24952       528.046       535.295    
  60  0.824807E-02  -4.79778      -48.7198       48.7198       531.606       580.326    
  61  0.358757E-01  -3.32769      -33.7916       33.7916       526.830       560.622    
  62  0.183312      -1.69657      -17.2281       17.2281       558.004       575.232    
  63  0.311544      -1.16621      -11.8425       11.8425       571.417       583.260    
  64  0.425954     -0.853425      -8.66624       8.66624       580.284       588.950    
  65  0.902913     -0.102129      -1.03708       1.03708       584.229       585.266    
  66  0.588819     -0.529636      -5.37828       5.37828       575.025       580.404    
  67  0.445305     -0.808995      -8.21507       8.21507       611.982       620.197    
  68  0.952560     -0.486021E-01 -0.493538      0.493538       605.970       606.464    
  69  0.450608     -0.797158      -8.09487       8.09487       569.773       577.868    
loop,thermsimp(1:2)       24   1.68952       7.15393    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100       1161.71          1.00          0.37         14.11          5.60          0.02         21.09
Just calling func    0   0         21.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101        473.28          1.00          0.36         14.05          5.54          0.01         20.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    473.28        1.796    -0.9937      3.296     -100.0     0.2121    
                     -0.8107     0.4283     -100.0      2.211     -1.284    
                     -0.7887     -2.767      2.009      0.000     0.6600    
                      -1.242     -20.00      0.000      0.000     -1.221    

                      -1.600      6435.      8119.     -468.3     -1451.    
                      -4.215     -5.113     -3.960     -15.33     -5.168    
                      -13.71     -2.686     -3756.      0.000     -1760.    

                      -350.6      5573.     -41.40      214.7      2446.    
                      -815.9     0.1185E-01-0.7932E-01  0.000    -0.1403    
                     -0.1676    -0.1301    -0.1504    -0.1790    -0.2469E-01

                     -0.7585     -2.818      1.382     0.1855     0.3733E-01
                      0.9462E-01-0.4718E-01-0.6394E-01 0.3813    -0.8252E-01
                     -0.6468E-01 0.8212E-01-0.2674     -3.116      1.382    

                      -1.404     -1.403      3577.      2610.      0.000    
                       0.000      8.896      8.896      0.000     0.1000    
                      0.1139     0.1139      9.096      8.896     -105.0    

                      0.1000     0.1139     0.1139      9.796      9.096    
                      -524.9     0.1000    -0.5861     0.1139      9.396    
                       9.196      8032.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    473.28
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    10.1547                99
loop is:       24
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    10.1547                99
loop is:       25
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    3.04640               109

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      109
neval,tstepnext:      100     109

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.479563     -0.734880      -2.23874       2.23874       308.061       310.299    
   2  0.384635     -0.955461      -2.91072       2.91072       346.616       349.527    
   3  0.800579E-01  -2.52500      -7.69217       7.69217       347.698       355.390    
   4  0.502080E-01  -2.99158      -9.11355       9.11355       355.343       364.457    
   5  0.339101      -1.08146      -3.29455       3.29455       358.528       361.822    
   6  0.497040     -0.699085      -2.12969       2.12969       357.824       359.954    
   7  0.862111     -0.148371     -0.451998      0.451998       364.389       364.841    
   8  0.556659     -0.585803      -1.78459       1.78459       367.317       369.101    
   9  0.243855      -1.41118      -4.29902       4.29902       365.773       370.072    
  10  0.500456     -0.692235      -2.10882       2.10882       362.241       364.350    
  11  0.479766     -0.734456      -2.23745       2.23745       372.198       374.436    
  12  0.917865     -0.857051E-01 -0.261092      0.261092       369.662       369.923    
  13  0.377734     -0.973565      -2.96587       2.96587       373.866       376.832    
  14  0.880516     -0.127247     -0.387645      0.387645       366.411       366.799    
  15  0.381917     -0.962552      -2.93232       2.93232       357.798       360.731    
  16  0.139763E-02  -6.57298      -20.0239       20.0239       375.581       395.605    
  17  0.873713     -0.135003     -0.411274      0.411274       376.192       376.603    
  18  0.883451     -0.123920     -0.377508      0.377508       374.663       375.040    
  19  0.997879     -0.212301E-02 -0.646754E-02  0.646754E-02   364.118       364.124    
  20  0.673168     -0.395760      -1.20564       1.20564       381.262       382.468    
  21  0.320320      -1.13843      -3.46813       3.46813       369.701       373.169    
  22  0.142108      -1.95117      -5.94403       5.94403       375.089       381.033    
  23  0.621792     -0.475149      -1.44749       1.44749       381.984       383.431    
  24  0.319037      -1.14245      -3.48035       3.48035       381.049       384.529    
  25  0.945811     -0.557130E-01 -0.169724      0.169724       386.862       387.032    
  26  0.838150     -0.176558     -0.537865      0.537865       381.085       381.623    
  27  0.208724      -1.56674      -4.77292       4.77292       388.383       393.156    
  28  0.180792      -1.71041      -5.21059       5.21059       377.360       382.571    
  29  0.173944E-01  -4.05161      -12.3428       12.3428       377.061       389.404    
  30  0.747026E-01  -2.59424      -7.90309       7.90309       376.099       384.002    
  31  0.974864     -0.254576E-01 -0.775539E-01  0.775539E-01   389.002       389.080    
  32  0.147092      -1.91670      -5.83902       5.83902       393.934       399.773    
  33  0.340250      -1.07807      -3.28424       3.28424       403.304       406.588    
  34  0.893637E-01  -2.41504      -7.35718       7.35718       378.273       385.631    
  35  0.618396     -0.480627      -1.46418       1.46418       370.669       372.133    
  36  0.759288     -0.275374     -0.838898      0.838898       376.578       377.417    
  37  0.160753      -1.82789      -5.56848       5.56848       403.219       408.788    
  38  0.975392     -0.249162E-01 -0.759046E-01  0.759046E-01   402.368       402.444    
  39  0.779723     -0.248816     -0.757993      0.757993       397.839       398.597    
  40  0.596894     -0.516015      -1.57199       1.57199       398.856       400.428    
  41  0.773324     -0.257057     -0.783097      0.783097       416.110       416.893    
  42  0.990392     -0.965465E-02 -0.294119E-01  0.294119E-01   395.584       395.614    
  43  0.542783     -0.611046      -1.86149       1.86149       435.963       437.825    
  44  0.535678     -0.624222      -1.90163       1.90163       434.191       436.093    
  45  0.351112      -1.04665      -3.18851       3.18851       417.257       420.445    
  46  0.701333E-02  -4.95994      -15.1100       15.1100       448.828       463.938    
  47  0.338649      -1.08279      -3.29861       3.29861       450.832       454.130    
  48  0.319165      -1.14205      -3.47913       3.47913       459.873       463.352    
  49  0.625775     -0.468764      -1.42804       1.42804       465.923       467.351    
  50  0.926674     -0.761539E-01 -0.231995      0.231995       464.340       464.572    
  51  0.359258      -1.02371      -3.11864       3.11864       471.280       474.398    
  52  0.892747     -0.113452     -0.345621      0.345621       474.148       474.494    
  53  0.124582      -2.08279      -6.34501       6.34501       491.031       497.376    
  54  0.132920E-01  -4.32059      -13.1622       13.1622       483.567       496.729    
  55  0.764420     -0.268638     -0.818378      0.818378       488.277       489.095    
  56  0.923703     -0.793652E-01 -0.241778      0.241778       498.664       498.906    
  57  0.568421     -0.564893      -1.72089       1.72089       505.004       506.725    
  58  0.165473      -1.79895      -5.48032       5.48032       506.040       511.520    
  59  0.471112E-01  -3.05524      -9.30749       9.30749       528.046       537.353    
  60  0.947905     -0.535014E-01 -0.162986      0.162986       526.830       526.993    
  61  0.142663      -1.94727      -5.93217       5.93217       558.004       563.936    
  62  0.594440     -0.520136      -1.58454       1.58454       569.773       571.358    
  63  0.476329     -0.741646      -2.25935       2.25935       531.606       533.866    
  64  0.221968      -1.50522      -4.58551       4.58551       575.025       579.611    
  65  0.381433     -0.963821      -2.93618       2.93618       571.417       574.353    
  66  0.278383      -1.27876      -3.89560       3.89560       584.229       588.124    
  67  0.372971     -0.986255      -3.00453       3.00453       580.284       583.289    
  68  0.945674     -0.558575E-01 -0.170164      0.170164       605.970       606.140    
  69  0.284971      -1.25537      -3.82435       3.82435       473.281       477.105    
loop,thermsimp(1:2)       25   2.23874       2.91072    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102       1579.08          1.00          0.37         14.08          5.57          0.02         21.03
Just calling func    0   0         21.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    103        596.90          1.00          0.36         14.09          5.58          0.01         21.04
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    596.90
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.04640               109
loop is:       25
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    3.04640               109
loop is:       26
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      109
neval,tstepnext:      102     109

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.241161      -1.42229      -4.33286       4.33286       308.061       312.393    
   2  0.541127     -0.614101      -1.87080       1.87080       346.616       348.487    
   3  0.231437      -1.46345      -4.45824       4.45824       347.698       352.156    
   4  0.478482E-01  -3.03972      -9.26021       9.26021       357.824       367.084    
   5  0.946762     -0.547080E-01 -0.166662      0.166662       357.798       357.965    
   6  0.922467     -0.807036E-01 -0.245855      0.245855       358.528       358.774    
   7  0.574496     -0.554262      -1.68850       1.68850       364.118       365.806    
   8  0.151210      -1.88908      -5.75490       5.75490       362.241       367.996    
   9  0.567366     -0.566750      -1.72655       1.72655       355.343       357.070    
  10  0.931156     -0.713280E-01 -0.217293      0.217293       364.389       364.606    
  11  0.435242     -0.831852      -2.53415       2.53415       366.411       368.945    
  12  0.153647      -1.87310      -5.70620       5.70620       367.317       373.023    
  13  0.520603     -0.652767      -1.98859       1.98859       369.662       371.650    
  14  0.200156      -1.60866      -4.90062       4.90062       365.773       370.674    
  15  0.414587     -0.880473      -2.68227       2.68227       370.669       373.351    
  16  0.319024      -1.14249      -3.48048       3.48048       369.701       373.182    
  17  0.924419E-01  -2.38117      -7.25401       7.25401       372.198       379.452    
  18  0.530480     -0.633974      -1.93134       1.93134       374.663       376.594    
  19  0.106900      -2.23586      -6.81133       6.81133       376.192       383.003    
  20  0.402551     -0.909933      -2.77202       2.77202       373.866       376.638    
  21  0.295875      -1.21782      -3.70996       3.70996       376.578       380.288    
  22  0.563325     -0.573899      -1.74833       1.74833       375.089       376.837    
  23  0.206411      -1.57788      -4.80686       4.80686       381.085       385.892    
  24  0.916073E-01  -2.39024      -7.28164       7.28164       381.262       388.544    
  25  0.665403     -0.407363      -1.24099       1.24099       377.360       378.601    
  26  0.825688     -0.191539     -0.583504      0.583504       381.984       382.567    
  27  0.344106      -1.06680      -3.24991       3.24991       376.099       379.348    
  28  0.974170     -0.261699E-01 -0.797240E-01  0.797240E-01   381.049       381.128    
  29  0.277229      -1.28291      -3.90825       3.90825       378.273       382.182    
  30  0.388467     -0.945546      -2.88051       2.88051       386.862       389.742    
  31  0.956302     -0.446812E-01 -0.136117      0.136117       389.002       389.138    
  32  0.254015      -1.37036      -4.17466       4.17466       377.061       381.236    
  33  0.627951     -0.465293      -1.41747       1.41747       388.383       389.801    
  34  0.563611     -0.573391      -1.74678       1.74678       375.581       377.328    
  35  0.546508     -0.604207      -1.84065       1.84065       395.584       397.425    
  36  0.221424      -1.50767      -4.59298       4.59298       397.839       402.432    
  37  0.495100     -0.702996      -2.14161       2.14161       393.934       396.075    
  38  0.513225     -0.667040      -2.03207       2.03207       398.856       400.888    
  39  0.883659     -0.123684     -0.376790      0.376790       402.368       402.745    
  40  0.602649E-01  -2.80900      -8.55735       8.55735       403.304       411.861    
  41  0.475280     -0.743850      -2.26606       2.26606       403.219       405.485    
  42  0.872422     -0.136482     -0.415779      0.415779       416.110       416.526    
  43  0.507612     -0.678038      -2.06557       2.06557       417.257       419.322    
  44  0.670973     -0.399027      -1.21560       1.21560       434.191       435.407    
  45  0.810308     -0.210341     -0.640783      0.640783       435.963       436.604    
  46  0.283076E-02  -5.86721      -17.8739       17.8739       450.832       468.706    
  47  0.914844E-01  -2.39159      -7.28573       7.28573       459.873       467.159    
  48  0.469434     -0.756227      -2.30377       2.30377       448.828       451.132    
  49  0.243684E-01  -3.71447      -11.3157       11.3157       464.340       475.656    
  50  0.321746      -1.13399      -3.45459       3.45459       465.923       469.378    
  51  0.276203      -1.28662      -3.91955       3.91955       471.280       475.199    
  52  0.501568     -0.690015      -2.10206       2.10206       474.148       476.250    
  53  0.931498     -0.709617E-01 -0.216177      0.216177       473.281       473.497    
  54  0.223832      -1.49686      -4.56003       4.56003       488.277       492.837    
  55  0.465980     -0.763611      -2.32626       2.32626       483.567       485.893    
  56  0.472331     -0.750076      -2.28503       2.28503       491.031       493.316    
  57  0.466994     -0.761439      -2.31965       2.31965       498.664       500.983    
  58  0.309091      -1.17412      -3.57684       3.57684       505.004       508.581    
  59  0.627588     -0.465872      -1.41923       1.41923       506.040       507.459    
  60  0.953223     -0.479064E-01 -0.145942      0.145942       526.830       526.976    
  61  0.640674     -0.445234      -1.35636       1.35636       531.606       532.963    
  62  0.600712     -0.509640      -1.55257       1.55257       528.046       529.598    
  63  0.752171     -0.284791     -0.867587      0.867587       558.004       558.871    
  64  0.484164     -0.725332      -2.20965       2.20965       569.773       571.983    
  65  0.416788     -0.875178      -2.66614       2.66614       571.417       574.083    
  66  0.399492     -0.917562      -2.79526       2.79526       575.025       577.821    
  67  0.976052     -0.242390E-01 -0.738415E-01  0.738415E-01   580.284       580.358    
  68  0.529152     -0.636480      -1.93897       1.93897       584.229       586.167    
  69  0.887894     -0.118903     -0.362225      0.362225       596.902       597.264    
loop,thermsimp(1:2)       26   4.33286       1.87080    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104        429.52          1.00          0.37         14.09          5.57          0.01         21.04
Just calling func    0   0         21.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    429.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.04640               109
loop is:       26
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    3.04640               109
loop is:       27
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      109
neval,tstepnext:      103     109

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.259907E-01  -3.65002      -11.1194       11.1194       308.061       319.180    
   2  0.968797     -0.316998E-01 -0.965702E-01  0.965702E-01   346.616       346.713    
   3  0.165450      -1.79909      -5.48073       5.48073       347.698       353.179    
   4  0.430766     -0.842190      -2.56565       2.56565       355.343       357.909    
   5  0.750732     -0.286706     -0.873421      0.873421       357.798       358.672    
   6  0.931719E-01  -2.37331      -7.23004       7.23004       358.528       365.758    
   7  0.367733      -1.00040      -3.04761       3.04761       364.389       367.437    
   8  0.913167E-01  -2.39342      -7.29132       7.29132       364.118       371.409    
   9  0.196912      -1.62500      -4.95040       4.95040       357.824       362.774    
  10  0.205958      -1.58008      -4.81356       4.81356       362.241       367.054    
  11  0.770208     -0.261095     -0.795398      0.795398       366.411       367.206    
  12  0.333154      -1.09915      -3.34845       3.34845       365.773       369.121    
  13  0.840252     -0.174053     -0.530234      0.530234       369.662       370.192    
  14  0.483985     -0.725701      -2.21078       2.21078       367.317       369.527    
  15  0.836431     -0.178612     -0.544122      0.544122       369.701       370.245    
  16  0.249264      -1.38924      -4.23219       4.23219       370.669       374.901    
  17  0.897884     -0.107714     -0.328140      0.328140       374.663       374.991    
  18  0.965293     -0.353234E-01 -0.107609      0.107609       373.866       373.974    
  19  0.377270E-01  -3.27738      -9.98420       9.98420       375.089       385.073    
  20  0.281354      -1.26814      -3.86326       3.86326       375.581       379.444    
  21  0.848269     -0.164557     -0.501306      0.501306       377.360       377.862    
  22  0.539425     -0.617251      -1.88039       1.88039       376.099       377.979    
  23  0.206682      -1.57658      -4.80288       4.80288       372.198       377.001    
  24  0.287315      -1.24718      -3.79939       3.79939       376.578       380.378    
  25  0.754710     -0.281422     -0.857323      0.857323       381.049       381.906    
  26  0.438872     -0.823547      -2.50885       2.50885       377.061       379.570    
  27  0.501272     -0.690606      -2.10386       2.10386       378.273       380.377    
  28  0.344762      -1.06490      -3.24411       3.24411       381.984       385.228    
  29  0.963706     -0.369694E-01 -0.112624      0.112624       376.192       376.305    
  30  0.265773      -1.32511      -4.03682       4.03682       381.085       385.122    
  31  0.764669E-01  -2.57090      -7.83198       7.83198       381.262       389.094    
  32  0.331856E-01  -3.40564      -10.3749       10.3749       389.002       399.377    
  33  0.363020      -1.01330      -3.08691       3.08691       386.862       389.949    
  34  0.653853     -0.424872      -1.29433       1.29433       388.383       389.678    
  35  0.228971      -1.47416      -4.49087       4.49087       393.934       398.424    
  36  0.505888     -0.681440      -2.07594       2.07594       395.584       397.660    
  37  0.284083      -1.25849      -3.83385       3.83385       398.856       402.690    
  38  0.143166      -1.94375      -5.92144       5.92144       397.839       403.760    
  39  0.275762E-01  -3.59080      -10.9390       10.9390       402.368       413.307    
  40  0.736553     -0.305774     -0.931510      0.931510       403.219       404.151    
  41  0.471866E-01  -3.05365      -9.30262       9.30262       403.304       412.607    
  42  0.615540E-01  -2.78784      -8.49287       8.49287       416.110       424.603    
  43  0.332354      -1.10156      -3.35578       3.35578       417.257       420.612    
  44  0.554929     -0.588915      -1.79407       1.79407       434.191       435.985    
  45  0.285931      -1.25201      -3.81411       3.81411       435.963       439.777    
  46  0.661898     -0.412645      -1.25708       1.25708       448.828       450.085    
  47  0.838158     -0.176549     -0.537839      0.537839       459.873       460.411    
  48  0.768993     -0.262673     -0.800207      0.800207       450.832       451.632    
  49  0.713877     -0.337045      -1.02677       1.02677       465.923       466.950    
  50  0.667219     -0.404637      -1.23269       1.23269       473.281       474.513    
  51  0.348870      -1.05306      -3.20803       3.20803       471.280       474.488    
  52  0.192740E-01  -3.94900      -12.0302       12.0302       464.340       476.371    
  53  0.690824     -0.369870      -1.12677       1.12677       474.148       475.275    
  54  0.820268     -0.198124     -0.603566      0.603566       483.567       484.170    
  55  0.578395     -0.547498      -1.66790       1.66790       488.277       489.945    
  56  0.588345     -0.530441      -1.61594       1.61594       491.031       492.647    
  57  0.942444     -0.592789E-01 -0.180587      0.180587       498.664       498.844    
  58  0.890640E-01  -2.41840      -7.36741       7.36741       506.040       513.407    
  59  0.315475      -1.15368      -3.51456       3.51456       505.004       508.519    
  60  0.573884     -0.555328      -1.69175       1.69175       526.830       528.522    
  61  0.244604      -1.40811      -4.28968       4.28968       528.046       532.335    
  62  0.955010     -0.460331E-01 -0.140235      0.140235       531.606       531.746    
  63  0.759255     -0.275417     -0.839030      0.839030       558.004       558.843    
  64  0.404239     -0.905750      -2.75928       2.75928       569.773       572.532    
  65  0.222667      -1.50208      -4.57593       4.57593       571.417       575.993    
  66  0.958415     -0.424741E-01 -0.129393      0.129393       575.025       575.155    
  67  0.240268      -1.42600      -4.34416       4.34416       580.284       584.628    
  68  0.737249     -0.304830     -0.928633      0.928633       584.229       585.157    
  69  0.729187     -0.315826     -0.962131      0.962131       429.520       430.482    
loop,thermsimp(1:2)       27   11.1194      0.965702E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    105        381.63          1.00          0.36         14.04          5.58          0.01         20.99
Just calling func    0   0         21.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    381.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.04640               109
loop is:       27
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    3.04640               109
loop is:       28
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      109
neval,tstepnext:      104     109

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.790496     -0.235094     -0.716190      0.716190       308.061       308.777    
   2  0.622608     -0.473838      -1.44350       1.44350       346.616       348.060    
   3  0.657544     -0.419244      -1.27718       1.27718       347.698       348.975    
   4  0.180153E-01  -4.01654      -12.2360       12.2360       355.343       367.579    
   5  0.587531     -0.531826      -1.62015       1.62015       357.798       359.418    
   6  0.337716      -1.08555      -3.30702       3.30702       357.824       361.131    
   7  0.750569     -0.286924     -0.874085      0.874085       358.528       359.402    
   8  0.469144     -0.756846      -2.30565       2.30565       362.241       364.546    
   9  0.637992     -0.449429      -1.36914       1.36914       366.411       367.780    
  10  0.222555      -1.50258      -4.57746       4.57746       364.389       368.966    
  11  0.908711     -0.957284E-01 -0.291627      0.291627       365.773       366.065    
  12  0.339158      -1.08129      -3.29404       3.29404       367.317       370.611    
  13  0.916856E-01  -2.38939      -7.27903       7.27903       369.662       376.941    
  14  0.826366     -0.190718     -0.581001      0.581001       369.701       370.282    
  15  0.735060     -0.307803     -0.937692      0.937692       364.118       365.055    
  16  0.613971     -0.487808      -1.48606       1.48606       373.866       375.352    
  17  0.758429     -0.276507     -0.842349      0.842349       370.669       371.511    
  18  0.415524     -0.878215      -2.67539       2.67539       374.663       377.338    
  19  0.951554E-01  -2.35224      -7.16587       7.16587       376.192       383.358    
  20  0.237507      -1.43756      -4.37938       4.37938       372.198       376.578    
  21  0.399337E-01  -3.22054      -9.81103       9.81103       377.360       387.171    
  22  0.859134     -0.151830     -0.462535      0.462535       376.099       376.561    
  23  0.684636     -0.378868      -1.15418       1.15418       375.581       376.735    
  24  0.726522E-01  -2.62207      -7.98787       7.98787       377.061       385.049    
  25  0.397884     -0.921596      -2.80755       2.80755       378.273       381.081    
  26  0.475789     -0.742781      -2.26281       2.26281       376.578       378.841    
  27  0.287375E-01  -3.54955      -10.8133       10.8133       381.049       391.862    
  28  0.575942     -0.551748      -1.68084       1.68084       375.089       376.770    
  29  0.971835     -0.285695E-01 -0.870341E-01  0.870341E-01   381.085       381.172    
  30  0.351596      -1.04527      -3.18432       3.18432       381.984       385.168    
  31  0.372517     -0.987473      -3.00824       3.00824       381.262       384.271    
  32  0.821349     -0.196807     -0.599553      0.599553       388.383       388.983    
  33  0.396131     -0.926011      -2.82100       2.82100       386.862       389.683    
  34  0.128380      -2.05276      -6.25353       6.25353       395.584       401.838    
  35  0.928981     -0.736672E-01 -0.224420      0.224420       393.934       394.158    
  36  0.459826     -0.776907      -2.36677       2.36677       389.002       391.369    
  37  0.689551     -0.371714      -1.13239       1.13239       398.856       399.988    
  38  0.842850     -0.170966     -0.520832      0.520832       397.839       398.360    
  39  0.909375     -0.949981E-01 -0.289402      0.289402       403.219       403.509    
  40  0.737938     -0.303896     -0.925789      0.925789       403.304       404.230    
  41  0.100706      -2.29555      -6.99315       6.99315       402.368       409.362    
  42  0.271473      -1.30389      -3.97218       3.97218       417.257       421.229    
  43  0.610912     -0.492803      -1.50127       1.50127       416.110       417.612    
  44  0.402812E-01  -3.21187      -9.78464       9.78464       429.520       439.305    
  45  0.751157     -0.286140     -0.871697      0.871697       434.191       435.063    
  46  0.577459     -0.549118      -1.67283       1.67283       435.963       437.636    
  47  0.528336     -0.638023      -1.94367       1.94367       448.828       450.772    
  48  0.108954      -2.21683      -6.75333       6.75333       450.832       457.585    
  49  0.793115     -0.231787     -0.706116      0.706116       459.873       460.579    
  50  0.321696      -1.13415      -3.45507       3.45507       465.923       469.378    
  51  0.635419     -0.453471      -1.38145       1.38145       471.280       472.661    
  52  0.837176     -0.177721     -0.541408      0.541408       473.281       473.822    
  53  0.655822     -0.421865      -1.28517       1.28517       474.148       475.433    
  54  0.493327     -0.706583      -2.15253       2.15253       464.340       466.493    
  55  0.244832      -1.40718      -4.28684       4.28684       483.567       487.854    
  56  0.879636     -0.128247     -0.390691      0.390691       488.277       488.668    
  57  0.561875     -0.576476      -1.75618       1.75618       491.031       492.787    
  58  0.196749      -1.62583      -4.95291       4.95291       498.664       503.617    
  59  0.780499     -0.247821     -0.754962      0.754962       505.004       505.759    
  60  0.640370     -0.445708      -1.35781       1.35781       506.040       507.397    
  61  0.774935     -0.254977     -0.776760      0.776760       526.830       527.607    
  62  0.729428     -0.315495     -0.961124      0.961124       531.606       532.567    
  63  0.498588     -0.695975      -2.12022       2.12022       528.046       530.166    
  64  0.900729     -0.104550     -0.318502      0.318502       558.004       558.322    
  65  0.934847     -0.673728E-01 -0.205244      0.205244       569.773       569.978    
  66  0.595290E-01  -2.82129      -8.59478       8.59478       575.025       583.620    
  67  0.791213     -0.234188     -0.713430      0.713430       571.417       572.131    
  68  0.960681     -0.401133E-01 -0.122201      0.122201       580.284       580.406    
  69  0.413692     -0.882634      -2.68885       2.68885       381.630       384.319    
loop,thermsimp(1:2)       28  0.716190       1.44350    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    106        360.49          1.00          0.37         14.10          5.50          0.01         20.97
Just calling func    0   0         20.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    360.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.04640               109
loop is:       28
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    3.04640               109
loop is:       29
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      109
neval,tstepnext:      105     109

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.448517     -0.801809      -2.44263       2.44263       308.061       310.503    
   2  0.798846E-02  -4.82976      -14.7134       14.7134       346.616       361.330    
   3  0.622462     -0.474073      -1.44422       1.44422       347.698       349.142    
   4  0.471828     -0.751142      -2.28828       2.28828       358.528       360.816    
   5  0.857129E-01  -2.45675      -7.48424       7.48424       357.798       365.283    
   6  0.773267     -0.257131     -0.783322      0.783322       357.824       358.607    
   7  0.875721     -0.132708     -0.404280      0.404280       362.241       362.645    
   8  0.731035     -0.313294     -0.954418      0.954418       364.118       365.072    
   9  0.756676     -0.278820     -0.849398      0.849398       365.773       366.622    
  10  0.447646     -0.803752      -2.44855       2.44855       355.343       357.792    
  11  0.513865     -0.665794      -2.02827       2.02827       366.411       368.439    
  12  0.663179E-01  -2.71329      -8.26578       8.26578       364.389       372.655    
  13  0.594268     -0.520424      -1.58542       1.58542       369.701       371.287    
  14  0.233984      -1.45250      -4.42490       4.42490       367.317       371.742    
  15  0.568604     -0.564571      -1.71991       1.71991       370.669       372.389    
  16  0.363380E-02  -5.61748      -17.1131       17.1131       373.866       390.979    
  17  0.590645E-01  -2.82912      -8.61864       8.61864       376.099       384.717    
  18  0.744388     -0.295193     -0.899277      0.899277       372.198       373.098    
  19  0.119519      -2.12428      -6.47140       6.47140       375.581       382.052    
  20  0.778916     -0.249852     -0.761148      0.761148       375.089       375.850    
  21  0.408724     -0.894716      -2.72566       2.72566       369.662       372.387    
  22  0.114724      -2.16523      -6.59614       6.59614       374.663       381.259    
  23  0.627979     -0.465248      -1.41733       1.41733       376.578       377.996    
  24  0.672559     -0.396665      -1.20840       1.20840       378.273       379.482    
  25  0.835640     -0.179557     -0.547004      0.547004       381.085       381.632    
  26  0.348030      -1.05547      -3.21537       3.21537       376.192       379.407    
  27  0.210796      -1.55686      -4.74282       4.74282       381.262       386.005    
  28  0.317813      -1.14629      -3.49206       3.49206       381.630       385.122    
  29  0.908686     -0.957556E-01 -0.291710      0.291710       377.061       377.353    
  30  0.536445     -0.622790      -1.89727       1.89727       381.984       383.881    
  31  0.231388      -1.46366      -4.45889       4.45889       377.360       381.819    
  32  0.498398     -0.696357      -2.12138       2.12138       388.383       390.505    
  33  0.736515     -0.305825     -0.931665      0.931665       386.862       387.794    
  34  0.173645      -1.75074      -5.33345       5.33345       389.002       394.336    
  35  0.634967     -0.454182      -1.38362       1.38362       381.049       382.432    
  36  0.831759     -0.184212     -0.561183      0.561183       393.934       394.495    
  37  0.218120      -1.52271      -4.63878       4.63878       397.839       402.478    
  38  0.931280     -0.711949E-01 -0.216888      0.216888       398.856       399.073    
  39  0.801144     -0.221714     -0.675430      0.675430       395.584       396.260    
  40  0.775832     -0.253819     -0.773233      0.773233       403.219       403.993    
  41  0.753416     -0.283137     -0.862548      0.862548       403.304       404.167    
  42  0.189051      -1.66574      -5.07451       5.07451       402.368       407.443    
  43  0.960558     -0.402405E-01 -0.122589      0.122589       416.110       416.233    
  44  0.925875     -0.770164E-01 -0.234623      0.234623       417.257       417.491    
  45  0.939930     -0.619495E-01 -0.188723      0.188723       434.191       434.380    
  46  0.179365      -1.71833      -5.23473       5.23473       435.963       441.198    
  47  0.118092      -2.13629      -6.50798       6.50798       429.520       436.028    
  48  0.825995     -0.191166     -0.582369      0.582369       448.828       449.410    
  49  0.391109     -0.938768      -2.85986       2.85986       450.832       453.692    
  50  0.296359      -1.21618      -3.70498       3.70498       459.873       463.578    
  51  0.878571     -0.129459     -0.394383      0.394383       464.340       464.735    
  52  0.308784      -1.17511      -3.57986       3.57986       465.923       469.503    
  53  0.359214      -1.02384      -3.11902       3.11902       471.280       474.399    
  54  0.539117     -0.617823      -1.88213       1.88213       473.281       475.163    
  55  0.747398     -0.291158     -0.886982      0.886982       474.148       475.035    
  56  0.346049      -1.06118      -3.23276       3.23276       483.567       486.799    
  57  0.983160     -0.169829E-01 -0.517367E-01  0.517367E-01   488.277       488.329    
  58  0.336966      -1.08777      -3.31379       3.31379       491.031       494.345    
  59  0.187008      -1.67660      -5.10760       5.10760       498.664       503.771    
  60  0.925545E-01  -2.37996      -7.25030       7.25030       505.004       512.255    
  61  0.546914     -0.603464      -1.83839       1.83839       506.040       507.878    
  62  0.383867     -0.957460      -2.91681       2.91681       526.830       529.747    
  63  0.594463     -0.520097      -1.58442       1.58442       528.046       529.630    
  64  0.381065     -0.964785      -2.93912       2.93912       531.606       534.545    
  65  0.298802      -1.20797      -3.67997       3.67997       558.004       561.684    
  66  0.493033     -0.707180      -2.15435       2.15435       569.773       571.927    
  67  0.216625E-01  -3.83217      -11.6743       11.6743       571.417       583.091    
  68  0.635445     -0.453430      -1.38133       1.38133       580.284       581.665    
  69  0.234544      -1.45011      -4.41762       4.41762       360.492       364.909    
loop,thermsimp(1:2)       29   2.44263       14.7134    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    107       1526.05          1.00          0.37         14.11          5.50          0.02         21.00
Just calling func    0   0         21.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    108        515.99          1.00          0.36         14.11          5.52          0.01         20.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    515.99
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.04640               109
loop is:       29
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    3.04640               109
loop is:       30
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      109
neval,tstepnext:      107     109

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.405536     -0.902547      -2.74952       2.74952       308.061       310.810    
   2  0.753077     -0.283588     -0.863923      0.863923       347.698       348.562    
   3  0.517810     -0.658147      -2.00498       2.00498       355.343       357.348    
   4  0.294833      -1.22135      -3.72071       3.72071       357.824       361.545    
   5  0.998794E-03  -6.90896      -21.0474       21.0474       358.528       379.575    
   6  0.591324     -0.525390      -1.60055       1.60055       346.616       348.217    
   7  0.662405     -0.411879      -1.25475       1.25475       362.241       363.495    
   8  0.746363     -0.292544     -0.891204      0.891204       360.492       361.383    
   9  0.393046     -0.933829      -2.84482       2.84482       364.118       366.962    
  10  0.333365      -1.09852      -3.34652       3.34652       357.798       361.145    
  11  0.324418E-02  -5.73089      -17.4586       17.4586       365.773       383.231    
  12  0.863015     -0.147323     -0.448806      0.448806       366.411       366.860    
  13  0.617726     -0.481711      -1.46748       1.46748       369.701       371.169    
  14  0.315534      -1.15349      -3.51398       3.51398       367.317       370.831    
  15  0.430801     -0.842108      -2.56540       2.56540       369.662       372.227    
  16  0.749803     -0.287945     -0.877194      0.877194       370.669       371.546    
  17  0.478303E-01  -3.04010      -9.26134       9.26134       364.389       373.650    
  18  0.964975     -0.356529E-01 -0.108613      0.108613       372.198       372.307    
  19  0.733259     -0.310256     -0.945165      0.945165       375.089       376.034    
  20  0.193318      -1.64342      -5.00651       5.00651       377.061       382.068    
  21  0.490700     -0.711923      -2.16880       2.16880       376.578       378.747    
  22  0.790580     -0.234988     -0.715868      0.715868       376.192       376.908    
  23  0.139947      -1.96649      -5.99071       5.99071       378.273       384.264    
  24  0.212749      -1.54764      -4.71473       4.71473       374.663       379.378    
  25  0.353204      -1.04071      -3.17042       3.17042       381.085       384.255    
  26  0.483656     -0.726381      -2.21285       2.21285       377.360       379.573    
  27  0.996282     -0.372461E-02 -0.113467E-01  0.113467E-01   375.581       375.592    
  28  0.916953     -0.866986E-01 -0.264118      0.264118       381.049       381.313    
  29  0.924049E-01  -2.38157      -7.25523       7.25523       381.984       389.239    
  30  0.486178     -0.721180      -2.19700       2.19700       376.099       378.296    
  31  0.606389     -0.500233      -1.52391       1.52391       381.630       383.154    
  32  0.185687      -1.68369      -5.12919       5.12919       381.262       386.392    
  33  0.395849     -0.926722      -2.82316       2.82316       386.862       389.685    
  34  0.843354     -0.170369     -0.519012      0.519012       388.383       388.902    
  35  0.970470E-02  -4.63514      -14.1205       14.1205       373.866       387.987    
  36  0.931768     -0.706715E-01 -0.215293      0.215293       389.002       389.217    
  37  0.844121     -0.169460     -0.516243      0.516243       393.934       394.450    
  38  0.546310     -0.604569      -1.84176       1.84176       395.584       397.426    
  39  0.598669     -0.513047      -1.56294       1.56294       398.856       400.419    
  40  0.286002      -1.25176      -3.81335       3.81335       397.839       401.652    
  41  0.597649     -0.514752      -1.56814       1.56814       403.219       404.787    
  42  0.123500      -2.09151      -6.37158       6.37158       403.304       409.676    
  43  0.964446     -0.362010E-01 -0.110283      0.110283       402.368       402.479    
  44  0.109400      -2.21274      -6.74089       6.74089       416.110       422.851    
  45  0.684649     -0.378848      -1.15412       1.15412       417.257       418.411    
  46  0.270676      -1.30683      -3.98113       3.98113       434.191       438.172    
  47  0.718376E-01  -2.63335      -8.02223       8.02223       429.520       437.542    
  48  0.287116E-01  -3.55045      -10.8161       10.8161       435.963       446.779    
  49  0.905670     -0.990803E-01 -0.301838      0.301838       448.828       449.130    
  50  0.928818     -0.738421E-01 -0.224952      0.224952       450.832       451.057    
  51  0.838369     -0.176297     -0.537072      0.537072       459.873       460.410    
  52  0.678378     -0.388051      -1.18216       1.18216       464.340       465.523    
  53  0.727479     -0.318171     -0.969275      0.969275       465.923       466.892    
  54  0.623379     -0.472601      -1.43973       1.43973       471.280       472.720    
  55  0.475445E-01  -3.04609      -9.27960       9.27960       474.148       483.428    
  56  0.369786     -0.994830      -3.03065       3.03065       473.281       476.311    
  57  0.602729     -0.506287      -1.54235       1.54235       483.567       485.109    
  58  0.917090     -0.865501E-01 -0.263666      0.263666       488.277       488.541    
  59  0.901032     -0.104214     -0.317478      0.317478       491.031       491.348    
  60  0.269307      -1.31190      -3.99658       3.99658       498.664       502.660    
  61  0.690482     -0.370366      -1.12828       1.12828       506.040       507.168    
  62  0.285518      -1.25345      -3.81851       3.81851       505.004       508.823    
  63  0.941829     -0.599314E-01 -0.182575      0.182575       528.046       528.228    
  64  0.792195     -0.232947     -0.709650      0.709650       526.830       527.540    
  65  0.446482     -0.806357      -2.45648       2.45648       531.606       534.063    
  66  0.737535     -0.304442     -0.927451      0.927451       558.004       558.931    
  67  0.939213     -0.627129E-01 -0.191049      0.191049       569.773       569.964    
  68  0.191433      -1.65322      -5.03636       5.03636       580.284       585.320    
  69  0.735067     -0.307793     -0.937660      0.937660       515.985       516.923    
loop,thermsimp(1:2)       30   2.74952      0.863923    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    109       1396.38          1.00          0.36         14.09          5.55          0.02         21.03
Just calling func    0   0         21.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    110        470.13          0.99          0.36         14.02          5.61          0.01         21.00
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    470.13
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.04640               109
loop is:       30
neval is:      109
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    3.04640               109
loop is:       31
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      109
neval,tstepnext:      109     109

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.399878     -0.916596      -2.79232       2.79232       308.061       310.853    
   2  0.668918     -0.402095      -1.22494       1.22494       346.616       347.841    
   3  0.212189      -1.55028      -4.72276       4.72276       347.698       352.421    
   4  0.855324     -0.156275     -0.476076      0.476076       355.343       355.819    
   5  0.829283     -0.187194     -0.570267      0.570267       357.798       358.369    
   6  0.912230     -0.918627E-01 -0.279850      0.279850       360.492       360.771    
   7  0.516042     -0.661566      -2.01539       2.01539       357.824       359.839    
   8  0.830065     -0.186251     -0.567395      0.567395       362.241       362.808    
   9  0.969925     -0.305368E-01 -0.930272E-01  0.930272E-01   366.411       366.504    
  10  0.657055     -0.419988      -1.27945       1.27945       364.118       365.397    
  11  0.800230     -0.222857     -0.678910      0.678910       367.317       367.996    
  12  0.331618      -1.10377      -3.36253       3.36253       369.701       373.064    
  13  0.438858     -0.823579      -2.50895       2.50895       370.669       373.178    
  14  0.807006     -0.214424     -0.653220      0.653220       369.662       370.315    
  15  0.396625     -0.924764      -2.81720       2.81720       372.198       375.016    
  16  0.320929      -1.13653      -3.46234       3.46234       364.389       367.851    
  17  0.161204      -1.82509      -5.55994       5.55994       375.581       381.141    
  18  0.946491     -0.549937E-01 -0.167533      0.167533       375.089       375.256    
  19  0.924115     -0.789184E-01 -0.240417      0.240417       376.192       376.432    
  20  0.627740     -0.465629      -1.41849       1.41849       376.099       377.517    
  21  0.751471     -0.285723     -0.870425      0.870425       376.578       377.449    
  22  0.363523      -1.01191      -3.08269       3.08269       374.663       377.746    
  23  0.507866     -0.677537      -2.06405       2.06405       377.360       379.424    
  24  0.546544     -0.604141      -1.84045       1.84045       358.528       360.368    
  25  0.191709      -1.65177      -5.03196       5.03196       381.049       386.081    
  26  0.664140     -0.409262      -1.24677       1.24677       377.061       378.308    
  27  0.511990     -0.669450      -2.03941       2.03941       381.630       383.670    
  28  0.995424     -0.458623E-02 -0.139715E-01  0.139715E-01   365.773       365.787    
  29  0.641210     -0.444398      -1.35381       1.35381       381.085       382.439    
  30  0.610385     -0.493665      -1.50390       1.50390       378.273       379.777    
  31  0.558511     -0.582481      -1.77447       1.77447       381.262       383.037    
  32  0.591302     -0.525428      -1.60066       1.60066       373.866       375.467    
  33  0.658820     -0.417305      -1.27128       1.27128       388.383       389.655    
  34  0.928169     -0.745415E-01 -0.227083      0.227083       389.002       389.229    
  35  0.238443      -1.43363      -4.36739       4.36739       381.984       386.351    
  36  0.531988     -0.631135      -1.92269       1.92269       386.862       388.785    
  37  0.443688     -0.812633      -2.47561       2.47561       393.934       396.409    
  38  0.305385E-01  -3.48877      -10.6282       10.6282       395.584       406.213    
  39  0.844535     -0.168969     -0.514747      0.514747       398.856       399.371    
  40  0.279961      -1.27310      -3.87838       3.87838       397.839       401.717    
  41  0.371484E-01  -3.29283      -10.0313       10.0313       402.368       412.400    
  42  0.614903     -0.486290      -1.48143       1.48143       403.219       404.701    
  43  0.351800      -1.04469      -3.18255       3.18255       403.304       406.487    
  44  0.470005     -0.755012      -2.30007       2.30007       417.257       419.557    
  45  0.191918E-01  -3.95327      -12.0432       12.0432       416.110       428.154    
  46  0.117970      -2.13733      -6.51116       6.51116       429.520       436.031    
  47  0.424393     -0.857095      -2.61105       2.61105       434.191       436.802    
  48  0.952284     -0.488916E-01 -0.148943      0.148943       435.963       436.112    
  49  0.542283     -0.611968      -1.86430       1.86430       448.828       450.692    
  50  0.882587     -0.124898     -0.380489      0.380489       450.832       451.212    
  51  0.546434     -0.604341      -1.84106       1.84106       459.873       461.714    
  52  0.251183      -1.38157      -4.20882       4.20882       464.340       468.549    
  53  0.849492     -0.163116     -0.496918      0.496918       465.923       466.420    
  54  0.853900E-01  -2.46053      -7.49574       7.49574       471.280       478.776    
  55  0.555022     -0.588748      -1.79356       1.79356       473.281       475.074    
  56  0.357834      -1.02768      -3.13074       3.13074       474.148       477.279    
  57  0.457329     -0.782353      -2.38336       2.38336       483.567       485.950    
  58  0.295533      -1.21898      -3.71348       3.71348       488.277       491.990    
  59  0.486300     -0.720929      -2.19624       2.19624       491.031       493.227    
  60  0.127713      -2.05797      -6.26940       6.26940       498.664       504.933    
  61  0.686939     -0.375509      -1.14395       1.14395       506.040       507.184    
  62  0.172290      -1.75858      -5.35732       5.35732       505.004       510.362    
  63  0.509044     -0.675221      -2.05699       2.05699       515.985       518.042    
  64  0.659267     -0.416627      -1.26921       1.26921       526.830       528.099    
  65  0.663834     -0.409723      -1.24818       1.24818       528.046       529.294    
  66  0.193736      -1.64126      -4.99992       4.99992       531.606       536.606    
  67  0.423263     -0.859762      -2.61918       2.61918       558.004       560.623    
  68  0.143034      -1.94467      -5.92424       5.92424       569.773       575.697    
  69  0.221240E-01  -3.81109      -11.6101       11.6101       470.131       481.741    
loop,thermsimp(1:2)       31   2.79232       1.22494    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111        690.44          1.00          0.37         14.15          5.52          0.02         21.06
Just calling func    0   0         21.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112        313.34          1.00          0.36         14.04          5.53          0.01         20.94
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    313.34
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.04640               109
loop is:       31
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    3.04640               109
loop is:       32
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.913919               119

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      119
neval,tstepnext:      111     119

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960747E-01  -2.34263      -2.14097       2.14097       308.061       310.202    
   2  0.822641     -0.195236     -0.178430      0.178430       346.616       346.795    
   3  0.818920     -0.199768     -0.182572      0.182572       347.698       347.880    
   4  0.530765     -0.633435     -0.578909      0.578909       355.343       355.922    
   5  0.716574     -0.333273     -0.304585      0.304585       357.798       358.103    
   6  0.779527     -0.249068     -0.227628      0.227628       357.824       358.052    
   7  0.383602     -0.958151     -0.875673      0.875673       358.528       359.404    
   8  0.777200     -0.252058     -0.230361      0.230361       360.492       360.722    
   9  0.422255     -0.862146     -0.787932      0.787932       362.241       363.029    
  10  0.842288E-01  -2.47422      -2.26124       2.26124       364.118       366.379    
  11  0.355090      -1.03538     -0.946257      0.946257       365.773       366.719    
  12  0.311604      -1.16602      -1.06565       1.06565       366.411       367.477    
  13  0.331475      -1.10420      -1.00915       1.00915       364.389       365.398    
  14  0.867267     -0.142408     -0.130149      0.130149       367.317       367.447    
  15  0.381453     -0.963769     -0.880807      0.880807       369.662       370.543    
  16  0.851539     -0.160710     -0.146876      0.146876       369.701       369.848    
  17  0.201482      -1.60205      -1.46415       1.46415       370.669       372.133    
  18  0.276895      -1.28412      -1.17358       1.17358       372.198       373.372    
  19  0.491370     -0.710558     -0.649393      0.649393       375.089       375.738    
  20  0.174099E-01  -4.05072      -3.70203       3.70203       373.866       377.568    
  21  0.554456     -0.589769     -0.539001      0.539001       376.192       376.731    
  22  0.227973      -1.47853      -1.35126       1.35126       376.578       377.930    
  23  0.716863     -0.332870     -0.304216      0.304216       376.099       376.403    
  24  0.722924     -0.324451     -0.296522      0.296522       374.663       374.959    
  25  0.750443     -0.287091     -0.262378      0.262378       377.061       377.323    
  26  0.263935      -1.33205      -1.21739       1.21739       377.360       378.578    
  27  0.122948      -2.09599      -1.91557       1.91557       378.273       380.189    
  28  0.977452     -0.228061E-01 -0.208429E-01  0.208429E-01   375.581       375.602    
  29  0.844666     -0.168814     -0.154282      0.154282       381.085       381.239    
  30  0.430978     -0.841697     -0.769244      0.769244       381.262       382.032    
  31  0.309608      -1.17245      -1.07152       1.07152       381.630       382.702    
  32  0.702254     -0.353460     -0.323034      0.323034       381.049       381.372    
  33  0.448995     -0.800744     -0.731816      0.731816       381.984       382.715    
  34  0.922130     -0.810689E-01 -0.740905E-01  0.740905E-01   386.862       386.936    
  35  0.272440      -1.30034      -1.18840       1.18840       389.002       390.191    
  36  0.696142     -0.362202     -0.331024      0.331024       388.383       388.714    
  37  0.646986     -0.435431     -0.397948      0.397948       393.934       394.331    
  38  0.591196E-02  -5.13078      -4.68912       4.68912       398.856       403.545    
  39  0.120014      -2.12014      -1.93764       1.93764       397.839       399.777    
  40  0.610696     -0.493156     -0.450705      0.450705       403.219       403.670    
  41  0.796409     -0.227643     -0.208047      0.208047       395.584       395.792    
  42  0.467597     -0.760148     -0.694714      0.694714       403.304       403.999    
  43  0.786463     -0.240210     -0.219533      0.219533       402.368       402.588    
  44  0.957848     -0.430665E-01 -0.393593E-01  0.393593E-01   417.257       417.296    
  45  0.852397     -0.159702     -0.145955      0.145955       416.110       416.256    
  46  0.487208     -0.719064     -0.657167      0.657167       429.520       430.177    
  47  0.963082     -0.376172E-01 -0.343790E-01  0.343790E-01   435.963       435.998    
  48  0.887628     -0.119203     -0.108942      0.108942       434.191       434.300    
  49  0.741627E-01  -2.60149      -2.37756       2.37756       448.828       451.206    
  50  0.195714      -1.63110      -1.49069       1.49069       450.832       452.322    
  51  0.842587     -0.171279     -0.156535      0.156535       459.873       460.030    
  52  0.662369     -0.411932     -0.376473      0.376473       465.923       466.300    
  53  0.414947     -0.879604     -0.803887      0.803887       464.340       465.144    
  54  0.118097      -2.13625      -1.95236       1.95236       473.281       475.233    
  55  0.727771E-02  -4.92294      -4.49917       4.49917       474.148       478.647    
  56  0.425756     -0.853889     -0.780386      0.780386       471.280       472.060    
  57  0.775586     -0.254136     -0.232260      0.232260       470.131       470.363    
  58  0.956426     -0.445523E-01 -0.407172E-01  0.407172E-01   483.567       483.607    
  59  0.631676     -0.459379     -0.419835      0.419835       488.277       488.697    
  60  0.334070      -1.09641      -1.00203       1.00203       491.031       492.033    
  61  0.960423     -0.403818E-01 -0.369057E-01  0.369057E-01   498.664       498.701    
  62  0.901632     -0.103549     -0.946357E-01  0.946357E-01   506.040       506.134    
  63  0.786684     -0.239929     -0.219276      0.219276       505.004       505.224    
  64  0.335930      -1.09085     -0.996952      0.996952       515.985       516.982    
  65  0.234149      -1.45180      -1.32683       1.32683       526.830       528.157    
  66  0.372106     -0.988577     -0.903480      0.903480       528.046       528.949    
  67  0.114436      -2.16774      -1.98114       1.98114       531.606       533.587    
  68  0.992974     -0.705102E-02 -0.644407E-02  0.644407E-02   558.004       558.010    
  69  0.126993      -2.06362      -1.88598       1.88598       313.345       315.231    
loop,thermsimp(1:2)       32   2.14097      0.178430    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113        838.13          1.00          0.37         14.10          5.58          0.02         21.06
Just calling func    0   0         21.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114        533.66          1.00          0.36         14.13          5.47          0.01         20.97
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    533.66
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.913919               119
loop is:       32
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.913919               119
loop is:       33
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      119
neval,tstepnext:      113     119

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197145      -1.62381      -1.48404       1.48404       308.061       309.545    
   2  0.172537      -1.75714      -1.60589       1.60589       313.345       314.951    
   3  0.559869     -0.580053     -0.530122      0.530122       346.616       347.146    
   4  0.478515     -0.737068     -0.673621      0.673621       347.698       348.371    
   5  0.184961      -1.68761      -1.54234       1.54234       355.343       356.885    
   6  0.198760      -1.61566      -1.47658       1.47658       357.824       359.301    
   7  0.641425     -0.444062     -0.405837      0.405837       357.798       358.204    
   8  0.934891     -0.673256E-01 -0.615301E-01  0.615301E-01   358.528       358.589    
   9  0.849189     -0.163473     -0.149401      0.149401       360.492       360.641    
  10  0.241230      -1.42201      -1.29960       1.29960       362.241       363.540    
  11  0.732828     -0.310844     -0.284086      0.284086       364.389       364.673    
  12  0.325813      -1.12143      -1.02490       1.02490       364.118       365.143    
  13  0.201742      -1.60077      -1.46297       1.46297       365.773       367.236    
  14  0.198555      -1.61669      -1.47753       1.47753       367.317       368.794    
  15  0.136294      -1.99294      -1.82139       1.82139       366.411       368.232    
  16  0.368729     -0.997693     -0.911811      0.911811       369.701       370.613    
  17  0.938849     -0.631009E-01 -0.576692E-01  0.576692E-01   369.662       369.719    
  18  0.103617      -2.26705      -2.07190       2.07190       370.669       372.740    
  19  0.265600      -1.32576      -1.21164       1.21164       372.198       373.410    
  20  0.231845      -1.46168      -1.33586       1.33586       374.663       375.999    
  21  0.446558     -0.806186     -0.736789      0.736789       375.581       376.318    
  22  0.282350      -1.26461      -1.15575       1.15575       375.089       376.245    
  23  0.858767     -0.152258     -0.139151      0.139151       376.099       376.238    
  24  0.156176      -1.85677      -1.69694       1.69694       376.192       377.889    
  25  0.298810      -1.20795      -1.10397       1.10397       377.061       378.165    
  26  0.356625E-01  -3.33366      -3.04669       3.04669       373.866       376.913    
  27  0.339465      -1.08038     -0.987385      0.987385       376.578       377.566    
  28  0.746553     -0.292288     -0.267128      0.267128       377.360       377.627    
  29  0.588570     -0.530060     -0.484432      0.484432       378.273       378.758    
  30  0.349715      -1.05064     -0.960198      0.960198       381.085       382.045    
  31  0.254721      -1.36758      -1.24986       1.24986       381.049       382.299    
  32  0.998888     -0.111269E-02 -0.101691E-02  0.101691E-02   381.262       381.263    
  33  0.589387E-01  -2.83126      -2.58754       2.58754       381.630       384.218    
  34  0.408497     -0.895271     -0.818206      0.818206       381.984       382.802    
  35  0.961754     -0.389967E-01 -0.356399E-01  0.356399E-01   386.862       386.898    
  36  0.324758      -1.12468      -1.02786       1.02786       388.383       389.411    
  37  0.294251      -1.22332      -1.11802       1.11802       389.002       390.120    
  38  0.876463E-01  -2.43445      -2.22489       2.22489       393.934       396.158    
  39  0.557974     -0.583443     -0.533220      0.533220       395.584       396.118    
  40  0.860966E-01  -2.45229      -2.24119       2.24119       397.839       400.080    
  41  0.242117      -1.41834      -1.29624       1.29624       402.368       403.665    
  42  0.250466      -1.38443      -1.26526       1.26526       398.856       400.121    
  43  0.509718     -0.673897     -0.615887      0.615887       403.219       403.835    
  44  0.220531      -1.51172      -1.38159       1.38159       403.304       404.686    
  45  0.348682      -1.05359     -0.962901      0.962901       416.110       417.073    
  46  0.374743     -0.981516     -0.897027      0.897027       417.257       418.154    
  47  0.390525     -0.940263     -0.859325      0.859325       429.520       430.379    
  48  0.568306     -0.565095     -0.516451      0.516451       434.191       434.708    
  49  0.698485     -0.358842     -0.327952      0.327952       435.963       436.291    
  50  0.425203     -0.855189     -0.781574      0.781574       448.828       449.610    
  51  0.810231     -0.210436     -0.192322      0.192322       450.832       451.024    
  52  0.138508      -1.97682      -1.80666       1.80666       459.873       461.680    
  53  0.273035      -1.29816      -1.18641       1.18641       464.340       465.527    
  54  0.267820      -1.31744      -1.20403       1.20403       465.923       467.127    
  55  0.764722E-02  -4.87341      -4.45391       4.45391       470.131       474.585    
  56  0.594952     -0.519274     -0.474575      0.474575       471.280       471.754    
  57  0.993379E-01  -2.30923      -2.11045       2.11045       473.281       475.391    
  58  0.428644     -0.847128     -0.774207      0.774207       474.148       474.922    
  59  0.427707     -0.849318     -0.776208      0.776208       483.567       484.343    
  60  0.667005     -0.404958     -0.370099      0.370099       488.277       488.647    
  61  0.710013     -0.342472     -0.312992      0.312992       491.031       491.344    
  62  0.816166     -0.203137     -0.185651      0.185651       498.664       498.849    
  63  0.536006     -0.623610     -0.569929      0.569929       505.004       505.574    
  64  0.260634      -1.34464      -1.22889       1.22889       506.040       507.269    
  65  0.564742     -0.571386     -0.522201      0.522201       515.985       516.507    
  66  0.852686     -0.159364     -0.145646      0.145646       526.830       526.976    
  67  0.439594     -0.821904     -0.751154      0.751154       528.046       528.797    
  68  0.689106     -0.372361     -0.340308      0.340308       531.606       531.947    
  69  0.342869      -1.07041     -0.978266      0.978266       533.657       534.636    
loop,thermsimp(1:2)       33   1.48404       1.60589    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115        481.30          1.01          0.36         14.04          5.60          0.01         21.02
Just calling func    0   0         21.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    481.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.913919               119
loop is:       33
neval is:      114
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.913919               119
loop is:       34
neval is:      114


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      119
neval,tstepnext:      114     119

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.535745     -0.624096     -0.570374      0.570374       308.061       308.631    
   2  0.557405     -0.584463     -0.534152      0.534152       313.345       313.879    
   3  0.496008     -0.701164     -0.640807      0.640807       346.616       347.257    
   4  0.666777     -0.405299     -0.370411      0.370411       347.698       348.068    
   5  0.594736     -0.519637     -0.474906      0.474906       355.343       355.818    
   6  0.368335E-01  -3.30135      -3.01717       3.01717       357.798       360.815    
   7  0.415979     -0.877121     -0.801618      0.801618       358.528       359.330    
   8  0.747628     -0.290850     -0.265813      0.265813       357.824       358.090    
   9  0.479331     -0.735363     -0.672063      0.672063       360.492       361.164    
  10  0.741919     -0.298515     -0.272819      0.272819       362.241       362.514    
  11  0.600981     -0.509193     -0.465361      0.465361       364.389       364.854    
  12  0.504007     -0.685164     -0.626185      0.626185       364.118       364.744    
  13  0.242050      -1.41861      -1.29649       1.29649       365.773       367.069    
  14  0.905027E-01  -2.40238      -2.19558       2.19558       366.411       368.606    
  15  0.434013     -0.834681     -0.762831      0.762831       367.317       368.080    
  16  0.708651     -0.344393     -0.314747      0.314747       369.662       369.977    
  17  0.492371     -0.708522     -0.647532      0.647532       369.701       370.349    
  18  0.111019      -2.19805      -2.00884       2.00884       370.669       372.677    
  19  0.544389     -0.608091     -0.555746      0.555746       372.198       372.754    
  20  0.379545     -0.968782     -0.885389      0.885389       374.663       375.548    
  21  0.176314      -1.73549      -1.58610       1.58610       376.099       377.685    
  22  0.747116E-01  -2.59412      -2.37082       2.37082       375.089       377.460    
  23  0.449124     -0.800457     -0.731554      0.731554       375.581       376.312    
  24  0.515386     -0.662840     -0.605782      0.605782       373.866       374.472    
  25  0.338280      -1.08388     -0.990580      0.990580       376.578       377.569    
  26  0.500293     -0.692561     -0.632945      0.632945       377.360       377.993    
  27  0.524139     -0.645998     -0.590390      0.590390       376.192       376.782    
  28  0.130876      -2.03350      -1.85846       1.85846       377.061       378.920    
  29  0.417714     -0.872958     -0.797813      0.797813       378.273       379.071    
  30  0.666539     -0.405657     -0.370738      0.370738       381.262       381.633    
  31  0.505635E-01  -2.98453      -2.72762       2.72762       381.085       383.812    
  32  0.128066      -2.05521      -1.87829       1.87829       381.049       382.927    
  33  0.720303     -0.328084     -0.299842      0.299842       381.984       382.283    
  34  0.133549      -2.01329      -1.83998       1.83998       381.630       383.470    
  35  0.216082E-01  -3.83468      -3.50459       3.50459       386.862       390.367    
  36  0.533660E-01  -2.93058      -2.67832       2.67832       388.383       391.062    
  37  0.694540     -0.364505     -0.333128      0.333128       389.002       389.335    
  38  0.270003      -1.30932      -1.19662       1.19662       395.584       396.781    
  39  0.796170     -0.227942     -0.208321      0.208321       393.934       394.142    
  40  0.335040      -1.09350     -0.999375      0.999375       397.839       398.838    
  41  0.773533     -0.256787     -0.234682      0.234682       398.856       399.090    
  42  0.941449     -0.603348E-01 -0.551411E-01  0.551411E-01   402.368       402.424    
  43  0.788238     -0.237955     -0.217472      0.217472       403.219       403.437    
  44  0.289061      -1.24112      -1.13428       1.13428       403.304       404.438    
  45  0.453329     -0.791137     -0.723035      0.723035       416.110       416.833    
  46  0.423783     -0.858534     -0.784631      0.784631       417.257       418.041    
  47  0.916114     -0.876146E-01 -0.800727E-01  0.800727E-01   429.520       429.600    
  48  0.783595     -0.243863     -0.222871      0.222871       434.191       434.414    
  49  0.659727     -0.415929     -0.380126      0.380126       435.963       436.344    
  50  0.975196     -0.251167E-01 -0.229546E-01  0.229546E-01   448.828       448.851    
  51  0.269551      -1.31100      -1.19815       1.19815       450.832       452.030    
  52  0.334592      -1.09484      -1.00060       1.00060       459.873       460.874    
  53  0.616068     -0.484398     -0.442701      0.442701       464.340       464.783    
  54  0.288473      -1.24315      -1.13614       1.13614       465.923       467.059    
  55  0.229580      -1.47150      -1.34484       1.34484       471.280       472.625    
  56  0.532269     -0.630606     -0.576323      0.576323       470.131       470.707    
  57  0.318359      -1.14458      -1.04605       1.04605       474.148       475.194    
  58  0.904899     -0.999322E-01 -0.913300E-01  0.913300E-01   473.281       473.372    
  59  0.507266     -0.678720     -0.620296      0.620296       483.567       484.187    
  60  0.839857     -0.174523     -0.159500      0.159500       488.277       488.436    
  61  0.807240     -0.214135     -0.195702      0.195702       491.031       491.227    
  62  0.625976     -0.468444     -0.428120      0.428120       498.664       499.092    
  63  0.131329      -2.03005      -1.85530       1.85530       505.004       506.860    
  64  0.982480     -0.176753E-01 -0.161538E-01  0.161538E-01   506.040       506.056    
  65  0.774465     -0.255582     -0.233582      0.233582       515.985       516.219    
  66  0.278066      -1.27990      -1.16972       1.16972       526.830       528.000    
  67  0.663582     -0.410103     -0.374801      0.374801       528.046       528.420    
  68  0.454089     -0.789463     -0.721505      0.721505       531.606       532.328    
  69  0.441539     -0.817489     -0.747119      0.747119       481.298       482.045    
loop,thermsimp(1:2)       34  0.570374      0.534152    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    116        344.35          1.00          0.37         14.17          5.44          0.01         20.98
Just calling func    0   0         20.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    344.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.913919               119
loop is:       34
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.913919               119
loop is:       35
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      119
neval,tstepnext:      115     119

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277477      -1.28202      -1.17166       1.17166       308.061       309.232    
   2  0.873268     -0.135512     -0.123847      0.123847       313.345       313.469    
   3  0.446735     -0.805791     -0.736428      0.736428       346.616       347.353    
   4  0.282845      -1.26286      -1.15415       1.15415       347.698       348.852    
   5  0.418890     -0.870147     -0.795244      0.795244       355.343       356.138    
   6  0.233185      -1.45592      -1.33060       1.33060       357.824       359.155    
   7  0.183464      -1.69574      -1.54977       1.54977       358.528       360.078    
   8  0.984642     -0.154774E-01 -0.141451E-01  0.141451E-01   357.798       357.812    
   9  0.537698     -0.620459     -0.567050      0.567050       360.492       361.059    
  10  0.643241     -0.441236     -0.403254      0.403254       362.241       362.644    
  11  0.919005     -0.844639E-01 -0.771932E-01  0.771932E-01   364.118       364.195    
  12  0.445681     -0.808153     -0.738587      0.738587       364.389       365.128    
  13  0.407620     -0.897421     -0.820170      0.820170       365.773       366.593    
  14  0.245209      -1.40565      -1.28465       1.28465       367.317       368.601    
  15  0.701562     -0.354445     -0.323934      0.323934       366.411       366.735    
  16  0.599653     -0.511405     -0.467383      0.467383       369.662       370.129    
  17  0.776979     -0.252342     -0.230621      0.230621       369.701       369.932    
  18  0.288986      -1.24138      -1.13452       1.13452       370.669       371.803    
  19  0.168509      -1.78077      -1.62748       1.62748       372.198       373.826    
  20  0.134718      -2.00457      -1.83202       1.83202       373.866       375.698    
  21  0.735190     -0.307626     -0.281145      0.281145       374.663       374.944    
  22  0.929623     -0.729765E-01 -0.666946E-01  0.666946E-01   375.581       375.648    
  23  0.108150      -2.22424      -2.03277       2.03277       376.192       378.225    
  24  0.826886     -0.190088     -0.173725      0.173725       375.089       375.263    
  25  0.649852     -0.431011     -0.393909      0.393909       376.578       376.972    
  26  0.902146     -0.102979     -0.941147E-01  0.941147E-01   376.099       376.193    
  27  0.534355     -0.626694     -0.572748      0.572748       377.360       377.933    
  28  0.589876E-01  -2.83043      -2.58678       2.58678       377.061       379.648    
  29  0.279477      -1.27484      -1.16510       1.16510       378.273       379.439    
  30  0.595043     -0.519121     -0.474435      0.474435       381.262       381.737    
  31  0.984218     -0.159078E-01 -0.145385E-01  0.145385E-01   381.984       381.998    
  32  0.354065      -1.03828     -0.948901      0.948901       381.049       381.998    
  33  0.111516      -2.19359      -2.00476       2.00476       381.630       383.635    
  34  0.214185      -1.54092      -1.40827       1.40827       381.085       382.493    
  35  0.197816      -1.62042      -1.48093       1.48093       389.002       390.483    
  36  0.139402      -1.97039      -1.80078       1.80078       386.862       388.663    
  37  0.248067      -1.39406      -1.27406       1.27406       388.383       389.657    
  38  0.956580     -0.443904E-01 -0.405693E-01  0.405693E-01   393.934       393.974    
  39  0.804945     -0.216981     -0.198303      0.198303       395.584       395.783    
  40  0.332153      -1.10216      -1.00729       1.00729       397.839       398.846    
  41  0.929615     -0.729852E-01 -0.667026E-01  0.667026E-01   398.856       398.922    
  42  0.885778     -0.121289     -0.110848      0.110848       402.368       402.479    
  43  0.176239      -1.73592      -1.58649       1.58649       403.219       404.806    
  44  0.288034      -1.24468      -1.13753       1.13753       403.304       404.442    
  45  0.889111     -0.117533     -0.107416      0.107416       416.110       416.218    
  46  0.733532E-01  -2.61247      -2.38759       2.38759       417.257       419.644    
  47  0.834245     -0.181228     -0.165628      0.165628       429.520       429.686    
  48  0.551197     -0.595663     -0.544388      0.544388       434.191       434.736    
  49  0.528087     -0.638494     -0.583532      0.583532       435.963       436.547    
  50  0.876326     -0.132017     -0.120653      0.120653       448.828       448.949    
  51  0.670758     -0.399347     -0.364971      0.364971       450.832       451.197    
  52  0.310100      -1.17086      -1.07007       1.07007       459.873       460.943    
  53  0.147560      -1.91352      -1.74880       1.74880       464.340       466.089    
  54  0.913583     -0.903814E-01 -0.826013E-01  0.826013E-01   465.923       466.006    
  55  0.400583     -0.914835     -0.836086      0.836086       470.131       470.967    
  56  0.677107     -0.389926     -0.356361      0.356361       471.280       471.636    
  57  0.279109      -1.27615      -1.16630       1.16630       473.281       474.447    
  58  0.213401      -1.54458      -1.41162       1.41162       474.148       475.560    
  59  0.581996     -0.541291     -0.494696      0.494696       481.298       481.793    
  60  0.179364      -1.71834      -1.57042       1.57042       483.567       485.137    
  61  0.525195     -0.643985     -0.588551      0.588551       488.277       488.866    
  62  0.695976     -0.362440     -0.331241      0.331241       491.031       491.362    
  63  0.472493     -0.749732     -0.685194      0.685194       498.664       499.349    
  64  0.516164     -0.661331     -0.604403      0.604403       506.040       506.644    
  65  0.640459     -0.445570     -0.407215      0.407215       505.004       505.412    
  66  0.229502      -1.47184      -1.34514       1.34514       515.985       517.330    
  67  0.348331      -1.05460     -0.963822      0.963822       526.830       527.794    
  68  0.120913      -2.11268      -1.93082       1.93082       528.046       529.976    
  69  0.991643     -0.839169E-02 -0.766933E-02  0.766933E-02   344.346       344.354    
loop,thermsimp(1:2)       35   1.17166      0.123847    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117       1940.11          1.00          0.37         14.06          5.57          0.02         21.02
Just calling func    0   0         21.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118        770.28          1.00          0.36         14.08          5.55          0.01         20.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4    528.05
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.913919               119
loop is:       35
neval is:      117
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     118       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    119        269.54          1.00          0.37         14.07          5.54          0.01         21.00
iter,obj,time:    120        298.71          1.00          0.37         14.05          5.59          0.01         21.02
iter,obj,time:    121        267.61          1.00          0.37         14.12          5.49          0.01         20.99
iter,obj,time:    122        304.87          1.00          0.37         14.06          5.60          0.01         21.03
iter,obj,time:    123        300.26          1.00          0.37         14.17          5.46          0.01         21.00
iter,obj,time:    124        300.64          1.00          0.37         14.12          5.59          0.01         21.09
iter,obj,time:    125        292.53          1.00          0.37         14.12          5.59          0.01         21.09
iter,obj,time:    126        298.00          1.00          0.37         14.00          5.87          0.01         21.24
iter,obj,time:    127        292.00          1.00          0.37         14.04          5.64          0.01         21.06
iter,obj,time:    128        287.51          1.00          0.37         14.05          5.66          0.01         21.09
iter,obj,time:    129        302.54          1.00          0.37         14.09          5.59          0.01         21.05
iter,obj,time:    130        301.50          1.00          0.38         14.01          5.59          0.01         20.99
iter,obj,time:    131        298.24          1.00          0.37         14.09          5.77          0.01         21.24
iter,obj,time:    132        300.76          1.00          0.37         14.04          5.64          0.01         21.05
iter,obj,time:    133        305.87          1.00          0.37         14.05          5.75          0.01         21.18
iter,obj,time:    134        301.31          1.00          0.37         14.03          5.82          0.01         21.22
iter,obj,time:    135        309.03          1.00          0.37         14.09          5.73          0.01         21.19
iter,obj,time:    136        306.65          1.00          0.37         14.09          5.62          0.01         21.08
iter,obj,time:    137        316.92          1.00          0.37         14.09          5.58          0.01         21.04
iter,obj,time:    138        307.90          1.00          0.37         14.09          5.56          0.01         21.03
iter,obj,time:    139        306.18          1.00          0.37         14.10          5.58          0.01         21.05
iter,obj,time:    140        300.29          1.00          0.37         14.04          5.69          0.01         21.10
iter,obj,time:    141        306.10          1.00          0.37         14.03          5.78          0.01         21.19
iter,obj,time:    142        306.24          1.00          0.37         14.04          5.66          0.01         21.08
iter,obj,time:    143        305.22          1.00          0.37         14.10          5.59          0.01         21.06
iter,obj,time:    144        304.94          1.00          0.37         14.16          5.63          0.01         21.16
iter,obj,time:    145        306.24          1.00          0.37         14.11          5.53          0.01         21.01
iter,obj,time:    146        307.60          1.00          0.37         14.10          5.54          0.01         21.01
iter,obj,time:    147        291.51          1.00          0.36         14.08          5.68          0.01         21.13
iter,obj,time:    148        308.70          1.00          0.37         14.01          5.79          0.01         21.17
iter,obj,time:    149        305.70          1.00          0.37         13.95          5.77          0.01         21.10
iter,obj,time:    150        311.39          1.00          0.37         14.00          5.81          0.01         21.19
iter,obj,time:    151        312.25          1.00          0.37         14.03          5.80          0.01         21.20
iter,obj,time:    152        313.61          1.00          0.37         14.10          5.71          0.01         21.18
iter,obj,time:    153        306.98          1.00          0.37         14.09          5.59          0.01         21.06
iter,obj,time:    154        309.41          1.00          0.37         14.13          5.50          0.01         21.01
iter,obj,time:    155        309.93          1.00          0.37         14.06          5.66          0.01         21.09
iter,obj,time:    156        312.24          1.00          0.37         14.09          5.65          0.01         21.11
iter,obj,time:    157        311.06          1.00          0.37         14.03          5.81          0.01         21.21
iter,obj,time:    158        312.57          1.00          0.36         14.14          5.59          0.01         21.10
iter,obj,time:    159        313.29          1.00          0.37         13.99          5.87          0.01         21.23
iter,obj,time:    160        310.99          1.00          0.37         14.04          5.64          0.01         21.06
iter,obj,time:    161        313.93          1.00          0.37         13.98          5.88          0.01         21.23
iter,obj,time:    162        323.78          1.00          0.36         14.02          5.84          0.01         21.22
iter,obj,time:    163        319.89          1.00          0.36         14.07          5.76          0.01         21.20
iter,obj,time:    164        322.29          1.00          0.37         14.06          5.62          0.01         21.05
iter,obj,time:    165        340.56          1.00          0.37         14.02          5.66          0.01         21.05
iter,obj,time:    166        298.18          1.00          0.36         14.12          5.69          0.01         21.19
iter,obj,time:    167        319.81          1.00          0.37         14.10          5.59          0.01         21.06
iter,obj,time:    168        338.92          1.00          0.36         14.10          5.60          0.01         21.07
iter,obj,time:    169        328.40          1.00          0.36         14.11          5.63          0.01         21.10
iter,obj,time:    170        333.38          1.00          0.37         14.06          5.75          0.01         21.19
iter,obj,time:    171        360.59          1.00          0.36         14.12          5.59          0.01         21.08
iter,obj,time:    172        352.33          1.00          0.37         14.06          5.67          0.01         21.09
iter,obj,time:    173        341.79          1.01          0.36         14.11          5.61          0.01         21.10
iter,obj,time:    174        338.35          1.00          0.37         14.09          5.59          0.01         21.05
iter,obj,time:    175        341.53          1.00          0.36         14.08          5.58          0.01         21.03
iter,obj,time:    176        347.58          1.01          0.36         14.17          5.46          0.01         21.01
iter,obj,time:    177        348.54          1.00          0.36         14.12          5.57          0.01         21.06
iter,obj,time:    178        370.55          1.00          0.36         14.05          5.71          0.01         21.13
iter,obj,time:    179        378.64          1.00          0.37         14.05          5.76          0.01         21.18
iter,obj,time:    180        357.11          1.00          0.37         14.09          5.61          0.01         21.08
iter,obj,time:    181        340.37          1.00          0.36         14.12          5.75          0.01         21.23
iter,obj,time:    182        381.20          1.00          0.37         14.02          5.73          0.01         21.12
iter,obj,time:    183        352.50          1.00          0.37         13.98          5.78          0.01         21.13
iter,obj,time:    184        350.22          1.00          0.36         14.16          5.59          0.01         21.12
iter,obj,time:    185        352.30          1.00          0.37         14.09          5.63          0.01         21.08
iter,obj,time:    186        354.71          1.00          0.36         14.15          5.55          0.01         21.07


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     187      69
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     185




loop,nloop:      35      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.913919               119
loop is:       36
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.274176               129

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      129
neval,tstepnext:      185     129

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.198451      -1.61721     -0.443401      0.443401       308.061       308.504    
   2  0.822110     -0.195881     -0.537058E-01  0.537058E-01   269.538       269.591    
   3  0.841298     -0.172809     -0.473800E-01  0.473800E-01   298.710       298.757    
   4  0.249763      -1.38724     -0.380349      0.380349       267.611       267.991    
   5  0.685478     -0.377639     -0.103539      0.103539       304.868       304.971    
   6  0.747196     -0.291428     -0.799024E-01  0.799024E-01   300.257       300.337    
   7  0.541328     -0.613730     -0.168270      0.168270       300.639       300.807    
   8  0.171309      -1.76429     -0.483725      0.483725       292.532       293.016    
   9  0.952337     -0.488358E-01 -0.133896E-01  0.133896E-01   297.999       298.012    
  10  0.808047     -0.213134     -0.584363E-01  0.584363E-01   292.004       292.063    
  11  0.598670     -0.513044     -0.140664      0.140664       287.511       287.651    
  12  0.918321     -0.852082E-01 -0.233620E-01  0.233620E-01   302.540       302.564    
  13  0.975938     -0.243561E-01 -0.667785E-02  0.667785E-02   301.499       301.505    
  14  0.660804     -0.414298     -0.113591      0.113591       298.245       298.358    
  15  0.432003     -0.839323     -0.230122      0.230122       300.756       300.986    
  16  0.184959      -1.68762     -0.462705      0.462705       305.867       306.330    
  17  0.506675     -0.679885     -0.186408      0.186408       301.314       301.500    
  18  0.261248      -1.34229     -0.368022      0.368022       309.032       309.400    
  19  0.328306      -1.11381     -0.305379      0.305379       306.648       306.953    
  20  0.498350     -0.696452     -0.190950      0.190950       316.922       317.113    
  21  0.602482     -0.506697     -0.138924      0.138924       307.899       308.038    
  22  0.199483      -1.61203     -0.441979      0.441979       306.184       306.626    
  23  0.778178     -0.250799     -0.687632E-01  0.687632E-01   300.286       300.355    
  24  0.191628      -1.65220     -0.452993      0.452993       306.105       306.558    
  25  0.513787     -0.665947     -0.182587      0.182587       306.236       306.419    
  26  0.758025     -0.277038     -0.759573E-01  0.759573E-01   305.219       305.295    
  27  0.911385     -0.927898E-01 -0.254407E-01  0.254407E-01   304.942       304.968    
  28  0.606191     -0.500560     -0.137241      0.137241       306.236       306.374    
  29  0.441755     -0.817001     -0.224002      0.224002       307.601       307.825    
  30  0.561629     -0.576914     -0.158176      0.158176       291.514       291.672    
  31  0.595004     -0.519187     -0.142349      0.142349       308.700       308.842    
  32  0.114576      -2.16651     -0.594006      0.594006       305.700       306.294    
  33  0.683402     -0.380672     -0.104371      0.104371       311.393       311.498    
  34  0.767042     -0.265214     -0.727153E-01  0.727153E-01   312.253       312.326    
  35  0.505957E-01  -2.98389     -0.818110      0.818110       313.611       314.429    
  36  0.570544     -0.561164     -0.153858      0.153858       306.981       307.135    
  37  0.619751     -0.478438     -0.131176      0.131176       309.406       309.537    
  38  0.787025     -0.239495     -0.656638E-01  0.656638E-01   309.925       309.991    
  39  0.720347     -0.328022     -0.899358E-01  0.899358E-01   312.238       312.327    
  40  0.526739     -0.641050     -0.175760      0.175760       311.061       311.237    
  41  0.193123      -1.64443     -0.450862      0.450862       312.571       313.022    
  42  0.535361     -0.624815     -0.171309      0.171309       313.292       313.463    
  43  0.277304      -1.28264     -0.351669      0.351669       310.991       311.343    
  44  0.490511     -0.712307     -0.195297      0.195297       313.934       314.130    
  45  0.514866     -0.663848     -0.182011      0.182011       323.782       323.964    
  46  0.931396     -0.710703E-01 -0.194858E-01  0.194858E-01   319.887       319.906    
  47  0.343264      -1.06925     -0.293164      0.293164       322.286       322.579    
  48  0.711600E-01  -2.64282     -0.724599      0.724599       340.564       341.288    
  49  0.978690E-01  -2.32413     -0.637219      0.637219       298.181       298.819    
  50  0.472438     -0.749848     -0.205590      0.205590       319.813       320.019    
  51  0.291904      -1.23133     -0.337601      0.337601       338.921       339.258    
  52  0.645466     -0.437782     -0.120029      0.120029       328.404       328.524    
  53  0.566154     -0.568890     -0.155976      0.155976       333.378       333.534    
  54  0.803553     -0.218713     -0.599657E-01  0.599657E-01   360.592       360.652    
  55  0.164357      -1.80571     -0.495083      0.495083       352.325       352.820    
  56  0.107693      -2.22847     -0.610993      0.610993       341.793       342.404    
  57  0.408343     -0.895647     -0.245565      0.245565       338.352       338.598    
  58  0.191035      -1.65530     -0.453842      0.453842       341.528       341.982    
  59  0.225888      -1.48771     -0.407895      0.407895       347.576       347.984    
  60  0.959236E-01  -2.34420     -0.642724      0.642724       348.535       349.178    
  61  0.833926     -0.181611     -0.497932E-01  0.497932E-01   370.553       370.603    
  62  0.405232     -0.903295     -0.247662      0.247662       378.639       378.886    
  63  0.274132      -1.29415     -0.354823      0.354823       357.105       357.460    
  64  0.722047     -0.325665     -0.892894E-01  0.892894E-01   340.365       340.455    
  65  0.351851      -1.04455     -0.286390      0.286390       381.198       381.485    
  66  0.731799     -0.312249     -0.856111E-01  0.856111E-01   352.501       352.587    
  67  0.370198     -0.993717     -0.272453      0.272453       350.218       350.490    
  68  0.203430      -1.59243     -0.436606      0.436606       352.299       352.735    
  69  0.800333E-01  -2.52531     -0.692380      0.692380       354.705       355.397    
loop,thermsimp(1:2)       36  0.443401      0.537058E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187        695.06          1.00          0.36         14.03          5.80          0.02         21.21
Just calling func    0   0         21.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    188        379.12          1.00          0.36         14.03          5.69          0.01         21.08
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    379.12
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.274176               129
loop is:       36
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.274176               129
loop is:       37
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.822528E-01           139

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      187     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.588406     -0.530338     -0.436217E-01  0.436217E-01   267.611       267.655    
   2  0.998168     -0.183410E-02 -0.150860E-03  0.150860E-03   269.538       269.538    
   3  0.411554     -0.887815     -0.730252E-01  0.730252E-01   287.511       287.584    
   4  0.462695     -0.770686     -0.633911E-01  0.633911E-01   291.514       291.577    
   5  0.374640     -0.981790     -0.807549E-01  0.807549E-01   292.004       292.085    
   6  0.929995     -0.725758E-01 -0.596956E-02  0.596956E-02   292.532       292.538    
   7  0.486417     -0.720689     -0.592787E-01  0.592787E-01   297.999       298.058    
   8  0.359645      -1.02264     -0.841147E-01  0.841147E-01   298.245       298.329    
   9  0.349702E-01  -3.35326     -0.275815      0.275815       298.710       298.985    
  10  0.462640     -0.770807     -0.634010E-01  0.634010E-01   298.181       298.245    
  11  0.526412     -0.641672     -0.527793E-01  0.527793E-01   300.257       300.309    
  12  0.108727      -2.21891     -0.182512      0.182512       300.286       300.469    
  13  0.265452      -1.32632     -0.109094      0.109094       300.639       300.748    
  14  0.488554     -0.716305     -0.589181E-01  0.589181E-01   300.756       300.815    
  15  0.254919E-01  -3.66939     -0.301818      0.301818       301.314       301.615    
  16  0.568500     -0.564753     -0.464525E-01  0.464525E-01   301.499       301.545    
  17  0.870050     -0.139204     -0.114499E-01  0.114499E-01   302.540       302.552    
  18  0.544084     -0.608652     -0.500633E-01  0.500633E-01   304.942       304.992    
  19  0.310452      -1.16972     -0.962131E-01  0.962131E-01   304.868       304.964    
  20  0.915582     -0.881953E-01 -0.725431E-02  0.725431E-02   305.219       305.226    
  21  0.806593     -0.214936     -0.176791E-01  0.176791E-01   305.700       305.717    
  22  0.316508      -1.15041     -0.946241E-01  0.946241E-01   305.867       305.962    
  23  0.619736     -0.478462     -0.393548E-01  0.393548E-01   306.236       306.276    
  24  0.606785     -0.499581     -0.410919E-01  0.410919E-01   306.236       306.277    
  25  0.692842     -0.366953     -0.301829E-01  0.301829E-01   306.105       306.135    
  26  0.174537      -1.74562     -0.143582      0.143582       306.184       306.328    
  27  0.599656     -0.511399     -0.420640E-01  0.420640E-01   306.648       306.690    
  28  0.133035      -2.01714     -0.165916      0.165916       306.981       307.147    
  29  0.182159      -1.70287     -0.140066      0.140066       307.601       307.741    
  30  0.816950     -0.202177     -0.166296E-01  0.166296E-01   307.899       307.915    
  31  0.200391      -1.60749     -0.132220      0.132220       308.061       308.193    
  32  0.944961     -0.566119E-01 -0.465648E-02  0.465648E-02   308.700       308.705    
  33  0.971081     -0.293454E-01 -0.241374E-02  0.241374E-02   309.032       309.034    
  34  0.471901     -0.750987     -0.617707E-01  0.617707E-01   309.406       309.468    
  35  0.443406     -0.813270     -0.668937E-01  0.668937E-01   309.925       309.992    
  36  0.788523     -0.237593     -0.195427E-01  0.195427E-01   311.061       311.081    
  37  0.885042     -0.122120     -0.100447E-01  0.100447E-01   310.991       311.001    
  38  0.890022     -0.116509     -0.958320E-02  0.958320E-02   311.393       311.403    
  39  0.377878     -0.973184     -0.800470E-01  0.800470E-01   312.253       312.333    
  40  0.801221     -0.221619     -0.182288E-01  0.182288E-01   312.238       312.256    
  41  0.645791     -0.437280     -0.359675E-01  0.359675E-01   312.571       312.607    
  42  0.160840      -1.82735     -0.150304      0.150304       313.292       313.442    
  43  0.483246     -0.727230     -0.598167E-01  0.598167E-01   313.934       313.994    
  44  0.165069      -1.80139     -0.148170      0.148170       313.611       313.759    
  45  0.876165     -0.132201     -0.108739E-01  0.108739E-01   316.922       316.933    
  46  0.103883      -2.26449     -0.186260      0.186260       319.887       320.073    
  47  0.477902     -0.738349     -0.607312E-01  0.607312E-01   319.813       319.874    
  48  0.887621     -0.119210     -0.980535E-02  0.980535E-02   322.286       322.296    
  49  0.865273     -0.144710     -0.119028E-01  0.119028E-01   323.782       323.793    
  50  0.899308     -0.106130     -0.872948E-02  0.872948E-02   328.404       328.413    
  51  0.968110     -0.324091E-01 -0.266574E-02  0.266574E-02   333.378       333.381    
  52  0.728260     -0.317097     -0.260821E-01  0.260821E-01   338.352       338.378    
  53  0.499844     -0.693458     -0.570389E-01  0.570389E-01   338.921       338.978    
  54  0.508412E-01  -2.97905     -0.245035      0.245035       340.365       340.610    
  55  0.773578     -0.256729     -0.211166E-01  0.211166E-01   340.564       340.585    
  56  0.259472      -1.34911     -0.110968      0.110968       341.528       341.639    
  57  0.235288      -1.44694     -0.119015      0.119015       341.793       341.912    
  58  0.586972     -0.532778     -0.438225E-01  0.438225E-01   347.576       347.620    
  59  0.683772     -0.380130     -0.312668E-01  0.312668E-01   348.535       348.567    
  60  0.535260     -0.625003     -0.514082E-01  0.514082E-01   350.218       350.269    
  61  0.359536      -1.02294     -0.841398E-01  0.841398E-01   352.501       352.585    
  62  0.990151     -0.989823E-02 -0.814156E-03  0.814156E-03   352.299       352.299    
  63  0.770157     -0.261161     -0.214812E-01  0.214812E-01   352.325       352.347    
  64  0.428617     -0.847192     -0.696838E-01  0.696838E-01   354.705       354.775    
  65  0.269977      -1.30942     -0.107703      0.107703       357.105       357.213    
  66  0.254592      -1.36809     -0.112529      0.112529       360.592       360.705    
  67  0.805309     -0.216529     -0.178101E-01  0.178101E-01   370.553       370.571    
  68  0.313657      -1.15945     -0.953684E-01  0.953684E-01   378.639       378.734    
  69  0.922800     -0.803429E-01 -0.660842E-02  0.660842E-02   379.122       379.129    
loop,thermsimp(1:2)       37  0.436217E-01  0.150860E-03

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189        316.46          1.01          0.36         14.09          5.56          0.01         21.03
Just calling func    0   0         21.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    316.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.822528E-01           139
loop is:       37
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.822528E-01           139
loop is:       38
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.246758E-01           149

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      149
neval,tstepnext:      188     149

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.843281     -0.170455     -0.420611E-02  0.420611E-02   267.611       267.615    
   2  0.608898     -0.496104     -0.122418E-01  0.122418E-01   269.538       269.550    
   3  0.868844     -0.140592     -0.346922E-02  0.346922E-02   287.511       287.514    
   4  0.410331     -0.890791     -0.219810E-01  0.219810E-01   291.514       291.536    
   5  0.347396      -1.05729     -0.260895E-01  0.260895E-01   292.004       292.030    
   6  0.547536     -0.602327     -0.148629E-01  0.148629E-01   292.532       292.547    
   7  0.259100      -1.35054     -0.333257E-01  0.333257E-01   297.999       298.032    
   8  0.486632     -0.720247     -0.177727E-01  0.177727E-01   298.181       298.199    
   9  0.259353      -1.34956     -0.333016E-01  0.333016E-01   298.245       298.278    
  10  0.518721     -0.656389     -0.161970E-01  0.161970E-01   298.710       298.726    
  11  0.881196     -0.126476     -0.312089E-02  0.312089E-02   300.257       300.260    
  12  0.605212     -0.502176     -0.123916E-01  0.123916E-01   300.286       300.298    
  13  0.224421      -1.49423     -0.368714E-01  0.368714E-01   300.639       300.676    
  14  0.544670     -0.607576     -0.149924E-01  0.149924E-01   300.756       300.771    
  15  0.564011     -0.572681     -0.141314E-01  0.141314E-01   301.499       301.513    
  16  0.699502     -0.357387     -0.881881E-02  0.881881E-02   301.314       301.322    
  17  0.470415     -0.754140     -0.186090E-01  0.186090E-01   302.540       302.559    
  18  0.139159      -1.97213     -0.486641E-01  0.486641E-01   304.868       304.916    
  19  0.136823      -1.98907     -0.490819E-01  0.490819E-01   304.942       304.991    
  20  0.532283     -0.630580     -0.155601E-01  0.155601E-01   305.219       305.235    
  21  0.409110E-01  -3.19636     -0.788728E-01  0.788728E-01   305.700       305.778    
  22  0.713638     -0.337380     -0.832512E-02  0.832512E-02   305.867       305.876    
  23  0.256713      -1.35980     -0.335541E-01  0.335541E-01   306.105       306.138    
  24  0.554287     -0.590072     -0.145605E-01  0.145605E-01   306.236       306.251    
  25  0.659652E-01  -2.71863     -0.670844E-01  0.670844E-01   306.236       306.303    
  26  0.544634     -0.607641     -0.149940E-01  0.149940E-01   306.184       306.199    
  27  0.654941E-01  -2.72580     -0.672613E-01  0.672613E-01   306.648       306.715    
  28  0.668344     -0.402952     -0.994316E-02  0.994316E-02   306.981       306.991    
  29  0.659102     -0.416877     -0.102868E-01  0.102868E-01   307.601       307.611    
  30  0.576185     -0.551326     -0.136044E-01  0.136044E-01   307.899       307.912    
  31  0.993337     -0.668518E-02 -0.164962E-03  0.164962E-03   308.061       308.061    
  32  0.556088     -0.586829     -0.144805E-01  0.144805E-01   308.700       308.715    
  33  0.917658     -0.859310E-01 -0.212042E-02  0.212042E-02   309.032       309.034    
  34  0.810520     -0.210080     -0.518389E-02  0.518389E-02   309.406       309.411    
  35  0.657927     -0.418661     -0.103308E-01  0.103308E-01   309.925       309.936    
  36  0.706260     -0.347772     -0.858155E-02  0.858155E-02   310.991       311.000    
  37  0.846711     -0.166396     -0.410595E-02  0.410595E-02   311.061       311.066    
  38  0.496316     -0.700542     -0.172865E-01  0.172865E-01   311.393       311.411    
  39  0.857854     -0.153321     -0.378333E-02  0.378333E-02   312.238       312.241    
  40  0.304390      -1.18944     -0.293505E-01  0.293505E-01   312.253       312.282    
  41  0.816371     -0.202886     -0.500638E-02  0.500638E-02   312.571       312.576    
  42  0.205323      -1.58317     -0.390661E-01  0.390661E-01   313.292       313.331    
  43  0.322599      -1.13135     -0.279169E-01  0.279169E-01   313.611       313.639    
  44  0.840212     -0.174101     -0.429609E-02  0.429609E-02   313.934       313.939    
  45  0.235871      -1.44447     -0.356435E-01  0.356435E-01   316.922       316.958    
  46  0.877593     -0.130572     -0.322197E-02  0.322197E-02   319.813       319.816    
  47  0.792424     -0.232659     -0.574105E-02  0.574105E-02   319.887       319.892    
  48  0.316101      -1.15169     -0.284190E-01  0.284190E-01   322.286       322.315    
  49  0.507442     -0.678372     -0.167394E-01  0.167394E-01   323.782       323.798    
  50  0.208125      -1.56961     -0.387315E-01  0.387315E-01   328.404       328.443    
  51  0.789247     -0.236676     -0.584018E-02  0.584018E-02   333.378       333.384    
  52  0.283793      -1.25951     -0.310794E-01  0.310794E-01   338.352       338.383    
  53  0.161713      -1.82193     -0.449577E-01  0.449577E-01   338.921       338.966    
  54  0.844380     -0.169152     -0.417398E-02  0.417398E-02   340.564       340.568    
  55  0.825538     -0.191720     -0.473085E-02  0.473085E-02   340.365       340.370    
  56  0.442844     -0.814539     -0.200994E-01  0.200994E-01   341.528       341.548    
  57  0.781050     -0.247116     -0.609780E-02  0.609780E-02   341.793       341.799    
  58  0.350063      -1.04964     -0.259008E-01  0.259008E-01   347.576       347.602    
  59  0.137428      -1.98465     -0.489730E-01  0.489730E-01   348.535       348.584    
  60  0.194761E-01  -3.93857     -0.971874E-01  0.971874E-01   350.218       350.315    
  61  0.562010     -0.576235     -0.142191E-01  0.142191E-01   352.299       352.313    
  62  0.493320     -0.706597     -0.174359E-01  0.174359E-01   352.325       352.343    
  63  0.150660      -1.89273     -0.467046E-01  0.467046E-01   352.501       352.548    
  64  0.535123     -0.625258     -0.154288E-01  0.154288E-01   354.705       354.721    
  65  0.393004E-01  -3.23652     -0.798638E-01  0.798638E-01   357.105       357.185    
  66  0.187581      -1.67354     -0.412961E-01  0.412961E-01   360.592       360.633    
  67  0.416222     -0.876538     -0.216293E-01  0.216293E-01   370.553       370.575    
  68  0.418575     -0.870898     -0.214901E-01  0.214901E-01   378.639       378.660    
  69  0.996131     -0.387610E-02 -0.956461E-04  0.956461E-04   316.457       316.457    
loop,thermsimp(1:2)       38  0.420611E-02  0.122418E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190        454.14          1.00          0.37         13.97          5.71          0.02         21.06
Just calling func    0   0         21.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    191        331.93          1.00          0.36         14.19          5.50          0.01         21.05
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    331.93
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.246758E-01           149
loop is:       38
neval is:      190
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.246758E-01           149
loop is:       39
neval is:      190


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.740275E-02           159

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      159
neval,tstepnext:      190     159

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.341604      -1.07410     -0.795131E-02  0.795131E-02   267.611       267.619    
   2  0.580412     -0.544017     -0.402722E-02  0.402722E-02   269.538       269.542    
   3  0.283796      -1.25950     -0.932375E-02  0.932375E-02   287.511       287.520    
   4  0.850438     -0.162004     -0.119927E-02  0.119927E-02   291.514       291.515    
   5  0.796900     -0.227025     -0.168061E-02  0.168061E-02   292.004       292.006    
   6  0.670063     -0.400383     -0.296393E-02  0.296393E-02   292.532       292.535    
   7  0.468423     -0.758384     -0.561412E-02  0.561412E-02   297.999       298.004    
   8  0.182067      -1.70338     -0.126097E-01  0.126097E-01   298.181       298.194    
   9  0.733700     -0.309655     -0.229230E-02  0.229230E-02   298.245       298.247    
  10  0.600391     -0.510174     -0.377669E-02  0.377669E-02   298.710       298.713    
  11  0.577019     -0.549881     -0.407063E-02  0.407063E-02   300.257       300.261    
  12  0.951253     -0.499754E-01 -0.369955E-03  0.369955E-03   300.286       300.286    
  13  0.186254      -1.68064     -0.124414E-01  0.124414E-01   300.639       300.651    
  14  0.992202     -0.782851E-02 -0.579525E-04  0.579525E-04   300.756       300.756    
  15  0.843142     -0.170620     -0.126306E-02  0.126306E-02   301.314       301.315    
  16  0.333720      -1.09745     -0.812416E-02  0.812416E-02   301.499       301.507    
  17  0.955179     -0.458569E-01 -0.339467E-03  0.339467E-03   302.540       302.541    
  18  0.380299E-01  -3.26938     -0.242024E-01  0.242024E-01   304.868       304.892    
  19  0.361199      -1.01833     -0.753842E-02  0.753842E-02   304.942       304.950    
  20  0.331989      -1.10265     -0.816267E-02  0.816267E-02   305.219       305.227    
  21  0.154371      -1.86840     -0.138313E-01  0.138313E-01   305.700       305.713    
  22  0.383031     -0.959640     -0.710397E-02  0.710397E-02   305.867       305.874    
  23  0.690119     -0.370892     -0.274562E-02  0.274562E-02   306.105       306.107    
  24  0.567991     -0.565649     -0.418736E-02  0.418736E-02   306.184       306.188    
  25  0.886061     -0.120969     -0.895503E-03  0.895503E-03   306.236       306.237    
  26  0.273078      -1.29800     -0.960874E-02  0.960874E-02   306.236       306.246    
  27  0.740544     -0.300370     -0.222356E-02  0.222356E-02   306.648       306.650    
  28  0.827927     -0.188830     -0.139786E-02  0.139786E-02   306.981       306.983    
  29  0.576666     -0.550492     -0.407515E-02  0.407515E-02   307.601       307.605    
  30  0.468035     -0.759211     -0.562025E-02  0.562025E-02   307.899       307.904    
  31  0.396743E-01  -3.22705     -0.238891E-01  0.238891E-01   308.061       308.084    
  32  0.852653     -0.159403     -0.118002E-02  0.118002E-02   308.700       308.701    
  33  0.628369     -0.464627     -0.343952E-02  0.343952E-02   309.032       309.035    
  34  0.788873     -0.237150     -0.175556E-02  0.175556E-02   309.406       309.408    
  35  0.910631     -0.936170E-01 -0.693023E-03  0.693023E-03   309.925       309.926    
  36  0.184198      -1.69175     -0.125236E-01  0.125236E-01   310.991       311.004    
  37  0.867732     -0.141872     -0.105024E-02  0.105024E-02   311.061       311.063    
  38  0.485084     -0.723433     -0.535539E-02  0.535539E-02   311.393       311.399    
  39  0.220956      -1.50979     -0.111766E-01  0.111766E-01   312.238       312.249    
  40  0.978801     -0.214265E-01 -0.158615E-03  0.158615E-03   312.253       312.253    
  41  0.730061     -0.314628     -0.232911E-02  0.232911E-02   312.571       312.574    
  42  0.482473     -0.728830     -0.539535E-02  0.539535E-02   313.292       313.297    
  43  0.997253E-01  -2.30534     -0.170658E-01  0.170658E-01   313.611       313.628    
  44  0.993695E-01  -2.30891     -0.170923E-01  0.170923E-01   313.934       313.951    
  45  0.559522     -0.580673     -0.429857E-02  0.429857E-02   316.457       316.461    
  46  0.125269      -2.07729     -0.153776E-01  0.153776E-01   316.922       316.938    
  47  0.392417E-01  -3.23802     -0.239702E-01  0.239702E-01   319.813       319.837    
  48  0.647718     -0.434299     -0.321501E-02  0.321501E-02   319.887       319.890    
  49  0.711736     -0.340049     -0.251730E-02  0.251730E-02   322.286       322.289    
  50  0.652555     -0.426860     -0.315994E-02  0.315994E-02   323.782       323.785    
  51  0.873658     -0.135066     -0.999861E-03  0.999861E-03   328.404       328.405    
  52  0.554165     -0.590293     -0.436979E-02  0.436979E-02   333.378       333.382    
  53  0.794568     -0.229957     -0.170231E-02  0.170231E-02   338.352       338.354    
  54  0.330130      -1.10827     -0.820423E-02  0.820423E-02   338.921       338.929    
  55  0.242212      -1.41794     -0.104967E-01  0.104967E-01   340.365       340.376    
  56  0.529702E-01  -2.93803     -0.217495E-01  0.217495E-01   340.564       340.585    
  57  0.941028     -0.607822E-01 -0.449955E-03  0.449955E-03   341.528       341.528    
  58  0.814422     -0.205276     -0.151961E-02  0.151961E-02   341.793       341.794    
  59  0.890910     -0.115511     -0.855101E-03  0.855101E-03   347.576       347.577    
  60  0.434119     -0.834436     -0.617712E-02  0.617712E-02   348.535       348.541    
  61  0.445626     -0.808276     -0.598346E-02  0.598346E-02   350.218       350.224    
  62  0.433803     -0.835164     -0.618251E-02  0.618251E-02   352.299       352.305    
  63  0.520489E-02  -5.25816     -0.389248E-01  0.389248E-01   352.325       352.364    
  64  0.142513E-01  -4.25091     -0.314684E-01  0.314684E-01   352.501       352.533    
  65  0.103681E-01  -4.56902     -0.338233E-01  0.338233E-01   354.705       354.739    
  66  0.124423      -2.08407     -0.154278E-01  0.154278E-01   357.105       357.121    
  67  0.822424     -0.195499     -0.144723E-02  0.144723E-02   360.592       360.593    
  68  0.290548      -1.23599     -0.914969E-02  0.914969E-02   370.553       370.562    
  69  0.350892E-01  -3.34986     -0.247982E-01  0.247982E-01   331.931       331.956    
loop,thermsimp(1:2)       39  0.795131E-02  0.402722E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    192        451.09          1.01          0.36         14.09          5.60          0.02         21.06
Just calling func    0   0         21.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    193        321.51          1.00          0.36         14.02          5.81          0.01         21.20
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    321.51
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.740275E-02           159
loop is:       39
neval is:      192
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.740275E-02           159
loop is:       40
neval is:      192


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.222082E-02           169

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      169
neval,tstepnext:      192     169

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.815043     -0.204514     -0.454190E-03  0.454190E-03   267.611       267.612    
   2  0.254005      -1.37040     -0.304342E-02  0.304342E-02   269.538       269.541    
   3  0.316699      -1.14980     -0.255351E-02  0.255351E-02   287.511       287.513    
   4  0.400041     -0.916189     -0.203470E-02  0.203470E-02   291.514       291.516    
   5  0.966536     -0.340363E-01 -0.755886E-04  0.755886E-04   292.004       292.004    
   6  0.657661     -0.419066     -0.930673E-03  0.930673E-03   292.532       292.533    
   7  0.187836      -1.67219     -0.371364E-02  0.371364E-02   297.999       298.003    
   8  0.204054      -1.58937     -0.352972E-02  0.352972E-02   298.181       298.185    
   9  0.174269      -1.74716     -0.388013E-02  0.388013E-02   298.245       298.249    
  10  0.130645      -2.03527     -0.451998E-02  0.451998E-02   298.710       298.714    
  11  0.903221     -0.101788     -0.226054E-03  0.226054E-03   300.257       300.257    
  12  0.480148     -0.733662     -0.162933E-02  0.162933E-02   300.286       300.288    
  13  0.146395E-01  -4.22403     -0.938083E-02  0.938083E-02   300.639       300.648    
  14  0.434468     -0.833632     -0.185135E-02  0.185135E-02   300.756       300.758    
  15  0.576939E-01  -2.85260     -0.633513E-02  0.633513E-02   301.314       301.320    
  16  0.908131     -0.963665E-01 -0.214013E-03  0.214013E-03   301.499       301.499    
  17  0.226545      -1.48481     -0.329750E-02  0.329750E-02   302.540       302.544    
  18  0.574780     -0.553767     -0.122982E-02  0.122982E-02   304.868       304.869    
  19  0.548761     -0.600092     -0.133270E-02  0.133270E-02   304.942       304.944    
  20  0.232064      -1.46074     -0.324405E-02  0.324405E-02   305.219       305.222    
  21  0.585133     -0.535917     -0.119018E-02  0.119018E-02   305.700       305.701    
  22  0.618789     -0.479991     -0.106598E-02  0.106598E-02   305.867       305.868    
  23  0.742273     -0.298038     -0.661889E-03  0.661889E-03   306.105       306.105    
  24  0.802311     -0.220259     -0.489156E-03  0.489156E-03   306.184       306.185    
  25  0.696018     -0.362379     -0.804781E-03  0.804781E-03   306.236       306.237    
  26  0.807667     -0.213605     -0.474379E-03  0.474379E-03   306.236       306.237    
  27  0.518218     -0.657359     -0.145988E-02  0.145988E-02   306.648       306.649    
  28  0.832705     -0.183075     -0.406578E-03  0.406578E-03   306.981       306.982    
  29  0.541692     -0.613059     -0.136150E-02  0.136150E-02   307.601       307.602    
  30  0.255904      -1.36295     -0.302688E-02  0.302688E-02   307.899       307.902    
  31  0.308368E-01  -3.47905     -0.772635E-02  0.772635E-02   308.061       308.068    
  32  0.492488E-01  -3.01087     -0.668662E-02  0.668662E-02   308.700       308.707    
  33  0.708451     -0.344674     -0.765461E-03  0.765461E-03   309.032       309.033    
  34  0.861645     -0.148912     -0.330707E-03  0.330707E-03   309.406       309.406    
  35  0.676600E-01  -2.69326     -0.598126E-02  0.598126E-02   309.925       309.931    
  36  0.910624     -0.936250E-01 -0.207925E-03  0.207925E-03   310.991       310.991    
  37  0.737391     -0.304637     -0.676545E-03  0.676545E-03   311.061       311.062    
  38  0.813493     -0.206417     -0.458417E-03  0.458417E-03   311.393       311.394    
  39  0.968871     -0.316242E-01 -0.702319E-04  0.702319E-04   312.238       312.238    
  40  0.793115     -0.231787     -0.514757E-03  0.514757E-03   312.253       312.253    
  41  0.559065     -0.581490     -0.129139E-02  0.129139E-02   312.571       312.573    
  42  0.361291      -1.01807     -0.226096E-02  0.226096E-02   313.292       313.294    
  43  0.338274      -1.08390     -0.240715E-02  0.240715E-02   313.611       313.614    
  44  0.824801     -0.192613     -0.427760E-03  0.427760E-03   313.934       313.935    
  45  0.955760     -0.452486E-01 -0.100489E-03  0.100489E-03   316.457       316.457    
  46  0.703032     -0.352352     -0.782513E-03  0.782513E-03   316.922       316.923    
  47  0.382864     -0.960076     -0.213216E-02  0.213216E-02   319.813       319.815    
  48  0.361425      -1.01770     -0.226013E-02  0.226013E-02   319.887       319.889    
  49  0.138137      -1.97951     -0.439615E-02  0.439615E-02   322.286       322.291    
  50  0.276189      -1.28667     -0.285746E-02  0.285746E-02   323.782       323.784    
  51  0.291468      -1.23282     -0.273789E-02  0.273789E-02   328.404       328.407    
  52  0.755353     -0.280570     -0.623098E-03  0.623098E-03   331.931       331.932    
  53  0.139348E-01  -4.27337     -0.949040E-02  0.949040E-02   333.378       333.387    
  54  0.374692     -0.981651     -0.218007E-02  0.218007E-02   338.352       338.354    
  55  0.856371     -0.155051     -0.344342E-03  0.344342E-03   338.921       338.921    
  56  0.531630     -0.631808     -0.140314E-02  0.140314E-02   340.365       340.367    
  57  0.303008      -1.19400     -0.265166E-02  0.265166E-02   340.564       340.566    
  58  0.835008E-01  -2.48290     -0.551408E-02  0.551408E-02   341.528       341.534    
  59  0.368402E-01  -3.30117     -0.733131E-02  0.733131E-02   341.793       341.800    
  60  0.596758     -0.516243     -0.114649E-02  0.114649E-02   347.576       347.577    
  61  0.475116     -0.744197     -0.165273E-02  0.165273E-02   348.535       348.537    
  62  0.460795E-01  -3.07739     -0.683434E-02  0.683434E-02   350.218       350.225    
  63  0.239292      -1.43007     -0.317593E-02  0.317593E-02   352.299       352.302    
  64  0.732957E-01  -2.61325     -0.580358E-02  0.580358E-02   352.325       352.331    
  65  0.167330      -1.78779     -0.397036E-02  0.397036E-02   352.501       352.505    
  66  0.445776     -0.807939     -0.179429E-02  0.179429E-02   354.705       354.707    
  67  0.980947     -0.192368E-01 -0.427215E-04  0.427215E-04   357.105       357.105    
  68  0.321874      -1.13360     -0.251752E-02  0.251752E-02   360.592       360.595    
  69  0.525901     -0.642641     -0.142719E-02  0.142719E-02   321.505       321.506    
loop,thermsimp(1:2)       40  0.454190E-03  0.304342E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    194        624.10          1.00          0.36         14.03          5.69          0.02         21.10
Just calling func    0   0         21.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    195        361.58          1.00          0.36         14.06          5.56          0.01         20.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4    360.59
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.222082E-02           169
loop is:       40
neval is:      194
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     196       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    196        237.13          1.00          0.36         14.11          5.70          0.01         21.18
iter,obj,time:    197        263.43          1.01          0.36         14.12          5.57          0.01         21.07
iter,obj,time:    198        261.18          1.01          0.37         14.03          5.60          0.01         21.01
iter,obj,time:    199        266.67          1.00          0.37         14.03          5.58          0.01         20.98
iter,obj,time:    200        269.62          1.01          0.36         14.11          5.51          0.01         21.00
iter,obj,time:    201        269.23          1.01          0.36         14.04          5.58          0.01         21.00
iter,obj,time:    202        274.42          1.01          0.36         14.04          5.56          0.01         20.98
iter,obj,time:    203        266.10          1.01          0.37         14.06          5.60          0.01         21.04
iter,obj,time:    204        271.70          1.00          0.36         14.07          5.56          0.01         21.01
iter,obj,time:    205        259.04          1.00          0.37         14.09          5.58          0.01         21.04
iter,obj,time:    206        270.81          1.01          0.37         14.13          5.49          0.01         21.00
iter,obj,time:    207        267.11          1.01          0.37         14.00          5.66          0.01         21.04
iter,obj,time:    208        269.66          1.01          0.36         14.04          5.61          0.01         21.02
iter,obj,time:    209        269.14          1.01          0.36         14.07          5.54          0.01         20.99
iter,obj,time:    210        271.21          1.01          0.37         14.12          5.56          0.01         21.05
iter,obj,time:    211        269.27          1.01          0.36         13.99          5.62          0.01         20.99
iter,obj,time:    212        272.01          1.00          0.36         14.11          5.55          0.01         21.04
iter,obj,time:    213        269.85          1.00          0.37         14.04          5.60          0.01         21.02
iter,obj,time:    214        271.78          1.01          0.36         14.02          5.58          0.01         20.98
iter,obj,time:    215        274.26          1.01          0.37         14.04          5.61          0.01         21.03
iter,obj,time:    216        273.22          1.01          0.36         14.05          5.54          0.01         20.96
iter,obj,time:    217        271.96          1.01          0.36         14.08          5.61          0.01         21.07
iter,obj,time:    218        271.13          1.01          0.36         14.10          5.59          0.01         21.07
iter,obj,time:    219        271.92          1.01          0.37         14.05          5.59          0.01         21.02
iter,obj,time:    220        271.92          1.01          0.37         14.11          5.46          0.01         20.95
iter,obj,time:    221        272.03          1.01          0.36         14.07          5.56          0.01         21.00
iter,obj,time:    222        275.08          1.01          0.36         14.09          5.52          0.01         20.99
iter,obj,time:    223        272.31          1.00          0.36         14.03          5.59          0.01         20.99
iter,obj,time:    224        271.74          1.01          0.36         14.00          5.62          0.01         20.99
iter,obj,time:    225        278.22          1.00          0.37         14.02          5.68          0.01         21.07
iter,obj,time:    226        271.57          1.00          0.36         14.08          5.52          0.01         20.97
iter,obj,time:    227        274.27          1.01          0.37         14.12          5.51          0.01         21.01
iter,obj,time:    228        276.00          1.01          0.36         14.04          5.62          0.01         21.03
iter,obj,time:    229        273.76          1.01          0.36         14.13          5.50          0.01         21.01
iter,obj,time:    230        274.31          1.01          0.36         14.10          5.53          0.01         21.00
iter,obj,time:    231        270.16          1.01          0.36         14.14          5.56          0.01         21.08
iter,obj,time:    232        272.49          1.00          0.37         14.03          5.58          0.01         20.99
iter,obj,time:    233        271.29          1.01          0.36         14.02          5.57          0.01         20.96
iter,obj,time:    234        273.13          1.01          0.37         14.09          5.53          0.01         21.00
iter,obj,time:    235        270.68          1.01          0.37         14.04          5.59          0.01         21.01
iter,obj,time:    236        281.46          1.00          0.37         13.96          5.63          0.01         20.97
iter,obj,time:    237        283.39          1.00          0.37         14.04          5.66          0.01         21.08
iter,obj,time:    238        275.42          1.00          0.37         14.02          5.63          0.01         21.03
iter,obj,time:    239        277.23          1.00          0.37         14.13          5.46          0.01         20.96
iter,obj,time:    240        278.65          1.01          0.36         14.04          5.58          0.01         20.99
iter,obj,time:    241        278.66          1.01          0.36         14.04          5.62          0.01         21.05
iter,obj,time:    242        275.04          1.01          0.36         14.00          5.59          0.01         20.97
iter,obj,time:    243        270.64          1.00          0.37         14.08          5.54          0.01         21.00
iter,obj,time:    244        273.82          1.00          0.37         14.11          5.44          0.01         20.92
iter,obj,time:    245        277.93          1.01          0.36         14.02          5.62          0.01         21.02
iter,obj,time:    246        281.93          1.01          0.36         14.03          5.44          0.01         20.85
iter,obj,time:    247        272.74          1.00          0.37         14.03          5.52          0.01         20.92
iter,obj,time:    248        284.11          1.00          0.37         14.08          5.52          0.01         20.97
iter,obj,time:    249        281.87          1.00          0.36         14.04          5.73          0.01         21.13
iter,obj,time:    250        277.75          1.00          0.36         14.05          5.76          0.01         21.18
iter,obj,time:    251        288.82          1.00          0.36         14.08          5.57          0.01         21.02
iter,obj,time:    252        285.33          1.00          0.37         14.06          5.58          0.01         21.01
iter,obj,time:    253        281.58          1.00          0.36         14.02          5.58          0.01         20.97
iter,obj,time:    254        290.58          1.00          0.37         14.10          5.55          0.01         21.03
iter,obj,time:    255        286.43          1.00          0.36         14.05          5.67          0.01         21.09
iter,obj,time:    256        281.22          1.00          0.37         14.10          5.64          0.01         21.12
iter,obj,time:    257        288.24          1.00          0.36         14.02          5.74          0.01         21.13
iter,obj,time:    258        294.20          1.00          0.36         14.04          5.77          0.01         21.18
iter,obj,time:    259        290.70          1.00          0.36         14.04          5.73          0.01         21.14
iter,obj,time:    260        279.15          1.00          0.36         14.05          5.71          0.01         21.14
iter,obj,time:    261        291.46          1.00          0.37         14.08          5.65          0.01         21.11
iter,obj,time:    262        286.29          1.00          0.37         14.07          5.55          0.01         20.99
iter,obj,time:    263        297.52          1.00          0.36         14.04          5.71          0.01         21.12


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     265      69
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     262




loop,nloop:      40      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.222082E-02           169
loop is:       41
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.666247E-03           179

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      179
neval,tstepnext:      262     179

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356230      -1.03218     -0.687687E-03  0.687687E-03   267.611       267.612    
   2  0.436049     -0.830000     -0.552985E-03  0.552985E-03   237.130       237.131    
   3  0.771707     -0.259151     -0.172658E-03  0.172658E-03   263.426       263.426    
   4  0.876529     -0.131785     -0.878017E-04  0.878017E-04   261.176       261.176    
   5  0.845410     -0.167933     -0.111885E-03  0.111885E-03   266.675       266.675    
   6  0.876367     -0.131970     -0.879248E-04  0.879248E-04   269.621       269.621    
   7  0.262182      -1.33872     -0.891916E-03  0.891916E-03   269.233       269.234    
   8  0.426165     -0.852928     -0.568261E-03  0.568261E-03   274.417       274.417    
   9  0.994770     -0.524422E-02 -0.349395E-05  0.349395E-05   266.097       266.097    
  10  0.666164     -0.406219     -0.270642E-03  0.270642E-03   271.704       271.704    
  11  0.574076     -0.554993     -0.369763E-03  0.369763E-03   259.039       259.039    
  12  0.676074     -0.391452     -0.260804E-03  0.260804E-03   270.806       270.806    
  13  0.314169      -1.15782     -0.771397E-03  0.771397E-03   267.113       267.114    
  14  0.175078E-01  -4.04511     -0.269504E-02  0.269504E-02   269.659       269.662    
  15  0.510736     -0.671902     -0.447653E-03  0.447653E-03   269.138       269.139    
  16  0.612094     -0.490870     -0.327041E-03  0.327041E-03   271.206       271.206    
  17  0.683606     -0.380374     -0.253423E-03  0.253423E-03   269.269       269.269    
  18  0.621601     -0.475457     -0.316772E-03  0.316772E-03   272.011       272.011    
  19  0.177176      -1.73061     -0.115302E-02  0.115302E-02   269.851       269.852    
  20  0.731749     -0.312318     -0.208081E-03  0.208081E-03   271.782       271.782    
  21  0.690137     -0.370865     -0.247088E-03  0.247088E-03   274.263       274.263    
  22  0.798783     -0.224666     -0.149683E-03  0.149683E-03   273.221       273.221    
  23  0.320613      -1.13752     -0.757869E-03  0.757869E-03   271.964       271.964    
  24  0.896352     -0.109422     -0.729020E-04  0.729020E-04   271.126       271.126    
  25  0.903622     -0.101344     -0.675204E-04  0.675204E-04   271.918       271.918    
  26  0.523428     -0.647356     -0.431299E-03  0.431299E-03   271.918       271.918    
  27  0.794673     -0.229824     -0.153120E-03  0.153120E-03   272.030       272.030    
  28  0.744597     -0.294913     -0.196485E-03  0.196485E-03   275.085       275.085    
  29  0.175961      -1.73749     -0.115760E-02  0.115760E-02   272.312       272.313    
  30  0.971305     -0.291145E-01 -0.193975E-04  0.193975E-04   271.739       271.739    
  31  0.844412     -0.169115     -0.112672E-03  0.112672E-03   278.219       278.219    
  32  0.848318     -0.164499     -0.109597E-03  0.109597E-03   271.571       271.571    
  33  0.233137      -1.45613     -0.970141E-03  0.970141E-03   274.266       274.267    
  34  0.382610     -0.960738     -0.640089E-03  0.640089E-03   275.998       275.999    
  35  0.545091     -0.606803     -0.404281E-03  0.404281E-03   273.762       273.763    
  36  0.403462     -0.907674     -0.604735E-03  0.604735E-03   274.313       274.313    
  37  0.340776      -1.07653     -0.717236E-03  0.717236E-03   270.165       270.166    
  38  0.615315     -0.485620     -0.323543E-03  0.323543E-03   272.494       272.494    
  39  0.272494      -1.30014     -0.866213E-03  0.866213E-03   271.285       271.286    
  40  0.363754      -1.01128     -0.673761E-03  0.673761E-03   273.130       273.131    
  41  0.197138      -1.62385     -0.108189E-02  0.108189E-02   270.677       270.678    
  42  0.967304     -0.332420E-01 -0.221474E-04  0.221474E-04   281.462       281.462    
  43  0.669645     -0.401008     -0.267171E-03  0.267171E-03   283.390       283.391    
  44  0.992117E-01  -2.31050     -0.153936E-02  0.153936E-02   275.418       275.419    
  45  0.149515      -1.90036     -0.126611E-02  0.126611E-02   277.233       277.234    
  46  0.428242     -0.848067     -0.565023E-03  0.565023E-03   278.652       278.653    
  47  0.259306      -1.34975     -0.899266E-03  0.899266E-03   278.658       278.659    
  48  0.220377      -1.51242     -0.100764E-02  0.100764E-02   275.037       275.038    
  49  0.137221      -1.98616     -0.132327E-02  0.132327E-02   270.639       270.641    
  50  0.795598     -0.228661     -0.152345E-03  0.152345E-03   273.822       273.822    
  51  0.939720     -0.621730E-01 -0.414226E-04  0.414226E-04   277.934       277.934    
  52  0.731734     -0.312339     -0.208095E-03  0.208095E-03   281.929       281.929    
  53  0.518726     -0.656380     -0.437311E-03  0.437311E-03   272.743       272.743    
  54  0.368878     -0.997289     -0.664441E-03  0.664441E-03   284.111       284.112    
  55  0.115686      -2.15688     -0.143701E-02  0.143701E-02   281.869       281.870    
  56  0.819687     -0.198833     -0.132472E-03  0.132472E-03   277.753       277.753    
  57  0.917253     -0.863718E-01 -0.575450E-04  0.575450E-04   288.817       288.817    
  58  0.149476      -1.90062     -0.126628E-02  0.126628E-02   285.327       285.328    
  59  0.637087     -0.450850     -0.300377E-03  0.300377E-03   281.581       281.581    
  60  0.177681      -1.72777     -0.115112E-02  0.115112E-02   290.576       290.577    
  61  0.724248E-01  -2.62521     -0.174904E-02  0.174904E-02   286.435       286.437    
  62  0.530503     -0.633929     -0.422353E-03  0.422353E-03   281.217       281.217    
  63  0.269291      -1.31196     -0.874092E-03  0.874092E-03   288.238       288.239    
  64  0.506817     -0.679605     -0.452785E-03  0.452785E-03   294.199       294.200    
  65  0.374355     -0.982552     -0.654623E-03  0.654623E-03   290.704       290.704    
  66  0.319195      -1.14195     -0.760823E-03  0.760823E-03   279.148       279.148    
  67  0.628968     -0.463675     -0.308922E-03  0.308922E-03   291.461       291.462    
  68  0.211399      -1.55401     -0.103535E-02  0.103535E-02   286.288       286.289    
  69  0.730677     -0.313783     -0.209057E-03  0.209057E-03   297.517       297.517    
loop,thermsimp(1:2)       41  0.687687E-03  0.552985E-03

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264        309.93          1.00          0.36         13.96          5.73          0.02         21.06
Just calling func    0   0         21.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    265        273.09          1.00          0.36         14.07          5.71          0.01         21.15
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    273.09
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.666247E-03           179
loop is:       41
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.666247E-03           179
loop is:       42
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.199874E-03           189

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      189
neval,tstepnext:      264     189

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.995484     -0.452615E-02 -0.904661E-06  0.904661E-06   237.130       237.130    
   2  0.751523E-01  -2.58824     -0.517322E-03  0.517322E-03   259.039       259.039    
   3  0.237566      -1.43731     -0.287281E-03  0.287281E-03   261.176       261.177    
   4  0.852806     -0.159223     -0.318246E-04  0.318246E-04   263.426       263.426    
   5  0.752349     -0.284555     -0.568752E-04  0.568752E-04   266.097       266.097    
   6  0.489177     -0.715032     -0.142916E-03  0.142916E-03   266.675       266.675    
   7  0.800046     -0.223085     -0.445890E-04  0.445890E-04   267.113       267.113    
   8  0.449921     -0.798684     -0.159636E-03  0.159636E-03   267.611       267.611    
   9  0.616005E-01  -2.78709     -0.557066E-03  0.557066E-03   269.138       269.139    
  10  0.463224     -0.769545     -0.153812E-03  0.153812E-03   269.233       269.233    
  11  0.493190     -0.706860     -0.141283E-03  0.141283E-03   269.269       269.269    
  12  0.980098     -0.201026E-01 -0.401800E-05  0.401800E-05   269.621       269.621    
  13  0.944088     -0.575361E-01 -0.115000E-04  0.115000E-04   269.659       269.659    
  14  0.332140      -1.10220     -0.220301E-03  0.220301E-03   269.851       269.851    
  15  0.995967     -0.404071E-02 -0.807633E-06  0.807633E-06   270.165       270.165    
  16  0.512440     -0.668571     -0.133630E-03  0.133630E-03   270.639       270.639    
  17  0.230109      -1.46920     -0.293656E-03  0.293656E-03   270.677       270.678    
  18  0.458771     -0.779204     -0.155743E-03  0.155743E-03   270.806       270.806    
  19  0.935791     -0.663627E-01 -0.132642E-04  0.132642E-04   271.126       271.126    
  20  0.134808      -2.00391     -0.400529E-03  0.400529E-03   271.206       271.206    
  21  0.954367     -0.467067E-01 -0.933546E-05  0.933546E-05   271.285       271.285    
  22  0.483501     -0.726701     -0.145249E-03  0.145249E-03   271.571       271.572    
  23  0.968518     -0.319884E-01 -0.639365E-05  0.639365E-05   271.704       271.704    
  24  0.732304     -0.311560     -0.622727E-04  0.622727E-04   271.739       271.739    
  25  0.289387      -1.23999     -0.247842E-03  0.247842E-03   271.782       271.782    
  26  0.437211E-01  -3.12992     -0.625591E-03  0.625591E-03   271.918       271.919    
  27  0.317951      -1.14586     -0.229028E-03  0.229028E-03   271.918       271.918    
  28  0.660072     -0.415406     -0.830289E-04  0.830289E-04   271.964       271.964    
  29  0.591307     -0.525420     -0.105018E-03  0.105018E-03   272.011       272.011    
  30  0.421608     -0.863678     -0.172627E-03  0.172627E-03   272.030       272.030    
  31  0.405824     -0.901837     -0.180254E-03  0.180254E-03   272.312       272.312    
  32  0.794263     -0.230341     -0.460392E-04  0.460392E-04   272.494       272.494    
  33  0.331660      -1.10365     -0.220590E-03  0.220590E-03   272.743       272.743    
  34  0.652484     -0.426969     -0.853401E-04  0.853401E-04   273.130       273.130    
  35  0.353310      -1.04041     -0.207951E-03  0.207951E-03   273.221       273.221    
  36  0.934820     -0.674011E-01 -0.134717E-04  0.134717E-04   273.762       273.762    
  37  0.734691     -0.308305     -0.616223E-04  0.616223E-04   273.822       273.822    
  38  0.467923E-02  -5.36462     -0.107225E-02  0.107225E-02   274.263       274.264    
  39  0.692312     -0.367719     -0.734975E-04  0.734975E-04   274.266       274.266    
  40  0.541396     -0.613605     -0.122644E-03  0.122644E-03   274.313       274.313    
  41  0.172050      -1.75997     -0.351773E-03  0.351773E-03   274.417       274.417    
  42  0.824634     -0.192816     -0.385389E-04  0.385389E-04   275.037       275.037    
  43  0.156620      -1.85393     -0.370553E-03  0.370553E-03   275.085       275.085    
  44  0.251711      -1.37947     -0.275721E-03  0.275721E-03   275.418       275.418    
  45  0.823490     -0.194204     -0.388163E-04  0.388163E-04   275.998       275.998    
  46  0.840043     -0.174302     -0.348385E-04  0.348385E-04   277.233       277.233    
  47  0.330050      -1.10851     -0.221563E-03  0.221563E-03   277.753       277.753    
  48  0.796071     -0.228067     -0.455848E-04  0.455848E-04   277.934       277.934    
  49  0.179105      -1.71978     -0.343740E-03  0.343740E-03   278.219       278.219    
  50  0.101977      -2.28301     -0.456315E-03  0.456315E-03   278.652       278.653    
  51  0.431885     -0.839596     -0.167813E-03  0.167813E-03   278.658       278.658    
  52  0.385761     -0.952536     -0.190387E-03  0.190387E-03   279.148       279.148    
  53  0.162666      -1.81606     -0.362983E-03  0.362983E-03   281.217       281.217    
  54  0.203314      -1.59300     -0.318400E-03  0.318400E-03   281.462       281.462    
  55  0.983293     -0.168482E-01 -0.336751E-05  0.336751E-05   281.581       281.581    
  56  0.608709     -0.496414     -0.992204E-04  0.992204E-04   281.869       281.869    
  57  0.228020E-01  -3.78091     -0.755705E-03  0.755705E-03   281.929       281.930    
  58  0.936534     -0.655691E-01 -0.131056E-04  0.131056E-04   283.390       283.390    
  59  0.762592     -0.271032     -0.541723E-04  0.541723E-04   284.111       284.111    
  60  0.167356      -1.78763     -0.357301E-03  0.357301E-03   285.327       285.327    
  61  0.953285E-01  -2.35043     -0.469790E-03  0.469790E-03   286.288       286.288    
  62  0.129267      -2.04587     -0.408917E-03  0.408917E-03   286.435       286.435    
  63  0.406225E-01  -3.20343     -0.640284E-03  0.640284E-03   288.238       288.239    
  64  0.693390     -0.366163     -0.731866E-04  0.731866E-04   288.817       288.817    
  65  0.785835     -0.241008     -0.481713E-04  0.481713E-04   290.576       290.576    
  66  0.829415     -0.187035     -0.373834E-04  0.373834E-04   290.704       290.704    
  67  0.139599E-01  -4.27156     -0.853775E-03  0.853775E-03   291.461       291.462    
  68  0.874095     -0.134566     -0.268964E-04  0.268964E-04   294.199       294.199    
  69  0.259398E-01  -3.65198     -0.729936E-03  0.729936E-03   273.095       273.095    
loop,thermsimp(1:2)       42  0.904661E-06  0.517322E-03

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266        283.58          1.01          0.36         14.10          5.63          0.01         21.10
Just calling func    0   0         21.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    283.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.199874E-03           189
loop is:       42
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.199874E-03           189
loop is:       43
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.599623E-04           199

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      199
neval,tstepnext:      265     199

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244116      -1.41011     -0.845536E-04  0.845536E-04   237.130       237.130    
   2  0.399464     -0.917631     -0.550233E-04  0.550233E-04   259.039       259.039    
   3  0.356116      -1.03250     -0.619109E-04  0.619109E-04   261.176       261.176    
   4  0.139333      -1.97089     -0.118179E-03  0.118179E-03   263.426       263.426    
   5  0.578987     -0.546475     -0.327679E-04  0.327679E-04   266.097       266.097    
   6  0.918813     -0.846723E-01 -0.507714E-05  0.507714E-05   266.675       266.675    
   7  0.817977     -0.200921     -0.120477E-04  0.120477E-04   267.113       267.113    
   8  0.912208     -0.918878E-01 -0.550980E-05  0.550980E-05   267.611       267.611    
   9  0.146624      -1.91988     -0.115121E-03  0.115121E-03   269.138       269.138    
  10  0.969889     -0.305739E-01 -0.183328E-05  0.183328E-05   269.233       269.233    
  11  0.754567     -0.281612     -0.168861E-04  0.168861E-04   269.269       269.269    
  12  0.332058E-01  -3.40503     -0.204173E-03  0.204173E-03   269.621       269.621    
  13  0.622386     -0.474195     -0.284338E-04  0.284338E-04   269.659       269.659    
  14  0.632459     -0.458141     -0.274711E-04  0.274711E-04   269.851       269.851    
  15  0.193328      -1.64337     -0.985401E-04  0.985401E-04   270.165       270.165    
  16  0.494996     -0.703205     -0.421658E-04  0.421658E-04   270.639       270.639    
  17  0.546485     -0.604249     -0.362322E-04  0.362322E-04   270.677       270.677    
  18  0.581602E-01  -2.84455     -0.170566E-03  0.170566E-03   270.806       270.806    
  19  0.173708      -1.75038     -0.104957E-03  0.104957E-03   271.126       271.126    
  20  0.539278     -0.617525     -0.370282E-04  0.370282E-04   271.206       271.206    
  21  0.736559     -0.305765     -0.183344E-04  0.183344E-04   271.285       271.285    
  22  0.518375     -0.657057     -0.393986E-04  0.393986E-04   271.571       271.571    
  23  0.686005     -0.376870     -0.225980E-04  0.225980E-04   271.704       271.704    
  24  0.812151     -0.208070     -0.124763E-04  0.124763E-04   271.739       271.739    
  25  0.997931     -0.207129E-02 -0.124199E-06  0.124199E-06   271.782       271.782    
  26  0.369106     -0.996671     -0.597626E-04  0.597626E-04   271.918       271.918    
  27  0.887728     -0.119090     -0.714092E-05  0.714092E-05   271.918       271.918    
  28  0.341028      -1.07579     -0.645069E-04  0.645069E-04   271.964       271.964    
  29  0.847292     -0.165710     -0.993637E-05  0.993637E-05   272.011       272.011    
  30  0.315979      -1.15208     -0.690812E-04  0.690812E-04   272.030       272.030    
  31  0.150321      -1.89498     -0.113627E-03  0.113627E-03   272.312       272.312    
  32  0.446812     -0.805616     -0.483066E-04  0.483066E-04   272.494       272.494    
  33  0.293912      -1.22447     -0.734222E-04  0.734222E-04   272.743       272.743    
  34  0.339303      -1.08086     -0.648108E-04  0.648108E-04   273.095       273.095    
  35  0.196736      -1.62589     -0.974922E-04  0.974922E-04   273.130       273.130    
  36  0.694908E-01  -2.66656     -0.159893E-03  0.159893E-03   273.221       273.221    
  37  0.644339     -0.439531     -0.263553E-04  0.263553E-04   273.762       273.762    
  38  0.796143     -0.227976     -0.136700E-04  0.136700E-04   273.822       273.822    
  39  0.973710     -0.266418E-01 -0.159750E-05  0.159750E-05   274.263       274.263    
  40  0.917355     -0.862608E-01 -0.517239E-05  0.517239E-05   274.266       274.266    
  41  0.913639     -0.903200E-01 -0.541579E-05  0.541579E-05   274.313       274.313    
  42  0.663831     -0.409728     -0.245682E-04  0.245682E-04   274.417       274.417    
  43  0.731998     -0.311978     -0.187069E-04  0.187069E-04   275.037       275.037    
  44  0.232054      -1.46079     -0.875921E-04  0.875921E-04   275.085       275.085    
  45  0.851081     -0.161248     -0.966882E-05  0.966882E-05   275.418       275.418    
  46  0.605356     -0.501939     -0.300974E-04  0.300974E-04   275.998       275.998    
  47  0.767117     -0.265116     -0.158969E-04  0.158969E-04   277.233       277.233    
  48  0.330254E-02  -5.71306     -0.342568E-03  0.342568E-03   277.753       277.753    
  49  0.480155     -0.733646     -0.439911E-04  0.439911E-04   277.934       277.934    
  50  0.731857     -0.312170     -0.187184E-04  0.187184E-04   278.219       278.219    
  51  0.135206      -2.00096     -0.119982E-03  0.119982E-03   278.652       278.652    
  52  0.841553     -0.172507     -0.103439E-04  0.103439E-04   278.658       278.658    
  53  0.492748     -0.707757     -0.424387E-04  0.424387E-04   279.148       279.148    
  54  0.615195     -0.485815     -0.291306E-04  0.291306E-04   281.217       281.217    
  55  0.727757     -0.317789     -0.190553E-04  0.190553E-04   281.462       281.462    
  56  0.785326     -0.241656     -0.144902E-04  0.144902E-04   281.581       281.581    
  57  0.951403     -0.498176E-01 -0.298717E-05  0.298717E-05   281.869       281.869    
  58  0.464725     -0.766310     -0.459497E-04  0.459497E-04   281.929       281.929    
  59  0.947939     -0.534649E-01 -0.320588E-05  0.320588E-05   283.390       283.390    
  60  0.166664      -1.79178     -0.107439E-03  0.107439E-03   284.111       284.111    
  61  0.659608     -0.416109     -0.249509E-04  0.249509E-04   285.327       285.327    
  62  0.159293      -1.83701     -0.110151E-03  0.110151E-03   286.288       286.288    
  63  0.449468     -0.799691     -0.479513E-04  0.479513E-04   286.435       286.435    
  64  0.627416E-01  -2.76873     -0.166019E-03  0.166019E-03   288.238       288.238    
  65  0.266146      -1.32371     -0.793728E-04  0.793728E-04   288.817       288.817    
  66  0.758829     -0.275979     -0.165483E-04  0.165483E-04   290.576       290.576    
  67  0.305143      -1.18698     -0.711737E-04  0.711737E-04   290.704       290.704    
  68  0.996112     -0.389596E-02 -0.233611E-06  0.233611E-06   291.461       291.461    
  69  0.419478     -0.868743     -0.520918E-04  0.520918E-04   283.582       283.582    
loop,thermsimp(1:2)       43  0.845536E-04  0.550233E-04

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267        319.74          1.00          0.36         13.99          5.60          0.02         20.97
Just calling func    0   0         20.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    268        278.38          1.00          0.36         14.04          5.55          0.01         20.96
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    278.38
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.599623E-04           199
loop is:       43
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.599623E-04           199
loop is:       44
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.179887E-04           209

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      209
neval,tstepnext:      267     209

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.902027     -0.103111     -0.185483E-05  0.185483E-05   237.130       237.130    
   2  0.408475     -0.895323     -0.161057E-04  0.161057E-04   259.039       259.039    
   3  0.935971     -0.661705E-01 -0.119032E-05  0.119032E-05   261.176       261.176    
   4  0.110033      -2.20697     -0.397005E-04  0.397005E-04   263.426       263.426    
   5  0.475560     -0.743263     -0.133703E-04  0.133703E-04   266.097       266.097    
   6  0.335809      -1.09121     -0.196295E-04  0.196295E-04   266.675       266.675    
   7  0.219255      -1.51752     -0.272981E-04  0.272981E-04   267.113       267.113    
   8  0.949081     -0.522614E-01 -0.940113E-06  0.940113E-06   267.611       267.611    
   9  0.296146      -1.21690     -0.218905E-04  0.218905E-04   269.138       269.138    
  10  0.847396     -0.165587     -0.297869E-05  0.297869E-05   269.233       269.233    
  11  0.881508     -0.126121     -0.226876E-05  0.226876E-05   269.269       269.269    
  12  0.234894      -1.44862     -0.260588E-04  0.260588E-04   269.621       269.621    
  13  0.445927     -0.807599     -0.145276E-04  0.145276E-04   269.659       269.659    
  14  0.740334     -0.300653     -0.540836E-05  0.540836E-05   269.851       269.851    
  15  0.740015     -0.301084     -0.541611E-05  0.541611E-05   270.165       270.165    
  16  0.890157     -0.116357     -0.209311E-05  0.209311E-05   270.639       270.639    
  17  0.835860     -0.179294     -0.322526E-05  0.322526E-05   270.677       270.677    
  18  0.992489     -0.753949E-02 -0.135625E-06  0.135625E-06   270.806       270.806    
  19  0.683735     -0.380185     -0.683902E-05  0.683902E-05   271.126       271.126    
  20  0.232827E-01  -3.76005     -0.676383E-04  0.676383E-04   271.206       271.206    
  21  0.741946     -0.298479     -0.536925E-05  0.536925E-05   271.285       271.285    
  22  0.444610E-01  -3.11314     -0.560013E-04  0.560013E-04   271.571       271.571    
  23  0.677445     -0.389426     -0.700527E-05  0.700527E-05   271.704       271.704    
  24  0.120391      -2.11701     -0.380822E-04  0.380822E-04   271.739       271.739    
  25  0.571652     -0.559224     -0.100597E-04  0.100597E-04   271.782       271.782    
  26  0.644967E-01  -2.74114     -0.493095E-04  0.493095E-04   271.918       271.918    
  27  0.227259      -1.48167     -0.266532E-04  0.266532E-04   271.918       271.918    
  28  0.618342     -0.480713     -0.864740E-05  0.864740E-05   271.964       271.964    
  29  0.725052     -0.321512     -0.578358E-05  0.578358E-05   272.011       272.011    
  30  0.333439      -1.09830     -0.197569E-04  0.197569E-04   272.030       272.030    
  31  0.758659     -0.276203     -0.496853E-05  0.496853E-05   272.312       272.312    
  32  0.319749      -1.14022     -0.205110E-04  0.205110E-04   272.494       272.494    
  33  0.358637      -1.02544     -0.184464E-04  0.184464E-04   272.743       272.743    
  34  0.983930     -0.162009E-01 -0.291432E-06  0.291432E-06   273.095       273.095    
  35  0.147877      -1.91138     -0.343831E-04  0.343831E-04   273.130       273.130    
  36  0.457703E-01  -3.08412     -0.554792E-04  0.554792E-04   273.221       273.221    
  37  0.342794      -1.07062     -0.192591E-04  0.192591E-04   273.762       273.762    
  38  0.245879      -1.40292     -0.252366E-04  0.252366E-04   273.822       273.822    
  39  0.761053     -0.273053     -0.491186E-05  0.491186E-05   274.263       274.263    
  40  0.497567     -0.698026     -0.125566E-04  0.125566E-04   274.266       274.266    
  41  0.391874     -0.936816     -0.168521E-04  0.168521E-04   274.313       274.313    
  42  0.770069     -0.261275     -0.470000E-05  0.470000E-05   274.417       274.417    
  43  0.410180E-01  -3.19374     -0.574512E-04  0.574512E-04   275.037       275.037    
  44  0.584281     -0.537374     -0.966664E-05  0.966664E-05   275.085       275.085    
  45  0.571105     -0.560183     -0.100769E-04  0.100769E-04   275.418       275.418    
  46  0.668481     -0.402748     -0.724490E-05  0.724490E-05   275.998       275.998    
  47  0.771640     -0.259237     -0.466334E-05  0.466334E-05   277.233       277.233    
  48  0.309659      -1.17228     -0.210878E-04  0.210878E-04   277.753       277.753    
  49  0.221747      -1.50622     -0.270949E-04  0.270949E-04   277.934       277.934    
  50  0.960964     -0.398187E-01 -0.716285E-06  0.716285E-06   278.219       278.219    
  51  0.252854      -1.37494     -0.247334E-04  0.247334E-04   278.652       278.652    
  52  0.815286     -0.204216     -0.367357E-05  0.367357E-05   278.658       278.658    
  53  0.987161     -0.129225E-01 -0.232458E-06  0.232458E-06   279.148       279.148    
  54  0.288637E-01  -3.54517     -0.637729E-04  0.637729E-04   281.217       281.217    
  55  0.900365     -0.104955     -0.188800E-05  0.188800E-05   281.462       281.462    
  56  0.111258      -2.19591     -0.395014E-04  0.395014E-04   281.581       281.581    
  57  0.313531      -1.15986     -0.208643E-04  0.208643E-04   281.869       281.869    
  58  0.631013     -0.460429     -0.828250E-05  0.828250E-05   281.929       281.929    
  59  0.304541      -1.18895     -0.213876E-04  0.213876E-04   283.390       283.390    
  60  0.687280     -0.375014     -0.674600E-05  0.674600E-05   283.582       283.582    
  61  0.818439     -0.200356     -0.360414E-05  0.360414E-05   284.111       284.111    
  62  0.373730     -0.984220     -0.177048E-04  0.177048E-04   285.327       285.327    
  63  0.404209     -0.905823     -0.162946E-04  0.162946E-04   286.288       286.288    
  64  0.202455      -1.59724     -0.287322E-04  0.287322E-04   286.435       286.435    
  65  0.367961E-01  -3.30236     -0.594051E-04  0.594051E-04   288.238       288.238    
  66  0.478093     -0.737951     -0.132748E-04  0.132748E-04   288.817       288.817    
  67  0.245977      -1.40252     -0.252294E-04  0.252294E-04   290.576       290.576    
  68  0.758295     -0.276683     -0.497715E-05  0.497715E-05   290.704       290.704    
  69  0.915612     -0.881630E-01 -0.158594E-05  0.158594E-05   278.382       278.382    
loop,thermsimp(1:2)       44  0.185483E-05  0.161057E-04

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269        277.65          1.00          0.37         14.06          5.57          0.01         21.01
Just calling func    0   0         21.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    277.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.179887E-04           209
loop is:       44
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.179887E-04           209
loop is:       45
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.539660E-05           219

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      219
neval,tstepnext:      268     219

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.224022      -1.49601     -0.807337E-05  0.807337E-05   237.130       237.130    
   2  0.937592     -0.644404E-01 -0.347759E-06  0.347759E-06   259.039       259.039    
   3  0.616297E-01  -2.78661     -0.150382E-04  0.150382E-04   261.176       261.176    
   4  0.317436E-01  -3.45006     -0.186186E-04  0.186186E-04   263.426       263.426    
   5  0.276312      -1.28623     -0.694125E-05  0.694125E-05   266.097       266.097    
   6  0.961302     -0.394663E-01 -0.212984E-06  0.212984E-06   266.675       266.675    
   7  0.638036     -0.449360     -0.242502E-05  0.242502E-05   267.113       267.113    
   8  0.536641     -0.622426     -0.335899E-05  0.335899E-05   267.611       267.611    
   9  0.991324     -0.871349E-02 -0.470233E-07  0.470233E-07   269.138       269.138    
  10  0.590456     -0.526860     -0.284326E-05  0.284326E-05   269.233       269.233    
  11  0.522911     -0.648343     -0.349885E-05  0.349885E-05   269.269       269.269    
  12  0.644393     -0.439446     -0.237152E-05  0.237152E-05   269.621       269.621    
  13  0.852853     -0.159168     -0.858965E-06  0.858965E-06   269.659       269.659    
  14  0.255720      -1.36367     -0.735919E-05  0.735919E-05   269.851       269.851    
  15  0.987861     -0.122133E-01 -0.659103E-07  0.659103E-07   270.165       270.165    
  16  0.946644     -0.548320E-01 -0.295906E-06  0.295906E-06   270.639       270.639    
  17  0.212575      -1.54846     -0.835642E-05  0.835642E-05   270.677       270.677    
  18  0.137871      -1.98144     -0.106930E-04  0.106930E-04   270.806       270.806    
  19  0.790331     -0.235303     -0.126984E-05  0.126984E-05   271.126       271.126    
  20  0.774480     -0.255563     -0.137917E-05  0.137917E-05   271.206       271.206    
  21  0.322044      -1.13307     -0.611471E-05  0.611471E-05   271.285       271.285    
  22  0.154517      -1.86745     -0.100779E-04  0.100779E-04   271.571       271.571    
  23  0.681030     -0.384148     -0.207310E-05  0.207310E-05   271.704       271.704    
  24  0.929331     -0.732901E-01 -0.395517E-06  0.395517E-06   271.739       271.739    
  25  0.201597      -1.60149     -0.864259E-05  0.864259E-05   271.782       271.782    
  26  0.859380     -0.151544     -0.817821E-06  0.817821E-06   271.918       271.918    
  27  0.307136      -1.18047     -0.637051E-05  0.637051E-05   271.918       271.918    
  28  0.537376     -0.621057     -0.335160E-05  0.335160E-05   271.964       271.964    
  29  0.652498     -0.426947     -0.230406E-05  0.230406E-05   272.011       272.011    
  30  0.899028     -0.106441     -0.574419E-06  0.574419E-06   272.030       272.030    
  31  0.376381     -0.977152     -0.527330E-05  0.527330E-05   272.312       272.312    
  32  0.962642     -0.380738E-01 -0.205469E-06  0.205469E-06   272.494       272.494    
  33  0.308494      -1.17605     -0.634670E-05  0.634670E-05   272.743       272.743    
  34  0.770200     -0.261105     -0.140908E-05  0.140908E-05   273.095       273.095    
  35  0.904012     -0.100913     -0.544585E-06  0.544585E-06   273.130       273.130    
  36  0.948348     -0.530343E-01 -0.286205E-06  0.286205E-06   273.221       273.221    
  37  0.290211      -1.23715     -0.667640E-05  0.667640E-05   273.762       273.762    
  38  0.941312     -0.604803E-01 -0.326388E-06  0.326388E-06   273.822       273.822    
  39  0.977245E-01  -2.32560     -0.125504E-04  0.125504E-04   274.263       274.263    
  40  0.207066      -1.57472     -0.849812E-05  0.849812E-05   274.266       274.266    
  41  0.451956     -0.794170     -0.428582E-05  0.428582E-05   274.313       274.313    
  42  0.266368      -1.32288     -0.713904E-05  0.713904E-05   274.417       274.417    
  43  0.982730     -0.174204E-01 -0.940111E-07  0.940111E-07   275.037       275.037    
  44  0.316847      -1.14934     -0.620251E-05  0.620251E-05   275.085       275.085    
  45  0.626301     -0.467925     -0.252520E-05  0.252520E-05   275.418       275.418    
  46  0.399743     -0.916933     -0.494832E-05  0.494832E-05   275.998       275.998    
  47  0.675098     -0.392898     -0.212031E-05  0.212031E-05   277.233       277.233    
  48  0.256732      -1.35972     -0.733788E-05  0.733788E-05   277.753       277.753    
  49  0.547044     -0.603226     -0.325537E-05  0.325537E-05   277.934       277.934    
  50  0.683241     -0.380907     -0.205560E-05  0.205560E-05   278.219       278.219    
  51  0.470006E-03  -7.66277     -0.413529E-04  0.413529E-04   278.382       278.382    
  52  0.979528     -0.206849E-01 -0.111628E-06  0.111628E-06   278.652       278.652    
  53  0.284278      -1.25780     -0.678787E-05  0.678787E-05   278.658       278.658    
  54  0.442376     -0.815596     -0.440145E-05  0.440145E-05   279.148       279.148    
  55  0.306639      -1.18208     -0.637923E-05  0.637923E-05   281.217       281.217    
  56  0.937275E-01  -2.36736     -0.127757E-04  0.127757E-04   281.462       281.462    
  57  0.717866     -0.331472     -0.178883E-05  0.178883E-05   281.581       281.581    
  58  0.484434     -0.724775     -0.391132E-05  0.391132E-05   281.869       281.869    
  59  0.593642     -0.521478     -0.281421E-05  0.281421E-05   281.929       281.929    
  60  0.234757      -1.44920     -0.782077E-05  0.782077E-05   283.390       283.390    
  61  0.635824     -0.452834     -0.244377E-05  0.244377E-05   283.582       283.582    
  62  0.456418     -0.784346     -0.423280E-05  0.423280E-05   284.111       284.111    
  63  0.364853      -1.00826     -0.544119E-05  0.544119E-05   285.327       285.327    
  64  0.742103     -0.298267     -0.160963E-05  0.160963E-05   286.288       286.288    
  65  0.642328     -0.442656     -0.238884E-05  0.238884E-05   286.435       286.435    
  66  0.896459E-01  -2.41189     -0.130160E-04  0.130160E-04   288.238       288.238    
  67  0.547555     -0.602292     -0.325033E-05  0.325033E-05   288.817       288.817    
  68  0.474556     -0.745375     -0.402249E-05  0.402249E-05   290.576       290.576    
  69  0.564647     -0.571555     -0.308445E-05  0.308445E-05   277.653       277.653    
loop,thermsimp(1:2)       45  0.807337E-05  0.347759E-06

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    270        278.99          1.00          0.37         13.98          5.91          0.01         21.26
Just calling func    0   0         21.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    278.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539660E-05           219
loop is:       45
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539660E-05           219
loop is:       46
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.161898E-05           229

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      229
neval,tstepnext:      269     229

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.797377     -0.226428     -0.366582E-06  0.366582E-06   237.130       237.130    
   2  0.916370     -0.873350E-01 -0.141394E-06  0.141394E-06   259.039       259.039    
   3  0.760691     -0.273529     -0.442837E-06  0.442837E-06   261.176       261.176    
   4  0.371971E-01  -3.29152     -0.532892E-05  0.532892E-05   263.426       263.426    
   5  0.159469      -1.83591     -0.297230E-05  0.297230E-05   266.097       266.097    
   6  0.892175     -0.114093     -0.184715E-06  0.184715E-06   266.675       266.675    
   7  0.185089      -1.68692     -0.273109E-05  0.273109E-05   267.113       267.113    
   8  0.839181     -0.175329     -0.283855E-06  0.283855E-06   267.611       267.611    
   9  0.404556     -0.904965     -0.146512E-05  0.146512E-05   269.138       269.138    
  10  0.947473     -0.539565E-01 -0.873545E-07  0.873545E-07   269.233       269.233    
  11  0.192135E-01  -3.95214     -0.639844E-05  0.639844E-05   269.269       269.269    
  12  0.697243     -0.360621     -0.583839E-06  0.583839E-06   269.621       269.621    
  13  0.728898     -0.316221     -0.511956E-06  0.511956E-06   269.659       269.659    
  14  0.980566E-01  -2.32221     -0.375961E-05  0.375961E-05   269.851       269.851    
  15  0.935006     -0.672024E-01 -0.108799E-06  0.108799E-06   270.165       270.165    
  16  0.293077E-01  -3.52991     -0.571485E-05  0.571485E-05   270.639       270.639    
  17  0.877610     -0.130553     -0.211364E-06  0.211364E-06   270.677       270.677    
  18  0.157558      -1.84796     -0.299182E-05  0.299182E-05   270.806       270.806    
  19  0.162625E-01  -4.11889     -0.666841E-05  0.666841E-05   271.126       271.126    
  20  0.345894      -1.06162     -0.171875E-05  0.171875E-05   271.206       271.206    
  21  0.232721      -1.45791     -0.236034E-05  0.236034E-05   271.285       271.285    
  22  0.983416     -0.167235E-01 -0.270750E-07  0.270750E-07   271.571       271.571    
  23  0.149877      -1.89794     -0.307273E-05  0.307273E-05   271.704       271.704    
  24  0.909498     -0.948630E-01 -0.153581E-06  0.153581E-06   271.739       271.739    
  25  0.447754     -0.803511     -0.130087E-05  0.130087E-05   271.782       271.782    
  26  0.646091     -0.436815     -0.707196E-06  0.707196E-06   271.918       271.918    
  27  0.997510     -0.249331E-02 -0.403662E-08  0.403662E-08   271.918       271.918    
  28  0.191655      -1.65206     -0.267465E-05  0.267465E-05   271.964       271.964    
  29  0.199869      -1.61009     -0.260671E-05  0.260671E-05   272.011       272.011    
  30  0.674971     -0.393086     -0.636399E-06  0.636399E-06   272.030       272.030    
  31  0.191033      -1.65531     -0.267991E-05  0.267991E-05   272.312       272.312    
  32  0.708524     -0.344572     -0.557855E-06  0.557855E-06   272.494       272.494    
  33  0.483382     -0.726949     -0.117692E-05  0.117692E-05   272.743       272.743    
  34  0.282479      -1.26415     -0.204664E-05  0.204664E-05   273.095       273.095    
  35  0.211164      -1.55512     -0.251771E-05  0.251771E-05   273.130       273.130    
  36  0.875192     -0.133312     -0.215830E-06  0.215830E-06   273.221       273.221    
  37  0.241051      -1.42274     -0.230340E-05  0.230340E-05   273.762       273.762    
  38  0.981691     -0.184788E-01 -0.299169E-07  0.299169E-07   273.822       273.822    
  39  0.357169      -1.02955     -0.166682E-05  0.166682E-05   274.263       274.263    
  40  0.213653      -1.54340     -0.249874E-05  0.249874E-05   274.266       274.266    
  41  0.447128     -0.804909     -0.130313E-05  0.130313E-05   274.313       274.313    
  42  0.255809      -1.36332     -0.220720E-05  0.220720E-05   274.417       274.417    
  43  0.833356     -0.182294     -0.295130E-06  0.295130E-06   275.037       275.037    
  44  0.870231     -0.138997     -0.225034E-06  0.225034E-06   275.085       275.085    
  45  0.910487     -0.937754E-01 -0.151821E-06  0.151821E-06   275.418       275.418    
  46  0.971100     -0.293263E-01 -0.474787E-07  0.474787E-07   275.998       275.998    
  47  0.335791      -1.09127     -0.176674E-05  0.176674E-05   277.233       277.233    
  48  0.465937     -0.763704     -0.123642E-05  0.123642E-05   277.653       277.653    
  49  0.777056     -0.252243     -0.408377E-06  0.408377E-06   277.753       277.753    
  50  0.142485      -1.94852     -0.315461E-05  0.315461E-05   277.934       277.934    
  51  0.138438      -1.97733     -0.320126E-05  0.320126E-05   278.219       278.219    
  52  0.458751     -0.779247     -0.126159E-05  0.126159E-05   278.382       278.382    
  53  0.300524      -1.20223     -0.194638E-05  0.194638E-05   278.652       278.652    
  54  0.156677      -1.85357     -0.300090E-05  0.300090E-05   278.658       278.658    
  55  0.824073     -0.193496     -0.313267E-06  0.313267E-06   279.148       279.148    
  56  0.107709      -2.22832     -0.360761E-05  0.360761E-05   281.217       281.217    
  57  0.783309     -0.244228     -0.395400E-06  0.395400E-06   281.462       281.462    
  58  0.276622E-01  -3.58769     -0.580840E-05  0.580840E-05   281.581       281.581    
  59  0.875144     -0.133367     -0.215919E-06  0.215919E-06   281.869       281.869    
  60  0.605082     -0.502392     -0.813362E-06  0.813362E-06   281.929       281.929    
  61  0.982155     -0.180057E-01 -0.291508E-07  0.291508E-07   283.390       283.390    
  62  0.867953     -0.141617     -0.229275E-06  0.229275E-06   283.582       283.582    
  63  0.571552     -0.559399     -0.905657E-06  0.905657E-06   284.111       284.111    
  64  0.160914      -1.82688     -0.295769E-05  0.295769E-05   285.327       285.327    
  65  0.953400     -0.477212E-01 -0.772597E-07  0.772597E-07   286.288       286.288    
  66  0.236012      -1.44387     -0.233760E-05  0.233760E-05   286.435       286.435    
  67  0.602210     -0.507149     -0.821064E-06  0.821064E-06   288.238       288.238    
  68  0.830799     -0.185367     -0.300106E-06  0.300106E-06   288.817       288.817    
  69  0.222134      -1.50447     -0.243571E-05  0.243571E-05   278.991       278.991    
loop,thermsimp(1:2)       46  0.366582E-06  0.141394E-06

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271        284.67          1.00          0.36         14.08          5.70          0.01         21.15
Just calling func    0   0         21.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    284.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.161898E-05           229
loop is:       46
neval is:      270
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.161898E-05           229
loop is:       47
neval is:      270


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.485694E-06           239

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      239
neval,tstepnext:      270     239

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.391791     -0.937027     -0.455109E-06  0.455109E-06   237.130       237.130    
   2  0.321486      -1.13480     -0.551167E-06  0.551167E-06   259.039       259.039    
   3  0.977427     -0.228320E-01 -0.110894E-07  0.110894E-07   261.176       261.176    
   4  0.254024      -1.37033     -0.665559E-06  0.665559E-06   263.426       263.426    
   5  0.302922      -1.19428     -0.580055E-06  0.580055E-06   266.097       266.097    
   6  0.750681     -0.286775     -0.139285E-06  0.139285E-06   266.675       266.675    
   7  0.384833     -0.954945     -0.463811E-06  0.463811E-06   267.113       267.113    
   8  0.361768      -1.01675     -0.493830E-06  0.493830E-06   267.611       267.611    
   9  0.902563     -0.102517     -0.497920E-07  0.497920E-07   269.138       269.138    
  10  0.975006     -0.253117E-01 -0.122937E-07  0.122937E-07   269.233       269.233    
  11  0.781354     -0.246727     -0.119834E-06  0.119834E-06   269.269       269.269    
  12  0.354613      -1.03673     -0.503533E-06  0.503533E-06   269.621       269.621    
  13  0.892890     -0.113292     -0.550251E-07  0.550251E-07   269.659       269.659    
  14  0.916917     -0.867384E-01 -0.421283E-07  0.421283E-07   269.851       269.851    
  15  0.909380     -0.949922E-01 -0.461372E-07  0.461372E-07   270.165       270.165    
  16  0.986311     -0.137840E-01 -0.669480E-08  0.669480E-08   270.639       270.639    
  17  0.505543     -0.682123     -0.331303E-06  0.331303E-06   270.677       270.677    
  18  0.204247E-01  -3.89101     -0.188984E-05  0.188984E-05   270.806       270.806    
  19  0.572165     -0.558328     -0.271177E-06  0.271177E-06   271.126       271.126    
  20  0.825900E-01  -2.49387     -0.121126E-05  0.121126E-05   271.206       271.206    
  21  0.209247      -1.56424     -0.759743E-06  0.759743E-06   271.285       271.285    
  22  0.282361      -1.26457     -0.614194E-06  0.614194E-06   271.571       271.571    
  23  0.620889     -0.476603     -0.231483E-06  0.231483E-06   271.704       271.704    
  24  0.563880     -0.572913     -0.278261E-06  0.278261E-06   271.739       271.739    
  25  0.122331      -2.10103     -0.102046E-05  0.102046E-05   271.782       271.782    
  26  0.441179     -0.818304     -0.397446E-06  0.397446E-06   271.918       271.918    
  27  0.520434     -0.653092     -0.317203E-06  0.317203E-06   271.918       271.918    
  28  0.193495      -1.64250     -0.797754E-06  0.797754E-06   271.964       271.964    
  29  0.888781     -0.117905     -0.572656E-07  0.572656E-07   272.011       272.011    
  30  0.664108     -0.409311     -0.198800E-06  0.198800E-06   272.030       272.030    
  31  0.294244      -1.22335     -0.594172E-06  0.594172E-06   272.312       272.312    
  32  0.653378     -0.425600     -0.206711E-06  0.206711E-06   272.494       272.494    
  33  0.832785     -0.182980     -0.888723E-07  0.888723E-07   272.743       272.743    
  34  0.395946     -0.926477     -0.449984E-06  0.449984E-06   273.095       273.095    
  35  0.979310E-01  -2.32349     -0.112851E-05  0.112851E-05   273.130       273.130    
  36  0.351899      -1.04441     -0.507265E-06  0.507265E-06   273.221       273.221    
  37  0.914762     -0.890918E-01 -0.432714E-07  0.432714E-07   273.762       273.762    
  38  0.758392     -0.276555     -0.134321E-06  0.134321E-06   273.822       273.822    
  39  0.406303     -0.900656     -0.437444E-06  0.437444E-06   274.263       274.263    
  40  0.327172      -1.11727     -0.542652E-06  0.542652E-06   274.266       274.266    
  41  0.476331     -0.741643     -0.360212E-06  0.360212E-06   274.313       274.313    
  42  0.447224     -0.804697     -0.390837E-06  0.390837E-06   274.417       274.417    
  43  0.359107      -1.02414     -0.497417E-06  0.497417E-06   275.037       275.037    
  44  0.697121     -0.360796     -0.175236E-06  0.175236E-06   275.085       275.085    
  45  0.234213      -1.45153     -0.704998E-06  0.704998E-06   275.418       275.418    
  46  0.527324     -0.639939     -0.310815E-06  0.310815E-06   275.998       275.998    
  47  0.790358     -0.235270     -0.114269E-06  0.114269E-06   277.233       277.233    
  48  0.872967     -0.135857     -0.659850E-07  0.659850E-07   277.653       277.653    
  49  0.736534     -0.305800     -0.148525E-06  0.148525E-06   277.753       277.753    
  50  0.852602     -0.159462     -0.774500E-07  0.774500E-07   277.934       277.934    
  51  0.338656      -1.08277     -0.525895E-06  0.525895E-06   278.219       278.219    
  52  0.788540     -0.237572     -0.115388E-06  0.115388E-06   278.382       278.382    
  53  0.729789     -0.315000     -0.152994E-06  0.152994E-06   278.652       278.652    
  54  0.462856     -0.770339     -0.374149E-06  0.374149E-06   278.658       278.658    
  55  0.319138      -1.14213     -0.554728E-06  0.554728E-06   278.991       278.991    
  56  0.469270     -0.756577     -0.367465E-06  0.367465E-06   279.148       279.148    
  57  0.929705     -0.728876E-01 -0.354011E-07  0.354011E-07   281.217       281.217    
  58  0.105026      -2.25355     -0.109453E-05  0.109453E-05   281.462       281.462    
  59  0.826334E-01  -2.49334     -0.121100E-05  0.121100E-05   281.581       281.581    
  60  0.952072     -0.491149E-01 -0.238548E-07  0.238548E-07   281.869       281.869    
  61  0.377249     -0.974851     -0.473479E-06  0.473479E-06   281.929       281.929    
  62  0.635185     -0.453839     -0.220427E-06  0.220427E-06   283.390       283.390    
  63  0.400629E-01  -3.21731     -0.156263E-05  0.156263E-05   283.582       283.582    
  64  0.982702     -0.174499E-01 -0.847530E-08  0.847530E-08   284.111       284.111    
  65  0.117016      -2.14545     -0.104203E-05  0.104203E-05   285.327       285.327    
  66  0.266923      -1.32079     -0.641502E-06  0.641502E-06   286.288       286.288    
  67  0.535626     -0.624320     -0.303229E-06  0.303229E-06   286.435       286.435    
  68  0.784870     -0.242238     -0.117654E-06  0.117654E-06   288.238       288.238    
  69  0.641751     -0.443555     -0.215432E-06  0.215432E-06   284.668       284.668    
loop,thermsimp(1:2)       47  0.455109E-06  0.551167E-06

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    272        273.24          1.00          0.36         13.95          5.81          0.01         21.12
Just calling func    0   0         21.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.485694E-06           239
loop is:       47
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.485694E-06           239
loop is:       48
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.145708E-06           249

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      249
neval,tstepnext:      271     249

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835565     -0.179647     -0.261760E-07  0.261760E-07   237.130       237.130    
   2  0.367801      -1.00021     -0.145739E-06  0.145739E-06   259.039       259.039    
   3  0.353597      -1.03960     -0.151478E-06  0.151478E-06   261.176       261.176    
   4  0.435971     -0.830179     -0.120964E-06  0.120964E-06   263.426       263.426    
   5  0.692255     -0.367801     -0.535916E-07  0.535916E-07   266.097       266.097    
   6  0.579005     -0.546445     -0.796215E-07  0.796215E-07   266.675       266.675    
   7  0.898801     -0.106693     -0.155461E-07  0.155461E-07   267.113       267.113    
   8  0.933036     -0.693113E-01 -0.100992E-07  0.100992E-07   267.611       267.611    
   9  0.582991     -0.539583     -0.786217E-07  0.786217E-07   269.138       269.138    
  10  0.801799     -0.220897     -0.321865E-07  0.321865E-07   269.233       269.233    
  11  0.145560      -1.92717     -0.280804E-06  0.280804E-06   269.269       269.269    
  12  0.781410     -0.246655     -0.359397E-07  0.359397E-07   269.621       269.621    
  13  0.365953      -1.00525     -0.146473E-06  0.146473E-06   269.659       269.659    
  14  0.726409     -0.319642     -0.465745E-07  0.465745E-07   269.851       269.851    
  15  0.472360E-01  -3.05260     -0.444789E-06  0.444789E-06   270.165       270.165    
  16  0.401676     -0.912110     -0.132902E-06  0.132902E-06   270.639       270.639    
  17  0.269185      -1.31236     -0.191221E-06  0.191221E-06   270.677       270.677    
  18  0.622348     -0.474255     -0.691029E-07  0.691029E-07   270.806       270.806    
  19  0.258481      -1.35293     -0.197134E-06  0.197134E-06   271.126       271.126    
  20  0.341796      -1.07354     -0.156424E-06  0.156424E-06   271.206       271.206    
  21  0.584220     -0.537478     -0.783150E-07  0.783150E-07   271.285       271.285    
  22  0.635160     -0.453878     -0.661338E-07  0.661338E-07   271.571       271.571    
  23  0.613838     -0.488024     -0.711091E-07  0.711091E-07   271.704       271.704    
  24  0.505501     -0.682205     -0.994029E-07  0.994029E-07   271.739       271.739    
  25  0.619088     -0.479508     -0.698683E-07  0.698683E-07   271.782       271.782    
  26  0.285508      -1.25348     -0.182643E-06  0.182643E-06   271.918       271.918    
  27  0.135677      -1.99748     -0.291050E-06  0.291050E-06   271.918       271.918    
  28  0.151780      -1.88532     -0.274707E-06  0.274707E-06   271.964       271.964    
  29  0.423722     -0.858677     -0.125116E-06  0.125116E-06   272.011       272.011    
  30  0.657163     -0.419823     -0.611717E-07  0.611717E-07   272.030       272.030    
  31  0.856541     -0.154853     -0.225634E-07  0.225634E-07   272.312       272.312    
  32  0.173685      -1.75051     -0.255064E-06  0.255064E-06   272.494       272.494    
  33  0.489815     -0.713727     -0.103996E-06  0.103996E-06   272.743       272.743    
  34  0.272845      -1.29885     -0.189254E-06  0.189254E-06   273.095       273.095    
  35  0.254050      -1.37022     -0.199653E-06  0.199653E-06   273.130       273.130    
  36  0.701554     -0.354457     -0.516473E-07  0.516473E-07   273.221       273.221    
  37  0.655909     -0.421734     -0.614501E-07  0.614501E-07   273.762       273.762    
  38  0.952263     -0.489141E-01 -0.712718E-08  0.712718E-08   273.822       273.822    
  39  0.636608     -0.451601     -0.658020E-07  0.658020E-07   274.263       274.263    
  40  0.690821     -0.369875     -0.538939E-07  0.538939E-07   274.266       274.266    
  41  0.367354E-01  -3.30401     -0.481422E-06  0.481422E-06   274.313       274.313    
  42  0.168368E-01  -4.08419     -0.595100E-06  0.595100E-06   274.417       274.417    
  43  0.611903     -0.491182     -0.715693E-07  0.715693E-07   275.037       275.037    
  44  0.746829     -0.291919     -0.425350E-07  0.425350E-07   275.085       275.085    
  45  0.774778     -0.255179     -0.371817E-07  0.371817E-07   275.418       275.418    
  46  0.934787     -0.674371E-01 -0.982614E-08  0.982614E-08   275.998       275.998    
  47  0.762218     -0.271523     -0.395631E-07  0.395631E-07   277.233       277.233    
  48  0.351507      -1.04552     -0.152342E-06  0.152342E-06   277.653       277.653    
  49  0.347479      -1.05705     -0.154021E-06  0.154021E-06   277.753       277.753    
  50  0.528728     -0.637282     -0.928572E-07  0.928572E-07   277.934       277.934    
  51  0.648016     -0.433840     -0.632141E-07  0.632141E-07   278.219       278.219    
  52  0.926669     -0.761589E-01 -0.110970E-07  0.110970E-07   278.382       278.382    
  53  0.820077     -0.198357     -0.289023E-07  0.289023E-07   278.652       278.652    
  54  0.925230     -0.777130E-01 -0.113234E-07  0.113234E-07   278.658       278.658    
  55  0.680874     -0.384378     -0.560071E-07  0.560071E-07   278.991       278.991    
  56  0.551824     -0.594527     -0.866275E-07  0.866275E-07   279.148       279.148    
  57  0.298919      -1.20758     -0.175955E-06  0.175955E-06   281.217       281.217    
  58  0.772435     -0.258207     -0.376230E-07  0.376230E-07   281.462       281.462    
  59  0.598244     -0.513757     -0.748587E-07  0.748587E-07   281.581       281.581    
  60  0.879394     -0.128522     -0.187268E-07  0.187268E-07   281.869       281.869    
  61  0.974971     -0.253472E-01 -0.369330E-08  0.369330E-08   281.929       281.929    
  62  0.900623     -0.104669     -0.152511E-07  0.152511E-07   283.390       283.390    
  63  0.449741     -0.799083     -0.116433E-06  0.116433E-06   283.582       283.582    
  64  0.481856     -0.730109     -0.106383E-06  0.106383E-06   284.111       284.111    
  65  0.123572      -2.09093     -0.304667E-06  0.304667E-06   284.668       284.668    
  66  0.518319     -0.657165     -0.957543E-07  0.957543E-07   285.327       285.327    
  67  0.322079      -1.13296     -0.165081E-06  0.165081E-06   286.288       286.288    
  68  0.575975     -0.551691     -0.803859E-07  0.803859E-07   286.435       286.435    
  69  0.944761     -0.568231E-01 -0.827960E-08  0.827960E-08   273.239       273.239    
loop,thermsimp(1:2)       48  0.261760E-07  0.145739E-06

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273        283.55          1.00          0.36         14.01          5.81          0.01         21.20
Just calling func    0   0         21.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    283.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.145708E-06           249
loop is:       48
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.145708E-06           249
loop is:       49
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.437125E-07           259

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      259
neval,tstepnext:      272     259

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.177332      -1.72973     -0.756109E-07  0.756109E-07   237.130       237.130    
   2  0.165734      -1.79737     -0.785675E-07  0.785675E-07   259.039       259.039    
   3  0.748950     -0.289082     -0.126365E-07  0.126365E-07   261.176       261.176    
   4  0.334399      -1.09542     -0.478835E-07  0.478835E-07   263.426       263.426    
   5  0.931000     -0.714958E-01 -0.312526E-08  0.312526E-08   266.097       266.097    
   6  0.272357      -1.30064     -0.568543E-07  0.568543E-07   266.675       266.675    
   7  0.923436E-01  -2.38224     -0.104134E-06  0.104134E-06   267.113       267.113    
   8  0.938651     -0.633118E-01 -0.276752E-08  0.276752E-08   267.611       267.611    
   9  0.500129     -0.692890     -0.302879E-07  0.302879E-07   269.138       269.138    
  10  0.126059      -2.07100     -0.905287E-07  0.905287E-07   269.233       269.233    
  11  0.963370     -0.373180E-01 -0.163126E-08  0.163126E-08   269.269       269.269    
  12  0.687551     -0.374619     -0.163755E-07  0.163755E-07   269.621       269.621    
  13  0.527679     -0.639267     -0.279440E-07  0.279440E-07   269.659       269.659    
  14  0.809617     -0.211194     -0.923181E-08  0.923181E-08   269.851       269.851    
  15  0.854796     -0.156892     -0.685814E-08  0.685814E-08   270.165       270.165    
  16  0.301268      -1.19975     -0.524442E-07  0.524442E-07   270.639       270.639    
  17  0.768095     -0.263842     -0.115332E-07  0.115332E-07   270.677       270.677    
  18  0.838834     -0.175743     -0.768215E-08  0.768215E-08   270.806       270.806    
  19  0.924586     -0.784091E-01 -0.342746E-08  0.342746E-08   271.126       271.126    
  20  0.608549     -0.496678     -0.217110E-07  0.217110E-07   271.206       271.206    
  21  0.498368     -0.696417     -0.304421E-07  0.304421E-07   271.285       271.285    
  22  0.582459E-01  -2.84308     -0.124278E-06  0.124278E-06   271.571       271.571    
  23  0.903057     -0.101969     -0.445734E-08  0.445734E-08   271.704       271.704    
  24  0.433295     -0.836337     -0.365584E-07  0.365584E-07   271.739       271.739    
  25  0.500316     -0.692515     -0.302715E-07  0.302715E-07   271.782       271.782    
  26  0.256857E-01  -3.66182     -0.160067E-06  0.160067E-06   271.918       271.918    
  27  0.188202      -1.67024     -0.730103E-07  0.730103E-07   271.918       271.918    
  28  0.252615      -1.37589     -0.601435E-07  0.601435E-07   271.964       271.964    
  29  0.716433     -0.333471     -0.145769E-07  0.145769E-07   272.011       272.011    
  30  0.666067     -0.406365     -0.177632E-07  0.177632E-07   272.030       272.030    
  31  0.709945     -0.342568     -0.149745E-07  0.149745E-07   272.312       272.312    
  32  0.674158     -0.394291     -0.172354E-07  0.172354E-07   272.494       272.494    
  33  0.785701     -0.241179     -0.105425E-07  0.105425E-07   272.743       272.743    
  34  0.415863     -0.877400     -0.383533E-07  0.383533E-07   273.095       273.095    
  35  0.570265     -0.561653     -0.245513E-07  0.245513E-07   273.130       273.130    
  36  0.821393     -0.196754     -0.860060E-08  0.860060E-08   273.221       273.221    
  37  0.812901E-01  -2.50973     -0.109707E-06  0.109707E-06   273.239       273.239    
  38  0.342466      -1.07158     -0.468416E-07  0.468416E-07   273.762       273.762    
  39  0.643292     -0.441156     -0.192840E-07  0.192840E-07   273.822       273.822    
  40  0.790552     -0.235024     -0.102735E-07  0.102735E-07   274.263       274.263    
  41  0.258361      -1.35340     -0.591604E-07  0.591604E-07   274.266       274.266    
  42  0.775658     -0.254043     -0.111049E-07  0.111049E-07   274.313       274.313    
  43  0.330637      -1.10674     -0.483781E-07  0.483781E-07   274.417       274.417    
  44  0.645458     -0.437796     -0.191371E-07  0.191371E-07   275.037       275.037    
  45  0.230014      -1.46962     -0.642406E-07  0.642406E-07   275.085       275.085    
  46  0.815259E-01  -2.50683     -0.109580E-06  0.109580E-06   275.418       275.418    
  47  0.996685     -0.332073E-02 -0.145157E-09  0.145157E-09   275.998       275.998    
  48  0.899386     -0.106042     -0.463538E-08  0.463538E-08   277.233       277.233    
  49  0.781958     -0.245955     -0.107513E-07  0.107513E-07   277.653       277.653    
  50  0.563373     -0.573813     -0.250828E-07  0.250828E-07   277.753       277.753    
  51  0.222039      -1.50490     -0.657830E-07  0.657830E-07   277.934       277.934    
  52  0.192697      -1.64664     -0.719786E-07  0.719786E-07   278.219       278.219    
  53  0.217011      -1.52781     -0.667843E-07  0.667843E-07   278.382       278.382    
  54  0.721598     -0.326286     -0.142628E-07  0.142628E-07   278.652       278.652    
  55  0.814856     -0.204744     -0.894987E-08  0.894987E-08   278.658       278.658    
  56  0.573589     -0.555843     -0.242973E-07  0.242973E-07   278.991       278.991    
  57  0.841361     -0.172734     -0.755065E-08  0.755065E-08   279.148       279.148    
  58  0.793071     -0.231843     -0.101344E-07  0.101344E-07   281.217       281.217    
  59  0.176620      -1.73376     -0.757867E-07  0.757867E-07   281.462       281.462    
  60  0.865753     -0.144155     -0.630139E-08  0.630139E-08   281.581       281.581    
  61  0.938360     -0.636215E-01 -0.278105E-08  0.278105E-08   281.869       281.869    
  62  0.112708E-02  -6.78812     -0.296726E-06  0.296726E-06   281.929       281.929    
  63  0.882603     -0.124880     -0.545881E-08  0.545881E-08   283.390       283.390    
  64  0.681223     -0.383866     -0.167797E-07  0.167797E-07   283.582       283.582    
  65  0.245747      -1.40345     -0.613485E-07  0.613485E-07   284.111       284.111    
  66  0.989501     -0.105540E-01 -0.461343E-09  0.461343E-09   284.668       284.668    
  67  0.199945      -1.60971     -0.703646E-07  0.703646E-07   285.327       285.327    
  68  0.921414     -0.818461E-01 -0.357770E-08  0.357770E-08   286.288       286.288    
  69  0.144953      -1.93135     -0.844240E-07  0.844240E-07   283.552       283.552    
loop,thermsimp(1:2)       49  0.756109E-07  0.785675E-07

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274        289.05          1.00          0.37         14.02          5.69          0.02         21.09
Just calling func    0   0         21.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    275        280.55          1.00          0.36         13.98          5.74          0.01         21.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    280.55
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.437125E-07           259
loop is:       49
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.437125E-07           259
loop is:       50
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.131137E-07           269

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      269
neval,tstepnext:      274     269

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.896924E-01  -2.41137     -0.316221E-07  0.316221E-07   237.130       237.130    
   2  0.242407      -1.41714     -0.185840E-07  0.185840E-07   259.039       259.039    
   3  0.862207     -0.148260     -0.194424E-08  0.194424E-08   261.176       261.176    
   4  0.260183      -1.34637     -0.176559E-07  0.176559E-07   263.426       263.426    
   5  0.884536     -0.122693     -0.160896E-08  0.160896E-08   266.097       266.097    
   6  0.740291     -0.300712     -0.394346E-08  0.394346E-08   266.675       266.675    
   7  0.764006     -0.269180     -0.352996E-08  0.352996E-08   267.113       267.113    
   8  0.951581     -0.496305E-01 -0.650842E-09  0.650842E-09   267.611       267.611    
   9  0.745631     -0.293524     -0.384920E-08  0.384920E-08   269.138       269.138    
  10  0.198396      -1.61749     -0.212114E-07  0.212114E-07   269.233       269.233    
  11  0.830561     -0.185654     -0.243462E-08  0.243462E-08   269.269       269.269    
  12  0.413461     -0.883193     -0.115820E-07  0.115820E-07   269.621       269.621    
  13  0.570564     -0.561129     -0.735851E-08  0.735851E-08   269.659       269.659    
  14  0.803951     -0.218217     -0.286165E-08  0.286165E-08   269.851       269.851    
  15  0.846756E-01  -2.46893     -0.323769E-07  0.323769E-07   270.165       270.165    
  16  0.113273      -2.17795     -0.285611E-07  0.285611E-07   270.639       270.639    
  17  0.190313E-01  -3.96167     -0.519523E-07  0.519523E-07   270.677       270.677    
  18  0.282245      -1.26498     -0.165886E-07  0.165886E-07   270.806       270.806    
  19  0.577125     -0.549697     -0.720858E-08  0.720858E-08   271.126       271.126    
  20  0.387620     -0.947731     -0.124283E-07  0.124283E-07   271.206       271.206    
  21  0.113846E-01  -4.47549     -0.586905E-07  0.586905E-07   271.285       271.285    
  22  0.688614     -0.373074     -0.489240E-08  0.489240E-08   271.571       271.571    
  23  0.348182E-01  -3.35762     -0.440309E-07  0.440309E-07   271.704       271.704    
  24  0.907581     -0.969727E-01 -0.127168E-08  0.127168E-08   271.739       271.739    
  25  0.568152     -0.565367     -0.741407E-08  0.741407E-08   271.782       271.782    
  26  0.361643      -1.01710     -0.133380E-07  0.133380E-07   271.918       271.918    
  27  0.909322E-01  -2.39764     -0.314421E-07  0.314421E-07   271.918       271.918    
  28  0.692165     -0.367930     -0.482494E-08  0.482494E-08   271.964       271.964    
  29  0.172643      -1.75653     -0.230347E-07  0.230347E-07   272.011       272.011    
  30  0.403156     -0.908431     -0.119129E-07  0.119129E-07   272.030       272.030    
  31  0.848536     -0.164243     -0.215384E-08  0.215384E-08   272.312       272.312    
  32  0.312875      -1.16195     -0.152375E-07  0.152375E-07   272.494       272.494    
  33  0.590789     -0.526296     -0.690171E-08  0.690171E-08   272.743       272.743    
  34  0.774301     -0.255795     -0.335443E-08  0.335443E-08   273.095       273.095    
  35  0.644110     -0.439886     -0.576855E-08  0.576855E-08   273.130       273.130    
  36  0.646395     -0.436344     -0.572211E-08  0.572211E-08   273.221       273.221    
  37  0.194915      -1.63519     -0.214435E-07  0.214435E-07   273.239       273.239    
  38  0.335570      -1.09193     -0.143192E-07  0.143192E-07   273.762       273.762    
  39  0.405315     -0.903090     -0.118429E-07  0.118429E-07   273.822       273.822    
  40  0.984032     -0.160968E-01 -0.211089E-09  0.211089E-09   274.263       274.263    
  41  0.801221     -0.221619     -0.290625E-08  0.290625E-08   274.266       274.266    
  42  0.875568     -0.132883     -0.174259E-08  0.174259E-08   274.313       274.313    
  43  0.761196     -0.272865     -0.357828E-08  0.357828E-08   274.417       274.417    
  44  0.218737      -1.51988     -0.199314E-07  0.199314E-07   275.037       275.037    
  45  0.464621     -0.766532     -0.100521E-07  0.100521E-07   275.085       275.085    
  46  0.693530     -0.365960     -0.479911E-08  0.479911E-08   275.418       275.418    
  47  0.843908     -0.169712     -0.222556E-08  0.222556E-08   275.998       275.998    
  48  0.490362     -0.712611     -0.934499E-08  0.934499E-08   277.233       277.233    
  49  0.108775      -2.21847     -0.290925E-07  0.290925E-07   277.653       277.653    
  50  0.941047     -0.607625E-01 -0.796824E-09  0.796824E-09   277.753       277.753    
  51  0.902096     -0.103035     -0.135117E-08  0.135117E-08   277.934       277.934    
  52  0.885932     -0.121115     -0.158827E-08  0.158827E-08   278.219       278.219    
  53  0.708360     -0.344803     -0.452166E-08  0.452166E-08   278.382       278.382    
  54  0.497708     -0.697741     -0.915000E-08  0.915000E-08   278.652       278.652    
  55  0.307611      -1.17892     -0.154600E-07  0.154600E-07   278.658       278.658    
  56  0.488278     -0.716871     -0.940086E-08  0.940086E-08   278.991       278.991    
  57  0.904642     -0.100216     -0.131420E-08  0.131420E-08   279.148       279.148    
  58  0.925270     -0.776698E-01 -0.101854E-08  0.101854E-08   281.217       281.217    
  59  0.133410      -2.01433     -0.264154E-07  0.264154E-07   281.462       281.462    
  60  0.645874     -0.437151     -0.573269E-08  0.573269E-08   281.581       281.581    
  61  0.558915     -0.581758     -0.762903E-08  0.762903E-08   281.869       281.869    
  62  0.241487      -1.42094     -0.186338E-07  0.186338E-07   281.929       281.929    
  63  0.655281     -0.422690     -0.554306E-08  0.554306E-08   283.390       283.390    
  64  0.473090E-03  -7.65622     -0.100402E-06  0.100402E-06   283.552       283.552    
  65  0.281193E-02  -5.87388     -0.770286E-07  0.770286E-07   283.582       283.582    
  66  0.491713     -0.709860     -0.930892E-08  0.930892E-08   284.111       284.111    
  67  0.322113      -1.13285     -0.148559E-07  0.148559E-07   284.668       284.668    
  68  0.469205     -0.756715     -0.992336E-08  0.992336E-08   285.327       285.327    
  69  0.621364     -0.475838     -0.624001E-08  0.624001E-08   280.549       280.549    
loop,thermsimp(1:2)       50  0.316221E-07  0.185840E-07

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276        285.05          1.00          0.36         14.11          5.47          0.02         20.96
Just calling func    0   0         20.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    277        276.32          1.00          0.36         13.96          5.66          0.01         20.99
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    276.32
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.131137E-07           269
loop is:       50
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.131137E-07           269
loop is:       51
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.393412E-08           279

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      279
neval,tstepnext:      276     279

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332692      -1.10054     -0.432965E-08  0.432965E-08   237.130       237.130    
   2  0.130516E-01  -4.33885     -0.170696E-07  0.170696E-07   259.039       259.039    
   3  0.279446E-01  -3.57753     -0.140744E-07  0.140744E-07   261.176       261.176    
   4  0.610436     -0.493581     -0.194181E-08  0.194181E-08   263.426       263.426    
   5  0.403321     -0.908023     -0.357227E-08  0.357227E-08   266.097       266.097    
   6  0.398148     -0.920931     -0.362305E-08  0.362305E-08   266.675       266.675    
   7  0.466874     -0.761697     -0.299661E-08  0.299661E-08   267.113       267.113    
   8  0.720731     -0.327489     -0.128838E-08  0.128838E-08   267.611       267.611    
   9  0.576714     -0.550409     -0.216538E-08  0.216538E-08   269.138       269.138    
  10  0.475236     -0.743943     -0.292677E-08  0.292677E-08   269.233       269.233    
  11  0.826972     -0.189984     -0.747420E-09  0.747420E-09   269.269       269.269    
  12  0.657748     -0.418933     -0.164814E-08  0.164814E-08   269.621       269.621    
  13  0.794798     -0.229667     -0.903537E-09  0.903537E-09   269.659       269.659    
  14  0.418160     -0.871892     -0.343013E-08  0.343013E-08   269.851       269.851    
  15  0.480372     -0.733194     -0.288448E-08  0.288448E-08   270.165       270.165    
  16  0.500224     -0.692699     -0.272516E-08  0.272516E-08   270.639       270.639    
  17  0.440531     -0.819774     -0.322509E-08  0.322509E-08   270.677       270.677    
  18  0.518236     -0.657324     -0.258600E-08  0.258600E-08   270.806       270.806    
  19  0.490709     -0.711903     -0.280072E-08  0.280072E-08   271.126       271.126    
  20  0.718024     -0.331252     -0.130319E-08  0.130319E-08   271.206       271.206    
  21  0.814730     -0.204899     -0.806098E-09  0.806098E-09   271.285       271.285    
  22  0.742729     -0.297424     -0.117010E-08  0.117010E-08   271.571       271.571    
  23  0.852871E-01  -2.46173     -0.968476E-08  0.968476E-08   271.704       271.704    
  24  0.821412     -0.196731     -0.773963E-09  0.773963E-09   271.739       271.739    
  25  0.949615     -0.516987E-01 -0.203389E-09  0.203389E-09   271.782       271.782    
  26  0.389185     -0.943700     -0.371263E-08  0.371263E-08   271.918       271.918    
  27  0.519893     -0.654132     -0.257344E-08  0.257344E-08   271.918       271.918    
  28  0.860588     -0.150140     -0.590668E-09  0.590668E-09   271.964       271.964    
  29  0.747054     -0.291618     -0.114726E-08  0.114726E-08   272.011       272.011    
  30  0.334741      -1.09440     -0.430550E-08  0.430550E-08   272.030       272.030    
  31  0.852748     -0.159292     -0.626673E-09  0.626673E-09   272.312       272.312    
  32  0.926221     -0.766423E-01 -0.301520E-09  0.301520E-09   272.494       272.494    
  33  0.611210     -0.492315     -0.193683E-08  0.193683E-08   272.743       272.743    
  34  0.215339      -1.53554     -0.604102E-08  0.604102E-08   273.095       273.095    
  35  0.564390E-02  -5.17718     -0.203677E-07  0.203677E-07   273.130       273.130    
  36  0.190024      -1.66060     -0.653302E-08  0.653302E-08   273.221       273.221    
  37  0.257687E-01  -3.65860     -0.143934E-07  0.143934E-07   273.239       273.239    
  38  0.187682      -1.67301     -0.658181E-08  0.658181E-08   273.762       273.762    
  39  0.468853     -0.757466     -0.297997E-08  0.297997E-08   273.822       273.822    
  40  0.196172E-01  -3.93135     -0.154664E-07  0.154664E-07   274.263       274.263    
  41  0.431332     -0.840877     -0.330811E-08  0.330811E-08   274.266       274.266    
  42  0.992456     -0.757302E-02 -0.297932E-10  0.297932E-10   274.313       274.313    
  43  0.210782      -1.55693     -0.612516E-08  0.612516E-08   274.417       274.417    
  44  0.653208     -0.425859     -0.167538E-08  0.167538E-08   275.037       275.037    
  45  0.425730     -0.853949     -0.335954E-08  0.335954E-08   275.085       275.085    
  46  0.773165     -0.257263     -0.101211E-08  0.101211E-08   275.418       275.418    
  47  0.537747     -0.620368     -0.244060E-08  0.244060E-08   275.998       275.998    
  48  0.223427      -1.49867     -0.589595E-08  0.589595E-08   277.233       277.233    
  49  0.332002      -1.10261     -0.433782E-08  0.433782E-08   277.653       277.653    
  50  0.569352     -0.563256     -0.221592E-08  0.221592E-08   277.753       277.753    
  51  0.317893      -1.14604     -0.450867E-08  0.450867E-08   277.934       277.934    
  52  0.648508     -0.433081     -0.170380E-08  0.170380E-08   278.219       278.219    
  53  0.160654      -1.82851     -0.719357E-08  0.719357E-08   278.382       278.382    
  54  0.370628     -0.992555     -0.390483E-08  0.390483E-08   278.652       278.652    
  55  0.826427     -0.190644     -0.750015E-09  0.750015E-09   278.658       278.658    
  56  0.831244     -0.184831     -0.727150E-09  0.727150E-09   278.991       278.991    
  57  0.468744E-01  -3.06028     -0.120395E-07  0.120395E-07   279.148       279.148    
  58  0.191876      -1.65091     -0.649488E-08  0.649488E-08   280.549       280.549    
  59  0.588898E-01  -2.83209     -0.111418E-07  0.111418E-07   281.217       281.217    
  60  0.516044     -0.661563     -0.260267E-08  0.260267E-08   281.462       281.462    
  61  0.700232     -0.356343     -0.140190E-08  0.140190E-08   281.581       281.581    
  62  0.278216      -1.27936     -0.503316E-08  0.503316E-08   281.869       281.869    
  63  0.530595     -0.633756     -0.249327E-08  0.249327E-08   281.929       281.929    
  64  0.337197E-01  -3.38967     -0.133354E-07  0.133354E-07   283.390       283.390    
  65  0.520088     -0.653758     -0.257196E-08  0.257196E-08   283.552       283.552    
  66  0.196303E-01  -3.93068     -0.154638E-07  0.154638E-07   283.582       283.582    
  67  0.312965      -1.16166     -0.457013E-08  0.457013E-08   284.111       284.111    
  68  0.630936     -0.460551     -0.181186E-08  0.181186E-08   284.668       284.668    
  69  0.413920     -0.882083     -0.347022E-08  0.347022E-08   276.319       276.319    
loop,thermsimp(1:2)       51  0.432965E-08  0.170696E-07

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    278        291.20          1.00          0.36         14.00          5.82          0.02         21.20
Just calling func    0   0         21.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    279        279.10          1.00          0.36         14.05          5.66          0.01         21.07
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    279.10
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.393412E-08           279
loop is:       51
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.393412E-08           279
loop is:       52
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      279
neval,tstepnext:      278     279

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.519113     -0.655635     -0.257935E-08  0.257935E-08   237.130       237.130    
   2  0.759170     -0.275529     -0.108397E-08  0.108397E-08   259.039       259.039    
   3  0.335969E-01  -3.39332     -0.133497E-07  0.133497E-07   261.176       261.176    
   4  0.883355     -0.124028     -0.487943E-09  0.487943E-09   263.426       263.426    
   5  0.202677      -1.59614     -0.627942E-08  0.627942E-08   266.097       266.097    
   6  0.479462E-01  -3.03768     -0.119506E-07  0.119506E-07   266.675       266.675    
   7  0.673046     -0.395942     -0.155769E-08  0.155769E-08   267.113       267.113    
   8  0.207881      -1.57079     -0.617968E-08  0.617968E-08   267.611       267.611    
   9  0.223973E-01  -3.79881     -0.149450E-07  0.149450E-07   269.138       269.138    
  10  0.626767E-01  -2.76977     -0.108966E-07  0.108966E-07   269.233       269.233    
  11  0.718663     -0.330362     -0.129969E-08  0.129969E-08   269.269       269.269    
  12  0.433548     -0.835753     -0.328796E-08  0.328796E-08   269.621       269.621    
  13  0.895332     -0.110561     -0.434959E-09  0.434959E-09   269.659       269.659    
  14  0.410407     -0.890607     -0.350376E-08  0.350376E-08   269.851       269.851    
  15  0.196027      -1.62950     -0.641066E-08  0.641066E-08   270.165       270.165    
  16  0.292677E-01  -3.53127     -0.138925E-07  0.138925E-07   270.639       270.639    
  17  0.560319     -0.579249     -0.227884E-08  0.227884E-08   270.677       270.677    
  18  0.643943     -0.440145     -0.173159E-08  0.173159E-08   270.806       270.806    
  19  0.844102     -0.169482     -0.666764E-09  0.666764E-09   271.126       271.126    
  20  0.558987     -0.581629     -0.228820E-08  0.228820E-08   271.206       271.206    
  21  0.195721      -1.63107     -0.641682E-08  0.641682E-08   271.285       271.285    
  22  0.960945     -0.398385E-01 -0.156730E-09  0.156730E-09   271.571       271.571    
  23  0.233208      -1.45582     -0.572739E-08  0.572739E-08   271.704       271.704    
  24  0.393956     -0.931515     -0.366470E-08  0.366470E-08   271.739       271.739    
  25  0.735638     -0.307018     -0.120785E-08  0.120785E-08   271.782       271.782    
  26  0.361029      -1.01880     -0.400808E-08  0.400808E-08   271.918       271.918    
  27  0.482442     -0.728896     -0.286757E-08  0.286757E-08   271.918       271.918    
  28  0.636244     -0.452173     -0.177890E-08  0.177890E-08   271.964       271.964    
  29  0.931594     -0.708578E-01 -0.278763E-09  0.278763E-09   272.011       272.011    
  30  0.470130     -0.754747     -0.296927E-08  0.296927E-08   272.030       272.030    
  31  0.194224      -1.63874     -0.644702E-08  0.644702E-08   272.312       272.312    
  32  0.162757      -1.81550     -0.714240E-08  0.714240E-08   272.494       272.494    
  33  0.861617     -0.148944     -0.585966E-09  0.585966E-09   272.743       272.743    
  34  0.572954     -0.556949     -0.219111E-08  0.219111E-08   273.095       273.095    
  35  0.711507     -0.340371     -0.133906E-08  0.133906E-08   273.130       273.130    
  36  0.704821E-01  -2.65240     -0.104349E-07  0.104349E-07   273.221       273.221    
  37  0.686294     -0.376449     -0.148100E-08  0.148100E-08   273.239       273.239    
  38  0.962774     -0.379368E-01 -0.149248E-09  0.149248E-09   273.762       273.762    
  39  0.811671     -0.208660     -0.820894E-09  0.820894E-09   273.822       273.822    
  40  0.750264     -0.287330     -0.113039E-08  0.113039E-08   274.263       274.263    
  41  0.581065     -0.542893     -0.213581E-08  0.213581E-08   274.266       274.266    
  42  0.791630     -0.233661     -0.919251E-09  0.919251E-09   274.313       274.313    
  43  0.193117      -1.64446     -0.646950E-08  0.646950E-08   274.417       274.417    
  44  0.937476     -0.645642E-01 -0.254004E-09  0.254004E-09   275.037       275.037    
  45  0.119588      -2.12370     -0.835490E-08  0.835490E-08   275.085       275.085    
  46  0.730249     -0.314369     -0.123677E-08  0.123677E-08   275.418       275.418    
  47  0.261139      -1.34270     -0.528236E-08  0.528236E-08   275.998       275.998    
  48  0.333713E-01  -3.40006     -0.133763E-07  0.133763E-07   276.319       276.319    
  49  0.875465     -0.133000     -0.523239E-09  0.523239E-09   277.233       277.233    
  50  0.811499     -0.208872     -0.821730E-09  0.821730E-09   277.653       277.653    
  51  0.485193     -0.723208     -0.284519E-08  0.284519E-08   277.753       277.753    
  52  0.709287     -0.343496     -0.135135E-08  0.135135E-08   277.934       277.934    
  53  0.552301     -0.593663     -0.233554E-08  0.233554E-08   278.219       278.219    
  54  0.506813     -0.679613     -0.267368E-08  0.267368E-08   278.382       278.382    
  55  0.971828     -0.285765E-01 -0.112423E-09  0.112423E-09   278.652       278.652    
  56  0.848509     -0.164275     -0.646276E-09  0.646276E-09   278.658       278.658    
  57  0.757170     -0.278168     -0.109435E-08  0.109435E-08   278.991       278.991    
  58  0.265428      -1.32641     -0.521826E-08  0.521826E-08   279.148       279.148    
  59  0.450695     -0.796964     -0.313536E-08  0.313536E-08   280.549       280.549    
  60  0.876363     -0.131975     -0.519206E-09  0.519206E-09   281.217       281.217    
  61  0.250168E-01  -3.68821     -0.145099E-07  0.145099E-07   281.462       281.462    
  62  0.571763E-01  -2.86162     -0.112580E-07  0.112580E-07   281.581       281.581    
  63  0.236054      -1.44369     -0.567967E-08  0.567967E-08   281.869       281.869    
  64  0.728724E-01  -2.61905     -0.103037E-07  0.103037E-07   281.929       281.929    
  65  0.560169     -0.579518     -0.227989E-08  0.227989E-08   283.390       283.390    
  66  0.418727     -0.870537     -0.342480E-08  0.342480E-08   283.552       283.552    
  67  0.656596     -0.420687     -0.165503E-08  0.165503E-08   283.582       283.582    
  68  0.649451     -0.431627     -0.169808E-08  0.169808E-08   284.111       284.111    
  69  0.207828      -1.57105     -0.618069E-08  0.618069E-08   279.096       279.096    
loop,thermsimp(1:2)       52  0.257935E-08  0.108397E-08

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    280        292.99          1.00          0.36         14.12          5.67          0.02         21.16
Just calling func    0   0         21.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    281        270.97          1.00          0.36         13.99          5.75          0.01         21.11
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    270.97        1.846    -0.9737      3.346     -100.0     0.2671    
                     -0.7918     0.4783     -100.0      2.261     -1.234    
                     -0.7388     -2.717      2.009      0.000     0.6600    
                      -1.217     -20.00      0.000      0.000     -1.221    

                      -1.600      6595.      8941.     -485.3     -1451.    
                      -4.215     -5.238     -4.057     -15.33     -5.168    
                      -13.58     -2.674     -3631.      0.000     -1635.    

                      -225.6      3276.      83.55      339.6      2491.    
                      -691.0     0.1530E-02-0.8919E-01  0.000    -0.1525    
                     -0.1777    -0.1380    -0.1564    -0.9318E-01-0.4122E-01

                     -0.7535     -2.813      1.382     0.1731     0.2505E-01
                      0.8499E-01-0.2679E-01-0.8149E-01-0.2945E-01-0.6967E-01
                     -0.8036E-01 0.6652E-01-0.2624     -3.111      1.382    

                      -1.635     -1.392      3749.      2910.      0.000    
                       0.000      8.891      8.891      0.000     0.1000    
                      0.1314     0.1314      9.091      8.891     -111.2    

                      0.1000     0.1314     0.1314      9.791      9.091    
                      -556.1     0.1000    -0.5686     0.1314      9.391    
                       9.191      8072.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    270.97
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.393412E-08           279
loop is:       52
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.393412E-08           279
loop is:       53
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.118024E-08           289

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      280     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244773      -1.40742     -0.166109E-08  0.166109E-08   237.130       237.130    
   2  0.691706     -0.368594     -0.435029E-09  0.435029E-09   259.039       259.039    
   3  0.731469     -0.312701     -0.369061E-09  0.369061E-09   261.176       261.176    
   4  0.849032     -0.163658     -0.193155E-09  0.193155E-09   263.426       263.426    
   5  0.608630     -0.496545     -0.586041E-09  0.586041E-09   266.097       266.097    
   6  0.589382     -0.528681     -0.623969E-09  0.623969E-09   266.675       266.675    
   7  0.274152      -1.29407     -0.152731E-08  0.152731E-08   267.113       267.113    
   8  0.548721     -0.600165     -0.708337E-09  0.708337E-09   267.611       267.611    
   9  0.702011     -0.353807     -0.417576E-09  0.417576E-09   269.138       269.138    
  10  0.979459     -0.207549E-01 -0.244957E-10  0.244957E-10   269.233       269.233    
  11  0.606097     -0.500715     -0.590963E-09  0.590963E-09   269.269       269.269    
  12  0.450347     -0.797736     -0.941517E-09  0.941517E-09   269.621       269.621    
  13  0.824475     -0.193009     -0.227796E-09  0.227796E-09   269.659       269.659    
  14  0.963349     -0.373392E-01 -0.440691E-10  0.440691E-10   269.851       269.851    
  15  0.451787     -0.794544     -0.937750E-09  0.937750E-09   270.165       270.165    
  16  0.836612     -0.178395     -0.210548E-09  0.210548E-09   270.639       270.639    
  17  0.183718      -1.69435     -0.199974E-08  0.199974E-08   270.677       270.677    
  18  0.492383     -0.708499     -0.836197E-09  0.836197E-09   270.806       270.806    
  19  0.727862     -0.317644     -0.374895E-09  0.374895E-09   271.126       271.126    
  20  0.992523     -0.750474E-02 -0.885737E-11  0.885737E-11   271.206       271.206    
  21  0.564844     -0.571205     -0.674158E-09  0.674158E-09   271.285       271.285    
  22  0.902312E-02  -4.70797     -0.555652E-08  0.555652E-08   271.571       271.571    
  23  0.195582      -1.63178     -0.192588E-08  0.192588E-08   271.704       271.704    
  24  0.694184     -0.365019     -0.430809E-09  0.430809E-09   271.739       271.739    
  25  0.480679     -0.732555     -0.864589E-09  0.864589E-09   271.782       271.782    
  26  0.408878     -0.894338     -0.105553E-08  0.105553E-08   271.918       271.918    
  27  0.481986     -0.729839     -0.861384E-09  0.861384E-09   271.918       271.918    
  28  0.441798     -0.816901     -0.964137E-09  0.964137E-09   271.964       271.964    
  29  0.803210     -0.219139     -0.258636E-09  0.258636E-09   272.011       272.011    
  30  0.317114      -1.14850     -0.135550E-08  0.135550E-08   272.030       272.030    
  31  0.777464     -0.251718     -0.297086E-09  0.297086E-09   272.312       272.312    
  32  0.831778     -0.184190     -0.217388E-09  0.217388E-09   272.494       272.494    
  33  0.145090      -1.93040     -0.227833E-08  0.227833E-08   272.743       272.743    
  34  0.696656     -0.361463     -0.426613E-09  0.426613E-09   273.095       273.095    
  35  0.459341     -0.777962     -0.918180E-09  0.918180E-09   273.130       273.130    
  36  0.649597     -0.431403     -0.509158E-09  0.509158E-09   273.221       273.221    
  37  0.156752      -1.85309     -0.218709E-08  0.218709E-08   273.239       273.239    
  38  0.121439      -2.10835     -0.248835E-08  0.248835E-08   273.762       273.762    
  39  0.867491     -0.142151     -0.167771E-09  0.167771E-09   273.822       273.822    
  40  0.341222      -1.07522     -0.126902E-08  0.126902E-08   274.263       274.263    
  41  0.611414     -0.491980     -0.580654E-09  0.580654E-09   274.266       274.266    
  42  0.174043      -1.74845     -0.206359E-08  0.206359E-08   274.313       274.313    
  43  0.733051     -0.310540     -0.366511E-09  0.366511E-09   274.417       274.417    
  44  0.713415     -0.337692     -0.398557E-09  0.398557E-09   275.037       275.037    
  45  0.309104      -1.17408     -0.138569E-08  0.138569E-08   275.085       275.085    
  46  0.713034     -0.338226     -0.399187E-09  0.399187E-09   275.418       275.418    
  47  0.261682      -1.34063     -0.158226E-08  0.158226E-08   275.998       275.998    
  48  0.269929      -1.30959     -0.154563E-08  0.154563E-08   276.319       276.319    
  49  0.661913     -0.412621     -0.486990E-09  0.486990E-09   277.233       277.233    
  50  0.375350     -0.979897     -0.115651E-08  0.115651E-08   277.653       277.653    
  51  0.670595E-01  -2.70217     -0.318921E-08  0.318921E-08   277.753       277.753    
  52  0.396689E-01  -3.22719     -0.380885E-08  0.380885E-08   277.934       277.934    
  53  0.706203     -0.347853     -0.410549E-09  0.410549E-09   278.219       278.219    
  54  0.644650     -0.439048     -0.518180E-09  0.518180E-09   278.382       278.382    
  55  0.211684E-01  -3.85525     -0.455011E-08  0.455011E-08   278.652       278.652    
  56  0.987004     -0.130812E-01 -0.154389E-10  0.154389E-10   278.658       278.658    
  57  0.649403     -0.431702     -0.509511E-09  0.509511E-09   278.991       278.991    
  58  0.911830E-01  -2.39489     -0.282653E-08  0.282653E-08   279.096       279.096    
  59  0.110006      -2.20722     -0.260504E-08  0.260504E-08   279.148       279.148    
  60  0.350613      -1.04807     -0.123697E-08  0.123697E-08   280.549       280.549    
  61  0.283259      -1.26139     -0.148874E-08  0.148874E-08   281.217       281.217    
  62  0.648649     -0.432864     -0.510882E-09  0.510882E-09   281.462       281.462    
  63  0.418953     -0.869998     -0.102680E-08  0.102680E-08   281.581       281.581    
  64  0.812040E-02  -4.81338     -0.568092E-08  0.568092E-08   281.869       281.869    
  65  0.730337     -0.314249     -0.370888E-09  0.370888E-09   281.929       281.929    
  66  0.435180     -0.831996     -0.981952E-09  0.981952E-09   283.390       283.390    
  67  0.263402      -1.33407     -0.157452E-08  0.157452E-08   283.552       283.552    
  68  0.691682     -0.368628     -0.435069E-09  0.435069E-09   283.582       283.582    
  69  0.635409     -0.453487     -0.535222E-09  0.535222E-09   270.974       270.974    
loop,thermsimp(1:2)       53  0.166109E-08  0.435029E-09

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282        290.12          1.00          0.36         14.07          5.67          0.02         21.12
Just calling func    0   0         21.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    283        274.14          1.00          0.36         14.02          5.73          0.01         21.12
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    274.14
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       53
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       54
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      282     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190910      -1.65595     -0.195442E-08  0.195442E-08   237.130       237.130    
   2  0.101598      -2.28673     -0.269888E-08  0.269888E-08   259.039       259.039    
   3  0.596133     -0.517291     -0.610526E-09  0.610526E-09   261.176       261.176    
   4  0.924740     -0.782429E-01 -0.923452E-10  0.923452E-10   263.426       263.426    
   5  0.474843     -0.744771     -0.879006E-09  0.879006E-09   266.097       266.097    
   6  0.798807     -0.224636     -0.265124E-09  0.265124E-09   266.675       266.675    
   7  0.638754     -0.448236     -0.529025E-09  0.529025E-09   267.113       267.113    
   8  0.138884      -1.97412     -0.232993E-08  0.232993E-08   267.611       267.611    
   9  0.672584     -0.396629     -0.468116E-09  0.468116E-09   269.138       269.138    
  10  0.148188      -1.90927     -0.225339E-08  0.225339E-08   269.233       269.233    
  11  0.802318     -0.220250     -0.259948E-09  0.259948E-09   269.269       269.269    
  12  0.862062     -0.148428     -0.175181E-09  0.175181E-09   269.621       269.621    
  13  0.401652     -0.912170     -0.107658E-08  0.107658E-08   269.659       269.659    
  14  0.820556     -0.197773     -0.233419E-09  0.233419E-09   269.851       269.851    
  15  0.937273     -0.647804E-01 -0.764562E-10  0.764562E-10   270.165       270.165    
  16  0.843504     -0.170190     -0.200865E-09  0.200865E-09   270.639       270.639    
  17  0.353061      -1.04112     -0.122876E-08  0.122876E-08   270.677       270.677    
  18  0.494115     -0.704987     -0.832052E-09  0.832052E-09   270.806       270.806    
  19  0.845425     -0.167916     -0.198181E-09  0.198181E-09   270.974       270.974    
  20  0.596773     -0.516218     -0.609259E-09  0.609259E-09   271.126       271.126    
  21  0.925774     -0.771251E-01 -0.910259E-10  0.910259E-10   271.206       271.206    
  22  0.909915     -0.944041E-01 -0.111419E-09  0.111419E-09   271.285       271.285    
  23  0.936467     -0.656406E-01 -0.774715E-10  0.774715E-10   271.571       271.571    
  24  0.359085      -1.02420     -0.120880E-08  0.120880E-08   271.704       271.704    
  25  0.750324     -0.287250     -0.339023E-09  0.339023E-09   271.739       271.739    
  26  0.446070     -0.807279     -0.952781E-09  0.952781E-09   271.782       271.782    
  27  0.208697      -1.56687     -0.184928E-08  0.184928E-08   271.918       271.918    
  28  0.141390      -1.95623     -0.230882E-08  0.230882E-08   271.918       271.918    
  29  0.109611      -2.21082     -0.260929E-08  0.260929E-08   271.964       271.964    
  30  0.305445      -1.18599     -0.139974E-08  0.139974E-08   272.011       272.011    
  31  0.681653     -0.383234     -0.452307E-09  0.452307E-09   272.030       272.030    
  32  0.497942     -0.697271     -0.822945E-09  0.822945E-09   272.312       272.312    
  33  0.657154     -0.419837     -0.495507E-09  0.495507E-09   272.494       272.494    
  34  0.882131E-01  -2.42800     -0.286562E-08  0.286562E-08   272.743       272.743    
  35  0.341959      -1.07306     -0.126647E-08  0.126647E-08   273.095       273.095    
  36  0.722087     -0.325610     -0.384296E-09  0.384296E-09   273.130       273.130    
  37  0.710371     -0.341967     -0.403603E-09  0.403603E-09   273.221       273.221    
  38  0.876950     -0.131305     -0.154971E-09  0.154971E-09   273.239       273.239    
  39  0.740770E-01  -2.60265     -0.307174E-08  0.307174E-08   273.762       273.762    
  40  0.176034      -1.73708     -0.205016E-08  0.205016E-08   273.822       273.822    
  41  0.864658     -0.145421     -0.171632E-09  0.171632E-09   274.263       274.263    
  42  0.172847      -1.75535     -0.207173E-08  0.207173E-08   274.266       274.266    
  43  0.830366     -0.185889     -0.219393E-09  0.219393E-09   274.313       274.313    
  44  0.104124      -2.26217     -0.266990E-08  0.266990E-08   274.417       274.417    
  45  0.212799E-01  -3.84999     -0.454391E-08  0.454391E-08   275.037       275.037    
  46  0.778897     -0.249877     -0.294914E-09  0.294914E-09   275.085       275.085    
  47  0.709017     -0.343876     -0.405855E-09  0.405855E-09   275.418       275.418    
  48  0.698754     -0.358456     -0.423063E-09  0.423063E-09   275.998       275.998    
  49  0.761478     -0.272494     -0.321607E-09  0.321607E-09   276.319       276.319    
  50  0.535258     -0.625006     -0.737655E-09  0.737655E-09   277.233       277.233    
  51  0.116619      -2.14884     -0.253614E-08  0.253614E-08   277.653       277.653    
  52  0.886941E-01  -2.42256     -0.285920E-08  0.285920E-08   277.753       277.753    
  53  0.978739     -0.214901E-01 -0.253634E-10  0.253634E-10   277.934       277.934    
  54  0.185543      -1.68447     -0.198807E-08  0.198807E-08   278.219       278.219    
  55  0.502644     -0.687874     -0.811854E-09  0.811854E-09   278.382       278.382    
  56  0.427869E-01  -3.15152     -0.371954E-08  0.371954E-08   278.652       278.652    
  57  0.898460     -0.107073     -0.126372E-09  0.126372E-09   278.658       278.658    
  58  0.744698     -0.294776     -0.347906E-09  0.347906E-09   278.991       278.991    
  59  0.906925     -0.976951E-01 -0.115303E-09  0.115303E-09   279.096       279.096    
  60  0.472412     -0.749904     -0.885065E-09  0.885065E-09   279.148       279.148    
  61  0.861032     -0.149623     -0.176591E-09  0.176591E-09   280.549       280.549    
  62  0.439496     -0.822126     -0.970303E-09  0.970303E-09   281.217       281.217    
  63  0.361091      -1.01863     -0.120222E-08  0.120222E-08   281.462       281.462    
  64  0.532510     -0.630154     -0.743731E-09  0.743731E-09   281.581       281.581    
  65  0.509639     -0.674052     -0.795541E-09  0.795541E-09   281.869       281.869    
  66  0.507650     -0.677962     -0.800156E-09  0.800156E-09   281.929       281.929    
  67  0.901967     -0.103177     -0.121774E-09  0.121774E-09   283.390       283.390    
  68  0.322633      -1.13124     -0.133513E-08  0.133513E-08   283.552       283.552    
  69  0.514849     -0.663881     -0.783537E-09  0.783537E-09   274.142       274.142    
loop,thermsimp(1:2)       54  0.195442E-08  0.269888E-08

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    284        287.49          1.00          0.37         14.01          5.79          0.02         21.19
Just calling func    0   0         21.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    285        278.04          1.00          0.36         14.10          5.63          0.01         21.10
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    278.04
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       54
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       55
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      284     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228794      -1.47493     -0.174077E-08  0.174077E-08   237.130       237.130    
   2  0.420210     -0.867000     -0.102327E-08  0.102327E-08   259.039       259.039    
   3  0.989243     -0.108149E-01 -0.127642E-10  0.127642E-10   261.176       261.176    
   4  0.517450     -0.658842     -0.777589E-09  0.777589E-09   263.426       263.426    
   5  0.675670     -0.392051     -0.462713E-09  0.462713E-09   266.097       266.097    
   6  0.203988      -1.58970     -0.187622E-08  0.187622E-08   266.675       266.675    
   7  0.868528     -0.140956     -0.166361E-09  0.166361E-09   267.113       267.113    
   8  0.987374     -0.127061E-01 -0.149962E-10  0.149962E-10   267.611       267.611    
   9  0.584947     -0.536234     -0.632884E-09  0.632884E-09   269.138       269.138    
  10  0.563428     -0.573717     -0.677122E-09  0.677122E-09   269.233       269.233    
  11  0.568669     -0.564457     -0.666193E-09  0.666193E-09   269.269       269.269    
  12  0.534795E-01  -2.92846     -0.345627E-08  0.345627E-08   269.621       269.621    
  13  0.153481      -1.87418     -0.221198E-08  0.221198E-08   269.659       269.659    
  14  0.874711     -0.133861     -0.157988E-09  0.157988E-09   269.851       269.851    
  15  0.180668      -1.71109     -0.201950E-08  0.201950E-08   270.165       270.165    
  16  0.352875      -1.04164     -0.122939E-08  0.122939E-08   270.639       270.639    
  17  0.721913     -0.325850     -0.384581E-09  0.384581E-09   270.677       270.677    
  18  0.158740      -1.84049     -0.217221E-08  0.217221E-08   270.806       270.806    
  19  0.649867     -0.430987     -0.508667E-09  0.508667E-09   270.974       270.974    
  20  0.186457      -1.67956     -0.198227E-08  0.198227E-08   271.126       271.126    
  21  0.268335      -1.31552     -0.155263E-08  0.155263E-08   271.206       271.206    
  22  0.940957     -0.608578E-01 -0.718267E-10  0.718267E-10   271.285       271.285    
  23  0.760618     -0.273624     -0.322941E-09  0.322941E-09   271.571       271.571    
  24  0.452319     -0.793369     -0.936363E-09  0.936363E-09   271.704       271.704    
  25  0.335882      -1.09100     -0.128763E-08  0.128763E-08   271.739       271.739    
  26  0.689274     -0.372117     -0.439186E-09  0.439186E-09   271.782       271.782    
  27  0.539603     -0.616922     -0.728115E-09  0.728115E-09   271.918       271.918    
  28  0.541846     -0.612773     -0.723218E-09  0.723218E-09   271.918       271.918    
  29  0.773880E-01  -2.55892     -0.302014E-08  0.302014E-08   271.964       271.964    
  30  0.372274     -0.988125     -0.116622E-08  0.116622E-08   272.011       272.011    
  31  0.108145      -2.22428     -0.262518E-08  0.262518E-08   272.030       272.030    
  32  0.459534     -0.777543     -0.917686E-09  0.917686E-09   272.312       272.312    
  33  0.166613      -1.79208     -0.211508E-08  0.211508E-08   272.494       272.494    
  34  0.398466     -0.920133     -0.108598E-08  0.108598E-08   272.743       272.743    
  35  0.516334     -0.661001     -0.780138E-09  0.780138E-09   273.095       273.095    
  36  0.101491      -2.28778     -0.270012E-08  0.270012E-08   273.130       273.130    
  37  0.530436     -0.634055     -0.748336E-09  0.748336E-09   273.221       273.221    
  38  0.293908      -1.22449     -0.144519E-08  0.144519E-08   273.239       273.239    
  39  0.246706      -1.39956     -0.165181E-08  0.165181E-08   273.762       273.762    
  40  0.206826      -1.57588     -0.185991E-08  0.185991E-08   273.822       273.822    
  41  0.548478     -0.600609     -0.708861E-09  0.708861E-09   274.142       274.142    
  42  0.686846     -0.375646     -0.443351E-09  0.443351E-09   274.263       274.263    
  43  0.368061     -0.999506     -0.117965E-08  0.117965E-08   274.266       274.266    
  44  0.642608     -0.442221     -0.521926E-09  0.521926E-09   274.313       274.313    
  45  0.326039      -1.12074     -0.132274E-08  0.132274E-08   274.417       274.417    
  46  0.682535     -0.381941     -0.450782E-09  0.450782E-09   275.037       275.037    
  47  0.795596     -0.228663     -0.269877E-09  0.269877E-09   275.085       275.085    
  48  0.894074     -0.111967     -0.132147E-09  0.132147E-09   275.418       275.418    
  49  0.921171     -0.821100E-01 -0.969092E-10  0.969092E-10   275.998       275.998    
  50  0.251687      -1.37957     -0.162822E-08  0.162822E-08   276.319       276.319    
  51  0.221295      -1.50826     -0.178010E-08  0.178010E-08   277.233       277.233    
  52  0.490642     -0.712041     -0.840377E-09  0.840377E-09   277.653       277.653    
  53  0.306791      -1.18159     -0.139455E-08  0.139455E-08   277.753       277.753    
  54  0.575137     -0.553147     -0.652845E-09  0.652845E-09   277.934       277.934    
  55  0.259963      -1.34721     -0.159003E-08  0.159003E-08   278.219       278.219    
  56  0.455650     -0.786031     -0.927703E-09  0.927703E-09   278.382       278.382    
  57  0.779457     -0.249158     -0.294065E-09  0.294065E-09   278.652       278.652    
  58  0.562431     -0.575488     -0.679212E-09  0.679212E-09   278.658       278.658    
  59  0.136426      -1.99197     -0.235100E-08  0.235100E-08   278.991       278.991    
  60  0.871389     -0.137666     -0.162479E-09  0.162479E-09   279.096       279.096    
  61  0.677652     -0.389122     -0.459256E-09  0.459256E-09   279.148       279.148    
  62  0.216982E-01  -3.83052     -0.452093E-08  0.452093E-08   280.549       280.549    
  63  0.528480     -0.637750     -0.752696E-09  0.752696E-09   281.217       281.217    
  64  0.665757E-01  -2.70942     -0.319775E-08  0.319775E-08   281.462       281.462    
  65  0.784452     -0.242770     -0.286526E-09  0.286526E-09   281.581       281.581    
  66  0.685644     -0.377397     -0.445418E-09  0.445418E-09   281.869       281.869    
  67  0.577898     -0.548358     -0.647192E-09  0.647192E-09   281.929       281.929    
  68  0.902860     -0.102188     -0.120606E-09  0.120606E-09   283.390       283.390    
  69  0.400551     -0.914914     -0.107982E-08  0.107982E-08   278.042       278.042    
loop,thermsimp(1:2)       55  0.174077E-08  0.102327E-08

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286        285.22          1.00          0.37         13.96          5.78          0.02         21.12
Just calling func    0   0         21.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    287        269.20          1.00          0.36         14.03          5.61          0.01         21.01
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    269.20
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       55
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       56
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      286     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.433868     -0.835015     -0.985515E-09  0.985515E-09   237.130       237.130    
   2  0.817899     -0.201016     -0.237247E-09  0.237247E-09   259.039       259.039    
   3  0.170263      -1.77041     -0.208950E-08  0.208950E-08   261.176       261.176    
   4  0.391592     -0.937534     -0.110651E-08  0.110651E-08   263.426       263.426    
   5  0.637635     -0.449989     -0.531094E-09  0.531094E-09   266.097       266.097    
   6  0.238246      -1.43445     -0.169299E-08  0.169299E-08   266.675       266.675    
   7  0.558671     -0.582194     -0.687127E-09  0.687127E-09   267.113       267.113    
   8  0.272631      -1.29964     -0.153388E-08  0.153388E-08   267.611       267.611    
   9  0.711921     -0.339788     -0.401031E-09  0.401031E-09   269.138       269.138    
  10  0.761283     -0.272750     -0.321910E-09  0.321910E-09   269.233       269.233    
  11  0.663871     -0.409667     -0.483504E-09  0.483504E-09   269.269       269.269    
  12  0.616008E-01  -2.78708     -0.328942E-08  0.328942E-08   269.621       269.621    
  13  0.326931      -1.11801     -0.131951E-08  0.131951E-08   269.659       269.659    
  14  0.146733      -1.91914     -0.226504E-08  0.226504E-08   269.851       269.851    
  15  0.421611     -0.863671     -0.101934E-08  0.101934E-08   270.165       270.165    
  16  0.269414      -1.31151     -0.154789E-08  0.154789E-08   270.639       270.639    
  17  0.242810      -1.41548     -0.167060E-08  0.167060E-08   270.677       270.677    
  18  0.705413     -0.348972     -0.411870E-09  0.411870E-09   270.806       270.806    
  19  0.200964      -1.60463     -0.189384E-08  0.189384E-08   270.974       270.974    
  20  0.159337      -1.83674     -0.216778E-08  0.216778E-08   271.126       271.126    
  21  0.800051     -0.223080     -0.263288E-09  0.263288E-09   271.206       271.206    
  22  0.255260      -1.36547     -0.161158E-08  0.161158E-08   271.285       271.285    
  23  0.213981      -1.54187     -0.181977E-08  0.181977E-08   271.571       271.571    
  24  0.216091      -1.53205     -0.180819E-08  0.180819E-08   271.704       271.704    
  25  0.965950     -0.346430E-01 -0.408869E-10  0.408869E-10   271.739       271.739    
  26  0.211106      -1.55539     -0.183573E-08  0.183573E-08   271.782       271.782    
  27  0.904120     -0.100793     -0.118960E-09  0.118960E-09   271.918       271.918    
  28  0.919941     -0.834456E-01 -0.984856E-10  0.984856E-10   271.918       271.918    
  29  0.852210     -0.159923     -0.188747E-09  0.188747E-09   271.964       271.964    
  30  0.237120      -1.43919     -0.169858E-08  0.169858E-08   272.011       272.011    
  31  0.996080     -0.392726E-02 -0.463509E-11  0.463509E-11   272.030       272.030    
  32  0.414678     -0.880253     -0.103891E-08  0.103891E-08   272.312       272.312    
  33  0.271326E-01  -3.60702     -0.425714E-08  0.425714E-08   272.494       272.494    
  34  0.163009      -1.81395     -0.214089E-08  0.214089E-08   272.743       272.743    
  35  0.805918     -0.215774     -0.254664E-09  0.254664E-09   273.095       273.095    
  36  0.495108     -0.702979     -0.829682E-09  0.829682E-09   273.130       273.130    
  37  0.877917     -0.130203     -0.153670E-09  0.153670E-09   273.221       273.221    
  38  0.868506E-01  -2.44357     -0.288399E-08  0.288399E-08   273.239       273.239    
  39  0.159190      -1.83766     -0.216887E-08  0.216887E-08   273.762       273.762    
  40  0.621758     -0.475205     -0.560854E-09  0.560854E-09   273.822       273.822    
  41  0.168692      -1.77968     -0.210045E-08  0.210045E-08   274.142       274.142    
  42  0.309179      -1.17383     -0.138540E-08  0.138540E-08   274.263       274.263    
  43  0.126118      -2.07054     -0.244373E-08  0.244373E-08   274.266       274.266    
  44  0.720454     -0.327873     -0.386968E-09  0.386968E-09   274.313       274.313    
  45  0.732905     -0.310740     -0.366747E-09  0.366747E-09   274.417       274.417    
  46  0.250687      -1.38355     -0.163292E-08  0.163292E-08   275.037       275.037    
  47  0.622064     -0.474712     -0.560273E-09  0.560273E-09   275.085       275.085    
  48  0.456179     -0.784869     -0.926332E-09  0.926332E-09   275.418       275.418    
  49  0.584013     -0.537833     -0.634770E-09  0.634770E-09   275.998       275.998    
  50  0.754076     -0.282262     -0.333136E-09  0.333136E-09   276.319       276.319    
  51  0.534844     -0.625781     -0.738569E-09  0.738569E-09   277.233       277.233    
  52  0.378689     -0.971041     -0.114606E-08  0.114606E-08   277.653       277.653    
  53  0.497266     -0.698631     -0.824550E-09  0.824550E-09   277.753       277.753    
  54  0.566795     -0.567757     -0.670088E-09  0.670088E-09   277.934       277.934    
  55  0.650860     -0.429461     -0.506866E-09  0.506866E-09   278.042       278.042    
  56  0.393053E-02  -5.53898     -0.653731E-08  0.653731E-08   278.219       278.219    
  57  0.138912      -1.97391     -0.232968E-08  0.232968E-08   278.382       278.382    
  58  0.551188     -0.595679     -0.703042E-09  0.703042E-09   278.652       278.652    
  59  0.675035     -0.392991     -0.463822E-09  0.463822E-09   278.658       278.658    
  60  0.339359      -1.08070     -0.127548E-08  0.127548E-08   278.991       278.991    
  61  0.599286     -0.512017     -0.604301E-09  0.604301E-09   279.096       279.096    
  62  0.602166     -0.507222     -0.598642E-09  0.598642E-09   279.148       279.148    
  63  0.252382E-01  -3.67940     -0.434256E-08  0.434256E-08   280.549       280.549    
  64  0.220463      -1.51203     -0.178455E-08  0.178455E-08   281.217       281.217    
  65  0.737361     -0.304677     -0.359591E-09  0.359591E-09   281.462       281.462    
  66  0.981717     -0.184524E-01 -0.217782E-10  0.217782E-10   281.581       281.581    
  67  0.767985E-01  -2.56657     -0.302916E-08  0.302916E-08   281.869       281.869    
  68  0.985860     -0.142404E-01 -0.168071E-10  0.168071E-10   281.929       281.929    
  69  0.631676     -0.459379     -0.542176E-09  0.542176E-09   269.199       269.199    
loop,thermsimp(1:2)       56  0.985515E-09  0.237247E-09

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288        255.76          1.00          0.37         14.07          5.64          0.01         21.07
Just calling func    0   0         21.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    255.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       56
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       57
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      287     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.171852      -1.76112     -0.207854E-08  0.207854E-08   237.130       237.130    
   2  0.953318     -0.478070E-01 -0.564235E-10  0.564235E-10   259.039       259.039    
   3  0.708591     -0.344476     -0.406564E-09  0.406564E-09   261.176       261.176    
   4  0.245430      -1.40474     -0.165793E-08  0.165793E-08   263.426       263.426    
   5  0.520828     -0.652335     -0.769910E-09  0.769910E-09   266.097       266.097    
   6  0.881471     -0.126163     -0.148902E-09  0.148902E-09   266.675       266.675    
   7  0.569715     -0.562619     -0.664024E-09  0.664024E-09   267.113       267.113    
   8  0.602272     -0.507047     -0.598435E-09  0.598435E-09   267.611       267.611    
   9  0.108750      -2.21871     -0.261860E-08  0.261860E-08   269.138       269.138    
  10  0.370933     -0.991733     -0.117048E-08  0.117048E-08   269.199       269.199    
  11  0.390808E-01  -3.24212     -0.382647E-08  0.382647E-08   269.233       269.233    
  12  0.528479     -0.637753     -0.752699E-09  0.752699E-09   269.269       269.269    
  13  0.769289     -0.262288     -0.309562E-09  0.309562E-09   269.621       269.621    
  14  0.997327     -0.267639E-02 -0.315877E-11  0.315877E-11   269.659       269.659    
  15  0.468299E-01  -3.06123     -0.361298E-08  0.361298E-08   269.851       269.851    
  16  0.502176     -0.688805     -0.812954E-09  0.812954E-09   270.165       270.165    
  17  0.458473     -0.779855     -0.920413E-09  0.920413E-09   270.639       270.639    
  18  0.667863     -0.403672     -0.476429E-09  0.476429E-09   270.677       270.677    
  19  0.853852     -0.157998     -0.186475E-09  0.186475E-09   270.806       270.806    
  20  0.338424      -1.08346     -0.127874E-08  0.127874E-08   270.974       270.974    
  21  0.422719     -0.861048     -0.101624E-08  0.101624E-08   271.126       271.126    
  22  0.983407     -0.167327E-01 -0.197485E-10  0.197485E-10   271.206       271.206    
  23  0.654262     -0.424247     -0.500712E-09  0.500712E-09   271.285       271.285    
  24  0.475096     -0.744239     -0.878378E-09  0.878378E-09   271.571       271.571    
  25  0.949952     -0.513433E-01 -0.605973E-10  0.605973E-10   271.704       271.704    
  26  0.885344     -0.121779     -0.143728E-09  0.143728E-09   271.739       271.739    
  27  0.487222     -0.719035     -0.848631E-09  0.848631E-09   271.782       271.782    
  28  0.515039     -0.663512     -0.783101E-09  0.783101E-09   271.918       271.918    
  29  0.670192     -0.400190     -0.472320E-09  0.472320E-09   271.918       271.918    
  30  0.875515     -0.132943     -0.156904E-09  0.156904E-09   271.964       271.964    
  31  0.528859E-01  -2.93962     -0.346945E-08  0.346945E-08   272.011       272.011    
  32  0.193389E-01  -3.94563     -0.465678E-08  0.465678E-08   272.030       272.030    
  33  0.915613     -0.881617E-01 -0.104052E-09  0.104052E-09   272.312       272.312    
  34  0.518072     -0.657641     -0.776172E-09  0.776172E-09   272.494       272.494    
  35  0.120335      -2.11748     -0.249913E-08  0.249913E-08   272.743       272.743    
  36  0.900518     -0.104785     -0.123671E-09  0.123671E-09   273.095       273.095    
  37  0.938582     -0.633855E-01 -0.748100E-10  0.748100E-10   273.130       273.130    
  38  0.727537E-01  -2.62068     -0.309302E-08  0.309302E-08   273.221       273.221    
  39  0.524285E-01  -2.94830     -0.347970E-08  0.347970E-08   273.239       273.239    
  40  0.349149      -1.05226     -0.124191E-08  0.124191E-08   273.762       273.762    
  41  0.335318      -1.09268     -0.128962E-08  0.128962E-08   273.822       273.822    
  42  0.858345     -0.152749     -0.180280E-09  0.180280E-09   274.142       274.142    
  43  0.979287     -0.209305E-01 -0.247029E-10  0.247029E-10   274.263       274.263    
  44  0.304061      -1.19053     -0.140511E-08  0.140511E-08   274.266       274.266    
  45  0.260277      -1.34601     -0.158861E-08  0.158861E-08   274.313       274.313    
  46  0.475426     -0.743544     -0.877558E-09  0.877558E-09   274.417       274.417    
  47  0.792432     -0.232649     -0.274580E-09  0.274580E-09   275.037       275.037    
  48  0.277990      -1.28017     -0.151090E-08  0.151090E-08   275.085       275.085    
  49  0.436194     -0.829668     -0.979205E-09  0.979205E-09   275.418       275.418    
  50  0.853545E-01  -2.46094     -0.290450E-08  0.290450E-08   275.998       275.998    
  51  0.346227      -1.06066     -0.125183E-08  0.125183E-08   276.319       276.319    
  52  0.504502     -0.684183     -0.807498E-09  0.807498E-09   277.233       277.233    
  53  0.955363     -0.456638E-01 -0.538941E-10  0.538941E-10   277.653       277.653    
  54  0.457892     -0.781121     -0.921908E-09  0.921908E-09   277.753       277.753    
  55  0.609943     -0.494391     -0.583498E-09  0.583498E-09   277.934       277.934    
  56  0.755785     -0.279998     -0.330465E-09  0.330465E-09   278.042       278.042    
  57  0.891562     -0.114780     -0.135468E-09  0.135468E-09   278.219       278.219    
  58  0.787549     -0.238830     -0.281876E-09  0.281876E-09   278.382       278.382    
  59  0.242621      -1.41625     -0.167151E-08  0.167151E-08   278.652       278.652    
  60  0.886115     -0.120909     -0.142701E-09  0.142701E-09   278.658       278.658    
  61  0.311099      -1.16764     -0.137810E-08  0.137810E-08   278.991       278.991    
  62  0.779097     -0.249620     -0.294611E-09  0.294611E-09   279.096       279.096    
  63  0.121238      -2.11000     -0.249030E-08  0.249030E-08   279.148       279.148    
  64  0.145952      -1.92447     -0.227134E-08  0.227134E-08   280.549       280.549    
  65  0.355625      -1.03388     -0.122022E-08  0.122022E-08   281.217       281.217    
  66  0.257971      -1.35491     -0.159911E-08  0.159911E-08   281.462       281.462    
  67  0.210122      -1.56007     -0.184125E-08  0.184125E-08   281.581       281.581    
  68  0.607521     -0.498368     -0.588193E-09  0.588193E-09   281.869       281.869    
  69  0.220024      -1.51402     -0.178690E-08  0.178690E-08   255.757       255.757    
loop,thermsimp(1:2)       57  0.207854E-08  0.564235E-10

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289        316.92          1.00          0.36         14.06          5.58          0.02         21.02
Just calling func    0   0         21.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    290        281.48          1.00          0.36         14.01          5.72          0.01         21.09
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    281.48
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       57
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       58
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      289
neval,tstepnext:      289     289

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.933932     -0.683515E-01 -0.806710E-10  0.806710E-10   237.130       237.130    
   2  0.255439      -1.36477     -0.161075E-08  0.161075E-08   255.757       255.757    
   3  0.863844E-01  -2.44895     -0.289034E-08  0.289034E-08   259.039       259.039    
   4  0.136388      -1.99225     -0.235133E-08  0.235133E-08   261.176       261.176    
   5  0.251157      -1.38168     -0.163071E-08  0.163071E-08   263.426       263.426    
   6  0.895211     -0.110695     -0.130647E-09  0.130647E-09   266.097       266.097    
   7  0.209243E-01  -3.86685     -0.456379E-08  0.456379E-08   266.675       266.675    
   8  0.427309     -0.850248     -0.100349E-08  0.100349E-08   267.113       267.113    
   9  0.698935E-01  -2.66078     -0.314036E-08  0.314036E-08   267.611       267.611    
  10  0.664342     -0.408959     -0.482668E-09  0.482668E-09   269.138       269.138    
  11  0.162416      -1.81760     -0.214519E-08  0.214519E-08   269.199       269.199    
  12  0.335786      -1.09128     -0.128797E-08  0.128797E-08   269.233       269.233    
  13  0.267712      -1.31784     -0.155537E-08  0.155537E-08   269.269       269.269    
  14  0.108817      -2.21809     -0.261787E-08  0.261787E-08   269.621       269.621    
  15  0.626069     -0.468294     -0.552698E-09  0.552698E-09   269.659       269.659    
  16  0.366286      -1.00434     -0.118536E-08  0.118536E-08   269.851       269.851    
  17  0.604263     -0.503746     -0.594540E-09  0.594540E-09   270.165       270.165    
  18  0.556394     -0.586279     -0.691948E-09  0.691948E-09   270.639       270.639    
  19  0.424350     -0.857196     -0.101169E-08  0.101169E-08   270.677       270.677    
  20  0.881256     -0.126407     -0.149190E-09  0.149190E-09   270.806       270.806    
  21  0.605497     -0.501706     -0.592132E-09  0.592132E-09   270.974       270.974    
  22  0.843342     -0.170382     -0.201092E-09  0.201092E-09   271.126       271.126    
  23  0.352338      -1.04316     -0.123118E-08  0.123118E-08   271.206       271.206    
  24  0.437966     -0.825614     -0.974420E-09  0.974420E-09   271.285       271.285    
  25  0.383175     -0.959262     -0.113216E-08  0.113216E-08   271.571       271.571    
  26  0.547453     -0.602479     -0.711068E-09  0.711068E-09   271.704       271.704    
  27  0.816360     -0.202900     -0.239470E-09  0.239470E-09   271.739       271.739    
  28  0.554431     -0.589813     -0.696120E-09  0.696120E-09   271.782       271.782    
  29  0.273475E-01  -3.59913     -0.424783E-08  0.424783E-08   271.918       271.918    
  30  0.913102     -0.909074E-01 -0.107292E-09  0.107292E-09   271.918       271.918    
  31  0.774925     -0.254989     -0.300948E-09  0.300948E-09   271.964       271.964    
  32  0.716357     -0.333576     -0.393699E-09  0.393699E-09   272.011       272.011    
  33  0.541279     -0.613820     -0.724453E-09  0.724453E-09   272.030       272.030    
  34  0.179674      -1.71661     -0.202601E-08  0.202601E-08   272.312       272.312    
  35  0.207486E-01  -3.87528     -0.457375E-08  0.457375E-08   272.494       272.494    
  36  0.912139     -0.919634E-01 -0.108539E-09  0.108539E-09   272.743       272.743    
  37  0.982180     -0.179806E-01 -0.212214E-10  0.212214E-10   273.095       273.095    
  38  0.539550     -0.617020     -0.728230E-09  0.728230E-09   273.130       273.130    
  39  0.758675     -0.276182     -0.325960E-09  0.325960E-09   273.221       273.221    
  40  0.873601     -0.135131     -0.159487E-09  0.159487E-09   273.239       273.239    
  41  0.929133     -0.735034E-01 -0.867515E-10  0.867515E-10   273.762       273.762    
  42  0.827155     -0.189764     -0.223966E-09  0.223966E-09   273.822       273.822    
  43  0.833031     -0.182684     -0.215611E-09  0.215611E-09   274.142       274.142    
  44  0.146351      -1.92175     -0.226812E-08  0.226812E-08   274.263       274.263    
  45  0.251331      -1.38098     -0.162989E-08  0.162989E-08   274.266       274.266    
  46  0.658350     -0.418019     -0.493361E-09  0.493361E-09   274.313       274.313    
  47  0.426206E-01  -3.15542     -0.372414E-08  0.372414E-08   274.417       274.417    
  48  0.753188     -0.283440     -0.334527E-09  0.334527E-09   275.037       275.037    
  49  0.478453     -0.737198     -0.870069E-09  0.870069E-09   275.085       275.085    
  50  0.100854      -2.29409     -0.270756E-08  0.270756E-08   275.418       275.418    
  51  0.888512     -0.118208     -0.139513E-09  0.139513E-09   275.998       275.998    
  52  0.110201E-01  -4.50803     -0.532055E-08  0.532055E-08   276.319       276.319    
  53  0.648265     -0.433456     -0.511581E-09  0.511581E-09   277.233       277.233    
  54  0.552372     -0.593534     -0.700511E-09  0.700511E-09   277.653       277.653    
  55  0.694632     -0.364373     -0.430047E-09  0.430047E-09   277.753       277.753    
  56  0.195285      -1.63329     -0.192767E-08  0.192767E-08   277.934       277.934    
  57  0.331277      -1.10480     -0.130393E-08  0.130393E-08   278.042       278.042    
  58  0.213047      -1.54624     -0.182493E-08  0.182493E-08   278.219       278.219    
  59  0.201507E-01  -3.90451     -0.460825E-08  0.460825E-08   278.382       278.382    
  60  0.546197     -0.604776     -0.713779E-09  0.713779E-09   278.652       278.652    
  61  0.595903     -0.517678     -0.610983E-09  0.610983E-09   278.658       278.658    
  62  0.431488     -0.840516     -0.992008E-09  0.992008E-09   278.991       278.991    
  63  0.669433     -0.401324     -0.473657E-09  0.473657E-09   279.096       279.096    
  64  0.717983E-01  -2.63389     -0.310862E-08  0.310862E-08   279.148       279.148    
  65  0.954732     -0.463243E-01 -0.546737E-10  0.546737E-10   280.549       280.549    
  66  0.519024     -0.655805     -0.774005E-09  0.774005E-09   281.217       281.217    
  67  0.110334      -2.20424     -0.260153E-08  0.260153E-08   281.462       281.462    
  68  0.640001     -0.446285     -0.526723E-09  0.526723E-09   281.581       281.581    
  69  0.525562     -0.643288     -0.759232E-09  0.759232E-09   281.482       281.482    
loop,thermsimp(1:2)       58  0.806710E-10  0.161075E-08

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291        273.06          1.00          0.36         14.08          5.57          0.01         21.03
Just calling func    0   0         21.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    273.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       58
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.118024E-08           289
loop is:       59
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.354071E-09           299

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      299
neval,tstepnext:      290     299

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.814850     -0.204751     -0.724963E-10  0.724963E-10   237.130       237.130    
   2  0.496184     -0.700809     -0.248136E-09  0.248136E-09   255.757       255.757    
   3  0.584768     -0.536541     -0.189974E-09  0.189974E-09   259.039       259.039    
   4  0.696542     -0.361627     -0.128042E-09  0.128042E-09   261.176       261.176    
   5  0.313904      -1.15867     -0.410251E-09  0.410251E-09   263.426       263.426    
   6  0.874550     -0.134046     -0.474618E-10  0.474618E-10   266.097       266.097    
   7  0.292763      -1.22839     -0.434938E-09  0.434938E-09   266.675       266.675    
   8  0.250382      -1.38477     -0.490306E-09  0.490306E-09   267.113       267.113    
   9  0.267099      -1.32013     -0.467422E-09  0.467422E-09   267.611       267.611    
  10  0.227540      -1.48043     -0.524178E-09  0.524178E-09   269.138       269.138    
  11  0.924505     -0.784972E-01 -0.277936E-10  0.277936E-10   269.199       269.199    
  12  0.792965E-01  -2.53456     -0.897415E-09  0.897415E-09   269.233       269.233    
  13  0.661311E-01  -2.71612     -0.961698E-09  0.961698E-09   269.269       269.269    
  14  0.152556      -1.88022     -0.665733E-09  0.665733E-09   269.621       269.621    
  15  0.343502      -1.06856     -0.378347E-09  0.378347E-09   269.659       269.659    
  16  0.682029     -0.382684     -0.135497E-09  0.135497E-09   269.851       269.851    
  17  0.114431      -2.16778     -0.767550E-09  0.767550E-09   270.165       270.165    
  18  0.288412      -1.24337     -0.440240E-09  0.440240E-09   270.639       270.639    
  19  0.902695     -0.102370     -0.362463E-10  0.362463E-10   270.677       270.677    
  20  0.907159     -0.974380E-01 -0.345000E-10  0.345000E-10   270.806       270.806    
  21  0.351201      -1.04640     -0.370499E-09  0.370499E-09   270.974       270.974    
  22  0.107593      -2.22940     -0.789366E-09  0.789366E-09   271.126       271.126    
  23  0.802533     -0.219983     -0.778895E-10  0.778895E-10   271.206       271.206    
  24  0.945987     -0.555266E-01 -0.196604E-10  0.196604E-10   271.285       271.285    
  25  0.312105      -1.16441     -0.412286E-09  0.412286E-09   271.571       271.571    
  26  0.721340     -0.326645     -0.115655E-09  0.115655E-09   271.704       271.704    
  27  0.933380     -0.689430E-01 -0.244107E-10  0.244107E-10   271.739       271.739    
  28  0.330572      -1.10693     -0.391933E-09  0.391933E-09   271.782       271.782    
  29  0.446542     -0.806221     -0.285460E-09  0.285460E-09   271.918       271.918    
  30  0.288108      -1.24442     -0.440613E-09  0.440613E-09   271.918       271.918    
  31  0.810980E-01  -2.51210     -0.889461E-09  0.889461E-09   271.964       271.964    
  32  0.135627      -1.99785     -0.707380E-09  0.707380E-09   272.011       272.011    
  33  0.730233     -0.314391     -0.111317E-09  0.111317E-09   272.030       272.030    
  34  0.310170      -1.17063     -0.414488E-09  0.414488E-09   272.312       272.312    
  35  0.948518     -0.528541E-01 -0.187141E-10  0.187141E-10   272.494       272.494    
  36  0.840606     -0.173633     -0.614783E-10  0.614783E-10   272.743       272.743    
  37  0.100656      -2.29605     -0.812964E-09  0.812964E-09   273.095       273.095    
  38  0.384695E-01  -3.25789     -0.115352E-08  0.115352E-08   273.130       273.130    
  39  0.747904     -0.290480     -0.102851E-09  0.102851E-09   273.221       273.221    
  40  0.208544      -1.56760     -0.555044E-09  0.555044E-09   273.239       273.239    
  41  0.582430     -0.540547     -0.191392E-09  0.191392E-09   273.762       273.762    
  42  0.130854      -2.03367     -0.720065E-09  0.720065E-09   273.822       273.822    
  43  0.274714      -1.29202     -0.457469E-09  0.457469E-09   274.142       274.142    
  44  0.845387     -0.167961     -0.594701E-10  0.594701E-10   274.263       274.263    
  45  0.833554     -0.182056     -0.644609E-10  0.644609E-10   274.266       274.266    
  46  0.949991     -0.513026E-01 -0.181648E-10  0.181648E-10   274.313       274.313    
  47  0.672524     -0.396718     -0.140466E-09  0.140466E-09   274.417       274.417    
  48  0.607314     -0.498710     -0.176579E-09  0.176579E-09   275.037       275.037    
  49  0.415231     -0.878921     -0.311200E-09  0.311200E-09   275.085       275.085    
  50  0.450313     -0.797811     -0.282482E-09  0.282482E-09   275.418       275.418    
  51  0.584221     -0.537476     -0.190305E-09  0.190305E-09   275.998       275.998    
  52  0.701046     -0.355182     -0.125760E-09  0.125760E-09   276.319       276.319    
  53  0.226453      -1.48522     -0.525873E-09  0.525873E-09   277.233       277.233    
  54  0.322391      -1.13199     -0.400805E-09  0.400805E-09   277.653       277.653    
  55  0.867724     -0.141882     -0.502363E-10  0.502363E-10   277.753       277.753    
  56  0.776428     -0.253051     -0.895981E-10  0.895981E-10   277.934       277.934    
  57  0.825863     -0.191326     -0.677431E-10  0.677431E-10   278.042       278.042    
  58  0.534766     -0.625925     -0.221622E-09  0.221622E-09   278.219       278.219    
  59  0.894021     -0.112026     -0.396650E-10  0.396650E-10   278.382       278.382    
  60  0.777642     -0.251488     -0.890448E-10  0.890448E-10   278.652       278.652    
  61  0.687880     -0.374140     -0.132472E-09  0.132472E-09   278.658       278.658    
  62  0.338968      -1.08185     -0.383052E-09  0.383052E-09   278.991       278.991    
  63  0.708914E-01  -2.64661     -0.937087E-09  0.937087E-09   279.096       279.096    
  64  0.107658      -2.22880     -0.789153E-09  0.789153E-09   279.148       279.148    
  65  0.306277      -1.18327     -0.418960E-09  0.418960E-09   280.549       280.549    
  66  0.305657E-01  -3.48788     -0.123496E-08  0.123496E-08   281.217       281.217    
  67  0.310305      -1.17020     -0.414334E-09  0.414334E-09   281.462       281.462    
  68  0.102095      -2.28185     -0.807937E-09  0.807937E-09   281.482       281.482    
  69  0.364816      -1.00836     -0.357032E-09  0.357032E-09   273.064       273.064    
loop,thermsimp(1:2)       59  0.724963E-10  0.248136E-09

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292        272.66          1.00          0.37         14.06          5.44          0.01         20.87
Just calling func    0   0         20.87


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    272.66
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       59
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       60
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      299
neval,tstepnext:      291     299

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.953906     -0.471905E-01 -0.167088E-10  0.167088E-10   237.130       237.130    
   2  0.277171      -1.28312     -0.454316E-09  0.454316E-09   255.757       255.757    
   3  0.407830     -0.896905     -0.317568E-09  0.317568E-09   259.039       259.039    
   4  0.423266     -0.859753     -0.304414E-09  0.304414E-09   261.176       261.176    
   5  0.573545     -0.555919     -0.196835E-09  0.196835E-09   263.426       263.426    
   6  0.446795     -0.805655     -0.285259E-09  0.285259E-09   266.097       266.097    
   7  0.141464      -1.95571     -0.692461E-09  0.692461E-09   266.675       266.675    
   8  0.448145     -0.802638     -0.284191E-09  0.284191E-09   267.113       267.113    
   9  0.131719      -2.02709     -0.717733E-09  0.717733E-09   267.611       267.611    
  10  0.838319     -0.176357     -0.624428E-10  0.624428E-10   269.138       269.138    
  11  0.936808     -0.652768E-01 -0.231126E-10  0.231126E-10   269.199       269.199    
  12  0.863420     -0.146854     -0.519966E-10  0.519966E-10   269.233       269.233    
  13  0.840084     -0.174253     -0.616980E-10  0.616980E-10   269.269       269.269    
  14  0.969526     -0.309475E-01 -0.109576E-10  0.109576E-10   269.621       269.621    
  15  0.719626     -0.329024     -0.116498E-09  0.116498E-09   269.659       269.659    
  16  0.771493     -0.259428     -0.918560E-10  0.918560E-10   269.851       269.851    
  17  0.743879E-01  -2.59846     -0.920040E-09  0.920040E-09   270.165       270.165    
  18  0.724857     -0.321780     -0.113933E-09  0.113933E-09   270.639       270.639    
  19  0.172991      -1.75452     -0.621224E-09  0.621224E-09   270.677       270.677    
  20  0.990427     -0.961944E-02 -0.340597E-11  0.340597E-11   270.806       270.806    
  21  0.673429     -0.395372     -0.139990E-09  0.139990E-09   270.974       270.974    
  22  0.827584     -0.189245     -0.670061E-10  0.670061E-10   271.126       271.126    
  23  0.716876     -0.332853     -0.117854E-09  0.117854E-09   271.206       271.206    
  24  0.926610E-01  -2.37881     -0.842267E-09  0.842267E-09   271.285       271.285    
  25  0.432255     -0.838741     -0.296974E-09  0.296974E-09   271.571       271.571    
  26  0.886728E-01  -2.42280     -0.857844E-09  0.857844E-09   271.704       271.704    
  27  0.893955     -0.112100     -0.396913E-10  0.396913E-10   271.739       271.739    
  28  0.359814      -1.02217     -0.361921E-09  0.361921E-09   271.782       271.782    
  29  0.949508     -0.518111E-01 -0.183448E-10  0.183448E-10   271.918       271.918    
  30  0.771263     -0.259726     -0.919616E-10  0.919616E-10   271.918       271.918    
  31  0.294441      -1.22268     -0.432915E-09  0.432915E-09   271.964       271.964    
  32  0.835806E-01  -2.48194     -0.878785E-09  0.878785E-09   272.011       272.011    
  33  0.995829     -0.417961E-02 -0.147988E-11  0.147988E-11   272.030       272.030    
  34  0.801299     -0.221522     -0.784344E-10  0.784344E-10   272.312       272.312    
  35  0.419810     -0.867952     -0.307317E-09  0.307317E-09   272.494       272.494    
  36  0.181313      -1.70753     -0.604587E-09  0.604587E-09   272.743       272.743    
  37  0.194669      -1.63646     -0.579422E-09  0.579422E-09   273.064       273.064    
  38  0.821243     -0.196936     -0.697293E-10  0.697293E-10   273.095       273.095    
  39  0.944312     -0.572989E-01 -0.202879E-10  0.202879E-10   273.130       273.130    
  40  0.896859     -0.108856     -0.385429E-10  0.385429E-10   273.221       273.221    
  41  0.733160     -0.310391     -0.109900E-09  0.109900E-09   273.239       273.239    
  42  0.205019      -1.58465     -0.561080E-09  0.561080E-09   273.762       273.762    
  43  0.101018E-01  -4.59504     -0.162697E-08  0.162697E-08   273.822       273.822    
  44  0.256800      -1.35946     -0.481345E-09  0.481345E-09   274.142       274.142    
  45  0.445568     -0.808406     -0.286233E-09  0.286233E-09   274.263       274.263    
  46  0.343547      -1.06843     -0.378300E-09  0.378300E-09   274.266       274.266    
  47  0.590050E-01  -2.83013     -0.100207E-08  0.100207E-08   274.313       274.313    
  48  0.708074     -0.345207     -0.122228E-09  0.122228E-09   274.417       274.417    
  49  0.333434      -1.09831     -0.388879E-09  0.388879E-09   275.037       275.037    
  50  0.831291     -0.184775     -0.654235E-10  0.654235E-10   275.085       275.085    
  51  0.622048     -0.474737     -0.168091E-09  0.168091E-09   275.418       275.418    
  52  0.519044     -0.655766     -0.232188E-09  0.232188E-09   275.998       275.998    
  53  0.574922     -0.553521     -0.195986E-09  0.195986E-09   276.319       276.319    
  54  0.370494     -0.992918     -0.351564E-09  0.351564E-09   277.233       277.233    
  55  0.919482     -0.839448E-01 -0.297224E-10  0.297224E-10   277.653       277.653    
  56  0.282457E-01  -3.56681     -0.126291E-08  0.126291E-08   277.753       277.753    
  57  0.169220      -1.77655     -0.629027E-09  0.629027E-09   277.934       277.934    
  58  0.276297      -1.28628     -0.455434E-09  0.455434E-09   278.042       278.042    
  59  0.651892     -0.427877     -0.151499E-09  0.151499E-09   278.219       278.219    
  60  0.541113     -0.614128     -0.217445E-09  0.217445E-09   278.382       278.382    
  61  0.165027E-01  -4.10423     -0.145319E-08  0.145319E-08   278.652       278.652    
  62  0.103003      -2.27300     -0.804804E-09  0.804804E-09   278.658       278.658    
  63  0.196373      -1.62774     -0.576336E-09  0.576336E-09   278.991       278.991    
  64  0.346089      -1.06106     -0.375690E-09  0.375690E-09   279.096       279.096    
  65  0.523581     -0.647063     -0.229106E-09  0.229106E-09   279.148       279.148    
  66  0.216341      -1.53090     -0.542048E-09  0.542048E-09   280.549       280.549    
  67  0.624347     -0.471049     -0.166785E-09  0.166785E-09   281.217       281.217    
  68  0.470267     -0.754455     -0.267131E-09  0.267131E-09   281.462       281.462    
  69  0.453791     -0.790119     -0.279758E-09  0.279758E-09   272.660       272.660    
loop,thermsimp(1:2)       60  0.167088E-10  0.454316E-09

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293        253.03          1.00          0.37         14.05          5.47          0.01         20.89
Just calling func    0   0         20.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    253.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       60
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       61
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      299
neval,tstepnext:      292     299

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.691200     -0.369326     -0.130768E-09  0.130768E-09   237.130       237.130    
   2  0.347572      -1.05678     -0.374176E-09  0.374176E-09   255.757       255.757    
   3  0.554505     -0.589680     -0.208789E-09  0.208789E-09   259.039       259.039    
   4  0.745892     -0.293175     -0.103805E-09  0.103805E-09   261.176       261.176    
   5  0.638075     -0.449299     -0.159084E-09  0.159084E-09   263.426       263.426    
   6  0.137777      -1.98212     -0.701811E-09  0.701811E-09   266.097       266.097    
   7  0.862860     -0.147502     -0.522263E-10  0.522263E-10   266.675       266.675    
   8  0.840219     -0.174093     -0.616413E-10  0.616413E-10   267.113       267.113    
   9  0.243619      -1.41215     -0.500002E-09  0.500002E-09   267.611       267.611    
  10  0.976764     -0.235101E-01 -0.832424E-11  0.832424E-11   269.138       269.138    
  11  0.836081     -0.179030     -0.633895E-10  0.633895E-10   269.199       269.199    
  12  0.468746     -0.757693     -0.268277E-09  0.268277E-09   269.233       269.233    
  13  0.953072     -0.480653E-01 -0.170185E-10  0.170185E-10   269.269       269.269    
  14  0.573052     -0.556778     -0.197139E-09  0.197139E-09   269.621       269.621    
  15  0.595733     -0.517963     -0.183396E-09  0.183396E-09   269.659       269.659    
  16  0.760379     -0.273938     -0.969936E-10  0.969936E-10   269.851       269.851    
  17  0.736313     -0.306100     -0.108381E-09  0.108381E-09   270.165       270.165    
  18  0.401945     -0.911439     -0.322714E-09  0.322714E-09   270.639       270.639    
  19  0.249915      -1.38664     -0.490967E-09  0.490967E-09   270.677       270.677    
  20  0.792621     -0.232410     -0.822895E-10  0.822895E-10   270.806       270.806    
  21  0.227510E-02  -6.08573     -0.215478E-08  0.215478E-08   270.974       270.974    
  22  0.234934      -1.44845     -0.512855E-09  0.512855E-09   271.126       271.126    
  23  0.756687     -0.278806     -0.987171E-10  0.987171E-10   271.206       271.206    
  24  0.620033E-01  -2.78057     -0.984519E-09  0.984519E-09   271.285       271.285    
  25  0.675133     -0.392846     -0.139095E-09  0.139095E-09   271.571       271.571    
  26  0.948009     -0.533909E-01 -0.189042E-10  0.189042E-10   271.704       271.704    
  27  0.731377     -0.312826     -0.110763E-09  0.110763E-09   271.739       271.739    
  28  0.542670     -0.611254     -0.216427E-09  0.216427E-09   271.782       271.782    
  29  0.701353     -0.354744     -0.125605E-09  0.125605E-09   271.918       271.918    
  30  0.263452      -1.33388     -0.472290E-09  0.472290E-09   271.918       271.918    
  31  0.902232     -0.102884     -0.364281E-10  0.364281E-10   271.964       271.964    
  32  0.398551     -0.919921     -0.325717E-09  0.325717E-09   272.011       272.011    
  33  0.452929     -0.792021     -0.280432E-09  0.280432E-09   272.030       272.030    
  34  0.863380     -0.146900     -0.520131E-10  0.520131E-10   272.312       272.312    
  35  0.292101E-01  -3.53324     -0.125102E-08  0.125102E-08   272.494       272.494    
  36  0.161715      -1.82192     -0.645088E-09  0.645088E-09   272.660       272.660    
  37  0.603128     -0.505626     -0.179027E-09  0.179027E-09   272.743       272.743    
  38  0.567055     -0.567299     -0.200864E-09  0.200864E-09   273.064       273.064    
  39  0.941775     -0.599891E-01 -0.212404E-10  0.212404E-10   273.095       273.095    
  40  0.750264     -0.287330     -0.101735E-09  0.101735E-09   273.130       273.130    
  41  0.536020     -0.623583     -0.220793E-09  0.220793E-09   273.221       273.221    
  42  0.375048     -0.980701     -0.347238E-09  0.347238E-09   273.239       273.239    
  43  0.219099E-01  -3.82081     -0.135284E-08  0.135284E-08   273.762       273.762    
  44  0.686075     -0.376768     -0.133403E-09  0.133403E-09   273.822       273.822    
  45  0.239608      -1.42875     -0.505879E-09  0.505879E-09   274.142       274.142    
  46  0.639668     -0.446805     -0.158201E-09  0.158201E-09   274.263       274.263    
  47  0.994566     -0.544912E-02 -0.192938E-11  0.192938E-11   274.266       274.266    
  48  0.309690      -1.17218     -0.415036E-09  0.415036E-09   274.313       274.313    
  49  0.673095E-01  -2.69845     -0.955445E-09  0.955445E-09   274.417       274.417    
  50  0.514449     -0.664658     -0.235336E-09  0.235336E-09   275.037       275.037    
  51  0.363627E-01  -3.31421     -0.117347E-08  0.117347E-08   275.085       275.085    
  52  0.404174     -0.905910     -0.320756E-09  0.320756E-09   275.418       275.418    
  53  0.781667     -0.246326     -0.872170E-10  0.872170E-10   275.998       275.998    
  54  0.866971     -0.142749     -0.505434E-10  0.505434E-10   276.319       276.319    
  55  0.722478     -0.325069     -0.115097E-09  0.115097E-09   277.233       277.233    
  56  0.102429      -2.27858     -0.806781E-09  0.806781E-09   277.653       277.653    
  57  0.428939     -0.846440     -0.299700E-09  0.299700E-09   277.753       277.753    
  58  0.394716     -0.929589     -0.329141E-09  0.329141E-09   277.934       277.934    
  59  0.797656     -0.226078     -0.800477E-10  0.800477E-10   278.042       278.042    
  60  0.747609     -0.290875     -0.102990E-09  0.102990E-09   278.219       278.219    
  61  0.321225      -1.13561     -0.402088E-09  0.402088E-09   278.382       278.382    
  62  0.698796     -0.358396     -0.126898E-09  0.126898E-09   278.652       278.652    
  63  0.788990     -0.237001     -0.839153E-10  0.839153E-10   278.658       278.658    
  64  0.441602     -0.817347     -0.289399E-09  0.289399E-09   278.991       278.991    
  65  0.858873     -0.152134     -0.538662E-10  0.538662E-10   279.096       279.096    
  66  0.110624      -2.20162     -0.779529E-09  0.779529E-09   279.148       279.148    
  67  0.339126      -1.08138     -0.382886E-09  0.382886E-09   280.549       280.549    
  68  0.854909     -0.156760     -0.555043E-10  0.555043E-10   281.217       281.217    
  69  0.827493     -0.189354     -0.670449E-10  0.670449E-10   253.032       253.032    
loop,thermsimp(1:2)       61  0.130768E-09  0.374176E-09

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294        287.16          1.00          0.36         14.17          5.35          0.02         20.90
Just calling func    0   0         20.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    295        272.93          1.00          0.36         14.12          5.39          0.01         20.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    272.93
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       61
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       62
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      299
neval,tstepnext:      294     299

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818855     -0.199848     -0.707605E-10  0.707605E-10   237.130       237.130    
   2  0.461702     -0.772835     -0.273639E-09  0.273639E-09   253.032       253.032    
   3  0.365313      -1.00700     -0.356550E-09  0.356550E-09   255.757       255.757    
   4  0.149954      -1.89743     -0.671824E-09  0.671824E-09   259.039       259.039    
   5  0.177255E-01  -4.03275     -0.142788E-08  0.142788E-08   261.176       261.176    
   6  0.925165     -0.777835E-01 -0.275409E-10  0.275409E-10   263.426       263.426    
   7  0.875078     -0.133442     -0.472479E-10  0.472479E-10   266.097       266.097    
   8  0.767847E-01  -2.56675     -0.908812E-09  0.908812E-09   266.675       266.675    
   9  0.502463     -0.688234     -0.243684E-09  0.243684E-09   267.113       267.113    
  10  0.974802E-01  -2.32811     -0.824315E-09  0.824315E-09   267.611       267.611    
  11  0.194250      -1.63861     -0.580184E-09  0.580184E-09   269.138       269.138    
  12  0.683033     -0.381212     -0.134976E-09  0.134976E-09   269.199       269.199    
  13  0.473365     -0.747889     -0.264806E-09  0.264806E-09   269.233       269.233    
  14  0.369022     -0.996899     -0.352973E-09  0.352973E-09   269.269       269.269    
  15  0.301984      -1.19738     -0.423958E-09  0.423958E-09   269.621       269.621    
  16  0.211120      -1.55533     -0.550697E-09  0.550697E-09   269.659       269.659    
  17  0.564408     -0.571978     -0.202521E-09  0.202521E-09   269.851       269.851    
  18  0.702192     -0.353549     -0.125181E-09  0.125181E-09   270.165       270.165    
  19  0.543109     -0.610445     -0.216141E-09  0.216141E-09   270.639       270.639    
  20  0.735809     -0.306784     -0.108623E-09  0.108623E-09   270.677       270.677    
  21  0.974545     -0.257848E-01 -0.912966E-11  0.912966E-11   270.806       270.806    
  22  0.984956     -0.151582E-01 -0.536706E-11  0.536706E-11   270.974       270.974    
  23  0.421423     -0.864118     -0.305959E-09  0.305959E-09   271.126       271.126    
  24  0.787019     -0.239503     -0.848009E-10  0.848009E-10   271.206       271.206    
  25  0.656415     -0.420962     -0.149051E-09  0.149051E-09   271.285       271.285    
  26  0.662574     -0.411623     -0.145744E-09  0.145744E-09   271.571       271.571    
  27  0.221043      -1.50940     -0.534435E-09  0.534435E-09   271.704       271.704    
  28  0.173317E-01  -4.05522     -0.143584E-08  0.143584E-08   271.739       271.739    
  29  0.734476     -0.308598     -0.109266E-09  0.109266E-09   271.782       271.782    
  30  0.184104      -1.69225     -0.599178E-09  0.599178E-09   271.918       271.918    
  31  0.362257      -1.01540     -0.359524E-09  0.359524E-09   271.918       271.918    
  32  0.495805     -0.701573     -0.248407E-09  0.248407E-09   271.964       271.964    
  33  0.943993     -0.576368E-01 -0.204075E-10  0.204075E-10   272.011       272.011    
  34  0.390395     -0.940596     -0.333038E-09  0.333038E-09   272.030       272.030    
  35  0.627153     -0.466565     -0.165197E-09  0.165197E-09   272.312       272.312    
  36  0.687721     -0.374372     -0.132554E-09  0.132554E-09   272.494       272.494    
  37  0.395512     -0.927574     -0.328427E-09  0.328427E-09   272.660       272.660    
  38  0.180043      -1.71456     -0.607077E-09  0.607077E-09   272.743       272.743    
  39  0.932850E-02  -4.67468     -0.165517E-08  0.165517E-08   273.064       273.064    
  40  0.628229     -0.464851     -0.164590E-09  0.164590E-09   273.095       273.095    
  41  0.172687      -1.75628     -0.621846E-09  0.621846E-09   273.130       273.130    
  42  0.301486      -1.19903     -0.424542E-09  0.424542E-09   273.221       273.221    
  43  0.581039     -0.542938     -0.192239E-09  0.192239E-09   273.239       273.239    
  44  0.941519     -0.602611E-01 -0.213367E-10  0.213367E-10   273.762       273.762    
  45  0.306203      -1.18351     -0.419046E-09  0.419046E-09   273.822       273.822    
  46  0.842415     -0.171482     -0.607170E-10  0.607170E-10   274.142       274.142    
  47  0.563339     -0.573873     -0.203192E-09  0.203192E-09   274.263       274.263    
  48  0.706515     -0.347410     -0.123008E-09  0.123008E-09   274.266       274.266    
  49  0.869582     -0.139742     -0.494787E-10  0.494787E-10   274.313       274.313    
  50  0.653799     -0.424956     -0.150465E-09  0.150465E-09   274.417       274.417    
  51  0.718217     -0.330984     -0.117192E-09  0.117192E-09   275.037       275.037    
  52  0.174803      -1.74409     -0.617533E-09  0.617533E-09   275.085       275.085    
  53  0.997065E-01  -2.30552     -0.816320E-09  0.816320E-09   275.418       275.418    
  54  0.332740      -1.10039     -0.389617E-09  0.389617E-09   275.998       275.998    
  55  0.754861     -0.281222     -0.995726E-10  0.995726E-10   276.319       276.319    
  56  0.237020      -1.43961     -0.509725E-09  0.509725E-09   277.233       277.233    
  57  0.985761     -0.143415E-01 -0.507792E-11  0.507792E-11   277.653       277.653    
  58  0.426936     -0.851122     -0.301358E-09  0.301358E-09   277.753       277.753    
  59  0.468722E-01  -3.06033     -0.108357E-08  0.108357E-08   277.934       277.934    
  60  0.934167     -0.680999E-01 -0.241122E-10  0.241122E-10   278.042       278.042    
  61  0.904933     -0.998948E-01 -0.353699E-10  0.353699E-10   278.219       278.219    
  62  0.692450E-01  -2.67010     -0.945407E-09  0.945407E-09   278.382       278.382    
  63  0.823118     -0.194656     -0.689220E-10  0.689220E-10   278.652       278.652    
  64  0.877175     -0.131049     -0.464007E-10  0.464007E-10   278.658       278.658    
  65  0.776059     -0.253526     -0.897663E-10  0.897663E-10   278.991       278.991    
  66  0.363134      -1.01298     -0.358669E-09  0.358669E-09   279.096       279.096    
  67  0.327909      -1.11502     -0.394796E-09  0.394796E-09   279.148       279.148    
  68  0.698754     -0.358457     -0.126919E-09  0.126919E-09   280.549       280.549    
  69  0.225050      -1.49143     -0.528073E-09  0.528073E-09   272.927       272.927    
loop,thermsimp(1:2)       62  0.707605E-10  0.273639E-09

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296        278.10          1.00          0.37         14.00          5.52          0.01         20.89
Just calling func    0   0         20.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    278.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       62
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       63
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      299
neval,tstepnext:      295     299

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134     -0.843235E-01 -0.298565E-10  0.298565E-10   237.130       237.130    
   2  0.806390     -0.215187     -0.761916E-10  0.761916E-10   253.032       253.032    
   3  0.887158     -0.119732     -0.423935E-10  0.423935E-10   255.757       255.757    
   4  0.876935     -0.131323     -0.464976E-10  0.464976E-10   259.039       259.039    
   5  0.537210     -0.621367     -0.220008E-09  0.220008E-09   261.176       261.176    
   6  0.877090     -0.131145     -0.464347E-10  0.464347E-10   263.426       263.426    
   7  0.185190      -1.68637     -0.597096E-09  0.597096E-09   266.097       266.097    
   8  0.235364      -1.44662     -0.512207E-09  0.512207E-09   266.675       266.675    
   9  0.941219     -0.605797E-01 -0.214495E-10  0.214495E-10   267.113       267.113    
  10  0.297254      -1.21317     -0.429548E-09  0.429548E-09   267.611       267.611    
  11  0.614978     -0.486169     -0.172138E-09  0.172138E-09   269.138       269.138    
  12  0.659901     -0.415665     -0.147175E-09  0.147175E-09   269.199       269.199    
  13  0.741845     -0.298615     -0.105731E-09  0.105731E-09   269.233       269.233    
  14  0.247629      -1.39582     -0.494221E-09  0.494221E-09   269.269       269.269    
  15  0.318328      -1.14467     -0.405295E-09  0.405295E-09   269.621       269.621    
  16  0.328897      -1.11201     -0.393731E-09  0.393731E-09   269.659       269.659    
  17  0.356713      -1.03082     -0.364985E-09  0.364985E-09   269.851       269.851    
  18  0.559005     -0.581597     -0.205927E-09  0.205927E-09   270.165       270.165    
  19  0.793456     -0.231357     -0.819169E-10  0.819169E-10   270.639       270.639    
  20  0.646581     -0.436056     -0.154395E-09  0.154395E-09   270.677       270.677    
  21  0.271006      -1.30561     -0.462280E-09  0.462280E-09   270.806       270.806    
  22  0.662259     -0.412098     -0.145912E-09  0.145912E-09   270.974       270.974    
  23  0.732452     -0.311358     -0.110243E-09  0.110243E-09   271.126       271.126    
  24  0.485036     -0.723533     -0.256182E-09  0.256182E-09   271.206       271.206    
  25  0.888303E-01  -2.42103     -0.857216E-09  0.857216E-09   271.285       271.285    
  26  0.330575      -1.10692     -0.391930E-09  0.391930E-09   271.571       271.571    
  27  0.985376     -0.147322E-01 -0.521625E-11  0.521625E-11   271.704       271.704    
  28  0.103613      -2.26709     -0.802711E-09  0.802711E-09   271.739       271.739    
  29  0.979769     -0.204384E-01 -0.723666E-11  0.723666E-11   271.782       271.782    
  30  0.711358     -0.340579     -0.120589E-09  0.120589E-09   271.918       271.918    
  31  0.476344     -0.741615     -0.262584E-09  0.262584E-09   271.918       271.918    
  32  0.713503     -0.337568     -0.119523E-09  0.119523E-09   271.964       271.964    
  33  0.858234     -0.152879     -0.541300E-10  0.541300E-10   272.011       272.011    
  34  0.763219     -0.270210     -0.956735E-10  0.956735E-10   272.030       272.030    
  35  0.279773      -1.27378     -0.451008E-09  0.451008E-09   272.312       272.312    
  36  0.214949      -1.53735     -0.544332E-09  0.544332E-09   272.494       272.494    
  37  0.179100      -1.71981     -0.608936E-09  0.608936E-09   272.660       272.660    
  38  0.739196     -0.302193     -0.106998E-09  0.106998E-09   272.743       272.743    
  39  0.221214      -1.50862     -0.534160E-09  0.534160E-09   272.927       272.927    
  40  0.486570     -0.720375     -0.255064E-09  0.255064E-09   273.064       273.064    
  41  0.931298     -0.711756E-01 -0.252012E-10  0.252012E-10   273.095       273.095    
  42  0.384548     -0.955686     -0.338381E-09  0.338381E-09   273.130       273.130    
  43  0.929448     -0.731640E-01 -0.259053E-10  0.259053E-10   273.221       273.221    
  44  0.750186     -0.287435     -0.101772E-09  0.101772E-09   273.239       273.239    
  45  0.250177      -1.38559     -0.490597E-09  0.490597E-09   273.762       273.762    
  46  0.461530     -0.773208     -0.273771E-09  0.273771E-09   273.822       273.822    
  47  0.923518     -0.795653E-01 -0.281718E-10  0.281718E-10   274.142       274.142    
  48  0.440516     -0.819809     -0.290271E-09  0.290271E-09   274.263       274.263    
  49  0.806388     -0.215190     -0.761925E-10  0.761925E-10   274.266       274.266    
  50  0.465528     -0.764584     -0.270717E-09  0.270717E-09   274.313       274.313    
  51  0.272837      -1.29888     -0.459896E-09  0.459896E-09   274.417       274.417    
  52  0.732457     -0.311351     -0.110240E-09  0.110240E-09   275.037       275.037    
  53  0.110782      -2.20019     -0.779023E-09  0.779023E-09   275.085       275.085    
  54  0.749498     -0.288352     -0.102097E-09  0.102097E-09   275.418       275.418    
  55  0.512666     -0.668131     -0.236566E-09  0.236566E-09   275.998       275.998    
  56  0.837759     -0.177024     -0.626793E-10  0.626793E-10   276.319       276.319    
  57  0.833676     -0.181911     -0.644093E-10  0.644093E-10   277.233       277.233    
  58  0.544992     -0.606984     -0.214916E-09  0.214916E-09   277.653       277.653    
  59  0.280759      -1.27026     -0.449762E-09  0.449762E-09   277.753       277.753    
  60  0.856455     -0.154954     -0.548647E-10  0.548647E-10   277.934       277.934    
  61  0.989643     -0.104109E-01 -0.368621E-11  0.368621E-11   278.042       278.042    
  62  0.660171     -0.415257     -0.147031E-09  0.147031E-09   278.219       278.219    
  63  0.671572     -0.398135     -0.140968E-09  0.140968E-09   278.382       278.382    
  64  0.854612     -0.157108     -0.556273E-10  0.556273E-10   278.652       278.652    
  65  0.836546     -0.178474     -0.631924E-10  0.631924E-10   278.658       278.658    
  66  0.656555     -0.420749     -0.148975E-09  0.148975E-09   278.991       278.991    
  67  0.186674      -1.67839     -0.594270E-09  0.594270E-09   279.096       279.096    
  68  0.998004     -0.199807E-02 -0.707459E-12  0.707459E-12   279.148       279.148    
  69  0.492155     -0.708961     -0.251023E-09  0.251023E-09   278.101       278.101    
loop,thermsimp(1:2)       63  0.298565E-10  0.761916E-10

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297        311.95          1.00          0.37         14.09          5.38          0.02         20.84
Just calling func    0   0         20.84


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    298        302.67          1.00          0.36         14.07          5.46          0.01         20.90
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4    279.15
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       63
neval is:      297
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     300       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    299        244.83          1.00          0.36         14.06          5.46          0.01         20.90
iter,obj,time:    300        249.80          1.00          0.37         14.04          5.44          0.01         20.85
iter,obj,time:    301        245.66          1.01          0.36         14.11          5.42          0.01         20.90
iter,obj,time:    302        248.80          1.00          0.37         14.13          5.36          0.01         20.86
iter,obj,time:    303        245.15          1.00          0.37         13.95          5.54          0.01         20.86
iter,obj,time:    304        249.05          1.00          0.37         14.02          5.45          0.01         20.85
iter,obj,time:    305        246.45          1.00          0.36         14.07          5.39          0.01         20.83
iter,obj,time:    306        249.94          1.00          0.36         14.07          5.47          0.01         20.91
iter,obj,time:    307        251.24          1.00          0.37         14.06          5.41          0.01         20.85
iter,obj,time:    308        251.68          1.00          0.37         14.10          5.39          0.01         20.87
iter,obj,time:    309        250.33          1.00          0.37         14.04          5.46          0.01         20.88
iter,obj,time:    310        251.71          1.00          0.36         14.13          5.31          0.01         20.81
iter,obj,time:    311        250.28          1.00          0.37         14.10          5.46          0.01         20.93
iter,obj,time:    312        249.61          1.00          0.37         14.14          5.31          0.01         20.83
iter,obj,time:    313        251.23          1.00          0.36         14.04          5.46          0.01         20.88
iter,obj,time:    314        252.49          1.00          0.36         14.01          5.49          0.01         20.87
iter,obj,time:    315        252.97          1.01          0.36         14.06          5.45          0.01         20.88
iter,obj,time:    316        252.32          1.00          0.37         13.99          5.58          0.01         20.95
iter,obj,time:    317        252.58          1.00          0.37         14.12          5.43          0.01         20.93
iter,obj,time:    318        254.01          1.00          0.37         14.08          5.40          0.01         20.86
iter,obj,time:    319        249.82          1.00          0.36         14.07          5.38          0.01         20.82
iter,obj,time:    320        252.71          1.00          0.37         14.06          5.39          0.01         20.83
iter,obj,time:    321        252.40          1.01          0.36         14.08          5.44          0.01         20.90
iter,obj,time:    322        255.99          1.00          0.37         14.03          5.49          0.01         20.89
iter,obj,time:    323        252.57          1.00          0.36         13.98          5.52          0.01         20.87
iter,obj,time:    324        256.82          1.00          0.36         14.02          5.50          0.01         20.89
iter,obj,time:    325        252.07          1.01          0.36         14.00          5.49          0.01         20.87
iter,obj,time:    326        251.95          1.00          0.36         14.08          5.43          0.01         20.89
iter,obj,time:    327        252.40          1.00          0.37         14.10          5.41          0.01         20.89
iter,obj,time:    328        252.40          1.00          0.37         14.14          5.41          0.01         20.92
iter,obj,time:    329        252.22          1.00          0.36         14.04          5.57          0.01         20.98
iter,obj,time:    330        251.07          1.00          0.37         14.05          5.48          0.01         20.91
iter,obj,time:    331        252.24          1.00          0.37         14.15          5.41          0.01         20.94
iter,obj,time:    332        252.47          1.00          0.37         14.16          5.34          0.01         20.88
iter,obj,time:    333        253.26          1.00          0.36         14.08          5.40          0.01         20.85
iter,obj,time:    334        253.89          1.00          0.36         14.08          5.41          0.01         20.86
iter,obj,time:    335        256.53          1.00          0.37         14.12          5.38          0.01         20.87
iter,obj,time:    336        254.10          1.01          0.36         14.07          5.40          0.01         20.84
iter,obj,time:    337        251.92          1.00          0.37         14.06          5.39          0.01         20.83
iter,obj,time:    338        249.27          1.00          0.37         14.07          5.48          0.01         20.92
iter,obj,time:    339        252.13          1.00          0.36         14.14          5.39          0.01         20.90
iter,obj,time:    340        254.15          1.00          0.36         14.09          5.46          0.01         20.92
iter,obj,time:    341        249.21          1.00          0.37         14.07          5.42          0.01         20.87
iter,obj,time:    342        253.14          1.00          0.37         14.09          5.39          0.01         20.86
iter,obj,time:    343        251.29          1.00          0.37         14.04          5.47          0.01         20.88
iter,obj,time:    344        253.27          1.00          0.37         14.04          5.43          0.01         20.84
iter,obj,time:    345        254.74          1.00          0.37         14.02          5.49          0.01         20.88
iter,obj,time:    346        256.40          1.00          0.37         14.03          5.49          0.01         20.89
iter,obj,time:    347        254.27          1.00          0.36         14.13          5.31          0.01         20.81
iter,obj,time:    348        254.93          1.00          0.36         14.02          5.52          0.01         20.91
iter,obj,time:    349        253.98          1.00          0.36         14.07          5.42          0.01         20.85
iter,obj,time:    350        254.37          1.00          0.36         14.05          5.53          0.01         20.95
iter,obj,time:    351        255.07          1.01          0.36         14.08          5.44          0.01         20.90
iter,obj,time:    352        254.42          1.01          0.36         14.06          5.44          0.01         20.88
iter,obj,time:    353        252.40          1.00          0.36         14.09          5.42          0.01         20.88
iter,obj,time:    354        255.47          1.00          0.37         14.04          5.46          0.01         20.87
iter,obj,time:    355        247.69          1.00          0.36         14.02          5.51          0.01         20.89
iter,obj,time:    356        254.71          1.00          0.36         14.06          5.41          0.01         20.84
iter,obj,time:    357        254.64          1.00          0.37         14.08          5.46          0.01         20.91
iter,obj,time:    358        257.40          1.00          0.36         14.03          5.53          0.01         20.93
iter,obj,time:    359        257.66          1.00          0.36         14.02          5.48          0.01         20.87
iter,obj,time:    360        243.64          1.00          0.37         14.10          5.43          0.01         20.89
iter,obj,time:    361        255.33          1.00          0.36         14.11          5.43          0.01         20.91
iter,obj,time:    362        257.02          1.00          0.36         14.10          5.36          0.01         20.82
iter,obj,time:    363        253.14          1.00          0.37         13.98          5.51          0.01         20.86
iter,obj,time:    364        250.48          1.00          0.37         14.07          5.44          0.01         20.88
iter,obj,time:    365        254.05          1.00          0.37         14.09          5.54          0.01         21.00
iter,obj,time:    366        260.37          1.00          0.37         14.08          5.44          0.01         20.89


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     369      69
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     365




loop,nloop:      63      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    112.830      0.300000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.354071E-09           299
loop is:       64
neval is:      365


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.106221E-09           309

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      309
neval,tstepnext:      365     309

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.112882      -2.18141     -0.231712E-09  0.231712E-09   237.130       237.130    
   2  0.951717     -0.494875E-01 -0.525663E-11  0.525663E-11   244.830       244.830    
   3  0.697059     -0.360886     -0.383337E-10  0.383337E-10   249.803       249.803    
   4  0.128581      -2.05120     -0.217881E-09  0.217881E-09   245.660       245.660    
   5  0.505674     -0.681862     -0.724283E-10  0.724283E-10   248.803       248.803    
   6  0.437264     -0.827217     -0.878681E-10  0.878681E-10   245.154       245.154    
   7  0.169074E-01  -4.08000     -0.433384E-09  0.433384E-09   249.045       249.045    
   8  0.271524      -1.30371     -0.138481E-09  0.138481E-09   246.448       246.448    
   9  0.303579      -1.19211     -0.126628E-09  0.126628E-09   249.940       249.940    
  10  0.864212     -0.145937     -0.155016E-10  0.155016E-10   251.242       251.242    
  11  0.885526     -0.121573     -0.129137E-10  0.129137E-10   251.676       251.676    
  12  0.874960     -0.133577     -0.141887E-10  0.141887E-10   250.328       250.328    
  13  0.252551      -1.37614     -0.146176E-09  0.146176E-09   251.705       251.705    
  14  0.971332     -0.290866E-01 -0.308961E-11  0.308961E-11   250.275       250.275    
  15  0.248885      -1.39077     -0.147729E-09  0.147729E-09   249.609       249.609    
  16  0.174880      -1.74365     -0.185213E-09  0.185213E-09   251.233       251.233    
  17  0.936752     -0.653364E-01 -0.694012E-11  0.694012E-11   252.495       252.495    
  18  0.735180     -0.307640     -0.326779E-10  0.326779E-10   252.970       252.970    
  19  0.628220     -0.464865     -0.493785E-10  0.493785E-10   252.316       252.316    
  20  0.229122      -1.47350     -0.156517E-09  0.156517E-09   252.579       252.579    
  21  0.210657      -1.55753     -0.165442E-09  0.165442E-09   254.007       254.007    
  22  0.919727     -0.836782E-01 -0.888841E-11  0.888841E-11   249.816       249.816    
  23  0.936665     -0.654300E-01 -0.695006E-11  0.695006E-11   252.712       252.712    
  24  0.180666      -1.71111     -0.181756E-09  0.181756E-09   252.396       252.396    
  25  0.663346E-01  -2.71304     -0.288183E-09  0.288183E-09   255.993       255.993    
  26  0.362485      -1.01477     -0.107791E-09  0.107791E-09   252.569       252.569    
  27  0.930516E-01  -2.37460     -0.252233E-09  0.252233E-09   256.816       256.816    
  28  0.509744E-01  -2.97643     -0.316161E-09  0.316161E-09   252.070       252.070    
  29  0.541677     -0.613085     -0.651227E-10  0.651227E-10   251.951       251.951    
  30  0.866427     -0.143377     -0.152297E-10  0.152297E-10   252.400       252.400    
  31  0.113906E-01  -4.47497     -0.475337E-09  0.475337E-09   252.400       252.400    
  32  0.139537      -1.96943     -0.209195E-09  0.209195E-09   252.217       252.217    
  33  0.952541     -0.486222E-01 -0.516472E-11  0.516472E-11   251.069       251.069    
  34  0.572081     -0.558475     -0.593220E-10  0.593220E-10   252.239       252.239    
  35  0.126546      -2.06715     -0.219575E-09  0.219575E-09   252.465       252.465    
  36  0.627507     -0.466000     -0.494992E-10  0.494992E-10   253.264       253.264    
  37  0.836066     -0.179047     -0.190186E-10  0.190186E-10   253.887       253.887    
  38  0.685706     -0.377306     -0.400779E-10  0.400779E-10   256.531       256.531    
  39  0.801164     -0.221689     -0.235481E-10  0.235481E-10   254.101       254.101    
  40  0.431239     -0.841093     -0.893420E-10  0.893420E-10   251.918       251.918    
  41  0.809227     -0.211675     -0.224845E-10  0.224845E-10   249.267       249.267    
  42  0.522305     -0.649503     -0.689911E-10  0.689911E-10   252.126       252.126    
  43  0.710764E-03  -7.24917     -0.770017E-09  0.770017E-09   254.153       254.153    
  44  0.866199     -0.143641     -0.152577E-10  0.152577E-10   249.211       249.211    
  45  0.856579     -0.154809     -0.164440E-10  0.164440E-10   253.136       253.136    
  46  0.630869     -0.460657     -0.489316E-10  0.489316E-10   251.290       251.290    
  47  0.275611      -1.28877     -0.136894E-09  0.136894E-09   253.273       253.273    
  48  0.358195      -1.02668     -0.109055E-09  0.109055E-09   254.741       254.741    
  49  0.506528     -0.680175     -0.722491E-10  0.722491E-10   256.404       256.404    
  50  0.126758      -2.06547     -0.219397E-09  0.219397E-09   254.270       254.270    
  51  0.520744     -0.652498     -0.693092E-10  0.693092E-10   254.933       254.933    
  52  0.490974     -0.711364     -0.755621E-10  0.755621E-10   253.985       253.985    
  53  0.169205      -1.77665     -0.188718E-09  0.188718E-09   254.367       254.367    
  54  0.488621     -0.716167     -0.760723E-10  0.760723E-10   255.067       255.067    
  55  0.756993     -0.278401     -0.295722E-10  0.295722E-10   254.416       254.416    
  56  0.162232      -1.81873     -0.193188E-09  0.193188E-09   252.399       252.399    
  57  0.461154     -0.774023     -0.822177E-10  0.822177E-10   255.470       255.470    
  58  0.470698     -0.753538     -0.800418E-10  0.800418E-10   247.686       247.686    
  59  0.263971      -1.33192     -0.141478E-09  0.141478E-09   254.709       254.709    
  60  0.962850     -0.378581E-01 -0.402134E-11  0.402134E-11   254.644       254.644    
  61  0.369019     -0.996906     -0.105893E-09  0.105893E-09   257.396       257.396    
  62  0.967715     -0.328182E-01 -0.348599E-11  0.348599E-11   257.659       257.659    
  63  0.661606     -0.413085     -0.438784E-10  0.438784E-10   243.637       243.637    
  64  0.463584     -0.768768     -0.816596E-10  0.816596E-10   255.326       255.326    
  65  0.174682      -1.74479     -0.185334E-09  0.185334E-09   257.022       257.022    
  66  0.397740     -0.921958     -0.979316E-10  0.979316E-10   253.143       253.143    
  67  0.293867      -1.22463     -0.130082E-09  0.130082E-09   250.481       250.481    
  68  0.888269     -0.118481     -0.125852E-10  0.125852E-10   254.046       254.046    
  69  0.577537     -0.548982     -0.583136E-10  0.583136E-10   260.375       260.375    
loop,thermsimp(1:2)       64  0.231712E-09  0.525663E-11

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    367        279.81          1.00          0.37         14.05          5.48          0.02         20.91
Just calling func    0   0         20.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    368        262.43          1.00          0.36         14.05          5.45          0.01         20.87
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4    260.37
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
