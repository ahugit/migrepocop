nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    100.000       0.00000    
T0,Tstep:    100.557      0.200000    
Tfreq:   10
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    100.000       0.00000    
T0,Tstep:    100.557      0.200000    
Tfreq:   10
 Estimating   60 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj:      2              502.78          0.47          0.35         15.36
iter,obj:      3              481.64          0.48          0.36         15.51
iter,obj:      4             2055.18          0.48          0.35         15.44
iter,obj:      5              501.99          0.48          0.35         15.45
iter,obj:      6              574.53          0.48          0.36         15.34
iter,obj:      7             1232.15          0.48          0.36         15.38
iter,obj:      8              522.07          0.48          0.35         15.45
iter,obj:      9              491.95          0.48          0.36         15.38
iter,obj:     10              598.98          0.48          0.35         15.41
iter,obj:     11              473.30          0.48          0.38         15.45
iter,obj:     12              961.76          0.48          0.36         15.43
iter,obj:     13              513.02          0.48          0.36         15.45
iter,obj:     14              596.17          0.48          0.35         15.48
iter,obj:     15              390.16          0.48          0.36         15.33
iter,obj:     16              503.48          0.46          0.36         15.38
iter,obj:     17              501.74          0.45          0.36         15.43
iter,obj:     18              483.41          0.45          0.36         15.41
iter,obj:     19              502.83          0.45          0.35         15.45
iter,obj:     20              549.64          0.45          0.36         15.30
iter,obj:     21              730.51          0.45          0.36         15.42
iter,obj:     22              828.53          0.45          0.36         15.43
iter,obj:     23              664.15          0.45          0.36         15.45
iter,obj:     24             1978.29          0.45          0.36         15.45
iter,obj:     25              718.18          0.45          0.36         15.48
iter,obj:     26              698.10          0.45          0.36         15.41
iter,obj:     27              779.52          0.45          0.36         15.52
iter,obj:     28              917.14          0.46          0.36         15.42
iter,obj:     29              480.74          0.45          0.36         15.35
iter,obj:     30              455.49          0.45          0.36         15.36
iter,obj:     31              735.95          0.45          0.36         15.39
iter,obj:     32              635.45          0.45          0.36         15.39
iter,obj:     33              672.83          0.45          0.36         15.37
iter,obj:     34              623.54          0.45          0.36         15.41
iter,obj:     35             1312.14          0.46          0.36         15.37
iter,obj:     36              674.69          0.45          0.36         15.42
iter,obj:     37              621.22          0.45          0.36         15.40
iter,obj:     38              682.90          0.45          0.36         15.48
iter,obj:     39              667.47          0.45          0.36         15.30
iter,obj:     40              529.39          0.45          0.36         15.41
iter,obj:     41              530.58          0.45          0.36         15.38
iter,obj:     42              619.50          0.46          0.36         15.38
iter,obj:     43             1123.59          0.45          0.36         15.45
iter,obj:     44              598.47          0.45          0.36         15.45
iter,obj:     45              840.14          0.45          0.37         15.36
iter,obj:     46              475.24          0.45          0.36         15.38
iter,obj:     47              529.94          0.45          0.36         15.43
iter,obj:     48              383.65          0.45          0.36         15.32
iter,obj:     49              426.24          0.48          0.36         15.41
iter,obj:     50              454.67          0.48          0.35         15.34
iter,obj:     51              599.12          0.48          0.36         15.41
iter,obj:     52              501.39          0.48          0.35         15.43
iter,obj:     53              383.93          0.48          0.35         15.44
iter,obj:     54              416.39          0.48          0.35         15.45
iter,obj:     55              449.63          0.48          0.36         15.43
iter,obj:     56              599.14          0.48          0.36         15.48
iter,obj:     57              497.81          0.48          0.35         15.41
iter,obj:     58             1015.14          0.48          0.36         15.41
iter,obj:     59              791.24          0.48          0.35         15.44
iter,obj:     60              427.89          0.48          0.35         15.35
iter,obj:     61              549.79          0.48          0.36         15.36
iter,obj:     62              601.51          0.48          0.35         15.47

    1    502.78        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

    2    481.64        6.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

    3    2055.2        1.756      3.966      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

    4    501.99        1.756     -1.034      8.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

    5    574.53        1.756     -1.034      3.256     -100.0      5.368    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

    6    1232.1        1.756     -1.034      3.256     -100.0     0.1683    
                       4.149     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

    7    522.07        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506      5.388     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

    8    491.95        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      7.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

    9    598.98        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171      3.677    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   10    473.30        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                       4.171     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   11    961.76        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286      2.193      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   12    513.02        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                     -0.2619     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   13    596.17        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600     0.1016E+05  8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   14    390.16        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.     0.1265E+05 -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   15    503.48        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -1137.     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   16    501.74        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -10.03     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   17    483.41        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -7.764     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   18    502.83        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -8.809     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   19    549.64        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.196     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   20    730.51        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.5264    -0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   21    828.53        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01 0.4327      0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   22    664.15        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000     0.3694    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   23    1978.3        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                      0.3461    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   24    718.18        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539     0.3828    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   25    698.10        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172     0.3608    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   26    779.52        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392     0.3314    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   27    917.14        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686     0.4908    

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   28    480.74        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.4625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   29    455.49        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.522      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   30    735.95        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.6938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   31    635.45        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.5436    
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   32    672.83        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.6022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   33    623.54        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022     0.4771    -0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   34    1312.1        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01 0.4430    -0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   35    674.69        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01 0.4806    -0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   36    621.22        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01 0.4429    
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   37    682.90        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                      0.4409     0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   38    667.47        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.5911    -0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   39    529.39        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01 0.2862E-01 -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   40    530.58        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -2.820      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   41    619.50        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                     -0.3751     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   42    1123.6        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375    -0.3682      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   43    598.47        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      8600.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   44    840.14        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      6886.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   45    475.24        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.400      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   46    529.94        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      9.200      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   47    383.65        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       2.500      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   48    426.24        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      2.500      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   49    454.67        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.400      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   50    599.12        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      9.200     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   51    501.39        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -250.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   52    383.93        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      2.500      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   53    416.39        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      2.500      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   54    449.63        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.500      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   55    599.14        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.400    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   56    497.81        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -1250.     0.1000      1.000      1.000      9.300    
                       9.200      8000.     0.1000    

   57    1015.1        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      2.500      1.000      9.300    
                       9.200      8000.     0.1000    

   58    791.24        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      2.500      9.300    
                       9.200      8000.     0.1000    

   59    427.89        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.600    
                       9.200      8000.     0.1000    

   60    549.79        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.500      8000.     0.1000    

   61    601.51        1.756     -1.034      3.256     -100.0     0.1683    
                     -0.8506     0.3885     -100.0      2.171     -1.323    
                     -0.8286     -2.807      2.009      0.000     0.6600    
                      -1.262     -20.00      0.000      0.000     -1.221    

                      -1.600      6773.      8434.     -454.7     -1451.    
                      -4.215     -5.013     -3.882     -15.33     -5.168    
                      -13.81     -2.696     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2644E-01-0.6728E-01  0.000    -0.1306    
                     -0.1539    -0.1172    -0.1392    -0.1686    -0.9209E-02

                     -0.7625     -2.822      1.382     0.1938     0.4358E-01
                      0.1022    -0.2291E-01-0.5704E-01-0.1937E-01-0.5706E-01
                     -0.5907E-01 0.9111E-01-0.2714     -3.120      1.382    

                      -1.375     -1.368      3440.      2754.      0.000    
                       0.000      9.100      8.900      0.000     0.1000    
                       1.000      1.000      9.100      8.900     -100.0    

                      0.1000      1.000      1.000      9.200      9.100    
                      -500.0     0.1000      1.000      1.000      9.300    
                       9.200      9600.     0.1000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          61          61

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        1
neval is:       61


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       71
neval,tstepnext:       61      71

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.192066      -1.64992      -165.910       165.910       502.783       668.693    
   2  0.495157     -0.702879      -70.6791       70.6791       481.637       552.316    
   3  0.185553      -1.68441      -169.379       169.379       2055.18       2224.56    
   4  0.350928E-01  -3.34976      -336.840       336.840       501.987       838.827    
   5  0.163167      -1.81298      -182.307       182.307       574.528       756.835    
   6  0.937470     -0.645701E-01  -6.49295       6.49295       1232.15       1238.64    
   7  0.529879     -0.635107      -63.8641       63.8641       522.066       585.930    
   8  0.754689     -0.281450      -28.3016       28.3016       491.950       520.251    
   9  0.536865     -0.622009      -62.5471       62.5471       598.976       661.523    
  10  0.396474     -0.925144      -93.0293       93.0293       473.296       566.325    
  11  0.189132      -1.66531      -167.458       167.458       961.761       1129.22    
  12  0.259830      -1.34773      -135.523       135.523       513.023       648.546    
  13  0.416981     -0.874715      -87.9583       87.9583       596.173       684.131    
  14  0.954834     -0.462182E-01  -4.64754       4.64754       390.156       394.803    
  15  0.320751      -1.13709      -114.342       114.342       503.480       617.822    
  16  0.405606E-01  -3.20496      -322.280       322.280       501.739       824.019    
  17  0.697180     -0.360712      -36.2719       36.2719       483.406       519.678    
  18  0.909227     -0.951599E-01  -9.56896       9.56896       502.830       512.399    
  19  0.983318     -0.168227E-01  -1.69163       1.69163       549.639       551.331    
  20  0.673248     -0.395642      -39.7844       39.7844       730.513       770.298    
  21  0.814570     -0.205095      -20.6237       20.6237       828.527       849.150    
  22  0.756029     -0.279676      -28.1233       28.1233       664.153       692.276    
  23  0.576701     -0.550432      -55.3495       55.3495       1978.29       2033.64    
  24  0.321232      -1.13559      -114.191       114.191       718.178       832.370    
  25  0.289360      -1.24008      -124.699       124.699       698.099       822.797    
  26  0.756206     -0.279442      -28.0997       28.0997       779.524       807.624    
  27  0.844183     -0.169386      -17.0329       17.0329       917.136       934.169    
  28  0.852202     -0.159931      -16.0821       16.0821       480.741       496.823    
  29  0.936639     -0.654568E-01  -6.58211       6.58211       455.492       462.074    
  30  0.601717E-01  -2.81055      -282.619       282.619       735.953       1018.57    
  31  0.880020     -0.127811      -12.8522       12.8522       635.448       648.300    
  32  0.570196     -0.561774      -56.4901       56.4901       672.831       729.321    
  33  0.291898      -1.23135      -123.820       123.820       623.539       747.359    
  34  0.840841     -0.173352      -17.4317       17.4317       1312.14       1329.57    
  35  0.534635E-02  -5.23134      -526.046       526.046       674.686       1200.73    
  36  0.508411     -0.676465      -68.0230       68.0230       621.221       689.244    
  37  0.524409     -0.645483      -64.9076       64.9076       682.905       747.812    
  38  0.408799     -0.894531      -89.9509       89.9509       667.470       757.421    
  39  0.119956      -2.12063      -213.243       213.243       529.387       742.630    
  40  0.122630      -2.09858      -211.026       211.026       530.582       741.608    
  41  0.612064     -0.490918      -49.3650       49.3650       619.499       668.864    
  42  0.803626     -0.218621      -21.9838       21.9838       1123.59       1145.57    
  43  0.384701     -0.955288      -96.0605       96.0605       598.472       694.532    
  44  0.936906     -0.651721E-01  -6.55348       6.55348       840.143       846.696    
  45  0.985622     -0.144824E-01  -1.45630       1.45630       475.237       476.693    
  46  0.400198     -0.915795      -92.0892       92.0892       529.943       622.032    
  47  0.801690E-01  -2.52362      -253.766       253.766       383.650       637.416    
  48  0.802571     -0.219935      -22.1159       22.1159       426.237       448.353    
  49  0.473835     -0.746897      -75.1054       75.1054       454.674       529.779    
  50  0.261786      -1.34023      -134.769       134.769       599.121       733.889    
  51  0.306155      -1.18366      -119.025       119.025       501.388       620.413    
  52  0.586847     -0.532991      -53.5957       53.5957       383.931       437.527    
  53  0.589061     -0.529226      -53.2171       53.2171       416.387       469.604    
  54  0.978624     -0.216074E-01  -2.17277       2.17277       449.630       451.802    
  55  0.299667      -1.20508      -121.179       121.179       599.144       720.323    
  56  0.366531      -1.00367      -100.926       100.926       497.814       598.740    
  57  0.153257      -1.87564      -188.608       188.608       1015.14       1203.75    
  58  0.833987     -0.181537      -18.2548       18.2548       791.241       809.496    
  59  0.241279      -1.42180      -142.971       142.971       427.890       570.861    
  60  0.735602E-01  -2.60965      -262.417       262.417       549.794       812.211    
  61  0.310984      -1.16801      -117.451       117.451       601.512       718.963    
loop,thermsimp(1:2)        1   165.910       70.6791    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     63              460.86          0.48          0.36         15.42
Just calling func    0   0         23.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    460.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    100.557                71
loop is:        1
neval is:       62
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        2
neval is:       62


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       71
neval,tstepnext:       62      71

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.877947     -0.130169      -13.0894       13.0894       390.156       403.245    
   2  0.829957     -0.186382      -18.7419       18.7419       383.931       402.673    
   3  0.533397     -0.628490      -63.1988       63.1988       426.237       489.436    
   4  0.840141     -0.174186      -17.5155       17.5155       449.630       467.145    
   5  0.952108E-02  -4.65425      -468.015       468.015       455.492       923.507    
   6  0.644471     -0.439325      -44.1770       44.1770       416.387       460.564    
   7  0.949623     -0.516897E-01  -5.19774       5.19774       475.237       480.434    
   8  0.261883      -1.33986      -134.732       134.732       480.741       615.472    
   9  0.537485     -0.620855      -62.4310       62.4310       502.830       565.261    
  10  0.967512     -0.330274E-01  -3.32113       3.32113       483.406       486.727    
  11  0.515125     -0.663345      -66.7037       66.7037       491.950       558.653    
  12  0.778801     -0.250000      -25.1391       25.1391       454.674       479.813    
  13  0.470031E-01  -3.05754      -307.456       307.456       549.639       857.095    
  14  0.868389     -0.141115      -14.1900       14.1900       481.637       495.827    
  15  0.306563      -1.18233      -118.891       118.891       473.296       592.187    
  16  0.882076     -0.125477      -12.6176       12.6176       427.890       440.508    
  17  0.378915     -0.970442      -97.5843       97.5843       522.066       619.650    
  18  0.796921     -0.226999      -22.8263       22.8263       497.814       520.640    
  19  0.817278     -0.201776      -20.2899       20.2899       503.480       523.770    
  20  0.966162     -0.344239E-01  -3.46155       3.46155       501.388       504.850    
  21  0.235578      -1.44571      -145.376       145.376       529.943       675.319    
  22  0.743896     -0.295854      -29.7500       29.7500       383.650       413.400    
  23  0.804551     -0.217471      -21.8681       21.8681       635.448       657.316    
  24  0.556828     -0.585499      -58.8758       58.8758       513.023       571.899    
  25  0.366038      -1.00502      -101.061       101.061       598.976       700.038    
  26  0.577638     -0.548808      -55.1862       55.1862       502.783       557.969    
  27  0.460967     -0.774430      -77.8740       77.8740       619.499       697.373    
  28  0.375327     -0.979957      -98.5411       98.5411       596.173       694.714    
  29  0.386648     -0.950240      -95.5528       95.5528       621.221       716.773    
  30  0.425491     -0.854512      -85.9268       85.9268       664.153       750.080    
  31  0.273048E-01  -3.60069      -362.073       362.073       598.472       960.545    
  32  0.468881     -0.757406      -76.1622       76.1622       601.512       677.674    
  33  0.143674      -1.94021      -195.100       195.100       599.144       794.245    
  34  0.426081     -0.853127      -85.7875       85.7875       672.831       758.618    
  35  0.839214     -0.175289      -17.6265       17.6265       599.121       616.747    
  36  0.650628E-01  -2.73240      -274.761       274.761       530.582       805.342    
  37  0.256237      -1.36165      -136.923       136.923       529.387       666.310    
  38  0.752676     -0.284121      -28.5702       28.5702       623.539       652.109    
  39  0.980822E-01  -2.32195      -233.487       233.487       682.905       916.392    
  40  0.230023E-02  -6.07475      -610.856       610.856       574.528       1185.38    
  41  0.100586      -2.29675      -230.953       230.953       667.470       898.423    
  42  0.802078     -0.220549      -22.1777       22.1777       730.513       752.691    
  43  0.187157      -1.67581      -168.513       168.513       779.524       948.037    
  44  0.563660     -0.573305      -57.6495       57.6495       791.241       848.891    
  45  0.252020      -1.37825      -138.592       138.592       549.794       688.385    
  46  0.319902      -1.13974      -114.609       114.609       698.099       812.707    
  47  0.818477     -0.200310      -20.1425       20.1425       501.739       521.882    
  48  0.798703     -0.224766      -22.6017       22.6017       718.178       740.780    
  49  0.209527      -1.56290      -157.160       157.160       501.987       659.147    
  50  0.644070     -0.439948      -44.2397       44.2397       840.143       884.382    
  51  0.793036E-01  -2.53447      -254.858       254.858       828.527       1083.38    
  52  0.318312E-02  -5.74989      -578.189       578.189       917.136       1495.33    
  53  0.713264     -0.337904      -33.9784       33.9784       735.953       769.932    
  54  0.982669     -0.174834E-01  -1.75807       1.75807       961.761       963.519    
  55  0.898530     -0.106995      -10.7591       10.7591       1123.59       1134.35    
  56  0.860374     -0.150388      -15.1225       15.1225       674.686       689.809    
  57  0.296881      -1.21442      -122.118       122.118       1015.14       1137.26    
  58  0.554194     -0.590240      -59.3525       59.3525       1232.15       1291.50    
  59  0.533994     -0.627371      -63.0862       63.0862       1312.14       1375.22    
  60  0.332792      -1.10024      -110.636       110.636       1978.29       2088.93    
  61  0.351231      -1.04631      -105.213       105.213       460.858       566.072    
loop,thermsimp(1:2)        2   13.0894       18.7419    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     64              508.84          0.46          0.36         15.45
Just calling func    0   0         23.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    508.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    100.557                71
loop is:        2
neval is:       63
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        3
neval is:       63


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       71
neval,tstepnext:       63      71

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.897662     -0.107962      -10.8562       10.8562       383.931       394.787    
   2  0.450153     -0.798167      -80.2609       80.2609       390.156       470.417    
   3  0.572569E-01  -2.86021      -287.613       287.613       383.650       671.263    
   4  0.188960      -1.66622      -167.549       167.549       427.890       595.440    
   5  0.738563E-01  -2.60563      -262.014       262.014       416.387       678.401    
   6  0.141703      -1.95402      -196.490       196.490       449.630       646.119    
   7  0.887038     -0.119867      -12.0535       12.0535       454.674       466.727    
   8  0.483365     -0.726983      -73.1029       73.1029       475.237       548.339    
   9  0.118507      -2.13278      -214.465       214.465       483.406       697.871    
  10  0.902048     -0.103087      -10.3661       10.3661       426.237       436.603    
  11  0.671318     -0.398512      -40.0730       40.0730       481.637       521.710    
  12  0.486994     -0.719505      -72.3509       72.3509       501.388       573.739    
  13  0.502692     -0.687779      -69.1606       69.1606       497.814       566.974    
  14  0.681811     -0.383002      -38.5134       38.5134       501.739       540.252    
  15  0.515633     -0.662361      -66.6047       66.6047       503.480       570.084    
  16  0.419532E-02  -5.47379      -550.425       550.425       502.783       1053.21    
  17  0.560996E-01  -2.88063      -289.666       289.666       491.950       781.616    
  18  0.572389     -0.557937      -56.1042       56.1042       502.830       558.934    
  19  0.866528     -0.143260      -14.4058       14.4058       460.858       475.264    
  20  0.133741      -2.01185      -202.304       202.304       513.023       715.327    
  21  0.680978     -0.384226      -38.6364       38.6364       473.296       511.932    
  22  0.517524     -0.658700      -66.2366       66.2366       480.741       546.977    
  23  0.251548      -1.38012      -138.780       138.780       599.121       737.901    
  24  0.831536     -0.184481      -18.5508       18.5508       522.066       540.617    
  25  0.351126      -1.04661      -105.243       105.243       623.539       728.782    
  26  0.384786E-01  -3.25765      -327.578       327.578       635.448       963.026    
  27  0.684503     -0.379062      -38.1171       38.1171       501.987       540.104    
  28  0.449157     -0.800384      -80.4838       80.4838       529.387       609.871    
  29  0.476466E-01  -3.04394      -306.089       306.089       529.943       836.031    
  30  0.651372     -0.428674      -43.1060       43.1060       601.512       644.618    
  31  0.801033     -0.221853      -22.3088       22.3088       549.794       572.102    
  32  0.988574E-01  -2.31408      -232.696       232.696       674.686       907.382    
  33  0.661325     -0.413509      -41.5811       41.5811       596.173       637.754    
  34  0.579757     -0.545146      -54.8180       54.8180       619.499       674.317    
  35  0.966101E-03  -6.94224      -698.088       698.088       598.976       1297.06    
  36  0.618631     -0.480246      -48.2919       48.2919       621.221       669.512    
  37  0.670601     -0.399581      -40.1805       40.1805       718.178       758.359    
  38  0.212557      -1.54854      -155.716       155.716       664.153       819.869    
  39  0.120479      -2.11628      -212.806       212.806       730.513       943.319    
  40  0.975718     -0.245818E-01  -2.47186       2.47186       672.831       675.302    
  41  0.113216      -2.17845      -219.058       219.058       735.953       955.011    
  42  0.997786     -0.221618E-02 -0.222852      0.222852       599.144       599.367    
  43  0.989089     -0.109706E-01  -1.10317       1.10317       530.582       531.685    
  44  0.879733     -0.128137      -12.8850       12.8850       698.099       710.984    
  45  0.250352      -1.38489      -139.259       139.259       791.241       930.501    
  46  0.974215     -0.261234E-01  -2.62688       2.62688       549.639       552.266    
  47  0.696905     -0.361107      -36.3116       36.3116       840.143       876.454    
  48  0.386686     -0.950142      -95.5430       95.5430       667.470       763.013    
  49  0.161612      -1.82256      -183.270       183.270       682.905       866.175    
  50  0.316508      -1.15041      -115.681       115.681       455.492       571.173    
  51  0.296048      -1.21723      -122.401       122.401       779.524       901.925    
  52  0.831401     -0.184643      -18.5671       18.5671       598.472       617.039    
  53  0.464983     -0.765755      -77.0017       77.0017       961.761       1038.76    
  54  0.673151     -0.395786      -39.7988       39.7988       828.527       868.325    
  55  0.119448      -2.12488      -213.670       213.670       1123.59       1337.26    
  56  0.966822     -0.337413E-01  -3.39291       3.39291       1015.14       1018.54    
  57  0.579646     -0.545338      -54.8373       54.8373       574.528       629.365    
  58  0.288548      -1.24289      -124.981       124.981       1232.15       1357.13    
  59  0.668947     -0.402051      -40.4289       40.4289       1312.14       1352.57    
  60  0.308274      -1.17677      -118.332       118.332       917.136       1035.47    
  61  0.361774      -1.01674      -102.239       102.239       508.844       611.084    
loop,thermsimp(1:2)        3   10.8562       80.2609    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     65              526.07          0.46          0.36         15.47
Just calling func    0   0         23.04


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:     66              565.60          0.45          0.36         15.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    526.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    100.557                71
loop is:        3
neval is:       65
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        4
neval is:       65


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       71
neval,tstepnext:       65      71

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.866864     -0.142873      -14.3668       14.3668       383.931       398.298    
   2  0.701171     -0.355003      -35.6979       35.6979       426.237       461.935    
   3  0.722511     -0.325022      -32.6831       32.6831       454.674       487.357    
   4  0.198663E-01  -3.91873      -394.054       394.054       390.156       784.210    
   5  0.105347      -2.25050      -226.302       226.302       460.858       687.161    
   6  0.218724      -1.51994      -152.840       152.840       473.296       626.136    
   7  0.525917     -0.642611      -64.6188       64.6188       481.637       546.255    
   8  0.594413     -0.520181      -52.3076       52.3076       530.582       582.889    
   9  0.268718      -1.31409      -132.141       132.141       501.987       634.128    
  10  0.610451     -0.493557      -49.6304       49.6304       501.739       551.369    
  11  0.835669     -0.179523      -18.0522       18.0522       522.066       540.118    
  12  0.703128E-02  -4.95739      -498.498       498.498       480.741       979.238    
  13  0.892958     -0.113216      -11.3846       11.3846       475.237       486.621    
  14  0.902682     -0.102385      -10.2955       10.2955       549.639       559.934    
  15  0.941451     -0.603333E-01  -6.06691       6.06691       502.830       508.897    
  16  0.769347     -0.262214      -26.3673       26.3673       497.814       524.181    
  17  0.729446E-01  -2.61805      -263.263       263.263       503.480       766.742    
  18  0.233243      -1.45568      -146.378       146.378       455.492       601.870    
  19  0.600991     -0.509175      -51.2009       51.2009       549.794       600.995    
  20  0.490718     -0.711885      -71.5847       71.5847       501.388       572.973    
  21  0.445724     -0.808055      -81.2553       81.2553       427.890       509.145    
  22  0.929126     -0.735105E-01  -7.39196       7.39196       599.144       606.536    
  23  0.400462     -0.915136      -92.0230       92.0230       529.387       621.410    
  24  0.155979      -1.85803      -186.837       186.837       508.844       695.682    
  25  0.814919     -0.204666      -20.5805       20.5805       598.472       619.052    
  26  0.996273E-01  -2.30632      -231.915       231.915       574.528       806.444    
  27  0.375947E-01  -3.28089      -329.915       329.915       596.173       926.088    
  28  0.135874      -1.99603      -200.713       200.713       601.512       802.225    
  29  0.961023     -0.397567E-01  -3.99780       3.99780       449.630       453.627    
  30  0.711696     -0.340104      -34.1997       34.1997       621.221       655.420    
  31  0.762279     -0.271443      -27.2953       27.2953       383.650       410.945    
  32  0.716428     -0.333478      -33.5334       33.5334       619.499       653.032    
  33  0.927333     -0.754424E-01  -7.58623       7.58623       672.831       680.417    
  34  0.902334     -0.102771      -10.3343       10.3343       416.387       426.721    
  35  0.502479     -0.688201      -69.2031       69.2031       483.406       552.609    
  36  0.484775     -0.724071      -72.8101       72.8101       698.099       770.909    
  37  0.793981     -0.230696      -23.1980       23.1980       513.023       536.221    
  38  0.134216      -2.00830      -201.948       201.948       623.539       825.487    
  39  0.972881     -0.274937E-01  -2.76468       2.76468       599.121       601.885    
  40  0.152296      -1.88193      -189.241       189.241       718.178       907.419    
  41  0.714421E-01  -2.63887      -265.355       265.355       667.470       932.826    
  42  0.535272E-01  -2.92756      -294.386       294.386       491.950       786.336    
  43  0.326168      -1.12034      -112.658       112.658       664.153       776.811    
  44  0.193393      -1.64303      -165.217       165.217       529.943       695.160    
  45  0.301406      -1.19930      -120.597       120.597       682.905       803.502    
  46  0.244368      -1.40908      -141.692       141.692       828.527       970.219    
  47  0.701797     -0.354111      -35.6082       35.6082       840.143       875.751    
  48  0.514890     -0.663803      -66.7497       66.7497       779.524       846.274    
  49  0.356096      -1.03256      -103.830       103.830       674.686       778.517    
  50  0.295224      -1.22002      -122.681       122.681       791.241       913.922    
  51  0.341947      -1.07310      -107.907       107.907       730.513       838.420    
  52  0.180006      -1.71477      -172.431       172.431       735.953       908.384    
  53  0.658718     -0.417459      -41.9783       41.9783       635.448       677.426    
  54  0.563433     -0.573708      -57.6901       57.6901       1015.14       1072.83    
  55  0.265103      -1.32764      -133.503       133.503       917.136       1050.64    
  56  0.752815     -0.283936      -28.5516       28.5516       961.761       990.312    
  57  0.896332     -0.109444      -11.0053       11.0053       502.783       513.788    
  58  0.198065E-01  -3.92175      -394.357       394.357       598.976       993.334    
  59  0.253251      -1.37337      -138.102       138.102       1123.59       1261.69    
  60  0.237307      -1.43840      -144.641       144.641       1312.14       1456.78    
  61  0.375964     -0.978262      -98.3706       98.3706       526.069       624.440    
loop,thermsimp(1:2)        4   14.3668       35.6979    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     67              478.56          0.47          0.36         15.39
Just calling func    0   0         23.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    478.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    100.557                71
loop is:        4
neval is:       66
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        5
neval is:       66


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       71
neval,tstepnext:       66      71

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.454482     -0.788596      -79.2985       79.2985       383.931       463.230    
   2  0.185688      -1.68369      -169.306       169.306       383.650       552.956    
   3  0.122182      -2.10224      -211.394       211.394       416.387       627.781    
   4  0.863652     -0.146586      -14.7402       14.7402       449.630       464.370    
   5  0.501877     -0.689400      -69.3237       69.3237       426.237       495.561    
   6  0.875018     -0.133510      -13.4253       13.4253       475.237       488.662    
   7  0.440938     -0.818851      -82.3408       82.3408       454.674       537.015    
   8  0.630584     -0.461108      -46.3675       46.3675       502.830       549.197    
   9  0.831156     -0.184938      -18.5967       18.5967       427.890       446.487    
  10  0.160291      -1.83076      -184.095       184.095       502.783       686.878    
  11  0.996842     -0.316261E-02 -0.318021      0.318021       497.814       498.132    
  12  0.652459     -0.427007      -42.9383       42.9383       513.023       555.961    
  13  0.412122     -0.886436      -89.1370       89.1370       522.066       611.203    
  14  0.403368     -0.907907      -91.2960       91.2960       481.637       572.933    
  15  0.341089E-01  -3.37820      -339.700       339.700       501.739       841.439    
  16  0.153683      -1.87287      -188.329       188.329       483.406       671.735    
  17  0.535519     -0.624519      -62.7995       62.7995       549.639       612.438    
  18  0.322701      -1.13103      -113.732       113.732       501.388       615.120    
  19  0.154733      -1.86606      -187.644       187.644       530.582       718.226    
  20  0.192116      -1.64965      -165.884       165.884       549.794       715.677    
  21  0.674696     -0.393494      -39.5684       39.5684       455.492       495.060    
  22  0.441277     -0.818083      -82.2636       82.2636       599.121       681.384    
  23  0.991468     -0.856866E-02 -0.861635      0.861635       599.144       600.006    
  24  0.689425     -0.371898      -37.3968       37.3968       598.472       635.869    
  25  0.955156     -0.458809E-01  -4.61363       4.61363       529.387       534.001    
  26  0.155340      -1.86214      -187.250       187.250       526.069       713.319    
  27  0.726516     -0.319494      -32.1273       32.1273       473.296       505.423    
  28  0.305516      -1.18575      -119.235       119.235       501.987       621.222    
  29  0.232214      -1.46010      -146.822       146.822       619.499       766.321    
  30  0.582883     -0.539768      -54.2772       54.2772       621.221       675.498    
  31  0.508093E-01  -2.97968      -299.626       299.626       635.448       935.074    
  32  0.859800E-01  -2.45364      -246.730       246.730       672.831       919.560    
  33  0.525190     -0.643996      -64.7580       64.7580       460.858       525.616    
  34  0.159402      -1.83632      -184.655       184.655       529.943       714.597    
  35  0.397282     -0.923110      -92.8247       92.8247       508.844       601.669    
  36  0.810490     -0.210117      -21.1286       21.1286       503.480       524.608    
  37  0.341567      -1.07421      -108.019       108.019       698.099       806.118    
  38  0.485110     -0.723379      -72.7405       72.7405       664.153       736.893    
  39  0.830364     -0.185891      -18.6925       18.6925       674.686       693.379    
  40  0.877434     -0.130753      -13.1481       13.1481       390.156       403.304    
  41  0.853383     -0.158547      -15.9429       15.9429       491.950       507.893    
  42  0.361889      -1.01642      -102.207       102.207       601.512       703.719    
  43  0.635634     -0.453133      -45.5655       45.5655       682.905       728.470    
  44  0.791955     -0.233250      -23.4549       23.4549       574.528       597.983    
  45  0.898385     -0.107156      -10.7753       10.7753       623.539       634.314    
  46  0.457569     -0.781827      -78.6179       78.6179       730.513       809.131    
  47  0.518789     -0.656258      -65.9910       65.9910       779.524       845.515    
  48  0.175000      -1.74297      -175.267       175.267       840.143       1015.41    
  49  0.893133     -0.113020      -11.3649       11.3649       718.178       729.543    
  50  0.667709     -0.403902      -40.6150       40.6150       735.953       776.568    
  51  0.435308     -0.831701      -83.6330       83.6330       791.241       874.874    
  52  0.853042E-01  -2.46153      -247.523       247.523       596.173       843.696    
  53  0.773502     -0.256827      -25.8257       25.8257       667.470       693.296    
  54  0.848319     -0.164498      -16.5414       16.5414       828.527       845.068    
  55  0.823942     -0.193656      -19.4733       19.4733       480.741       500.214    
  56  0.518293     -0.657215      -66.0872       66.0872       961.761       1027.85    
  57  0.604988     -0.502546      -50.5343       50.5343       598.976       649.511    
  58  0.936768     -0.653196E-01  -6.56832       6.56832       917.136       923.704    
  59  0.937104     -0.649611E-01  -6.53226       6.53226       1015.14       1021.68    
  60  0.638908     -0.447995      -45.0489       45.0489       1123.59       1168.64    
  61  0.327213      -1.11714      -112.336       112.336       478.560       590.896    
loop,thermsimp(1:2)        5   79.2985       169.306    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     68              440.60          0.47          0.36         15.43
Just calling func    0   0         23.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:     69              414.73          0.45          0.36         15.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    414.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    100.557                71
loop is:        5
neval is:       68
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        6
neval is:       68


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       71
neval,tstepnext:       68      71

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.692894     -0.366878      -36.8920       36.8920       390.156       427.048    
   2  0.531687     -0.631700      -63.5216       63.5216       427.890       491.412    
   3  0.337745E-01  -3.38805      -340.691       340.691       383.931       724.622    
   4  0.552292     -0.593678      -59.6982       59.6982       449.630       509.328    
   5  0.304527      -1.18899      -119.561       119.561       475.237       594.798    
   6  0.282198E-01  -3.56773      -358.759       358.759       455.492       814.251    
   7  0.333113      -1.09927      -110.539       110.539       426.237       536.776    
   8  0.181653      -1.70565      -171.515       171.515       497.814       669.329    
   9  0.863768E-01  -2.44904      -246.267       246.267       480.741       727.007    
  10  0.548350     -0.600841      -60.4185       60.4185       473.296       533.714    
  11  0.374576     -0.981962      -98.7427       98.7427       491.950       590.692    
  12  0.111193      -2.19649      -220.871       220.871       503.480       724.351    
  13  0.838177     -0.176526      -17.7509       17.7509       460.858       478.609    
  14  0.304274      -1.18983      -119.645       119.645       529.387       649.032    
  15  0.168381      -1.78152      -179.144       179.144       454.674       633.818    
  16  0.712616     -0.338812      -34.0698       34.0698       502.830       536.899    
  17  0.731365     -0.312843      -31.4584       31.4584       383.650       415.108    
  18  0.364084      -1.01037      -101.599       101.599       513.023       614.622    
  19  0.405329E-01  -3.20564      -322.348       322.348       481.637       803.985    
  20  0.108815      -2.21811      -223.046       223.046       478.560       701.605    
  21  0.459378E-01  -3.08047      -309.761       309.761       574.528       884.289    
  22  0.649238     -0.431956      -43.4360       43.4360       599.144       642.580    
  23  0.155979      -1.85803      -186.837       186.837       508.844       695.682    
  24  0.521205     -0.651611      -65.5238       65.5238       522.066       587.590    
  25  0.433511     -0.835838      -84.0490       84.0490       549.639       633.688    
  26  0.439178     -0.822851      -82.7431       82.7431       501.388       584.131    
  27  0.165949      -1.79608      -180.607       180.607       501.987       682.594    
  28  0.922206     -0.809871E-01  -8.14378       8.14378       416.387       424.531    
  29  0.665733     -0.406867      -40.9131       40.9131       623.539       664.452    
  30  0.620469     -0.477279      -47.9935       47.9935       598.472       646.465    
  31  0.253609      -1.37196      -137.960       137.960       598.976       736.936    
  32  0.779025     -0.249712      -25.1101       25.1101       483.406       508.516    
  33  0.289440      -1.23981      -124.671       124.671       621.221       745.891    
  34  0.125476      -2.07564      -208.720       208.720       599.121       807.840    
  35  0.325991      -1.12089      -112.713       112.713       502.783       615.495    
  36  0.159747      -1.83416      -184.437       184.437       667.470       851.907    
  37  0.945201     -0.563581E-01  -5.66718       5.66718       674.686       680.354    
  38  0.626825     -0.467089      -46.9688       46.9688       601.512       648.481    
  39  0.160186E-01  -4.13400      -415.701       415.701       526.069       941.770    
  40  0.725799     -0.320483      -32.2266       32.2266       529.943       562.169    
  41  0.190265      -1.65934      -166.857       166.857       549.794       716.651    
  42  0.922091     -0.811118E-01  -8.15633       8.15633       530.582       538.738    
  43  0.154525E-01  -4.16999      -419.319       419.319       682.905       1102.22    
  44  0.675302     -0.392595      -39.4780       39.4780       718.178       757.656    
  45  0.708627E-01  -2.64701      -266.174       266.174       664.153       930.327    
  46  0.885417     -0.121696      -12.2374       12.2374       619.499       631.736    
  47  0.734867     -0.308065      -30.9780       30.9780       735.953       766.931    
  48  0.440593     -0.819634      -82.4196       82.4196       698.099       780.518    
  49  0.252833      -1.37503      -138.268       138.268       730.513       868.781    
  50  0.928849     -0.738092E-01  -7.42200       7.42200       501.739       509.161    
  51  0.201790      -1.60053      -160.943       160.943       596.173       757.116    
  52  0.695010     -0.363829      -36.5854       36.5854       828.527       865.112    
  53  0.405924     -0.901588      -90.6606       90.6606       779.524       870.185    
  54  0.510045     -0.673257      -67.7004       67.7004       791.241       858.942    
  55  0.139315      -1.97102      -198.199       198.199       672.831       871.029    
  56  0.831427     -0.184612      -18.5639       18.5639       917.136       935.700    
  57  0.745229     -0.294064      -29.5700       29.5700       635.448       665.018    
  58  0.151686      -1.88595      -189.644       189.644       840.143       1029.79    
  59  0.967318     -0.332277E-01  -3.34127       3.34127       1015.14       1018.48    
  60  0.203882      -1.59021      -159.906       159.906       961.761       1121.67    
  61  0.230650      -1.46685      -147.502       147.502       414.733       562.235    
loop,thermsimp(1:2)        6   36.8920       63.5216    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     70              470.16          0.47          0.35         15.39
Just calling func    0   0         23.06


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    470.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    100.557                71
loop is:        6
neval is:       69
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        7
neval is:       69


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       71
neval,tstepnext:       69      71

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.659777     -0.415853      -41.8168       41.8168       383.650       425.467    
   2  0.779927     -0.248555      -24.9938       24.9938       416.387       441.381    
   3  0.281328      -1.26823      -127.529       127.529       390.156       517.685    
   4  0.691117     -0.369446      -37.1502       37.1502       460.858       498.008    
   5  0.914007E-02  -4.69509      -472.122       472.122       427.890       900.012    
   6  0.335184      -1.09307      -109.916       109.916       483.406       593.322    
   7  0.274452E-01  -3.59556      -361.558       361.558       501.739       863.297    
   8  0.967313     -0.332332E-01  -3.34182       3.34182       449.630       452.971    
   9  0.882291     -0.125233      -12.5930       12.5930       473.296       485.889    
  10  0.656193     -0.421300      -42.3645       42.3645       426.237       468.602    
  11  0.866763     -0.142990      -14.3786       14.3786       502.830       517.208    
  12  0.533531     -0.628238      -63.1734       63.1734       530.582       593.755    
  13  0.117864      -2.13822      -215.012       215.012       529.943       744.955    
  14  0.672045     -0.397430      -39.9642       39.9642       414.733       454.698    
  15  0.572712     -0.557372      -56.0474       56.0474       501.388       557.435    
  16  0.674502E-01  -2.69637      -271.137       271.137       522.066       793.203    
  17  0.873362     -0.135405      -13.6159       13.6159       491.950       505.566    
  18  0.604368     -0.503572      -50.6375       50.6375       475.237       525.874    
  19  0.962333     -0.383948E-01  -3.86085       3.86085       513.023       516.884    
  20  0.332990      -1.09964      -110.576       110.576       502.783       613.359    
  21  0.104743      -2.25625      -226.880       226.880       619.499       846.379    
  22  0.870726     -0.138428      -13.9198       13.9198       549.639       563.559    
  23  0.802702     -0.219772      -22.0995       22.0995       454.674       476.773    
  24  0.666952     -0.405038      -40.7292       40.7292       599.144       639.874    
  25  0.260417E-01  -3.64805      -366.836       366.836       598.472       965.308    
  26  0.443127     -0.813899      -81.8429       81.8429       601.512       683.355    
  27  0.593732     -0.521328      -52.4229       52.4229       529.387       581.810    
  28  0.946642     -0.548339E-01  -5.51391       5.51391       623.539       629.053    
  29  0.634659     -0.454668      -45.7199       45.7199       635.448       681.168    
  30  0.417446E-01  -3.17619      -319.386       319.386       497.814       817.200    
  31  0.164107      -1.80724      -181.730       181.730       674.686       856.416    
  32  0.981300     -0.188775E-01  -1.89826       1.89826       501.987       503.885    
  33  0.948678     -0.526863E-01  -5.29795       5.29795       508.844       514.142    
  34  0.543018     -0.610612      -61.4010       61.4010       478.560       539.961    
  35  0.581721     -0.541765      -54.4780       54.4780       549.794       604.272    
  36  0.583169E-02  -5.14445      -517.308       517.308       503.480       1020.79    
  37  0.283344      -1.26109      -126.811       126.811       383.931       510.742    
  38  0.799038     -0.224347      -22.5596       22.5596       480.741       503.300    
  39  0.222820      -1.50139      -150.975       150.975       598.976       749.951    
  40  0.341170      -1.07537      -108.136       108.136       621.221       729.357    
  41  0.484705     -0.724214      -72.8245       72.8245       596.173       668.997    
  42  0.569987E-01  -2.86473      -288.067       288.067       718.178       1006.25    
  43  0.253323      -1.37309      -138.073       138.073       735.953       874.027    
  44  0.520585     -0.652801      -65.6435       65.6435       698.099       763.742    
  45  0.164041      -1.80764      -181.770       181.770       481.637       663.407    
  46  0.946184     -0.553186E-01  -5.56265       5.56265       599.121       604.683    
  47  0.835065     -0.180245      -18.1248       18.1248       455.492       473.617    
  48  0.779938     -0.248541      -24.9925       24.9925       667.470       692.463    
  49  0.521147     -0.651722      -65.5350       65.5350       791.241       856.776    
  50  0.919292E-02  -4.68932      -471.542       471.542       828.527       1300.07    
  51  0.684267     -0.379407      -38.1519       38.1519       730.513       768.665    
  52  0.449766     -0.799028      -80.3475       80.3475       779.524       859.871    
  53  0.464521     -0.766749      -77.1017       77.1017       672.831       749.932    
  54  0.903023     -0.102007      -10.2575       10.2575       574.528       584.786    
  55  0.851280     -0.161015      -16.1911       16.1911       664.153       680.344    
  56  0.534714E-01  -2.92861      -294.491       294.491       917.136       1211.63    
  57  0.871765E-01  -2.43982      -245.340       245.340       526.069       771.409    
  58  0.300103E-01  -3.50622      -352.573       352.573       1015.14       1367.72    
  59  0.752052     -0.284950      -28.6536       28.6536       840.143       868.796    
  60  0.231888E-01  -3.76409      -378.503       378.503       682.905       1061.41    
  61  0.887280     -0.119595      -12.0260       12.0260       470.164       482.190    
loop,thermsimp(1:2)        7   41.8168       24.9938    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     71              297.59          0.47          0.35         15.44
Just calling func    0   0         23.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:     72              284.29          0.45          0.36         15.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    284.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    100.557                71
loop is:        7
neval is:       71
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        8
neval is:       71


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       71
neval,tstepnext:       71      71

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.328320      -1.11377      -111.997       111.997       383.650       495.647    
   2  0.520747     -0.652490      -65.6122       65.6122       416.387       481.999    
   3  0.648011E-01  -2.73643      -275.166       275.166       449.630       724.796    
   4  0.419241     -0.869309      -87.4147       87.4147       414.733       502.148    
   5  0.513047     -0.667388      -67.1102       67.1102       426.237       493.347    
   6  0.653907     -0.424790      -42.7154       42.7154       455.492       498.207    
   7  0.200162      -1.60863      -161.758       161.758       454.674       616.432    
   8  0.144292      -1.93592      -194.669       194.669       470.164       664.834    
   9  0.237590E-02  -6.04238      -607.601       607.601       473.296       1080.90    
  10  0.549951     -0.597925      -60.1253       60.1253       460.858       520.984    
  11  0.606883     -0.499419      -50.2198       50.2198       480.741       530.960    
  12  0.642270     -0.442746      -44.5210       44.5210       501.987       546.508    
  13  0.801839     -0.220848      -22.2077       22.2077       491.950       514.157    
  14  0.282947      -1.26250      -126.952       126.952       383.931       510.883    
  15  0.920761     -0.825553E-01  -8.30148       8.30148       508.844       517.146    
  16  0.588445     -0.530272      -53.3224       53.3224       513.023       566.345    
  17  0.375752     -0.978827      -98.4275       98.4275       502.830       601.257    
  18  0.345431      -1.06296      -106.888       106.888       390.156       497.044    
  19  0.184500      -1.69011      -169.951       169.951       475.237       645.188    
  20  0.954415     -0.466564E-01  -4.69161       4.69161       478.560       483.252    
  21  0.989500     -0.105557E-01  -1.06144       1.06144       501.388       502.449    
  22  0.699927     -0.356779      -35.8765       35.8765       549.639       585.515    
  23  0.513835     -0.665853      -66.9559       66.9559       529.387       596.343    
  24  0.581971     -0.541334      -54.4347       54.4347       574.528       628.963    
  25  0.869799     -0.139493      -14.0269       14.0269       483.406       497.433    
  26  0.717113     -0.332522      -33.4373       33.4373       530.582       564.019    
  27  0.125070      -2.07888      -209.045       209.045       549.794       758.839    
  28  0.568832E-01  -2.86676      -288.271       288.271       599.121       887.392    
  29  0.144797      -1.93242      -194.318       194.318       502.783       697.100    
  30  0.955390     -0.456357E-01  -4.58897       4.58897       623.539       628.128    
  31  0.888800     -0.117883      -11.8539       11.8539       599.144       610.998    
  32  0.883075     -0.124345      -12.5037       12.5037       481.637       494.140    
  33  0.439170     -0.822869      -82.7449       82.7449       596.173       678.918    
  34  0.562066     -0.576135      -57.9342       57.9342       664.153       722.087    
  35  0.731299     -0.312933      -31.4675       31.4675       635.448       666.915    
  36  0.416935     -0.874824      -87.9693       87.9693       601.512       689.481    
  37  0.749811     -0.287934      -28.9537       28.9537       667.470       696.424    
  38  0.693466     -0.366053      -36.8090       36.8090       621.221       658.030    
  39  0.764992     -0.267889      -26.9380       26.9380       529.943       556.881    
  40  0.825042     -0.192321      -19.3392       19.3392       672.831       692.170    
  41  0.274759      -1.29186      -129.905       129.905       598.976       728.881    
  42  0.960502     -0.402995E-01  -4.05237       4.05237       698.099       702.151    
  43  0.624795     -0.470332      -47.2949       47.2949       730.513       777.808    
  44  0.706144     -0.347936      -34.9872       34.9872       526.069       561.057    
  45  0.586464     -0.533644      -53.6614       53.6614       522.066       575.728    
  46  0.629977     -0.462072      -46.4644       46.4644       497.814       544.278    
  47  0.441511     -0.817552      -82.2102       82.2102       619.499       701.709    
  48  0.763414     -0.269955      -27.1457       27.1457       674.686       701.832    
  49  0.447809     -0.803389      -80.7860       80.7860       791.241       872.027    
  50  0.951047     -0.501916E-01  -5.04709       5.04709       779.524       784.571    
  51  0.899103     -0.106358      -10.6950       10.6950       501.739       512.434    
  52  0.882633E-01  -2.42743      -244.094       244.094       840.143       1084.24    
  53  0.396362     -0.925427      -93.0578       93.0578       735.953       829.011    
  54  0.468639E-01  -3.06051      -307.754       307.754       427.890       735.644    
  55  0.519086     -0.655686      -65.9336       65.9336       598.472       664.405    
  56  0.804980     -0.216938      -21.8145       21.8145       718.178       739.993    
  57  0.515004     -0.663580      -66.7274       66.7274       503.480       570.207    
  58  0.708804     -0.344177      -34.6092       34.6092       682.905       717.514    
  59  0.399015     -0.918756      -92.3869       92.3869       917.136       1009.52    
  60  0.496282     -0.700612      -70.4511       70.4511       828.527       898.978    
  61  0.803781     -0.218429      -21.9645       21.9645       284.294       306.258    
loop,thermsimp(1:2)        8   111.997       65.6122    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     73              408.22          0.47          0.35         15.40
Just calling func    0   0         23.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:     74              611.22          0.45          0.36         15.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    408.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    100.557                71
loop is:        8
neval is:       73
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    100.557                71
loop is:        9
neval is:       73


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    20.1113                81

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       73      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.877763     -0.130379      -2.62209       2.62209       284.294       286.916    
   2  0.734564     -0.308478      -6.20390       6.20390       416.387       422.591    
   3  0.802876     -0.219555      -4.41554       4.41554       478.560       482.975    
   4  0.360303E-01  -3.32340      -66.8379       66.8379       426.237       493.075    
   5  0.370801     -0.992089      -19.9522       19.9522       481.637       501.589    
   6  0.981225     -0.189536E-01 -0.381182      0.381182       383.650       384.031    
   7  0.738773     -0.302764      -6.08899       6.08899       390.156       396.245    
   8  0.550490     -0.596947      -12.0054       12.0054       483.406       495.411    
   9  0.391314     -0.938244      -18.8693       18.8693       455.492       474.361    
  10  0.207980      -1.57031      -31.5810       31.5810       414.733       446.314    
  11  0.100935E-01  -4.59586      -92.4289       92.4289       501.388       593.817    
  12  0.245464      -1.40460      -28.2484       28.2484       383.931       412.180    
  13  0.184889      -1.68800      -33.9478       33.9478       501.739       535.687    
  14  0.748704     -0.289412      -5.82045       5.82045       491.950       497.770    
  15  0.144627      -1.93360      -38.8872       38.8872       508.844       547.732    
  16  0.131401      -2.02950      -40.8160       40.8160       460.858       501.674    
  17  0.549515     -0.598719      -12.0410       12.0410       480.741       492.782    
  18  0.657585E-01  -2.72177      -54.7383       54.7383       497.814       552.552    
  19  0.334771      -1.09431      -22.0080       22.0080       501.987       523.995    
  20  0.153580      -1.87353      -37.6792       37.6792       529.943       567.622    
  21  0.614612     -0.486763      -9.78945       9.78945       526.069       535.859    
  22  0.308247      -1.17685      -23.6681       23.6681       530.582       554.250    
  23  0.724228E-01  -2.62523      -52.7969       52.7969       513.023       565.820    
  24  0.354154      -1.03802      -20.8760       20.8760       503.480       524.356    
  25  0.513292     -0.666910      -13.4124       13.4124       522.066       535.479    
  26  0.709815     -0.342750      -6.89316       6.89316       549.639       556.532    
  27  0.452828     -0.792243      -15.9331       15.9331       529.387       545.320    
  28  0.932808     -0.695564E-01  -1.39887       1.39887       502.830       504.229    
  29  0.375302E-01  -3.28261      -66.0176       66.0176       599.144       665.162    
  30  0.529321     -0.636161      -12.7940       12.7940       454.674       467.468    
  31  0.102095E-01  -4.58443      -92.1990       92.1990       623.539       715.738    
  32  0.471924     -0.750936      -15.1023       15.1023       574.528       589.630    
  33  0.633455     -0.456567      -9.18215       9.18215       475.237       484.419    
  34  0.923765E-01  -2.38188      -47.9028       47.9028       621.221       669.123    
  35  0.348201      -1.05498      -21.2169       21.2169       598.472       619.689    
  36  0.807156     -0.214239      -4.30862       4.30862       470.164       474.473    
  37  0.887138     -0.119755      -2.40843       2.40843       635.448       637.856    
  38  0.624997     -0.470009      -9.45250       9.45250       596.173       605.625    
  39  0.369720E-01  -3.29759      -66.3190       66.3190       601.512       667.831    
  40  0.927894     -0.748379E-01  -1.50509       1.50509       672.831       674.336    
  41  0.906868     -0.977588E-01  -1.96606       1.96606       667.470       669.436    
  42  0.569036     -0.563811      -11.3390       11.3390       502.783       514.122    
  43  0.404667     -0.904691      -18.1945       18.1945       619.499       637.693    
  44  0.697897E-01  -2.66227      -53.5417       53.5417       674.686       728.228    
  45  0.427197     -0.850510      -17.1049       17.1049       698.099       715.204    
  46  0.646188     -0.436665      -8.78190       8.78190       682.905       691.686    
  47  0.750171     -0.287455      -5.78109       5.78109       664.153       669.934    
  48  0.202952      -1.59479      -32.0733       32.0733       449.630       481.703    
  49  0.116725      -2.14793      -43.1977       43.1977       598.976       642.174    
  50  0.122175      -2.10230      -42.2801       42.2801       427.890       470.170    
  51  0.790820     -0.234685      -4.71981       4.71981       718.178       722.898    
  52  0.471338     -0.752179      -15.1273       15.1273       549.794       564.921    
  53  0.645509     -0.437717      -8.80306       8.80306       730.513       739.316    
  54  0.440638     -0.819533      -16.4819       16.4819       779.524       796.006    
  55  0.819538     -0.199014      -4.00244       4.00244       735.953       739.956    
  56  0.994703     -0.531061E-02 -0.106803      0.106803       791.241       791.348    
  57  0.722752     -0.324689      -6.52992       6.52992       599.121       605.650    
  58  0.877904     -0.130218      -2.61885       2.61885       828.527       831.145    
  59  0.261353      -1.34188      -26.9871       26.9871       917.136       944.123    
  60  0.924845     -0.781286E-01  -1.57127       1.57127       473.296       474.867    
  61  0.783018     -0.244599      -4.91921       4.91921       408.223       413.142    
loop,thermsimp(1:2)        9   2.62209       6.20390    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     75              561.56          0.47          0.35         15.43
Just calling func    0   0         23.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    561.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:        9
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       10
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       74      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157564      -1.84792      -37.1641       37.1641       284.294       321.458    
   2  0.844415     -0.169111      -3.40104       3.40104       383.650       387.051    
   3  0.782747     -0.244946      -4.92618       4.92618       390.156       395.082    
   4  0.982270     -0.178895E-01 -0.359782      0.359782       383.931       384.291    
   5  0.868514E-01  -2.44356      -49.1431       49.1431       408.223       457.366    
   6  0.491266     -0.710770      -14.2945       14.2945       416.387       430.681    
   7  0.136944      -1.98818      -39.9849       39.9849       414.733       454.718    
   8  0.445477     -0.808610      -16.2622       16.2622       454.674       470.936    
   9  0.231542      -1.46300      -29.4228       29.4228       427.890       457.313    
  10  0.133870      -2.01088      -40.4415       40.4415       455.492       495.934    
  11  0.943595     -0.580585E-01  -1.16763       1.16763       470.164       471.332    
  12  0.535049     -0.625396      -12.5775       12.5775       473.296       485.873    
  13  0.606522     -0.500015      -10.0560       10.0560       449.630       459.686    
  14  0.941629     -0.601435E-01  -1.20956       1.20956       478.560       479.769    
  15  0.577270     -0.549446      -11.0501       11.0501       475.237       486.287    
  16  0.780862     -0.247357      -4.97467       4.97467       480.741       485.715    
  17  0.856580     -0.154808      -3.11339       3.11339       426.237       429.350    
  18  0.275585      -1.28886      -25.9207       25.9207       483.406       509.326    
  19  0.544534     -0.607825      -12.2242       12.2242       491.950       504.174    
  20  0.342227      -1.07228      -21.5650       21.5650       481.637       503.202    
  21  0.481353E-01  -3.03374      -61.0125       61.0125       460.858       521.871    
  22  0.966625     -0.339444E-01 -0.682666      0.682666       502.830       503.512    
  23  0.398699E-01  -3.22213      -64.8013       64.8013       502.783       567.584    
  24  0.843494     -0.170202      -3.42299       3.42299       501.987       505.410    
  25  0.831477     -0.184551      -3.71156       3.71156       503.480       507.191    
  26  0.465551     -0.764533      -15.3758       15.3758       522.066       537.442    
  27  0.888492E-01  -2.42081      -48.6858       48.6858       501.739       550.425    
  28  0.413877     -0.882187      -17.7419       17.7419       526.069       543.811    
  29  0.184012      -1.69275      -34.0435       34.0435       529.387       563.430    
  30  0.298120      -1.21026      -24.3399       24.3399       508.844       533.184    
  31  0.319271E-01  -3.44430      -69.2694       69.2694       497.814       567.083    
  32  0.869571     -0.139755      -2.81065       2.81065       530.582       533.392    
  33  0.377451     -0.974315      -19.5948       19.5948       549.639       569.234    
  34  0.895127     -0.110790      -2.22813       2.22813       549.794       552.022    
  35  0.234635      -1.44972      -29.1559       29.1559       513.023       542.179    
  36  0.612119     -0.490829      -9.87121       9.87121       529.943       539.814    
  37  0.209398      -1.56352      -31.4444       31.4444       574.528       605.972    
  38  0.429584E-02  -5.45011      -109.609       109.609       501.388       610.997    
  39  0.345056E-01  -3.36663      -67.7074       67.7074       596.173       663.880    
  40  0.215602      -1.53432      -30.8572       30.8572       599.121       629.978    
  41  0.612123     -0.490821      -9.87106       9.87106       598.472       608.343    
  42  0.739379     -0.301945      -6.07251       6.07251       619.499       625.571    
  43  0.367589      -1.00079      -20.1272       20.1272       635.448       655.575    
  44  0.339934      -1.07900      -21.7002       21.7002       598.976       620.677    
  45  0.995942     -0.406662E-02 -0.817851E-01  0.817851E-01   599.144       599.226    
  46  0.619617     -0.478654      -9.62635       9.62635       601.512       611.138    
  47  0.682694     -0.381709      -7.67667       7.67667       621.221       628.897    
  48  0.214428      -1.53978      -30.9670       30.9670       667.470       698.437    
  49  0.214870      -1.53772      -30.9256       30.9256       664.153       695.079    
  50  0.497100     -0.698964      -14.0571       14.0571       672.831       686.888    
  51  0.830493     -0.185736      -3.73540       3.73540       682.905       686.640    
  52  0.174561      -1.74548      -35.1039       35.1039       698.099       733.203    
  53  0.851955     -0.160221      -3.22226       3.22226       623.539       626.761    
  54  0.837364     -0.177497      -3.56969       3.56969       718.178       721.748    
  55  0.394767E-01  -3.23204      -65.0007       65.0007       674.686       739.687    
  56  0.681489     -0.383475      -7.71218       7.71218       730.513       738.225    
  57  0.900259     -0.105073      -2.11316       2.11316       735.953       738.067    
  58  0.664217     -0.409147      -8.22848       8.22848       791.241       799.470    
  59  0.480162     -0.733633      -14.7543       14.7543       779.524       794.278    
  60  0.631979     -0.458899      -9.22906       9.22906       828.527       837.756    
  61  0.630584E-01  -2.76369      -55.5815       55.5815       561.559       617.141    
loop,thermsimp(1:2)       10   37.1641       3.40104    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     76              557.43          0.48          0.36         15.42
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    557.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:       10
neval is:       75
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       11
neval is:       75


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       75      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.236443      -1.44205      -29.0015       29.0015       284.294       313.295    
   2  0.140885      -1.95981      -39.4143       39.4143       383.931       423.345    
   3  0.989167     -0.108921E-01 -0.219054      0.219054       383.650       383.869    
   4  0.678196     -0.388319      -7.80960       7.80960       390.156       397.965    
   5  0.519526     -0.654838      -13.1697       13.1697       426.237       439.407    
   6  0.147818      -1.91177      -38.4482       38.4482       416.387       454.835    
   7  0.440288     -0.820326      -16.4978       16.4978       414.733       431.231    
   8  0.472652     -0.749396      -15.0713       15.0713       427.890       442.961    
   9  0.423856     -0.858362      -17.2628       17.2628       408.223       425.485    
  10  0.853427     -0.158495      -3.18754       3.18754       449.630       452.817    
  11  0.230868      -1.46591      -29.4813       29.4813       454.674       484.155    
  12  0.556184     -0.586657      -11.7984       11.7984       470.164       481.963    
  13  0.226311      -1.48585      -29.8823       29.8823       478.560       508.442    
  14  0.327807      -1.11533      -22.4307       22.4307       480.741       503.171    
  15  0.141329E-02  -6.56184      -131.967       131.967       473.296       605.263    
  16  0.211560      -1.55325      -31.2378       31.2378       475.237       506.474    
  17  0.893110     -0.113046      -2.27350       2.27350       455.492       457.766    
  18  0.250919      -1.38263      -27.8064       27.8064       481.637       509.443    
  19  0.236218      -1.44300      -29.0206       29.0206       502.830       531.850    
  20  0.446666     -0.805943      -16.2086       16.2086       491.950       508.158    
  21  0.476973     -0.740295      -14.8883       14.8883       501.987       516.875    
  22  0.371424     -0.990410      -19.9184       19.9184       503.480       523.398    
  23  0.416395     -0.876122      -17.6200       17.6200       483.406       501.026    
  24  0.386728     -0.950034      -19.1064       19.1064       460.858       479.965    
  25  0.864178     -0.145977      -2.93579       2.93579       508.844       511.780    
  26  0.669442     -0.401310      -8.07088       8.07088       530.582       538.652    
  27  0.530151     -0.634593      -12.7625       12.7625       522.066       534.829    
  28  0.673834     -0.394771      -7.93937       7.93937       529.943       537.882    
  29  0.466305     -0.762915      -15.3432       15.3432       513.023       528.366    
  30  0.604354     -0.503594      -10.1279       10.1279       526.069       536.197    
  31  0.655746E-01  -2.72457      -54.7946       54.7946       501.739       556.534    
  32  0.159546      -1.83542      -36.9127       36.9127       549.794       586.706    
  33  0.455599     -0.786142      -15.8103       15.8103       529.387       545.197    
  34  0.447393     -0.804318      -16.1759       16.1759       497.814       513.990    
  35  0.632446     -0.458160      -9.21420       9.21420       502.783       511.997    
  36  0.997691     -0.231136E-02 -0.464845E-01  0.464845E-01   549.639       549.685    
  37  0.301220      -1.19992      -24.1319       24.1319       599.144       623.276    
  38  0.849136E-01  -2.46612      -49.5969       49.5969       574.528       624.125    
  39  0.196371      -1.62775      -32.7362       32.7362       598.472       631.208    
  40  0.691835     -0.368408      -7.40917       7.40917       501.388       508.797    
  41  0.870763     -0.138385      -2.78311       2.78311       601.512       604.295    
  42  0.672958E-01  -2.69866      -54.2736       54.2736       561.559       615.833    
  43  0.378851     -0.970611      -19.5203       19.5203       598.976       618.497    
  44  0.414447     -0.880810      -17.7143       17.7143       619.499       637.213    
  45  0.647775     -0.434212      -8.73258       8.73258       623.539       632.272    
  46  0.298273      -1.20975      -24.3296       24.3296       621.221       645.550    
  47  0.633840     -0.455959      -9.16993       9.16993       599.121       608.291    
  48  0.218661      -1.52023      -30.5739       30.5739       635.448       666.022    
  49  0.997247     -0.275701E-02 -0.554470E-01  0.554470E-01   596.173       596.228    
  50  0.131439E-01  -4.33180      -87.1181       87.1181       682.905       770.023    
  51  0.221429E-01  -3.81024      -76.6289       76.6289       672.831       749.460    
  52  0.765376E-02  -4.87256      -97.9935       97.9935       664.153       762.147    
  53  0.108165      -2.22409      -44.7295       44.7295       667.470       712.200    
  54  0.157719      -1.84694      -37.1445       37.1445       718.178       755.323    
  55  0.756490     -0.279066      -5.61239       5.61239       698.099       703.711    
  56  0.465584     -0.764463      -15.3744       15.3744       735.953       751.328    
  57  0.240911E-01  -3.72591      -74.9330       74.9330       730.513       805.446    
  58  0.330489E-01  -3.40977      -68.5749       68.5749       674.686       743.261    
  59  0.175030E-01  -4.04538      -81.3579       81.3579       779.524       860.882    
  60  0.518408     -0.656992      -13.2130       13.2130       791.241       804.454    
  61  0.686999     -0.375422      -7.55024       7.55024       557.432       564.982    
loop,thermsimp(1:2)       11   29.0015       39.4143    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     77              484.93          0.48          0.35         15.58
Just calling func    0   0         23.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    484.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:       11
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       12
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       76      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.425999     -0.853317      -17.1613       17.1613       284.294       301.455    
   2  0.635841     -0.452806      -9.10652       9.10652       383.650       392.757    
   3  0.246659      -1.39975      -28.1508       28.1508       390.156       418.306    
   4  0.470124     -0.754760      -15.1792       15.1792       383.931       399.110    
   5  0.285015      -1.25521      -25.2440       25.2440       408.223       433.467    
   6  0.482126     -0.729549      -14.6722       14.6722       414.733       429.406    
   7  0.920737E-01  -2.38517      -47.9688       47.9688       426.237       474.206    
   8  0.294578      -1.22221      -24.5803       24.5803       427.890       452.470    
   9  0.300188      -1.20334      -24.2008       24.2008       449.630       473.831    
  10  0.402618     -0.909767      -18.2966       18.2966       416.387       434.684    
  11  0.907093     -0.975100E-01  -1.96105       1.96105       455.492       457.453    
  12  0.896494     -0.109264      -2.19744       2.19744       460.858       463.056    
  13  0.412064     -0.886577      -17.8302       17.8302       470.164       487.995    
  14  0.971660     -0.287491E-01 -0.578183      0.578183       454.674       455.252    
  15  0.939388     -0.625269E-01  -1.25750       1.25750       483.406       484.663    
  16  0.910105     -0.941954E-01  -1.89439       1.89439       480.741       482.635    
  17  0.884020     -0.123275      -2.47923       2.47923       475.237       477.716    
  18  0.812111     -0.208119      -4.18554       4.18554       491.950       496.135    
  19  0.556119     -0.586773      -11.8008       11.8008       478.560       490.361    
  20  0.796980     -0.226925      -4.56376       4.56376       501.388       505.952    
  21  0.903877     -0.101062      -2.03249       2.03249       481.637       483.669    
  22  0.784602     -0.242578      -4.87857       4.87857       508.844       513.723    
  23  0.522504     -0.649122      -13.0547       13.0547       502.783       515.837    
  24  0.850426E-01  -2.46460      -49.5664       49.5664       497.814       547.380    
  25  0.549720     -0.598346      -12.0335       12.0335       501.987       514.021    
  26  0.946913     -0.545479E-01  -1.09703       1.09703       503.480       504.577    
  27  0.798033     -0.225606      -4.53723       4.53723       513.023       517.560    
  28  0.937633     -0.643969E-01  -1.29511       1.29511       502.830       504.125    
  29  0.771261     -0.259728      -5.22348       5.22348       522.066       527.290    
  30  0.185408      -1.68520      -33.8915       33.8915       526.069       559.961    
  31  0.228621      -1.47569      -29.6780       29.6780       529.943       559.621    
  32  0.438344     -0.824751      -16.5868       16.5868       530.582       547.168    
  33  0.472635     -0.749432      -15.0721       15.0721       529.387       544.459    
  34  0.693278     -0.366325      -7.36727       7.36727       549.639       557.006    
  35  0.741925     -0.298508      -6.00338       6.00338       501.739       507.742    
  36  0.240604      -1.42460      -28.6506       28.6506       557.432       586.082    
  37  0.481902     -0.730015      -14.6816       14.6816       549.794       564.475    
  38  0.799056     -0.224324      -4.51145       4.51145       596.173       600.684    
  39  0.692048     -0.368099      -7.40296       7.40296       601.512       608.915    
  40  0.759262E-01  -2.57799      -51.8468       51.8468       473.296       525.143    
  41  0.854151     -0.157647      -3.17049       3.17049       599.121       602.291    
  42  0.644038     -0.439997      -8.84892       8.84892       561.559       570.408    
  43  0.580267     -0.544267      -10.9459       10.9459       598.976       609.922    
  44  0.931999     -0.704237E-01  -1.41631       1.41631       599.144       600.561    
  45  0.407566     -0.897551      -18.0509       18.0509       574.528       592.579    
  46  0.586148     -0.534183      -10.7431       10.7431       598.472       609.215    
  47  0.739589     -0.301661      -6.06680       6.06680       623.539       629.606    
  48  0.868601     -0.140872      -2.83312       2.83312       619.499       622.332    
  49  0.534666     -0.626114      -12.5920       12.5920       621.221       633.813    
  50  0.912131     -0.919721E-01  -1.84968       1.84968       635.448       637.298    
  51  0.928361     -0.743345E-01  -1.49496       1.49496       698.099       699.594    
  52  0.846963E-01  -2.46868      -49.6485       49.6485       667.470       717.119    
  53  0.840828     -0.173368      -3.48667       3.48667       674.686       678.173    
  54  0.656689     -0.420545      -8.45771       8.45771       672.831       681.288    
  55  0.809399     -0.211463      -4.25279       4.25279       735.953       740.206    
  56  0.226820      -1.48360      -29.8371       29.8371       718.178       748.015    
  57  0.334450      -1.09527      -22.0273       22.0273       664.153       686.180    
  58  0.345447      -1.06292      -21.3766       21.3766       682.905       704.281    
  59  0.817968     -0.200932      -4.04101       4.04101       791.241       795.282    
  60  0.811039     -0.209439      -4.21209       4.21209       730.513       734.725    
  61  0.754038     -0.282312      -5.67767       5.67767       484.927       490.604    
loop,thermsimp(1:2)       12   17.1613       9.10652    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     78              316.59          0.48          0.36         15.41
Just calling func    0   0         23.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    316.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:       12
neval is:       77
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       13
neval is:       77


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       77      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.933256     -0.690760E-01  -1.38921       1.38921       284.294       285.683    
   2  0.721471     -0.326463      -6.56559       6.56559       383.650       390.216    
   3  0.991206     -0.883310E-02 -0.177645      0.177645       383.931       384.109    
   4  0.628850     -0.463863      -9.32889       9.32889       390.156       399.485    
   5  0.873552     -0.135188      -2.71881       2.71881       414.733       417.452    
   6  0.364458      -1.00934      -20.2993       20.2993       408.223       428.522    
   7  0.187260      -1.67526      -33.6916       33.6916       416.387       450.079    
   8  0.834213E-01  -2.48385      -49.9535       49.9535       427.890       477.844    
   9  0.102335E-01  -4.58209      -92.1519       92.1519       454.674       546.826    
  10  0.115664      -2.15707      -43.3814       43.3814       455.492       498.873    
  11  0.152927      -1.87779      -37.7649       37.7649       460.858       498.623    
  12  0.906717     -0.979253E-01  -1.96941       1.96941       449.630       451.599    
  13  0.352493      -1.04273      -20.9706       20.9706       426.237       447.208    
  14  0.928728     -0.739392E-01  -1.48701       1.48701       475.237       476.724    
  15  0.212925      -1.54682      -31.1085       31.1085       480.741       511.849    
  16  0.173429      -1.75199      -35.2348       35.2348       481.637       516.871    
  17  0.265935      -1.32450      -26.6375       26.6375       483.406       510.043    
  18  0.385207     -0.953975      -19.1857       19.1857       470.164       489.350    
  19  0.342579      -1.07125      -21.5443       21.5443       478.560       500.104    
  20  0.509031     -0.675246      -13.5801       13.5801       484.927       498.507    
  21  0.240319      -1.42579      -28.6745       28.6745       491.950       520.624    
  22  0.569520E-01  -2.86555      -57.6299       57.6299       502.830       560.460    
  23  0.444981     -0.809723      -16.2846       16.2846       503.480       519.764    
  24  0.711919     -0.339792      -6.83365       6.83365       501.388       508.222    
  25  0.756107     -0.279572      -5.62255       5.62255       501.739       507.362    
  26  0.200882      -1.60504      -32.2794       32.2794       508.844       541.124    
  27  0.129594      -2.04335      -41.0944       41.0944       501.987       543.082    
  28  0.303429      -1.19261      -23.9849       23.9849       502.783       526.768    
  29  0.517279     -0.659172      -13.2568       13.2568       513.023       526.280    
  30  0.168640      -1.77999      -35.7979       35.7979       473.296       509.094    
  31  0.298794      -1.20800      -24.2945       24.2945       522.066       546.361    
  32  0.873350     -0.135419      -2.72346       2.72346       529.387       532.110    
  33  0.513404     -0.666692      -13.4080       13.4080       530.582       543.990    
  34  0.927523     -0.752380E-01  -1.51314       1.51314       497.814       499.327    
  35  0.161036E-02  -6.43130      -129.342       129.342       549.639       678.981    
  36  0.969090     -0.313979E-01 -0.631453      0.631453       529.943       530.574    
  37  0.571678E-01  -2.86176      -57.5538       57.5538       526.069       583.623    
  38  0.210142      -1.55997      -31.3731       31.3731       549.794       581.167    
  39  0.467222     -0.760950      -15.3037       15.3037       561.559       576.863    
  40  0.139157      -1.97215      -39.6625       39.6625       557.432       597.094    
  41  0.174367      -1.74660      -35.1263       35.1263       574.528       609.654    
  42  0.859941     -0.150891      -3.03462       3.03462       599.144       602.179    
  43  0.920812E-01  -2.38508      -47.9672       47.9672       596.173       644.140    
  44  0.181021      -1.70914      -34.3731       34.3731       599.121       633.494    
  45  0.300729      -1.20154      -24.1646       24.1646       601.512       625.677    
  46  0.455680     -0.785965      -15.8068       15.8068       598.472       614.279    
  47  0.762925     -0.270595      -5.44203       5.44203       598.976       604.418    
  48  0.886394     -0.120594      -2.42530       2.42530       619.499       621.924    
  49  0.357149      -1.02960      -20.7067       20.7067       623.539       644.246    
  50  0.311312      -1.16696      -23.4691       23.4691       621.221       644.690    
  51  0.453744E-01  -3.09281      -62.2004       62.2004       635.448       697.648    
  52  0.705724     -0.348531      -7.00942       7.00942       674.686       681.696    
  53  0.892694     -0.113512      -2.28287       2.28287       672.831       675.113    
  54  0.539294E-01  -2.92008      -58.7266       58.7266       664.153       722.880    
  55  0.221524      -1.50722      -30.3122       30.3122       698.099       728.411    
  56  0.661009     -0.413988      -8.32584       8.32584       682.905       691.230    
  57  0.152587      -1.88002      -37.8096       37.8096       667.470       705.280    
  58  0.667355     -0.404433      -8.13368       8.13368       730.513       738.647    
  59  0.594785     -0.519556      -10.4490       10.4490       735.953       746.402    
  60  0.755712     -0.280095      -5.63307       5.63307       718.178       723.811    
  61  0.126380      -2.06846      -41.5995       41.5995       316.589       358.188    
loop,thermsimp(1:2)       13   1.38921       6.56559    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     79              566.13          0.48          0.36         15.38
Just calling func    0   0         23.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    566.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:       13
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       14
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       78      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.598353     -0.513575      -10.3287       10.3287       284.294       294.622    
   2  0.567232     -0.566987      -11.4029       11.4029       316.589       327.991    
   3  0.264105E-01  -3.63399      -73.0844       73.0844       383.931       457.016    
   4  0.508306     -0.676672      -13.6088       13.6088       383.650       397.259    
   5  0.436021     -0.830065      -16.6937       16.6937       390.156       406.849    
   6  0.726926     -0.318930      -6.41411       6.41411       414.733       421.147    
   7  0.147643      -1.91296      -38.4722       38.4722       408.223       446.695    
   8  0.746595     -0.292233      -5.87718       5.87718       426.237       432.114    
   9  0.792921     -0.232032      -4.66647       4.66647       416.387       421.053    
  10  0.483115     -0.727502      -14.6310       14.6310       449.630       464.261    
  11  0.818996     -0.199676      -4.01575       4.01575       475.237       479.252    
  12  0.633919     -0.455834      -9.16741       9.16741       427.890       437.058    
  13  0.101820E-01  -4.58713      -92.2533       92.2533       470.164       562.418    
  14  0.948760     -0.525991E-01  -1.05784       1.05784       484.927       485.985    
  15  0.282393      -1.26446      -25.4299       25.4299       460.858       486.288    
  16  0.523290     -0.647619      -13.0245       13.0245       455.492       468.516    
  17  0.776984     -0.252335      -5.07479       5.07479       497.814       502.889    
  18  0.875198     -0.133305      -2.68094       2.68094       478.560       481.241    
  19  0.445609     -0.808314      -16.2563       16.2563       501.739       517.995    
  20  0.824844     -0.192561      -3.87265       3.87265       501.388       505.261    
  21  0.973888E-01  -2.32904      -46.8401       46.8401       473.296       520.136    
  22  0.831483     -0.184545      -3.71144       3.71144       483.406       487.117    
  23  0.169065      -1.77747      -35.7473       35.7473       480.741       516.488    
  24  0.345850      -1.06175      -21.3532       21.3532       481.637       502.990    
  25  0.706818     -0.346982      -6.97827       6.97827       503.480       510.458    
  26  0.183187      -1.69725      -34.1339       34.1339       491.950       526.084    
  27  0.118201      -2.13537      -42.9451       42.9451       513.023       555.968    
  28  0.368074     -0.999472      -20.1007       20.1007       502.783       522.883    
  29  0.212940      -1.54675      -31.1071       31.1071       529.943       561.050    
  30  0.340707      -1.07673      -21.6545       21.6545       529.387       551.041    
  31  0.689517     -0.371763      -7.47665       7.47665       508.844       516.321    
  32  0.890367     -0.116122      -2.33536       2.33536       501.987       504.322    
  33  0.701525     -0.354499      -7.12944       7.12944       530.582       537.711    
  34  0.985039E-01  -2.31766      -46.6112       46.6112       522.066       568.677    
  35  0.318948      -1.14273      -22.9817       22.9817       454.674       477.656    
  36  0.294738      -1.22167      -24.5694       24.5694       502.830       527.399    
  37  0.464121E-03  -7.67537      -154.362       154.362       561.559       715.921    
  38  0.672959E-02  -5.00124      -100.582       100.582       549.794       650.375    
  39  0.773124     -0.257316      -5.17496       5.17496       526.069       531.244    
  40  0.628792     -0.463954      -9.33073       9.33073       557.432       566.762    
  41  0.577748     -0.548618      -11.0334       11.0334       599.144       610.178    
  42  0.850099     -0.162403      -3.26613       3.26613       598.976       602.243    
  43  0.177455      -1.72904      -34.7732       34.7732       574.528       609.301    
  44  0.703344     -0.351909      -7.07735       7.07735       598.472       605.549    
  45  0.982074     -0.180890E-01 -0.363794      0.363794       619.499       619.863    
  46  0.400323     -0.915483      -18.4116       18.4116       601.512       619.924    
  47  0.325453      -1.12254      -22.5757       22.5757       599.121       621.696    
  48  0.114423      -2.16786      -43.5984       43.5984       596.173       639.771    
  49  0.331636      -1.10372      -22.1972       22.1972       623.539       645.736    
  50  0.313057      -1.16137      -23.3567       23.3567       621.221       644.577    
  51  0.481965     -0.729885      -14.6789       14.6789       672.831       687.510    
  52  0.112297      -2.18661      -43.9756       43.9756       549.639       593.614    
  53  0.731489     -0.312673      -6.28827       6.28827       674.686       680.975    
  54  0.480237     -0.733476      -14.7512       14.7512       682.905       697.656    
  55  0.455773     -0.785760      -15.8027       15.8027       635.448       651.251    
  56  0.134257      -2.00800      -40.3835       40.3835       667.470       707.854    
  57  0.600431     -0.510108      -10.2589       10.2589       664.153       674.412    
  58  0.497267     -0.698628      -14.0503       14.0503       718.178       732.229    
  59  0.823050     -0.194739      -3.91645       3.91645       698.099       702.015    
  60  0.180039      -1.71458      -34.4825       34.4825       730.513       764.996    
  61  0.654349     -0.424114      -8.52948       8.52948       566.134       574.664    
loop,thermsimp(1:2)       14   10.3287       11.4029    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     80              612.61          0.48          0.36         15.44
Just calling func    0   0         23.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    612.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:       14
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       15
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       79      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987642     -0.124347E-01 -0.250078      0.250078       284.294       284.544    
   2  0.296361E-01  -3.51876      -70.7669       70.7669       316.589       387.356    
   3  0.675298     -0.392601      -7.89572       7.89572       383.650       391.546    
   4  0.543539     -0.609654      -12.2609       12.2609       390.156       402.417    
   5  0.352033      -1.04403      -20.9968       20.9968       416.387       437.384    
   6  0.991772     -0.826180E-02 -0.166156      0.166156       414.733       414.900    
   7  0.395605     -0.927340      -18.6500       18.6500       426.237       444.887    
   8  0.721653     -0.326211      -6.56053       6.56053       427.890       434.451    
   9  0.476176     -0.741968      -14.9219       14.9219       408.223       423.144    
  10  0.324088      -1.12674      -22.6602       22.6602       383.931       406.591    
  11  0.293401      -1.22622      -24.6608       24.6608       449.630       474.290    
  12  0.904603     -0.100259      -2.01633       2.01633       455.492       457.508    
  13  0.394431     -0.930312      -18.7098       18.7098       454.674       473.384    
  14  0.189862E-01  -3.96404      -79.7221       79.7221       475.237       554.959    
  15  0.849126     -0.163548      -3.28916       3.28916       478.560       481.849    
  16  0.646435     -0.436283      -8.77422       8.77422       484.927       493.701    
  17  0.109585      -2.21105      -44.4672       44.4672       460.858       505.325    
  18  0.968930E-01  -2.33415      -46.9428       46.9428       483.406       530.349    
  19  0.936835     -0.652477E-01  -1.31222       1.31222       497.814       499.126    
  20  0.414118E-01  -3.18419      -64.0382       64.0382       481.637       545.675    
  21  0.834510     -0.180911      -3.63835       3.63835       501.987       505.625    
  22  0.162194      -1.81896      -36.5817       36.5817       501.388       537.970    
  23  0.500513     -0.692121      -13.9195       13.9195       503.480       517.399    
  24  0.799489     -0.223783      -4.50057       4.50057       508.844       513.345    
  25  0.790595     -0.234969      -4.72554       4.72554       480.741       485.466    
  26  0.606427     -0.500170      -10.0591       10.0591       501.739       511.798    
  27  0.591092     -0.525783      -10.5742       10.5742       473.296       483.870    
  28  0.818240     -0.200600      -4.03433       4.03433       502.783       506.817    
  29  0.112578      -2.18411      -43.9253       43.9253       491.950       535.875    
  30  0.745756     -0.293357      -5.89979       5.89979       502.830       508.729    
  31  0.422817     -0.860816      -17.3121       17.3121       526.069       543.382    
  32  0.665987E-01  -2.70907      -54.4829       54.4829       530.582       585.064    
  33  0.577479     -0.549084      -11.0428       11.0428       529.387       540.430    
  34  0.130705      -2.03482      -40.9228       40.9228       513.023       553.946    
  35  0.960776     -0.400137E-01 -0.804727      0.804727       529.943       530.747    
  36  0.624520     -0.470772      -9.46784       9.46784       470.164       479.632    
  37  0.592928     -0.522682      -10.5118       10.5118       557.432       567.944    
  38  0.801916     -0.220752      -4.43961       4.43961       522.066       526.506    
  39  0.464413     -0.766980      -15.4250       15.4250       566.134       581.559    
  40  0.965055     -0.355697E-01 -0.715353      0.715353       549.639       550.354    
  41  0.468335     -0.758572      -15.2559       15.2559       598.976       614.232    
  42  0.355929      -1.03302      -20.7755       20.7755       598.472       619.247    
  43  0.817600     -0.201382      -4.05006       4.05006       574.528       578.578    
  44  0.639544     -0.447000      -8.98975       8.98975       599.144       608.134    
  45  0.700141     -0.356473      -7.16915       7.16915       619.499       626.668    
  46  0.499640E-01  -2.99645      -60.2626       60.2626       601.512       661.775    
  47  0.812687     -0.207409      -4.17127       4.17127       599.121       603.292    
  48  0.702491     -0.353123      -7.10177       7.10177       596.173       603.275    
  49  0.729171     -0.315847      -6.35209       6.35209       621.221       627.573    
  50  0.293029      -1.22748      -24.6863       24.6863       623.539       648.225    
  51  0.377163     -0.975077      -19.6101       19.6101       549.794       569.404    
  52  0.555208     -0.588413      -11.8337       11.8337       635.448       647.282    
  53  0.608865     -0.496160      -9.97842       9.97842       664.153       674.131    
  54  0.484767     -0.724086      -14.5623       14.5623       674.686       689.249    
  55  0.815152E-01  -2.50697      -50.4184       50.4184       672.831       723.249    
  56  0.398980     -0.918844      -18.4792       18.4792       682.905       701.384    
  57  0.775528     -0.254211      -5.11252       5.11252       698.099       703.211    
  58  0.259695      -1.34825      -27.1150       27.1150       667.470       694.585    
  59  0.645110     -0.438334      -8.81548       8.81548       561.559       570.375    
  60  0.219623      -1.51584      -30.4856       30.4856       718.178       748.664    
  61  0.707681     -0.345761      -6.95371       6.95371       612.611       619.564    
loop,thermsimp(1:2)       15  0.250078       70.7669    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     81              513.98          0.48          0.35         15.37
Just calling func    0   0         23.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    513.98        2.037     -1.305      3.537     -100.0     0.4606    
                      -1.087     0.6695     -100.0      2.452     -1.042    
                     -0.5475     -2.981      2.009      0.000     0.6600    
                      -1.206     -20.00      0.000      0.000     -1.221    

                      -1.600      6964.      8671.     -493.0     -1451.    
                      -4.215     -5.295     -4.100     -15.33     -5.168    
                      -13.53     -2.668     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2065E-01-0.7781E-01  0.000    -0.1025    
                     -0.1793    -0.6057    -0.1111    -0.1778    -0.2103E-01

                     -0.7456     -2.806      1.382     0.1868     0.7168E-01
                      0.1303     0.5200E-02-0.7906E-01 0.8740E-02-0.2896E-01
                     -0.3096E-01 0.1192    -0.2545     -3.103      1.382    

                      -1.319     -1.500      3730.      2646.      0.000    
                       0.000      9.117      8.917      0.000     0.1000    
                       1.084      1.084      9.117      8.917     -108.4    

                      0.1000      1.084      1.084      9.217      9.117    
                      -542.2     0.1000     0.8285     0.9758      9.317    
                       9.217      8090.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    513.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:       15
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       16
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       80      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.602212     -0.507146      -10.1994       10.1994       284.294       294.493    
   2  0.631178     -0.460167      -9.25457       9.25457       316.589       325.843    
   3  0.607907E-01  -2.80032      -56.3181       56.3181       383.650       439.968    
   4  0.921181     -0.820990E-01  -1.65112       1.65112       390.156       391.807    
   5  0.247824      -1.39504      -28.0561       28.0561       383.931       411.987    
   6  0.927358     -0.754157E-01  -1.51671       1.51671       414.733       416.250    
   7  0.685739     -0.377258      -7.58716       7.58716       408.223       415.810    
   8  0.427192     -0.850522      -17.1051       17.1051       427.890       444.995    
   9  0.235590E-01  -3.74825      -75.3822       75.3822       416.387       491.769    
  10  0.932116     -0.702978E-01  -1.41378       1.41378       426.237       427.651    
  11  0.300031      -1.20387      -24.2114       24.2114       455.492       479.703    
  12  0.306049      -1.18401      -23.8120       23.8120       454.674       478.486    
  13  0.541067     -0.614212      -12.3526       12.3526       449.630       461.982    
  14  0.199754      -1.61067      -32.3927       32.3927       470.164       502.557    
  15  0.510284     -0.672788      -13.5307       13.5307       478.560       492.091    
  16  0.814307     -0.205418      -4.13122       4.13122       473.296       477.427    
  17  0.924193     -0.788346E-01  -1.58547       1.58547       480.741       482.326    
  18  0.282516      -1.26402      -25.4211       25.4211       484.927       510.348    
  19  0.809975     -0.210752      -4.23850       4.23850       497.814       502.052    
  20  0.233711      -1.45367      -29.2352       29.2352       460.858       490.093    
  21  0.333954      -1.09675      -22.0571       22.0571       501.987       524.044    
  22  0.477053E-01  -3.04271      -61.1930       61.1930       502.783       563.976    
  23  0.658446     -0.417873      -8.40397       8.40397       502.830       511.234    
  24  0.628233E-01  -2.76743      -55.6566       55.6566       501.739       557.396    
  25  0.814411     -0.205290      -4.12865       4.12865       508.844       512.973    
  26  0.245308      -1.40524      -28.2612       28.2612       503.480       531.741    
  27  0.569693     -0.562657      -11.3158       11.3158       522.066       533.382    
  28  0.583486     -0.538735      -10.8347       10.8347       483.406       494.240    
  29  0.732472     -0.311330      -6.26125       6.26125       529.943       536.204    
  30  0.925393     -0.775369E-01  -1.55937       1.55937       491.950       493.509    
  31  0.528597     -0.637529      -12.8215       12.8215       501.388       514.210    
  32  0.828997     -0.187539      -3.77165       3.77165       529.387       533.159    
  33  0.433603     -0.835626      -16.8055       16.8055       526.069       542.875    
  34  0.804181     -0.217931      -4.38288       4.38288       481.637       486.020    
  35  0.867967E-01  -2.44419      -49.1558       49.1558       549.639       598.795    
  36  0.281319      -1.26827      -25.5065       25.5065       513.023       538.529    
  37  0.497793     -0.697571      -14.0291       14.0291       475.237       489.266    
  38  0.465558     -0.764520      -15.3755       15.3755       557.432       572.807    
  39  0.497611E-01  -3.00052      -60.3444       60.3444       549.794       610.138    
  40  0.268222      -1.31594      -26.4653       26.4653       561.559       588.025    
  41  0.663174     -0.410718      -8.26008       8.26008       574.528       582.788    
  42  0.983753     -0.163803E-01 -0.329430      0.329430       566.134       566.464    
  43  0.214173E-01  -3.84355      -77.2989       77.2989       530.582       607.880    
  44  0.928671     -0.740005E-01  -1.48825       1.48825       596.173       597.661    
  45  0.783444     -0.244055      -4.90828       4.90828       599.121       604.029    
  46  0.495099     -0.702998      -14.1382       14.1382       599.144       613.283    
  47  0.318334      -1.14465      -23.0205       23.0205       598.976       621.997    
  48  0.442591     -0.815109      -16.3929       16.3929       598.472       614.865    
  49  0.246382      -1.40087      -28.1734       28.1734       612.611       640.784    
  50  0.733525     -0.309894      -6.23238       6.23238       619.499       625.731    
  51  0.810196     -0.210479      -4.23301       4.23301       621.221       625.454    
  52  0.908239E-01  -2.39883      -48.2437       48.2437       635.448       683.692    
  53  0.948144     -0.532492E-01  -1.07091       1.07091       623.539       624.610    
  54  0.897360     -0.108298      -2.17801       2.17801       601.512       603.690    
  55  0.315634      -1.15317      -23.1918       23.1918       664.153       687.345    
  56  0.290734      -1.23535      -24.8445       24.8445       674.686       699.531    
  57  0.994042     -0.597595E-02 -0.120184      0.120184       667.470       667.591    
  58  0.485471     -0.722635      -14.5331       14.5331       682.905       697.438    
  59  0.755552     -0.280307      -5.63734       5.63734       698.099       703.736    
  60  0.841555     -0.172504      -3.46927       3.46927       672.831       676.300    
  61  0.502611E-01  -2.99052      -60.1434       60.1434       513.983       574.127    
loop,thermsimp(1:2)       16   10.1994       9.25457    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     82              484.80          0.48          0.37         15.36
Just calling func    0   0         23.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    484.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:       16
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       17
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       81
neval,tstepnext:       81      81

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954044     -0.470456E-01 -0.946148      0.946148       284.294       285.240    
   2  0.555006     -0.588776      -11.8411       11.8411       316.589       328.430    
   3  0.999620     -0.380444E-03 -0.765124E-02  0.765124E-02   390.156       390.163    
   4  0.126665      -2.06621      -41.5542       41.5542       383.931       425.485    
   5  0.425853     -0.853660      -17.1682       17.1682       408.223       425.391    
   6  0.710277     -0.342100      -6.88007       6.88007       414.733       421.613    
   7  0.766463     -0.265969      -5.34899       5.34899       426.237       431.586    
   8  0.315485      -1.15364      -23.2013       23.2013       383.650       406.851    
   9  0.460966     -0.774432      -15.5748       15.5748       427.890       443.465    
  10  0.716434E-01  -2.63605      -53.0145       53.0145       449.630       502.644    
  11  0.524519     -0.645274      -12.9773       12.9773       473.296       486.273    
  12  0.861110     -0.149533      -3.00731       3.00731       454.674       457.681    
  13  0.293581      -1.22560      -24.6484       24.6484       455.492       480.140    
  14  0.672970     -0.396055      -7.96518       7.96518       480.741       488.706    
  15  0.978694     -0.215368E-01 -0.433132      0.433132       481.637       482.070    
  16  0.751168     -0.286126      -5.75436       5.75436       475.237       480.991    
  17  0.666362     -0.405922      -8.16362       8.16362       460.858       469.022    
  18  0.941025     -0.607861E-01  -1.22249       1.22249       416.387       417.609    
  19  0.606287     -0.500402      -10.0638       10.0638       478.560       488.624    
  20  0.956008     -0.449886E-01 -0.904781      0.904781       491.950       492.855    
  21  0.921017     -0.822772E-01  -1.65470       1.65470       483.406       485.061    
  22  0.741145     -0.299559      -6.02453       6.02453       497.814       503.838    
  23  0.942389     -0.593375E-01  -1.19335       1.19335       470.164       471.358    
  24  0.974752E-01  -2.32816      -46.8223       46.8223       484.927       531.749    
  25  0.525390     -0.643614      -12.9439       12.9439       502.830       515.774    
  26  0.498425     -0.696301      -14.0035       14.0035       508.844       522.848    
  27  0.864096     -0.146071      -2.93768       2.93768       501.388       504.326    
  28  0.428477E-01  -3.15010      -63.3527       63.3527       501.987       565.340    
  29  0.141255      -1.95719      -39.3616       39.3616       503.480       542.841    
  30  0.704919     -0.349672      -7.03236       7.03236       529.387       536.419    
  31  0.707839     -0.345539      -6.94924       6.94924       522.066       529.015    
  32  0.373599     -0.984571      -19.8010       19.8010       529.943       549.744    
  33  0.324318E-01  -3.42862      -68.9540       68.9540       513.023       581.977    
  34  0.133203      -2.01588      -40.5420       40.5420       526.069       566.611    
  35  0.329953E-02  -5.71398      -114.916       114.916       501.739       616.655    
  36  0.664668E-02  -5.01364      -100.831       100.831       502.783       603.614    
  37  0.396414     -0.925297      -18.6089       18.6089       566.134       584.743    
  38  0.485491     -0.722595      -14.5323       14.5323       557.432       571.964    
  39  0.996708     -0.329725E-02 -0.663121E-01  0.663121E-01   513.983       514.050    
  40  0.723646     -0.323453      -6.50505       6.50505       574.528       581.033    
  41  0.480674     -0.732567      -14.7329       14.7329       561.559       576.292    
  42  0.253556      -1.37217      -27.5961       27.5961       596.173       623.769    
  43  0.983305     -0.168360E-01 -0.338594      0.338594       549.639       549.977    
  44  0.443191     -0.813755      -16.3657       16.3657       601.512       617.878    
  45  0.968720     -0.317802E-01 -0.639141      0.639141       599.121       599.760    
  46  0.609193E-02  -5.10079      -102.584       102.584       530.582       633.165    
  47  0.485025     -0.723555      -14.5516       14.5516       549.794       564.345    
  48  0.852147     -0.159996      -3.21773       3.21773       599.144       602.362    
  49  0.526729     -0.641070      -12.8928       12.8928       598.472       611.365    
  50  0.215250      -1.53596      -30.8901       30.8901       598.976       629.866    
  51  0.715791     -0.334367      -6.72455       6.72455       623.539       630.263    
  52  0.279842      -1.27353      -25.6124       25.6124       621.221       646.833    
  53  0.992428     -0.760034E-02 -0.152853      0.152853       619.499       619.652    
  54  0.369862     -0.994625      -20.0032       20.0032       612.611       632.614    
  55  0.512065     -0.669304      -13.4606       13.4606       667.470       680.931    
  56  0.296127      -1.21697      -24.4748       24.4748       672.831       697.305    
  57  0.814211     -0.205536      -4.13360       4.13360       635.448       639.581    
  58  0.878801     -0.129197      -2.59832       2.59832       664.153       666.751    
  59  0.439842     -0.821340      -16.5182       16.5182       682.905       699.423    
  60  0.433853     -0.835049      -16.7939       16.7939       674.686       691.480    
  61  0.194737      -1.63610      -32.9042       32.9042       484.797       517.701    
loop,thermsimp(1:2)       17  0.946148       11.8411    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     83              441.02          0.48          0.36         15.48
Just calling func    0   0         23.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    441.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    20.1113                81
loop is:       17
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    20.1113                81
loop is:       18
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    4.02226                91

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       82      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.580555     -0.543770      -2.18719       2.18719       284.294       286.481    
   2  0.507790E-01  -2.98027      -11.9874       11.9874       316.589       328.576    
   3  0.953901E-01  -2.34978      -9.45143       9.45143       390.156       399.607    
   4  0.374032     -0.983414      -3.95555       3.95555       383.650       387.606    
   5  0.114286      -2.16905      -8.72451       8.72451       416.387       425.111    
   6  0.919564     -0.838555E-01 -0.337289      0.337289       414.733       415.071    
   7  0.942438     -0.592848E-01 -0.238459      0.238459       408.223       408.461    
   8  0.437172     -0.827429      -3.32814       3.32814       383.931       387.259    
   9  0.860575E-01  -2.45274      -9.86556       9.86556       426.237       436.103    
  10  0.840181     -0.174138     -0.700430      0.700430       427.890       428.591    
  11  0.741720     -0.298783      -1.20178       1.20178       454.674       455.876    
  12  0.938363     -0.636185E-01 -0.255890      0.255890       460.858       461.114    
  13  0.724516     -0.322252      -1.29618       1.29618       470.164       471.461    
  14  0.294534      -1.22236      -4.91665       4.91665       455.492       460.409    
  15  0.327097      -1.11750      -4.49487       4.49487       475.237       479.731    
  16  0.255173      -1.36581      -5.49366       5.49366       481.637       487.130    
  17  0.610252     -0.493884      -1.98653       1.98653       483.406       485.392    
  18  0.104760      -2.25608      -9.07454       9.07454       473.296       482.370    
  19  0.560253     -0.579367      -2.33037       2.33037       478.560       480.890    
  20  0.961216     -0.395561E-01 -0.159105      0.159105       480.741       480.900    
  21  0.313742      -1.15918      -4.66254       4.66254       491.950       496.612    
  22  0.171352      -1.76404      -7.09542       7.09542       449.630       456.725    
  23  0.434673     -0.833160      -3.35119       3.35119       497.814       501.165    
  24  0.816522     -0.202702     -0.815320      0.815320       501.388       502.203    
  25  0.633625E-01  -2.75888      -11.0970       11.0970       513.983       525.080    
  26  0.391819     -0.936955      -3.76868       3.76868       502.830       506.598    
  27  0.955416     -0.456089E-01 -0.183451      0.183451       484.797       484.981    
  28  0.889592     -0.116992     -0.470572      0.470572       508.844       509.315    
  29  0.480292     -0.733361      -2.94977       2.94977       522.066       525.016    
  30  0.101697      -2.28575      -9.19390       9.19390       484.927       494.121    
  31  0.472137     -0.750485      -3.01865       3.01865       529.387       532.406    
  32  0.236497      -1.44182      -5.79938       5.79938       503.480       509.279    
  33  0.166160      -1.79480      -7.21918       7.21918       529.943       537.162    
  34  0.250541      -1.38413      -5.56734       5.56734       549.639       555.206    
  35  0.517682     -0.658395      -2.64824       2.64824       549.794       552.442    
  36  0.244599E-02  -6.01330      -24.1871       24.1871       501.987       526.174    
  37  0.122322E-02  -6.70626      -26.9744       26.9744       526.069       553.044    
  38  0.553046     -0.592313      -2.38244       2.38244       557.432       559.814    
  39  0.286804      -1.24896      -5.02363       5.02363       561.559       566.583    
  40  0.959489     -0.413542E-01 -0.166337      0.166337       574.528       574.694    
  41  0.903182     -0.101831     -0.409593      0.409593       513.023       513.433    
  42  0.242389      -1.41721      -5.70040       5.70040       566.134       571.835    
  43  0.448258     -0.802387      -3.22741       3.22741       599.121       602.348    
  44  0.312617      -1.16278      -4.67700       4.67700       599.144       603.821    
  45  0.804472     -0.217569     -0.875120      0.875120       502.783       503.658    
  46  0.833321     -0.182336     -0.733405      0.733405       598.472       599.205    
  47  0.476277     -0.741755      -2.98353       2.98353       501.739       504.723    
  48  0.978930     -0.212952E-01 -0.856550E-01  0.856550E-01   601.512       601.598    
  49  0.775870     -0.253771      -1.02073       1.02073       619.499       620.520    
  50  0.593636E-01  -2.82407      -11.3592       11.3592       596.173       607.532    
  51  0.998577     -0.142372E-02 -0.572656E-02  0.572656E-02   598.976       598.982    
  52  0.119510      -2.12436      -8.54472       8.54472       623.539       632.084    
  53  0.151758E-01  -4.18806      -16.8455       16.8455       612.611       629.456    
  54  0.124319      -2.08490      -8.38603       8.38603       530.582       538.968    
  55  0.430187     -0.843535      -3.39292       3.39292       635.448       638.841    
  56  0.191547      -1.65262      -6.64727       6.64727       621.221       627.868    
  57  0.772580     -0.258020      -1.03782       1.03782       664.153       665.191    
  58  0.412446     -0.885649      -3.56231       3.56231       667.470       671.033    
  59  0.824001     -0.193583     -0.778643      0.778643       674.686       675.465    
  60  0.362002      -1.01610      -4.08704       4.08704       672.831       676.918    
  61  0.647936     -0.433963      -1.74551       1.74551       441.015       442.761    
loop,thermsimp(1:2)       18   2.18719       11.9874    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     84              502.22          0.48          0.35         15.36
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    502.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       18
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       19
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       83      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.126653      -2.06630      -8.31121       8.31121       284.294       292.605    
   2  0.479085     -0.735876      -2.95989       2.95989       316.589       319.549    
   3  0.559193     -0.581261      -2.33798       2.33798       383.931       386.269    
   4  0.730101     -0.314572      -1.26529       1.26529       383.650       384.915    
   5  0.984890     -0.152253E-01 -0.612401E-01  0.612401E-01   390.156       390.217    
   6  0.912409     -0.916664E-01 -0.368706      0.368706       408.223       408.591    
   7  0.161270      -1.82468      -7.33932       7.33932       414.733       422.073    
   8  0.926244     -0.766172E-01 -0.308174      0.308174       416.387       416.695    
   9  0.812263     -0.207932     -0.836356      0.836356       427.890       428.726    
  10  0.387788E-01  -3.24988      -13.0719       13.0719       426.237       439.309    
  11  0.618940     -0.479747      -1.92967       1.92967       441.015       442.945    
  12  0.714372     -0.336351      -1.35289       1.35289       454.674       456.027    
  13  0.971455     -0.289602E-01 -0.116486      0.116486       449.630       449.746    
  14  0.985500     -0.146062E-01 -0.587498E-01  0.587498E-01   455.492       455.551    
  15  0.891530     -0.114816     -0.461822      0.461822       460.858       461.320    
  16  0.919482     -0.839447E-01 -0.337647      0.337647       470.164       470.502    
  17  0.628692     -0.464113      -1.86679       1.86679       475.237       477.103    
  18  0.408518     -0.895220      -3.60081       3.60081       478.560       482.161    
  19  0.155660      -1.86008      -7.48174       7.48174       480.741       488.222    
  20  0.764033     -0.269144      -1.08257       1.08257       473.296       474.378    
  21  0.131296      -2.03030      -8.16642       8.16642       484.797       492.964    
  22  0.564857     -0.571182      -2.29744       2.29744       483.406       485.703    
  23  0.725059     -0.321503      -1.29317       1.29317       481.637       482.930    
  24  0.172812      -1.75555      -7.06129       7.06129       484.927       491.988    
  25  0.981862E-01  -2.32089      -9.33523       9.33523       491.950       501.285    
  26  0.817771     -0.201172     -0.809168      0.809168       497.814       498.623    
  27  0.168272      -1.78218      -7.16838       7.16838       501.388       508.556    
  28  0.748205     -0.290078      -1.16677       1.16677       502.783       503.950    
  29  0.521699     -0.650664      -2.61714       2.61714       501.739       504.356    
  30  0.667900E-01  -2.70620      -10.8851       10.8851       502.830       513.715    
  31  0.546929     -0.603437      -2.42718       2.42718       503.480       505.907    
  32  0.611591     -0.491692      -1.97771       1.97771       508.844       510.822    
  33  0.243960      -1.41075      -5.67441       5.67441       513.023       518.697    
  34  0.317283      -1.14796      -4.61741       4.61741       522.066       526.684    
  35  0.735628     -0.307031      -1.23496       1.23496       513.983       515.218    
  36  0.309137      -1.17397      -4.72202       4.72202       501.987       506.709    
  37  0.286339      -1.25058      -5.03016       5.03016       529.387       534.417    
  38  0.141288      -1.95695      -7.87137       7.87137       529.943       537.814    
  39  0.264163E-01  -3.63377      -14.6160       14.6160       530.582       545.198    
  40  0.426175     -0.852906      -3.43061       3.43061       549.794       553.224    
  41  0.787521     -0.238866     -0.960780      0.960780       526.069       527.030    
  42  0.415904     -0.877302      -3.52874       3.52874       549.639       553.168    
  43  0.155858      -1.85881      -7.47662       7.47662       557.432       564.908    
  44  0.259153      -1.35033      -5.43140       5.43140       561.559       566.991    
  45  0.553460     -0.591566      -2.37944       2.37944       566.134       568.514    
  46  0.466106     -0.763343      -3.07036       3.07036       574.528       577.598    
  47  0.344564      -1.06547      -4.28562       4.28562       598.976       603.262    
  48  0.971262     -0.291586E-01 -0.117284      0.117284       598.472       598.589    
  49  0.368403E-02  -5.60375      -22.5397       22.5397       601.512       624.052    
  50  0.140876      -1.95988      -7.88314       7.88314       599.121       607.004    
  51  0.139710      -1.96819      -7.91658       7.91658       599.144       607.061    
  52  0.320354      -1.13833      -4.57866       4.57866       596.173       600.752    
  53  0.922731     -0.804178E-01 -0.323461      0.323461       619.499       619.822    
  54  0.910476     -0.937873E-01 -0.377237      0.377237       621.221       621.598    
  55  0.550036E-01  -2.90036      -11.6660       11.6660       612.611       624.277    
  56  0.752031     -0.284978      -1.14626       1.14626       623.539       624.685    
  57  0.742373     -0.297903      -1.19825       1.19825       635.448       636.646    
  58  0.300586      -1.20202      -4.83484       4.83484       664.153       668.988    
  59  0.778317     -0.250621      -1.00806       1.00806       667.470       668.478    
  60  0.792867     -0.232100     -0.933569      0.933569       674.686       675.620    
  61  0.184296      -1.69121      -6.80251       6.80251       502.219       509.022    
loop,thermsimp(1:2)       19   8.31121       2.95989    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     85              440.71          0.48          0.36         15.43
Just calling func    0   0         23.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    440.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       19
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       20
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       84      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566133     -0.568927      -2.28837       2.28837       284.294       286.582    
   2  0.761659     -0.272256      -1.09509       1.09509       316.589       317.684    
   3  0.589426     -0.528605      -2.12619       2.12619       383.650       385.776    
   4  0.680432     -0.385027      -1.54868       1.54868       383.931       385.480    
   5  0.670445E-01  -2.70240      -10.8698       10.8698       390.156       401.025    
   6  0.665072     -0.407860      -1.64052       1.64052       408.223       409.863    
   7  0.244749      -1.40752      -5.66142       5.66142       416.387       422.048    
   8  0.830110     -0.186197     -0.748933      0.748933       414.733       415.482    
   9  0.742150     -0.298204      -1.19946       1.19946       427.890       429.090    
  10  0.646056     -0.436870      -1.75720       1.75720       426.237       427.994    
  11  0.624340E-01  -2.77364      -11.1563       11.1563       441.015       452.172    
  12  0.797360     -0.226449     -0.910838      0.910838       449.630       450.541    
  13  0.381476     -0.963707      -3.87628       3.87628       455.492       459.368    
  14  0.629516     -0.462804      -1.86152       1.86152       454.674       456.535    
  15  0.829126     -0.187383     -0.753704      0.753704       460.858       461.612    
  16  0.624519     -0.470774      -1.89357       1.89357       470.164       472.058    
  17  0.681765     -0.383071      -1.54081       1.54081       473.296       474.837    
  18  0.802996     -0.219405     -0.882504      0.882504       475.237       476.119    
  19  0.647987     -0.433885      -1.74520       1.74520       478.560       480.305    
  20  0.368706     -0.997754      -4.01323       4.01323       481.637       485.650    
  21  0.266832      -1.32114      -5.31396       5.31396       483.406       488.720    
  22  0.766419     -0.266027      -1.07003       1.07003       480.741       481.811    
  23  0.546492     -0.604236      -2.43040       2.43040       484.927       487.357    
  24  0.738749     -0.302798      -1.21793       1.21793       484.797       486.015    
  25  0.239663      -1.42852      -5.74589       5.74589       497.814       503.560    
  26  0.678240     -0.388255      -1.56166       1.56166       491.950       493.511    
  27  0.225018      -1.49158      -5.99951       5.99951       502.783       508.782    
  28  0.318080      -1.14545      -4.60731       4.60731       501.739       506.346    
  29  0.718912     -0.330017      -1.32741       1.32741       503.480       504.807    
  30  0.320196      -1.13882      -4.58064       4.58064       501.987       506.568    
  31  0.941945     -0.598079E-01 -0.240563      0.240563       501.388       501.629    
  32  0.842036     -0.171933     -0.691559      0.691559       502.219       502.911    
  33  0.704010     -0.350962      -1.41166       1.41166       508.844       510.256    
  34  0.201628      -1.60133      -6.44098       6.44098       502.830       509.271    
  35  0.178203      -1.72483      -6.93772       6.93772       513.983       520.921    
  36  0.142531      -1.94819      -7.83615       7.83615       513.023       520.859    
  37  0.594627     -0.519821      -2.09086       2.09086       522.066       524.157    
  38  0.696429     -0.361790      -1.45521       1.45521       526.069       527.525    
  39  0.368239     -0.999024      -4.01834       4.01834       529.387       533.405    
  40  0.755632     -0.280200      -1.12704       1.12704       529.943       531.070    
  41  0.350099E-01  -3.35212      -13.4831       13.4831       530.582       544.065    
  42  0.854445     -0.157303     -0.632715      0.632715       549.639       550.272    
  43  0.580609     -0.543678      -2.18682       2.18682       549.794       551.980    
  44  0.441530     -0.817510      -3.28824       3.28824       557.432       560.720    
  45  0.162700      -1.81585      -7.30382       7.30382       561.559       568.863    
  46  0.794862     -0.229587     -0.923459      0.923459       566.134       567.058    
  47  0.455748     -0.785816      -3.16076       3.16076       574.528       577.689    
  48  0.581713     -0.541779      -2.17918       2.17918       598.472       600.651    
  49  0.847252E-01  -2.46834      -9.92832       9.92832       596.173       606.101    
  50  0.932517     -0.698683E-01 -0.281029      0.281029       598.976       599.257    
  51  0.777959     -0.251082      -1.00992       1.00992       599.121       600.130    
  52  0.440866     -0.819014      -3.29429       3.29429       599.144       602.439    
  53  0.630148     -0.461800      -1.85748       1.85748       619.499       621.356    
  54  0.789155     -0.236793     -0.952442      0.952442       621.221       622.173    
  55  0.462857E-01  -3.07292      -12.3601       12.3601       601.512       613.872    
  56  0.796103     -0.228026     -0.917181      0.917181       612.611       613.528    
  57  0.149188      -1.90255      -7.65255       7.65255       623.539       631.191    
  58  0.449548     -0.799514      -3.21585       3.21585       635.448       638.664    
  59  0.842134E-01  -2.47440      -9.95269       9.95269       667.470       677.423    
  60  0.319965      -1.13954      -4.58354       4.58354       664.153       668.737    
  61  0.103789      -2.26540      -9.11203       9.11203       440.706       449.818    
loop,thermsimp(1:2)       20   2.28837       1.09509    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     86              444.14          0.48          0.35         15.35
Just calling func    0   0         23.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    444.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       20
neval is:       85
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       21
neval is:       85


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       85      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.418736     -0.870514      -3.50144       3.50144       284.294       287.795    
   2  0.465061     -0.765587      -3.07939       3.07939       316.589       319.668    
   3  0.710504E-01  -2.64437      -10.6363       10.6363       383.931       394.567    
   4  0.229190      -1.47321      -5.92562       5.92562       383.650       389.576    
   5  0.794202     -0.230418     -0.926801      0.926801       390.156       391.082    
   6  0.810530     -0.210067     -0.844943      0.844943       408.223       409.067    
   7  0.253596      -1.37201      -5.51859       5.51859       414.733       420.252    
   8  0.584625     -0.536785      -2.15909       2.15909       416.387       418.546    
   9  0.488689     -0.716029      -2.88006       2.88006       426.237       429.117    
  10  0.790055     -0.235653     -0.947857      0.947857       427.890       428.838    
  11  0.118484E-01  -4.43556      -17.8410       17.8410       440.706       458.547    
  12  0.337126      -1.08730      -4.37340       4.37340       449.630       454.003    
  13  0.507493     -0.678273      -2.72819       2.72819       441.015       443.744    
  14  0.985959     -0.141401E-01 -0.568753E-01  0.568753E-01   454.674       454.731    
  15  0.570178     -0.561806      -2.25973       2.25973       455.492       457.752    
  16  0.998026     -0.197606E-02 -0.794822E-02  0.794822E-02   460.858       460.866    
  17  0.339502E-01  -3.38286      -13.6067       13.6067       470.164       483.771    
  18  0.146583      -1.92016      -7.72340       7.72340       473.296       481.019    
  19  0.730545     -0.313964      -1.26284       1.26284       475.237       476.499    
  20  0.408452     -0.895381      -3.60146       3.60146       478.560       482.161    
  21  0.614182     -0.487464      -1.96071       1.96071       480.741       482.701    
  22  0.186242      -1.68071      -6.76025       6.76025       481.637       488.397    
  23  0.514795E-01  -2.96657      -11.9323       11.9323       484.797       496.730    
  24  0.150396      -1.89448      -7.62011       7.62011       484.927       492.547    
  25  0.804261     -0.217831     -0.876175      0.876175       483.406       484.282    
  26  0.247888      -1.39478      -5.61017       5.61017       491.950       497.560    
  27  0.942830     -0.588693E-01 -0.236788      0.236788       501.388       501.625    
  28  0.742769     -0.297371      -1.19610       1.19610       502.219       503.416    
  29  0.554459E-01  -2.89235      -11.6338       11.6338       497.814       509.448    
  30  0.518430     -0.656950      -2.64243       2.64243       503.480       506.122    
  31  0.701592     -0.354403      -1.42550       1.42550       501.739       503.165    
  32  0.895623     -0.110236     -0.443396      0.443396       501.987       502.431    
  33  0.430014     -0.843938      -3.39454       3.39454       502.783       506.177    
  34  0.602611     -0.506484      -2.03721       2.03721       502.830       504.867    
  35  0.794457     -0.230096     -0.925507      0.925507       508.844       509.770    
  36  0.109185      -2.21471      -8.90814       8.90814       513.023       521.931    
  37  0.801812     -0.220881     -0.888440      0.888440       513.983       514.872    
  38  0.904677     -0.100177     -0.402939      0.402939       522.066       522.469    
  39  0.642760     -0.441985      -1.77778       1.77778       526.069       527.847    
  40  0.857070     -0.154236     -0.620378      0.620378       529.943       530.563    
  41  0.959870     -0.409571E-01 -0.164740      0.164740       529.387       529.552    
  42  0.776353     -0.253149      -1.01823       1.01823       530.582       531.600    
  43  0.397709     -0.922036      -3.70867       3.70867       549.639       553.348    
  44  0.281263E-01  -3.57105      -14.3637       14.3637       549.794       564.157    
  45  0.995173     -0.483910E-02 -0.194641E-01  0.194641E-01   557.432       557.451    
  46  0.306088      -1.18388      -4.76188       4.76188       566.134       570.896    
  47  0.349056      -1.05252      -4.23352       4.23352       561.559       565.793    
  48  0.894436     -0.111562     -0.448730      0.448730       574.528       574.977    
  49  0.316709      -1.14977      -4.62469       4.62469       598.976       603.601    
  50  0.234115      -1.45194      -5.84009       5.84009       599.121       604.961    
  51  0.776889     -0.252458      -1.01545       1.01545       598.472       599.487    
  52  0.475283     -0.743844      -2.99194       2.99194       599.144       602.136    
  53  0.364774      -1.00848      -4.05636       4.05636       596.173       600.229    
  54  0.964920     -0.357105E-01 -0.143637      0.143637       612.611       612.754    
  55  0.250604E-01  -3.68647      -14.8279       14.8279       601.512       616.340    
  56  0.504281     -0.684621      -2.75373       2.75373       619.499       622.253    
  57  0.643200     -0.441300      -1.77502       1.77502       621.221       622.996    
  58  0.373071     -0.985986      -3.96590       3.96590       623.539       627.505    
  59  0.660854     -0.414222      -1.66611       1.66611       635.448       637.114    
  60  0.245021      -1.40641      -5.65695       5.65695       664.153       669.810    
  61  0.774308     -0.255786      -1.02884       1.02884       444.139       445.168    
loop,thermsimp(1:2)       21   3.50144       3.07939    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     87              488.76          0.48          0.36         15.49
Just calling func    0   0         23.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    488.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       21
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       22
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       86      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.669908     -0.400615      -1.61138       1.61138       284.294       285.905    
   2  0.435448     -0.831379      -3.34402       3.34402       316.589       319.933    
   3  0.110374      -2.20388      -8.86459       8.86459       383.650       392.515    
   4  0.562182E-01  -2.87852      -11.5781       11.5781       390.156       401.734    
   5  0.875385     -0.133092     -0.535330      0.535330       383.931       384.466    
   6  0.386432     -0.950798      -3.82436       3.82436       408.223       412.047    
   7  0.536259     -0.623139      -2.50643       2.50643       416.387       418.893    
   8  0.887775     -0.119037     -0.478798      0.478798       414.733       415.212    
   9  0.831314     -0.184747     -0.743102      0.743102       427.890       428.633    
  10  0.503017E-01  -2.98972      -12.0254       12.0254       426.237       438.263    
  11  0.882297     -0.125226     -0.503693      0.503693       441.015       441.519    
  12  0.334650E-01  -3.39726      -13.6647       13.6647       444.139       457.804    
  13  0.332592      -1.10084      -4.42787       4.42787       449.630       454.058    
  14  0.673391     -0.395429      -1.59052       1.59052       454.674       456.264    
  15  0.833721     -0.181856     -0.731474      0.731474       455.492       456.223    
  16  0.203936      -1.58995      -6.39519       6.39519       440.706       447.101    
  17  0.474527     -0.745437      -2.99835       2.99835       460.858       463.857    
  18  0.656850     -0.420299      -1.69055       1.69055       475.237       476.927    
  19  0.843808     -0.169830     -0.683102      0.683102       473.296       473.979    
  20  0.195264      -1.63340      -6.56998       6.56998       478.560       485.130    
  21  0.544187     -0.608463      -2.44740       2.44740       480.741       483.188    
  22  0.142555      -1.94803      -7.83549       7.83549       470.164       478.000    
  23  0.390378     -0.940641      -3.78350       3.78350       483.406       487.189    
  24  0.431087     -0.841446      -3.38452       3.38452       481.637       485.021    
  25  0.169220E-01  -4.07914      -16.4074       16.4074       484.927       501.334    
  26  0.940582     -0.612562E-01 -0.246389      0.246389       484.797       485.044    
  27  0.278613E-01  -3.58052      -14.4018       14.4018       491.950       506.352    
  28  0.390975     -0.939112      -3.77735       3.77735       501.388       505.165    
  29  0.260794      -1.34402      -5.40602       5.40602       501.987       507.393    
  30  0.411813     -0.887186      -3.56850       3.56850       501.739       505.308    
  31  0.623700     -0.472085      -1.89885       1.89885       502.219       504.118    
  32  0.177007      -1.73156      -6.96480       6.96480       502.830       509.794    
  33  0.424690     -0.856395      -3.44464       3.44464       503.480       506.924    
  34  0.696177     -0.362151      -1.45667       1.45667       502.783       504.239    
  35  0.810418E-01  -2.51279      -10.1071       10.1071       497.814       507.921    
  36  0.385039     -0.954409      -3.83888       3.83888       508.844       512.683    
  37  0.953256     -0.478715E-01 -0.192552      0.192552       513.983       514.176    
  38  0.500608E-01  -2.99452      -12.0447       12.0447       513.023       525.068    
  39  0.784445     -0.242779     -0.976522      0.976522       522.066       523.043    
  40  0.431607     -0.840241      -3.37967       3.37967       526.069       529.449    
  41  0.270197      -1.30860      -5.26355       5.26355       529.387       534.651    
  42  0.142748      -1.94667      -7.83004       7.83004       529.943       537.773    
  43  0.132710      -2.01959      -8.12333       8.12333       530.582       538.705    
  44  0.531368     -0.632300      -2.54328       2.54328       549.639       552.182    
  45  0.995182     -0.482961E-02 -0.194260E-01  0.194260E-01   557.432       557.451    
  46  0.800353     -0.222703     -0.895768      0.895768       549.794       550.689    
  47  0.997297     -0.270716E-02 -0.108889E-01  0.108889E-01   561.559       561.570    
  48  0.792061E-03  -7.14087      -28.7225       28.7225       566.134       594.857    
  49  0.322029      -1.13311      -4.55767       4.55767       574.528       579.086    
  50  0.856019     -0.155462     -0.625311      0.625311       598.472       599.097    
  51  0.484323     -0.725002      -2.91615       2.91615       596.173       599.089    
  52  0.772073     -0.258676      -1.04046       1.04046       599.144       600.185    
  53  0.621600     -0.475459      -1.91242       1.91242       598.976       600.889    
  54  0.424805     -0.856125      -3.44356       3.44356       599.121       602.564    
  55  0.610689     -0.493168      -1.98365       1.98365       612.611       614.594    
  56  0.524204     -0.645874      -2.59787       2.59787       601.512       604.110    
  57  0.222641      -1.50220      -6.04223       6.04223       619.499       625.541    
  58  0.120645      -2.11490      -8.50669       8.50669       621.221       629.727    
  59  0.807340     -0.214010     -0.860804      0.860804       623.539       624.400    
  60  0.119876      -2.12130      -8.53241       8.53241       635.448       643.980    
  61  0.834111     -0.181389     -0.729594      0.729594       488.762       489.492    
loop,thermsimp(1:2)       22   1.61138       3.34402    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     88              406.65          0.48          0.36         15.41
Just calling func    0   0         23.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    406.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       22
neval is:       87
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       23
neval is:       87


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       87      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.499451     -0.694247      -2.79244       2.79244       284.294       287.086    
   2  0.141891E-01  -4.25528      -17.1159       17.1159       316.589       333.704    
   3  0.138808      -1.97466      -7.94260       7.94260       383.931       391.874    
   4  0.483679     -0.726333      -2.92150       2.92150       383.650       386.571    
   5  0.889673     -0.116901     -0.470208      0.470208       390.156       390.626    
   6  0.873112     -0.135692     -0.545788      0.545788       408.223       408.768    
   7  0.650421     -0.430136      -1.73012       1.73012       414.733       416.463    
   8  0.190014      -1.66066      -6.67960       6.67960       416.387       423.067    
   9  0.501421     -0.690309      -2.77660       2.77660       427.890       430.667    
  10  0.631815E-01  -2.76174      -11.1085       11.1085       426.237       437.346    
  11  0.739777     -0.301407      -1.21234       1.21234       441.015       442.228    
  12  0.399496     -0.917553      -3.69064       3.69064       440.706       444.397    
  13  0.586889     -0.532919      -2.14354       2.14354       449.630       451.773    
  14  0.918117     -0.854306E-01 -0.343624      0.343624       455.492       455.836    
  15  0.442955     -0.814288      -3.27528       3.27528       454.674       457.949    
  16  0.732040E-01  -2.61450      -10.5162       10.5162       444.139       454.655    
  17  0.896326     -0.109451     -0.440242      0.440242       460.858       461.298    
  18  0.286671      -1.24942      -5.02549       5.02549       473.296       478.321    
  19  0.667358     -0.404429      -1.62672       1.62672       475.237       476.863    
  20  0.760840     -0.273332      -1.09941       1.09941       470.164       471.264    
  21  0.698666     -0.358583      -1.44231       1.44231       480.741       482.183    
  22  0.301101      -1.20031      -4.82796       4.82796       481.637       486.465    
  23  0.370765     -0.992186      -3.99083       3.99083       484.797       488.788    
  24  0.985839     -0.142620E-01 -0.573654E-01  0.573654E-01   478.560       478.617    
  25  0.743551     -0.296318      -1.19187       1.19187       483.406       484.598    
  26  0.180038      -1.71459      -6.89653       6.89653       488.762       495.659    
  27  0.334980      -1.09369      -4.39909       4.39909       484.927       489.326    
  28  0.616947     -0.482972      -1.94264       1.94264       502.219       504.162    
  29  0.899960     -0.105405     -0.423965      0.423965       502.783       503.207    
  30  0.875850E-01  -2.43515      -9.79479       9.79479       501.388       511.183    
  31  0.418257     -0.871660      -3.50605       3.50605       501.739       505.245    
  32  0.731820     -0.312221      -1.25583       1.25583       491.950       493.206    
  33  0.878217     -0.129862     -0.522337      0.522337       503.480       504.002    
  34  0.160233E-01  -4.13371      -16.6269       16.6269       501.987       518.614    
  35  0.322705      -1.13102      -4.54925       4.54925       497.814       502.363    
  36  0.211565      -1.55322      -6.24748       6.24748       502.830       509.077    
  37  0.720549     -0.327741      -1.31826       1.31826       508.844       510.163    
  38  0.230706      -1.46661      -5.89910       5.89910       513.983       519.883    
  39  0.640310     -0.445802      -1.79313       1.79313       522.066       523.859    
  40  0.867608E-01  -2.44460      -9.83282       9.83282       513.023       522.856    
  41  0.301663      -1.19844      -4.82046       4.82046       526.069       530.890    
  42  0.482492     -0.728792      -2.93139       2.93139       529.387       532.318    
  43  0.558285     -0.582885      -2.34452       2.34452       529.943       532.287    
  44  0.453601     -0.790537      -3.17975       3.17975       530.582       533.761    
  45  0.353795      -1.03904      -4.17928       4.17928       549.794       553.973    
  46  0.126830      -2.06491      -8.30561       8.30561       549.639       557.944    
  47  0.219551      -1.51617      -6.09843       6.09843       557.432       563.530    
  48  0.787766     -0.238554     -0.959528      0.959528       561.559       562.519    
  49  0.551184     -0.595686      -2.39601       2.39601       574.528       576.924    
  50  0.640009     -0.446273      -1.79503       1.79503       566.134       567.929    
  51  0.115249      -2.16066      -8.69076       8.69076       596.173       604.864    
  52  0.508578E-01  -2.97872      -11.9812       11.9812       598.472       610.453    
  53  0.844831E-01  -2.47120      -9.93983       9.93983       599.144       609.084    
  54  0.966041     -0.345486E-01 -0.138963      0.138963       598.976       599.115    
  55  0.340850      -1.07631      -4.32921       4.32921       599.121       603.450    
  56  0.302642      -1.19520      -4.80743       4.80743       601.512       606.319    
  57  0.742398     -0.297870      -1.19811       1.19811       612.611       613.809    
  58  0.252190      -1.37757      -5.54096       5.54096       623.539       629.080    
  59  0.751226     -0.286049      -1.15056       1.15056       619.499       620.649    
  60  0.827035     -0.189909     -0.763863      0.763863       621.221       621.984    
  61  0.769818     -0.261601      -1.05223       1.05223       406.653       407.705    
loop,thermsimp(1:2)       23   2.79244       17.1159    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     89              415.58          0.47          0.36         15.48
Just calling func    0   0         23.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    415.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       23
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       24
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       88      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.846726     -0.166378     -0.669217      0.669217       284.294       284.963    
   2  0.494357     -0.704497      -2.83367       2.83367       316.589       319.422    
   3  0.698974     -0.358142      -1.44054       1.44054       383.650       385.091    
   4  0.633853     -0.455939      -1.83390       1.83390       390.156       391.990    
   5  0.856069     -0.155404     -0.625077      0.625077       383.931       384.556    
   6  0.176184      -1.73622      -6.98355       6.98355       406.653       413.637    
   7  0.609934     -0.494405      -1.98863       1.98863       408.223       410.211    
   8  0.266046      -1.32409      -5.32582       5.32582       414.733       420.059    
   9  0.435224     -0.831895      -3.34610       3.34610       416.387       419.733    
  10  0.723440     -0.323738      -1.30216       1.30216       427.890       429.192    
  11  0.477113     -0.740002      -2.97648       2.97648       426.237       429.214    
  12  0.299482E-01  -3.50829      -14.1112       14.1112       441.015       455.127    
  13  0.663688     -0.409944      -1.64890       1.64890       440.706       442.355    
  14  0.647038     -0.435350      -1.75109       1.75109       449.630       451.381    
  15  0.161679      -1.82214      -7.32914       7.32914       444.139       451.468    
  16  0.476794E-01  -3.04326      -12.2408       12.2408       455.492       467.733    
  17  0.113987      -2.17167      -8.73504       8.73504       454.674       463.409    
  18  0.497479     -0.698201      -2.80835       2.80835       460.858       463.667    
  19  0.177426      -1.72920      -6.95531       6.95531       470.164       477.120    
  20  0.987997     -0.120759E-01 -0.485725E-01  0.485725E-01   475.237       475.285    
  21  0.956289     -0.446954E-01 -0.179777      0.179777       473.296       473.476    
  22  0.892096     -0.114181     -0.459266      0.459266       478.560       479.019    
  23  0.155195      -1.86307      -7.49377       7.49377       480.741       488.234    
  24  0.527421     -0.639755      -2.57326       2.57326       483.406       485.979    
  25  0.654689     -0.423595      -1.70381       1.70381       481.637       483.340    
  26  0.708505     -0.344598      -1.38607       1.38607       484.797       486.183    
  27  0.723793     -0.323250      -1.30019       1.30019       484.927       486.227    
  28  0.451974     -0.794131      -3.19420       3.19420       491.950       495.144    
  29  0.890977     -0.115437     -0.464317      0.464317       488.762       489.227    
  30  0.364562E-01  -3.31164      -13.3203       13.3203       497.814       511.134    
  31  0.865026     -0.144996     -0.583212      0.583212       502.783       503.366    
  32  0.996186     -0.382099E-02 -0.153690E-01  0.153690E-01   503.480       503.495    
  33  0.911332     -0.928484E-01 -0.373461      0.373461       502.219       502.593    
  34  0.135455      -1.99912      -8.04098       8.04098       501.739       509.780    
  35  0.995351     -0.465996E-02 -0.187436E-01  0.187436E-01   502.830       502.848    
  36  0.683083E-01  -2.68372      -10.7946       10.7946       508.844       519.639    
  37  0.223861      -1.49673      -6.02025       6.02025       501.388       507.408    
  38  0.137796      -1.98198      -7.97206       7.97206       501.987       509.959    
  39  0.423454     -0.859310      -3.45637       3.45637       513.983       517.440    
  40  0.434213E-01  -3.13681      -12.6171       12.6171       513.023       525.640    
  41  0.472541     -0.749630      -3.01521       3.01521       522.066       525.081    
  42  0.446691     -0.805888      -3.24149       3.24149       526.069       529.311    
  43  0.281592      -1.26730      -5.09740       5.09740       529.943       535.040    
  44  0.302834      -1.19457      -4.80487       4.80487       529.387       534.192    
  45  0.559976     -0.579861      -2.33235       2.33235       530.582       532.914    
  46  0.718145     -0.331084      -1.33171       1.33171       549.794       551.125    
  47  0.546740     -0.603782      -2.42857       2.42857       549.639       552.067    
  48  0.655356     -0.422576      -1.69971       1.69971       561.559       563.259    
  49  0.656525     -0.420794      -1.69254       1.69254       557.432       559.124    
  50  0.674325     -0.394043      -1.58494       1.58494       566.134       567.719    
  51  0.954754     -0.463012E-01 -0.186236      0.186236       574.528       574.714    
  52  0.156732      -1.85322      -7.45413       7.45413       598.976       606.431    
  53  0.587560     -0.531777      -2.13895       2.13895       599.121       601.260    
  54  0.288949      -1.24151      -4.99366       4.99366       596.173       601.167    
  55  0.835535     -0.179683     -0.722733      0.722733       601.512       602.235    
  56  0.728219     -0.317153      -1.27567       1.27567       599.144       600.420    
  57  0.648257     -0.433468      -1.74352       1.74352       598.472       600.215    
  58  0.330881      -1.10600      -4.44861       4.44861       612.611       617.059    
  59  0.489725     -0.713910      -2.87153       2.87153       619.499       622.370    
  60  0.824807E-02  -4.79778      -19.2979       19.2979       621.221       640.519    
  61  0.358757E-01  -3.32769      -13.3849       13.3849       415.583       428.968    
loop,thermsimp(1:2)       24  0.669217       2.83367    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     90              385.48          0.48          0.35         15.47
Just calling func    0   0         23.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    385.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       24
neval is:       89
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       25
neval is:       89


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       89      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.479563     -0.734880      -2.95588       2.95588       284.294       287.249    
   2  0.384635     -0.955461      -3.84312       3.84312       316.589       320.432    
   3  0.800579E-01  -2.52500      -10.1562       10.1562       383.931       394.087    
   4  0.502080E-01  -2.99158      -12.0329       12.0329       383.650       395.683    
   5  0.339101      -1.08146      -4.34991       4.34991       390.156       394.506    
   6  0.497040     -0.699085      -2.81190       2.81190       408.223       411.034    
   7  0.862111     -0.148371     -0.596788      0.596788       406.653       407.250    
   8  0.556659     -0.585803      -2.35625       2.35625       416.387       418.743    
   9  0.243855      -1.41118      -5.67615       5.67615       414.733       420.409    
  10  0.500456     -0.692235      -2.78435       2.78435       415.583       418.368    
  11  0.479766     -0.734456      -2.95418       2.95418       427.890       430.844    
  12  0.917865     -0.857051E-01 -0.344729      0.344729       426.237       426.582    
  13  0.377734     -0.973565      -3.91594       3.91594       440.706       444.622    
  14  0.880516     -0.127247     -0.511820      0.511820       449.630       450.141    
  15  0.381917     -0.962552      -3.87164       3.87164       444.139       448.011    
  16  0.139763E-02  -6.57298      -26.4382       26.4382       441.015       467.454    
  17  0.873713     -0.135003     -0.543018      0.543018       454.674       455.217    
  18  0.883451     -0.123920     -0.498437      0.498437       460.858       461.357    
  19  0.997879     -0.212301E-02 -0.853931E-02  0.853931E-02   455.492       455.501    
  20  0.673168     -0.395760      -1.59185       1.59185       473.296       474.888    
  21  0.320320      -1.13843      -4.57908       4.57908       475.237       479.816    
  22  0.142108      -1.95117      -7.84811       7.84811       470.164       478.012    
  23  0.621792     -0.475149      -1.91118       1.91118       478.560       480.471    
  24  0.319037      -1.14245      -4.59523       4.59523       481.637       486.232    
  25  0.945811     -0.557130E-01 -0.224092      0.224092       483.406       483.630    
  26  0.838150     -0.176558     -0.710162      0.710162       484.797       485.507    
  27  0.208724      -1.56674      -6.30184       6.30184       484.927       491.229    
  28  0.180792      -1.71041      -6.87972       6.87972       480.741       487.620    
  29  0.173944E-01  -4.05161      -16.2966       16.2966       488.762       505.059    
  30  0.747026E-01  -2.59424      -10.4347       10.4347       491.950       502.384    
  31  0.974864     -0.254576E-01 -0.102397      0.102397       502.219       502.322    
  32  0.147092      -1.91670      -7.70945       7.70945       502.830       510.539    
  33  0.340250      -1.07807      -4.33630       4.33630       502.783       507.119    
  34  0.893637E-01  -2.41504      -9.71393       9.71393       503.480       513.194    
  35  0.618396     -0.480627      -1.93321       1.93321       501.388       503.321    
  36  0.759288     -0.275374      -1.10763       1.10763       501.739       502.847    
  37  0.160753      -1.82789      -7.35225       7.35225       501.987       509.339    
  38  0.975392     -0.249162E-01 -0.100219      0.100219       497.814       497.914    
  39  0.779723     -0.248816      -1.00080       1.00080       513.983       514.984    
  40  0.596894     -0.516015      -2.07555       2.07555       508.844       510.920    
  41  0.773324     -0.257057      -1.03395       1.03395       522.066       523.100    
  42  0.990392     -0.965465E-02 -0.388336E-01  0.388336E-01   513.023       513.062    
  43  0.542783     -0.611046      -2.45779       2.45779       526.069       528.527    
  44  0.535678     -0.624222      -2.51079       2.51079       530.582       533.092    
  45  0.351112      -1.04665      -4.20990       4.20990       529.387       533.597    
  46  0.701333E-02  -4.95994      -19.9502       19.9502       529.943       549.893    
  47  0.338649      -1.08279      -4.35527       4.35527       549.794       554.149    
  48  0.319165      -1.14205      -4.59361       4.59361       549.639       554.232    
  49  0.625775     -0.468764      -1.88549       1.88549       557.432       559.317    
  50  0.926674     -0.761539E-01 -0.306311      0.306311       561.559       561.866    
  51  0.359258      -1.02371      -4.11764       4.11764       566.134       570.252    
  52  0.892747     -0.113452     -0.456336      0.456336       574.528       574.984    
  53  0.124582      -2.08279      -8.37753       8.37753       598.472       606.849    
  54  0.132920E-01  -4.32059      -17.3786       17.3786       599.144       616.523    
  55  0.764420     -0.268638      -1.08053       1.08053       596.173       597.254    
  56  0.923703     -0.793652E-01 -0.319228      0.319228       599.121       599.440    
  57  0.568421     -0.564893      -2.27215       2.27215       601.512       603.784    
  58  0.165473      -1.79895      -7.23585       7.23585       598.976       606.212    
  59  0.471112E-01  -3.05524      -12.2890       12.2890       612.611       624.900    
  60  0.947905     -0.535014E-01 -0.215196      0.215196       619.499       619.714    
  61  0.142663      -1.94727      -7.83244       7.83244       385.477       393.310    
loop,thermsimp(1:2)       25   2.95588       3.84312    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     91              709.13          0.48          0.36         15.47
Just calling func    0   0         23.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:     92              396.67          0.47          0.35         15.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    396.67
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       25
neval is:       91
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       26
neval is:       91


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:       91
neval,tstepnext:       91      91

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.241161      -1.42229      -5.72082       5.72082       284.294       290.014    
   2  0.541127     -0.614101      -2.47007       2.47007       316.589       319.059    
   3  0.231437      -1.46345      -5.88636       5.88636       385.477       391.364    
   4  0.478482E-01  -3.03972      -12.2266       12.2266       383.931       396.158    
   5  0.946762     -0.547080E-01 -0.220050      0.220050       390.156       390.376    
   6  0.922467     -0.807036E-01 -0.324611      0.324611       383.650       383.975    
   7  0.574496     -0.554262      -2.22939       2.22939       406.653       408.882    
   8  0.151210      -1.88908      -7.59839       7.59839       408.223       415.821    
   9  0.567366     -0.566750      -2.27962       2.27962       415.583       417.863    
  10  0.931156     -0.713280E-01 -0.286900      0.286900       416.387       416.674    
  11  0.435242     -0.831852      -3.34593       3.34593       414.733       418.079    
  12  0.153647      -1.87310      -7.53409       7.53409       426.237       433.771    
  13  0.520603     -0.652767      -2.62560       2.62560       427.890       430.516    
  14  0.200156      -1.60866      -6.47045       6.47045       440.706       447.177    
  15  0.414587     -0.880473      -3.54149       3.54149       444.139       447.681    
  16  0.319024      -1.14249      -4.59539       4.59539       449.630       454.225    
  17  0.924419E-01  -2.38117      -9.57771       9.57771       454.674       464.252    
  18  0.530480     -0.633974      -2.55001       2.55001       455.492       458.042    
  19  0.106900      -2.23586      -8.99323       8.99323       460.858       469.851    
  20  0.402551     -0.909933      -3.65999       3.65999       441.015       444.675    
  21  0.295875      -1.21782      -4.89839       4.89839       473.296       478.194    
  22  0.563325     -0.573899      -2.30837       2.30837       470.164       472.473    
  23  0.206411      -1.57788      -6.34666       6.34666       475.237       481.583    
  24  0.916073E-01  -2.39024      -9.61419       9.61419       478.560       488.174    
  25  0.665403     -0.407363      -1.63852       1.63852       483.406       485.044    
  26  0.825688     -0.191539     -0.770419      0.770419       484.797       485.568    
  27  0.344106      -1.06680      -4.29097       4.29097       481.637       485.928    
  28  0.974170     -0.261699E-01 -0.105262      0.105262       480.741       480.846    
  29  0.277229      -1.28291      -5.16020       5.16020       484.927       490.087    
  30  0.388467     -0.945546      -3.80323       3.80323       497.814       501.617    
  31  0.956302     -0.446812E-01 -0.179719      0.179719       502.219       502.399    
  32  0.254015      -1.37036      -5.51195       5.51195       491.950       497.462    
  33  0.627951     -0.465293      -1.87153       1.87153       501.739       503.611    
  34  0.563611     -0.573391      -2.30633       2.30633       501.388       503.694    
  35  0.546508     -0.604207      -2.43028       2.43028       488.762       491.193    
  36  0.221424      -1.50767      -6.06426       6.06426       502.783       508.847    
  37  0.495100     -0.702996      -2.82764       2.82764       501.987       504.815    
  38  0.513225     -0.667040      -2.68301       2.68301       502.830       505.513    
  39  0.883659     -0.123684     -0.497488      0.497488       508.844       509.342    
  40  0.602649E-01  -2.80900      -11.2986       11.2986       513.023       524.322    
  41  0.475280     -0.743850      -2.99196       2.99196       503.480       506.472    
  42  0.872422     -0.136482     -0.548968      0.548968       513.983       514.532    
  43  0.507612     -0.678038      -2.72725       2.72725       522.066       524.793    
  44  0.670973     -0.399027      -1.60499       1.60499       526.069       527.674    
  45  0.810308     -0.210341     -0.846048      0.846048       530.582       531.428    
  46  0.283076E-02  -5.86721      -23.5995       23.5995       529.387       552.986    
  47  0.914844E-01  -2.39159      -9.61959       9.61959       529.943       539.562    
  48  0.469434     -0.756227      -3.04174       3.04174       549.794       552.835    
  49  0.243684E-01  -3.71447      -14.9406       14.9406       549.639       564.579    
  50  0.321746      -1.13399      -4.56121       4.56121       557.432       561.993    
  51  0.276203      -1.28662      -5.17511       5.17511       561.559       566.735    
  52  0.501568     -0.690015      -2.77542       2.77542       566.134       568.910    
  53  0.931498     -0.709617E-01 -0.285426      0.285426       574.528       574.813    
  54  0.223832      -1.49686      -6.02076       6.02076       596.173       602.194    
  55  0.465980     -0.763611      -3.07145       3.07145       599.121       602.192    
  56  0.472331     -0.750076      -3.01700       3.01700       601.512       604.529    
  57  0.466994     -0.761439      -3.06271       3.06271       598.976       602.039    
  58  0.309091      -1.17412      -4.72262       4.72262       598.472       603.194    
  59  0.627588     -0.465872      -1.87386       1.87386       599.144       601.018    
  60  0.953223     -0.479064E-01 -0.192692      0.192692       619.499       619.692    
  61  0.640674     -0.445234      -1.79085       1.79085       396.675       398.466    
loop,thermsimp(1:2)       26   5.72082       2.47007    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     93              496.47          0.48          0.36         15.39
Just calling func    0   0         23.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    496.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.02226                91
loop is:       26
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:    4.02226                91
loop is:       27
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.804452               101

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       92     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.259907E-01  -3.65002      -2.93626       2.93626       284.294       287.230    
   2  0.968797     -0.316998E-01 -0.255010E-01  0.255010E-01   316.589       316.614    
   3  0.165450      -1.79909      -1.44728       1.44728       383.650       385.097    
   4  0.430766     -0.842190     -0.677502      0.677502       390.156       390.833    
   5  0.750732     -0.286706     -0.230641      0.230641       385.477       385.708    
   6  0.931719E-01  -2.37331      -1.90921       1.90921       383.931       385.840    
   7  0.367733      -1.00040     -0.804773      0.804773       396.675       397.480    
   8  0.913167E-01  -2.39342      -1.92539       1.92539       406.653       408.578    
   9  0.196912      -1.62500      -1.30724       1.30724       408.223       409.530    
  10  0.205958      -1.58008      -1.27110       1.27110       416.387       417.658    
  11  0.770208     -0.261095     -0.210038      0.210038       415.583       415.793    
  12  0.333154      -1.09915     -0.884215      0.884215       414.733       415.618    
  13  0.840252     -0.174053     -0.140017      0.140017       427.890       428.030    
  14  0.483985     -0.725701     -0.583792      0.583792       426.237       426.821    
  15  0.836431     -0.178612     -0.143685      0.143685       441.015       441.159    
  16  0.249264      -1.38924      -1.11758       1.11758       440.706       441.824    
  17  0.897884     -0.107714     -0.866508E-01  0.866508E-01   444.139       444.226    
  18  0.965293     -0.353234E-01 -0.284160E-01  0.284160E-01   449.630       449.658    
  19  0.377270E-01  -3.27738      -2.63650       2.63650       455.492       458.129    
  20  0.281354      -1.26814      -1.02016       1.02016       454.674       455.694    
  21  0.848269     -0.164557     -0.132378      0.132378       460.858       460.991    
  22  0.539425     -0.617251     -0.496549      0.496549       470.164       470.661    
  23  0.206682      -1.57658      -1.26828       1.26828       473.296       474.564    
  24  0.287315      -1.24718      -1.00329       1.00329       480.741       481.744    
  25  0.754710     -0.281422     -0.226390      0.226390       475.237       475.463    
  26  0.438872     -0.823547     -0.662504      0.662504       483.406       484.068    
  27  0.501272     -0.690606     -0.555560      0.555560       484.797       485.353    
  28  0.344762      -1.06490     -0.856661      0.856661       481.637       482.493    
  29  0.963706     -0.369694E-01 -0.297402E-01  0.297402E-01   478.560       478.590    
  30  0.265773      -1.32511      -1.06599       1.06599       484.927       485.993    
  31  0.764669E-01  -2.57090      -2.06816       2.06816       488.762       490.831    
  32  0.331856E-01  -3.40564      -2.73968       2.73968       491.950       494.689    
  33  0.363020      -1.01330     -0.815150      0.815150       497.814       498.629    
  34  0.653853     -0.424872     -0.341790      0.341790       502.219       502.561    
  35  0.228971      -1.47416      -1.18589       1.18589       501.739       502.925    
  36  0.505888     -0.681440     -0.548186      0.548186       501.388       501.936    
  37  0.284083      -1.25849      -1.01239       1.01239       501.987       503.000    
  38  0.143166      -1.94375      -1.56366       1.56366       502.830       504.393    
  39  0.275762E-01  -3.59080      -2.88863       2.88863       503.480       506.368    
  40  0.736553     -0.305774     -0.245981      0.245981       502.783       503.029    
  41  0.471866E-01  -3.05365      -2.45651       2.45651       508.844       511.301    
  42  0.615540E-01  -2.78784      -2.24268       2.24268       513.983       516.226    
  43  0.332354      -1.10156     -0.886149      0.886149       513.023       513.909    
  44  0.554929     -0.588915     -0.473754      0.473754       522.066       522.540    
  45  0.285931      -1.25201      -1.00718       1.00718       526.069       527.077    
  46  0.661898     -0.412645     -0.331953      0.331953       530.582       530.913    
  47  0.838158     -0.176549     -0.142025      0.142025       529.943       530.085    
  48  0.768993     -0.262673     -0.211308      0.211308       549.794       550.005    
  49  0.713877     -0.337045     -0.271137      0.271137       529.387       529.658    
  50  0.667219     -0.404637     -0.325511      0.325511       557.432       557.757    
  51  0.348870      -1.05306     -0.847134      0.847134       549.639       550.486    
  52  0.192740E-01  -3.94900      -3.17678       3.17678       561.559       564.736    
  53  0.690824     -0.369870     -0.297543      0.297543       566.134       566.432    
  54  0.820268     -0.198124     -0.159382      0.159382       574.528       574.687    
  55  0.578395     -0.547498     -0.440436      0.440436       599.144       599.585    
  56  0.588345     -0.530441     -0.426715      0.426715       598.976       599.403    
  57  0.942444     -0.592789E-01 -0.476871E-01  0.476871E-01   599.121       599.168    
  58  0.890640E-01  -2.41840      -1.94549       1.94549       596.173       598.118    
  59  0.315475      -1.15368     -0.928077      0.928077       598.472       599.400    
  60  0.573884     -0.555328     -0.446735      0.446735       601.512       601.959    
  61  0.244604      -1.40811      -1.13276       1.13276       496.473       497.606    
loop,thermsimp(1:2)       27   2.93626      0.255010E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     94              313.08          0.48          0.36         15.38
Just calling func    0   0         23.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    313.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       27
neval is:       93
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       28
neval is:       93


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       93     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.790496     -0.235094     -0.189122      0.189122       284.294       284.483    
   2  0.622608     -0.473838     -0.381180      0.381180       316.589       316.970    
   3  0.657544     -0.419244     -0.337262      0.337262       383.650       383.987    
   4  0.180153E-01  -4.01654      -3.23111       3.23111       385.477       388.709    
   5  0.587531     -0.531826     -0.427829      0.427829       383.931       384.359    
   6  0.337716      -1.08555     -0.873273      0.873273       390.156       391.029    
   7  0.750569     -0.286924     -0.230817      0.230817       396.675       396.906    
   8  0.469144     -0.756846     -0.608846      0.608846       406.653       407.262    
   9  0.637992     -0.449429     -0.361545      0.361545       408.223       408.584    
  10  0.222555      -1.50258      -1.20875       1.20875       414.733       415.942    
  11  0.908711     -0.957284E-01 -0.770089E-01  0.770089E-01   415.583       415.660    
  12  0.339158      -1.08129     -0.869846      0.869846       416.387       417.257    
  13  0.916856E-01  -2.38939      -1.92215       1.92215       426.237       428.159    
  14  0.826366     -0.190718     -0.153423      0.153423       427.890       428.044    
  15  0.735060     -0.307803     -0.247613      0.247613       441.015       441.263    
  16  0.613971     -0.487808     -0.392418      0.392418       440.706       441.099    
  17  0.758429     -0.276507     -0.222436      0.222436       444.139       444.362    
  18  0.415524     -0.878215     -0.706482      0.706482       449.630       450.336    
  19  0.951554E-01  -2.35224      -1.89227       1.89227       454.674       456.566    
  20  0.237507      -1.43756      -1.15645       1.15645       455.492       456.648    
  21  0.399337E-01  -3.22054      -2.59077       2.59077       460.858       463.449    
  22  0.859134     -0.151830     -0.122140      0.122140       470.164       470.286    
  23  0.684636     -0.378868     -0.304781      0.304781       473.296       473.601    
  24  0.726522E-01  -2.62207      -2.10933       2.10933       475.237       477.346    
  25  0.397884     -0.921596     -0.741380      0.741380       478.560       479.301    
  26  0.475789     -0.742781     -0.597532      0.597532       480.741       481.338    
  27  0.287375E-01  -3.54955      -2.85545       2.85545       481.637       484.492    
  28  0.575942     -0.551748     -0.443855      0.443855       483.406       483.850    
  29  0.971835     -0.285695E-01 -0.229828E-01  0.229828E-01   484.797       484.820    
  30  0.351596      -1.04527     -0.840872      0.840872       484.927       485.768    
  31  0.372517     -0.987473     -0.794375      0.794375       488.762       489.557    
  32  0.821349     -0.196807     -0.158322      0.158322       491.950       492.108    
  33  0.396131     -0.926011     -0.744932      0.744932       496.473       497.218    
  34  0.128380      -2.05276      -1.65135       1.65135       497.814       499.465    
  35  0.928981     -0.736672E-01 -0.592618E-01  0.592618E-01   501.388       501.447    
  36  0.459826     -0.776907     -0.624985      0.624985       502.219       502.844    
  37  0.689551     -0.371714     -0.299026      0.299026       501.739       502.038    
  38  0.842850     -0.170966     -0.137534      0.137534       501.987       502.125    
  39  0.909375     -0.949981E-01 -0.764215E-01  0.764215E-01   502.783       502.859    
  40  0.737938     -0.303896     -0.244470      0.244470       502.830       503.074    
  41  0.100706      -2.29555      -1.84666       1.84666       503.480       505.326    
  42  0.271473      -1.30389      -1.04892       1.04892       508.844       509.893    
  43  0.610912     -0.492803     -0.396437      0.396437       513.023       513.419    
  44  0.402812E-01  -3.21187      -2.58380       2.58380       513.983       516.567    
  45  0.751157     -0.286140     -0.230186      0.230186       522.066       522.296    
  46  0.577459     -0.549118     -0.441739      0.441739       526.069       526.511    
  47  0.528336     -0.638023     -0.513259      0.513259       529.387       529.900    
  48  0.108954      -2.21683      -1.78333       1.78333       529.943       531.726    
  49  0.793115     -0.231787     -0.186462      0.186462       530.582       530.768    
  50  0.321696      -1.13415     -0.912368      0.912368       549.794       550.706    
  51  0.635419     -0.453471     -0.364796      0.364796       549.639       550.004    
  52  0.837176     -0.177721     -0.142968      0.142968       557.432       557.575    
  53  0.655822     -0.421865     -0.339371      0.339371       561.559       561.899    
  54  0.493327     -0.706583     -0.568413      0.568413       566.134       566.703    
  55  0.244832      -1.40718      -1.13201       1.13201       574.528       575.660    
  56  0.879636     -0.128247     -0.103168      0.103168       596.173       596.276    
  57  0.561875     -0.576476     -0.463748      0.463748       599.121       599.584    
  58  0.196749      -1.62583      -1.30790       1.30790       598.472       599.780    
  59  0.780499     -0.247821     -0.199360      0.199360       598.976       599.176    
  60  0.640370     -0.445708     -0.358551      0.358551       599.144       599.503    
  61  0.774935     -0.254977     -0.205117      0.205117       313.080       313.286    
loop,thermsimp(1:2)       28  0.189122      0.381180    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     95              352.70          0.48          0.36         15.46
Just calling func    0   0         23.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    352.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       28
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       29
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       94     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.448517     -0.801809     -0.645017      0.645017       284.294       284.939    
   2  0.798846E-02  -4.82976      -3.88531       3.88531       313.080       316.966    
   3  0.622462     -0.474073     -0.381370      0.381370       316.589       316.970    
   4  0.471828     -0.751142     -0.604258      0.604258       383.650       384.254    
   5  0.857129E-01  -2.45675      -1.97634       1.97634       383.931       385.907    
   6  0.773267     -0.257131     -0.206849      0.206849       385.477       385.684    
   7  0.875721     -0.132708     -0.106757      0.106757       390.156       390.262    
   8  0.731035     -0.313294     -0.252030      0.252030       396.675       396.927    
   9  0.756676     -0.278820     -0.224298      0.224298       406.653       406.877    
  10  0.447646     -0.803752     -0.646580      0.646580       408.223       408.869    
  11  0.513865     -0.665794     -0.535600      0.535600       415.583       416.119    
  12  0.663179E-01  -2.71329      -2.18272       2.18272       414.733       416.916    
  13  0.594268     -0.520424     -0.418657      0.418657       416.387       416.806    
  14  0.233984      -1.45250      -1.16847       1.16847       427.890       429.059    
  15  0.568604     -0.564571     -0.454171      0.454171       426.237       426.691    
  16  0.363380E-02  -5.61748      -4.51899       4.51899       440.706       445.225    
  17  0.590645E-01  -2.82912      -2.27590       2.27590       441.015       443.291    
  18  0.744388     -0.295193     -0.237469      0.237469       444.139       444.377    
  19  0.119519      -2.12428      -1.70888       1.70888       449.630       451.339    
  20  0.778916     -0.249852     -0.200994      0.200994       454.674       454.875    
  21  0.408724     -0.894716     -0.719756      0.719756       455.492       456.212    
  22  0.114724      -2.16523      -1.74182       1.74182       460.858       462.600    
  23  0.627979     -0.465248     -0.374270      0.374270       470.164       470.539    
  24  0.672559     -0.396665     -0.319098      0.319098       473.296       473.615    
  25  0.835640     -0.179557     -0.144445      0.144445       475.237       475.381    
  26  0.348030      -1.05547     -0.849073      0.849073       478.560       479.409    
  27  0.210796      -1.55686      -1.25242       1.25242       480.741       481.993    
  28  0.317813      -1.14629     -0.922138      0.922138       483.406       484.328    
  29  0.908686     -0.957556E-01 -0.770309E-01  0.770309E-01   481.637       481.714    
  30  0.536445     -0.622790     -0.501005      0.501005       484.797       485.298    
  31  0.231388      -1.46366      -1.17745       1.17745       484.927       486.104    
  32  0.498398     -0.696357     -0.560186      0.560186       488.762       489.323    
  33  0.736515     -0.305825     -0.246022      0.246022       491.950       492.196    
  34  0.173645      -1.75074      -1.40839       1.40839       496.473       497.881    
  35  0.634967     -0.454182     -0.365368      0.365368       497.814       498.179    
  36  0.831759     -0.184212     -0.148190      0.148190       501.388       501.536    
  37  0.218120      -1.52271      -1.22495       1.22495       501.739       502.964    
  38  0.931280     -0.711949E-01 -0.572729E-01  0.572729E-01   501.987       502.044    
  39  0.801144     -0.221714     -0.178359      0.178359       502.219       502.398    
  40  0.775832     -0.253819     -0.204185      0.204185       502.783       502.987    
  41  0.753416     -0.283137     -0.227770      0.227770       502.830       503.057    
  42  0.189051      -1.66574      -1.34001       1.34001       503.480       504.820    
  43  0.960558     -0.402405E-01 -0.323716E-01  0.323716E-01   508.844       508.877    
  44  0.925875     -0.770164E-01 -0.619561E-01  0.619561E-01   513.023       513.085    
  45  0.939930     -0.619495E-01 -0.498354E-01  0.498354E-01   513.983       514.033    
  46  0.179365      -1.71833      -1.38232       1.38232       522.066       523.448    
  47  0.118092      -2.13629      -1.71854       1.71854       526.069       527.788    
  48  0.825995     -0.191166     -0.153784      0.153784       529.387       529.541    
  49  0.391109     -0.938768     -0.755194      0.755194       530.582       531.337    
  50  0.296359      -1.21618     -0.978361      0.978361       529.943       530.921    
  51  0.878571     -0.129459     -0.104143      0.104143       549.639       549.743    
  52  0.308784      -1.17511     -0.945322      0.945322       549.794       550.739    
  53  0.359214      -1.02384     -0.823629      0.823629       557.432       558.255    
  54  0.539117     -0.617823     -0.497009      0.497009       561.559       562.056    
  55  0.747398     -0.291158     -0.234223      0.234223       566.134       566.369    
  56  0.346049      -1.06118     -0.853665      0.853665       574.528       575.382    
  57  0.983160     -0.169829E-01 -0.136619E-01  0.136619E-01   596.173       596.187    
  58  0.336966      -1.08777     -0.875063      0.875063       598.976       599.851    
  59  0.187008      -1.67660      -1.34875       1.34875       599.144       600.493    
  60  0.925545E-01  -2.37996      -1.91456       1.91456       599.121       601.035    
  61  0.546914     -0.603464     -0.485458      0.485458       352.700       353.185    
loop,thermsimp(1:2)       29  0.645017       3.88531    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     96              295.19          0.48          0.36         15.45
Just calling func    0   0         23.14


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    295.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       29
neval is:       95
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       30
neval is:       95


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       95     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.405536     -0.902547     -0.726056      0.726056       284.294       285.020    
   2  0.753077     -0.283588     -0.228133      0.228133       313.080       313.309    
   3  0.517810     -0.658147     -0.529448      0.529448       316.589       317.118    
   4  0.294833      -1.22135     -0.982515      0.982515       352.700       353.682    
   5  0.998794E-03  -6.90896      -5.55793       5.55793       383.650       389.208    
   6  0.591324     -0.525390     -0.422652      0.422652       385.477       385.900    
   7  0.662405     -0.411879     -0.331337      0.331337       383.931       384.262    
   8  0.746363     -0.292544     -0.235337      0.235337       390.156       390.391    
   9  0.393046     -0.933829     -0.751221      0.751221       396.675       397.426    
  10  0.333365      -1.09852     -0.883705      0.883705       406.653       407.537    
  11  0.324418E-02  -5.73089      -4.61023       4.61023       408.223       412.833    
  12  0.863015     -0.147323     -0.118515      0.118515       415.583       415.702    
  13  0.617726     -0.481711     -0.387513      0.387513       416.387       416.774    
  14  0.315534      -1.15349     -0.927926      0.927926       414.733       415.661    
  15  0.430801     -0.842108     -0.677436      0.677436       426.237       426.915    
  16  0.749803     -0.287945     -0.231638      0.231638       427.890       428.122    
  17  0.478303E-01  -3.04010      -2.44561       2.44561       441.015       443.461    
  18  0.964975     -0.356529E-01 -0.286810E-01  0.286810E-01   444.139       444.168    
  19  0.733259     -0.310256     -0.249587      0.249587       440.706       440.956    
  20  0.193318      -1.64342      -1.32205       1.32205       449.630       450.952    
  21  0.490700     -0.711923     -0.572708      0.572708       454.674       455.247    
  22  0.790580     -0.234988     -0.189037      0.189037       455.492       455.681    
  23  0.139947      -1.96649      -1.58195       1.58195       460.858       462.440    
  24  0.212749      -1.54764      -1.24500       1.24500       470.164       471.409    
  25  0.353204      -1.04071     -0.837202      0.837202       473.296       474.133    
  26  0.483656     -0.726381     -0.584339      0.584339       475.237       475.821    
  27  0.996282     -0.372461E-02 -0.299627E-02  0.299627E-02   478.560       478.563    
  28  0.916953     -0.866986E-01 -0.697449E-01  0.697449E-01   481.637       481.706    
  29  0.924049E-01  -2.38157      -1.91586       1.91586       480.741       482.657    
  30  0.486178     -0.721180     -0.580155      0.580155       483.406       483.986    
  31  0.606389     -0.500233     -0.402414      0.402414       484.797       485.200    
  32  0.185687      -1.68369      -1.35445       1.35445       484.927       486.281    
  33  0.395849     -0.926722     -0.745504      0.745504       488.762       489.508    
  34  0.843354     -0.170369     -0.137054      0.137054       491.950       492.087    
  35  0.970470E-02  -4.63514      -3.72875       3.72875       496.473       500.202    
  36  0.931768     -0.706715E-01 -0.568518E-01  0.568518E-01   497.814       497.871    
  37  0.844121     -0.169460     -0.136323      0.136323       501.388       501.524    
  38  0.546310     -0.604569     -0.486347      0.486347       501.987       502.473    
  39  0.598669     -0.513047     -0.412722      0.412722       502.219       502.632    
  40  0.286002      -1.25176      -1.00698       1.00698       501.739       502.746    
  41  0.597649     -0.514752     -0.414094      0.414094       502.783       503.197    
  42  0.123500      -2.09151      -1.68252       1.68252       502.830       504.512    
  43  0.964446     -0.362010E-01 -0.291220E-01  0.291220E-01   503.480       503.509    
  44  0.109400      -2.21274      -1.78005       1.78005       508.844       510.625    
  45  0.684649     -0.378848     -0.304766      0.304766       513.023       513.328    
  46  0.270676      -1.30683      -1.05128       1.05128       513.983       515.035    
  47  0.718376E-01  -2.63335      -2.11840       2.11840       522.066       524.185    
  48  0.287116E-01  -3.55045      -2.85617       2.85617       526.069       528.926    
  49  0.905670     -0.990803E-01 -0.797054E-01  0.797054E-01   529.387       529.467    
  50  0.928818     -0.738421E-01 -0.594025E-01  0.594025E-01   529.943       530.002    
  51  0.838369     -0.176297     -0.141823      0.141823       530.582       530.723    
  52  0.678378     -0.388051     -0.312168      0.312168       549.639       549.951    
  53  0.727479     -0.318171     -0.255953      0.255953       549.794       550.050    
  54  0.623379     -0.472601     -0.380185      0.380185       557.432       557.812    
  55  0.475445E-01  -3.04609      -2.45043       2.45043       561.559       564.010    
  56  0.369786     -0.994830     -0.800293      0.800293       566.134       566.935    
  57  0.602729     -0.506287     -0.407284      0.407284       574.528       574.935    
  58  0.917090     -0.865501E-01 -0.696255E-01  0.696255E-01   596.173       596.243    
  59  0.901032     -0.104214     -0.838354E-01  0.838354E-01   598.976       599.060    
  60  0.269307      -1.31190      -1.05536       1.05536       599.144       600.200    
  61  0.690482     -0.370366     -0.297942      0.297942       295.188       295.486    
loop,thermsimp(1:2)       30  0.726056      0.228133    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     97              297.44          0.48          0.36         15.47
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    297.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       30
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       31
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       96     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.399878     -0.916596     -0.737358      0.737358       284.294       285.031    
   2  0.668918     -0.402095     -0.323466      0.323466       295.188       295.511    
   3  0.212189      -1.55028      -1.24712       1.24712       313.080       314.328    
   4  0.855324     -0.156275     -0.125716      0.125716       316.589       316.714    
   5  0.829283     -0.187194     -0.150588      0.150588       352.700       352.850    
   6  0.912230     -0.918627E-01 -0.738992E-01  0.738992E-01   383.931       384.005    
   7  0.516042     -0.661566     -0.532199      0.532199       385.477       386.010    
   8  0.830065     -0.186251     -0.149830      0.149830       383.650       383.800    
   9  0.969925     -0.305368E-01 -0.245654E-01  0.245654E-01   390.156       390.180    
  10  0.657055     -0.419988     -0.337860      0.337860       396.675       397.013    
  11  0.800230     -0.222857     -0.179277      0.179277       406.653       406.832    
  12  0.331618      -1.10377     -0.887932      0.887932       408.223       409.110    
  13  0.438858     -0.823579     -0.662530      0.662530       414.733       415.396    
  14  0.807006     -0.214424     -0.172494      0.172494       415.583       415.756    
  15  0.396625     -0.924764     -0.743929      0.743929       416.387       417.131    
  16  0.320929      -1.13653     -0.914288      0.914288       426.237       427.151    
  17  0.161204      -1.82509      -1.46820       1.46820       427.890       429.358    
  18  0.946491     -0.549937E-01 -0.442398E-01  0.442398E-01   440.706       440.750    
  19  0.924115     -0.789184E-01 -0.634861E-01  0.634861E-01   441.015       441.079    
  20  0.627740     -0.465629     -0.374576      0.374576       444.139       444.514    
  21  0.751471     -0.285723     -0.229850      0.229850       449.630       449.860    
  22  0.363523      -1.01191     -0.814036      0.814036       454.674       455.488    
  23  0.507866     -0.677537     -0.545047      0.545047       455.492       456.037    
  24  0.546544     -0.604141     -0.486003      0.486003       460.858       461.344    
  25  0.191709      -1.65177      -1.32877       1.32877       470.164       471.493    
  26  0.664140     -0.409262     -0.329232      0.329232       473.296       473.625    
  27  0.511990     -0.669450     -0.538540      0.538540       475.237       475.775    
  28  0.995424     -0.458623E-02 -0.368941E-02  0.368941E-02   478.560       478.564    
  29  0.641210     -0.444398     -0.357497      0.357497       481.637       481.994    
  30  0.610385     -0.493665     -0.397130      0.397130       480.741       481.138    
  31  0.558511     -0.582481     -0.468578      0.468578       483.406       483.874    
  32  0.591302     -0.525428     -0.422682      0.422682       484.797       485.220    
  33  0.658820     -0.417305     -0.335702      0.335702       484.927       485.262    
  34  0.928169     -0.745415E-01 -0.599651E-01  0.599651E-01   488.762       488.822    
  35  0.238443      -1.43363      -1.15328       1.15328       491.950       493.103    
  36  0.531988     -0.631135     -0.507718      0.507718       497.814       498.322    
  37  0.443688     -0.812633     -0.653725      0.653725       496.473       497.127    
  38  0.305385E-01  -3.48877      -2.80655       2.80655       501.388       504.195    
  39  0.844535     -0.168969     -0.135927      0.135927       501.987       502.123    
  40  0.279961      -1.27310      -1.02415       1.02415       502.219       503.244    
  41  0.371484E-01  -3.29283      -2.64893       2.64893       501.739       504.388    
  42  0.614903     -0.486290     -0.391198      0.391198       502.783       503.174    
  43  0.351800      -1.04469     -0.840404      0.840404       503.480       504.320    
  44  0.470005     -0.755012     -0.607372      0.607372       502.830       503.437    
  45  0.191918E-01  -3.95327      -3.18022       3.18022       508.844       512.025    
  46  0.117970      -2.13733      -1.71938       1.71938       513.023       514.742    
  47  0.424393     -0.857095     -0.689492      0.689492       513.983       514.673    
  48  0.952284     -0.488916E-01 -0.393310E-01  0.393310E-01   522.066       522.105    
  49  0.542283     -0.611968     -0.492299      0.492299       526.069       526.562    
  50  0.882587     -0.124898     -0.100475      0.100475       529.387       529.487    
  51  0.546434     -0.604341     -0.486164      0.486164       529.943       530.429    
  52  0.251183      -1.38157      -1.11141       1.11141       530.582       531.693    
  53  0.849492     -0.163116     -0.131219      0.131219       549.639       549.770    
  54  0.853900E-01  -2.46053      -1.97938       1.97938       549.794       551.773    
  55  0.555022     -0.588748     -0.473620      0.473620       557.432       557.905    
  56  0.357834      -1.02768     -0.826724      0.826724       561.559       562.386    
  57  0.457329     -0.782353     -0.629366      0.629366       566.134       566.764    
  58  0.295533      -1.21898     -0.980608      0.980608       574.528       575.509    
  59  0.486300     -0.720929     -0.579953      0.579953       596.173       596.753    
  60  0.127713      -2.05797      -1.65554       1.65554       598.976       600.632    
  61  0.686939     -0.375509     -0.302080      0.302080       297.444       297.746    
loop,thermsimp(1:2)       31  0.737358      0.323466    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     98              433.89          0.48          0.36         15.45
Just calling func    0   0         23.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    433.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       31
neval is:       97
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       32
neval is:       97


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       97     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.960747E-01  -2.34263      -1.88453       1.88453       284.294       286.178    
   2  0.822641     -0.195236     -0.157058      0.157058       295.188       295.345    
   3  0.818920     -0.199768     -0.160704      0.160704       297.444       297.605    
   4  0.530765     -0.633435     -0.509569      0.509569       313.080       313.590    
   5  0.716574     -0.333273     -0.268103      0.268103       316.589       316.857    
   6  0.779527     -0.249068     -0.200364      0.200364       352.700       352.900    
   7  0.383602     -0.958151     -0.770787      0.770787       383.650       384.421    
   8  0.777200     -0.252058     -0.202768      0.202768       383.931       384.134    
   9  0.422255     -0.862146     -0.693556      0.693556       385.477       386.171    
  10  0.842288E-01  -2.47422      -1.99039       1.99039       390.156       392.146    
  11  0.355090      -1.03538     -0.832917      0.832917       396.675       397.508    
  12  0.311604      -1.16602     -0.938008      0.938008       406.653       407.591    
  13  0.331475      -1.10420     -0.888278      0.888278       408.223       409.111    
  14  0.867267     -0.142408     -0.114560      0.114560       414.733       414.848    
  15  0.381453     -0.963769     -0.775306      0.775306       415.583       416.358    
  16  0.851539     -0.160710     -0.129284      0.129284       416.387       416.516    
  17  0.201482      -1.60205      -1.28878       1.28878       426.237       427.526    
  18  0.276895      -1.28412      -1.03301       1.03301       427.890       428.923    
  19  0.491370     -0.710558     -0.571610      0.571610       440.706       441.278    
  20  0.174099E-01  -4.05072      -3.25861       3.25861       441.015       444.274    
  21  0.554456     -0.589769     -0.474441      0.474441       444.139       444.614    
  22  0.227973      -1.47853      -1.18941       1.18941       449.630       450.819    
  23  0.716863     -0.332870     -0.267778      0.267778       454.674       454.942    
  24  0.722924     -0.324451     -0.261005      0.261005       455.492       455.753    
  25  0.750443     -0.287091     -0.230951      0.230951       460.858       461.089    
  26  0.263935      -1.33205      -1.07157       1.07157       470.164       471.236    
  27  0.122948      -2.09599      -1.68613       1.68613       473.296       474.982    
  28  0.977452     -0.228061E-01 -0.183464E-01  0.183464E-01   475.237       475.255    
  29  0.844666     -0.168814     -0.135803      0.135803       478.560       478.696    
  30  0.430978     -0.841697     -0.677106      0.677106       480.741       481.418    
  31  0.309608      -1.17245     -0.943180      0.943180       481.637       482.580    
  32  0.702254     -0.353460     -0.284342      0.284342       483.406       483.690    
  33  0.448995     -0.800744     -0.644161      0.644161       484.797       485.441    
  34  0.922130     -0.810689E-01 -0.652161E-01  0.652161E-01   484.927       484.992    
  35  0.272440      -1.30034      -1.04606       1.04606       488.762       489.808    
  36  0.696142     -0.362202     -0.291374      0.291374       491.950       492.241    
  37  0.646986     -0.435431     -0.350283      0.350283       496.473       496.823    
  38  0.591196E-02  -5.13078      -4.12747       4.12747       497.814       501.941    
  39  0.120014      -2.12014      -1.70556       1.70556       501.987       503.693    
  40  0.610696     -0.493156     -0.396721      0.396721       502.783       503.180    
  41  0.796409     -0.227643     -0.183128      0.183128       502.219       502.403    
  42  0.467597     -0.760148     -0.611503      0.611503       502.830       503.441    
  43  0.786463     -0.240210     -0.193237      0.193237       501.388       501.581    
  44  0.957848     -0.430665E-01 -0.346450E-01  0.346450E-01   503.480       503.514    
  45  0.852397     -0.159702     -0.128473      0.128473       501.739       501.868    
  46  0.487208     -0.719064     -0.578453      0.578453       508.844       509.423    
  47  0.963082     -0.376172E-01 -0.302612E-01  0.302612E-01   513.983       514.014    
  48  0.887628     -0.119203     -0.958928E-01  0.958928E-01   513.023       513.119    
  49  0.741627E-01  -2.60149      -2.09278       2.09278       522.066       524.159    
  50  0.195714      -1.63110      -1.31214       1.31214       526.069       527.382    
  51  0.842587     -0.171279     -0.137785      0.137785       529.387       529.525    
  52  0.662369     -0.411932     -0.331380      0.331380       529.943       530.274    
  53  0.414947     -0.879604     -0.707600      0.707600       530.582       531.289    
  54  0.118097      -2.13625      -1.71851       1.71851       549.639       551.357    
  55  0.727771E-02  -4.92294      -3.96027       3.96027       549.794       553.754    
  56  0.425756     -0.853889     -0.686913      0.686913       557.432       558.119    
  57  0.775586     -0.254136     -0.204440      0.204440       561.559       561.764    
  58  0.956426     -0.445523E-01 -0.358402E-01  0.358402E-01   566.134       566.170    
  59  0.631676     -0.459379     -0.369549      0.369549       574.528       574.898    
  60  0.334070      -1.09641     -0.882007      0.882007       596.173       597.055    
  61  0.960423     -0.403818E-01 -0.324852E-01  0.324852E-01   433.891       433.924    
loop,thermsimp(1:2)       32   1.88453      0.157058    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:     99              473.06          0.48          0.36         15.38
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    473.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       32
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       33
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       98     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197145      -1.62381      -1.30628       1.30628       284.294       285.600    
   2  0.172537      -1.75714      -1.41354       1.41354       295.188       296.601    
   3  0.559869     -0.580053     -0.466625      0.466625       297.444       297.911    
   4  0.478515     -0.737068     -0.592936      0.592936       313.080       313.673    
   5  0.184961      -1.68761      -1.35760       1.35760       316.589       317.946    
   6  0.198760      -1.61566      -1.29972       1.29972       352.700       353.999    
   7  0.641425     -0.444062     -0.357227      0.357227       383.931       384.288    
   8  0.934891     -0.673256E-01 -0.541602E-01  0.541602E-01   383.650       383.704    
   9  0.849189     -0.163473     -0.131507      0.131507       385.477       385.609    
  10  0.241230      -1.42201      -1.14394       1.14394       390.156       391.300    
  11  0.732828     -0.310844     -0.250059      0.250059       396.675       396.925    
  12  0.325813      -1.12143     -0.902139      0.902139       406.653       407.555    
  13  0.201742      -1.60077      -1.28774       1.28774       408.223       409.510    
  14  0.198555      -1.61669      -1.30055       1.30055       414.733       416.034    
  15  0.136294      -1.99294      -1.60323       1.60323       415.583       417.186    
  16  0.368729     -0.997693     -0.802596      0.802596       416.387       417.190    
  17  0.938849     -0.631009E-01 -0.507617E-01  0.507617E-01   426.237       426.288    
  18  0.103617      -2.26705      -1.82373       1.82373       427.890       429.714    
  19  0.265600      -1.32576      -1.06651       1.06651       433.891       434.958    
  20  0.231845      -1.46168      -1.17586       1.17586       440.706       441.882    
  21  0.446558     -0.806186     -0.648538      0.648538       441.015       441.664    
  22  0.282350      -1.26461      -1.01732       1.01732       444.139       445.156    
  23  0.858767     -0.152258     -0.122484      0.122484       449.630       449.752    
  24  0.156176      -1.85677      -1.49369       1.49369       454.674       456.168    
  25  0.298810      -1.20795     -0.971736      0.971736       455.492       456.464    
  26  0.356625E-01  -3.33366      -2.68177       2.68177       460.858       463.540    
  27  0.339465      -1.08038     -0.869118      0.869118       470.164       471.033    
  28  0.746553     -0.292288     -0.235132      0.235132       473.296       473.531    
  29  0.588570     -0.530060     -0.426408      0.426408       475.237       475.663    
  30  0.349715      -1.05064     -0.845188      0.845188       478.560       479.405    
  31  0.254721      -1.36758      -1.10016       1.10016       480.741       481.841    
  32  0.998888     -0.111269E-02 -0.895103E-03  0.895103E-03   481.637       481.638    
  33  0.589387E-01  -2.83126      -2.27761       2.27761       483.406       485.683    
  34  0.408497     -0.895271     -0.720203      0.720203       484.927       485.647    
  35  0.961754     -0.389967E-01 -0.313710E-01  0.313710E-01   484.797       484.829    
  36  0.324758      -1.12468     -0.904748      0.904748       488.762       489.667    
  37  0.294251      -1.22332     -0.984106      0.984106       491.950       492.934    
  38  0.876463E-01  -2.43445      -1.95840       1.95840       496.473       498.431    
  39  0.557974     -0.583443     -0.469352      0.469352       501.388       501.857    
  40  0.860966E-01  -2.45229      -1.97275       1.97275       501.739       503.712    
  41  0.242117      -1.41834      -1.14098       1.14098       497.814       498.955    
  42  0.250466      -1.38443      -1.11371       1.11371       502.219       503.333    
  43  0.509718     -0.673897     -0.542118      0.542118       502.783       503.325    
  44  0.220531      -1.51172      -1.21610       1.21610       502.830       504.046    
  45  0.348682      -1.05359     -0.847567      0.847567       503.480       504.327    
  46  0.374743     -0.981516     -0.789583      0.789583       501.987       502.777    
  47  0.390525     -0.940263     -0.756397      0.756397       508.844       509.601    
  48  0.568306     -0.565095     -0.454592      0.454592       513.023       513.478    
  49  0.698485     -0.358842     -0.288671      0.288671       513.983       514.272    
  50  0.425203     -0.855189     -0.687959      0.687959       522.066       522.754    
  51  0.810231     -0.210436     -0.169286      0.169286       526.069       526.239    
  52  0.138508      -1.97682      -1.59026       1.59026       529.387       530.977    
  53  0.273035      -1.29816      -1.04430       1.04430       529.943       530.987    
  54  0.267820      -1.31744      -1.05982       1.05982       530.582       531.641    
  55  0.764722E-02  -4.87341      -3.92043       3.92043       549.639       553.559    
  56  0.594952     -0.519274     -0.417731      0.417731       549.794       550.211    
  57  0.993379E-01  -2.30923      -1.85766       1.85766       557.432       559.289    
  58  0.428644     -0.847128     -0.681474      0.681474       561.559       562.241    
  59  0.427707     -0.849318     -0.683236      0.683236       566.134       566.818    
  60  0.667005     -0.404958     -0.325770      0.325770       574.528       574.854    
  61  0.710013     -0.342472     -0.275502      0.275502       473.058       473.333    
loop,thermsimp(1:2)       33   1.30628       1.41354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    100              348.28          0.48          0.36         15.48
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    348.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       33
neval is:       99
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       34
neval is:       99


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:       99     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.535745     -0.624096     -0.502056      0.502056       284.294       284.796    
   2  0.557405     -0.584463     -0.470172      0.470172       295.188       295.658    
   3  0.496008     -0.701164     -0.564053      0.564053       297.444       298.008    
   4  0.666777     -0.405299     -0.326044      0.326044       313.080       313.407    
   5  0.594736     -0.519637     -0.418023      0.418023       316.589       317.007    
   6  0.368335E-01  -3.30135      -2.65578       2.65578       352.700       355.355    
   7  0.415979     -0.877121     -0.705602      0.705602       383.650       384.356    
   8  0.747628     -0.290850     -0.233975      0.233975       383.931       384.165    
   9  0.479331     -0.735363     -0.591565      0.591565       385.477       386.069    
  10  0.741919     -0.298515     -0.240141      0.240141       390.156       390.396    
  11  0.600981     -0.509193     -0.409621      0.409621       396.675       397.084    
  12  0.504007     -0.685164     -0.551182      0.551182       406.653       407.204    
  13  0.242050      -1.41861      -1.14120       1.14120       408.223       409.364    
  14  0.905027E-01  -2.40238      -1.93260       1.93260       414.733       416.666    
  15  0.434013     -0.834681     -0.671461      0.671461       415.583       416.255    
  16  0.708651     -0.344393     -0.277047      0.277047       416.387       416.664    
  17  0.492371     -0.708522     -0.569972      0.569972       426.237       426.807    
  18  0.111019      -2.19805      -1.76823       1.76823       427.890       429.658    
  19  0.544389     -0.608091     -0.489180      0.489180       433.891       434.380    
  20  0.379545     -0.968782     -0.779339      0.779339       441.015       441.795    
  21  0.176314      -1.73549      -1.39612       1.39612       440.706       442.102    
  22  0.747116E-01  -2.59412      -2.08685       2.08685       444.139       446.226    
  23  0.449124     -0.800457     -0.643930      0.643930       449.630       450.274    
  24  0.515386     -0.662840     -0.533223      0.533223       454.674       455.207    
  25  0.338280      -1.08388     -0.871930      0.871930       455.492       456.364    
  26  0.500293     -0.692561     -0.557132      0.557132       460.858       461.415    
  27  0.524139     -0.645998     -0.519675      0.519675       470.164       470.684    
  28  0.130876      -2.03350      -1.63586       1.63586       473.058       474.694    
  29  0.417714     -0.872958     -0.702253      0.702253       473.296       473.998    
  30  0.666539     -0.405657     -0.326332      0.326332       475.237       475.563    
  31  0.505635E-01  -2.98453      -2.40091       2.40091       478.560       480.961    
  32  0.128066      -2.05521      -1.65332       1.65332       481.637       483.290    
  33  0.720303     -0.328084     -0.263928      0.263928       480.741       481.005    
  34  0.133549      -2.01329      -1.61959       1.61959       484.797       486.417    
  35  0.216082E-01  -3.83468      -3.08482       3.08482       484.927       488.012    
  36  0.533660E-01  -2.93058      -2.35751       2.35751       483.406       485.763    
  37  0.694540     -0.364505     -0.293227      0.293227       488.762       489.056    
  38  0.270003      -1.30932      -1.05329       1.05329       491.950       493.003    
  39  0.796170     -0.227942     -0.183368      0.183368       496.473       496.656    
  40  0.335040      -1.09350     -0.879672      0.879672       497.814       498.694    
  41  0.773533     -0.256787     -0.206573      0.206573       501.388       501.595    
  42  0.941449     -0.603348E-01 -0.485365E-01  0.485365E-01   501.987       502.036    
  43  0.788238     -0.237955     -0.191423      0.191423       502.783       502.974    
  44  0.289061      -1.24112     -0.998421      0.998421       502.219       503.218    
  45  0.453329     -0.791137     -0.636432      0.636432       501.739       502.376    
  46  0.423783     -0.858534     -0.690650      0.690650       502.830       503.520    
  47  0.916114     -0.876146E-01 -0.704818E-01  0.704818E-01   503.480       503.550    
  48  0.783595     -0.243863     -0.196176      0.196176       508.844       509.041    
  49  0.659727     -0.415929     -0.334595      0.334595       513.023       513.358    
  50  0.975196     -0.251167E-01 -0.202052E-01  0.202052E-01   513.983       514.004    
  51  0.269551      -1.31100      -1.05463       1.05463       522.066       523.121    
  52  0.334592      -1.09484     -0.880750      0.880750       526.069       526.950    
  53  0.616068     -0.484398     -0.389675      0.389675       529.387       529.777    
  54  0.288473      -1.24315      -1.00006       1.00006       529.943       530.943    
  55  0.229580      -1.47150      -1.18375       1.18375       530.582       531.765    
  56  0.532269     -0.630606     -0.507292      0.507292       549.794       550.301    
  57  0.318359      -1.14458     -0.920756      0.920756       549.639       550.560    
  58  0.904899     -0.999322E-01 -0.803907E-01  0.803907E-01   557.432       557.512    
  59  0.507266     -0.678720     -0.545998      0.545998       561.559       562.105    
  60  0.839857     -0.174523     -0.140396      0.140396       566.134       566.275    
  61  0.807240     -0.214135     -0.172261      0.172261       348.280       348.452    
loop,thermsimp(1:2)       34  0.502056      0.470172    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    101              635.33          0.48          0.35         15.44
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    102              433.15          0.46          0.36         15.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    635.33        1.986     -1.256      3.486     -100.0     0.5486E-01
                      -1.044     0.6183     -100.0      2.401     -1.455    
                     -0.5987     -2.949      2.009      0.000     0.6600    
                      -1.216     -20.00      0.000      0.000     -1.221    

                      -1.600      6692.      8627.     -486.1     -1451.    
                      -4.215     -5.244     -4.061     -15.33     -5.168    
                      -13.58     -2.673     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.2089E-01-0.7589E-01  0.000    -0.1575    
                     -0.1747    -0.1549    -0.1749    -0.1762    -0.1888E-01

                     -0.7487     -2.809      1.382     0.6881     0.1835E-01
                      0.7021E-01-0.4658E-01-0.7504E-01-0.4958E-01-0.7923E-01
                     -0.9289E-01 0.6261E-01-0.2576     -3.106      1.382    

                      -1.414     -1.476      3265.      2666.      0.000    
                       0.000      9.114      8.914      0.000     0.1000    
                       1.069      1.069      9.114      8.891     -106.9    

                      0.1000      1.069      1.069      9.214      9.091    
                      -534.5     0.1000     0.8598     0.9802      9.314    
                       9.214      7942.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    433.15
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       34
neval is:      101
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       35
neval is:      101


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      101
neval,tstepnext:      101     101

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277477      -1.28202      -1.03132       1.03132       284.294       285.325    
   2  0.873268     -0.135512     -0.109013      0.109013       295.188       295.297    
   3  0.446735     -0.805791     -0.648220      0.648220       297.444       298.092    
   4  0.282845      -1.26286      -1.01591       1.01591       313.080       314.096    
   5  0.418890     -0.870147     -0.699992      0.699992       316.589       317.289    
   6  0.233185      -1.45592      -1.17122       1.17122       348.280       349.451    
   7  0.183464      -1.69574      -1.36414       1.36414       352.700       354.064    
   8  0.984642     -0.154774E-01 -0.124508E-01  0.124508E-01   383.931       383.944    
   9  0.537698     -0.620459     -0.499130      0.499130       383.650       384.149    
  10  0.643241     -0.441236     -0.354953      0.354953       385.477       385.832    
  11  0.919005     -0.844639E-01 -0.679472E-01  0.679472E-01   390.156       390.224    
  12  0.445681     -0.808153     -0.650121      0.650121       396.675       397.325    
  13  0.407620     -0.897421     -0.721932      0.721932       406.653       407.375    
  14  0.245209      -1.40565      -1.13078       1.13078       408.223       409.353    
  15  0.701562     -0.354445     -0.285134      0.285134       415.583       415.868    
  16  0.599653     -0.511405     -0.411401      0.411401       416.387       416.798    
  17  0.776979     -0.252342     -0.202998      0.202998       414.733       414.936    
  18  0.288986      -1.24138     -0.998629      0.998629       426.237       427.236    
  19  0.168509      -1.78077      -1.43254       1.43254       427.890       429.323    
  20  0.134718      -2.00457      -1.61258       1.61258       433.891       435.504    
  21  0.735190     -0.307626     -0.247470      0.247470       441.015       441.263    
  22  0.929623     -0.729765E-01 -0.587061E-01  0.587061E-01   440.706       440.765    
  23  0.108150      -2.22424      -1.78929       1.78929       444.139       445.928    
  24  0.826886     -0.190088     -0.152917      0.152917       449.630       449.783    
  25  0.649852     -0.431011     -0.346728      0.346728       454.674       455.021    
  26  0.902146     -0.102979     -0.828419E-01  0.828419E-01   455.492       455.575    
  27  0.534355     -0.626694     -0.504146      0.504146       460.858       461.362    
  28  0.589876E-01  -2.83043      -2.27694       2.27694       470.164       472.441    
  29  0.279477      -1.27484      -1.02554       1.02554       473.296       474.321    
  30  0.595043     -0.519121     -0.417608      0.417608       473.058       473.475    
  31  0.984218     -0.159078E-01 -0.127971E-01  0.127971E-01   475.237       475.249    
  32  0.354065      -1.03828     -0.835244      0.835244       478.560       479.395    
  33  0.111516      -2.19359      -1.76464       1.76464       480.741       482.505    
  34  0.214185      -1.54092      -1.23959       1.23959       481.637       482.876    
  35  0.197816      -1.62042      -1.30355       1.30355       483.406       484.709    
  36  0.139402      -1.97039      -1.58509       1.58509       484.797       486.382    
  37  0.248067      -1.39406      -1.12145       1.12145       484.927       486.048    
  38  0.956580     -0.443904E-01 -0.357100E-01  0.357100E-01   488.762       488.798    
  39  0.804945     -0.216981     -0.174551      0.174551       491.950       492.124    
  40  0.332153      -1.10216     -0.886635      0.886635       496.473       497.360    
  41  0.929615     -0.729852E-01 -0.587131E-01  0.587131E-01   497.814       497.873    
  42  0.885778     -0.121289     -0.975712E-01  0.975712E-01   501.388       501.486    
  43  0.176239      -1.73592      -1.39646       1.39646       501.987       503.384    
  44  0.288034      -1.24468      -1.00128       1.00128       501.739       502.740    
  45  0.889111     -0.117533     -0.945497E-01  0.945497E-01   502.783       502.877    
  46  0.733532E-01  -2.61247      -2.10161       2.10161       502.219       504.321    
  47  0.834245     -0.181228     -0.145790      0.145790       502.830       502.975    
  48  0.551197     -0.595663     -0.479183      0.479183       503.480       503.959    
  49  0.528087     -0.638494     -0.513638      0.513638       508.844       509.358    
  50  0.876326     -0.132017     -0.106201      0.106201       513.023       513.129    
  51  0.670758     -0.399347     -0.321255      0.321255       513.983       514.305    
  52  0.310100      -1.17086     -0.941902      0.941902       522.066       523.008    
  53  0.147560      -1.91352      -1.53933       1.53933       526.069       527.609    
  54  0.913583     -0.903814E-01 -0.727076E-01  0.727076E-01   529.387       529.460    
  55  0.400583     -0.914835     -0.735941      0.735941       529.943       530.678    
  56  0.677107     -0.389926     -0.313677      0.313677       530.582       530.895    
  57  0.279109      -1.27615      -1.02660       1.02660       549.794       550.820    
  58  0.213401      -1.54458      -1.24254       1.24254       549.639       550.881    
  59  0.581996     -0.541291     -0.435443      0.435443       557.432       557.867    
  60  0.179364      -1.71834      -1.38232       1.38232       561.559       562.942    
  61  0.525195     -0.643985     -0.518056      0.518056       433.149       433.667    
loop,thermsimp(1:2)       35   1.03132      0.109013    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    103              914.43          0.48          0.36         15.48
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    104              395.90          0.47          0.35         15.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    395.90
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.804452               101
loop is:       35
neval is:      103
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.804452               101
loop is:       36
neval is:      103


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.160890               111

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      111
neval,tstepnext:      103     111

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.198451      -1.61721     -0.260194      0.260194       284.294       284.554    
   2  0.822110     -0.195881     -0.315154E-01  0.315154E-01   295.188       295.219    
   3  0.841298     -0.172809     -0.278033E-01  0.278033E-01   297.444       297.472    
   4  0.249763      -1.38724     -0.223194      0.223194       313.080       313.304    
   5  0.685478     -0.377639     -0.607584E-01  0.607584E-01   316.589       316.649    
   6  0.747196     -0.291428     -0.468879E-01  0.468879E-01   348.280       348.327    
   7  0.541328     -0.613730     -0.987433E-01  0.987433E-01   352.700       352.798    
   8  0.171309      -1.76429     -0.283857      0.283857       383.931       384.215    
   9  0.952337     -0.488358E-01 -0.785722E-02  0.785722E-02   383.650       383.658    
  10  0.808047     -0.213134     -0.342913E-01  0.342913E-01   385.477       385.512    
  11  0.598670     -0.513044     -0.825440E-01  0.825440E-01   390.156       390.238    
  12  0.918321     -0.852082E-01 -0.137092E-01  0.137092E-01   396.675       396.688    
  13  0.975938     -0.243561E-01 -0.391866E-02  0.391866E-02   406.653       406.657    
  14  0.660804     -0.414298     -0.666566E-01  0.666566E-01   408.223       408.289    
  15  0.432003     -0.839323     -0.135039      0.135039       414.733       414.868    
  16  0.184959      -1.68762     -0.271522      0.271522       415.583       415.855    
  17  0.506675     -0.679885     -0.109387      0.109387       416.387       416.496    
  18  0.261248      -1.34229     -0.215961      0.215961       426.237       426.453    
  19  0.328306      -1.11381     -0.179201      0.179201       427.890       428.069    
  20  0.498350     -0.696452     -0.112052      0.112052       433.149       433.261    
  21  0.602482     -0.506697     -0.815227E-01  0.815227E-01   433.891       433.973    
  22  0.199483      -1.61203     -0.259360      0.259360       440.706       440.965    
  23  0.778178     -0.250799     -0.403513E-01  0.403513E-01   441.015       441.056    
  24  0.191628      -1.65220     -0.265823      0.265823       444.139       444.405    
  25  0.513787     -0.665947     -0.107145      0.107145       449.630       449.737    
  26  0.758025     -0.277038     -0.445729E-01  0.445729E-01   454.674       454.718    
  27  0.911385     -0.927898E-01 -0.149290E-01  0.149290E-01   455.492       455.507    
  28  0.606191     -0.500560     -0.805353E-01  0.805353E-01   460.858       460.939    
  29  0.441755     -0.817001     -0.131448      0.131448       470.164       470.296    
  30  0.561629     -0.576914     -0.928200E-01  0.928200E-01   473.058       473.151    
  31  0.595004     -0.519187     -0.835323E-01  0.835323E-01   473.296       473.379    
  32  0.114576      -2.16651     -0.348571      0.348571       475.237       475.585    
  33  0.683402     -0.380672     -0.612465E-01  0.612465E-01   478.560       478.621    
  34  0.767042     -0.265214     -0.426704E-01  0.426704E-01   480.741       480.783    
  35  0.505957E-01  -2.98389     -0.480079      0.480079       481.637       482.117    
  36  0.570544     -0.561164     -0.902860E-01  0.902860E-01   483.406       483.496    
  37  0.619751     -0.478438     -0.769761E-01  0.769761E-01   484.927       485.004    
  38  0.787025     -0.239495     -0.385325E-01  0.385325E-01   484.797       484.836    
  39  0.720347     -0.328022     -0.527757E-01  0.527757E-01   488.762       488.815    
  40  0.526739     -0.641050     -0.103139      0.103139       491.950       492.053    
  41  0.193123      -1.64443     -0.264573      0.264573       496.473       496.738    
  42  0.535361     -0.624815     -0.100527      0.100527       497.814       497.914    
  43  0.277304      -1.28264     -0.206365      0.206365       501.388       501.594    
  44  0.490511     -0.712307     -0.114603      0.114603       501.739       501.854    
  45  0.514866     -0.663848     -0.106807      0.106807       502.783       502.890    
  46  0.931396     -0.710703E-01 -0.114345E-01  0.114345E-01   502.830       502.841    
  47  0.343264      -1.06925     -0.172033      0.172033       501.987       502.159    
  48  0.711600E-01  -2.64282     -0.425205      0.425205       503.480       503.905    
  49  0.978690E-01  -2.32413     -0.373930      0.373930       502.219       502.593    
  50  0.472438     -0.749848     -0.120643      0.120643       508.844       508.965    
  51  0.291904      -1.23133     -0.198110      0.198110       513.023       513.221    
  52  0.645466     -0.437782     -0.704350E-01  0.704350E-01   513.983       514.054    
  53  0.566154     -0.568890     -0.915289E-01  0.915289E-01   522.066       522.158    
  54  0.803553     -0.218713     -0.351888E-01  0.351888E-01   526.069       526.105    
  55  0.164357      -1.80571     -0.290522      0.290522       529.387       529.678    
  56  0.107693      -2.22847     -0.358540      0.358540       529.943       530.301    
  57  0.408343     -0.895647     -0.144101      0.144101       530.582       530.726    
  58  0.191035      -1.65530     -0.266321      0.266321       549.794       550.060    
  59  0.225888      -1.48771     -0.239359      0.239359       549.639       549.878    
  60  0.959236E-01  -2.34420     -0.377160      0.377160       557.432       557.809    
  61  0.833926     -0.181611     -0.292194E-01  0.292194E-01   395.905       395.934    
loop,thermsimp(1:2)       36  0.260194      0.315154E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    105              790.57          0.48          0.35         15.36
Just calling func    0   0         23.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    106              368.22          0.46          0.36         15.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    368.22
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.160890               111
loop is:       36
neval is:      105
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.160890               111
loop is:       37
neval is:      105


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      111
neval,tstepnext:      105     111

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.588406     -0.530338     -0.853263E-01  0.853263E-01   284.294       284.379    
   2  0.998168     -0.183410E-02 -0.295090E-03  0.295090E-03   295.188       295.188    
   3  0.411554     -0.887815     -0.142841      0.142841       297.444       297.587    
   4  0.462695     -0.770686     -0.123996      0.123996       313.080       313.204    
   5  0.374640     -0.981790     -0.157961      0.157961       316.589       316.747    
   6  0.929995     -0.725758E-01 -0.116768E-01  0.116768E-01   348.280       348.292    
   7  0.486417     -0.720689     -0.115952      0.115952       352.700       352.816    
   8  0.359645      -1.02264     -0.164533      0.164533       383.650       383.815    
   9  0.349702E-01  -3.35326     -0.539508      0.539508       383.931       384.471    
  10  0.462640     -0.770807     -0.124015      0.124015       385.477       385.601    
  11  0.526412     -0.641672     -0.103239      0.103239       390.156       390.259    
  12  0.108727      -2.21891     -0.357002      0.357002       395.905       396.262    
  13  0.265452      -1.32632     -0.213393      0.213393       396.675       396.888    
  14  0.488554     -0.716305     -0.115247      0.115247       406.653       406.768    
  15  0.254919E-01  -3.66939     -0.590370      0.590370       408.223       408.813    
  16  0.568500     -0.564753     -0.908635E-01  0.908635E-01   414.733       414.824    
  17  0.870050     -0.139204     -0.223966E-01  0.223966E-01   415.583       415.606    
  18  0.544084     -0.608652     -0.979263E-01  0.979263E-01   416.387       416.485    
  19  0.310452      -1.16972     -0.188198      0.188198       426.237       426.425    
  20  0.915582     -0.881953E-01 -0.141898E-01  0.141898E-01   427.890       427.904    
  21  0.806593     -0.214936     -0.345811E-01  0.345811E-01   433.149       433.183    
  22  0.316508      -1.15041     -0.185089      0.185089       433.891       434.076    
  23  0.619736     -0.478462     -0.769800E-01  0.769800E-01   440.706       440.783    
  24  0.606785     -0.499581     -0.803778E-01  0.803778E-01   441.015       441.096    
  25  0.692842     -0.366953     -0.590393E-01  0.590393E-01   444.139       444.198    
  26  0.174537      -1.74562     -0.280853      0.280853       449.630       449.911    
  27  0.599656     -0.511399     -0.822792E-01  0.822792E-01   454.674       454.756    
  28  0.133035      -2.01714     -0.324539      0.324539       455.492       455.817    
  29  0.182159      -1.70287     -0.273976      0.273976       460.858       461.132    
  30  0.816950     -0.202177     -0.325284E-01  0.325284E-01   470.164       470.197    
  31  0.200391      -1.60749     -0.258629      0.258629       473.058       473.316    
  32  0.944961     -0.566119E-01 -0.910832E-02  0.910832E-02   473.296       473.305    
  33  0.971081     -0.293454E-01 -0.472140E-02  0.472140E-02   475.237       475.241    
  34  0.471901     -0.750987     -0.120827      0.120827       478.560       478.681    
  35  0.443406     -0.813270     -0.130847      0.130847       480.741       480.871    
  36  0.788523     -0.237593     -0.382265E-01  0.382265E-01   481.637       481.675    
  37  0.885042     -0.122120     -0.196479E-01  0.196479E-01   483.406       483.425    
  38  0.890022     -0.116509     -0.187452E-01  0.187452E-01   484.797       484.816    
  39  0.377878     -0.973184     -0.156576      0.156576       484.927       485.083    
  40  0.801221     -0.221619     -0.356564E-01  0.356564E-01   488.762       488.798    
  41  0.645791     -0.437280     -0.703542E-01  0.703542E-01   491.950       492.020    
  42  0.160840      -1.82735     -0.294003      0.294003       496.473       496.767    
  43  0.483246     -0.727230     -0.117004      0.117004       497.814       497.931    
  44  0.165069      -1.80139     -0.289827      0.289827       501.388       501.678    
  45  0.876165     -0.132201     -0.212698E-01  0.212698E-01   501.739       501.760    
  46  0.103883      -2.26449     -0.364334      0.364334       501.987       502.351    
  47  0.477902     -0.738349     -0.118793      0.118793       502.219       502.338    
  48  0.887621     -0.119210     -0.191798E-01  0.191798E-01   502.830       502.849    
  49  0.865273     -0.144710     -0.232825E-01  0.232825E-01   502.783       502.806    
  50  0.899308     -0.106130     -0.170753E-01  0.170753E-01   503.480       503.497    
  51  0.968110     -0.324091E-01 -0.521431E-02  0.521431E-02   508.844       508.850    
  52  0.728260     -0.317097     -0.510178E-01  0.510178E-01   513.023       513.074    
  53  0.499844     -0.693458     -0.111571      0.111571       513.983       514.095    
  54  0.508412E-01  -2.97905     -0.479300      0.479300       522.066       522.545    
  55  0.773578     -0.256729     -0.413052E-01  0.413052E-01   526.069       526.111    
  56  0.259472      -1.34911     -0.217058      0.217058       529.387       529.604    
  57  0.235288      -1.44694     -0.232800      0.232800       529.943       530.175    
  58  0.586972     -0.532778     -0.857190E-01  0.857190E-01   530.582       530.667    
  59  0.683772     -0.380130     -0.611593E-01  0.611593E-01   549.639       549.700    
  60  0.535260     -0.625003     -0.100557      0.100557       549.794       549.894    
  61  0.359536      -1.02294     -0.164582      0.164582       368.217       368.381    
loop,thermsimp(1:2)       37  0.853263E-01  0.295090E-03

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    107              362.87          0.48          0.36         15.40
Just calling func    0   0         23.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    362.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.160890               111
loop is:       37
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.160890               111
loop is:       38
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      111
neval,tstepnext:      106     111

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.843281     -0.170455     -0.274245E-01  0.274245E-01   284.294       284.321    
   2  0.608898     -0.496104     -0.798185E-01  0.798185E-01   295.188       295.268    
   3  0.868844     -0.140592     -0.226199E-01  0.226199E-01   297.444       297.467    
   4  0.410331     -0.890791     -0.143320      0.143320       313.080       313.224    
   5  0.347396      -1.05729     -0.170108      0.170108       316.589       316.759    
   6  0.547536     -0.602327     -0.969087E-01  0.969087E-01   348.280       348.377    
   7  0.259100      -1.35054     -0.217289      0.217289       352.700       352.917    
   8  0.486632     -0.720247     -0.115881      0.115881       368.217       368.333    
   9  0.259353      -1.34956     -0.217132      0.217132       383.650       383.867    
  10  0.518721     -0.656389     -0.105607      0.105607       383.931       384.037    
  11  0.881196     -0.126476     -0.203487E-01  0.203487E-01   385.477       385.498    
  12  0.605212     -0.502176     -0.807953E-01  0.807953E-01   390.156       390.236    
  13  0.224421      -1.49423     -0.240408      0.240408       395.905       396.145    
  14  0.544670     -0.607576     -0.977532E-01  0.977532E-01   396.675       396.773    
  15  0.564011     -0.572681     -0.921389E-01  0.921389E-01   406.653       406.745    
  16  0.699502     -0.357387     -0.575001E-01  0.575001E-01   408.223       408.280    
  17  0.470415     -0.754140     -0.121334      0.121334       414.733       414.855    
  18  0.139159      -1.97213     -0.317298      0.317298       415.583       415.900    
  19  0.136823      -1.98907     -0.320022      0.320022       416.387       416.707    
  20  0.532283     -0.630580     -0.101454      0.101454       426.237       426.339    
  21  0.409110E-01  -3.19636     -0.514263      0.514263       427.890       428.404    
  22  0.713638     -0.337380     -0.542812E-01  0.542812E-01   433.149       433.203    
  23  0.256713      -1.35980     -0.218778      0.218778       433.891       434.110    
  24  0.554287     -0.590072     -0.949370E-01  0.949370E-01   440.706       440.801    
  25  0.659652E-01  -2.71863     -0.437401      0.437401       441.015       441.453    
  26  0.544634     -0.607641     -0.977637E-01  0.977637E-01   444.139       444.237    
  27  0.654941E-01  -2.72580     -0.438555      0.438555       449.630       450.068    
  28  0.668344     -0.402952     -0.648311E-01  0.648311E-01   454.674       454.739    
  29  0.659102     -0.416877     -0.670716E-01  0.670716E-01   455.492       455.559    
  30  0.576185     -0.551326     -0.887031E-01  0.887031E-01   460.858       460.947    
  31  0.993337     -0.668518E-02 -0.107558E-02  0.107558E-02   470.164       470.165    
  32  0.556088     -0.586829     -0.944151E-01  0.944151E-01   473.296       473.390    
  33  0.917658     -0.859310E-01 -0.138255E-01  0.138255E-01   473.058       473.072    
  34  0.810520     -0.210080     -0.337998E-01  0.337998E-01   475.237       475.270    
  35  0.657927     -0.418661     -0.673586E-01  0.673586E-01   478.560       478.627    
  36  0.706260     -0.347772     -0.559531E-01  0.559531E-01   480.741       480.797    
  37  0.846711     -0.166396     -0.267715E-01  0.267715E-01   481.637       481.663    
  38  0.496316     -0.700542     -0.112711      0.112711       483.406       483.519    
  39  0.857854     -0.153321     -0.246679E-01  0.246679E-01   484.797       484.822    
  40  0.304390      -1.18944     -0.191370      0.191370       484.927       485.118    
  41  0.816371     -0.202886     -0.326424E-01  0.326424E-01   488.762       488.795    
  42  0.205323      -1.58317     -0.254717      0.254717       491.950       492.204    
  43  0.322599      -1.13135     -0.182023      0.182023       496.473       496.655    
  44  0.840212     -0.174101     -0.280112E-01  0.280112E-01   497.814       497.842    
  45  0.235871      -1.44447     -0.232402      0.232402       501.388       501.620    
  46  0.877593     -0.130572     -0.210078E-01  0.210078E-01   501.739       501.760    
  47  0.792424     -0.232659     -0.374326E-01  0.374326E-01   502.219       502.257    
  48  0.316101      -1.15169     -0.185296      0.185296       501.987       502.172    
  49  0.507442     -0.678372     -0.109144      0.109144       502.783       502.892    
  50  0.208125      -1.56961     -0.252536      0.252536       502.830       503.082    
  51  0.789247     -0.236676     -0.380789E-01  0.380789E-01   503.480       503.518    
  52  0.283793      -1.25951     -0.202643      0.202643       508.844       509.047    
  53  0.161713      -1.82193     -0.293131      0.293131       513.023       513.316    
  54  0.844380     -0.169152     -0.272150E-01  0.272150E-01   513.983       514.011    
  55  0.825538     -0.191720     -0.308459E-01  0.308459E-01   522.066       522.097    
  56  0.442844     -0.814539     -0.131052      0.131052       526.069       526.200    
  57  0.781050     -0.247116     -0.397587E-01  0.397587E-01   529.387       529.427    
  58  0.350063      -1.04964     -0.168878      0.168878       529.943       530.111    
  59  0.137428      -1.98465     -0.319312      0.319312       530.582       530.901    
  60  0.194761E-01  -3.93857     -0.633678      0.633678       549.639       550.273    
  61  0.562010     -0.576235     -0.927108E-01  0.927108E-01   362.870       362.963    
loop,thermsimp(1:2)       38  0.274245E-01  0.798185E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    108              300.33          0.48          0.36         15.38
Just calling func    0   0         23.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    300.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.160890               111
loop is:       38
neval is:      107
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.160890               111
loop is:       39
neval is:      107


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      111
neval,tstepnext:      107     111

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.341604      -1.07410     -0.172813      0.172813       284.294       284.466    
   2  0.580412     -0.544017     -0.875271E-01  0.875271E-01   295.188       295.275    
   3  0.283796      -1.25950     -0.202641      0.202641       297.444       297.647    
   4  0.850438     -0.162004     -0.260648E-01  0.260648E-01   313.080       313.107    
   5  0.796900     -0.227025     -0.365262E-01  0.365262E-01   316.589       316.625    
   6  0.670063     -0.400383     -0.644178E-01  0.644178E-01   348.280       348.344    
   7  0.468423     -0.758384     -0.122017      0.122017       352.700       352.822    
   8  0.182067      -1.70338     -0.274058      0.274058       362.870       363.144    
   9  0.733700     -0.309655     -0.498206E-01  0.498206E-01   368.217       368.266    
  10  0.600391     -0.510174     -0.820821E-01  0.820821E-01   383.650       383.732    
  11  0.577019     -0.549881     -0.884706E-01  0.884706E-01   383.931       384.020    
  12  0.951253     -0.499754E-01 -0.804056E-02  0.804056E-02   385.477       385.486    
  13  0.186254      -1.68064     -0.270400      0.270400       390.156       390.426    
  14  0.992202     -0.782851E-02 -0.125953E-02  0.125953E-02   395.905       395.906    
  15  0.843142     -0.170620     -0.274511E-01  0.274511E-01   396.675       396.702    
  16  0.333720      -1.09745     -0.176570      0.176570       406.653       406.830    
  17  0.955179     -0.458569E-01 -0.737794E-02  0.737794E-02   408.223       408.230    
  18  0.380299E-01  -3.26938     -0.526012      0.526012       414.733       415.259    
  19  0.361199      -1.01833     -0.163839      0.163839       415.583       415.747    
  20  0.331989      -1.10265     -0.177406      0.177406       416.387       416.564    
  21  0.154371      -1.86840     -0.300607      0.300607       426.237       426.538    
  22  0.383031     -0.959640     -0.154397      0.154397       427.890       428.045    
  23  0.690119     -0.370892     -0.596730E-01  0.596730E-01   433.149       433.208    
  24  0.567991     -0.565649     -0.910076E-01  0.910076E-01   433.891       433.982    
  25  0.886061     -0.120969     -0.194628E-01  0.194628E-01   440.706       440.726    
  26  0.273078      -1.29800     -0.208835      0.208835       441.015       441.224    
  27  0.740544     -0.300370     -0.483267E-01  0.483267E-01   444.139       444.187    
  28  0.827927     -0.188830     -0.303809E-01  0.303809E-01   449.630       449.660    
  29  0.576666     -0.550492     -0.885689E-01  0.885689E-01   454.674       454.762    
  30  0.468035     -0.759211     -0.122150      0.122150       455.492       455.614    
  31  0.396743E-01  -3.22705     -0.519202      0.519202       460.858       461.377    
  32  0.852653     -0.159403     -0.256464E-01  0.256464E-01   470.164       470.190    
  33  0.628369     -0.464627     -0.747541E-01  0.747541E-01   473.058       473.133    
  34  0.788873     -0.237150     -0.381552E-01  0.381552E-01   473.296       473.334    
  35  0.910631     -0.936170E-01 -0.150621E-01  0.150621E-01   475.237       475.252    
  36  0.184198      -1.69175     -0.272186      0.272186       478.560       478.832    
  37  0.867732     -0.141872     -0.228258E-01  0.228258E-01   480.741       480.763    
  38  0.485084     -0.723433     -0.116393      0.116393       481.637       481.753    
  39  0.220956      -1.50979     -0.242911      0.242911       483.406       483.649    
  40  0.978801     -0.214265E-01 -0.344731E-02  0.344731E-02   484.797       484.801    
  41  0.730061     -0.314628     -0.506206E-01  0.506206E-01   484.927       484.977    
  42  0.482473     -0.728830     -0.117262      0.117262       488.762       488.880    
  43  0.997253E-01  -2.30534     -0.370907      0.370907       491.950       492.321    
  44  0.993695E-01  -2.30891     -0.371482      0.371482       496.473       496.844    
  45  0.559522     -0.580673     -0.934247E-01  0.934247E-01   497.814       497.907    
  46  0.125269      -2.07729     -0.334216      0.334216       501.388       501.722    
  47  0.392417E-01  -3.23802     -0.520966      0.520966       501.739       502.260    
  48  0.647718     -0.434299     -0.698746E-01  0.698746E-01   501.987       502.057    
  49  0.711736     -0.340049     -0.547106E-01  0.547106E-01   502.219       502.274    
  50  0.652555     -0.426860     -0.686777E-01  0.686777E-01   502.783       502.851    
  51  0.873658     -0.135066     -0.217309E-01  0.217309E-01   502.830       502.851    
  52  0.554165     -0.590293     -0.949726E-01  0.949726E-01   503.480       503.575    
  53  0.794568     -0.229957     -0.369979E-01  0.369979E-01   508.844       508.881    
  54  0.330130      -1.10827     -0.178310      0.178310       513.023       513.201    
  55  0.242212      -1.41794     -0.228134      0.228134       513.983       514.212    
  56  0.529702E-01  -2.93803     -0.472700      0.472700       522.066       522.539    
  57  0.941028     -0.607822E-01 -0.977928E-02  0.977928E-02   526.069       526.079    
  58  0.814422     -0.205276     -0.330270E-01  0.330270E-01   529.387       529.420    
  59  0.890910     -0.115511     -0.185847E-01  0.185847E-01   529.943       529.961    
  60  0.434119     -0.834436     -0.134253      0.134253       530.582       530.716    
  61  0.445626     -0.808276     -0.130044      0.130044       300.333       300.463    
loop,thermsimp(1:2)       39  0.172813      0.875271E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    109              291.98          0.48          0.36         15.35
Just calling func    0   0         23.13


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    291.98
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.160890               111
loop is:       39
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.160890               111
loop is:       40
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      111
neval,tstepnext:      108     111

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.815043     -0.204514     -0.329044E-01  0.329044E-01   284.294       284.326    
   2  0.254005      -1.37040     -0.220484      0.220484       295.188       295.408    
   3  0.316699      -1.14980     -0.184993      0.184993       297.444       297.629    
   4  0.400041     -0.916189     -0.147406      0.147406       300.333       300.480    
   5  0.966536     -0.340363E-01 -0.547611E-02  0.547611E-02   313.080       313.086    
   6  0.657661     -0.419066     -0.674238E-01  0.674238E-01   316.589       316.656    
   7  0.187836      -1.67219     -0.269039      0.269039       348.280       348.549    
   8  0.204054      -1.58937     -0.255715      0.255715       352.700       352.955    
   9  0.174269      -1.74716     -0.281101      0.281101       362.870       363.151    
  10  0.130645      -2.03527     -0.327456      0.327456       368.217       368.544    
  11  0.903221     -0.101788     -0.163768E-01  0.163768E-01   383.650       383.666    
  12  0.480148     -0.733662     -0.118039      0.118039       383.931       384.049    
  13  0.146395E-01  -4.22403     -0.679606      0.679606       385.477       386.157    
  14  0.434468     -0.833632     -0.134123      0.134123       390.156       390.290    
  15  0.576939E-01  -2.85260     -0.458957      0.458957       395.905       396.364    
  16  0.908131     -0.963665E-01 -0.155045E-01  0.155045E-01   396.675       396.690    
  17  0.226545      -1.48481     -0.238892      0.238892       406.653       406.892    
  18  0.574780     -0.553767     -0.890959E-01  0.890959E-01   408.223       408.312    
  19  0.548761     -0.600092     -0.965491E-01  0.965491E-01   414.733       414.830    
  20  0.232064      -1.46074     -0.235020      0.235020       415.583       415.818    
  21  0.585133     -0.535917     -0.862239E-01  0.862239E-01   416.387       416.473    
  22  0.618789     -0.479991     -0.772260E-01  0.772260E-01   426.237       426.314    
  23  0.742273     -0.298038     -0.479514E-01  0.479514E-01   427.890       427.938    
  24  0.802311     -0.220259     -0.354375E-01  0.354375E-01   433.149       433.184    
  25  0.696018     -0.362379     -0.583034E-01  0.583034E-01   433.891       433.950    
  26  0.807667     -0.213605     -0.343670E-01  0.343670E-01   440.706       440.740    
  27  0.518218     -0.657359     -0.105763      0.105763       441.015       441.121    
  28  0.832705     -0.183075     -0.294551E-01  0.294551E-01   444.139       444.169    
  29  0.541692     -0.613059     -0.986353E-01  0.986353E-01   449.630       449.728    
  30  0.255904      -1.36295     -0.219286      0.219286       454.674       454.893    
  31  0.308368E-01  -3.47905     -0.559745      0.559745       455.492       456.052    
  32  0.492488E-01  -3.01087     -0.484421      0.484421       460.858       461.343    
  33  0.708451     -0.344674     -0.554548E-01  0.554548E-01   470.164       470.220    
  34  0.861645     -0.148912     -0.239585E-01  0.239585E-01   473.058       473.082    
  35  0.676600E-01  -2.69326     -0.433320      0.433320       473.296       473.729    
  36  0.910624     -0.936250E-01 -0.150634E-01  0.150634E-01   475.237       475.252    
  37  0.737391     -0.304637     -0.490132E-01  0.490132E-01   478.560       478.609    
  38  0.813493     -0.206417     -0.332106E-01  0.332106E-01   480.741       480.774    
  39  0.968871     -0.316242E-01 -0.508804E-02  0.508804E-02   481.637       481.642    
  40  0.793115     -0.231787     -0.372923E-01  0.372923E-01   483.406       483.443    
  41  0.559065     -0.581490     -0.935561E-01  0.935561E-01   484.797       484.891    
  42  0.361291      -1.01807     -0.163798      0.163798       484.927       485.091    
  43  0.338274      -1.08390     -0.174389      0.174389       488.762       488.937    
  44  0.824801     -0.192613     -0.309896E-01  0.309896E-01   491.950       491.981    
  45  0.955760     -0.452486E-01 -0.728006E-02  0.728006E-02   496.473       496.480    
  46  0.703032     -0.352352     -0.566902E-01  0.566902E-01   497.814       497.871    
  47  0.382864     -0.960076     -0.154467      0.154467       501.388       501.542    
  48  0.361425      -1.01770     -0.163738      0.163738       501.987       502.151    
  49  0.138137      -1.97951     -0.318485      0.318485       501.739       502.058    
  50  0.276189      -1.28667     -0.207013      0.207013       502.219       502.426    
  51  0.291468      -1.23282     -0.198350      0.198350       502.830       503.028    
  52  0.755353     -0.280570     -0.451411E-01  0.451411E-01   502.783       502.828    
  53  0.139348E-01  -4.27337     -0.687544      0.687544       503.480       504.167    
  54  0.374692     -0.981651     -0.157938      0.157938       508.844       509.002    
  55  0.856371     -0.155051     -0.249463E-01  0.249463E-01   513.023       513.048    
  56  0.531630     -0.631808     -0.101652      0.101652       513.983       514.085    
  57  0.303008      -1.19400     -0.192103      0.192103       522.066       522.258    
  58  0.835008E-01  -2.48290     -0.399475      0.399475       526.069       526.469    
  59  0.368402E-01  -3.30117     -0.531126      0.531126       529.387       529.918    
  60  0.596758     -0.516243     -0.830586E-01  0.830586E-01   529.943       530.026    
  61  0.475116     -0.744197     -0.119734      0.119734       291.980       292.100    
loop,thermsimp(1:2)       40  0.329044E-01  0.220484    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    110              278.78          0.48          0.36         15.50
Just calling func    0   0         23.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    111              232.50          0.46          0.36         15.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    232.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.160890               111
loop is:       40
neval is:      110
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.160890               111
loop is:       41
neval is:      110


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      111
neval,tstepnext:      110     111

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356230      -1.03218     -0.166068      0.166068       284.294       284.460    
   2  0.436049     -0.830000     -0.133539      0.133539       291.980       292.114    
   3  0.771707     -0.259151     -0.416949E-01  0.416949E-01   295.188       295.230    
   4  0.876529     -0.131785     -0.212030E-01  0.212030E-01   297.444       297.465    
   5  0.845410     -0.167933     -0.270188E-01  0.270188E-01   300.333       300.360    
   6  0.876367     -0.131970     -0.212328E-01  0.212328E-01   313.080       313.102    
   7  0.262182      -1.33872     -0.215387      0.215387       316.589       316.804    
   8  0.426165     -0.852928     -0.137228      0.137228       348.280       348.417    
   9  0.994770     -0.524422E-02 -0.843745E-03  0.843745E-03   352.700       352.700    
  10  0.666164     -0.406219     -0.653567E-01  0.653567E-01   362.870       362.936    
  11  0.574076     -0.554993     -0.892932E-01  0.892932E-01   368.217       368.306    
  12  0.676074     -0.391452     -0.629809E-01  0.629809E-01   383.650       383.713    
  13  0.314169      -1.15782     -0.186283      0.186283       383.931       384.117    
  14  0.175078E-01  -4.04511     -0.650819      0.650819       385.477       386.128    
  15  0.510736     -0.671902     -0.108103      0.108103       390.156       390.264    
  16  0.612094     -0.490870     -0.789763E-01  0.789763E-01   395.905       395.984    
  17  0.683606     -0.380374     -0.611985E-01  0.611985E-01   396.675       396.736    
  18  0.621601     -0.475457     -0.764965E-01  0.764965E-01   406.653       406.730    
  19  0.177176      -1.73061     -0.278439      0.278439       408.223       408.501    
  20  0.731749     -0.312318     -0.502489E-01  0.502489E-01   414.733       414.784    
  21  0.690137     -0.370865     -0.596687E-01  0.596687E-01   415.583       415.643    
  22  0.798783     -0.224666     -0.361466E-01  0.361466E-01   416.387       416.423    
  23  0.320613      -1.13752     -0.183016      0.183016       426.237       426.420    
  24  0.896352     -0.109422     -0.176049E-01  0.176049E-01   427.890       427.908    
  25  0.903622     -0.101344     -0.163053E-01  0.163053E-01   433.149       433.165    
  26  0.523428     -0.647356     -0.104153      0.104153       433.891       433.995    
  27  0.794673     -0.229824     -0.369765E-01  0.369765E-01   440.706       440.743    
  28  0.744597     -0.294913     -0.474487E-01  0.474487E-01   441.015       441.063    
  29  0.175961      -1.73749     -0.279546      0.279546       444.139       444.419    
  30  0.971305     -0.291145E-01 -0.468425E-02  0.468425E-02   449.630       449.634    
  31  0.844412     -0.169115     -0.272090E-01  0.272090E-01   454.674       454.701    
  32  0.848318     -0.164499     -0.264664E-01  0.264664E-01   455.492       455.518    
  33  0.233137      -1.45613     -0.234277      0.234277       460.858       461.092    
  34  0.382610     -0.960738     -0.154574      0.154574       470.164       470.319    
  35  0.545091     -0.606803     -0.976289E-01  0.976289E-01   473.058       473.155    
  36  0.403462     -0.907674     -0.146036      0.146036       473.296       473.442    
  37  0.340776      -1.07653     -0.173204      0.173204       475.237       475.410    
  38  0.615315     -0.485620     -0.781317E-01  0.781317E-01   478.560       478.638    
  39  0.272494      -1.30014     -0.209180      0.209180       480.741       480.950    
  40  0.363754      -1.01128     -0.162705      0.162705       481.637       481.799    
  41  0.197138      -1.62385     -0.261262      0.261262       483.406       483.667    
  42  0.967304     -0.332420E-01 -0.534832E-02  0.534832E-02   484.797       484.803    
  43  0.669645     -0.401008     -0.645184E-01  0.645184E-01   484.927       484.991    
  44  0.992117E-01  -2.31050     -0.371737      0.371737       488.762       489.134    
  45  0.149515      -1.90036     -0.305750      0.305750       491.950       492.255    
  46  0.428242     -0.848067     -0.136446      0.136446       496.473       496.609    
  47  0.259306      -1.34975     -0.217162      0.217162       497.814       498.031    
  48  0.220377      -1.51242     -0.243333      0.243333       501.388       501.631    
  49  0.137221      -1.98616     -0.319554      0.319554       501.739       502.059    
  50  0.795598     -0.228661     -0.367894E-01  0.367894E-01   501.987       502.024    
  51  0.939720     -0.621730E-01 -0.100030E-01  0.100030E-01   502.219       502.229    
  52  0.731734     -0.312339     -0.502523E-01  0.502523E-01   502.783       502.833    
  53  0.518726     -0.656380     -0.105605      0.105605       502.830       502.935    
  54  0.368878     -0.997289     -0.160454      0.160454       503.480       503.640    
  55  0.115686      -2.15688     -0.347021      0.347021       508.844       509.192    
  56  0.819687     -0.198833     -0.319903E-01  0.319903E-01   513.023       513.055    
  57  0.917253     -0.863718E-01 -0.138964E-01  0.138964E-01   513.983       513.997    
  58  0.149476      -1.90062     -0.305791      0.305791       522.066       522.372    
  59  0.637087     -0.450850     -0.725374E-01  0.725374E-01   526.069       526.142    
  60  0.177681      -1.72777     -0.277981      0.277981       529.387       529.665    
  61  0.724248E-01  -2.62521     -0.422371      0.422371       232.501       232.923    
loop,thermsimp(1:2)       41  0.166068      0.133539    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    112              278.58          0.47          0.36         15.43
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    278.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.160890               111
loop is:       41
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.160890               111
loop is:       42
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      111
neval,tstepnext:      111     111

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.995484     -0.452615E-02 -0.728215E-03  0.728215E-03   232.501       232.501    
   2  0.751523E-01  -2.58824     -0.416423      0.416423       284.294       284.710    
   3  0.237566      -1.43731     -0.231249      0.231249       291.980       292.211    
   4  0.852806     -0.159223     -0.256175E-01  0.256175E-01   295.188       295.214    
   5  0.752349     -0.284555     -0.457822E-01  0.457822E-01   297.444       297.490    
   6  0.489177     -0.715032     -0.115042      0.115042       300.333       300.448    
   7  0.800046     -0.223085     -0.358923E-01  0.358923E-01   313.080       313.116    
   8  0.449921     -0.798684     -0.128501      0.128501       316.589       316.717    
   9  0.616005E-01  -2.78709     -0.448416      0.448416       348.280       348.728    
  10  0.463224     -0.769545     -0.123812      0.123812       352.700       352.823    
  11  0.493190     -0.706860     -0.113727      0.113727       362.870       362.984    
  12  0.980098     -0.201026E-01 -0.323432E-02  0.323432E-02   368.217       368.220    
  13  0.944088     -0.575361E-01 -0.925701E-02  0.925701E-02   383.650       383.659    
  14  0.332140      -1.10220     -0.177333      0.177333       383.931       384.108    
  15  0.995967     -0.404071E-02 -0.650111E-03  0.650111E-03   385.477       385.478    
  16  0.512440     -0.668571     -0.107567      0.107567       390.156       390.263    
  17  0.230109      -1.46920     -0.236381      0.236381       395.905       396.141    
  18  0.458771     -0.779204     -0.125366      0.125366       396.675       396.800    
  19  0.935791     -0.663627E-01 -0.106771E-01  0.106771E-01   406.653       406.664    
  20  0.134808      -2.00391     -0.322410      0.322410       408.223       408.545    
  21  0.954367     -0.467067E-01 -0.751466E-02  0.751466E-02   414.733       414.741    
  22  0.483501     -0.726701     -0.116919      0.116919       415.583       415.700    
  23  0.968518     -0.319884E-01 -0.514662E-02  0.514662E-02   416.387       416.392    
  24  0.732304     -0.311560     -0.501270E-01  0.501270E-01   426.237       426.287    
  25  0.289387      -1.23999     -0.199503      0.199503       427.890       428.090    
  26  0.437211E-01  -3.12992     -0.503575      0.503575       433.149       433.652    
  27  0.317951      -1.14586     -0.184358      0.184358       433.891       434.076    
  28  0.660072     -0.415406     -0.668348E-01  0.668348E-01   440.706       440.773    
  29  0.591307     -0.525420     -0.845351E-01  0.845351E-01   441.015       441.100    
  30  0.421608     -0.863678     -0.138958      0.138958       444.139       444.278    
  31  0.405824     -0.901837     -0.145097      0.145097       449.630       449.775    
  32  0.794263     -0.230341     -0.370597E-01  0.370597E-01   454.674       454.711    
  33  0.331660      -1.10365     -0.177566      0.177566       455.492       455.670    
  34  0.652484     -0.426969     -0.686952E-01  0.686952E-01   460.858       460.927    
  35  0.353310      -1.04041     -0.167392      0.167392       470.164       470.332    
  36  0.934820     -0.674011E-01 -0.108442E-01  0.108442E-01   473.058       473.069    
  37  0.734691     -0.308305     -0.496034E-01  0.496034E-01   473.296       473.345    
  38  0.467923E-02  -5.36462     -0.863117      0.863117       475.237       476.100    
  39  0.692312     -0.367719     -0.591625E-01  0.591625E-01   478.560       478.619    
  40  0.541396     -0.613605     -0.987232E-01  0.987232E-01   480.741       480.839    
  41  0.172050      -1.75997     -0.283163      0.283163       481.637       481.920    
  42  0.824634     -0.192816     -0.310222E-01  0.310222E-01   483.406       483.437    
  43  0.156620      -1.85393     -0.298280      0.298280       484.797       485.096    
  44  0.251711      -1.37947     -0.221944      0.221944       484.927       485.149    
  45  0.823490     -0.194204     -0.312455E-01  0.312455E-01   488.762       488.794    
  46  0.840043     -0.174302     -0.280435E-01  0.280435E-01   491.950       491.978    
  47  0.330050      -1.10851     -0.178349      0.178349       496.473       496.651    
  48  0.796071     -0.228067     -0.366939E-01  0.366939E-01   497.814       497.851    
  49  0.179105      -1.71978     -0.276696      0.276696       501.388       501.665    
  50  0.101977      -2.28301     -0.367315      0.367315       501.987       502.354    
  51  0.431885     -0.839596     -0.135083      0.135083       501.739       501.874    
  52  0.385761     -0.952536     -0.153254      0.153254       502.219       502.373    
  53  0.162666      -1.81606     -0.292187      0.292187       502.783       503.075    
  54  0.203314      -1.59300     -0.256299      0.256299       502.830       503.086    
  55  0.983293     -0.168482E-01 -0.271071E-02  0.271071E-02   503.480       503.482    
  56  0.608709     -0.496414     -0.798683E-01  0.798683E-01   508.844       508.924    
  57  0.228020E-01  -3.78091     -0.608312      0.608312       513.023       513.631    
  58  0.936534     -0.655691E-01 -0.105494E-01  0.105494E-01   513.983       513.994    
  59  0.762592     -0.271032     -0.436065E-01  0.436065E-01   522.066       522.110    
  60  0.167356      -1.78763     -0.287613      0.287613       526.069       526.357    
  61  0.953285E-01  -2.35043     -0.378161      0.378161       278.576       278.954    
loop,thermsimp(1:2)       42  0.728215E-03  0.416423    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    113              805.60          0.48          0.36         15.40
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    114              576.87          0.47          0.35         15.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4    526.07
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.160890               111
loop is:       42
neval is:      113
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     114       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj:    115              235.63          0.48          0.35         15.41
iter,obj:    116              228.04          0.48          0.37         15.52
iter,obj:    117              238.53          0.48          0.36         15.39
iter,obj:    118              239.79          0.48          0.36         15.42
iter,obj:    119              247.81          0.48          0.36         15.41
iter,obj:    120              238.05          0.48          0.36         15.46
iter,obj:    121              231.35          0.48          0.36         15.35
iter,obj:    122              238.40          0.48          0.36         15.48
iter,obj:    123              263.84          0.48          0.36         15.43
iter,obj:    124              258.04          0.47          0.36         15.44
iter,obj:    125              261.71          0.48          0.36         15.51
iter,obj:    126              249.54          0.48          0.36         15.41
iter,obj:    127              257.90          0.47          0.36         15.30
iter,obj:    128              255.44          0.48          0.36         15.35
iter,obj:    129              249.56          0.48          0.36         15.44
iter,obj:    130              227.96          0.48          0.36         15.45
iter,obj:    131              254.45          0.48          0.37         15.41
iter,obj:    132              252.73          0.48          0.36         15.46
iter,obj:    133              257.23          0.48          0.36         15.41
iter,obj:    134              262.42          0.48          0.36         15.45
iter,obj:    135              279.32          0.48          0.36         15.38
iter,obj:    136              247.67          0.48          0.36         15.47
iter,obj:    137              264.36          0.48          0.36         15.38
iter,obj:    138              262.56          0.48          0.36         15.45
iter,obj:    139              251.88          0.48          0.36         15.46
iter,obj:    140              257.37          0.48          0.36         15.48
iter,obj:    141              297.89          0.48          0.35         15.45
iter,obj:    142              265.92          0.47          0.36         15.44
iter,obj:    143              272.11          0.48          0.36         15.47
iter,obj:    144              280.77          0.48          0.35         15.39
iter,obj:    145              258.62          0.48          0.36         15.36
iter,obj:    146              263.86          0.48          0.36         15.45
iter,obj:    147              265.86          0.48          0.37         15.45
iter,obj:    148              269.09          0.48          0.36         15.42
iter,obj:    149              285.66          0.48          0.36         15.47
iter,obj:    150              262.85          0.48          0.35         15.41
iter,obj:    151              297.32          0.48          0.36         15.48
iter,obj:    152              267.98          0.48          0.36         15.42
iter,obj:    153              248.49          0.48          0.36         15.39
iter,obj:    154              269.09          0.48          0.36         15.43
iter,obj:    155              280.22          0.48          0.36         15.38
iter,obj:    156              268.30          0.48          0.36         15.42
iter,obj:    157              274.47          0.47          0.37         15.38
iter,obj:    158              279.56          0.48          0.36         15.34
iter,obj:    159              274.48          0.48          0.36         15.41
iter,obj:    160              272.80          0.48          0.36         15.35
iter,obj:    161              311.62          0.47          0.37         15.32
iter,obj:    162              273.42          0.48          0.36         15.40
iter,obj:    163              273.36          0.48          0.36         15.43
iter,obj:    164              273.05          0.48          0.36         15.44
iter,obj:    165              273.19          0.48          0.36         15.28
iter,obj:    166              252.71          0.48          0.36         15.36
iter,obj:    167              273.43          0.48          0.36         15.43
iter,obj:    168              273.43          0.48          0.36         15.41
iter,obj:    169              275.61          0.48          0.36         15.41
iter,obj:    170              286.21          0.48          0.36         15.40
iter,obj:    171              277.07          0.47          0.36         15.45
iter,obj:    172              277.99          0.48          0.36         15.44
iter,obj:    173              269.97          0.48          0.36         15.44
iter,obj:    174              264.40          0.48          0.36         15.55


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     175      61
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     173




loop,nloop:      42      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.160890               111
loop is:       43
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.321781E-01           121

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      121
neval,tstepnext:      173     121

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244116      -1.41011     -0.453748E-01  0.453748E-01   232.501       232.546    
   2  0.399464     -0.917631     -0.295276E-01  0.295276E-01   235.629       235.658    
   3  0.356116      -1.03250     -0.332238E-01  0.332238E-01   228.037       228.070    
   4  0.139333      -1.97089     -0.634193E-01  0.634193E-01   238.534       238.597    
   5  0.578987     -0.546475     -0.175845E-01  0.175845E-01   239.787       239.805    
   6  0.918813     -0.846723E-01 -0.272459E-02  0.272459E-02   247.814       247.817    
   7  0.817977     -0.200921     -0.646525E-02  0.646525E-02   238.046       238.053    
   8  0.912208     -0.918878E-01 -0.295677E-02  0.295677E-02   231.350       231.353    
   9  0.146624      -1.91988     -0.617782E-01  0.617782E-01   238.401       238.463    
  10  0.969889     -0.305739E-01 -0.983811E-03  0.983811E-03   263.838       263.838    
  11  0.754567     -0.281612     -0.906173E-02  0.906173E-02   258.039       258.048    
  12  0.332058E-01  -3.40503     -0.109567      0.109567       261.713       261.822    
  13  0.622386     -0.474195     -0.152587E-01  0.152587E-01   249.535       249.550    
  14  0.632459     -0.458141     -0.147421E-01  0.147421E-01   257.904       257.919    
  15  0.193328      -1.64337     -0.528805E-01  0.528805E-01   255.441       255.494    
  16  0.494996     -0.703205     -0.226278E-01  0.226278E-01   249.558       249.581    
  17  0.546485     -0.604249     -0.194436E-01  0.194436E-01   227.955       227.974    
  18  0.581602E-01  -2.84455     -0.915323E-01  0.915323E-01   254.447       254.538    
  19  0.173708      -1.75038     -0.563239E-01  0.563239E-01   252.734       252.790    
  20  0.539278     -0.617525     -0.198708E-01  0.198708E-01   257.232       257.251    
  21  0.736559     -0.305765     -0.983895E-02  0.983895E-02   262.425       262.435    
  22  0.518375     -0.657057     -0.211428E-01  0.211428E-01   279.320       279.341    
  23  0.686005     -0.376870     -0.121269E-01  0.121269E-01   247.674       247.686    
  24  0.812151     -0.208070     -0.669528E-02  0.669528E-02   264.358       264.364    
  25  0.997931     -0.207129E-02 -0.666503E-04  0.666503E-04   262.565       262.565    
  26  0.369106     -0.996671     -0.320710E-01  0.320710E-01   251.882       251.914    
  27  0.887728     -0.119090     -0.383210E-02  0.383210E-02   257.366       257.370    
  28  0.341028      -1.07579     -0.346169E-01  0.346169E-01   297.895       297.930    
  29  0.847292     -0.165710     -0.533225E-02  0.533225E-02   265.922       265.927    
  30  0.315979      -1.15208     -0.370717E-01  0.370717E-01   272.106       272.144    
  31  0.150321      -1.89498     -0.609769E-01  0.609769E-01   280.773       280.834    
  32  0.446812     -0.805616     -0.259232E-01  0.259232E-01   258.619       258.645    
  33  0.293912      -1.22447     -0.394012E-01  0.394012E-01   263.863       263.903    
  34  0.339303      -1.08086     -0.347800E-01  0.347800E-01   265.863       265.898    
  35  0.196736      -1.62589     -0.523181E-01  0.523181E-01   269.085       269.138    
  36  0.694908E-01  -2.66656     -0.858049E-01  0.858049E-01   285.658       285.744    
  37  0.644339     -0.439531     -0.141433E-01  0.141433E-01   262.852       262.866    
  38  0.796143     -0.227976     -0.733583E-02  0.733583E-02   297.316       297.323    
  39  0.973710     -0.266418E-01 -0.857282E-03  0.857282E-03   267.978       267.979    
  40  0.917355     -0.862608E-01 -0.277571E-02  0.277571E-02   248.487       248.490    
  41  0.913639     -0.903200E-01 -0.290633E-02  0.290633E-02   269.093       269.096    
  42  0.663831     -0.409728     -0.131843E-01  0.131843E-01   280.219       280.232    
  43  0.731998     -0.311978     -0.100388E-01  0.100388E-01   268.298       268.308    
  44  0.232054      -1.46079     -0.470053E-01  0.470053E-01   274.474       274.521    
  45  0.851081     -0.161248     -0.518867E-02  0.518867E-02   279.559       279.565    
  46  0.605356     -0.501939     -0.161514E-01  0.161514E-01   274.476       274.493    
  47  0.767117     -0.265116     -0.853092E-02  0.853092E-02   272.804       272.812    
  48  0.330254E-02  -5.71306     -0.183836      0.183836       311.619       311.803    
  49  0.480155     -0.733646     -0.236073E-01  0.236073E-01   273.424       273.447    
  50  0.731857     -0.312170     -0.100450E-01  0.100450E-01   273.356       273.366    
  51  0.135206      -2.00096     -0.643870E-01  0.643870E-01   273.051       273.116    
  52  0.841553     -0.172507     -0.555093E-02  0.555093E-02   273.187       273.192    
  53  0.492748     -0.707757     -0.227743E-01  0.227743E-01   252.715       252.738    
  54  0.615195     -0.485815     -0.156326E-01  0.156326E-01   273.434       273.449    
  55  0.727757     -0.317789     -0.102258E-01  0.102258E-01   273.434       273.444    
  56  0.785326     -0.241656     -0.777602E-02  0.777602E-02   275.614       275.622    
  57  0.951403     -0.498176E-01 -0.160303E-02  0.160303E-02   286.213       286.214    
  58  0.464725     -0.766310     -0.246584E-01  0.246584E-01   277.073       277.098    
  59  0.947939     -0.534649E-01 -0.172040E-02  0.172040E-02   277.987       277.989    
  60  0.166664      -1.79178     -0.576560E-01  0.576560E-01   269.971       270.028    
  61  0.659608     -0.416109     -0.133896E-01  0.133896E-01   264.397       264.410    
loop,thermsimp(1:2)       43  0.453748E-01  0.295276E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    175              293.59          0.48          0.36         15.49
Just calling func    0   0         23.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    293.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.321781E-01           121
loop is:       43
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.321781E-01           121
loop is:       44
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.643562E-02           131

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      131
neval,tstepnext:      174     131

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.902027     -0.103111     -0.663583E-03  0.663583E-03   227.955       227.956    
   2  0.408475     -0.895323     -0.576196E-02  0.576196E-02   228.037       228.043    
   3  0.935971     -0.661705E-01 -0.425848E-03  0.425848E-03   231.350       231.351    
   4  0.110033      -2.20697     -0.142032E-01  0.142032E-01   232.501       232.515    
   5  0.475560     -0.743263     -0.478336E-02  0.478336E-02   235.629       235.633    
   6  0.335809      -1.09121     -0.702263E-02  0.702263E-02   238.046       238.053    
   7  0.219255      -1.51752     -0.976617E-02  0.976617E-02   238.401       238.411    
   8  0.949081     -0.522614E-01 -0.336334E-03  0.336334E-03   238.534       238.534    
   9  0.296146      -1.21690     -0.783152E-02  0.783152E-02   239.787       239.795    
  10  0.847396     -0.165587     -0.106566E-02  0.106566E-02   247.674       247.675    
  11  0.881508     -0.126121     -0.811669E-03  0.811669E-03   247.814       247.815    
  12  0.234894      -1.44862     -0.932277E-02  0.932277E-02   248.487       248.496    
  13  0.445927     -0.807599     -0.519740E-02  0.519740E-02   249.535       249.540    
  14  0.740334     -0.300653     -0.193489E-02  0.193489E-02   249.558       249.560    
  15  0.740015     -0.301084     -0.193766E-02  0.193766E-02   251.882       251.884    
  16  0.890157     -0.116357     -0.748830E-03  0.748830E-03   252.715       252.716    
  17  0.835860     -0.179294     -0.115387E-02  0.115387E-02   252.734       252.735    
  18  0.992489     -0.753949E-02 -0.485213E-04  0.485213E-04   254.447       254.447    
  19  0.683735     -0.380185     -0.244672E-02  0.244672E-02   255.441       255.444    
  20  0.232827E-01  -3.76005     -0.241982E-01  0.241982E-01   257.232       257.256    
  21  0.741946     -0.298479     -0.192090E-02  0.192090E-02   257.366       257.368    
  22  0.444610E-01  -3.11314     -0.200350E-01  0.200350E-01   257.904       257.924    
  23  0.677445     -0.389426     -0.250620E-02  0.250620E-02   258.039       258.041    
  24  0.120391      -2.11701     -0.136243E-01  0.136243E-01   258.619       258.633    
  25  0.571652     -0.559224     -0.359896E-02  0.359896E-02   261.713       261.716    
  26  0.644967E-01  -2.74114     -0.176409E-01  0.176409E-01   262.425       262.442    
  27  0.227259      -1.48167     -0.953544E-02  0.953544E-02   262.565       262.574    
  28  0.618342     -0.480713     -0.309369E-02  0.309369E-02   262.852       262.855    
  29  0.725052     -0.321512     -0.206913E-02  0.206913E-02   263.838       263.840    
  30  0.333439      -1.09830     -0.706822E-02  0.706822E-02   263.863       263.871    
  31  0.758659     -0.276203     -0.177754E-02  0.177754E-02   264.358       264.359    
  32  0.319749      -1.14022     -0.733801E-02  0.733801E-02   264.397       264.404    
  33  0.358637      -1.02544     -0.659937E-02  0.659937E-02   265.863       265.870    
  34  0.983930     -0.162009E-01 -0.104263E-03  0.104263E-03   265.922       265.922    
  35  0.147877      -1.91138     -0.123009E-01  0.123009E-01   267.978       267.990    
  36  0.457703E-01  -3.08412     -0.198482E-01  0.198482E-01   268.298       268.317    
  37  0.342794      -1.07062     -0.689014E-02  0.689014E-02   269.093       269.100    
  38  0.245879      -1.40292     -0.902864E-02  0.902864E-02   269.085       269.095    
  39  0.761053     -0.273053     -0.175726E-02  0.175726E-02   269.971       269.972    
  40  0.497567     -0.698026     -0.449223E-02  0.449223E-02   272.106       272.111    
  41  0.391874     -0.936816     -0.602899E-02  0.602899E-02   272.804       272.810    
  42  0.770069     -0.261275     -0.168147E-02  0.168147E-02   273.051       273.053    
  43  0.410180E-01  -3.19374     -0.205537E-01  0.205537E-01   273.187       273.207    
  44  0.584281     -0.537374     -0.345833E-02  0.345833E-02   273.356       273.360    
  45  0.571105     -0.560183     -0.360512E-02  0.360512E-02   273.434       273.437    
  46  0.668481     -0.402748     -0.259193E-02  0.259193E-02   273.424       273.426    
  47  0.771640     -0.259237     -0.166835E-02  0.166835E-02   273.434       273.435    
  48  0.309659      -1.17228     -0.754436E-02  0.754436E-02   274.476       274.484    
  49  0.221747      -1.50622     -0.969344E-02  0.969344E-02   274.474       274.483    
  50  0.960964     -0.398187E-01 -0.256258E-03  0.256258E-03   275.614       275.614    
  51  0.252854      -1.37494     -0.884861E-02  0.884861E-02   277.073       277.082    
  52  0.815286     -0.204216     -0.131426E-02  0.131426E-02   277.987       277.988    
  53  0.987161     -0.129225E-01 -0.831640E-04  0.831640E-04   279.320       279.320    
  54  0.288637E-01  -3.54517     -0.228154E-01  0.228154E-01   279.559       279.582    
  55  0.900365     -0.104955     -0.675448E-03  0.675448E-03   280.219       280.219    
  56  0.111258      -2.19591     -0.141320E-01  0.141320E-01   280.773       280.787    
  57  0.313531      -1.15986     -0.746440E-02  0.746440E-02   285.658       285.666    
  58  0.631013     -0.460429     -0.296314E-02  0.296314E-02   286.213       286.216    
  59  0.304541      -1.18895     -0.765162E-02  0.765162E-02   297.316       297.323    
  60  0.687280     -0.375014     -0.241344E-02  0.241344E-02   297.895       297.897    
  61  0.818439     -0.200356     -0.128942E-02  0.128942E-02   293.593       293.594    
loop,thermsimp(1:2)       44  0.663583E-03  0.576196E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    176              321.84          0.48          0.36         15.45
Just calling func    0   0         23.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    177              275.11          0.46          0.36         15.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    275.11
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.643562E-02           131
loop is:       44
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.643562E-02           131
loop is:       45
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.128712E-02           141

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      141
neval,tstepnext:      176     141

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.224022      -1.49601     -0.192555E-02  0.192555E-02   227.955       227.957    
   2  0.937592     -0.644404E-01 -0.829427E-04  0.829427E-04   228.037       228.037    
   3  0.616297E-01  -2.78661     -0.358671E-02  0.358671E-02   231.350       231.354    
   4  0.317436E-01  -3.45006     -0.444066E-02  0.444066E-02   232.501       232.505    
   5  0.276312      -1.28623     -0.165553E-02  0.165553E-02   235.629       235.630    
   6  0.961302     -0.394663E-01 -0.507981E-04  0.507981E-04   238.046       238.047    
   7  0.638036     -0.449360     -0.578382E-03  0.578382E-03   238.401       238.402    
   8  0.536641     -0.622426     -0.801139E-03  0.801139E-03   238.534       238.534    
   9  0.991324     -0.871349E-02 -0.112153E-04  0.112153E-04   239.787       239.787    
  10  0.590456     -0.526860     -0.678134E-03  0.678134E-03   247.674       247.675    
  11  0.522911     -0.648343     -0.834498E-03  0.834498E-03   247.814       247.815    
  12  0.644393     -0.439446     -0.565621E-03  0.565621E-03   248.487       248.488    
  13  0.852853     -0.159168     -0.204869E-03  0.204869E-03   249.535       249.535    
  14  0.255720      -1.36367     -0.175521E-02  0.175521E-02   249.558       249.560    
  15  0.987861     -0.122133E-01 -0.157200E-04  0.157200E-04   251.882       251.882    
  16  0.946644     -0.548320E-01 -0.705755E-04  0.705755E-04   252.715       252.715    
  17  0.212575      -1.54846     -0.199306E-02  0.199306E-02   252.734       252.736    
  18  0.137871      -1.98144     -0.255036E-02  0.255036E-02   254.447       254.449    
  19  0.790331     -0.235303     -0.302864E-03  0.302864E-03   255.441       255.442    
  20  0.774480     -0.255563     -0.328942E-03  0.328942E-03   257.232       257.232    
  21  0.322044      -1.13307     -0.145840E-02  0.145840E-02   257.366       257.367    
  22  0.154517      -1.86745     -0.240364E-02  0.240364E-02   257.904       257.907    
  23  0.681030     -0.384148     -0.494446E-03  0.494446E-03   258.039       258.039    
  24  0.929331     -0.732901E-01 -0.943334E-04  0.943334E-04   258.619       258.619    
  25  0.201597      -1.60149     -0.206131E-02  0.206131E-02   261.713       261.715    
  26  0.859380     -0.151544     -0.195055E-03  0.195055E-03   262.425       262.425    
  27  0.307136      -1.18047     -0.151941E-02  0.151941E-02   262.565       262.566    
  28  0.537376     -0.621057     -0.799377E-03  0.799377E-03   262.852       262.853    
  29  0.652498     -0.426947     -0.549534E-03  0.549534E-03   263.838       263.838    
  30  0.899028     -0.106441     -0.137003E-03  0.137003E-03   263.863       263.864    
  31  0.376381     -0.977152     -0.125772E-02  0.125772E-02   264.358       264.359    
  32  0.962642     -0.380738E-01 -0.490056E-04  0.490056E-04   264.397       264.397    
  33  0.308494      -1.17605     -0.151373E-02  0.151373E-02   265.863       265.865    
  34  0.770200     -0.261105     -0.336075E-03  0.336075E-03   265.922       265.922    
  35  0.904012     -0.100913     -0.129887E-03  0.129887E-03   267.978       267.978    
  36  0.948348     -0.530343E-01 -0.682617E-04  0.682617E-04   268.298       268.298    
  37  0.290211      -1.23715     -0.159236E-02  0.159236E-02   269.085       269.087    
  38  0.941312     -0.604803E-01 -0.778457E-04  0.778457E-04   269.093       269.093    
  39  0.977245E-01  -2.32560     -0.299334E-02  0.299334E-02   269.971       269.974    
  40  0.207066      -1.57472     -0.202685E-02  0.202685E-02   272.106       272.108    
  41  0.451956     -0.794170     -0.102219E-02  0.102219E-02   272.804       272.805    
  42  0.266368      -1.32288     -0.170271E-02  0.170271E-02   273.051       273.053    
  43  0.982730     -0.174204E-01 -0.224222E-04  0.224222E-04   273.187       273.187    
  44  0.316847      -1.14934     -0.147934E-02  0.147934E-02   273.356       273.358    
  45  0.626301     -0.467925     -0.602277E-03  0.602277E-03   273.424       273.424    
  46  0.399743     -0.916933     -0.118021E-02  0.118021E-02   273.434       273.435    
  47  0.675098     -0.392898     -0.505708E-03  0.505708E-03   273.434       273.434    
  48  0.256732      -1.35972     -0.175013E-02  0.175013E-02   274.474       274.475    
  49  0.547044     -0.603226     -0.776427E-03  0.776427E-03   274.476       274.477    
  50  0.683241     -0.380907     -0.490275E-03  0.490275E-03   275.614       275.614    
  51  0.470006E-03  -7.66277     -0.986293E-02  0.986293E-02   277.073       277.083    
  52  0.979528     -0.206849E-01 -0.266240E-04  0.266240E-04   277.987       277.987    
  53  0.284278      -1.25780     -0.161895E-02  0.161895E-02   279.320       279.322    
  54  0.442376     -0.815596     -0.104977E-02  0.104977E-02   279.559       279.560    
  55  0.306639      -1.18208     -0.152149E-02  0.152149E-02   280.219       280.220    
  56  0.937275E-01  -2.36736     -0.304709E-02  0.304709E-02   280.773       280.776    
  57  0.717866     -0.331472     -0.426646E-03  0.426646E-03   285.658       285.659    
  58  0.484434     -0.724775     -0.932875E-03  0.932875E-03   286.213       286.214    
  59  0.593642     -0.521478     -0.671207E-03  0.671207E-03   293.593       293.594    
  60  0.234757      -1.44920     -0.186530E-02  0.186530E-02   297.316       297.318    
  61  0.635824     -0.452834     -0.582854E-03  0.582854E-03   275.108       275.109    
loop,thermsimp(1:2)       45  0.192555E-02  0.829427E-04

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    178              398.69          0.48          0.36         15.38
Just calling func    0   0         23.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    179              289.58          0.46          0.36         15.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    289.58
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.128712E-02           141
loop is:       45
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.128712E-02           141
loop is:       46
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.257425E-03           151

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      151
neval,tstepnext:      178     151

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.797377     -0.226428     -0.582881E-04  0.582881E-04   227.955       227.955    
   2  0.916370     -0.873350E-01 -0.224822E-04  0.224822E-04   228.037       228.037    
   3  0.760691     -0.273529     -0.704130E-04  0.704130E-04   231.350       231.350    
   4  0.371971E-01  -3.29152     -0.847320E-03  0.847320E-03   232.501       232.501    
   5  0.159469      -1.83591     -0.472608E-03  0.472608E-03   235.629       235.629    
   6  0.892175     -0.114093     -0.293704E-04  0.293704E-04   238.046       238.046    
   7  0.185089      -1.68692     -0.434255E-03  0.434255E-03   238.401       238.402    
   8  0.839181     -0.175329     -0.451341E-04  0.451341E-04   238.534       238.534    
   9  0.404556     -0.904965     -0.232960E-03  0.232960E-03   239.787       239.788    
  10  0.947473     -0.539565E-01 -0.138897E-04  0.138897E-04   247.674       247.674    
  11  0.192135E-01  -3.95214     -0.101738E-02  0.101738E-02   247.814       247.815    
  12  0.697243     -0.360621     -0.928328E-04  0.928328E-04   248.487       248.487    
  13  0.728898     -0.316221     -0.814031E-04  0.814031E-04   249.535       249.535    
  14  0.980566E-01  -2.32221     -0.597795E-03  0.597795E-03   249.558       249.559    
  15  0.935006     -0.672024E-01 -0.172996E-04  0.172996E-04   251.882       251.882    
  16  0.293077E-01  -3.52991     -0.908685E-03  0.908685E-03   252.715       252.716    
  17  0.877610     -0.130553     -0.336077E-04  0.336077E-04   252.734       252.734    
  18  0.157558      -1.84796     -0.475712E-03  0.475712E-03   254.447       254.447    
  19  0.162625E-01  -4.11889     -0.106030E-02  0.106030E-02   255.441       255.442    
  20  0.345894      -1.06162     -0.273288E-03  0.273288E-03   257.232       257.232    
  21  0.232721      -1.45791     -0.375303E-03  0.375303E-03   257.366       257.366    
  22  0.983416     -0.167235E-01 -0.430504E-05  0.430504E-05   257.904       257.904    
  23  0.149877      -1.89794     -0.488576E-03  0.488576E-03   258.039       258.039    
  24  0.909498     -0.948630E-01 -0.244201E-04  0.244201E-04   258.619       258.619    
  25  0.447754     -0.803511     -0.206844E-03  0.206844E-03   261.713       261.713    
  26  0.646091     -0.436815     -0.112447E-03  0.112447E-03   262.425       262.425    
  27  0.997510     -0.249331E-02 -0.641840E-06  0.641840E-06   262.565       262.565    
  28  0.191655      -1.65206     -0.425280E-03  0.425280E-03   262.852       262.852    
  29  0.199869      -1.61009     -0.414478E-03  0.414478E-03   263.838       263.838    
  30  0.674971     -0.393086     -0.101190E-03  0.101190E-03   263.863       263.864    
  31  0.191033      -1.65531     -0.426117E-03  0.426117E-03   264.358       264.358    
  32  0.708524     -0.344572     -0.887013E-04  0.887013E-04   264.397       264.397    
  33  0.483382     -0.726949     -0.187135E-03  0.187135E-03   265.863       265.863    
  34  0.282479      -1.26415     -0.325424E-03  0.325424E-03   265.922       265.922    
  35  0.211164      -1.55512     -0.400326E-03  0.400326E-03   267.978       267.978    
  36  0.875192     -0.133312     -0.343179E-04  0.343179E-04   268.298       268.298    
  37  0.241051      -1.42274     -0.366250E-03  0.366250E-03   269.085       269.086    
  38  0.981691     -0.184788E-01 -0.475691E-05  0.475691E-05   269.093       269.093    
  39  0.357169      -1.02955     -0.265031E-03  0.265031E-03   269.971       269.971    
  40  0.213653      -1.54340     -0.397310E-03  0.397310E-03   272.106       272.107    
  41  0.447128     -0.804909     -0.207204E-03  0.207204E-03   272.804       272.804    
  42  0.255809      -1.36332     -0.350954E-03  0.350954E-03   273.051       273.052    
  43  0.833356     -0.182294     -0.469270E-04  0.469270E-04   273.187       273.187    
  44  0.870231     -0.138997     -0.357813E-04  0.357813E-04   273.356       273.356    
  45  0.910487     -0.937754E-01 -0.241401E-04  0.241401E-04   273.424       273.424    
  46  0.971100     -0.293263E-01 -0.754932E-05  0.754932E-05   273.434       273.434    
  47  0.335791      -1.09127     -0.280919E-03  0.280919E-03   273.434       273.434    
  48  0.465937     -0.763704     -0.196596E-03  0.196596E-03   274.474       274.474    
  49  0.777056     -0.252243     -0.649337E-04  0.649337E-04   274.476       274.476    
  50  0.142485      -1.94852     -0.501597E-03  0.501597E-03   275.108       275.109    
  51  0.138438      -1.97733     -0.509014E-03  0.509014E-03   275.614       275.614    
  52  0.458751     -0.779247     -0.200597E-03  0.200597E-03   277.073       277.074    
  53  0.300524      -1.20223     -0.309483E-03  0.309483E-03   277.987       277.987    
  54  0.156677      -1.85357     -0.477155E-03  0.477155E-03   279.320       279.321    
  55  0.824073     -0.193496     -0.498108E-04  0.498108E-04   279.559       279.559    
  56  0.107709      -2.22832     -0.573625E-03  0.573625E-03   280.219       280.219    
  57  0.783309     -0.244228     -0.628703E-04  0.628703E-04   280.773       280.773    
  58  0.276622E-01  -3.58769     -0.923560E-03  0.923560E-03   285.658       285.659    
  59  0.875144     -0.133367     -0.343320E-04  0.343320E-04   286.213       286.213    
  60  0.605082     -0.502392     -0.129328E-03  0.129328E-03   293.593       293.593    
  61  0.982155     -0.180057E-01 -0.463511E-05  0.463511E-05   289.578       289.578    
loop,thermsimp(1:2)       46  0.582881E-04  0.224822E-04

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    180              316.44          0.48          0.37         15.30
Just calling func    0   0         23.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    181              274.04          0.47          0.35         15.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    274.04        2.484     -1.738      3.984     -100.0     0.4398    
                      -1.464      1.116     -100.0      2.899    -0.9930    
                     -0.1959     -3.257      2.009      0.000     0.6600    
                      -1.116     -20.00      0.000      0.000     -1.221    

                      -1.600      6940.      9047.     -554.0     -1451.    
                      -4.215     -5.743     -4.447     -15.33     -5.168    
                      -13.08     -2.664     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.5506E-01-0.6521E-01  0.000    -0.1350    
                     -0.2197    -0.1383    -0.1573    -0.1967    -0.7574E-02

                     -0.7188     -2.779      1.382     0.2051     0.4174E-01
                      0.8990E-01-0.2234E-01-0.1141    -0.2892E-01-0.5417E-01
                     -0.7420E-01 0.8421E-01-0.2306     -3.100      1.382    

                      -1.598     -1.709      3631.      2473.      0.000    
                       0.000      9.144      8.478      0.000     0.1000    
                       1.218      1.218      9.144      8.912     -121.8    

                      0.1000      1.218      1.218      9.244      9.113    
                      -609.2     0.1000     0.5558     0.9253      9.344    
                       9.219      8053.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    274.04
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.257425E-03           151
loop is:       46
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.257425E-03           151
loop is:       47
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.514850E-04           161

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      161
neval,tstepnext:      180     161

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.391791     -0.937027     -0.482428E-04  0.482428E-04   227.955       227.955    
   2  0.321486      -1.13480     -0.584252E-04  0.584252E-04   228.037       228.037    
   3  0.977427     -0.228320E-01 -0.117551E-05  0.117551E-05   231.350       231.350    
   4  0.254024      -1.37033     -0.705511E-04  0.705511E-04   232.501       232.501    
   5  0.302922      -1.19428     -0.614875E-04  0.614875E-04   235.629       235.629    
   6  0.750681     -0.286775     -0.147646E-04  0.147646E-04   238.046       238.046    
   7  0.384833     -0.954945     -0.491653E-04  0.491653E-04   238.401       238.401    
   8  0.361768      -1.01675     -0.523474E-04  0.523474E-04   238.534       238.534    
   9  0.902563     -0.102517     -0.527809E-05  0.527809E-05   239.787       239.787    
  10  0.975006     -0.253117E-01 -0.130317E-05  0.130317E-05   247.674       247.674    
  11  0.781354     -0.246727     -0.127027E-04  0.127027E-04   247.814       247.814    
  12  0.354613      -1.03673     -0.533760E-04  0.533760E-04   248.487       248.487    
  13  0.892890     -0.113292     -0.583282E-05  0.583282E-05   249.535       249.535    
  14  0.916917     -0.867384E-01 -0.446572E-05  0.446572E-05   249.558       249.558    
  15  0.909380     -0.949922E-01 -0.489067E-05  0.489067E-05   251.882       251.882    
  16  0.986311     -0.137840E-01 -0.709668E-06  0.709668E-06   252.715       252.715    
  17  0.505543     -0.682123     -0.351191E-04  0.351191E-04   252.734       252.734    
  18  0.204247E-01  -3.89101     -0.200328E-03  0.200328E-03   254.447       254.447    
  19  0.572165     -0.558328     -0.287455E-04  0.287455E-04   255.441       255.441    
  20  0.825900E-01  -2.49387     -0.128397E-03  0.128397E-03   257.232       257.232    
  21  0.209247      -1.56424     -0.805349E-04  0.805349E-04   257.366       257.366    
  22  0.282361      -1.26457     -0.651063E-04  0.651063E-04   257.904       257.904    
  23  0.620889     -0.476603     -0.245379E-04  0.245379E-04   258.039       258.039    
  24  0.563880     -0.572913     -0.294964E-04  0.294964E-04   258.619       258.619    
  25  0.122331      -2.10103     -0.108171E-03  0.108171E-03   261.713       261.713    
  26  0.441179     -0.818304     -0.421304E-04  0.421304E-04   262.425       262.425    
  27  0.520434     -0.653092     -0.336244E-04  0.336244E-04   262.565       262.565    
  28  0.193495      -1.64250     -0.845642E-04  0.845642E-04   262.852       262.852    
  29  0.888781     -0.117905     -0.607032E-05  0.607032E-05   263.838       263.838    
  30  0.664108     -0.409311     -0.210734E-04  0.210734E-04   263.863       263.863    
  31  0.294244      -1.22335     -0.629839E-04  0.629839E-04   264.358       264.358    
  32  0.653378     -0.425600     -0.219120E-04  0.219120E-04   264.397       264.397    
  33  0.832785     -0.182980     -0.942071E-05  0.942071E-05   265.863       265.863    
  34  0.395946     -0.926477     -0.476996E-04  0.476996E-04   265.922       265.922    
  35  0.979310E-01  -2.32349     -0.119625E-03  0.119625E-03   267.978       267.978    
  36  0.351899      -1.04441     -0.537715E-04  0.537715E-04   268.298       268.298    
  37  0.914762     -0.890918E-01 -0.458689E-05  0.458689E-05   269.085       269.085    
  38  0.758392     -0.276555     -0.142384E-04  0.142384E-04   269.093       269.093    
  39  0.406303     -0.900656     -0.463703E-04  0.463703E-04   269.971       269.971    
  40  0.327172      -1.11727     -0.575226E-04  0.575226E-04   272.106       272.107    
  41  0.476331     -0.741643     -0.381835E-04  0.381835E-04   272.804       272.804    
  42  0.447224     -0.804697     -0.414298E-04  0.414298E-04   273.051       273.051    
  43  0.359107      -1.02414     -0.527276E-04  0.527276E-04   273.187       273.187    
  44  0.697121     -0.360796     -0.185756E-04  0.185756E-04   273.356       273.356    
  45  0.234213      -1.45153     -0.747317E-04  0.747317E-04   273.424       273.424    
  46  0.527324     -0.639939     -0.329473E-04  0.329473E-04   273.434       273.434    
  47  0.790358     -0.235270     -0.121129E-04  0.121129E-04   273.434       273.434    
  48  0.872967     -0.135857     -0.699459E-05  0.699459E-05   274.474       274.474    
  49  0.736534     -0.305800     -0.157441E-04  0.157441E-04   274.476       274.476    
  50  0.852602     -0.159462     -0.820992E-05  0.820992E-05   275.108       275.108    
  51  0.338656      -1.08277     -0.557464E-04  0.557464E-04   275.614       275.614    
  52  0.788540     -0.237572     -0.122314E-04  0.122314E-04   277.073       277.073    
  53  0.729789     -0.315000     -0.162178E-04  0.162178E-04   277.987       277.987    
  54  0.462856     -0.770339     -0.396609E-04  0.396609E-04   279.320       279.320    
  55  0.319138      -1.14213     -0.588027E-04  0.588027E-04   279.559       279.559    
  56  0.469270     -0.756577     -0.389523E-04  0.389523E-04   280.219       280.219    
  57  0.929705     -0.728876E-01 -0.375261E-05  0.375261E-05   280.773       280.773    
  58  0.105026      -2.25355     -0.116024E-03  0.116024E-03   285.658       285.658    
  59  0.826334E-01  -2.49334     -0.128370E-03  0.128370E-03   286.213       286.213    
  60  0.952072     -0.491149E-01 -0.252868E-05  0.252868E-05   289.578       289.578    
  61  0.377249     -0.974851     -0.501902E-04  0.501902E-04   274.042       274.042    
loop,thermsimp(1:2)       47  0.482428E-04  0.584252E-04

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    182              261.52          0.48          0.35         15.35
Just calling func    0   0         23.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    261.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.514850E-04           161
loop is:       47
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.514850E-04           161
loop is:       48
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.102970E-04           171

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      171
neval,tstepnext:      181     171

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835565     -0.179647     -0.184982E-05  0.184982E-05   227.955       227.955    
   2  0.367801      -1.00021     -0.102992E-04  0.102992E-04   228.037       228.037    
   3  0.353597      -1.03960     -0.107047E-04  0.107047E-04   231.350       231.350    
   4  0.435971     -0.830179     -0.854834E-05  0.854834E-05   232.501       232.501    
   5  0.692255     -0.367801     -0.378724E-05  0.378724E-05   235.629       235.629    
   6  0.579005     -0.546445     -0.562674E-05  0.562674E-05   238.046       238.046    
   7  0.898801     -0.106693     -0.109862E-05  0.109862E-05   238.401       238.401    
   8  0.933036     -0.693113E-01 -0.713698E-06  0.713698E-06   238.534       238.534    
   9  0.582991     -0.539583     -0.555608E-05  0.555608E-05   239.787       239.787    
  10  0.801799     -0.220897     -0.227458E-05  0.227458E-05   247.674       247.674    
  11  0.145560      -1.92717     -0.198440E-04  0.198440E-04   247.814       247.814    
  12  0.781410     -0.246655     -0.253980E-05  0.253980E-05   248.487       248.487    
  13  0.365953      -1.00525     -0.103510E-04  0.103510E-04   249.535       249.535    
  14  0.726409     -0.319642     -0.329135E-05  0.329135E-05   249.558       249.558    
  15  0.472360E-01  -3.05260     -0.314326E-04  0.314326E-04   251.882       251.882    
  16  0.401676     -0.912110     -0.939199E-05  0.939199E-05   252.715       252.715    
  17  0.269185      -1.31236     -0.135133E-04  0.135133E-04   252.734       252.734    
  18  0.622348     -0.474255     -0.488340E-05  0.488340E-05   254.447       254.447    
  19  0.258481      -1.35293     -0.139311E-04  0.139311E-04   255.441       255.441    
  20  0.341796      -1.07354     -0.110543E-04  0.110543E-04   257.232       257.232    
  21  0.584220     -0.537478     -0.553441E-05  0.553441E-05   257.366       257.366    
  22  0.635160     -0.453878     -0.467358E-05  0.467358E-05   257.904       257.904    
  23  0.613838     -0.488024     -0.502518E-05  0.502518E-05   258.039       258.039    
  24  0.505501     -0.682205     -0.702466E-05  0.702466E-05   258.619       258.619    
  25  0.619088     -0.479508     -0.493749E-05  0.493749E-05   261.713       261.713    
  26  0.285508      -1.25348     -0.129071E-04  0.129071E-04   262.425       262.425    
  27  0.135677      -1.99748     -0.205681E-04  0.205681E-04   262.565       262.565    
  28  0.151780      -1.88532     -0.194132E-04  0.194132E-04   262.852       262.852    
  29  0.423722     -0.858677     -0.884179E-05  0.884179E-05   263.838       263.838    
  30  0.657163     -0.419823     -0.432291E-05  0.432291E-05   263.863       263.863    
  31  0.856541     -0.154853     -0.159452E-05  0.159452E-05   264.358       264.358    
  32  0.173685      -1.75051     -0.180250E-04  0.180250E-04   264.397       264.397    
  33  0.489815     -0.713727     -0.734924E-05  0.734924E-05   265.863       265.863    
  34  0.272845      -1.29885     -0.133743E-04  0.133743E-04   265.922       265.922    
  35  0.254050      -1.37022     -0.141092E-04  0.141092E-04   267.978       267.978    
  36  0.701554     -0.354457     -0.364984E-05  0.364984E-05   268.298       268.298    
  37  0.655909     -0.421734     -0.434259E-05  0.434259E-05   269.085       269.085    
  38  0.952263     -0.489141E-01 -0.503668E-06  0.503668E-06   269.093       269.093    
  39  0.636608     -0.451601     -0.465013E-05  0.465013E-05   269.971       269.971    
  40  0.690821     -0.369875     -0.380860E-05  0.380860E-05   272.106       272.106    
  41  0.367354E-01  -3.30401     -0.340214E-04  0.340214E-04   272.804       272.804    
  42  0.168368E-01  -4.08419     -0.420548E-04  0.420548E-04   273.051       273.051    
  43  0.611903     -0.491182     -0.505770E-05  0.505770E-05   273.187       273.187    
  44  0.746829     -0.291919     -0.300589E-05  0.300589E-05   273.356       273.356    
  45  0.774778     -0.255179     -0.262757E-05  0.262757E-05   273.424       273.424    
  46  0.934787     -0.674371E-01 -0.694399E-06  0.694399E-06   273.434       273.434    
  47  0.762218     -0.271523     -0.279587E-05  0.279587E-05   273.434       273.434    
  48  0.351507      -1.04552     -0.107658E-04  0.107658E-04   274.042       274.042    
  49  0.347479      -1.05705     -0.108845E-04  0.108845E-04   274.474       274.474    
  50  0.528728     -0.637282     -0.656208E-05  0.656208E-05   274.476       274.476    
  51  0.648016     -0.433840     -0.446725E-05  0.446725E-05   275.108       275.108    
  52  0.926669     -0.761589E-01 -0.784207E-06  0.784207E-06   275.614       275.614    
  53  0.820077     -0.198357     -0.204248E-05  0.204248E-05   277.073       277.073    
  54  0.925230     -0.777130E-01 -0.800210E-06  0.800210E-06   277.987       277.987    
  55  0.680874     -0.384378     -0.395794E-05  0.395794E-05   279.320       279.320    
  56  0.551824     -0.594527     -0.612184E-05  0.612184E-05   279.559       279.559    
  57  0.298919      -1.20758     -0.124345E-04  0.124345E-04   280.219       280.219    
  58  0.772435     -0.258207     -0.265876E-05  0.265876E-05   280.773       280.773    
  59  0.598244     -0.513757     -0.529015E-05  0.529015E-05   285.658       285.658    
  60  0.879394     -0.128522     -0.132339E-05  0.132339E-05   286.213       286.213    
  61  0.974971     -0.253472E-01 -0.261000E-06  0.261000E-06   261.522       261.522    
loop,thermsimp(1:2)       48  0.184982E-05  0.102992E-04

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    183              416.46          0.48          0.36         15.45
Just calling func    0   0         23.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    184              279.95          0.47          0.36         15.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    279.95
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.102970E-04           171
loop is:       48
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.102970E-04           171
loop is:       49
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.205940E-05           181

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      181
neval,tstepnext:      183     181

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.177332      -1.72973     -0.356221E-05  0.356221E-05   227.955       227.955    
   2  0.165734      -1.79737     -0.370150E-05  0.370150E-05   228.037       228.037    
   3  0.748950     -0.289082     -0.595336E-06  0.595336E-06   231.350       231.350    
   4  0.334399      -1.09542     -0.225591E-05  0.225591E-05   232.501       232.501    
   5  0.931000     -0.714958E-01 -0.147238E-06  0.147238E-06   235.629       235.629    
   6  0.272357      -1.30064     -0.267854E-05  0.267854E-05   238.046       238.046    
   7  0.923436E-01  -2.38224     -0.490598E-05  0.490598E-05   238.401       238.401    
   8  0.938651     -0.633118E-01 -0.130384E-06  0.130384E-06   238.534       238.534    
   9  0.500129     -0.692890     -0.142694E-05  0.142694E-05   239.787       239.787    
  10  0.126059      -2.07100     -0.426502E-05  0.426502E-05   247.674       247.674    
  11  0.963370     -0.373180E-01 -0.768526E-07  0.768526E-07   247.814       247.814    
  12  0.687551     -0.374619     -0.771489E-06  0.771489E-06   248.487       248.487    
  13  0.527679     -0.639267     -0.131651E-05  0.131651E-05   249.535       249.535    
  14  0.809617     -0.211194     -0.434932E-06  0.434932E-06   249.558       249.558    
  15  0.854796     -0.156892     -0.323103E-06  0.323103E-06   251.882       251.882    
  16  0.301268      -1.19975     -0.247077E-05  0.247077E-05   252.715       252.715    
  17  0.768095     -0.263842     -0.543355E-06  0.543355E-06   252.734       252.734    
  18  0.838834     -0.175743     -0.361924E-06  0.361924E-06   254.447       254.447    
  19  0.924586     -0.784091E-01 -0.161476E-06  0.161476E-06   255.441       255.441    
  20  0.608549     -0.496678     -0.102286E-05  0.102286E-05   257.232       257.232    
  21  0.498368     -0.696417     -0.143420E-05  0.143420E-05   257.366       257.366    
  22  0.582459E-01  -2.84308     -0.585504E-05  0.585504E-05   257.904       257.904    
  23  0.903057     -0.101969     -0.209996E-06  0.209996E-06   258.039       258.039    
  24  0.433295     -0.836337     -0.172235E-05  0.172235E-05   258.619       258.619    
  25  0.500316     -0.692515     -0.142616E-05  0.142616E-05   261.522       261.522    
  26  0.256857E-01  -3.66182     -0.754115E-05  0.754115E-05   261.713       261.713    
  27  0.188202      -1.67024     -0.343969E-05  0.343969E-05   262.425       262.425    
  28  0.252615      -1.37589     -0.283350E-05  0.283350E-05   262.565       262.565    
  29  0.716433     -0.333471     -0.686750E-06  0.686750E-06   262.852       262.852    
  30  0.666067     -0.406365     -0.836867E-06  0.836867E-06   263.838       263.838    
  31  0.709945     -0.342568     -0.705484E-06  0.705484E-06   263.863       263.863    
  32  0.674158     -0.394291     -0.812003E-06  0.812003E-06   264.358       264.358    
  33  0.785701     -0.241179     -0.496683E-06  0.496683E-06   264.397       264.397    
  34  0.415863     -0.877400     -0.180692E-05  0.180692E-05   265.863       265.863    
  35  0.570265     -0.561653     -0.115667E-05  0.115667E-05   265.922       265.922    
  36  0.821393     -0.196754     -0.405195E-06  0.405195E-06   267.978       267.978    
  37  0.812901E-01  -2.50973     -0.516854E-05  0.516854E-05   268.298       268.298    
  38  0.342466      -1.07158     -0.220682E-05  0.220682E-05   269.085       269.085    
  39  0.643292     -0.441156     -0.908516E-06  0.908516E-06   269.093       269.093    
  40  0.790552     -0.235024     -0.484009E-06  0.484009E-06   269.971       269.971    
  41  0.258361      -1.35340     -0.278718E-05  0.278718E-05   272.106       272.106    
  42  0.775658     -0.254043     -0.523176E-06  0.523176E-06   272.804       272.804    
  43  0.330637      -1.10674     -0.227921E-05  0.227921E-05   273.051       273.051    
  44  0.645458     -0.437796     -0.901596E-06  0.901596E-06   273.187       273.187    
  45  0.230014      -1.46962     -0.302653E-05  0.302653E-05   273.356       273.356    
  46  0.815259E-01  -2.50683     -0.516257E-05  0.516257E-05   273.424       273.424    
  47  0.996685     -0.332073E-02 -0.683871E-08  0.683871E-08   273.434       273.434    
  48  0.899386     -0.106042     -0.218384E-06  0.218384E-06   273.434       273.434    
  49  0.781958     -0.245955     -0.506519E-06  0.506519E-06   274.042       274.042    
  50  0.563373     -0.573813     -0.118171E-05  0.118171E-05   274.474       274.474    
  51  0.222039      -1.50490     -0.309919E-05  0.309919E-05   274.476       274.476    
  52  0.192697      -1.64664     -0.339108E-05  0.339108E-05   275.108       275.108    
  53  0.217011      -1.52781     -0.314636E-05  0.314636E-05   275.614       275.614    
  54  0.721598     -0.326286     -0.671954E-06  0.671954E-06   277.073       277.073    
  55  0.814856     -0.204744     -0.421649E-06  0.421649E-06   277.987       277.987    
  56  0.573589     -0.555843     -0.114470E-05  0.114470E-05   279.320       279.320    
  57  0.841361     -0.172734     -0.355729E-06  0.355729E-06   279.559       279.559    
  58  0.793071     -0.231843     -0.477457E-06  0.477457E-06   280.219       280.219    
  59  0.176620      -1.73376     -0.357049E-05  0.357049E-05   280.773       280.773    
  60  0.865753     -0.144155     -0.296873E-06  0.296873E-06   285.658       285.658    
  61  0.938360     -0.636215E-01 -0.131022E-06  0.131022E-06   279.955       279.955    
loop,thermsimp(1:2)       49  0.356221E-05  0.370150E-05

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    185              223.18          0.48          0.36         15.37
Just calling func    0   0         23.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    186              357.67          0.77          0.47         20.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    223.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.205940E-05           181
loop is:       49
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.205940E-05           181
loop is:       50
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.411880E-06           191

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      191
neval,tstepnext:      185     191

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.896924E-01  -2.41137     -0.993194E-06  0.993194E-06   227.955       227.955    
   2  0.242407      -1.41714     -0.583690E-06  0.583690E-06   228.037       228.037    
   3  0.862207     -0.148260     -0.610653E-07  0.610653E-07   231.350       231.350    
   4  0.260183      -1.34637     -0.554542E-06  0.554542E-06   232.501       232.501    
   5  0.884536     -0.122693     -0.505346E-07  0.505346E-07   235.629       235.629    
   6  0.740291     -0.300712     -0.123857E-06  0.123857E-06   238.046       238.046    
   7  0.764006     -0.269180     -0.110870E-06  0.110870E-06   238.401       238.401    
   8  0.951581     -0.496305E-01 -0.204418E-07  0.204418E-07   238.534       238.534    
   9  0.745631     -0.293524     -0.120897E-06  0.120897E-06   239.787       239.787    
  10  0.198396      -1.61749     -0.666212E-06  0.666212E-06   247.674       247.674    
  11  0.830561     -0.185654     -0.764670E-07  0.764670E-07   247.814       247.814    
  12  0.413461     -0.883193     -0.363769E-06  0.363769E-06   248.487       248.487    
  13  0.570564     -0.561129     -0.231118E-06  0.231118E-06   249.535       249.535    
  14  0.803951     -0.218217     -0.898793E-07  0.898793E-07   249.558       249.558    
  15  0.846756E-01  -2.46893     -0.101690E-05  0.101690E-05   251.882       251.882    
  16  0.113273      -2.17795     -0.897055E-06  0.897055E-06   252.715       252.715    
  17  0.190313E-01  -3.96167     -0.163173E-05  0.163173E-05   252.734       252.734    
  18  0.282245      -1.26498     -0.521019E-06  0.521019E-06   254.447       254.447    
  19  0.577125     -0.549697     -0.226409E-06  0.226409E-06   255.441       255.441    
  20  0.387620     -0.947731     -0.390351E-06  0.390351E-06   257.232       257.232    
  21  0.113846E-01  -4.47549     -0.184336E-05  0.184336E-05   257.366       257.366    
  22  0.688614     -0.373074     -0.153662E-06  0.153662E-06   257.904       257.904    
  23  0.348182E-01  -3.35762     -0.138293E-05  0.138293E-05   258.039       258.039    
  24  0.907581     -0.969727E-01 -0.399411E-07  0.399411E-07   258.619       258.619    
  25  0.568152     -0.565367     -0.232863E-06  0.232863E-06   261.522       261.522    
  26  0.361643      -1.01710     -0.418922E-06  0.418922E-06   261.713       261.713    
  27  0.909322E-01  -2.39764     -0.987540E-06  0.987540E-06   262.425       262.425    
  28  0.692165     -0.367930     -0.151543E-06  0.151543E-06   262.565       262.565    
  29  0.172643      -1.75653     -0.723479E-06  0.723479E-06   262.852       262.852    
  30  0.403156     -0.908431     -0.374164E-06  0.374164E-06   263.838       263.838    
  31  0.848536     -0.164243     -0.676484E-07  0.676484E-07   263.863       263.863    
  32  0.312875      -1.16195     -0.478584E-06  0.478584E-06   264.358       264.358    
  33  0.590789     -0.526296     -0.216770E-06  0.216770E-06   264.397       264.397    
  34  0.774301     -0.255795     -0.105357E-06  0.105357E-06   265.863       265.863    
  35  0.644110     -0.439886     -0.181180E-06  0.181180E-06   265.922       265.922    
  36  0.646395     -0.436344     -0.179721E-06  0.179721E-06   267.978       267.978    
  37  0.194915      -1.63519     -0.673502E-06  0.673502E-06   268.298       268.298    
  38  0.335570      -1.09193     -0.449742E-06  0.449742E-06   269.085       269.085    
  39  0.405315     -0.903090     -0.371964E-06  0.371964E-06   269.093       269.093    
  40  0.984032     -0.160968E-01 -0.662995E-08  0.662995E-08   269.971       269.971    
  41  0.801221     -0.221619     -0.912802E-07  0.912802E-07   272.106       272.106    
  42  0.875568     -0.132883     -0.547317E-07  0.547317E-07   272.804       272.804    
  43  0.761196     -0.272865     -0.112387E-06  0.112387E-06   273.051       273.051    
  44  0.218737      -1.51988     -0.626009E-06  0.626009E-06   273.187       273.187    
  45  0.464621     -0.766532     -0.315719E-06  0.315719E-06   273.356       273.356    
  46  0.693530     -0.365960     -0.150732E-06  0.150732E-06   273.424       273.424    
  47  0.843908     -0.169712     -0.699010E-07  0.699010E-07   273.434       273.434    
  48  0.490362     -0.712611     -0.293510E-06  0.293510E-06   273.434       273.434    
  49  0.108775      -2.21847     -0.913743E-06  0.913743E-06   274.042       274.042    
  50  0.941047     -0.607625E-01 -0.250268E-07  0.250268E-07   274.474       274.474    
  51  0.902096     -0.103035     -0.424379E-07  0.424379E-07   274.476       274.476    
  52  0.885932     -0.121115     -0.498847E-07  0.498847E-07   275.108       275.108    
  53  0.708360     -0.344803     -0.142017E-06  0.142017E-06   275.614       275.614    
  54  0.497708     -0.697741     -0.287385E-06  0.287385E-06   277.073       277.073    
  55  0.307611      -1.17892     -0.485573E-06  0.485573E-06   277.987       277.987    
  56  0.488278     -0.716871     -0.295265E-06  0.295265E-06   279.320       279.320    
  57  0.904642     -0.100216     -0.412768E-07  0.412768E-07   279.559       279.559    
  58  0.925270     -0.776698E-01 -0.319906E-07  0.319906E-07   279.955       279.955    
  59  0.133410      -2.01433     -0.829662E-06  0.829662E-06   280.219       280.219    
  60  0.645874     -0.437151     -0.180054E-06  0.180054E-06   280.773       280.773    
  61  0.558915     -0.581758     -0.239614E-06  0.239614E-06   223.181       223.181    
loop,thermsimp(1:2)       50  0.993194E-06  0.583690E-06

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    187              262.84          0.80          0.47         20.20
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    262.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       50
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       51
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      191
neval,tstepnext:      186     191

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332692      -1.10054     -0.453289E-06  0.453289E-06   223.181       223.181    
   2  0.130516E-01  -4.33885     -0.178708E-05  0.178708E-05   227.955       227.955    
   3  0.279446E-01  -3.57753     -0.147351E-05  0.147351E-05   228.037       228.037    
   4  0.610436     -0.493581     -0.203296E-06  0.203296E-06   231.350       231.350    
   5  0.403321     -0.908023     -0.373996E-06  0.373996E-06   232.501       232.501    
   6  0.398148     -0.920931     -0.379313E-06  0.379313E-06   235.629       235.629    
   7  0.466874     -0.761697     -0.313727E-06  0.313727E-06   238.046       238.046    
   8  0.720731     -0.327489     -0.134886E-06  0.134886E-06   238.401       238.401    
   9  0.576714     -0.550409     -0.226702E-06  0.226702E-06   238.534       238.534    
  10  0.475236     -0.743943     -0.306415E-06  0.306415E-06   239.787       239.787    
  11  0.826972     -0.189984     -0.782505E-07  0.782505E-07   247.674       247.674    
  12  0.657748     -0.418933     -0.172550E-06  0.172550E-06   247.814       247.814    
  13  0.794798     -0.229667     -0.945951E-07  0.945951E-07   248.487       248.487    
  14  0.418160     -0.871892     -0.359115E-06  0.359115E-06   249.535       249.535    
  15  0.480372     -0.733194     -0.301988E-06  0.301988E-06   249.558       249.558    
  16  0.500224     -0.692699     -0.285309E-06  0.285309E-06   251.882       251.882    
  17  0.440531     -0.819774     -0.337648E-06  0.337648E-06   252.715       252.715    
  18  0.518236     -0.657324     -0.270739E-06  0.270739E-06   252.734       252.734    
  19  0.490709     -0.711903     -0.293219E-06  0.293219E-06   254.447       254.447    
  20  0.718024     -0.331252     -0.136436E-06  0.136436E-06   255.441       255.441    
  21  0.814730     -0.204899     -0.843937E-07  0.843937E-07   257.232       257.232    
  22  0.742729     -0.297424     -0.122503E-06  0.122503E-06   257.366       257.366    
  23  0.852871E-01  -2.46173     -0.101394E-05  0.101394E-05   257.904       257.904    
  24  0.821412     -0.196731     -0.810293E-07  0.810293E-07   258.039       258.039    
  25  0.949615     -0.516987E-01 -0.212936E-07  0.212936E-07   258.619       258.619    
  26  0.389185     -0.943700     -0.388691E-06  0.388691E-06   261.522       261.522    
  27  0.519893     -0.654132     -0.269424E-06  0.269424E-06   261.713       261.713    
  28  0.860588     -0.150140     -0.618394E-07  0.618394E-07   262.425       262.425    
  29  0.747054     -0.291618     -0.120112E-06  0.120112E-06   262.565       262.565    
  30  0.334741      -1.09440     -0.450761E-06  0.450761E-06   262.852       262.852    
  31  0.852748     -0.159292     -0.656090E-07  0.656090E-07   263.838       263.838    
  32  0.926221     -0.766423E-01 -0.315674E-07  0.315674E-07   263.863       263.863    
  33  0.611210     -0.492315     -0.202775E-06  0.202775E-06   264.358       264.358    
  34  0.215339      -1.53554     -0.632459E-06  0.632459E-06   264.397       264.397    
  35  0.564390E-02  -5.17718     -0.213237E-05  0.213237E-05   265.863       265.863    
  36  0.190024      -1.66060     -0.683969E-06  0.683969E-06   265.922       265.922    
  37  0.257687E-01  -3.65860     -0.150690E-05  0.150690E-05   267.978       267.978    
  38  0.187682      -1.67301     -0.689077E-06  0.689077E-06   268.298       268.298    
  39  0.468853     -0.757466     -0.311985E-06  0.311985E-06   269.085       269.085    
  40  0.196172E-01  -3.93135     -0.161924E-05  0.161924E-05   269.093       269.093    
  41  0.431332     -0.840877     -0.346340E-06  0.346340E-06   269.971       269.971    
  42  0.992456     -0.757302E-02 -0.311917E-08  0.311917E-08   272.106       272.106    
  43  0.210782      -1.55693     -0.641268E-06  0.641268E-06   272.804       272.804    
  44  0.653208     -0.425859     -0.175403E-06  0.175403E-06   273.051       273.051    
  45  0.425730     -0.853949     -0.351724E-06  0.351724E-06   273.187       273.187    
  46  0.773165     -0.257263     -0.105962E-06  0.105962E-06   273.356       273.356    
  47  0.537747     -0.620368     -0.255517E-06  0.255517E-06   273.424       273.424    
  48  0.223427      -1.49867     -0.617271E-06  0.617271E-06   273.434       273.434    
  49  0.332002      -1.10261     -0.454145E-06  0.454145E-06   273.434       273.434    
  50  0.569352     -0.563256     -0.231994E-06  0.231994E-06   274.042       274.042    
  51  0.317893      -1.14604     -0.472031E-06  0.472031E-06   274.474       274.474    
  52  0.648508     -0.433081     -0.178377E-06  0.178377E-06   274.476       274.476    
  53  0.160654      -1.82851     -0.753124E-06  0.753124E-06   275.108       275.108    
  54  0.370628     -0.992555     -0.408813E-06  0.408813E-06   275.614       275.614    
  55  0.826427     -0.190644     -0.785222E-07  0.785222E-07   277.073       277.073    
  56  0.831244     -0.184831     -0.761283E-07  0.761283E-07   277.987       277.987    
  57  0.468744E-01  -3.06028     -0.126047E-05  0.126047E-05   279.320       279.320    
  58  0.191876      -1.65091     -0.679975E-06  0.679975E-06   279.559       279.559    
  59  0.588898E-01  -2.83209     -0.116648E-05  0.116648E-05   279.955       279.955    
  60  0.516044     -0.661563     -0.272484E-06  0.272484E-06   280.219       280.219    
  61  0.700232     -0.356343     -0.146770E-06  0.146770E-06   262.841       262.841    
loop,thermsimp(1:2)       51  0.453289E-06  0.178708E-05

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    188              249.86          0.80          0.47         20.32
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    249.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       51
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       52
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      191
neval,tstepnext:      187     191

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.519113     -0.655635     -0.270043E-06  0.270043E-06   223.181       223.181    
   2  0.759170     -0.275529     -0.113485E-06  0.113485E-06   227.955       227.955    
   3  0.335969E-01  -3.39332     -0.139764E-05  0.139764E-05   228.037       228.037    
   4  0.883355     -0.124028     -0.510848E-07  0.510848E-07   231.350       231.350    
   5  0.202677      -1.59614     -0.657418E-06  0.657418E-06   232.501       232.501    
   6  0.479462E-01  -3.03768     -0.125116E-05  0.125116E-05   235.629       235.629    
   7  0.673046     -0.395942     -0.163081E-06  0.163081E-06   238.046       238.046    
   8  0.207881      -1.57079     -0.646976E-06  0.646976E-06   238.401       238.401    
   9  0.223973E-01  -3.79881     -0.156465E-05  0.156465E-05   238.534       238.534    
  10  0.626767E-01  -2.76977     -0.114081E-05  0.114081E-05   239.787       239.787    
  11  0.718663     -0.330362     -0.136069E-06  0.136069E-06   247.674       247.674    
  12  0.433548     -0.835753     -0.344230E-06  0.344230E-06   247.814       247.814    
  13  0.895332     -0.110561     -0.455377E-07  0.455377E-07   248.487       248.487    
  14  0.410407     -0.890607     -0.366823E-06  0.366823E-06   249.535       249.535    
  15  0.196027      -1.62950     -0.671159E-06  0.671159E-06   249.558       249.558    
  16  0.292677E-01  -3.53127     -0.145446E-05  0.145446E-05   251.882       251.882    
  17  0.560319     -0.579249     -0.238581E-06  0.238581E-06   252.715       252.715    
  18  0.643943     -0.440145     -0.181287E-06  0.181287E-06   252.734       252.734    
  19  0.844102     -0.169482     -0.698063E-07  0.698063E-07   254.447       254.447    
  20  0.558987     -0.581629     -0.239561E-06  0.239561E-06   255.441       255.441    
  21  0.195721      -1.63107     -0.671803E-06  0.671803E-06   257.232       257.232    
  22  0.960945     -0.398385E-01 -0.164087E-07  0.164087E-07   257.366       257.366    
  23  0.233208      -1.45582     -0.599624E-06  0.599624E-06   257.904       257.904    
  24  0.393956     -0.931515     -0.383672E-06  0.383672E-06   258.039       258.039    
  25  0.735638     -0.307018     -0.126454E-06  0.126454E-06   258.619       258.619    
  26  0.361029      -1.01880     -0.419622E-06  0.419622E-06   261.522       261.522    
  27  0.482442     -0.728896     -0.300217E-06  0.300217E-06   261.713       261.713    
  28  0.636244     -0.452173     -0.186241E-06  0.186241E-06   262.425       262.425    
  29  0.931594     -0.708578E-01 -0.291849E-07  0.291849E-07   262.565       262.565    
  30  0.470130     -0.754747     -0.310865E-06  0.310865E-06   262.841       262.841    
  31  0.194224      -1.63874     -0.674965E-06  0.674965E-06   262.852       262.852    
  32  0.162757      -1.81550     -0.747767E-06  0.747767E-06   263.838       263.838    
  33  0.861617     -0.148944     -0.613472E-07  0.613472E-07   263.863       263.863    
  34  0.572954     -0.556949     -0.229396E-06  0.229396E-06   264.358       264.358    
  35  0.711507     -0.340371     -0.140192E-06  0.140192E-06   264.397       264.397    
  36  0.704821E-01  -2.65240     -0.109247E-05  0.109247E-05   265.863       265.863    
  37  0.686294     -0.376449     -0.155052E-06  0.155052E-06   265.922       265.922    
  38  0.962774     -0.379368E-01 -0.156254E-07  0.156254E-07   267.978       267.978    
  39  0.811671     -0.208660     -0.859428E-07  0.859428E-07   268.298       268.298    
  40  0.750264     -0.287330     -0.118345E-06  0.118345E-06   269.085       269.085    
  41  0.581065     -0.542893     -0.223607E-06  0.223607E-06   269.093       269.093    
  42  0.791630     -0.233661     -0.962401E-07  0.962401E-07   269.971       269.971    
  43  0.193117      -1.64446     -0.677319E-06  0.677319E-06   272.106       272.106    
  44  0.937476     -0.645642E-01 -0.265927E-07  0.265927E-07   272.804       272.804    
  45  0.119588      -2.12370     -0.874709E-06  0.874709E-06   273.051       273.051    
  46  0.730249     -0.314369     -0.129482E-06  0.129482E-06   273.187       273.187    
  47  0.261139      -1.34270     -0.553032E-06  0.553032E-06   273.356       273.356    
  48  0.333713E-01  -3.40006     -0.140042E-05  0.140042E-05   273.424       273.424    
  49  0.875465     -0.133000     -0.547800E-07  0.547800E-07   273.434       273.434    
  50  0.811499     -0.208872     -0.860303E-07  0.860303E-07   273.434       273.434    
  51  0.485193     -0.723208     -0.297875E-06  0.297875E-06   274.042       274.042    
  52  0.709287     -0.343496     -0.141479E-06  0.141479E-06   274.474       274.474    
  53  0.552301     -0.593663     -0.244518E-06  0.244518E-06   274.476       274.476    
  54  0.506813     -0.679613     -0.279919E-06  0.279919E-06   275.108       275.108    
  55  0.971828     -0.285765E-01 -0.117701E-07  0.117701E-07   275.614       275.614    
  56  0.848509     -0.164275     -0.676613E-07  0.676613E-07   277.073       277.073    
  57  0.757170     -0.278168     -0.114572E-06  0.114572E-06   277.987       277.987    
  58  0.265428      -1.32641     -0.546321E-06  0.546321E-06   279.320       279.320    
  59  0.450695     -0.796964     -0.328253E-06  0.328253E-06   279.559       279.559    
  60  0.876363     -0.131975     -0.543579E-07  0.543579E-07   279.955       279.955    
  61  0.250168E-01  -3.68821     -0.151910E-05  0.151910E-05   249.863       249.863    
loop,thermsimp(1:2)       52  0.270043E-06  0.113485E-06

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    189              256.85          0.79          0.47         20.31
Just calling func    0   0         23.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    256.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       52
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       53
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      191
neval,tstepnext:      188     191

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.244773      -1.40742     -0.579689E-06  0.579689E-06   223.181       223.181    
   2  0.691706     -0.368594     -0.151816E-06  0.151816E-06   227.955       227.955    
   3  0.731469     -0.312701     -0.128795E-06  0.128795E-06   228.037       228.037    
   4  0.849032     -0.163658     -0.674074E-07  0.674074E-07   231.350       231.350    
   5  0.608630     -0.496545     -0.204517E-06  0.204517E-06   232.501       232.501    
   6  0.589382     -0.528681     -0.217753E-06  0.217753E-06   235.629       235.629    
   7  0.274152      -1.29407     -0.533002E-06  0.533002E-06   238.046       238.046    
   8  0.548721     -0.600165     -0.247196E-06  0.247196E-06   238.401       238.401    
   9  0.702011     -0.353807     -0.145726E-06  0.145726E-06   238.534       238.534    
  10  0.979459     -0.207549E-01 -0.854851E-08  0.854851E-08   239.787       239.787    
  11  0.606097     -0.500715     -0.206234E-06  0.206234E-06   247.674       247.674    
  12  0.450347     -0.797736     -0.328571E-06  0.328571E-06   247.814       247.814    
  13  0.824475     -0.193009     -0.794963E-07  0.794963E-07   248.487       248.487    
  14  0.963349     -0.373392E-01 -0.153793E-07  0.153793E-07   249.535       249.535    
  15  0.451787     -0.794544     -0.327256E-06  0.327256E-06   249.558       249.558    
  16  0.836612     -0.178395     -0.734772E-07  0.734772E-07   249.863       249.863    
  17  0.183718      -1.69435     -0.697869E-06  0.697869E-06   251.882       251.882    
  18  0.492383     -0.708499     -0.291816E-06  0.291816E-06   252.715       252.715    
  19  0.727862     -0.317644     -0.130831E-06  0.130831E-06   252.734       252.734    
  20  0.992523     -0.750474E-02 -0.309105E-08  0.309105E-08   254.447       254.447    
  21  0.564844     -0.571205     -0.235268E-06  0.235268E-06   255.441       255.441    
  22  0.902312E-02  -4.70797     -0.193912E-05  0.193912E-05   257.232       257.232    
  23  0.195582      -1.63178     -0.672095E-06  0.672095E-06   257.366       257.366    
  24  0.694184     -0.365019     -0.150344E-06  0.150344E-06   257.904       257.904    
  25  0.480679     -0.732555     -0.301725E-06  0.301725E-06   258.039       258.039    
  26  0.408878     -0.894338     -0.368360E-06  0.368360E-06   258.619       258.619    
  27  0.481986     -0.729839     -0.300606E-06  0.300606E-06   261.522       261.522    
  28  0.441798     -0.816901     -0.336465E-06  0.336465E-06   261.713       261.713    
  29  0.803210     -0.219139     -0.902590E-07  0.902590E-07   262.425       262.425    
  30  0.317114      -1.14850     -0.473042E-06  0.473042E-06   262.565       262.565    
  31  0.777464     -0.251718     -0.103677E-06  0.103677E-06   262.841       262.841    
  32  0.831778     -0.184190     -0.758641E-07  0.758641E-07   262.852       262.852    
  33  0.145090      -1.93040     -0.795092E-06  0.795092E-06   263.838       263.838    
  34  0.696656     -0.361463     -0.148879E-06  0.148879E-06   263.863       263.863    
  35  0.459341     -0.777962     -0.320427E-06  0.320427E-06   264.358       264.358    
  36  0.649597     -0.431403     -0.177686E-06  0.177686E-06   264.397       264.397    
  37  0.156752      -1.85309     -0.763251E-06  0.763251E-06   265.863       265.863    
  38  0.121439      -2.10835     -0.868385E-06  0.868385E-06   265.922       265.922    
  39  0.867491     -0.142151     -0.585490E-07  0.585490E-07   267.978       267.978    
  40  0.341222      -1.07522     -0.442862E-06  0.442862E-06   268.298       268.298    
  41  0.611414     -0.491980     -0.202637E-06  0.202637E-06   269.085       269.085    
  42  0.174043      -1.74845     -0.720152E-06  0.720152E-06   269.093       269.093    
  43  0.733051     -0.310540     -0.127905E-06  0.127905E-06   269.971       269.971    
  44  0.713415     -0.337692     -0.139089E-06  0.139089E-06   272.106       272.106    
  45  0.309104      -1.17408     -0.483579E-06  0.483579E-06   272.804       272.804    
  46  0.713034     -0.338226     -0.139308E-06  0.139308E-06   273.051       273.051    
  47  0.261682      -1.34063     -0.552176E-06  0.552176E-06   273.187       273.187    
  48  0.269929      -1.30959     -0.539395E-06  0.539395E-06   273.356       273.356    
  49  0.661913     -0.412621     -0.169950E-06  0.169950E-06   273.424       273.424    
  50  0.375350     -0.979897     -0.403599E-06  0.403599E-06   273.434       273.434    
  51  0.670595E-01  -2.70217     -0.111297E-05  0.111297E-05   273.434       273.434    
  52  0.396689E-01  -3.22719     -0.132921E-05  0.132921E-05   274.042       274.042    
  53  0.706203     -0.347853     -0.143274E-06  0.143274E-06   274.474       274.474    
  54  0.644650     -0.439048     -0.180835E-06  0.180835E-06   274.476       274.476    
  55  0.211684E-01  -3.85525     -0.158790E-05  0.158790E-05   275.108       275.108    
  56  0.987004     -0.130812E-01 -0.538789E-08  0.538789E-08   275.614       275.614    
  57  0.649403     -0.431702     -0.177809E-06  0.177809E-06   277.073       277.073    
  58  0.911830E-01  -2.39489     -0.986405E-06  0.986405E-06   277.987       277.987    
  59  0.110006      -2.20722     -0.909107E-06  0.909107E-06   279.320       279.320    
  60  0.350613      -1.04807     -0.431679E-06  0.431679E-06   279.559       279.559    
  61  0.283259      -1.26139     -0.519542E-06  0.519542E-06   256.854       256.854    
loop,thermsimp(1:2)       53  0.579689E-06  0.151816E-06

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    190              264.22          0.80          0.46         20.20
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    264.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       53
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       54
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      191
neval,tstepnext:      189     191

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190910      -1.65595     -0.682053E-06  0.682053E-06   223.181       223.181    
   2  0.101598      -2.28673     -0.941858E-06  0.941858E-06   227.955       227.955    
   3  0.596133     -0.517291     -0.213061E-06  0.213061E-06   228.037       228.037    
   4  0.924740     -0.782429E-01 -0.322267E-07  0.322267E-07   231.350       231.350    
   5  0.474843     -0.744771     -0.306756E-06  0.306756E-06   232.501       232.501    
   6  0.798807     -0.224636     -0.925231E-07  0.925231E-07   235.629       235.629    
   7  0.638754     -0.448236     -0.184619E-06  0.184619E-06   238.046       238.046    
   8  0.138884      -1.97412     -0.813099E-06  0.813099E-06   238.401       238.401    
   9  0.672584     -0.396629     -0.163363E-06  0.163363E-06   238.534       238.534    
  10  0.148188      -1.90927     -0.786390E-06  0.786390E-06   239.787       239.787    
  11  0.802318     -0.220250     -0.907167E-07  0.907167E-07   247.674       247.674    
  12  0.862062     -0.148428     -0.611346E-07  0.611346E-07   247.814       247.814    
  13  0.401652     -0.912170     -0.375704E-06  0.375704E-06   248.487       248.487    
  14  0.820556     -0.197773     -0.814588E-07  0.814588E-07   249.535       249.535    
  15  0.937273     -0.647804E-01 -0.266817E-07  0.266817E-07   249.558       249.558    
  16  0.843504     -0.170190     -0.700980E-07  0.700980E-07   249.863       249.863    
  17  0.353061      -1.04112     -0.428814E-06  0.428814E-06   251.882       251.882    
  18  0.494115     -0.704987     -0.290370E-06  0.290370E-06   252.715       252.715    
  19  0.845425     -0.167916     -0.691611E-07  0.691611E-07   252.734       252.734    
  20  0.596773     -0.516218     -0.212620E-06  0.212620E-06   254.447       254.447    
  21  0.925774     -0.771251E-01 -0.317663E-07  0.317663E-07   255.441       255.441    
  22  0.909915     -0.944041E-01 -0.388831E-07  0.388831E-07   256.854       256.854    
  23  0.936467     -0.656406E-01 -0.270360E-07  0.270360E-07   257.232       257.232    
  24  0.359085      -1.02420     -0.421846E-06  0.421846E-06   257.366       257.366    
  25  0.750324     -0.287250     -0.118313E-06  0.118313E-06   257.904       257.904    
  26  0.446070     -0.807279     -0.332502E-06  0.332502E-06   258.039       258.039    
  27  0.208697      -1.56687     -0.645362E-06  0.645362E-06   258.619       258.619    
  28  0.141390      -1.95623     -0.805733E-06  0.805733E-06   261.522       261.522    
  29  0.109611      -2.21082     -0.910591E-06  0.910591E-06   261.713       261.713    
  30  0.305445      -1.18599     -0.488483E-06  0.488483E-06   262.425       262.425    
  31  0.681653     -0.383234     -0.157846E-06  0.157846E-06   262.565       262.565    
  32  0.497942     -0.697271     -0.287192E-06  0.287192E-06   262.841       262.841    
  33  0.657154     -0.419837     -0.172922E-06  0.172922E-06   262.852       262.852    
  34  0.882131E-01  -2.42800     -0.100004E-05  0.100004E-05   263.838       263.838    
  35  0.341959      -1.07306     -0.441974E-06  0.441974E-06   263.863       263.863    
  36  0.722087     -0.325610     -0.134112E-06  0.134112E-06   264.358       264.358    
  37  0.710371     -0.341967     -0.140849E-06  0.140849E-06   264.397       264.397    
  38  0.876950     -0.131305     -0.540818E-07  0.540818E-07   265.863       265.863    
  39  0.740770E-01  -2.60265     -0.107198E-05  0.107198E-05   265.922       265.922    
  40  0.176034      -1.73708     -0.715466E-06  0.715466E-06   267.978       267.978    
  41  0.864658     -0.145421     -0.598961E-07  0.598961E-07   268.298       268.298    
  42  0.172847      -1.75535     -0.722993E-06  0.722993E-06   269.085       269.085    
  43  0.830366     -0.185889     -0.765638E-07  0.765638E-07   269.093       269.093    
  44  0.104124      -2.26217     -0.931743E-06  0.931743E-06   269.971       269.971    
  45  0.212799E-01  -3.84999     -0.158573E-05  0.158573E-05   272.106       272.106    
  46  0.778897     -0.249877     -0.102919E-06  0.102919E-06   272.804       272.804    
  47  0.709017     -0.343876     -0.141635E-06  0.141635E-06   273.051       273.051    
  48  0.698754     -0.358456     -0.147641E-06  0.147641E-06   273.187       273.187    
  49  0.761478     -0.272494     -0.112235E-06  0.112235E-06   273.356       273.356    
  50  0.535258     -0.625006     -0.257427E-06  0.257427E-06   273.424       273.424    
  51  0.116619      -2.14884     -0.885063E-06  0.885063E-06   273.434       273.434    
  52  0.886941E-01  -2.42256     -0.997804E-06  0.997804E-06   273.434       273.434    
  53  0.978739     -0.214901E-01 -0.885133E-08  0.885133E-08   274.042       274.042    
  54  0.185543      -1.68447     -0.693798E-06  0.693798E-06   274.474       274.474    
  55  0.502644     -0.687874     -0.283321E-06  0.283321E-06   274.476       274.476    
  56  0.427869E-01  -3.15152     -0.129805E-05  0.129805E-05   275.108       275.108    
  57  0.898460     -0.107073     -0.441012E-07  0.441012E-07   275.614       275.614    
  58  0.744698     -0.294776     -0.121412E-06  0.121412E-06   277.073       277.073    
  59  0.906925     -0.976951E-01 -0.402386E-07  0.402386E-07   277.987       277.987    
  60  0.472412     -0.749904     -0.308870E-06  0.308870E-06   279.320       279.320    
  61  0.861032     -0.149623     -0.616268E-07  0.616268E-07   264.221       264.221    
loop,thermsimp(1:2)       54  0.682053E-06  0.941858E-06

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    191             1252.02          0.79          0.47         20.34
Just calling func    0   0         23.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    192              381.23          0.77          0.46         20.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4    279.32
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       54
neval is:      191
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     193       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj:    193              212.31          0.79          0.47         20.30
iter,obj:    194              204.45          0.80          0.47         20.31
iter,obj:    195              212.82          0.80          0.46         20.30
iter,obj:    196              210.28          0.80          0.47         20.31
iter,obj:    197              217.10          0.80          0.47         20.27
iter,obj:    198              218.53          0.80          0.47         20.23
iter,obj:    199              212.79          0.79          0.46         20.31
iter,obj:    200              219.57          0.80          0.47         20.29
iter,obj:    201              217.64          0.80          0.46         20.22
iter,obj:    202              218.57          0.80          0.47         20.20
iter,obj:    203              221.67          0.79          0.47         20.29
iter,obj:    204              209.16          0.80          0.47         20.30
iter,obj:    205              220.55          0.79          0.46         20.27
iter,obj:    206              219.14          0.80          0.47         20.27
iter,obj:    207              216.23          0.80          0.47         20.19
iter,obj:    208              213.83          0.79          0.47         20.35
iter,obj:    209              218.70          0.79          0.47         20.23
iter,obj:    210              219.73          0.79          0.47         20.20
iter,obj:    211              224.50          0.80          0.47         20.16
iter,obj:    212              218.36          0.81          0.47         20.29
iter,obj:    213              224.08          0.80          0.46         20.31
iter,obj:    214              227.16          0.80          0.46         20.27
iter,obj:    215              220.48          0.80          0.47         20.27
iter,obj:    216              221.10          0.81          0.47         20.34
iter,obj:    217              223.20          0.80          0.47         20.31
iter,obj:    218              220.13          0.79          0.47         20.30
iter,obj:    219              224.75          0.80          0.46         20.31
iter,obj:    220              227.20          0.80          0.47         20.18
iter,obj:    221              221.13          0.79          0.47         20.18
iter,obj:    222              221.42          0.78          0.46         20.30
iter,obj:    223              221.38          0.80          0.46         20.36
iter,obj:    224              222.03          0.80          0.46         20.36
iter,obj:    225              231.17          0.78          0.46         20.35
iter,obj:    226              221.27          0.80          0.46         20.32
iter,obj:    227              218.26          0.81          0.47         20.34
iter,obj:    228              223.61          0.80          0.47         20.20
iter,obj:    229              225.53          0.80          0.46         20.27
iter,obj:    230              220.78          0.80          0.47         20.26
iter,obj:    231              222.97          0.80          0.46         20.26
iter,obj:    232              223.64          0.81          0.46         20.27
iter,obj:    233              224.35          0.78          0.47         20.23
iter,obj:    234              223.37          0.80          0.46         20.38
iter,obj:    235              222.39          0.80          0.47         20.34
iter,obj:    236              229.97          0.80          0.46         20.26
iter,obj:    237              227.81          0.80          0.47         20.27
iter,obj:    238              226.61          0.79          0.46         20.35
iter,obj:    239              225.88          0.81          0.46         20.37
iter,obj:    240              225.72          0.79          0.47         20.31
iter,obj:    241              225.99          0.80          0.47         20.36
iter,obj:    242              225.84          0.79          0.47         20.19
iter,obj:    243              226.04          0.78          0.47         20.36
iter,obj:    244              226.04          0.79          0.46         20.33
iter,obj:    245              231.74          0.79          0.46         20.27
iter,obj:    246              227.42          0.80          0.47         20.36
iter,obj:    247              226.27          0.80          0.46         20.35
iter,obj:    248              225.70          0.80          0.46         20.34
iter,obj:    249              226.37          0.78          0.47         20.20
iter,obj:    250              228.58          0.79          0.47         20.32
iter,obj:    251              228.26          0.80          0.47         20.26
iter,obj:    252              242.86          0.80          0.47         20.33


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     254      61
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     251




loop,nloop:      54      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.411880E-06           191
loop is:       55
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.823759E-07           201

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      201
neval,tstepnext:      251     201

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228794      -1.47493     -0.121499E-06  0.121499E-06   223.181       223.181    
   2  0.420210     -0.867000     -0.714199E-07  0.714199E-07   212.314       212.314    
   3  0.989243     -0.108149E-01 -0.890891E-09  0.890891E-09   204.446       204.446    
   4  0.517450     -0.658842     -0.542727E-07  0.542727E-07   212.820       212.820    
   5  0.675670     -0.392051     -0.322956E-07  0.322956E-07   210.275       210.275    
   6  0.203988      -1.58970     -0.130953E-06  0.130953E-06   217.102       217.102    
   7  0.868528     -0.140956     -0.116114E-07  0.116114E-07   218.532       218.532    
   8  0.987374     -0.127061E-01 -0.104667E-08  0.104667E-08   212.788       212.788    
   9  0.584947     -0.536234     -0.441728E-07  0.441728E-07   219.565       219.565    
  10  0.563428     -0.573717     -0.472604E-07  0.472604E-07   217.644       217.644    
  11  0.568669     -0.564457     -0.464977E-07  0.464977E-07   218.573       218.573    
  12  0.534795E-01  -2.92846     -0.241234E-06  0.241234E-06   221.669       221.669    
  13  0.153481      -1.87418     -0.154387E-06  0.154387E-06   209.163       209.163    
  14  0.874711     -0.133861     -0.110269E-07  0.110269E-07   220.548       220.548    
  15  0.180668      -1.71109     -0.140953E-06  0.140953E-06   219.138       219.138    
  16  0.352875      -1.04164     -0.858063E-07  0.858063E-07   216.230       216.230    
  17  0.721913     -0.325850     -0.268422E-07  0.268422E-07   213.829       213.829    
  18  0.158740      -1.84049     -0.151612E-06  0.151612E-06   218.696       218.696    
  19  0.649867     -0.430987     -0.355030E-07  0.355030E-07   219.730       219.730    
  20  0.186457      -1.67956     -0.138355E-06  0.138355E-06   224.505       224.505    
  21  0.268335      -1.31552     -0.108367E-06  0.108367E-06   218.364       218.364    
  22  0.940957     -0.608578E-01 -0.501322E-08  0.501322E-08   224.083       224.083    
  23  0.760618     -0.273624     -0.225400E-07  0.225400E-07   227.162       227.162    
  24  0.452319     -0.793369     -0.653545E-07  0.653545E-07   220.481       220.481    
  25  0.335882      -1.09100     -0.898718E-07  0.898718E-07   221.103       221.103    
  26  0.689274     -0.372117     -0.306535E-07  0.306535E-07   223.198       223.198    
  27  0.539603     -0.616922     -0.508196E-07  0.508196E-07   220.127       220.127    
  28  0.541846     -0.612773     -0.504778E-07  0.504778E-07   224.746       224.746    
  29  0.773880E-01  -2.55892     -0.210794E-06  0.210794E-06   227.205       227.205    
  30  0.372274     -0.988125     -0.813977E-07  0.813977E-07   221.131       221.131    
  31  0.108145      -2.22428     -0.183227E-06  0.183227E-06   221.419       221.419    
  32  0.459534     -0.777543     -0.640509E-07  0.640509E-07   221.376       221.376    
  33  0.166613      -1.79208     -0.147625E-06  0.147625E-06   222.033       222.033    
  34  0.398466     -0.920133     -0.757968E-07  0.757968E-07   231.172       231.172    
  35  0.516334     -0.661001     -0.544506E-07  0.544506E-07   221.266       221.266    
  36  0.101491      -2.28778     -0.188458E-06  0.188458E-06   218.263       218.263    
  37  0.530436     -0.634055     -0.522309E-07  0.522309E-07   223.611       223.611    
  38  0.293908      -1.22449     -0.100868E-06  0.100868E-06   225.528       225.528    
  39  0.246706      -1.39956     -0.115290E-06  0.115290E-06   220.782       220.782    
  40  0.206826      -1.57588     -0.129814E-06  0.129814E-06   222.967       222.967    
  41  0.548478     -0.600609     -0.494757E-07  0.494757E-07   223.636       223.636    
  42  0.686846     -0.375646     -0.309442E-07  0.309442E-07   224.348       224.348    
  43  0.368061     -0.999506     -0.823353E-07  0.823353E-07   223.370       223.370    
  44  0.642608     -0.442221     -0.364284E-07  0.364284E-07   222.393       222.393    
  45  0.326039      -1.12074     -0.923219E-07  0.923219E-07   229.974       229.974    
  46  0.682535     -0.381941     -0.314628E-07  0.314628E-07   227.810       227.810    
  47  0.795596     -0.228663     -0.188363E-07  0.188363E-07   226.609       226.609    
  48  0.894074     -0.111967     -0.922337E-08  0.922337E-08   225.880       225.880    
  49  0.921171     -0.821100E-01 -0.676389E-08  0.676389E-08   225.717       225.717    
  50  0.251687      -1.37957     -0.113643E-06  0.113643E-06   225.994       225.994    
  51  0.221295      -1.50826     -0.124244E-06  0.124244E-06   225.836       225.836    
  52  0.490642     -0.712041     -0.586550E-07  0.586550E-07   226.038       226.038    
  53  0.306791      -1.18159     -0.973343E-07  0.973343E-07   226.038       226.038    
  54  0.575137     -0.553147     -0.455660E-07  0.455660E-07   231.744       231.744    
  55  0.259963      -1.34721     -0.110978E-06  0.110978E-06   227.425       227.425    
  56  0.455650     -0.786031     -0.647500E-07  0.647500E-07   226.270       226.270    
  57  0.779457     -0.249158     -0.205246E-07  0.205246E-07   225.699       225.699    
  58  0.562431     -0.575488     -0.474063E-07  0.474063E-07   226.366       226.366    
  59  0.136426      -1.99197     -0.164091E-06  0.164091E-06   228.578       228.578    
  60  0.871389     -0.137666     -0.113404E-07  0.113404E-07   228.263       228.263    
  61  0.677652     -0.389122     -0.320543E-07  0.320543E-07   242.857       242.857    
loop,thermsimp(1:2)       55  0.121499E-06  0.714199E-07

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    253              342.66          0.79          0.47         20.39
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    254              240.78          0.78          0.46         20.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    240.78
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.823759E-07           201
loop is:       55
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.823759E-07           201
loop is:       56
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.164752E-07           211

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      211
neval,tstepnext:      253     211

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.433868     -0.835015     -0.137570E-07  0.137570E-07   204.446       204.446    
   2  0.817899     -0.201016     -0.331178E-08  0.331178E-08   209.163       209.163    
   3  0.170263      -1.77041     -0.291679E-07  0.291679E-07   210.275       210.275    
   4  0.391592     -0.937534     -0.154460E-07  0.154460E-07   212.314       212.314    
   5  0.637635     -0.449989     -0.741366E-08  0.741366E-08   212.788       212.788    
   6  0.238246      -1.43445     -0.236329E-07  0.236329E-07   212.820       212.820    
   7  0.558671     -0.582194     -0.959175E-08  0.959175E-08   213.829       213.829    
   8  0.272631      -1.29964     -0.214117E-07  0.214117E-07   216.230       216.230    
   9  0.711921     -0.339788     -0.559807E-08  0.559807E-08   217.102       217.102    
  10  0.761283     -0.272750     -0.449361E-08  0.449361E-08   217.644       217.644    
  11  0.663871     -0.409667     -0.674934E-08  0.674934E-08   218.263       218.263    
  12  0.616008E-01  -2.78708     -0.459177E-07  0.459177E-07   218.364       218.364    
  13  0.326931      -1.11801     -0.184194E-07  0.184194E-07   218.532       218.532    
  14  0.146733      -1.91914     -0.316182E-07  0.316182E-07   218.573       218.573    
  15  0.421611     -0.863671     -0.142291E-07  0.142291E-07   218.696       218.696    
  16  0.269414      -1.31151     -0.216073E-07  0.216073E-07   219.138       219.138    
  17  0.242810      -1.41548     -0.233202E-07  0.233202E-07   219.565       219.565    
  18  0.705413     -0.348972     -0.574938E-08  0.574938E-08   219.730       219.730    
  19  0.200964      -1.60463     -0.264366E-07  0.264366E-07   220.127       220.127    
  20  0.159337      -1.83674     -0.302606E-07  0.302606E-07   220.481       220.481    
  21  0.800051     -0.223080     -0.367529E-08  0.367529E-08   220.548       220.548    
  22  0.255260      -1.36547     -0.224964E-07  0.224964E-07   220.782       220.782    
  23  0.213981      -1.54187     -0.254026E-07  0.254026E-07   221.103       221.103    
  24  0.216091      -1.53205     -0.252409E-07  0.252409E-07   221.131       221.131    
  25  0.965950     -0.346430E-01 -0.570749E-09  0.570749E-09   221.266       221.266    
  26  0.211106      -1.55539     -0.256254E-07  0.256254E-07   221.376       221.376    
  27  0.904120     -0.100793     -0.166059E-08  0.166059E-08   221.419       221.419    
  28  0.919941     -0.834456E-01 -0.137478E-08  0.137478E-08   221.669       221.669    
  29  0.852210     -0.159923     -0.263476E-08  0.263476E-08   222.033       222.033    
  30  0.237120      -1.43919     -0.237109E-07  0.237109E-07   222.393       222.393    
  31  0.996080     -0.392726E-02 -0.647023E-10  0.647023E-10   222.967       222.967    
  32  0.414678     -0.880253     -0.145023E-07  0.145023E-07   223.181       223.181    
  33  0.271326E-01  -3.60702     -0.594263E-07  0.594263E-07   223.198       223.198    
  34  0.163009      -1.81395     -0.298852E-07  0.298852E-07   223.370       223.370    
  35  0.805918     -0.215774     -0.355491E-08  0.355491E-08   223.611       223.611    
  36  0.495108     -0.702979     -0.115817E-07  0.115817E-07   223.636       223.636    
  37  0.877917     -0.130203     -0.214511E-08  0.214511E-08   224.083       224.083    
  38  0.868506E-01  -2.44357     -0.402582E-07  0.402582E-07   224.348       224.348    
  39  0.159190      -1.83766     -0.302757E-07  0.302757E-07   224.505       224.505    
  40  0.621758     -0.475205     -0.782909E-08  0.782909E-08   224.746       224.746    
  41  0.168692      -1.77968     -0.293206E-07  0.293206E-07   225.528       225.528    
  42  0.309179      -1.17383     -0.193391E-07  0.193391E-07   225.699       225.699    
  43  0.126118      -2.07054     -0.341125E-07  0.341125E-07   225.717       225.717    
  44  0.720454     -0.327873     -0.540177E-08  0.540177E-08   225.836       225.836    
  45  0.732905     -0.310740     -0.511949E-08  0.511949E-08   225.880       225.880    
  46  0.250687      -1.38355     -0.227943E-07  0.227943E-07   225.994       225.994    
  47  0.622064     -0.474712     -0.782097E-08  0.782097E-08   226.038       226.038    
  48  0.456179     -0.784869     -0.129309E-07  0.129309E-07   226.038       226.038    
  49  0.584013     -0.537833     -0.886089E-08  0.886089E-08   226.270       226.270    
  50  0.754076     -0.282262     -0.465032E-08  0.465032E-08   226.366       226.366    
  51  0.534844     -0.625781     -0.103099E-07  0.103099E-07   226.609       226.609    
  52  0.378689     -0.971041     -0.159981E-07  0.159981E-07   227.162       227.162    
  53  0.497266     -0.698631     -0.115101E-07  0.115101E-07   227.205       227.205    
  54  0.566795     -0.567757     -0.935390E-08  0.935390E-08   227.425       227.425    
  55  0.650860     -0.429461     -0.707545E-08  0.707545E-08   227.810       227.810    
  56  0.393053E-02  -5.53898     -0.912557E-07  0.912557E-07   228.263       228.263    
  57  0.138912      -1.97391     -0.325206E-07  0.325206E-07   228.578       228.578    
  58  0.551188     -0.595679     -0.981392E-08  0.981392E-08   229.974       229.974    
  59  0.675035     -0.392991     -0.647460E-08  0.647460E-08   231.172       231.172    
  60  0.339359      -1.08070     -0.178047E-07  0.178047E-07   231.744       231.744    
  61  0.599286     -0.512017     -0.843557E-08  0.843557E-08   240.778       240.778    
loop,thermsimp(1:2)       56  0.137570E-07  0.331178E-08

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    255              230.72          0.80          0.47         20.34
Just calling func    0   0         23.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    230.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.164752E-07           211
loop is:       56
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.164752E-07           211
loop is:       57
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.329504E-08           221

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      221
neval,tstepnext:      254     221

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.171852      -1.76112     -0.580296E-08  0.580296E-08   204.446       204.446    
   2  0.953318     -0.478070E-01 -0.157526E-09  0.157526E-09   209.163       209.163    
   3  0.708591     -0.344476     -0.113506E-08  0.113506E-08   210.275       210.275    
   4  0.245430      -1.40474     -0.462868E-08  0.462868E-08   212.314       212.314    
   5  0.520828     -0.652335     -0.214947E-08  0.214947E-08   212.788       212.788    
   6  0.881471     -0.126163     -0.415711E-09  0.415711E-09   212.820       212.820    
   7  0.569715     -0.562619     -0.185385E-08  0.185385E-08   213.829       213.829    
   8  0.602272     -0.507047     -0.167074E-08  0.167074E-08   216.230       216.230    
   9  0.108750      -2.21871     -0.731072E-08  0.731072E-08   217.102       217.102    
  10  0.370933     -0.991733     -0.326780E-08  0.326780E-08   217.644       217.644    
  11  0.390808E-01  -3.24212     -0.106829E-07  0.106829E-07   218.263       218.263    
  12  0.528479     -0.637753     -0.210142E-08  0.210142E-08   218.364       218.364    
  13  0.769289     -0.262288     -0.864249E-09  0.864249E-09   218.532       218.532    
  14  0.997327     -0.267639E-02 -0.881880E-11  0.881880E-11   218.573       218.573    
  15  0.468299E-01  -3.06123     -0.100869E-07  0.100869E-07   218.696       218.696    
  16  0.502176     -0.688805     -0.226964E-08  0.226964E-08   219.138       219.138    
  17  0.458473     -0.779855     -0.256965E-08  0.256965E-08   219.565       219.565    
  18  0.667863     -0.403672     -0.133011E-08  0.133011E-08   219.730       219.730    
  19  0.853852     -0.157998     -0.520609E-09  0.520609E-09   220.127       220.127    
  20  0.338424      -1.08346     -0.357003E-08  0.357003E-08   220.481       220.481    
  21  0.422719     -0.861048     -0.283718E-08  0.283718E-08   220.548       220.548    
  22  0.983407     -0.167327E-01 -0.551348E-10  0.551348E-10   220.782       220.782    
  23  0.654262     -0.424247     -0.139791E-08  0.139791E-08   221.103       221.103    
  24  0.475096     -0.744239     -0.245229E-08  0.245229E-08   221.131       221.131    
  25  0.949952     -0.513433E-01 -0.169178E-09  0.169178E-09   221.266       221.266    
  26  0.885344     -0.121779     -0.401267E-09  0.401267E-09   221.376       221.376    
  27  0.487222     -0.719035     -0.236925E-08  0.236925E-08   221.419       221.419    
  28  0.515039     -0.663512     -0.218630E-08  0.218630E-08   221.669       221.669    
  29  0.670192     -0.400190     -0.131864E-08  0.131864E-08   222.033       222.033    
  30  0.875515     -0.132943     -0.438051E-09  0.438051E-09   222.393       222.393    
  31  0.528859E-01  -2.93962     -0.968615E-08  0.968615E-08   222.967       222.967    
  32  0.193389E-01  -3.94563     -0.130010E-07  0.130010E-07   223.181       223.181    
  33  0.915613     -0.881617E-01 -0.290496E-09  0.290496E-09   223.198       223.198    
  34  0.518072     -0.657641     -0.216695E-08  0.216695E-08   223.370       223.370    
  35  0.120335      -2.11748     -0.697717E-08  0.697717E-08   223.611       223.611    
  36  0.900518     -0.104785     -0.345271E-09  0.345271E-09   223.636       223.636    
  37  0.938582     -0.633855E-01 -0.208858E-09  0.208858E-09   224.083       224.083    
  38  0.727537E-01  -2.62068     -0.863522E-08  0.863522E-08   224.348       224.348    
  39  0.524285E-01  -2.94830     -0.971477E-08  0.971477E-08   224.505       224.505    
  40  0.349149      -1.05226     -0.346722E-08  0.346722E-08   224.746       224.746    
  41  0.335318      -1.09268     -0.360041E-08  0.360041E-08   225.528       225.528    
  42  0.858345     -0.152749     -0.503314E-09  0.503314E-09   225.699       225.699    
  43  0.979287     -0.209305E-01 -0.689666E-10  0.689666E-10   225.717       225.717    
  44  0.304061      -1.19053     -0.392283E-08  0.392283E-08   225.836       225.836    
  45  0.260277      -1.34601     -0.443515E-08  0.443515E-08   225.880       225.880    
  46  0.475426     -0.743544     -0.245000E-08  0.245000E-08   225.994       225.994    
  47  0.792432     -0.232649     -0.766586E-09  0.766586E-09   226.038       226.038    
  48  0.277990      -1.28017     -0.421821E-08  0.421821E-08   226.038       226.038    
  49  0.436194     -0.829668     -0.273379E-08  0.273379E-08   226.270       226.270    
  50  0.853545E-01  -2.46094     -0.810890E-08  0.810890E-08   226.366       226.366    
  51  0.346227      -1.06066     -0.349492E-08  0.349492E-08   226.609       226.609    
  52  0.504502     -0.684183     -0.225441E-08  0.225441E-08   227.162       227.162    
  53  0.955363     -0.456638E-01 -0.150464E-09  0.150464E-09   227.205       227.205    
  54  0.457892     -0.781121     -0.257382E-08  0.257382E-08   227.425       227.425    
  55  0.609943     -0.494391     -0.162904E-08  0.162904E-08   227.810       227.810    
  56  0.755785     -0.279998     -0.922605E-09  0.922605E-09   228.263       228.263    
  57  0.891562     -0.114780     -0.378204E-09  0.378204E-09   228.578       228.578    
  58  0.787549     -0.238830     -0.786954E-09  0.786954E-09   229.974       229.974    
  59  0.242621      -1.41625     -0.466661E-08  0.466661E-08   231.172       231.172    
  60  0.886115     -0.120909     -0.398400E-09  0.398400E-09   231.744       231.744    
  61  0.311099      -1.16764     -0.384743E-08  0.384743E-08   230.725       230.725    
loop,thermsimp(1:2)       57  0.580296E-08  0.157526E-09

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    256              216.88          0.80          0.46         20.32
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    216.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.329504E-08           221
loop is:       57
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.329504E-08           221
loop is:       58
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.659007E-09           231

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      231
neval,tstepnext:      255     231

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.933932     -0.683515E-01 -0.450442E-10  0.450442E-10   204.446       204.446    
   2  0.255439      -1.36477     -0.899395E-09  0.899395E-09   209.163       209.163    
   3  0.863844E-01  -2.44895     -0.161388E-08  0.161388E-08   210.275       210.275    
   4  0.136388      -1.99225     -0.131291E-08  0.131291E-08   212.314       212.314    
   5  0.251157      -1.38168     -0.910536E-09  0.910536E-09   212.788       212.788    
   6  0.895211     -0.110695     -0.729491E-10  0.729491E-10   212.820       212.820    
   7  0.209243E-01  -3.86685     -0.254828E-08  0.254828E-08   213.829       213.829    
   8  0.427309     -0.850248     -0.560320E-09  0.560320E-09   216.230       216.230    
   9  0.698935E-01  -2.66078     -0.175348E-08  0.175348E-08   217.102       217.102    
  10  0.664342     -0.408959     -0.269507E-09  0.269507E-09   217.644       217.644    
  11  0.162416      -1.81760     -0.119781E-08  0.119781E-08   218.263       218.263    
  12  0.335786      -1.09128     -0.719162E-09  0.719162E-09   218.364       218.364    
  13  0.267712      -1.31784     -0.868468E-09  0.868468E-09   218.532       218.532    
  14  0.108817      -2.21809     -0.146174E-08  0.146174E-08   218.573       218.573    
  15  0.626069     -0.468294     -0.308609E-09  0.308609E-09   218.696       218.696    
  16  0.366286      -1.00434     -0.661868E-09  0.661868E-09   219.138       219.138    
  17  0.604263     -0.503746     -0.331972E-09  0.331972E-09   219.565       219.565    
  18  0.556394     -0.586279     -0.386362E-09  0.386362E-09   219.730       219.730    
  19  0.424350     -0.857196     -0.564898E-09  0.564898E-09   220.127       220.127    
  20  0.881256     -0.126407     -0.833029E-10  0.833029E-10   220.481       220.481    
  21  0.605497     -0.501706     -0.330628E-09  0.330628E-09   220.548       220.548    
  22  0.843342     -0.170382     -0.112283E-09  0.112283E-09   220.782       220.782    
  23  0.352338      -1.04316     -0.687453E-09  0.687453E-09   221.103       221.103    
  24  0.437966     -0.825614     -0.544086E-09  0.544086E-09   221.131       221.131    
  25  0.383175     -0.959262     -0.632161E-09  0.632161E-09   221.266       221.266    
  26  0.547453     -0.602479     -0.397038E-09  0.397038E-09   221.376       221.376    
  27  0.816360     -0.202900     -0.133712E-09  0.133712E-09   221.419       221.419    
  28  0.554431     -0.589813     -0.388691E-09  0.388691E-09   221.669       221.669    
  29  0.273475E-01  -3.59913     -0.237185E-08  0.237185E-08   222.033       222.033    
  30  0.913102     -0.909074E-01 -0.599086E-10  0.599086E-10   222.393       222.393    
  31  0.774925     -0.254989     -0.168040E-09  0.168040E-09   222.967       222.967    
  32  0.716357     -0.333576     -0.219829E-09  0.219829E-09   223.181       223.181    
  33  0.541279     -0.613820     -0.404512E-09  0.404512E-09   223.198       223.198    
  34  0.179674      -1.71661     -0.113126E-08  0.113126E-08   223.370       223.370    
  35  0.207486E-01  -3.87528     -0.255384E-08  0.255384E-08   223.611       223.611    
  36  0.912139     -0.919634E-01 -0.606046E-10  0.606046E-10   223.636       223.636    
  37  0.982180     -0.179806E-01 -0.118494E-10  0.118494E-10   224.083       224.083    
  38  0.539550     -0.617020     -0.406621E-09  0.406621E-09   224.348       224.348    
  39  0.758675     -0.276182     -0.182006E-09  0.182006E-09   224.505       224.505    
  40  0.873601     -0.135131     -0.890524E-10  0.890524E-10   224.746       224.746    
  41  0.929133     -0.735034E-01 -0.484393E-10  0.484393E-10   225.528       225.528    
  42  0.827155     -0.189764     -0.125056E-09  0.125056E-09   225.699       225.699    
  43  0.833031     -0.182684     -0.120390E-09  0.120390E-09   225.717       225.717    
  44  0.146351      -1.92175     -0.126645E-08  0.126645E-08   225.836       225.836    
  45  0.251331      -1.38098     -0.910079E-09  0.910079E-09   225.880       225.880    
  46  0.658350     -0.418019     -0.275478E-09  0.275478E-09   225.994       225.994    
  47  0.426206E-01  -3.15542     -0.207944E-08  0.207944E-08   226.038       226.038    
  48  0.753188     -0.283440     -0.186789E-09  0.186789E-09   226.038       226.038    
  49  0.478453     -0.737198     -0.485819E-09  0.485819E-09   226.270       226.270    
  50  0.100854      -2.29409     -0.151182E-08  0.151182E-08   226.366       226.366    
  51  0.888512     -0.118208     -0.778997E-10  0.778997E-10   226.609       226.609    
  52  0.110201E-01  -4.50803     -0.297083E-08  0.297083E-08   227.162       227.162    
  53  0.648265     -0.433456     -0.285651E-09  0.285651E-09   227.205       227.205    
  54  0.552372     -0.593534     -0.391143E-09  0.391143E-09   227.425       227.425    
  55  0.694632     -0.364373     -0.240125E-09  0.240125E-09   227.810       227.810    
  56  0.195285      -1.63329     -0.107635E-08  0.107635E-08   228.263       228.263    
  57  0.331277      -1.10480     -0.728071E-09  0.728071E-09   228.578       228.578    
  58  0.213047      -1.54624     -0.101899E-08  0.101899E-08   229.974       229.974    
  59  0.201507E-01  -3.90451     -0.257310E-08  0.257310E-08   230.725       230.725    
  60  0.546197     -0.604776     -0.398552E-09  0.398552E-09   231.172       231.172    
  61  0.595903     -0.517678     -0.341154E-09  0.341154E-09   216.880       216.880    
loop,thermsimp(1:2)       58  0.450442E-10  0.899395E-09

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    257              229.14          0.80          0.47         20.24
Just calling func    0   0         23.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    229.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.659007E-09           231
loop is:       58
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.659007E-09           231
loop is:       59
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.131801E-09           241

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      241
neval,tstepnext:      256     241

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.814850     -0.204751     -0.269865E-10  0.269865E-10   204.446       204.446    
   2  0.496184     -0.700809     -0.923677E-10  0.923677E-10   209.163       209.163    
   3  0.584768     -0.536541     -0.707169E-10  0.707169E-10   210.275       210.275    
   4  0.696542     -0.361627     -0.476630E-10  0.476630E-10   212.314       212.314    
   5  0.313904      -1.15867     -0.152714E-09  0.152714E-09   212.788       212.788    
   6  0.874550     -0.134046     -0.176675E-10  0.176675E-10   212.820       212.820    
   7  0.292763      -1.22839     -0.161904E-09  0.161904E-09   213.829       213.829    
   8  0.250382      -1.38477     -0.182514E-09  0.182514E-09   216.230       216.230    
   9  0.267099      -1.32013     -0.173996E-09  0.173996E-09   216.880       216.880    
  10  0.227540      -1.48043     -0.195123E-09  0.195123E-09   217.102       217.102    
  11  0.924505     -0.784972E-01 -0.103461E-10  0.103461E-10   217.644       217.644    
  12  0.792965E-01  -2.53456     -0.334059E-09  0.334059E-09   218.263       218.263    
  13  0.661311E-01  -2.71612     -0.357988E-09  0.357988E-09   218.364       218.364    
  14  0.152556      -1.88022     -0.247816E-09  0.247816E-09   218.532       218.532    
  15  0.343502      -1.06856     -0.140838E-09  0.140838E-09   218.573       218.573    
  16  0.682029     -0.382684     -0.504383E-10  0.504383E-10   218.696       218.696    
  17  0.114431      -2.16778     -0.285717E-09  0.285717E-09   219.138       219.138    
  18  0.288412      -1.24337     -0.163878E-09  0.163878E-09   219.565       219.565    
  19  0.902695     -0.102370     -0.134925E-10  0.134925E-10   219.730       219.730    
  20  0.907159     -0.974380E-01 -0.128425E-10  0.128425E-10   220.127       220.127    
  21  0.351201      -1.04640     -0.137917E-09  0.137917E-09   220.481       220.481    
  22  0.107593      -2.22940     -0.293838E-09  0.293838E-09   220.548       220.548    
  23  0.802533     -0.219983     -0.289940E-10  0.289940E-10   220.782       220.782    
  24  0.945987     -0.555266E-01 -0.731849E-11  0.731849E-11   221.103       221.103    
  25  0.312105      -1.16441     -0.153472E-09  0.153472E-09   221.131       221.131    
  26  0.721340     -0.326645     -0.430523E-10  0.430523E-10   221.266       221.266    
  27  0.933380     -0.689430E-01 -0.908678E-11  0.908678E-11   221.376       221.376    
  28  0.330572      -1.10693     -0.145895E-09  0.145895E-09   221.419       221.419    
  29  0.446542     -0.806221     -0.106261E-09  0.106261E-09   221.669       221.669    
  30  0.288108      -1.24442     -0.164016E-09  0.164016E-09   222.033       222.033    
  31  0.810980E-01  -2.51210     -0.331098E-09  0.331098E-09   222.393       222.393    
  32  0.135627      -1.99785     -0.263319E-09  0.263319E-09   222.967       222.967    
  33  0.730233     -0.314391     -0.414372E-10  0.414372E-10   223.181       223.181    
  34  0.310170      -1.17063     -0.154291E-09  0.154291E-09   223.198       223.198    
  35  0.948518     -0.528541E-01 -0.696625E-11  0.696625E-11   223.370       223.370    
  36  0.840606     -0.173633     -0.228850E-10  0.228850E-10   223.611       223.611    
  37  0.100656      -2.29605     -0.302623E-09  0.302623E-09   223.636       223.636    
  38  0.384695E-01  -3.25789     -0.429395E-09  0.429395E-09   224.083       224.083    
  39  0.747904     -0.290480     -0.382857E-10  0.382857E-10   224.348       224.348    
  40  0.208544      -1.56760     -0.206613E-09  0.206613E-09   224.505       224.505    
  41  0.582430     -0.540547     -0.712448E-10  0.712448E-10   224.746       224.746    
  42  0.130854      -2.03367     -0.268041E-09  0.268041E-09   225.528       225.528    
  43  0.274714      -1.29202     -0.170291E-09  0.170291E-09   225.699       225.699    
  44  0.845387     -0.167961     -0.221375E-10  0.221375E-10   225.717       225.717    
  45  0.833554     -0.182056     -0.239953E-10  0.239953E-10   225.836       225.836    
  46  0.949991     -0.513026E-01 -0.676176E-11  0.676176E-11   225.880       225.880    
  47  0.672524     -0.396718     -0.522880E-10  0.522880E-10   225.994       225.994    
  48  0.607314     -0.498710     -0.657307E-10  0.657307E-10   226.038       226.038    
  49  0.415231     -0.878921     -0.115843E-09  0.115843E-09   226.038       226.038    
  50  0.450313     -0.797811     -0.105153E-09  0.105153E-09   226.270       226.270    
  51  0.584221     -0.537476     -0.708401E-10  0.708401E-10   226.366       226.366    
  52  0.701046     -0.355182     -0.468135E-10  0.468135E-10   226.609       226.609    
  53  0.226453      -1.48522     -0.195754E-09  0.195754E-09   227.162       227.162    
  54  0.322391      -1.13199     -0.149198E-09  0.149198E-09   227.205       227.205    
  55  0.867724     -0.141882     -0.187002E-10  0.187002E-10   227.425       227.425    
  56  0.776428     -0.253051     -0.333525E-10  0.333525E-10   227.810       227.810    
  57  0.825863     -0.191326     -0.252171E-10  0.252171E-10   228.263       228.263    
  58  0.534766     -0.625925     -0.824979E-10  0.824979E-10   228.578       228.578    
  59  0.894021     -0.112026     -0.147651E-10  0.147651E-10   229.974       229.974    
  60  0.777642     -0.251488     -0.331466E-10  0.331466E-10   230.725       230.725    
  61  0.687880     -0.374140     -0.493123E-10  0.493123E-10   229.139       229.139    
loop,thermsimp(1:2)       59  0.269865E-10  0.923677E-10

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    258              240.07          0.80          0.47         20.34
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    259              222.96          0.77          0.46         20.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    222.96
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.131801E-09           241
loop is:       59
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.131801E-09           241
loop is:       60
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.263603E-10           251

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      251
neval,tstepnext:      258     251

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.953906     -0.471905E-01 -0.124396E-11  0.124396E-11   204.446       204.446    
   2  0.277171      -1.28312     -0.338234E-10  0.338234E-10   209.163       209.163    
   3  0.407830     -0.896905     -0.236427E-10  0.236427E-10   210.275       210.275    
   4  0.423266     -0.859753     -0.226634E-10  0.226634E-10   212.314       212.314    
   5  0.573545     -0.555919     -0.146542E-10  0.146542E-10   212.788       212.788    
   6  0.446795     -0.805655     -0.212373E-10  0.212373E-10   212.820       212.820    
   7  0.141464      -1.95571     -0.515531E-10  0.515531E-10   213.829       213.829    
   8  0.448145     -0.802638     -0.211578E-10  0.211578E-10   216.230       216.230    
   9  0.131719      -2.02709     -0.534346E-10  0.534346E-10   216.880       216.880    
  10  0.838319     -0.176357     -0.464881E-11  0.464881E-11   217.102       217.102    
  11  0.936808     -0.652768E-01 -0.172072E-11  0.172072E-11   217.644       217.644    
  12  0.863420     -0.146854     -0.387111E-11  0.387111E-11   218.263       218.263    
  13  0.840084     -0.174253     -0.459337E-11  0.459337E-11   218.364       218.364    
  14  0.969526     -0.309475E-01 -0.815785E-12  0.815785E-12   218.532       218.532    
  15  0.719626     -0.329024     -0.867317E-11  0.867317E-11   218.573       218.573    
  16  0.771493     -0.259428     -0.683860E-11  0.683860E-11   218.696       218.696    
  17  0.743879E-01  -2.59846     -0.684962E-10  0.684962E-10   219.138       219.138    
  18  0.724857     -0.321780     -0.848222E-11  0.848222E-11   219.565       219.565    
  19  0.172991      -1.75452     -0.462496E-10  0.462496E-10   219.730       219.730    
  20  0.990427     -0.961944E-02 -0.253571E-12  0.253571E-12   220.127       220.127    
  21  0.673429     -0.395372     -0.104221E-10  0.104221E-10   220.481       220.481    
  22  0.827584     -0.189245     -0.498855E-11  0.498855E-11   220.548       220.548    
  23  0.716876     -0.332853     -0.877410E-11  0.877410E-11   220.782       220.782    
  24  0.926610E-01  -2.37881     -0.627061E-10  0.627061E-10   221.103       221.103    
  25  0.432255     -0.838741     -0.221095E-10  0.221095E-10   221.131       221.131    
  26  0.886728E-01  -2.42280     -0.638658E-10  0.638658E-10   221.266       221.266    
  27  0.893955     -0.112100     -0.295498E-11  0.295498E-11   221.376       221.376    
  28  0.359814      -1.02217     -0.269447E-10  0.269447E-10   221.419       221.419    
  29  0.949508     -0.518111E-01 -0.136576E-11  0.136576E-11   221.669       221.669    
  30  0.771263     -0.259726     -0.684646E-11  0.684646E-11   222.033       222.033    
  31  0.294441      -1.22268     -0.322301E-10  0.322301E-10   222.393       222.393    
  32  0.835806E-01  -2.48194     -0.654248E-10  0.654248E-10   222.967       222.967    
  33  0.995829     -0.417961E-02 -0.110176E-12  0.110176E-12   223.181       223.181    
  34  0.801299     -0.221522     -0.583938E-11  0.583938E-11   223.198       223.198    
  35  0.419810     -0.867952     -0.228795E-10  0.228795E-10   223.370       223.370    
  36  0.181313      -1.70753     -0.450110E-10  0.450110E-10   223.611       223.611    
  37  0.194669      -1.63646     -0.431375E-10  0.431375E-10   223.636       223.636    
  38  0.821243     -0.196936     -0.519129E-11  0.519129E-11   224.083       224.083    
  39  0.944312     -0.572989E-01 -0.151042E-11  0.151042E-11   224.348       224.348    
  40  0.896859     -0.108856     -0.286949E-11  0.286949E-11   224.505       224.505    
  41  0.733160     -0.310391     -0.818200E-11  0.818200E-11   224.746       224.746    
  42  0.205019      -1.58465     -0.417719E-10  0.417719E-10   225.528       225.528    
  43  0.101018E-01  -4.59504     -0.121127E-09  0.121127E-09   225.699       225.699    
  44  0.256800      -1.35946     -0.358357E-10  0.358357E-10   225.717       225.717    
  45  0.445568     -0.808406     -0.213098E-10  0.213098E-10   225.836       225.836    
  46  0.343547      -1.06843     -0.281641E-10  0.281641E-10   225.880       225.880    
  47  0.590050E-01  -2.83013     -0.746031E-10  0.746031E-10   225.994       225.994    
  48  0.708074     -0.345207     -0.909976E-11  0.909976E-11   226.038       226.038    
  49  0.333434      -1.09831     -0.289518E-10  0.289518E-10   226.038       226.038    
  50  0.831291     -0.184775     -0.487073E-11  0.487073E-11   226.270       226.270    
  51  0.622048     -0.474737     -0.125142E-10  0.125142E-10   226.366       226.366    
  52  0.519044     -0.655766     -0.172862E-10  0.172862E-10   226.609       226.609    
  53  0.574922     -0.553521     -0.145910E-10  0.145910E-10   227.162       227.162    
  54  0.370494     -0.992918     -0.261736E-10  0.261736E-10   227.205       227.205    
  55  0.919482     -0.839448E-01 -0.221281E-11  0.221281E-11   227.425       227.425    
  56  0.282457E-01  -3.56681     -0.940223E-10  0.940223E-10   227.810       227.810    
  57  0.169220      -1.77655     -0.468305E-10  0.468305E-10   228.263       228.263    
  58  0.276297      -1.28628     -0.339067E-10  0.339067E-10   228.578       228.578    
  59  0.651892     -0.427877     -0.112790E-10  0.112790E-10   229.139       229.139    
  60  0.541113     -0.614128     -0.161886E-10  0.161886E-10   229.974       229.974    
  61  0.165027E-01  -4.10423     -0.108189E-09  0.108189E-09   222.956       222.956    
loop,thermsimp(1:2)       60  0.124396E-11  0.338234E-10

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    260              231.02          0.79          0.46         20.36
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    261              214.76          0.77          0.46         20.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    214.76        2.454     -1.780      4.028     -100.0     0.3866    
                      -1.507     0.5039     -100.0      2.943     -1.088    
                     -0.9926E-01 -1.968      2.009      0.000     0.6600    
                      -1.108     -20.00      0.000      0.000     -1.221    

                      -1.600      6859.      9084.     -560.0     -1451.    
                      -4.215     -5.787     -4.481     -15.33     -5.168    
                      -13.04     -2.674     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.5260E-01-0.6513E-01  0.000    -0.1436    
                     -0.2152    -0.1491    -0.1676    -0.2011    -0.6971E-02

                     -0.7162     -2.776      1.382     0.2060     0.3354E-01
                      0.8047E-01-0.3013E-01-0.1180    -0.3790E-01-0.6157E-01
                     -0.8409E-01 0.8306E-01-0.2354     -3.105      1.382    

                      -1.360     -1.709      3486.      2381.      0.000    
                       0.000      9.146      8.465      0.000     0.1000    
                       1.232      1.232      9.146      8.904     -123.2    

                      0.1000      1.232      1.232      9.246      9.105    
                      -615.8     0.1000     0.4730     0.8922      9.346    
                       9.212      8007.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    214.76
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.263603E-10           251
loop is:       60
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.263603E-10           251
loop is:       61
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.527206E-11           261

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      261
neval,tstepnext:      260     261

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.691200     -0.369326     -0.194711E-11  0.194711E-11   204.446       204.446    
   2  0.347572      -1.05678     -0.557142E-11  0.557142E-11   209.163       209.163    
   3  0.554505     -0.589680     -0.310883E-11  0.310883E-11   210.275       210.275    
   4  0.745892     -0.293175     -0.154564E-11  0.154564E-11   212.314       212.314    
   5  0.638075     -0.449299     -0.236873E-11  0.236873E-11   212.788       212.788    
   6  0.137777      -1.98212     -0.104498E-10  0.104498E-10   212.820       212.820    
   7  0.862860     -0.147502     -0.777641E-12  0.777641E-12   213.829       213.829    
   8  0.840219     -0.174093     -0.917828E-12  0.917828E-12   216.230       216.230    
   9  0.243619      -1.41215     -0.744494E-11  0.744494E-11   216.880       216.880    
  10  0.976764     -0.235101E-01 -0.123947E-12  0.123947E-12   217.102       217.102    
  11  0.836081     -0.179030     -0.943859E-12  0.943859E-12   217.644       217.644    
  12  0.468746     -0.757693     -0.399460E-11  0.399460E-11   218.263       218.263    
  13  0.953072     -0.480653E-01 -0.253403E-12  0.253403E-12   218.364       218.364    
  14  0.573052     -0.556778     -0.293537E-11  0.293537E-11   218.532       218.532    
  15  0.595733     -0.517963     -0.273073E-11  0.273073E-11   218.573       218.573    
  16  0.760379     -0.273938     -0.144422E-11  0.144422E-11   218.696       218.696    
  17  0.736313     -0.306100     -0.161378E-11  0.161378E-11   219.138       219.138    
  18  0.401945     -0.911439     -0.480516E-11  0.480516E-11   219.565       219.565    
  19  0.249915      -1.38664     -0.731042E-11  0.731042E-11   219.730       219.730    
  20  0.792621     -0.232410     -0.122528E-11  0.122528E-11   220.127       220.127    
  21  0.227510E-02  -6.08573     -0.320843E-10  0.320843E-10   220.481       220.481    
  22  0.234934      -1.44845     -0.763632E-11  0.763632E-11   220.548       220.548    
  23  0.756687     -0.278806     -0.146988E-11  0.146988E-11   220.782       220.782    
  24  0.620033E-01  -2.78057     -0.146593E-10  0.146593E-10   221.103       221.103    
  25  0.675133     -0.392846     -0.207111E-11  0.207111E-11   221.131       221.131    
  26  0.948009     -0.533909E-01 -0.281480E-12  0.281480E-12   221.266       221.266    
  27  0.731377     -0.312826     -0.164924E-11  0.164924E-11   221.376       221.376    
  28  0.542670     -0.611254     -0.322257E-11  0.322257E-11   221.419       221.419    
  29  0.701353     -0.354744     -0.187023E-11  0.187023E-11   221.669       221.669    
  30  0.263452      -1.33388     -0.703232E-11  0.703232E-11   222.033       222.033    
  31  0.902232     -0.102884     -0.542408E-12  0.542408E-12   222.393       222.393    
  32  0.398551     -0.919921     -0.484988E-11  0.484988E-11   222.956       222.956    
  33  0.452929     -0.792021     -0.417558E-11  0.417558E-11   222.967       222.967    
  34  0.863380     -0.146900     -0.774467E-12  0.774467E-12   223.181       223.181    
  35  0.292101E-01  -3.53324     -0.186275E-10  0.186275E-10   223.198       223.198    
  36  0.161715      -1.82192     -0.960526E-11  0.960526E-11   223.370       223.370    
  37  0.603128     -0.505626     -0.266569E-11  0.266569E-11   223.611       223.611    
  38  0.567055     -0.567299     -0.299084E-11  0.299084E-11   223.636       223.636    
  39  0.941775     -0.599891E-01 -0.316266E-12  0.316266E-12   224.083       224.083    
  40  0.750264     -0.287330     -0.151482E-11  0.151482E-11   224.348       224.348    
  41  0.536020     -0.623583     -0.328757E-11  0.328757E-11   224.505       224.505    
  42  0.375048     -0.980701     -0.517032E-11  0.517032E-11   224.746       224.746    
  43  0.219099E-01  -3.82081     -0.201436E-10  0.201436E-10   225.528       225.528    
  44  0.686075     -0.376768     -0.198634E-11  0.198634E-11   225.699       225.699    
  45  0.239608      -1.42875     -0.753245E-11  0.753245E-11   225.717       225.717    
  46  0.639668     -0.446805     -0.235558E-11  0.235558E-11   225.836       225.836    
  47  0.994566     -0.544912E-02 -0.287281E-13  0.287281E-13   225.880       225.880    
  48  0.309690      -1.17218     -0.617982E-11  0.617982E-11   225.994       225.994    
  49  0.673095E-01  -2.69845     -0.142264E-10  0.142264E-10   226.038       226.038    
  50  0.514449     -0.664658     -0.350412E-11  0.350412E-11   226.038       226.038    
  51  0.363627E-01  -3.31421     -0.174727E-10  0.174727E-10   226.270       226.270    
  52  0.404174     -0.905910     -0.477601E-11  0.477601E-11   226.366       226.366    
  53  0.781667     -0.246326     -0.129865E-11  0.129865E-11   226.609       226.609    
  54  0.866971     -0.142749     -0.752582E-12  0.752582E-12   227.162       227.162    
  55  0.722478     -0.325069     -0.171378E-11  0.171378E-11   227.205       227.205    
  56  0.102429      -2.27858     -0.120128E-10  0.120128E-10   227.425       227.425    
  57  0.428939     -0.846440     -0.446248E-11  0.446248E-11   227.810       227.810    
  58  0.394716     -0.929589     -0.490085E-11  0.490085E-11   228.263       228.263    
  59  0.797656     -0.226078     -0.119190E-11  0.119190E-11   228.578       228.578    
  60  0.747609     -0.290875     -0.153351E-11  0.153351E-11   229.139       229.139    
  61  0.321225      -1.13561     -0.598702E-11  0.598702E-11   214.759       214.759    
loop,thermsimp(1:2)       61  0.194711E-11  0.557142E-11

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    262              229.47          0.80          0.46         20.33
Just calling func    0   0         23.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    263              216.10          0.77          0.47         20.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    216.10
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.527206E-11           261
loop is:       61
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.527206E-11           261
loop is:       62
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.105441E-11           271

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      262     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818855     -0.199848     -0.210722E-12  0.210722E-12   204.446       204.446    
   2  0.461702     -0.772835     -0.814887E-12  0.814887E-12   209.163       209.163    
   3  0.365313      -1.00700     -0.106179E-11  0.106179E-11   210.275       210.275    
   4  0.149954      -1.89743     -0.200067E-11  0.200067E-11   212.314       212.314    
   5  0.177255E-01  -4.03275     -0.425218E-11  0.425218E-11   212.788       212.788    
   6  0.925165     -0.777835E-01 -0.820158E-13  0.820158E-13   212.820       212.820    
   7  0.875078     -0.133442     -0.140703E-12  0.140703E-12   213.829       213.829    
   8  0.767847E-01  -2.56675     -0.270641E-11  0.270641E-11   214.759       214.759    
   9  0.502463     -0.688234     -0.725682E-12  0.725682E-12   216.230       216.230    
  10  0.974802E-01  -2.32811     -0.245478E-11  0.245478E-11   216.880       216.880    
  11  0.194250      -1.63861     -0.172777E-11  0.172777E-11   217.102       217.102    
  12  0.683033     -0.381212     -0.401955E-12  0.401955E-12   217.644       217.644    
  13  0.473365     -0.747889     -0.788583E-12  0.788583E-12   218.263       218.263    
  14  0.369022     -0.996899     -0.105114E-11  0.105114E-11   218.364       218.364    
  15  0.301984      -1.19738     -0.126253E-11  0.126253E-11   218.532       218.532    
  16  0.211120      -1.55533     -0.163996E-11  0.163996E-11   218.573       218.573    
  17  0.564408     -0.571978     -0.603100E-12  0.603100E-12   218.696       218.696    
  18  0.702192     -0.353549     -0.372786E-12  0.372786E-12   219.138       219.138    
  19  0.543109     -0.610445     -0.643661E-12  0.643661E-12   219.565       219.565    
  20  0.735809     -0.306784     -0.323477E-12  0.323477E-12   219.730       219.730    
  21  0.974545     -0.257848E-01 -0.271878E-13  0.271878E-13   220.127       220.127    
  22  0.984956     -0.151582E-01 -0.159829E-13  0.159829E-13   220.481       220.481    
  23  0.421423     -0.864118     -0.911136E-12  0.911136E-12   220.548       220.548    
  24  0.787019     -0.239503     -0.252534E-12  0.252534E-12   220.782       220.782    
  25  0.656415     -0.420962     -0.443867E-12  0.443867E-12   221.103       221.103    
  26  0.662574     -0.411623     -0.434020E-12  0.434020E-12   221.131       221.131    
  27  0.221043      -1.50940     -0.159153E-11  0.159153E-11   221.266       221.266    
  28  0.173317E-01  -4.05522     -0.427587E-11  0.427587E-11   221.376       221.376    
  29  0.734476     -0.308598     -0.325389E-12  0.325389E-12   221.419       221.419    
  30  0.184104      -1.69225     -0.178433E-11  0.178433E-11   221.669       221.669    
  31  0.362257      -1.01540     -0.107065E-11  0.107065E-11   222.033       222.033    
  32  0.495805     -0.701573     -0.739747E-12  0.739747E-12   222.393       222.393    
  33  0.943993     -0.576368E-01 -0.607729E-13  0.607729E-13   222.956       222.956    
  34  0.390395     -0.940596     -0.991776E-12  0.991776E-12   222.967       222.967    
  35  0.627153     -0.466565     -0.491952E-12  0.491952E-12   223.181       223.181    
  36  0.687721     -0.374372     -0.394742E-12  0.394742E-12   223.198       223.198    
  37  0.395512     -0.927574     -0.978045E-12  0.978045E-12   223.370       223.370    
  38  0.180043      -1.71456     -0.180785E-11  0.180785E-11   223.611       223.611    
  39  0.932850E-02  -4.67468     -0.492904E-11  0.492904E-11   223.636       223.636    
  40  0.628229     -0.464851     -0.490144E-12  0.490144E-12   224.083       224.083    
  41  0.172687      -1.75628     -0.185184E-11  0.185184E-11   224.348       224.348    
  42  0.301486      -1.19903     -0.126427E-11  0.126427E-11   224.505       224.505    
  43  0.581039     -0.542938     -0.572480E-12  0.572480E-12   224.746       224.746    
  44  0.941519     -0.602611E-01 -0.635401E-13  0.635401E-13   225.528       225.528    
  45  0.306203      -1.18351     -0.124790E-11  0.124790E-11   225.699       225.699    
  46  0.842415     -0.171482     -0.180813E-12  0.180813E-12   225.717       225.717    
  47  0.563339     -0.573873     -0.605099E-12  0.605099E-12   225.836       225.836    
  48  0.706515     -0.347410     -0.366314E-12  0.366314E-12   225.880       225.880    
  49  0.869582     -0.139742     -0.147346E-12  0.147346E-12   225.994       225.994    
  50  0.653799     -0.424956     -0.448078E-12  0.448078E-12   226.038       226.038    
  51  0.718217     -0.330984     -0.348993E-12  0.348993E-12   226.038       226.038    
  52  0.174803      -1.74409     -0.183899E-11  0.183899E-11   226.270       226.270    
  53  0.997065E-01  -2.30552     -0.243097E-11  0.243097E-11   226.366       226.366    
  54  0.332740      -1.10039     -0.116027E-11  0.116027E-11   226.609       226.609    
  55  0.754861     -0.281222     -0.296524E-12  0.296524E-12   227.162       227.162    
  56  0.237020      -1.43961     -0.151794E-11  0.151794E-11   227.205       227.205    
  57  0.985761     -0.143415E-01 -0.151219E-13  0.151219E-13   227.425       227.425    
  58  0.426936     -0.851122     -0.897433E-12  0.897433E-12   227.810       227.810    
  59  0.468722E-01  -3.06033     -0.322685E-11  0.322685E-11   228.263       228.263    
  60  0.934167     -0.680999E-01 -0.718053E-13  0.718053E-13   228.578       228.578    
  61  0.904933     -0.998948E-01 -0.105330E-12  0.105330E-12   216.105       216.105    
loop,thermsimp(1:2)       62  0.210722E-12  0.814887E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    264              215.16          0.79          0.46         20.36
Just calling func    0   0         23.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    215.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       62
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       63
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      263     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134     -0.843235E-01 -0.889117E-13  0.889117E-13   204.446       204.446    
   2  0.806390     -0.215187     -0.226896E-12  0.226896E-12   209.163       209.163    
   3  0.887158     -0.119732     -0.126246E-12  0.126246E-12   210.275       210.275    
   4  0.876935     -0.131323     -0.138468E-12  0.138468E-12   212.314       212.314    
   5  0.537210     -0.621367     -0.655177E-12  0.655177E-12   212.788       212.788    
   6  0.877090     -0.131145     -0.138281E-12  0.138281E-12   212.820       212.820    
   7  0.185190      -1.68637     -0.177813E-11  0.177813E-11   213.829       213.829    
   8  0.235364      -1.44662     -0.152534E-11  0.152534E-11   214.759       214.759    
   9  0.941219     -0.605797E-01 -0.638760E-13  0.638760E-13   216.105       216.105    
  10  0.297254      -1.21317     -0.127918E-11  0.127918E-11   216.230       216.230    
  11  0.614978     -0.486169     -0.512622E-12  0.512622E-12   216.880       216.880    
  12  0.659901     -0.415665     -0.438282E-12  0.438282E-12   217.102       217.102    
  13  0.741845     -0.298615     -0.314863E-12  0.314863E-12   217.644       217.644    
  14  0.247629      -1.39582     -0.147177E-11  0.147177E-11   218.263       218.263    
  15  0.318328      -1.14467     -0.120696E-11  0.120696E-11   218.364       218.364    
  16  0.328897      -1.11201     -0.117252E-11  0.117252E-11   218.532       218.532    
  17  0.356713      -1.03082     -0.108691E-11  0.108691E-11   218.573       218.573    
  18  0.559005     -0.581597     -0.613243E-12  0.613243E-12   218.696       218.696    
  19  0.793456     -0.231357     -0.243946E-12  0.243946E-12   219.138       219.138    
  20  0.646581     -0.436056     -0.459783E-12  0.459783E-12   219.565       219.565    
  21  0.271006      -1.30561     -0.137665E-11  0.137665E-11   219.730       219.730    
  22  0.662259     -0.412098     -0.434521E-12  0.434521E-12   220.127       220.127    
  23  0.732452     -0.311358     -0.328299E-12  0.328299E-12   220.481       220.481    
  24  0.485036     -0.723533     -0.762902E-12  0.762902E-12   220.548       220.548    
  25  0.888303E-01  -2.42103     -0.255276E-11  0.255276E-11   220.782       220.782    
  26  0.330575      -1.10692     -0.116715E-11  0.116715E-11   221.103       221.103    
  27  0.985376     -0.147322E-01 -0.155338E-13  0.155338E-13   221.131       221.131    
  28  0.103613      -2.26709     -0.239045E-11  0.239045E-11   221.266       221.266    
  29  0.979769     -0.204384E-01 -0.215505E-13  0.215505E-13   221.376       221.376    
  30  0.711358     -0.340579     -0.359111E-12  0.359111E-12   221.419       221.419    
  31  0.476344     -0.741615     -0.781968E-12  0.781968E-12   221.669       221.669    
  32  0.713503     -0.337568     -0.355936E-12  0.355936E-12   222.033       222.033    
  33  0.858234     -0.152879     -0.161197E-12  0.161197E-12   222.393       222.393    
  34  0.763219     -0.270210     -0.284912E-12  0.284912E-12   222.956       222.956    
  35  0.279773      -1.27378     -0.134309E-11  0.134309E-11   222.967       222.967    
  36  0.214949      -1.53735     -0.162100E-11  0.162100E-11   223.181       223.181    
  37  0.179100      -1.71981     -0.181339E-11  0.181339E-11   223.198       223.198    
  38  0.739196     -0.302193     -0.318635E-12  0.318635E-12   223.370       223.370    
  39  0.221214      -1.50862     -0.159071E-11  0.159071E-11   223.611       223.611    
  40  0.486570     -0.720375     -0.759572E-12  0.759572E-12   223.636       223.636    
  41  0.931298     -0.711756E-01 -0.750484E-13  0.750484E-13   224.083       224.083    
  42  0.384548     -0.955686     -0.100769E-11  0.100769E-11   224.348       224.348    
  43  0.929448     -0.731640E-01 -0.771450E-13  0.771450E-13   224.505       224.505    
  44  0.750186     -0.287435     -0.303074E-12  0.303074E-12   224.746       224.746    
  45  0.250177      -1.38559     -0.146098E-11  0.146098E-11   225.528       225.528    
  46  0.461530     -0.773208     -0.815279E-12  0.815279E-12   225.699       225.699    
  47  0.923518     -0.795653E-01 -0.838946E-13  0.838946E-13   225.717       225.717    
  48  0.440516     -0.819809     -0.864416E-12  0.864416E-12   225.836       225.836    
  49  0.806388     -0.215190     -0.226899E-12  0.226899E-12   225.880       225.880    
  50  0.465528     -0.764584     -0.806187E-12  0.806187E-12   225.994       225.994    
  51  0.272837      -1.29888     -0.136956E-11  0.136956E-11   226.038       226.038    
  52  0.732457     -0.311351     -0.328292E-12  0.328292E-12   226.038       226.038    
  53  0.110782      -2.20019     -0.231990E-11  0.231990E-11   226.270       226.270    
  54  0.749498     -0.288352     -0.304042E-12  0.304042E-12   226.366       226.366    
  55  0.512666     -0.668131     -0.704485E-12  0.704485E-12   226.609       226.609    
  56  0.837759     -0.177024     -0.186657E-12  0.186657E-12   227.162       227.162    
  57  0.833676     -0.181911     -0.191809E-12  0.191809E-12   227.205       227.205    
  58  0.544992     -0.606984     -0.640011E-12  0.640011E-12   227.425       227.425    
  59  0.280759      -1.27026     -0.133937E-11  0.133937E-11   227.810       227.810    
  60  0.856455     -0.154954     -0.163385E-12  0.163385E-12   228.263       228.263    
  61  0.989643     -0.104109E-01 -0.109774E-13  0.109774E-13   215.164       215.164    
loop,thermsimp(1:2)       63  0.889117E-13  0.226896E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    265              215.70          0.80          0.46         20.28
Just calling func    0   0         23.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    215.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       63
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       64
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      264     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.112882      -2.18141     -0.230011E-11  0.230011E-11   204.446       204.446    
   2  0.951717     -0.494875E-01 -0.521803E-13  0.521803E-13   209.163       209.163    
   3  0.697059     -0.360886     -0.380522E-12  0.380522E-12   210.275       210.275    
   4  0.128581      -2.05120     -0.216281E-11  0.216281E-11   212.314       212.314    
   5  0.505674     -0.681862     -0.718964E-12  0.718964E-12   212.788       212.788    
   6  0.437264     -0.827217     -0.872228E-12  0.872228E-12   212.820       212.820    
   7  0.169074E-01  -4.08000     -0.430201E-11  0.430201E-11   213.829       213.829    
   8  0.271524      -1.30371     -0.137464E-11  0.137464E-11   214.759       214.759    
   9  0.303579      -1.19211     -0.125698E-11  0.125698E-11   215.164       215.164    
  10  0.864212     -0.145937     -0.153877E-12  0.153877E-12   216.105       216.105    
  11  0.885526     -0.121573     -0.128188E-12  0.128188E-12   216.230       216.230    
  12  0.874960     -0.133577     -0.140845E-12  0.140845E-12   216.880       216.880    
  13  0.252551      -1.37614     -0.145102E-11  0.145102E-11   217.102       217.102    
  14  0.971332     -0.290866E-01 -0.306692E-13  0.306692E-13   217.644       217.644    
  15  0.248885      -1.39077     -0.146644E-11  0.146644E-11   218.263       218.263    
  16  0.174880      -1.74365     -0.183853E-11  0.183853E-11   218.364       218.364    
  17  0.936752     -0.653364E-01 -0.688915E-13  0.688915E-13   218.532       218.532    
  18  0.735180     -0.307640     -0.324379E-12  0.324379E-12   218.573       218.573    
  19  0.628220     -0.464865     -0.490159E-12  0.490159E-12   218.696       218.696    
  20  0.229122      -1.47350     -0.155368E-11  0.155368E-11   219.138       219.138    
  21  0.210657      -1.55753     -0.164227E-11  0.164227E-11   219.565       219.565    
  22  0.919727     -0.836782E-01 -0.882313E-13  0.882313E-13   219.730       219.730    
  23  0.936665     -0.654300E-01 -0.689902E-13  0.689902E-13   220.127       220.127    
  24  0.180666      -1.71111     -0.180421E-11  0.180421E-11   220.481       220.481    
  25  0.663346E-01  -2.71304     -0.286067E-11  0.286067E-11   220.548       220.548    
  26  0.362485      -1.01477     -0.106999E-11  0.106999E-11   220.782       220.782    
  27  0.930516E-01  -2.37460     -0.250381E-11  0.250381E-11   221.103       221.103    
  28  0.509744E-01  -2.97643     -0.313839E-11  0.313839E-11   221.131       221.131    
  29  0.541677     -0.613085     -0.646444E-12  0.646444E-12   221.266       221.266    
  30  0.866427     -0.143377     -0.151179E-12  0.151179E-12   221.376       221.376    
  31  0.113906E-01  -4.47497     -0.471846E-11  0.471846E-11   221.419       221.419    
  32  0.139537      -1.96943     -0.207659E-11  0.207659E-11   221.669       221.669    
  33  0.952541     -0.486222E-01 -0.512678E-13  0.512678E-13   222.033       222.033    
  34  0.572081     -0.558475     -0.588863E-12  0.588863E-12   222.393       222.393    
  35  0.126546      -2.06715     -0.217963E-11  0.217963E-11   222.956       222.956    
  36  0.627507     -0.466000     -0.491356E-12  0.491356E-12   222.967       222.967    
  37  0.836066     -0.179047     -0.188790E-12  0.188790E-12   223.181       223.181    
  38  0.685706     -0.377306     -0.397836E-12  0.397836E-12   223.198       223.198    
  39  0.801164     -0.221689     -0.233752E-12  0.233752E-12   223.370       223.370    
  40  0.431239     -0.841093     -0.886859E-12  0.886859E-12   223.611       223.611    
  41  0.809227     -0.211675     -0.223193E-12  0.223193E-12   223.636       223.636    
  42  0.522305     -0.649503     -0.684844E-12  0.684844E-12   224.083       224.083    
  43  0.710764E-03  -7.24917     -0.764361E-11  0.764361E-11   224.348       224.348    
  44  0.866199     -0.143641     -0.151456E-12  0.151456E-12   224.505       224.505    
  45  0.856579     -0.154809     -0.163232E-12  0.163232E-12   224.746       224.746    
  46  0.630869     -0.460657     -0.485722E-12  0.485722E-12   225.528       225.528    
  47  0.275611      -1.28877     -0.135889E-11  0.135889E-11   225.699       225.699    
  48  0.358195      -1.02668     -0.108254E-11  0.108254E-11   225.717       225.717    
  49  0.506528     -0.680175     -0.717185E-12  0.717185E-12   225.836       225.836    
  50  0.126758      -2.06547     -0.217786E-11  0.217786E-11   225.880       225.880    
  51  0.520744     -0.652498     -0.688001E-12  0.688001E-12   225.994       225.994    
  52  0.490974     -0.711364     -0.750071E-12  0.750071E-12   226.038       226.038    
  53  0.169205      -1.77665     -0.187332E-11  0.187332E-11   226.038       226.038    
  54  0.488621     -0.716167     -0.755135E-12  0.755135E-12   226.270       226.270    
  55  0.756993     -0.278401     -0.293550E-12  0.293550E-12   226.366       226.366    
  56  0.162232      -1.81873     -0.191769E-11  0.191769E-11   226.609       226.609    
  57  0.461154     -0.774023     -0.816139E-12  0.816139E-12   227.162       227.162    
  58  0.470698     -0.753538     -0.794539E-12  0.794539E-12   227.205       227.205    
  59  0.263971      -1.33192     -0.140439E-11  0.140439E-11   227.425       227.425    
  60  0.962850     -0.378581E-01 -0.399181E-13  0.399181E-13   227.810       227.810    
  61  0.369019     -0.996906     -0.105115E-11  0.105115E-11   215.701       215.701    
loop,thermsimp(1:2)       64  0.230011E-11  0.521803E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    266              220.58          0.80          0.47         20.39
Just calling func    0   0         23.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    220.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       64
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       65
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      265     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.435376     -0.831545     -0.876791E-12  0.876791E-12   204.446       204.446    
   2  0.695352     -0.363337     -0.383106E-12  0.383106E-12   209.163       209.163    
   3  0.967309     -0.332368E-01 -0.350453E-13  0.350453E-13   210.275       210.275    
   4  0.890139     -0.116377     -0.122709E-12  0.122709E-12   212.314       212.314    
   5  0.466646     -0.762185     -0.803657E-12  0.803657E-12   212.788       212.788    
   6  0.753333     -0.283248     -0.298660E-12  0.298660E-12   212.820       212.820    
   7  0.562575     -0.575231     -0.606531E-12  0.606531E-12   213.829       213.829    
   8  0.793420     -0.231403     -0.243994E-12  0.243994E-12   214.759       214.759    
   9  0.308342      -1.17655     -0.124056E-11  0.124056E-11   215.164       215.164    
  10  0.856058     -0.155417     -0.163873E-12  0.163873E-12   215.701       215.701    
  11  0.300310      -1.20294     -0.126839E-11  0.126839E-11   216.105       216.105    
  12  0.742833     -0.297283     -0.313459E-12  0.313459E-12   216.230       216.230    
  13  0.528457E-02  -5.24296     -0.552824E-11  0.552824E-11   216.880       216.880    
  14  0.375106     -0.980547     -0.103390E-11  0.103390E-11   217.102       217.102    
  15  0.341929      -1.07315     -0.113155E-11  0.113155E-11   217.644       217.644    
  16  0.861199     -0.149429     -0.157560E-12  0.157560E-12   218.263       218.263    
  17  0.850476     -0.161960     -0.170772E-12  0.170772E-12   218.364       218.364    
  18  0.828713     -0.187881     -0.198104E-12  0.198104E-12   218.532       218.532    
  19  0.584287     -0.537363     -0.566602E-12  0.566602E-12   218.573       218.573    
  20  0.788066     -0.238173     -0.251132E-12  0.251132E-12   218.696       218.696    
  21  0.305108E-01  -3.48967     -0.367955E-11  0.367955E-11   219.138       219.138    
  22  0.926607     -0.762254E-01 -0.803730E-13  0.803730E-13   219.565       219.565    
  23  0.385575     -0.953020     -0.100488E-11  0.100488E-11   219.730       219.730    
  24  0.425736     -0.853936     -0.900400E-12  0.900400E-12   220.127       220.127    
  25  0.427401     -0.850033     -0.896285E-12  0.896285E-12   220.481       220.481    
  26  0.504130     -0.684921     -0.722189E-12  0.722189E-12   220.548       220.548    
  27  0.666374     -0.405905     -0.427991E-12  0.427991E-12   220.782       220.782    
  28  0.209412      -1.56345     -0.164852E-11  0.164852E-11   221.103       221.103    
  29  0.703949     -0.351049     -0.370151E-12  0.370151E-12   221.131       221.131    
  30  0.662481E-01  -2.71435     -0.286204E-11  0.286204E-11   221.266       221.266    
  31  0.514210     -0.665124     -0.701314E-12  0.701314E-12   221.376       221.376    
  32  0.638175     -0.449143     -0.473582E-12  0.473582E-12   221.419       221.419    
  33  0.430822     -0.842060     -0.887878E-12  0.887878E-12   221.669       221.669    
  34  0.137484E-01  -4.28683     -0.452009E-11  0.452009E-11   222.033       222.033    
  35  0.343922      -1.06734     -0.112542E-11  0.112542E-11   222.393       222.393    
  36  0.417809     -0.872731     -0.920218E-12  0.920218E-12   222.956       222.956    
  37  0.876169E-01  -2.43478     -0.256726E-11  0.256726E-11   222.967       222.967    
  38  0.502240     -0.688676     -0.726149E-12  0.726149E-12   223.181       223.181    
  39  0.500659     -0.691830     -0.729474E-12  0.729474E-12   223.198       223.198    
  40  0.469651     -0.755765     -0.796887E-12  0.796887E-12   223.370       223.370    
  41  0.475355     -0.743693     -0.784159E-12  0.784159E-12   223.611       223.611    
  42  0.874391     -0.134227     -0.141531E-12  0.141531E-12   223.636       223.636    
  43  0.257190E-01  -3.66053     -0.385970E-11  0.385970E-11   224.083       224.083    
  44  0.413215     -0.883788     -0.931876E-12  0.931876E-12   224.348       224.348    
  45  0.259499      -1.34900     -0.142241E-11  0.142241E-11   224.505       224.505    
  46  0.203231E-01  -3.89600     -0.410799E-11  0.410799E-11   224.746       224.746    
  47  0.798370     -0.225184     -0.237436E-12  0.237436E-12   225.528       225.528    
  48  0.389454     -0.943010     -0.994321E-12  0.994321E-12   225.699       225.699    
  49  0.363287      -1.01256     -0.106766E-11  0.106766E-11   225.717       225.717    
  50  0.946577     -0.549030E-01 -0.578904E-13  0.578904E-13   225.836       225.836    
  51  0.187405      -1.67448     -0.176560E-11  0.176560E-11   225.880       225.880    
  52  0.864265     -0.145876     -0.153814E-12  0.153814E-12   225.994       225.994    
  53  0.299525      -1.20556     -0.127116E-11  0.127116E-11   226.038       226.038    
  54  0.976132     -0.241577E-01 -0.254721E-13  0.254721E-13   226.038       226.038    
  55  0.760198     -0.274176     -0.289094E-12  0.289094E-12   226.270       226.270    
  56  0.193126      -1.64441     -0.173389E-11  0.173389E-11   226.366       226.366    
  57  0.473091E-01  -3.05105     -0.321707E-11  0.321707E-11   226.609       226.609    
  58  0.711516     -0.340358     -0.358877E-12  0.358877E-12   227.162       227.162    
  59  0.505845     -0.681526     -0.718609E-12  0.718609E-12   227.205       227.205    
  60  0.281343      -1.26818     -0.133719E-11  0.133719E-11   227.425       227.425    
  61  0.711469     -0.340423     -0.358946E-12  0.358946E-12   220.576       220.576    
loop,thermsimp(1:2)       65  0.876791E-12  0.383106E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    267              215.97          0.80          0.47         20.37
Just calling func    0   0         23.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    215.97
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       65
neval is:      266
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       66
neval is:      266


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      266     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167879      -1.78451     -0.188161E-11  0.188161E-11   204.446       204.446    
   2  0.561431     -0.577266     -0.608676E-12  0.608676E-12   209.163       209.163    
   3  0.831978     -0.183949     -0.193958E-12  0.193958E-12   210.275       210.275    
   4  0.633279     -0.456845     -0.481703E-12  0.481703E-12   212.314       212.314    
   5  0.362944      -1.01351     -0.106865E-11  0.106865E-11   212.788       212.788    
   6  0.180052      -1.71451     -0.180780E-11  0.180780E-11   212.820       212.820    
   7  0.589271     -0.528869     -0.557646E-12  0.557646E-12   213.829       213.829    
   8  0.948423     -0.529547E-01 -0.558361E-13  0.558361E-13   214.759       214.759    
   9  0.127240      -2.06168     -0.217386E-11  0.217386E-11   215.164       215.164    
  10  0.857967     -0.153190     -0.161525E-12  0.161525E-12   215.701       215.701    
  11  0.964622     -0.360194E-01 -0.379792E-13  0.379792E-13   216.105       216.105    
  12  0.601085     -0.509019     -0.536716E-12  0.536716E-12   216.230       216.230    
  13  0.103193      -2.27115     -0.239473E-11  0.239473E-11   216.880       216.880    
  14  0.553686     -0.591158     -0.623324E-12  0.623324E-12   217.102       217.102    
  15  0.918213E-01  -2.38791     -0.251784E-11  0.251784E-11   217.644       217.644    
  16  0.148169      -1.90940     -0.201330E-11  0.201330E-11   218.263       218.263    
  17  0.635810     -0.452856     -0.477497E-12  0.477497E-12   218.364       218.364    
  18  0.426065     -0.853163     -0.899585E-12  0.899585E-12   218.532       218.532    
  19  0.550515     -0.596902     -0.629380E-12  0.629380E-12   218.573       218.573    
  20  0.871117     -0.137979     -0.145487E-12  0.145487E-12   218.696       218.696    
  21  0.589491     -0.528496     -0.557253E-12  0.557253E-12   219.138       219.138    
  22  0.226431      -1.48531     -0.156613E-11  0.156613E-11   219.565       219.565    
  23  0.456277     -0.784655     -0.827350E-12  0.827350E-12   219.730       219.730    
  24  0.190901      -1.65600     -0.174611E-11  0.174611E-11   220.127       220.127    
  25  0.299583      -1.20537     -0.127095E-11  0.127095E-11   220.481       220.481    
  26  0.593932     -0.520991     -0.549339E-12  0.549339E-12   220.548       220.548    
  27  0.716314     -0.333637     -0.351790E-12  0.351790E-12   220.576       220.576    
  28  0.731483     -0.312681     -0.329695E-12  0.329695E-12   220.782       220.782    
  29  0.808087     -0.213086     -0.224680E-12  0.224680E-12   221.103       221.103    
  30  0.204768      -1.58588     -0.167217E-11  0.167217E-11   221.131       221.131    
  31  0.565269     -0.570453     -0.601493E-12  0.601493E-12   221.266       221.266    
  32  0.895829     -0.110006     -0.115991E-12  0.115991E-12   221.376       221.376    
  33  0.322561      -1.13146     -0.119303E-11  0.119303E-11   221.419       221.419    
  34  0.392996E-02  -5.53913     -0.584052E-11  0.584052E-11   221.669       221.669    
  35  0.161254      -1.82478     -0.192406E-11  0.192406E-11   222.033       222.033    
  36  0.293203      -1.22689     -0.129365E-11  0.129365E-11   222.393       222.393    
  37  0.681789     -0.383035     -0.403877E-12  0.403877E-12   222.956       222.956    
  38  0.370775     -0.992160     -0.104615E-11  0.104615E-11   222.967       222.967    
  39  0.856915     -0.154417     -0.162819E-12  0.162819E-12   223.181       223.181    
  40  0.695571     -0.363022     -0.382775E-12  0.382775E-12   223.198       223.198    
  41  0.551389     -0.595314     -0.627706E-12  0.627706E-12   223.370       223.370    
  42  0.421156     -0.864752     -0.911805E-12  0.911805E-12   223.611       223.611    
  43  0.137568      -1.98364     -0.209157E-11  0.209157E-11   223.636       223.636    
  44  0.379314     -0.969390     -0.102214E-11  0.102214E-11   224.083       224.083    
  45  0.871741     -0.137263     -0.144731E-12  0.144731E-12   224.348       224.348    
  46  0.604178     -0.503887     -0.531305E-12  0.531305E-12   224.505       224.505    
  47  0.356152      -1.03240     -0.108857E-11  0.108857E-11   224.746       224.746    
  48  0.726462     -0.319568     -0.336957E-12  0.336957E-12   225.528       225.528    
  49  0.269739      -1.31030     -0.138160E-11  0.138160E-11   225.699       225.699    
  50  0.365049      -1.00772     -0.106256E-11  0.106256E-11   225.717       225.717    
  51  0.875054     -0.133470     -0.140732E-12  0.140732E-12   225.836       225.836    
  52  0.823334     -0.194393     -0.204970E-12  0.204970E-12   225.880       225.880    
  53  0.662002     -0.412487     -0.434931E-12  0.434931E-12   225.994       225.994    
  54  0.676020     -0.391532     -0.412836E-12  0.412836E-12   226.038       226.038    
  55  0.752333E-01  -2.58716     -0.272793E-11  0.272793E-11   226.038       226.038    
  56  0.717744     -0.331642     -0.349687E-12  0.349687E-12   226.270       226.270    
  57  0.609213E-01  -2.79817     -0.295043E-11  0.295043E-11   226.366       226.366    
  58  0.311839      -1.16527     -0.122867E-11  0.122867E-11   226.609       226.609    
  59  0.772378     -0.258282     -0.272335E-12  0.272335E-12   227.162       227.162    
  60  0.606698     -0.499724     -0.526915E-12  0.526915E-12   227.205       227.205    
  61  0.675226     -0.392708     -0.414075E-12  0.414075E-12   215.969       215.969    
loop,thermsimp(1:2)       66  0.188161E-11  0.608676E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    268              215.65          0.80          0.47         20.31
Just calling func    0   0         23.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    215.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       66
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       67
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      267     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.934372     -0.678811E-01 -0.715747E-13  0.715747E-13   204.446       204.446    
   2  0.325897E-01  -3.42376     -0.361005E-11  0.361005E-11   209.163       209.163    
   3  0.315552E-01  -3.45602     -0.364407E-11  0.364407E-11   210.275       210.275    
   4  0.804299     -0.217784     -0.229634E-12  0.229634E-12   212.314       212.314    
   5  0.420619E-01  -3.16861     -0.334102E-11  0.334102E-11   212.788       212.788    
   6  0.467389     -0.760593     -0.801978E-12  0.801978E-12   212.820       212.820    
   7  0.163346      -1.81189     -0.191047E-11  0.191047E-11   213.829       213.829    
   8  0.190182      -1.65977     -0.175008E-11  0.175008E-11   214.759       214.759    
   9  0.460789     -0.774815     -0.816974E-12  0.816974E-12   215.164       215.164    
  10  0.686237     -0.376533     -0.397021E-12  0.397021E-12   215.701       215.701    
  11  0.584193     -0.537523     -0.566771E-12  0.566771E-12   215.969       215.969    
  12  0.418667     -0.870680     -0.918056E-12  0.918056E-12   216.105       216.105    
  13  0.900886     -0.104377     -0.110056E-12  0.110056E-12   216.230       216.230    
  14  0.229084      -1.47366     -0.155385E-11  0.155385E-11   216.880       216.880    
  15  0.206095      -1.57942     -0.166536E-11  0.166536E-11   217.102       217.102    
  16  0.360344      -1.02069     -0.107623E-11  0.107623E-11   217.644       217.644    
  17  0.592719     -0.523036     -0.551495E-12  0.551495E-12   218.263       218.263    
  18  0.830869     -0.185283     -0.195365E-12  0.195365E-12   218.364       218.364    
  19  0.555035     -0.588724     -0.620758E-12  0.620758E-12   218.532       218.532    
  20  0.300702      -1.20164     -0.126702E-11  0.126702E-11   218.573       218.573    
  21  0.426090     -0.853105     -0.899524E-12  0.899524E-12   218.696       218.696    
  22  0.404770     -0.904436     -0.953648E-12  0.953648E-12   219.138       219.138    
  23  0.670611     -0.399567     -0.421308E-12  0.421308E-12   219.565       219.565    
  24  0.697996     -0.359542     -0.379106E-12  0.379106E-12   219.730       219.730    
  25  0.961800     -0.389484E-01 -0.410677E-13  0.410677E-13   220.127       220.127    
  26  0.687077     -0.375310     -0.395731E-12  0.395731E-12   220.481       220.481    
  27  0.962486     -0.382357E-01 -0.403162E-13  0.403162E-13   220.548       220.548    
  28  0.715290     -0.335068     -0.353299E-12  0.353299E-12   220.576       220.576    
  29  0.218066      -1.52296     -0.160582E-11  0.160582E-11   220.782       220.782    
  30  0.183123      -1.69760     -0.178997E-11  0.178997E-11   221.103       221.103    
  31  0.579143E-01  -2.84879     -0.300380E-11  0.300380E-11   221.131       221.131    
  32  0.796051     -0.228092     -0.240503E-12  0.240503E-12   221.266       221.266    
  33  0.415959     -0.877170     -0.924898E-12  0.924898E-12   221.376       221.376    
  34  0.800513     -0.222502     -0.234609E-12  0.234609E-12   221.419       221.419    
  35  0.177682      -1.72776     -0.182177E-11  0.182177E-11   221.669       221.669    
  36  0.831005     -0.185119     -0.195192E-12  0.195192E-12   222.033       222.033    
  37  0.643946     -0.440141     -0.464090E-12  0.464090E-12   222.393       222.393    
  38  0.294474      -1.22256     -0.128909E-11  0.128909E-11   222.956       222.956    
  39  0.876424     -0.131905     -0.139082E-12  0.139082E-12   222.967       222.967    
  40  0.347834      -1.05603     -0.111349E-11  0.111349E-11   223.181       223.181    
  41  0.546430     -0.604349     -0.637232E-12  0.637232E-12   223.198       223.198    
  42  0.848204     -0.164634     -0.173592E-12  0.173592E-12   223.370       223.370    
  43  0.663676     -0.409961     -0.432268E-12  0.432268E-12   223.611       223.611    
  44  0.945754     -0.557726E-01 -0.588073E-13  0.588073E-13   223.636       223.636    
  45  0.345306      -1.06332     -0.112118E-11  0.112118E-11   224.083       224.083    
  46  0.928041     -0.746797E-01 -0.787431E-13  0.787431E-13   224.348       224.348    
  47  0.519730     -0.654447     -0.690056E-12  0.690056E-12   224.505       224.505    
  48  0.624257     -0.471193     -0.496832E-12  0.496832E-12   224.746       224.746    
  49  0.161049      -1.82605     -0.192541E-11  0.192541E-11   225.528       225.528    
  50  0.991435     -0.860175E-02 -0.906979E-14  0.906979E-14   225.699       225.699    
  51  0.167929      -1.78422     -0.188130E-11  0.188130E-11   225.717       225.717    
  52  0.362199      -1.01556     -0.107082E-11  0.107082E-11   225.836       225.836    
  53  0.408637     -0.894927     -0.943622E-12  0.943622E-12   225.880       225.880    
  54  0.312965      -1.16166     -0.122487E-11  0.122487E-11   225.994       225.994    
  55  0.406022     -0.901348     -0.950392E-12  0.950392E-12   226.038       226.038    
  56  0.111362      -2.19497     -0.231440E-11  0.231440E-11   226.038       226.038    
  57  0.800205     -0.222888     -0.235016E-12  0.235016E-12   226.270       226.270    
  58  0.715426     -0.334877     -0.353098E-12  0.353098E-12   226.366       226.366    
  59  0.611621     -0.491642     -0.518394E-12  0.518394E-12   226.609       226.609    
  60  0.631714     -0.459319     -0.484311E-12  0.484311E-12   227.162       227.162    
  61  0.416142     -0.876729     -0.924433E-12  0.924433E-12   215.655       215.655    
loop,thermsimp(1:2)       67  0.715747E-13  0.361005E-11

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    269              214.41          0.80          0.47         20.35
Just calling func    0   0         23.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    214.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       67
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       68
neval is:      268


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      268     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.784281     -0.242988     -0.256209E-12  0.256209E-12   204.446       204.446    
   2  0.192935      -1.64540     -0.173493E-11  0.173493E-11   209.163       209.163    
   3  0.155969      -1.85810     -0.195920E-11  0.195920E-11   210.275       210.275    
   4  0.958837     -0.420343E-01 -0.443214E-13  0.443214E-13   212.314       212.314    
   5  0.880055     -0.127771     -0.134723E-12  0.134723E-12   212.788       212.788    
   6  0.646534     -0.436129     -0.459860E-12  0.459860E-12   212.820       212.820    
   7  0.327224      -1.11711     -0.117789E-11  0.117789E-11   213.829       213.829    
   8  0.184008      -1.69278     -0.178488E-11  0.178488E-11   214.759       214.759    
   9  0.703695     -0.351410     -0.370531E-12  0.370531E-12   215.164       215.164    
  10  0.168321      -1.78188     -0.187884E-11  0.187884E-11   215.655       215.655    
  11  0.977757     -0.224941E-01 -0.237180E-13  0.237180E-13   215.701       215.701    
  12  0.506381     -0.680467     -0.717492E-12  0.717492E-12   215.969       215.969    
  13  0.857088     -0.154214     -0.162605E-12  0.162605E-12   216.105       216.105    
  14  0.666638     -0.405509     -0.427573E-12  0.427573E-12   216.230       216.230    
  15  0.657712     -0.418989     -0.441787E-12  0.441787E-12   216.880       216.880    
  16  0.334368      -1.09551     -0.115512E-11  0.115512E-11   217.102       217.102    
  17  0.941878     -0.598792E-01 -0.631373E-13  0.631373E-13   217.644       217.644    
  18  0.378227     -0.972260     -0.102516E-11  0.102516E-11   218.263       218.263    
  19  0.760833     -0.273342     -0.288215E-12  0.288215E-12   218.364       218.364    
  20  0.270485      -1.30754     -0.137869E-11  0.137869E-11   218.532       218.532    
  21  0.216853      -1.52854     -0.161171E-11  0.161171E-11   218.573       218.573    
  22  0.958987     -0.418776E-01 -0.441562E-13  0.441562E-13   218.696       218.696    
  23  0.674817     -0.393313     -0.414714E-12  0.414714E-12   219.138       219.138    
  24  0.805141     -0.216738     -0.228531E-12  0.228531E-12   219.565       219.565    
  25  0.470850     -0.753215     -0.794199E-12  0.794199E-12   219.730       219.730    
  26  0.666277     -0.406050     -0.428144E-12  0.428144E-12   220.127       220.127    
  27  0.669999     -0.400478     -0.422269E-12  0.422269E-12   220.481       220.481    
  28  0.676924     -0.390196     -0.411428E-12  0.411428E-12   220.548       220.548    
  29  0.983193     -0.169499E-01 -0.178721E-13  0.178721E-13   220.576       220.576    
  30  0.344596      -1.06538     -0.112335E-11  0.112335E-11   220.782       220.782    
  31  0.273424      -1.29673     -0.136729E-11  0.136729E-11   221.103       221.103    
  32  0.155255      -1.86268     -0.196404E-11  0.196404E-11   221.131       221.131    
  33  0.371888     -0.989161     -0.104298E-11  0.104298E-11   221.266       221.266    
  34  0.817951     -0.200952     -0.211887E-12  0.211887E-12   221.376       221.376    
  35  0.878320     -0.129745     -0.136804E-12  0.136804E-12   221.419       221.419    
  36  0.287685      -1.24589     -0.131368E-11  0.131368E-11   221.669       221.669    
  37  0.706633E-01  -2.64983     -0.279401E-11  0.279401E-11   222.033       222.033    
  38  0.198854      -1.61519     -0.170307E-11  0.170307E-11   222.393       222.393    
  39  0.492618     -0.708022     -0.746547E-12  0.746547E-12   222.956       222.956    
  40  0.158965      -1.83907     -0.193914E-11  0.193914E-11   222.967       222.967    
  41  0.497263E-01  -3.00122     -0.316452E-11  0.316452E-11   223.181       223.181    
  42  0.266009E-01  -3.62681     -0.382415E-11  0.382415E-11   223.198       223.198    
  43  0.143395      -1.94215     -0.204783E-11  0.204783E-11   223.370       223.370    
  44  0.832337     -0.183518     -0.193503E-12  0.193503E-12   223.611       223.611    
  45  0.647122     -0.435220     -0.458901E-12  0.458901E-12   223.636       223.636    
  46  0.235355      -1.44666     -0.152537E-11  0.152537E-11   224.083       224.083    
  47  0.756178     -0.279478     -0.294685E-12  0.294685E-12   224.348       224.348    
  48  0.659414     -0.416404     -0.439061E-12  0.439061E-12   224.505       224.505    
  49  0.153571      -1.87359     -0.197554E-11  0.197554E-11   224.746       224.746    
  50  0.853906     -0.157934     -0.166528E-12  0.166528E-12   225.528       225.528    
  51  0.846689     -0.166422     -0.175477E-12  0.175477E-12   225.699       225.699    
  52  0.188750      -1.66733     -0.175806E-11  0.175806E-11   225.717       225.717    
  53  0.720786     -0.327413     -0.345228E-12  0.345228E-12   225.836       225.836    
  54  0.242898      -1.41511     -0.149211E-11  0.149211E-11   225.880       225.880    
  55  0.352096      -1.04385     -0.110065E-11  0.110065E-11   225.994       225.994    
  56  0.828059     -0.188671     -0.198937E-12  0.198937E-12   226.038       226.038    
  57  0.803436     -0.218857     -0.230766E-12  0.230766E-12   226.038       226.038    
  58  0.194840      -1.63558     -0.172457E-11  0.172457E-11   226.270       226.270    
  59  0.509755     -0.673825     -0.710489E-12  0.710489E-12   226.366       226.366    
  60  0.430812     -0.842084     -0.887903E-12  0.887903E-12   226.609       226.609    
  61  0.836833     -0.178131     -0.187823E-12  0.187823E-12   214.409       214.409    
loop,thermsimp(1:2)       68  0.256209E-12  0.173493E-11

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    270              206.56          0.81          0.47         20.30
Just calling func    0   0         23.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    206.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       68
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       69
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      269     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.892307     -0.113945     -0.120145E-12  0.120145E-12   204.446       204.446    
   2  0.226267      -1.48604     -0.156690E-11  0.156690E-11   209.163       209.163    
   3  0.821258     -0.196918     -0.207633E-12  0.207633E-12   210.275       210.275    
   4  0.246085      -1.40208     -0.147837E-11  0.147837E-11   212.314       212.314    
   5  0.298460      -1.20912     -0.127491E-11  0.127491E-11   212.788       212.788    
   6  0.717652     -0.331770     -0.349822E-12  0.349822E-12   212.820       212.820    
   7  0.273424      -1.29673     -0.136729E-11  0.136729E-11   213.829       213.829    
   8  0.513161     -0.667165     -0.703467E-12  0.703467E-12   214.409       214.409    
   9  0.182165      -1.70284     -0.179550E-11  0.179550E-11   214.759       214.759    
  10  0.253857      -1.37099     -0.144558E-11  0.144558E-11   215.164       215.164    
  11  0.226233      -1.48619     -0.156706E-11  0.156706E-11   215.655       215.655    
  12  0.106048      -2.24387     -0.236596E-11  0.236596E-11   215.701       215.701    
  13  0.595783     -0.517878     -0.546057E-12  0.546057E-12   215.969       215.969    
  14  0.354975      -1.03571     -0.109206E-11  0.109206E-11   216.105       216.105    
  15  0.295615      -1.21870     -0.128501E-11  0.128501E-11   216.230       216.230    
  16  0.538789     -0.618431     -0.652081E-12  0.652081E-12   216.880       216.880    
  17  0.368689E-01  -3.30039     -0.347997E-11  0.347997E-11   217.102       217.102    
  18  0.903217     -0.101792     -0.107331E-12  0.107331E-12   217.644       217.644    
  19  0.722622     -0.324868     -0.342545E-12  0.342545E-12   218.263       218.263    
  20  0.442962     -0.814272     -0.858578E-12  0.858578E-12   218.364       218.364    
  21  0.764416     -0.268643     -0.283260E-12  0.283260E-12   218.532       218.532    
  22  0.126663      -2.06623     -0.217865E-11  0.217865E-11   218.573       218.573    
  23  0.676742     -0.390466     -0.411712E-12  0.411712E-12   218.696       218.696    
  24  0.807144     -0.214254     -0.225912E-12  0.225912E-12   219.138       219.138    
  25  0.486843     -0.719814     -0.758981E-12  0.758981E-12   219.565       219.565    
  26  0.128211E-01  -4.35666     -0.459372E-11  0.459372E-11   219.730       219.730    
  27  0.631597     -0.459504     -0.484507E-12  0.484507E-12   220.127       220.127    
  28  0.508094     -0.677090     -0.713931E-12  0.713931E-12   220.481       220.481    
  29  0.224241      -1.49503     -0.157638E-11  0.157638E-11   220.548       220.548    
  30  0.129460      -2.04438     -0.215562E-11  0.215562E-11   220.576       220.576    
  31  0.235763      -1.44493     -0.152355E-11  0.152355E-11   220.782       220.782    
  32  0.456678     -0.783776     -0.826422E-12  0.826422E-12   221.103       221.103    
  33  0.389500E-01  -3.24548     -0.342207E-11  0.342207E-11   221.131       221.131    
  34  0.929892     -0.726867E-01 -0.766418E-13  0.766418E-13   221.266       221.266    
  35  0.766262     -0.266231     -0.280718E-12  0.280718E-12   221.376       221.376    
  36  0.514513     -0.664535     -0.700693E-12  0.700693E-12   221.419       221.419    
  37  0.531189     -0.632637     -0.667060E-12  0.667060E-12   221.669       221.669    
  38  0.366476      -1.00382     -0.105844E-11  0.105844E-11   222.033       222.033    
  39  0.180090      -1.71430     -0.180758E-11  0.180758E-11   222.393       222.393    
  40  0.371445     -0.990355     -0.104424E-11  0.104424E-11   222.956       222.956    
  41  0.640757     -0.445105     -0.469324E-12  0.469324E-12   222.967       222.967    
  42  0.729057E-01  -2.61859     -0.276107E-11  0.276107E-11   223.181       223.181    
  43  0.933103     -0.692396E-01 -0.730070E-13  0.730070E-13   223.198       223.198    
  44  0.822133     -0.195853     -0.206510E-12  0.206510E-12   223.370       223.370    
  45  0.656575     -0.420718     -0.443610E-12  0.443610E-12   223.611       223.611    
  46  0.541875     -0.612720     -0.646060E-12  0.646060E-12   223.636       223.636    
  47  0.529201     -0.636387     -0.671014E-12  0.671014E-12   224.083       224.083    
  48  0.424022     -0.857969     -0.904653E-12  0.904653E-12   224.348       224.348    
  49  0.151830E-01  -4.18758     -0.441543E-11  0.441543E-11   224.505       224.505    
  50  0.717530     -0.331941     -0.350002E-12  0.350002E-12   224.746       224.746    
  51  0.112673      -2.18326     -0.230206E-11  0.230206E-11   225.528       225.528    
  52  0.321241      -1.13556     -0.119735E-11  0.119735E-11   225.699       225.699    
  53  0.995504     -0.450657E-02 -0.475178E-14  0.475178E-14   225.717       225.717    
  54  0.459560     -0.777485     -0.819789E-12  0.819789E-12   225.836       225.836    
  55  0.838539     -0.176094     -0.185675E-12  0.185675E-12   225.880       225.880    
  56  0.520618     -0.652739     -0.688256E-12  0.688256E-12   225.994       225.994    
  57  0.616878     -0.483083     -0.509369E-12  0.509369E-12   226.038       226.038    
  58  0.282403      -1.26442     -0.133322E-11  0.133322E-11   226.038       226.038    
  59  0.872804     -0.136045     -0.143447E-12  0.143447E-12   226.270       226.270    
  60  0.941627     -0.601462E-01 -0.634188E-13  0.634188E-13   226.366       226.366    
  61  0.578775     -0.546841     -0.576595E-12  0.576595E-12   206.556       206.556    
loop,thermsimp(1:2)       69  0.120145E-12  0.156690E-11

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    271              207.84          0.80          0.47         20.34
Just calling func    0   0         23.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    207.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       69
neval is:      270
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       70
neval is:      270


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      270     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572699     -0.557395     -0.587724E-12  0.587724E-12   204.446       204.446    
   2  0.262311      -1.33822     -0.141104E-11  0.141104E-11   206.556       206.556    
   3  0.942199     -0.595392E-01 -0.627789E-13  0.627789E-13   209.163       209.163    
   4  0.586404     -0.533746     -0.562788E-12  0.562788E-12   210.275       210.275    
   5  0.417308     -0.873931     -0.921483E-12  0.921483E-12   212.314       212.314    
   6  0.810476     -0.210133     -0.221567E-12  0.221567E-12   212.788       212.788    
   7  0.147561      -1.91351     -0.201763E-11  0.201763E-11   212.820       212.820    
   8  0.970787     -0.296481E-01 -0.312613E-13  0.312613E-13   213.829       213.829    
   9  0.558488E-01  -2.88511     -0.304209E-11  0.304209E-11   214.409       214.409    
  10  0.679663     -0.386158     -0.407170E-12  0.407170E-12   214.759       214.759    
  11  0.430825     -0.842054     -0.887872E-12  0.887872E-12   215.164       215.164    
  12  0.990793     -0.924929E-02 -0.975257E-14  0.975257E-14   215.655       215.655    
  13  0.295093      -1.22047     -0.128687E-11  0.128687E-11   215.701       215.701    
  14  0.597792     -0.514513     -0.542508E-12  0.542508E-12   215.969       215.969    
  15  0.253487      -1.37244     -0.144712E-11  0.144712E-11   216.105       216.105    
  16  0.215277      -1.53583     -0.161940E-11  0.161940E-11   216.230       216.230    
  17  0.931407     -0.710589E-01 -0.749253E-13  0.749253E-13   216.880       216.880    
  18  0.530092     -0.634704     -0.669239E-12  0.669239E-12   217.102       217.102    
  19  0.659797     -0.415824     -0.438449E-12  0.438449E-12   217.644       217.644    
  20  0.786332     -0.240376     -0.253456E-12  0.253456E-12   218.263       218.263    
  21  0.483733E-01  -3.02881     -0.319361E-11  0.319361E-11   218.364       218.364    
  22  0.184210      -1.69168     -0.178373E-11  0.178373E-11   218.532       218.532    
  23  0.881735     -0.125863     -0.132712E-12  0.132712E-12   218.573       218.573    
  24  0.313741      -1.15919     -0.122226E-11  0.122226E-11   218.696       218.696    
  25  0.663361     -0.410436     -0.432769E-12  0.432769E-12   219.138       219.138    
  26  0.875733     -0.132694     -0.139914E-12  0.139914E-12   219.565       219.565    
  27  0.137990      -1.98057     -0.208834E-11  0.208834E-11   219.730       219.730    
  28  0.636803     -0.451295     -0.475851E-12  0.475851E-12   220.127       220.127    
  29  0.710168     -0.342254     -0.360876E-12  0.360876E-12   220.481       220.481    
  30  0.191480      -1.65297     -0.174291E-11  0.174291E-11   220.548       220.548    
  31  0.742779     -0.297357     -0.313537E-12  0.313537E-12   220.576       220.576    
  32  0.703188     -0.352132     -0.371292E-12  0.371292E-12   220.782       220.782    
  33  0.255377      -1.36501     -0.143929E-11  0.143929E-11   221.103       221.103    
  34  0.838958     -0.175594     -0.185149E-12  0.185149E-12   221.131       221.131    
  35  0.276747      -1.28465     -0.135455E-11  0.135455E-11   221.266       221.266    
  36  0.428264     -0.848016     -0.894159E-12  0.894159E-12   221.376       221.376    
  37  0.909770     -0.945635E-01 -0.997089E-13  0.997089E-13   221.419       221.419    
  38  0.227050      -1.48259     -0.156326E-11  0.156326E-11   221.669       221.669    
  39  0.493093     -0.707058     -0.745531E-12  0.745531E-12   222.033       222.033    
  40  0.474459     -0.745579     -0.786148E-12  0.786148E-12   222.393       222.393    
  41  0.502229E-01  -2.99128     -0.315405E-11  0.315405E-11   222.956       222.956    
  42  0.565843     -0.569438     -0.600422E-12  0.600422E-12   222.967       222.967    
  43  0.436304     -0.829416     -0.874546E-12  0.874546E-12   223.181       223.181    
  44  0.823574     -0.194102     -0.204664E-12  0.204664E-12   223.198       223.198    
  45  0.131737E-01  -4.32953     -0.456511E-11  0.456511E-11   223.370       223.370    
  46  0.877098     -0.131137     -0.138272E-12  0.138272E-12   223.611       223.611    
  47  0.167849E-01  -4.08728     -0.430967E-11  0.430967E-11   223.636       223.636    
  48  0.898205E-01  -2.40994     -0.254107E-11  0.254107E-11   224.083       224.083    
  49  0.791992     -0.233204     -0.245893E-12  0.245893E-12   224.348       224.348    
  50  0.369587     -0.995369     -0.104953E-11  0.104953E-11   224.505       224.505    
  51  0.782457     -0.245317     -0.258665E-12  0.258665E-12   224.746       224.746    
  52  0.754752     -0.281366     -0.296676E-12  0.296676E-12   225.528       225.528    
  53  0.305373      -1.18622     -0.125077E-11  0.125077E-11   225.699       225.699    
  54  0.730531     -0.313983     -0.331068E-12  0.331068E-12   225.717       225.717    
  55  0.135354      -1.99986     -0.210867E-11  0.210867E-11   225.836       225.836    
  56  0.441036     -0.818628     -0.863171E-12  0.863171E-12   225.880       225.880    
  57  0.865071     -0.144944     -0.152830E-12  0.152830E-12   225.994       225.994    
  58  0.240473      -1.42515     -0.150269E-11  0.150269E-11   226.038       226.038    
  59  0.872983     -0.135839     -0.143230E-12  0.143230E-12   226.038       226.038    
  60  0.140734      -1.96088     -0.206758E-11  0.206758E-11   226.270       226.270    
  61  0.972419     -0.279684E-01 -0.294902E-13  0.294902E-13   207.841       207.841    
loop,thermsimp(1:2)       70  0.587724E-12  0.141104E-11

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    272              215.07          0.80          0.47         20.23
Just calling func    0   0         23.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    215.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       70
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       71
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      271
neval,tstepnext:      271     271

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197701      -1.62100     -0.170920E-11  0.170920E-11   204.446       204.446    
   2  0.365233      -1.00722     -0.106203E-11  0.106203E-11   206.556       206.556    
   3  0.669704     -0.400919     -0.422734E-12  0.422734E-12   207.841       207.841    
   4  0.815516E-01  -2.50652     -0.264290E-11  0.264290E-11   209.163       209.163    
   5  0.549594     -0.598575     -0.631145E-12  0.631145E-12   210.275       210.275    
   6  0.486566     -0.720382     -0.759579E-12  0.759579E-12   212.314       212.314    
   7  0.470013     -0.754995     -0.796075E-12  0.796075E-12   212.788       212.788    
   8  0.665203     -0.407663     -0.429845E-12  0.429845E-12   212.820       212.820    
   9  0.942116     -0.596273E-01 -0.628718E-13  0.628718E-13   213.829       213.829    
  10  0.483084     -0.727564     -0.767152E-12  0.767152E-12   214.409       214.409    
  11  0.220459      -1.51204     -0.159432E-11  0.159432E-11   214.759       214.759    
  12  0.258312      -1.35359     -0.142724E-11  0.142724E-11   215.164       215.164    
  13  0.176649      -1.73359     -0.182792E-11  0.182792E-11   215.655       215.655    
  14  0.454245     -0.789119     -0.832056E-12  0.832056E-12   215.701       215.701    
  15  0.548383     -0.600781     -0.633471E-12  0.633471E-12   215.969       215.969    
  16  0.109889      -2.20828     -0.232844E-11  0.232844E-11   216.105       216.105    
  17  0.318882      -1.14293     -0.120512E-11  0.120512E-11   216.230       216.230    
  18  0.758425     -0.276511     -0.291557E-12  0.291557E-12   216.880       216.880    
  19  0.763468E-01  -2.57247     -0.271244E-11  0.271244E-11   217.102       217.102    
  20  0.502736     -0.687691     -0.725110E-12  0.725110E-12   217.644       217.644    
  21  0.188320E-01  -3.97220     -0.418833E-11  0.418833E-11   218.263       218.263    
  22  0.798102E-01  -2.52810     -0.266566E-11  0.266566E-11   218.364       218.364    
  23  0.317782      -1.14639     -0.120877E-11  0.120877E-11   218.532       218.532    
  24  0.491654     -0.709980     -0.748612E-12  0.748612E-12   218.573       218.573    
  25  0.516808     -0.660084     -0.696000E-12  0.696000E-12   218.696       218.696    
  26  0.178361      -1.72395     -0.181775E-11  0.181775E-11   219.138       219.138    
  27  0.735587     -0.307087     -0.323796E-12  0.323796E-12   219.565       219.565    
  28  0.690407     -0.370474     -0.390633E-12  0.390633E-12   219.730       219.730    
  29  0.300756      -1.20146     -0.126683E-11  0.126683E-11   220.127       220.127    
  30  0.246025      -1.40232     -0.147862E-11  0.147862E-11   220.481       220.481    
  31  0.762848     -0.270697     -0.285426E-12  0.285426E-12   220.548       220.548    
  32  0.684716     -0.378752     -0.399360E-12  0.399360E-12   220.576       220.576    
  33  0.933820     -0.684720E-01 -0.721977E-13  0.721977E-13   220.782       220.782    
  34  0.323466      -1.12866     -0.119007E-11  0.119007E-11   221.103       221.103    
  35  0.560031     -0.579764     -0.611310E-12  0.611310E-12   221.131       221.131    
  36  0.658066     -0.418449     -0.441218E-12  0.441218E-12   221.266       221.266    
  37  0.551862     -0.594457     -0.626803E-12  0.626803E-12   221.376       221.376    
  38  0.892922     -0.113256     -0.119418E-12  0.119418E-12   221.419       221.419    
  39  0.553768     -0.591010     -0.623168E-12  0.623168E-12   221.669       221.669    
  40  0.735589     -0.307084     -0.323793E-12  0.323793E-12   222.033       222.033    
  41  0.239620      -1.42870     -0.150644E-11  0.150644E-11   222.393       222.393    
  42  0.864603     -0.145484     -0.153401E-12  0.153401E-12   222.956       222.956    
  43  0.808990E-01  -2.51455     -0.265138E-11  0.265138E-11   222.967       222.967    
  44  0.782208     -0.245634     -0.259000E-12  0.259000E-12   223.181       223.181    
  45  0.309434      -1.17301     -0.123684E-11  0.123684E-11   223.198       223.198    
  46  0.258865      -1.35145     -0.142498E-11  0.142498E-11   223.370       223.370    
  47  0.456441     -0.784295     -0.826970E-12  0.826970E-12   223.611       223.611    
  48  0.145044      -1.93071     -0.203577E-11  0.203577E-11   223.636       223.636    
  49  0.400926     -0.913977     -0.963708E-12  0.963708E-12   224.083       224.083    
  50  0.866972     -0.142748     -0.150515E-12  0.150515E-12   224.348       224.348    
  51  0.692172     -0.367921     -0.387940E-12  0.387940E-12   224.505       224.505    
  52  0.738343     -0.303347     -0.319852E-12  0.319852E-12   224.746       224.746    
  53  0.742797     -0.297333     -0.313511E-12  0.313511E-12   225.528       225.528    
  54  0.552581     -0.593155     -0.625429E-12  0.625429E-12   225.699       225.699    
  55  0.259923      -1.34737     -0.142068E-11  0.142068E-11   225.717       225.717    
  56  0.462017     -0.772154     -0.814168E-12  0.814168E-12   225.836       225.836    
  57  0.290939      -1.23464     -0.130182E-11  0.130182E-11   225.880       225.880    
  58  0.408541     -0.895163     -0.943870E-12  0.943870E-12   225.994       225.994    
  59  0.278831      -1.27715     -0.134664E-11  0.134664E-11   226.038       226.038    
  60  0.947332     -0.541053E-01 -0.570493E-13  0.570493E-13   226.038       226.038    
  61  0.441277     -0.818082     -0.862596E-12  0.862596E-12   215.071       215.071    
loop,thermsimp(1:2)       71  0.170920E-11  0.106203E-11

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    273              206.41          0.80          0.47         20.32
Just calling func    0   0         23.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    206.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       71
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.105441E-11           271
loop is:       72
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.210882E-12           281

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      281
neval,tstepnext:      272     281

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.433208     -0.836537     -0.176411E-12  0.176411E-12   204.446       204.446    
   2  0.395860     -0.926695     -0.195424E-12  0.195424E-12   206.556       206.556    
   3  0.353098      -1.04101     -0.219531E-12  0.219531E-12   207.841       207.841    
   4  0.137930E-01  -4.28360     -0.903335E-12  0.903335E-12   209.163       209.163    
   5  0.145859      -1.92511     -0.405973E-12  0.405973E-12   210.275       210.275    
   6  0.656655     -0.420597     -0.886965E-13  0.886965E-13   212.314       212.314    
   7  0.572622     -0.557529     -0.117573E-12  0.117573E-12   212.788       212.788    
   8  0.105785      -2.24635     -0.473715E-12  0.473715E-12   212.820       212.820    
   9  0.488149     -0.717135     -0.151231E-12  0.151231E-12   213.829       213.829    
  10  0.944231     -0.573844E-01 -0.121014E-13  0.121014E-13   214.409       214.409    
  11  0.454323     -0.788948     -0.166375E-12  0.166375E-12   214.759       214.759    
  12  0.255795E-01  -3.66596     -0.773087E-12  0.773087E-12   215.071       215.071    
  13  0.150748      -1.89215     -0.399020E-12  0.399020E-12   215.164       215.164    
  14  0.512281     -0.668881     -0.141055E-12  0.141055E-12   215.655       215.655    
  15  0.769039     -0.262613     -0.553805E-13  0.553805E-13   215.701       215.701    
  16  0.792612     -0.232421     -0.490136E-13  0.490136E-13   215.969       215.969    
  17  0.696202     -0.362115     -0.763637E-13  0.763637E-13   216.105       216.105    
  18  0.714046     -0.336808     -0.710268E-13  0.710268E-13   216.230       216.230    
  19  0.159657E-01  -4.13731     -0.872486E-12  0.872486E-12   216.880       216.880    
  20  0.498048     -0.697058     -0.146997E-12  0.146997E-12   217.102       217.102    
  21  0.857041     -0.154269     -0.325327E-13  0.325327E-13   217.644       217.644    
  22  0.465410     -0.764837     -0.161291E-12  0.161291E-12   218.263       218.263    
  23  0.104473      -2.25883     -0.476348E-12  0.476348E-12   218.364       218.364    
  24  0.189595      -1.66287     -0.350669E-12  0.350669E-12   218.532       218.532    
  25  0.161822E-01  -4.12384     -0.869645E-12  0.869645E-12   218.573       218.573    
  26  0.110824E-01  -4.50239     -0.949476E-12  0.949476E-12   218.696       218.696    
  27  0.375674     -0.979034     -0.206461E-12  0.206461E-12   219.138       219.138    
  28  0.941994     -0.597565E-01 -0.126016E-13  0.126016E-13   219.565       219.565    
  29  0.145458      -1.92787     -0.406554E-12  0.406554E-12   219.730       219.730    
  30  0.967293     -0.332536E-01 -0.701260E-14  0.701260E-14   220.127       220.127    
  31  0.738359     -0.303325     -0.639659E-13  0.639659E-13   220.481       220.481    
  32  0.428170     -0.848235     -0.178878E-12  0.178878E-12   220.548       220.548    
  33  0.948700     -0.526624E-01 -0.111056E-13  0.111056E-13   220.576       220.576    
  34  0.397947     -0.921437     -0.194315E-12  0.194315E-12   220.782       220.782    
  35  0.235269E-01  -3.74961     -0.790727E-12  0.790727E-12   221.103       221.103    
  36  0.658818     -0.417307     -0.880028E-13  0.880028E-13   221.131       221.131    
  37  0.815682     -0.203731     -0.429633E-13  0.429633E-13   221.266       221.266    
  38  0.892429     -0.113808     -0.240001E-13  0.240001E-13   221.376       221.376    
  39  0.865213     -0.144779     -0.305314E-13  0.305314E-13   221.419       221.419    
  40  0.653787     -0.424973     -0.896193E-13  0.896193E-13   221.669       221.669    
  41  0.324633      -1.12506     -0.237255E-12  0.237255E-12   222.033       222.033    
  42  0.744249     -0.295380     -0.622905E-13  0.622905E-13   222.393       222.393    
  43  0.261081      -1.34293     -0.283199E-12  0.283199E-12   222.956       222.956    
  44  0.544689     -0.607540     -0.128119E-12  0.128119E-12   222.967       222.967    
  45  0.956297     -0.446867E-01 -0.942364E-14  0.942364E-14   223.181       223.181    
  46  0.703975E-01  -2.65360     -0.559597E-12  0.559597E-12   223.198       223.198    
  47  0.855305     -0.156297     -0.329603E-13  0.329603E-13   223.370       223.370    
  48  0.432893     -0.837266     -0.176565E-12  0.176565E-12   223.611       223.611    
  49  0.930084     -0.724804E-01 -0.152848E-13  0.152848E-13   223.636       223.636    
  50  0.716573     -0.333275     -0.702819E-13  0.702819E-13   224.083       224.083    
  51  0.696072     -0.362303     -0.764033E-13  0.764033E-13   224.348       224.348    
  52  0.634767     -0.454498     -0.958456E-13  0.958456E-13   224.505       224.505    
  53  0.993257     -0.676568E-02 -0.142676E-14  0.142676E-14   224.746       224.746    
  54  0.611768     -0.491402     -0.103628E-12  0.103628E-12   225.528       225.528    
  55  0.185764      -1.68328     -0.354974E-12  0.354974E-12   225.699       225.699    
  56  0.320523      -1.13780     -0.239942E-12  0.239942E-12   225.717       225.717    
  57  0.646184E-01  -2.73926     -0.577661E-12  0.577661E-12   225.836       225.836    
  58  0.726080     -0.320096     -0.675025E-13  0.675025E-13   225.880       225.880    
  59  0.256954      -1.35886     -0.286559E-12  0.286559E-12   225.994       225.994    
  60  0.469106     -0.756926     -0.159622E-12  0.159622E-12   226.038       226.038    
  61  0.676646     -0.390607     -0.823722E-13  0.823722E-13   206.414       206.414    
loop,thermsimp(1:2)       72  0.176411E-12  0.195424E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    274              204.76          0.80          0.47         20.31
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    204.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       72
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       73
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      281
neval,tstepnext:      273     281

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.135272      -2.00047     -0.421864E-12  0.421864E-12   204.446       204.446    
   2  0.194734      -1.63612     -0.345030E-12  0.345030E-12   206.414       206.414    
   3  0.215594      -1.53436     -0.323569E-12  0.323569E-12   206.556       206.556    
   4  0.927615E-01  -2.37772     -0.501420E-12  0.501420E-12   207.841       207.841    
   5  0.483259E-01  -3.02979     -0.638929E-12  0.638929E-12   209.163       209.163    
   6  0.101713      -2.28560     -0.481992E-12  0.481992E-12   210.275       210.275    
   7  0.378530     -0.971459     -0.204864E-12  0.204864E-12   212.314       212.314    
   8  0.686927     -0.375528     -0.791922E-13  0.791922E-13   212.788       212.788    
   9  0.414021     -0.881839     -0.185964E-12  0.185964E-12   212.820       212.820    
  10  0.195293      -1.63326     -0.344425E-12  0.344425E-12   213.829       213.829    
  11  0.766456     -0.265978     -0.560902E-13  0.560902E-13   214.409       214.409    
  12  0.851360E-01  -2.46350     -0.519510E-12  0.519510E-12   214.759       214.759    
  13  0.872969     -0.135855     -0.286494E-13  0.286494E-13   215.071       215.071    
  14  0.977499     -0.227585E-01 -0.479937E-14  0.479937E-14   215.164       215.164    
  15  0.820949     -0.197294     -0.416058E-13  0.416058E-13   215.655       215.655    
  16  0.448582     -0.801663     -0.169057E-12  0.169057E-12   215.701       215.701    
  17  0.234965      -1.44832     -0.305425E-12  0.305425E-12   215.969       215.969    
  18  0.384176     -0.956655     -0.201742E-12  0.201742E-12   216.105       216.105    
  19  0.415974     -0.877133     -0.184972E-12  0.184972E-12   216.230       216.230    
  20  0.572763     -0.557284     -0.117521E-12  0.117521E-12   216.880       216.880    
  21  0.951672E-01  -2.35212     -0.496021E-12  0.496021E-12   217.102       217.102    
  22  0.571823     -0.558926     -0.117868E-12  0.117868E-12   217.644       217.644    
  23  0.802291     -0.220284     -0.464540E-13  0.464540E-13   218.263       218.263    
  24  0.620483     -0.477257     -0.100645E-12  0.100645E-12   218.364       218.364    
  25  0.943864     -0.577737E-01 -0.121835E-13  0.121835E-13   218.532       218.532    
  26  0.429255     -0.845704     -0.178344E-12  0.178344E-12   218.573       218.573    
  27  0.802668     -0.219815     -0.463550E-13  0.463550E-13   218.696       218.696    
  28  0.706389E-01  -2.65017     -0.558875E-12  0.558875E-12   219.138       219.138    
  29  0.772329     -0.258345     -0.544803E-13  0.544803E-13   219.565       219.565    
  30  0.364106      -1.01031     -0.213057E-12  0.213057E-12   219.730       219.730    
  31  0.801878     -0.220799     -0.465627E-13  0.465627E-13   220.127       220.127    
  32  0.557822     -0.583716     -0.123095E-12  0.123095E-12   220.481       220.481    
  33  0.131927      -2.02551     -0.427143E-12  0.427143E-12   220.548       220.548    
  34  0.238678      -1.43264     -0.302118E-12  0.302118E-12   220.576       220.576    
  35  0.118059E-01  -4.43915     -0.936139E-12  0.936139E-12   220.782       220.782    
  36  0.782880     -0.244776     -0.516190E-13  0.516190E-13   221.103       221.103    
  37  0.747258     -0.291345     -0.614394E-13  0.614394E-13   221.131       221.131    
  38  0.246854      -1.39896     -0.295016E-12  0.295016E-12   221.266       221.266    
  39  0.658013E-01  -2.72112     -0.573835E-12  0.573835E-12   221.376       221.376    
  40  0.376093     -0.977920     -0.206226E-12  0.206226E-12   221.419       221.419    
  41  0.231805      -1.46186     -0.308280E-12  0.308280E-12   221.669       221.669    
  42  0.374883     -0.981141     -0.206905E-12  0.206905E-12   222.033       222.033    
  43  0.493861     -0.705502     -0.148778E-12  0.148778E-12   222.393       222.393    
  44  0.187106      -1.67608     -0.353456E-12  0.353456E-12   222.956       222.956    
  45  0.563409     -0.573749     -0.120993E-12  0.120993E-12   222.967       222.967    
  46  0.390000     -0.941608     -0.198569E-12  0.198569E-12   223.181       223.181    
  47  0.142711E-01  -4.24952     -0.896148E-12  0.896148E-12   223.198       223.198    
  48  0.806732     -0.214764     -0.452899E-13  0.452899E-13   223.370       223.370    
  49  0.369511     -0.995575     -0.209949E-12  0.209949E-12   223.611       223.611    
  50  0.850571E-01  -2.46443     -0.519705E-12  0.519705E-12   223.636       223.636    
  51  0.725479     -0.320924     -0.676771E-13  0.676771E-13   224.083       224.083    
  52  0.497084     -0.698995     -0.147406E-12  0.147406E-12   224.348       224.348    
  53  0.210720      -1.55723     -0.328391E-12  0.328391E-12   224.505       224.505    
  54  0.352907E-01  -3.34413     -0.705219E-12  0.705219E-12   224.746       224.746    
  55  0.160942      -1.82671     -0.385221E-12  0.385221E-12   225.528       225.528    
  56  0.302722E-01  -3.49753     -0.737567E-12  0.737567E-12   225.699       225.699    
  57  0.543875     -0.609037     -0.128435E-12  0.128435E-12   225.717       225.717    
  58  0.674702     -0.393485     -0.829790E-13  0.829790E-13   225.836       225.836    
  59  0.751391     -0.285830     -0.602764E-13  0.602764E-13   225.880       225.880    
  60  0.257762E-01  -3.65830     -0.771472E-12  0.771472E-12   225.994       225.994    
  61  0.994330     -0.568659E-02 -0.119920E-14  0.119920E-14   204.760       204.760    
loop,thermsimp(1:2)       73  0.421864E-12  0.345030E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    275              204.16          0.80          0.46         20.30
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    276              198.49          0.77          0.46         20.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    198.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       73
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       74
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      281
neval,tstepnext:      275     281

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.504902     -0.683391     -0.144115E-12  0.144115E-12   204.446       204.446    
   2  0.403144E-01  -3.21105     -0.677153E-12  0.677153E-12   204.760       204.760    
   3  0.691788     -0.368476     -0.777052E-13  0.777052E-13   206.414       206.414    
   4  0.750133     -0.287505     -0.606296E-13  0.606296E-13   206.556       206.556    
   5  0.229703      -1.47097     -0.310201E-12  0.310201E-12   207.841       207.841    
   6  0.332507      -1.10109     -0.232201E-12  0.232201E-12   209.163       209.163    
   7  0.516846     -0.660010     -0.139184E-12  0.139184E-12   210.275       210.275    
   8  0.959654     -0.411827E-01 -0.868471E-14  0.868471E-14   212.314       212.314    
   9  0.262192      -1.33868     -0.282304E-12  0.282304E-12   212.788       212.788    
  10  0.301619      -1.19859     -0.252761E-12  0.252761E-12   212.820       212.820    
  11  0.799913E-01  -2.52584     -0.532655E-12  0.532655E-12   213.829       213.829    
  12  0.966714E-01  -2.33644     -0.492714E-12  0.492714E-12   214.409       214.409    
  13  0.585126     -0.535927     -0.113018E-12  0.113018E-12   214.759       214.759    
  14  0.595934     -0.517625     -0.109158E-12  0.109158E-12   215.071       215.071    
  15  0.420620     -0.866026     -0.182630E-12  0.182630E-12   215.164       215.164    
  16  0.738821     -0.302699     -0.638339E-13  0.638339E-13   215.655       215.655    
  17  0.761944     -0.271882     -0.573351E-13  0.573351E-13   215.701       215.701    
  18  0.188016      -1.67123     -0.352433E-12  0.352433E-12   215.969       215.969    
  19  0.569850     -0.562382     -0.118596E-12  0.118596E-12   216.105       216.105    
  20  0.627689     -0.465710     -0.982101E-13  0.982101E-13   216.230       216.230    
  21  0.152356      -1.88154     -0.396783E-12  0.396783E-12   216.880       216.880    
  22  0.909433     -0.949335E-01 -0.200198E-13  0.200198E-13   217.102       217.102    
  23  0.184593      -1.68960     -0.356307E-12  0.356307E-12   217.644       217.644    
  24  0.715512     -0.334757     -0.705944E-13  0.705944E-13   218.263       218.263    
  25  0.109754      -2.20952     -0.465948E-12  0.465948E-12   218.364       218.364    
  26  0.614040     -0.487695     -0.102846E-12  0.102846E-12   218.532       218.532    
  27  0.771205     -0.259801     -0.547874E-13  0.547874E-13   218.573       218.573    
  28  0.733075     -0.310508     -0.654806E-13  0.654806E-13   218.696       218.696    
  29  0.633845     -0.455951     -0.961521E-13  0.961521E-13   219.138       219.138    
  30  0.808363     -0.212744     -0.448640E-13  0.448640E-13   219.565       219.565    
  31  0.912881     -0.911499E-01 -0.192219E-13  0.192219E-13   219.730       219.730    
  32  0.108385      -2.22207     -0.468595E-12  0.468595E-12   220.127       220.127    
  33  0.634609     -0.454747     -0.958981E-13  0.958981E-13   220.481       220.481    
  34  0.195044      -1.63453     -0.344694E-12  0.344694E-12   220.548       220.548    
  35  0.341590      -1.07414     -0.226518E-12  0.226518E-12   220.576       220.576    
  36  0.248699      -1.39151     -0.293445E-12  0.293445E-12   220.782       220.782    
  37  0.150080      -1.89659     -0.399956E-12  0.399956E-12   221.103       221.103    
  38  0.872371     -0.136541     -0.287940E-13  0.287940E-13   221.131       221.131    
  39  0.561418     -0.577289     -0.121740E-12  0.121740E-12   221.266       221.266    
  40  0.584536     -0.536936     -0.113230E-12  0.113230E-12   221.376       221.376    
  41  0.672200     -0.397199     -0.837623E-13  0.837623E-13   221.419       221.419    
  42  0.803278     -0.219055     -0.461948E-13  0.461948E-13   221.669       221.669    
  43  0.686273     -0.376479     -0.793928E-13  0.793928E-13   222.033       222.033    
  44  0.413346     -0.883471     -0.186308E-12  0.186308E-12   222.393       222.393    
  45  0.735150     -0.307681     -0.648845E-13  0.648845E-13   222.956       222.956    
  46  0.218902E-01  -3.82172     -0.805932E-12  0.805932E-12   222.967       222.967    
  47  0.184761E-01  -3.99128     -0.841690E-12  0.841690E-12   223.181       223.181    
  48  0.151670      -1.88605     -0.397735E-12  0.397735E-12   223.198       223.198    
  49  0.420143     -0.867159     -0.182869E-12  0.182869E-12   223.370       223.370    
  50  0.668514     -0.402699     -0.849220E-13  0.849220E-13   223.611       223.611    
  51  0.885992     -0.121047     -0.255268E-13  0.255268E-13   223.636       223.636    
  52  0.853101     -0.158877     -0.335043E-13  0.335043E-13   224.083       224.083    
  53  0.538590     -0.618800     -0.130494E-12  0.130494E-12   224.348       224.348    
  54  0.981589     -0.185826E-01 -0.391874E-14  0.391874E-14   224.505       224.505    
  55  0.731059     -0.313260     -0.660611E-13  0.660611E-13   224.746       224.746    
  56  0.840620     -0.173615     -0.366124E-13  0.366124E-13   225.528       225.528    
  57  0.683866     -0.379993     -0.801339E-13  0.801339E-13   225.699       225.699    
  58  0.377699     -0.973658     -0.205327E-12  0.205327E-12   225.717       225.717    
  59  0.730685     -0.313773     -0.661693E-13  0.661693E-13   225.836       225.836    
  60  0.145672      -1.92639     -0.406243E-12  0.406243E-12   225.880       225.880    
  61  0.478848E-01  -3.03896     -0.640863E-12  0.640863E-12   198.488       198.488    
loop,thermsimp(1:2)       74  0.144115E-12  0.677153E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    277              204.21          0.79          0.46         20.31
Just calling func    0   0         23.12


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    204.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       74
neval is:      276
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       75
neval is:      276


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      281
neval,tstepnext:      276     281

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.253829E-01  -3.67368     -0.774715E-12  0.774715E-12   198.488       198.488    
   2  0.279286      -1.27552     -0.268984E-12  0.268984E-12   204.446       204.446    
   3  0.883518     -0.123844     -0.261165E-13  0.261165E-13   204.760       204.760    
   4  0.963393     -0.372933E-01 -0.786451E-14  0.786451E-14   206.414       206.414    
   5  0.305537      -1.18568     -0.250040E-12  0.250040E-12   206.556       206.556    
   6  0.792561     -0.232486     -0.490272E-13  0.490272E-13   207.841       207.841    
   7  0.121179E-01  -4.41307     -0.930639E-12  0.930639E-12   209.163       209.163    
   8  0.314897      -1.15551     -0.243677E-12  0.243677E-12   210.275       210.275    
   9  0.554871     -0.589020     -0.124214E-12  0.124214E-12   212.314       212.314    
  10  0.714859     -0.335670     -0.707869E-13  0.707869E-13   212.788       212.788    
  11  0.883922     -0.123386     -0.260200E-13  0.260200E-13   212.820       212.820    
  12  0.147659      -1.91285     -0.403387E-12  0.403387E-12   213.829       213.829    
  13  0.710713     -0.341486     -0.720134E-13  0.720134E-13   214.409       214.409    
  14  0.490644     -0.712037     -0.150156E-12  0.150156E-12   214.759       214.759    
  15  0.496210     -0.700757     -0.147777E-12  0.147777E-12   215.071       215.071    
  16  0.127022      -2.06339     -0.435133E-12  0.435133E-12   215.164       215.164    
  17  0.370259     -0.993552     -0.209523E-12  0.209523E-12   215.655       215.655    
  18  0.792621     -0.232411     -0.490113E-13  0.490113E-13   215.701       215.701    
  19  0.800301     -0.222768     -0.469778E-13  0.469778E-13   215.969       215.969    
  20  0.494037     -0.705145     -0.148703E-12  0.148703E-12   216.105       216.105    
  21  0.138322      -1.97817     -0.417162E-12  0.417162E-12   216.230       216.230    
  22  0.589816     -0.527944     -0.111334E-12  0.111334E-12   216.880       216.880    
  23  0.918084     -0.854662E-01 -0.180233E-13  0.180233E-13   217.102       217.102    
  24  0.141314      -1.95677     -0.412648E-12  0.412648E-12   217.644       217.644    
  25  0.251819      -1.37904     -0.290816E-12  0.290816E-12   218.263       218.263    
  26  0.139673      -1.96845     -0.415112E-12  0.415112E-12   218.364       218.364    
  27  0.720899     -0.327257     -0.690127E-13  0.690127E-13   218.532       218.532    
  28  0.457706     -0.781528     -0.164811E-12  0.164811E-12   218.573       218.573    
  29  0.544946     -0.607069     -0.128020E-12  0.128020E-12   218.696       218.696    
  30  0.834843     -0.180511     -0.380666E-13  0.380666E-13   219.138       219.138    
  31  0.939374     -0.625413E-01 -0.131889E-13  0.131889E-13   219.565       219.565    
  32  0.567635     -0.566276     -0.119418E-12  0.119418E-12   219.730       219.730    
  33  0.972503     -0.278824E-01 -0.587990E-14  0.587990E-14   220.127       220.127    
  34  0.322644      -1.13121     -0.238551E-12  0.238551E-12   220.481       220.481    
  35  0.800043     -0.223090     -0.470458E-13  0.470458E-13   220.548       220.548    
  36  0.684167     -0.379553     -0.800411E-13  0.800411E-13   220.576       220.576    
  37  0.949638E-01  -2.35426     -0.496472E-12  0.496472E-12   220.782       220.782    
  38  0.524302     -0.645688     -0.136164E-12  0.136164E-12   221.103       221.103    
  39  0.487579E-01  -3.02089     -0.637052E-12  0.637052E-12   221.131       221.131    
  40  0.632795     -0.457609     -0.965017E-13  0.965017E-13   221.266       221.266    
  41  0.798917     -0.224498     -0.473426E-13  0.473426E-13   221.376       221.376    
  42  0.913029     -0.909874E-01 -0.191876E-13  0.191876E-13   221.419       221.419    
  43  0.407234     -0.898366     -0.189450E-12  0.189450E-12   221.669       221.669    
  44  0.283479      -1.26062     -0.265842E-12  0.265842E-12   222.033       222.033    
  45  0.703412     -0.351813     -0.741911E-13  0.741911E-13   222.393       222.393    
  46  0.170296      -1.77021     -0.373307E-12  0.373307E-12   222.956       222.956    
  47  0.733452     -0.309994     -0.653722E-13  0.653722E-13   222.967       222.967    
  48  0.209889E-01  -3.86376     -0.814799E-12  0.814799E-12   223.181       223.181    
  49  0.875381     -0.133096     -0.280676E-13  0.280676E-13   223.198       223.198    
  50  0.778776     -0.250032     -0.527273E-13  0.527273E-13   223.370       223.370    
  51  0.699074     -0.357998     -0.754955E-13  0.754955E-13   223.611       223.611    
  52  0.357598      -1.02835     -0.216860E-12  0.216860E-12   223.636       223.636    
  53  0.428985     -0.846333     -0.178477E-12  0.178477E-12   224.083       224.083    
  54  0.693965E-01  -2.66792     -0.562617E-12  0.562617E-12   224.348       224.348    
  55  0.839559     -0.174879     -0.368789E-13  0.368789E-13   224.505       224.505    
  56  0.470811     -0.753298     -0.158857E-12  0.158857E-12   224.746       224.746    
  57  0.842821     -0.171001     -0.360611E-13  0.360611E-13   225.528       225.528    
  58  0.673932     -0.394627     -0.832198E-13  0.832198E-13   225.699       225.699    
  59  0.635598E-01  -2.75577     -0.581144E-12  0.581144E-12   225.717       225.717    
  60  0.637248     -0.450596     -0.950228E-13  0.950228E-13   225.836       225.836    
  61  0.727806     -0.317721     -0.670018E-13  0.670018E-13   204.213       204.213    
loop,thermsimp(1:2)       75  0.774715E-12  0.268984E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    278              203.06          0.80          0.47         20.36
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    203.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       75
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       76
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      281
neval,tstepnext:      277     281

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.333998      -1.09662     -0.231258E-12  0.231258E-12   198.488       198.488    
   2  0.350105E-01  -3.35211     -0.706900E-12  0.706900E-12   204.213       204.213    
   3  0.502213     -0.688731     -0.145241E-12  0.145241E-12   204.446       204.446    
   4  0.194919      -1.63517     -0.344829E-12  0.344829E-12   204.760       204.760    
   5  0.271110      -1.30523     -0.275250E-12  0.275250E-12   206.414       206.414    
   6  0.558353     -0.582764     -0.122895E-12  0.122895E-12   206.556       206.556    
   7  0.377357     -0.974563     -0.205518E-12  0.205518E-12   207.841       207.841    
   8  0.593090E-02  -5.12758     -0.108132E-11  0.108132E-11   209.163       209.163    
   9  0.761858     -0.271995     -0.573590E-13  0.573590E-13   210.275       210.275    
  10  0.210236      -1.55953     -0.328877E-12  0.328877E-12   212.314       212.314    
  11  0.132891      -2.01823     -0.425608E-12  0.425608E-12   212.788       212.788    
  12  0.581772     -0.541677     -0.114230E-12  0.114230E-12   212.820       212.820    
  13  0.508133     -0.677013     -0.142770E-12  0.142770E-12   213.829       213.829    
  14  0.340298      -1.07793     -0.227317E-12  0.227317E-12   214.409       214.409    
  15  0.119363      -2.12559     -0.448249E-12  0.448249E-12   214.759       214.759    
  16  0.131599      -2.02800     -0.427669E-12  0.427669E-12   215.071       215.071    
  17  0.749239     -0.288698     -0.608813E-13  0.608813E-13   215.164       215.164    
  18  0.291664      -1.23215     -0.259840E-12  0.259840E-12   215.655       215.655    
  19  0.302984      -1.19408     -0.251810E-12  0.251810E-12   215.701       215.701    
  20  0.801155     -0.221701     -0.467528E-13  0.467528E-13   215.969       215.969    
  21  0.234220      -1.45149     -0.306094E-12  0.306094E-12   216.105       216.105    
  22  0.841714     -0.172314     -0.363381E-13  0.363381E-13   216.230       216.230    
  23  0.366467      -1.00385     -0.211693E-12  0.211693E-12   216.880       216.880    
  24  0.765234     -0.267574     -0.564267E-13  0.564267E-13   217.102       217.102    
  25  0.662631     -0.411538     -0.867860E-13  0.867860E-13   217.644       217.644    
  26  0.644563     -0.439183     -0.926160E-13  0.926160E-13   218.263       218.263    
  27  0.221909      -1.50549     -0.317481E-12  0.317481E-12   218.364       218.364    
  28  0.515203     -0.663195     -0.139856E-12  0.139856E-12   218.532       218.532    
  29  0.181924E-01  -4.00675     -0.844953E-12  0.844953E-12   218.573       218.573    
  30  0.975845     -0.244519E-01 -0.515647E-14  0.515647E-14   218.696       218.696    
  31  0.847345     -0.165647     -0.349321E-13  0.349321E-13   219.138       219.138    
  32  0.722094     -0.325601     -0.686634E-13  0.686634E-13   219.565       219.565    
  33  0.961360E-01  -2.34199     -0.493885E-12  0.493885E-12   219.730       219.730    
  34  0.434102     -0.834477     -0.175976E-12  0.175976E-12   220.127       220.127    
  35  0.709799     -0.342774     -0.722850E-13  0.722850E-13   220.481       220.481    
  36  0.406710     -0.899654     -0.189721E-12  0.189721E-12   220.548       220.548    
  37  0.819132E-01  -2.50210     -0.527648E-12  0.527648E-12   220.576       220.576    
  38  0.103212      -2.27097     -0.478907E-12  0.478907E-12   220.782       220.782    
  39  0.894219     -0.111805     -0.235777E-13  0.235777E-13   221.103       221.103    
  40  0.676185     -0.391288     -0.825158E-13  0.825158E-13   221.131       221.131    
  41  0.794627     -0.229883     -0.484782E-13  0.484782E-13   221.266       221.266    
  42  0.855142E-01  -2.45907     -0.518575E-12  0.518575E-12   221.376       221.376    
  43  0.270001      -1.30933     -0.276115E-12  0.276115E-12   221.419       221.419    
  44  0.876360     -0.131978     -0.278318E-13  0.278318E-13   221.669       221.669    
  45  0.425925     -0.853492     -0.179986E-12  0.179986E-12   222.033       222.033    
  46  0.857400     -0.153851     -0.324445E-13  0.324445E-13   222.393       222.393    
  47  0.177728      -1.72750     -0.364300E-12  0.364300E-12   222.956       222.956    
  48  0.692644     -0.367239     -0.774442E-13  0.774442E-13   222.967       222.967    
  49  0.880732     -0.127002     -0.267825E-13  0.267825E-13   223.181       223.181    
  50  0.397963     -0.921395     -0.194306E-12  0.194306E-12   223.198       223.198    
  51  0.864123     -0.146040     -0.307972E-13  0.307972E-13   223.370       223.370    
  52  0.923078     -0.800420E-01 -0.168794E-13  0.168794E-13   223.611       223.611    
  53  0.555170     -0.588481     -0.124100E-12  0.124100E-12   223.636       223.636    
  54  0.854494     -0.157246     -0.331604E-13  0.331604E-13   224.083       224.083    
  55  0.461553     -0.773158     -0.163045E-12  0.163045E-12   224.348       224.348    
  56  0.591282     -0.525462     -0.110811E-12  0.110811E-12   224.505       224.505    
  57  0.697502     -0.360249     -0.759703E-13  0.759703E-13   224.746       224.746    
  58  0.724968     -0.321627     -0.678255E-13  0.678255E-13   225.528       225.528    
  59  0.521098     -0.651818     -0.137457E-12  0.137457E-12   225.699       225.699    
  60  0.109573      -2.21117     -0.466296E-12  0.466296E-12   225.717       225.717    
  61  0.345440      -1.06294     -0.224154E-12  0.224154E-12   203.055       203.055    
loop,thermsimp(1:2)       76  0.231258E-12  0.706900E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    279              204.59          0.80          0.47         20.34
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    204.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       76
neval is:      278
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       77
neval is:      278


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      281
neval,tstepnext:      278     281

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.845848     -0.167416     -0.353051E-13  0.353051E-13   198.488       198.488    
   2  0.232757      -1.45776     -0.307416E-12  0.307416E-12   203.055       203.055    
   3  0.340801      -1.07646     -0.227006E-12  0.227006E-12   204.213       204.213    
   4  0.736816     -0.305417     -0.644071E-13  0.644071E-13   204.446       204.446    
   5  0.184968      -1.68757     -0.355879E-12  0.355879E-12   204.760       204.760    
   6  0.379177     -0.969752     -0.204504E-12  0.204504E-12   206.414       206.414    
   7  0.544202     -0.608435     -0.128308E-12  0.128308E-12   206.556       206.556    
   8  0.611685     -0.491538     -0.103657E-12  0.103657E-12   207.841       207.841    
   9  0.922585     -0.805759E-01 -0.169920E-13  0.169920E-13   209.163       209.163    
  10  0.221378      -1.50788     -0.317986E-12  0.317986E-12   210.275       210.275    
  11  0.769685     -0.261774     -0.552034E-13  0.552034E-13   212.314       212.314    
  12  0.251634      -1.37978     -0.290971E-12  0.290971E-12   212.788       212.788    
  13  0.998176     -0.182534E-02 -0.384932E-15  0.384932E-15   212.820       212.820    
  14  0.857472E-01  -2.45635     -0.518001E-12  0.518001E-12   213.829       213.829    
  15  0.917051     -0.865918E-01 -0.182607E-13  0.182607E-13   214.409       214.409    
  16  0.536130E-01  -2.92596     -0.617034E-12  0.617034E-12   214.759       214.759    
  17  0.432093     -0.839114     -0.176954E-12  0.176954E-12   215.071       215.071    
  18  0.584241     -0.537442     -0.113337E-12  0.113337E-12   215.164       215.164    
  19  0.384143E-01  -3.25933     -0.687335E-12  0.687335E-12   215.655       215.655    
  20  0.958143     -0.427584E-01 -0.901699E-14  0.901699E-14   215.701       215.701    
  21  0.285076      -1.25500     -0.264657E-12  0.264657E-12   215.969       215.969    
  22  0.637859     -0.449638     -0.948208E-13  0.948208E-13   216.105       216.105    
  23  0.900489     -0.104817     -0.221040E-13  0.221040E-13   216.230       216.230    
  24  0.261275      -1.34218     -0.283042E-12  0.283042E-12   216.880       216.880    
  25  0.413157     -0.883929     -0.186405E-12  0.186405E-12   217.102       217.102    
  26  0.128467      -2.05209     -0.432749E-12  0.432749E-12   217.644       217.644    
  27  0.376113     -0.977865     -0.206214E-12  0.206214E-12   218.263       218.263    
  28  0.606688     -0.499741     -0.105387E-12  0.105387E-12   218.364       218.364    
  29  0.313350      -1.16043     -0.244715E-12  0.244715E-12   218.532       218.532    
  30  0.450555     -0.797275     -0.168131E-12  0.168131E-12   218.573       218.573    
  31  0.340043      -1.07868     -0.227475E-12  0.227475E-12   218.696       218.696    
  32  0.712338     -0.339202     -0.715318E-13  0.715318E-13   219.138       219.138    
  33  0.198527      -1.61683     -0.340961E-12  0.340961E-12   219.565       219.565    
  34  0.829183E-02  -4.79248     -0.101065E-11  0.101065E-11   219.730       219.730    
  35  0.919532     -0.838908E-01 -0.176911E-13  0.176911E-13   220.127       220.127    
  36  0.916312     -0.873985E-01 -0.184308E-13  0.184308E-13   220.481       220.481    
  37  0.784218     -0.243068     -0.512587E-13  0.512587E-13   220.548       220.548    
  38  0.742429     -0.297828     -0.628067E-13  0.628067E-13   220.576       220.576    
  39  0.368614     -0.998005     -0.210462E-12  0.210462E-12   220.782       220.782    
  40  0.149509      -1.90040     -0.400761E-12  0.400761E-12   221.103       221.103    
  41  0.177959      -1.72620     -0.364026E-12  0.364026E-12   221.131       221.131    
  42  0.305670E-01  -3.48783     -0.735523E-12  0.735523E-12   221.266       221.266    
  43  0.688175     -0.373712     -0.788092E-13  0.788092E-13   221.376       221.376    
  44  0.699477     -0.357422     -0.753740E-13  0.753740E-13   221.419       221.419    
  45  0.915726     -0.880385E-01 -0.185658E-13  0.185658E-13   221.669       221.669    
  46  0.803658     -0.218581     -0.460950E-13  0.460950E-13   222.033       222.033    
  47  0.304078      -1.19047     -0.251049E-12  0.251049E-12   222.393       222.393    
  48  0.421793     -0.863241     -0.182042E-12  0.182042E-12   222.956       222.956    
  49  0.368832     -0.997415     -0.210337E-12  0.210337E-12   222.967       222.967    
  50  0.881598     -0.126019     -0.265752E-13  0.265752E-13   223.181       223.181    
  51  0.592418     -0.523544     -0.110406E-12  0.110406E-12   223.198       223.198    
  52  0.373388     -0.985136     -0.207748E-12  0.207748E-12   223.370       223.370    
  53  0.648114     -0.433689     -0.914574E-13  0.914574E-13   223.611       223.611    
  54  0.121248      -2.10992     -0.444944E-12  0.444944E-12   223.636       223.636    
  55  0.472848     -0.748980     -0.157947E-12  0.157947E-12   224.083       224.083    
  56  0.345468      -1.06285     -0.224137E-12  0.224137E-12   224.348       224.348    
  57  0.290736      -1.23534     -0.260511E-12  0.260511E-12   224.505       224.505    
  58  0.617755     -0.481663     -0.101574E-12  0.101574E-12   224.746       224.746    
  59  0.159466      -1.83592     -0.387164E-12  0.387164E-12   225.528       225.528    
  60  0.259115      -1.35048     -0.284793E-12  0.284793E-12   225.699       225.699    
  61  0.676979     -0.390116     -0.822685E-13  0.822685E-13   204.595       204.595    
loop,thermsimp(1:2)       77  0.353051E-13  0.307416E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    280              211.32          0.80          0.46         20.36
Just calling func    0   0         23.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    211.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       77
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       78
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      281
neval,tstepnext:      279     281

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.541272     -0.613833     -0.129447E-12  0.129447E-12   198.488       198.488    
   2  0.159336      -1.83674     -0.387336E-12  0.387336E-12   203.055       203.055    
   3  0.593823     -0.521174     -0.109906E-12  0.109906E-12   204.213       204.213    
   4  0.724617     -0.322113     -0.679279E-13  0.679279E-13   204.446       204.446    
   5  0.490120     -0.713104     -0.150381E-12  0.150381E-12   204.595       204.595    
   6  0.262772      -1.33647     -0.281837E-12  0.281837E-12   204.760       204.760    
   7  0.255031      -1.36637     -0.288144E-12  0.288144E-12   206.414       206.414    
   8  0.933673E-01  -2.37121     -0.500047E-12  0.500047E-12   206.556       206.556    
   9  0.611502     -0.491837     -0.103720E-12  0.103720E-12   207.841       207.841    
  10  0.123704E-01  -4.39245     -0.926289E-12  0.926289E-12   209.163       209.163    
  11  0.283781      -1.25955     -0.265617E-12  0.265617E-12   210.275       210.275    
  12  0.538810     -0.618393     -0.130408E-12  0.130408E-12   212.314       212.314    
  13  0.435885     -0.830376     -0.175112E-12  0.175112E-12   212.788       212.788    
  14  0.954214     -0.468678E-01 -0.988359E-14  0.988359E-14   212.820       212.820    
  15  0.460460     -0.775530     -0.163546E-12  0.163546E-12   213.829       213.829    
  16  0.929514     -0.730929E-01 -0.154140E-13  0.154140E-13   214.409       214.409    
  17  0.524265     -0.645758     -0.136179E-12  0.136179E-12   214.759       214.759    
  18  0.767091     -0.265150     -0.559154E-13  0.559154E-13   215.071       215.071    
  19  0.812335     -0.207843     -0.438304E-13  0.438304E-13   215.164       215.164    
  20  0.235191      -1.44736     -0.305222E-12  0.305222E-12   215.655       215.655    
  21  0.688781     -0.372831     -0.786236E-13  0.786236E-13   215.701       215.701    
  22  0.885440E-01  -2.42426     -0.511233E-12  0.511233E-12   215.969       215.969    
  23  0.505577     -0.682055     -0.143833E-12  0.143833E-12   216.105       216.105    
  24  0.365848      -1.00554     -0.212050E-12  0.212050E-12   216.230       216.230    
  25  0.399674     -0.917106     -0.193401E-12  0.193401E-12   216.880       216.880    
  26  0.378065     -0.972689     -0.205123E-12  0.205123E-12   217.102       217.102    
  27  0.668296     -0.403023     -0.849905E-13  0.849905E-13   217.644       217.644    
  28  0.966593     -0.339777E-01 -0.716531E-14  0.716531E-14   218.263       218.263    
  29  0.318675      -1.14358     -0.241162E-12  0.241162E-12   218.364       218.364    
  30  0.841770     -0.172249     -0.363243E-13  0.363243E-13   218.532       218.532    
  31  0.263968      -1.33193     -0.280880E-12  0.280880E-12   218.573       218.573    
  32  0.688948     -0.372590     -0.785727E-13  0.785727E-13   218.696       218.696    
  33  0.208078      -1.56984     -0.331052E-12  0.331052E-12   219.138       219.138    
  34  0.710943     -0.341163     -0.719452E-13  0.719452E-13   219.565       219.565    
  35  0.881840     -0.125745     -0.265174E-13  0.265174E-13   219.730       219.730    
  36  0.414912     -0.879689     -0.185511E-12  0.185511E-12   220.127       220.127    
  37  0.645151     -0.438270     -0.924235E-13  0.924235E-13   220.481       220.481    
  38  0.929493     -0.731165E-01 -0.154190E-13  0.154190E-13   220.548       220.548    
  39  0.249718      -1.38742     -0.292583E-12  0.292583E-12   220.576       220.576    
  40  0.260171      -1.34641     -0.283935E-12  0.283935E-12   220.782       220.782    
  41  0.305893      -1.18452     -0.249794E-12  0.249794E-12   221.103       221.103    
  42  0.279938      -1.27319     -0.268493E-12  0.268493E-12   221.131       221.131    
  43  0.713152     -0.338060     -0.712910E-13  0.712910E-13   221.266       221.266    
  44  0.799870     -0.223306     -0.470913E-13  0.470913E-13   221.376       221.376    
  45  0.956293     -0.446914E-01 -0.942463E-14  0.942463E-14   221.419       221.419    
  46  0.343146      -1.06960     -0.225560E-12  0.225560E-12   221.669       221.669    
  47  0.280817      -1.27005     -0.267831E-12  0.267831E-12   222.033       222.033    
  48  0.337889      -1.08504     -0.228815E-12  0.228815E-12   222.393       222.393    
  49  0.647789     -0.434191     -0.915632E-13  0.915632E-13   222.956       222.956    
  50  0.801343     -0.221466     -0.467032E-13  0.467032E-13   222.967       222.967    
  51  0.694928     -0.363947     -0.767501E-13  0.767501E-13   223.181       223.181    
  52  0.115082E-01  -4.46470     -0.941526E-12  0.941526E-12   223.198       223.198    
  53  0.674255     -0.394147     -0.831186E-13  0.831186E-13   223.370       223.370    
  54  0.611079     -0.492530     -0.103866E-12  0.103866E-12   223.611       223.611    
  55  0.613563     -0.488473     -0.103010E-12  0.103010E-12   223.636       223.636    
  56  0.419240     -0.869311     -0.183322E-12  0.183322E-12   224.083       224.083    
  57  0.733880     -0.309410     -0.652491E-13  0.652491E-13   224.348       224.348    
  58  0.709146     -0.343694     -0.724791E-13  0.724791E-13   224.505       224.505    
  59  0.705049     -0.349488     -0.737008E-13  0.737008E-13   224.746       224.746    
  60  0.277885      -1.28055     -0.270045E-12  0.270045E-12   225.528       225.528    
  61  0.434665     -0.833180     -0.175703E-12  0.175703E-12   211.316       211.316    
loop,thermsimp(1:2)       78  0.129447E-12  0.387336E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    281              231.95          0.78          0.47         20.39
Just calling func    0   0         23.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    282              213.69          0.77          0.46         20.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    231.95        2.419     -1.842      4.004     -100.0     0.2975    
                     -0.3123      1.110     -100.0      2.889     -1.126    
                     -0.6072E-01 -1.988      2.009      0.000     0.6600    
                      -1.123     -20.00      0.000      0.000     -1.221    

                      -1.600      6811.      9138.     -553.2     -1451.    
                      -4.215     -5.757     -4.531     -15.33     -5.168    
                      -13.08     -2.679     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.5411E-01-0.6711E-01  0.000    -0.1432    
                     -0.2180    -0.1462    -0.1658    -0.2028    -0.8697E-02

                     -0.7123     -2.772      1.382     0.2050     0.3482E-01
                      0.6915E-01-0.4083E-01-0.1314    -0.4865E-01-0.7171E-01
                     -0.8216E-01 0.8271E-01-0.2379     -3.108      1.382    

                      -1.366     -1.738      3397.      2289.      0.000    
                       0.000      9.150      8.456      0.000     0.1000    
                       1.251      1.251      9.150      8.899     -119.3    

                      0.1000      1.251      1.251      9.250      9.101    
                      -611.8     0.1000     0.3834     0.8602      9.350    
                       9.217      7977.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    213.69
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       78
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       79
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      281
neval,tstepnext:      281     281

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.567621     -0.566301     -0.119423E-12  0.119423E-12   198.488       198.488    
   2  0.284355      -1.25753     -0.265191E-12  0.265191E-12   203.055       203.055    
   3  0.575153     -0.553119     -0.116643E-12  0.116643E-12   204.213       204.213    
   4  0.445417     -0.808745     -0.170550E-12  0.170550E-12   204.446       204.446    
   5  0.923265     -0.798387E-01 -0.168366E-13  0.168366E-13   204.595       204.595    
   6  0.537112     -0.621549     -0.131074E-12  0.131074E-12   204.760       204.760    
   7  0.189777      -1.66191     -0.350467E-12  0.350467E-12   206.414       206.414    
   8  0.834369     -0.181080     -0.381866E-13  0.381866E-13   206.556       206.556    
   9  0.690391     -0.370498     -0.781315E-13  0.781315E-13   207.841       207.841    
  10  0.718273     -0.330906     -0.697823E-13  0.697823E-13   209.163       209.163    
  11  0.444714     -0.810324     -0.170883E-12  0.170883E-12   210.275       210.275    
  12  0.791123     -0.234302     -0.494101E-13  0.494101E-13   211.316       211.316    
  13  0.721724     -0.326113     -0.687714E-13  0.687714E-13   212.314       212.314    
  14  0.557497     -0.584299     -0.123218E-12  0.123218E-12   212.788       212.788    
  15  0.356376      -1.03177     -0.217582E-12  0.217582E-12   212.820       212.820    
  16  0.533629     -0.628054     -0.132445E-12  0.132445E-12   213.829       213.829    
  17  0.625419     -0.469334     -0.989742E-13  0.989742E-13   214.409       214.409    
  18  0.932094     -0.703221E-01 -0.148297E-13  0.148297E-13   214.759       214.759    
  19  0.783911     -0.243460     -0.513415E-13  0.513415E-13   215.071       215.071    
  20  0.709793     -0.342781     -0.722865E-13  0.722865E-13   215.164       215.164    
  21  0.416206     -0.876574     -0.184854E-12  0.184854E-12   215.655       215.655    
  22  0.991091     -0.894912E-02 -0.188721E-14  0.188721E-14   215.701       215.701    
  23  0.984829     -0.152876E-01 -0.322389E-14  0.322389E-14   215.969       215.969    
  24  0.331452      -1.10427     -0.232872E-12  0.232872E-12   216.105       216.105    
  25  0.542910     -0.610811     -0.128809E-12  0.128809E-12   216.230       216.230    
  26  0.779012     -0.249729     -0.526635E-13  0.526635E-13   216.880       216.880    
  27  0.722388     -0.325193     -0.685776E-13  0.685776E-13   217.102       217.102    
  28  0.178499      -1.72317     -0.363387E-12  0.363387E-12   217.644       217.644    
  29  0.540598     -0.615080     -0.129710E-12  0.129710E-12   218.263       218.263    
  30  0.311330      -1.16690     -0.246079E-12  0.246079E-12   218.364       218.364    
  31  0.471275     -0.752313     -0.158650E-12  0.158650E-12   218.532       218.532    
  32  0.636527     -0.451729     -0.952617E-13  0.952617E-13   218.573       218.573    
  33  0.996994     -0.301025E-02 -0.634808E-15  0.634808E-15   218.696       218.696    
  34  0.948066     -0.533307E-01 -0.112465E-13  0.112465E-13   219.138       219.138    
  35  0.916364     -0.873412E-01 -0.184187E-13  0.184187E-13   219.565       219.565    
  36  0.840924     -0.173254     -0.365362E-13  0.365362E-13   219.730       219.730    
  37  0.359281      -1.02365     -0.215870E-12  0.215870E-12   220.127       220.127    
  38  0.638738     -0.448261     -0.945304E-13  0.945304E-13   220.481       220.481    
  39  0.396338     -0.925488     -0.195169E-12  0.195169E-12   220.548       220.548    
  40  0.578606     -0.547133     -0.115381E-12  0.115381E-12   220.576       220.576    
  41  0.417393E-01  -3.17631     -0.669828E-12  0.669828E-12   220.782       220.782    
  42  0.103366      -2.26948     -0.478594E-12  0.478594E-12   221.103       221.103    
  43  0.298275      -1.20974     -0.255113E-12  0.255113E-12   221.131       221.131    
  44  0.669328     -0.401481     -0.846653E-13  0.846653E-13   221.266       221.266    
  45  0.988793     -0.112703E-01 -0.237670E-14  0.237670E-14   221.376       221.376    
  46  0.720445     -0.327887     -0.691455E-13  0.691455E-13   221.419       221.419    
  47  0.428828     -0.846698     -0.178554E-12  0.178554E-12   221.669       221.669    
  48  0.569664     -0.562709     -0.118665E-12  0.118665E-12   222.033       222.033    
  49  0.430110     -0.843715     -0.177925E-12  0.177925E-12   222.393       222.393    
  50  0.879539     -0.128358     -0.270684E-13  0.270684E-13   222.956       222.956    
  51  0.333748      -1.09737     -0.231416E-12  0.231416E-12   222.967       222.967    
  52  0.592856     -0.522804     -0.110250E-12  0.110250E-12   223.181       223.181    
  53  0.576804     -0.550253     -0.116039E-12  0.116039E-12   223.198       223.198    
  54  0.613778     -0.488123     -0.102936E-12  0.102936E-12   223.370       223.370    
  55  0.744129     -0.295540     -0.623243E-13  0.623243E-13   223.611       223.611    
  56  0.988403     -0.116650E-01 -0.245994E-14  0.245994E-14   223.636       223.636    
  57  0.576009     -0.551632     -0.116329E-12  0.116329E-12   224.083       224.083    
  58  0.198986      -1.61452     -0.340474E-12  0.340474E-12   224.348       224.348    
  59  0.313458E-02  -5.76526     -0.121579E-11  0.121579E-11   224.505       224.505    
  60  0.877350     -0.130849     -0.275937E-13  0.275937E-13   224.746       224.746    
  61  0.915833     -0.879210E-01 -0.185410E-13  0.185410E-13   213.685       213.685    
loop,thermsimp(1:2)       79  0.119423E-12  0.265191E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    283              217.91          0.80          0.47         20.35
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    217.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       79
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.210882E-12           281
loop is:       80
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.421765E-13           291

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      291
neval,tstepnext:      282     291

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.826711     -0.190300     -0.802619E-14  0.802619E-14   198.488       198.488    
   2  0.321083      -1.13606     -0.479149E-13  0.479149E-13   203.055       203.055    
   3  0.598697     -0.512999     -0.216365E-13  0.216365E-13   204.213       204.213    
   4  0.221937      -1.50536     -0.634909E-13  0.634909E-13   204.446       204.446    
   5  0.163330      -1.81198     -0.764229E-13  0.764229E-13   204.595       204.595    
   6  0.891062     -0.115341     -0.486469E-14  0.486469E-14   204.760       204.760    
   7  0.988029     -0.120427E-01 -0.507920E-15  0.507920E-15   206.414       206.414    
   8  0.549851     -0.598107     -0.252260E-13  0.252260E-13   206.556       206.556    
   9  0.535024E-01  -2.92803     -0.123494E-12  0.123494E-12   207.841       207.841    
  10  0.727808     -0.317717     -0.134002E-13  0.134002E-13   209.163       209.163    
  11  0.175874      -1.73799     -0.733022E-13  0.733022E-13   210.275       210.275    
  12  0.610387     -0.493663     -0.208209E-13  0.208209E-13   211.316       211.316    
  13  0.403518     -0.907534     -0.382766E-13  0.382766E-13   212.314       212.314    
  14  0.893449     -0.112666     -0.475188E-14  0.475188E-14   212.788       212.788    
  15  0.836017     -0.179106     -0.755406E-14  0.755406E-14   212.820       212.820    
  16  0.378636     -0.971181     -0.409610E-13  0.409610E-13   213.685       213.685    
  17  0.999209     -0.791116E-03 -0.333665E-16  0.333665E-16   213.829       213.829    
  18  0.452189     -0.793656     -0.334736E-13  0.334736E-13   214.409       214.409    
  19  0.458760     -0.779229     -0.328651E-13  0.328651E-13   214.759       214.759    
  20  0.971876     -0.285275E-01 -0.120319E-14  0.120319E-14   215.071       215.071    
  21  0.257435      -1.35699     -0.572330E-13  0.572330E-13   215.164       215.164    
  22  0.934136     -0.681337E-01 -0.287364E-14  0.287364E-14   215.655       215.655    
  23  0.460798     -0.774796     -0.326782E-13  0.326782E-13   215.701       215.701    
  24  0.501955     -0.689245     -0.290699E-13  0.290699E-13   215.969       215.969    
  25  0.980118     -0.200825E-01 -0.847010E-15  0.847010E-15   216.105       216.105    
  26  0.211362      -1.55418     -0.655500E-13  0.655500E-13   216.230       216.230    
  27  0.828461     -0.188186     -0.793702E-14  0.793702E-14   216.880       216.880    
  28  0.234521      -1.45021     -0.611648E-13  0.611648E-13   217.102       217.102    
  29  0.677777     -0.388937     -0.164040E-13  0.164040E-13   217.644       217.644    
  30  0.833199     -0.182482     -0.769646E-14  0.769646E-14   218.263       218.263    
  31  0.741291     -0.299362     -0.126260E-13  0.126260E-13   218.364       218.364    
  32  0.291225      -1.23366     -0.520314E-13  0.520314E-13   218.532       218.532    
  33  0.644952     -0.438579     -0.184977E-13  0.184977E-13   218.573       218.573    
  34  0.740591     -0.300307     -0.126659E-13  0.126659E-13   218.696       218.696    
  35  0.258445      -1.35307     -0.570679E-13  0.570679E-13   219.138       219.138    
  36  0.243478      -1.41273     -0.595840E-13  0.595840E-13   219.565       219.565    
  37  0.367453E-01  -3.30375     -0.139340E-12  0.139340E-12   219.730       219.730    
  38  0.927409     -0.753611E-01 -0.317847E-14  0.317847E-14   220.127       220.127    
  39  0.216741      -1.52905     -0.644900E-13  0.644900E-13   220.481       220.481    
  40  0.232411      -1.45925     -0.615459E-13  0.615459E-13   220.548       220.548    
  41  0.283231      -1.26149     -0.532053E-13  0.532053E-13   220.576       220.576    
  42  0.200127      -1.60880     -0.678537E-13  0.678537E-13   220.782       220.782    
  43  0.135084      -2.00186     -0.844314E-13  0.844314E-13   221.103       221.103    
  44  0.324346      -1.12594     -0.474883E-13  0.474883E-13   221.131       221.131    
  45  0.825120E-02  -4.79740     -0.202337E-12  0.202337E-12   221.266       221.266    
  46  0.680754     -0.384554     -0.162191E-13  0.162191E-13   221.376       221.376    
  47  0.458367     -0.780084     -0.329012E-13  0.329012E-13   221.419       221.419    
  48  0.826321     -0.190773     -0.804611E-14  0.804611E-14   221.669       221.669    
  49  0.783459E-04  -9.45438     -0.398752E-12  0.398752E-12   222.033       222.033    
  50  0.789618     -0.236206     -0.996234E-14  0.996234E-14   222.393       222.393    
  51  0.838262     -0.176424     -0.744095E-14  0.744095E-14   222.956       222.956    
  52  0.853185E-01  -2.46136     -0.103812E-12  0.103812E-12   222.967       222.967    
  53  0.786683     -0.239930     -0.101194E-13  0.101194E-13   223.181       223.181    
  54  0.131780      -2.02662     -0.854758E-13  0.854758E-13   223.198       223.198    
  55  0.213124      -1.54588     -0.651998E-13  0.651998E-13   223.370       223.370    
  56  0.832622     -0.183175     -0.772569E-14  0.772569E-14   223.611       223.611    
  57  0.601914     -0.507641     -0.214105E-13  0.214105E-13   223.636       223.636    
  58  0.469673     -0.755719     -0.318735E-13  0.318735E-13   224.083       224.083    
  59  0.143966      -1.93818     -0.817454E-13  0.817454E-13   224.348       224.348    
  60  0.998573     -0.142847E-02 -0.602477E-16  0.602477E-16   224.505       224.505    
  61  0.305662      -1.18528     -0.499908E-13  0.499908E-13   217.907       217.907    
loop,thermsimp(1:2)       80  0.802619E-14  0.479149E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    284              210.63          0.81          0.46         20.34
Just calling func    0   0         23.16


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    210.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       80
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       81
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      291
neval,tstepnext:      283     291

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.142658      -1.94731     -0.821305E-13  0.821305E-13   198.488       198.488    
   2  0.622523E-02  -5.07914     -0.214220E-12  0.214220E-12   203.055       203.055    
   3  0.416878     -0.874961     -0.369028E-13  0.369028E-13   204.213       204.213    
   4  0.803061E-01  -2.52191     -0.106365E-12  0.106365E-12   204.446       204.446    
   5  0.825594E-01  -2.49424     -0.105198E-12  0.105198E-12   204.595       204.595    
   6  0.617243     -0.482492     -0.203498E-13  0.203498E-13   204.760       204.760    
   7  0.711044     -0.341021     -0.143831E-13  0.143831E-13   206.414       206.414    
   8  0.328518      -1.11316     -0.469493E-13  0.469493E-13   206.556       206.556    
   9  0.562780     -0.574867     -0.242459E-13  0.242459E-13   207.841       207.841    
  10  0.438505E-01  -3.12697     -0.131885E-12  0.131885E-12   209.163       209.163    
  11  0.701180     -0.354990     -0.149722E-13  0.149722E-13   210.275       210.275    
  12  0.541290     -0.613799     -0.258879E-13  0.258879E-13   211.316       211.316    
  13  0.370602     -0.992627     -0.418655E-13  0.418655E-13   212.314       212.314    
  14  0.554267     -0.590108     -0.248887E-13  0.248887E-13   212.788       212.788    
  15  0.808144     -0.213015     -0.898421E-14  0.898421E-14   212.820       212.820    
  16  0.727121     -0.318662     -0.134401E-13  0.134401E-13   213.685       213.685    
  17  0.173009      -1.75441     -0.739949E-13  0.739949E-13   213.829       213.829    
  18  0.187749      -1.67265     -0.705464E-13  0.705464E-13   214.409       214.409    
  19  0.544899     -0.607154     -0.256076E-13  0.256076E-13   214.759       214.759    
  20  0.999892     -0.107982E-03 -0.455428E-17  0.455428E-17   215.071       215.071    
  21  0.917911     -0.856546E-01 -0.361261E-14  0.361261E-14   215.164       215.164    
  22  0.141769      -1.95356     -0.823941E-13  0.823941E-13   215.655       215.655    
  23  0.266947      -1.32070     -0.557027E-13  0.557027E-13   215.701       215.701    
  24  0.749733     -0.288038     -0.121484E-13  0.121484E-13   215.969       215.969    
  25  0.785596     -0.241313     -0.101777E-13  0.101777E-13   216.105       216.105    
  26  0.951138     -0.500966E-01 -0.211290E-14  0.211290E-14   216.230       216.230    
  27  0.227459      -1.48078     -0.624543E-13  0.624543E-13   216.880       216.880    
  28  0.474981     -0.744481     -0.313996E-13  0.313996E-13   217.102       217.102    
  29  0.987592     -0.124856E-01 -0.526600E-15  0.526600E-15   217.644       217.644    
  30  0.739874     -0.301276     -0.127067E-13  0.127067E-13   217.907       217.907    
  31  0.313494      -1.15998     -0.489237E-13  0.489237E-13   218.263       218.263    
  32  0.407463     -0.897805     -0.378663E-13  0.378663E-13   218.364       218.364    
  33  0.962795     -0.379144E-01 -0.159910E-14  0.159910E-14   218.532       218.532    
  34  0.554640     -0.589437     -0.248604E-13  0.248604E-13   218.573       218.573    
  35  0.329083E-01  -3.41403     -0.143992E-12  0.143992E-12   218.696       218.696    
  36  0.379181     -0.969742     -0.409003E-13  0.409003E-13   219.138       219.138    
  37  0.697305     -0.360532     -0.152060E-13  0.152060E-13   219.565       219.565    
  38  0.614756     -0.486530     -0.205201E-13  0.205201E-13   219.730       219.730    
  39  0.474947     -0.744552     -0.314026E-13  0.314026E-13   220.127       220.127    
  40  0.725262     -0.321222     -0.135480E-13  0.135480E-13   220.481       220.481    
  41  0.685603     -0.377457     -0.159198E-13  0.159198E-13   220.548       220.548    
  42  0.441734     -0.817049     -0.344602E-13  0.344602E-13   220.576       220.576    
  43  0.569799     -0.562471     -0.237231E-13  0.237231E-13   220.782       220.782    
  44  0.473073     -0.748505     -0.315693E-13  0.315693E-13   221.103       221.103    
  45  0.672961     -0.396068     -0.167047E-13  0.167047E-13   221.131       221.131    
  46  0.150917E-01  -4.19361     -0.176872E-12  0.176872E-12   221.266       221.266    
  47  0.367080      -1.00218     -0.422683E-13  0.422683E-13   221.376       221.376    
  48  0.966613     -0.339572E-01 -0.143220E-14  0.143220E-14   221.419       221.419    
  49  0.345965      -1.06142     -0.447669E-13  0.447669E-13   221.669       221.669    
  50  0.424821     -0.856088     -0.361068E-13  0.361068E-13   222.033       222.033    
  51  0.424612E-01  -3.15916     -0.133242E-12  0.133242E-12   222.393       222.393    
  52  0.544736     -0.607455     -0.256203E-13  0.256203E-13   222.956       222.956    
  53  0.614815     -0.486434     -0.205161E-13  0.205161E-13   222.967       222.967    
  54  0.914784     -0.890675E-01 -0.375656E-14  0.375656E-14   223.181       223.181    
  55  0.309215      -1.17372     -0.495033E-13  0.495033E-13   223.198       223.198    
  56  0.253859      -1.37098     -0.578229E-13  0.578229E-13   223.370       223.370    
  57  0.511246     -0.670905     -0.282964E-13  0.282964E-13   223.611       223.611    
  58  0.391650     -0.937387     -0.395357E-13  0.395357E-13   223.636       223.636    
  59  0.211626      -1.55294     -0.654973E-13  0.654973E-13   224.083       224.083    
  60  0.130523      -2.03621     -0.858801E-13  0.858801E-13   224.348       224.348    
  61  0.135790      -1.99665     -0.842115E-13  0.842115E-13   210.633       210.633    
loop,thermsimp(1:2)       81  0.821305E-13  0.214220E-12

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    285              204.17          0.80          0.47         20.31
Just calling func    0   0         23.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    204.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       81
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       82
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      291
neval,tstepnext:      284     291

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.769612     -0.261869     -0.110447E-13  0.110447E-13   198.488       198.488    
   2  0.271992      -1.30198     -0.549130E-13  0.549130E-13   203.055       203.055    
   3  0.756783E-01  -2.58126     -0.108869E-12  0.108869E-12   204.213       204.213    
   4  0.433213     -0.836526     -0.352817E-13  0.352817E-13   204.446       204.446    
   5  0.130154      -2.03904     -0.859994E-13  0.859994E-13   204.595       204.595    
   6  0.983761     -0.163726E-01 -0.690537E-15  0.690537E-15   204.760       204.760    
   7  0.449720     -0.799131     -0.337045E-13  0.337045E-13   206.414       206.414    
   8  0.163119      -1.81328     -0.764777E-13  0.764777E-13   206.556       206.556    
   9  0.731421     -0.312766     -0.131914E-13  0.131914E-13   207.841       207.841    
  10  0.807011     -0.214418     -0.904339E-14  0.904339E-14   209.163       209.163    
  11  0.835064     -0.180247     -0.760220E-14  0.760220E-14   210.275       210.275    
  12  0.673187E-01  -2.69832     -0.113806E-12  0.113806E-12   210.633       210.633    
  13  0.604541E-01  -2.80587     -0.118342E-12  0.118342E-12   211.316       211.316    
  14  0.111388      -2.19473     -0.925661E-13  0.925661E-13   212.314       212.314    
  15  0.110687      -2.20104     -0.928323E-13  0.928323E-13   212.788       212.788    
  16  0.275939      -1.28758     -0.543054E-13  0.543054E-13   212.820       212.820    
  17  0.833459     -0.182170     -0.768330E-14  0.768330E-14   213.685       213.685    
  18  0.186568      -1.67896     -0.708126E-13  0.708126E-13   213.829       213.829    
  19  0.726369     -0.319698     -0.134837E-13  0.134837E-13   214.409       214.409    
  20  0.274572      -1.29254     -0.545148E-13  0.545148E-13   214.759       214.759    
  21  0.739296E-01  -2.60464     -0.109855E-12  0.109855E-12   215.071       215.071    
  22  0.763922     -0.269290     -0.113577E-13  0.113577E-13   215.164       215.164    
  23  0.798210     -0.225383     -0.950586E-14  0.950586E-14   215.655       215.655    
  24  0.877936     -0.130181     -0.549060E-14  0.549060E-14   215.701       215.701    
  25  0.770474     -0.260749     -0.109975E-13  0.109975E-13   215.969       215.969    
  26  0.307806      -1.17828     -0.496959E-13  0.496959E-13   216.105       216.105    
  27  0.773461     -0.256881     -0.108343E-13  0.108343E-13   216.230       216.230    
  28  0.238953      -1.43149     -0.603751E-13  0.603751E-13   216.880       216.880    
  29  0.728131E-01  -2.61986     -0.110496E-12  0.110496E-12   217.102       217.102    
  30  0.646910E-01  -2.73813     -0.115485E-12  0.115485E-12   217.644       217.644    
  31  0.384477     -0.955871     -0.403153E-13  0.403153E-13   217.907       217.907    
  32  0.858796     -0.152223     -0.642025E-14  0.642025E-14   218.263       218.263    
  33  0.930258     -0.722930E-01 -0.304906E-14  0.304906E-14   218.364       218.364    
  34  0.967894     -0.326326E-01 -0.137633E-14  0.137633E-14   218.532       218.532    
  35  0.957850     -0.430643E-01 -0.181630E-14  0.181630E-14   218.573       218.573    
  36  0.737752     -0.304148     -0.128279E-13  0.128279E-13   218.696       218.696    
  37  0.448244     -0.802418     -0.338432E-13  0.338432E-13   219.138       219.138    
  38  0.332123      -1.10225     -0.464890E-13  0.464890E-13   219.565       219.565    
  39  0.513527     -0.666453     -0.281086E-13  0.281086E-13   219.730       219.730    
  40  0.152840      -1.87836     -0.792228E-13  0.792228E-13   220.127       220.127    
  41  0.885652     -0.121431     -0.512153E-14  0.512153E-14   220.481       220.481    
  42  0.367495      -1.00104     -0.422205E-13  0.422205E-13   220.548       220.548    
  43  0.430772     -0.842175     -0.355200E-13  0.355200E-13   220.576       220.576    
  44  0.373305     -0.985359     -0.415590E-13  0.415590E-13   220.782       220.782    
  45  0.941928     -0.598266E-01 -0.252327E-14  0.252327E-14   221.103       221.103    
  46  0.237787      -1.43638     -0.605815E-13  0.605815E-13   221.131       221.131    
  47  0.813736     -0.206120     -0.869340E-14  0.869340E-14   221.266       221.266    
  48  0.394382     -0.930436     -0.392425E-13  0.392425E-13   221.376       221.376    
  49  0.482347     -0.729092     -0.307505E-13  0.307505E-13   221.419       221.419    
  50  0.692799     -0.367016     -0.154794E-13  0.154794E-13   221.669       221.669    
  51  0.800907     -0.222010     -0.936360E-14  0.936360E-14   222.033       222.033    
  52  0.385976     -0.951981     -0.401512E-13  0.401512E-13   222.393       222.393    
  53  0.787641     -0.238712     -0.100680E-13  0.100680E-13   222.956       222.956    
  54  0.448710     -0.801379     -0.337993E-13  0.337993E-13   222.967       222.967    
  55  0.601474     -0.508372     -0.214413E-13  0.214413E-13   223.181       223.181    
  56  0.518103     -0.657581     -0.277344E-13  0.277344E-13   223.198       223.198    
  57  0.576720     -0.550398     -0.232139E-13  0.232139E-13   223.370       223.370    
  58  0.684171     -0.379548     -0.160080E-13  0.160080E-13   223.611       223.611    
  59  0.317676      -1.14672     -0.483648E-13  0.483648E-13   223.636       223.636    
  60  0.671526     -0.398203     -0.167948E-13  0.167948E-13   224.083       224.083    
  61  0.608260     -0.497153     -0.209681E-13  0.209681E-13   204.171       204.171    
loop,thermsimp(1:2)       82  0.110447E-13  0.549130E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    286              210.86          0.79          0.47         20.35
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    210.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       82
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       83
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      291
neval,tstepnext:      285     291

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.789184     -0.236756     -0.998552E-14  0.998552E-14   198.488       198.488    
   2  0.445856     -0.807759     -0.340684E-13  0.340684E-13   203.055       203.055    
   3  0.164157      -1.80693     -0.762101E-13  0.762101E-13   204.171       204.171    
   4  0.458108     -0.780649     -0.329250E-13  0.329250E-13   204.213       204.213    
   5  0.880894     -0.126818     -0.534875E-14  0.534875E-14   204.446       204.446    
   6  0.902592     -0.102485     -0.432244E-14  0.432244E-14   204.595       204.595    
   7  0.880078E-01  -2.43033     -0.102503E-12  0.102503E-12   204.760       204.760    
   8  0.276872      -1.28420     -0.541631E-13  0.541631E-13   206.414       206.414    
   9  0.979652     -0.205580E-01 -0.867065E-15  0.867065E-15   206.556       206.556    
  10  0.875259     -0.133235     -0.561938E-14  0.561938E-14   207.841       207.841    
  11  0.591272     -0.525479     -0.221628E-13  0.221628E-13   209.163       209.163    
  12  0.360742      -1.01959     -0.430028E-13  0.430028E-13   210.275       210.275    
  13  0.306018      -1.18411     -0.499416E-13  0.499416E-13   210.633       210.633    
  14  0.973830     -0.265188E-01 -0.111847E-14  0.111847E-14   211.316       211.316    
  15  0.690092     -0.370930     -0.156445E-13  0.156445E-13   212.314       212.314    
  16  0.435662     -0.830889     -0.350440E-13  0.350440E-13   212.788       212.788    
  17  0.799969     -0.223183     -0.941306E-14  0.941306E-14   212.820       212.820    
  18  0.267003      -1.32049     -0.556938E-13  0.556938E-13   213.685       213.685    
  19  0.194802      -1.63577     -0.689910E-13  0.689910E-13   213.829       213.829    
  20  0.834903     -0.180439     -0.761029E-14  0.761029E-14   214.409       214.409    
  21  0.591563     -0.524987     -0.221421E-13  0.221421E-13   214.759       214.759    
  22  0.967434     -0.331079E-01 -0.139637E-14  0.139637E-14   215.071       215.071    
  23  0.161880      -1.82090     -0.767991E-13  0.767991E-13   215.164       215.164    
  24  0.660011     -0.415499     -0.175243E-13  0.175243E-13   215.655       215.655    
  25  0.281863      -1.26633     -0.534095E-13  0.534095E-13   215.701       215.701    
  26  0.413980     -0.881937     -0.371970E-13  0.371970E-13   215.969       215.969    
  27  0.150066      -1.89668     -0.799952E-13  0.799952E-13   216.105       216.105    
  28  0.902032E-01  -2.40569     -0.101464E-12  0.101464E-12   216.230       216.230    
  29  0.534382E-01  -2.92923     -0.123545E-12  0.123545E-12   216.880       216.880    
  30  0.251583      -1.37998     -0.582028E-13  0.582028E-13   217.102       217.102    
  31  0.541159     -0.614043     -0.258982E-13  0.258982E-13   217.644       217.644    
  32  0.131061      -2.03209     -0.857065E-13  0.857065E-13   217.907       217.907    
  33  0.198212      -1.61842     -0.682591E-13  0.682591E-13   218.263       218.263    
  34  0.337228      -1.08700     -0.458457E-13  0.458457E-13   218.364       218.364    
  35  0.700758     -0.355593     -0.149977E-13  0.149977E-13   218.532       218.532    
  36  0.234618      -1.44980     -0.611473E-13  0.611473E-13   218.573       218.573    
  37  0.985699     -0.144047E-01 -0.607539E-15  0.607539E-15   218.696       218.696    
  38  0.477241     -0.739733     -0.311993E-13  0.311993E-13   219.138       219.138    
  39  0.991667     -0.836794E-02 -0.352930E-15  0.352930E-15   219.565       219.565    
  40  0.137908      -1.98117     -0.835586E-13  0.835586E-13   219.730       219.730    
  41  0.351445      -1.04570     -0.441041E-13  0.441041E-13   220.127       220.127    
  42  0.375198     -0.980300     -0.413456E-13  0.413456E-13   220.481       220.481    
  43  0.256781      -1.35953     -0.573403E-13  0.573403E-13   220.548       220.548    
  44  0.870414     -0.138787     -0.585354E-14  0.585354E-14   220.576       220.576    
  45  0.521510     -0.651027     -0.274580E-13  0.274580E-13   220.782       220.782    
  46  0.818263     -0.200571     -0.845938E-14  0.845938E-14   221.103       221.103    
  47  0.853952     -0.157881     -0.665885E-14  0.665885E-14   221.131       221.131    
  48  0.404587     -0.904887     -0.381650E-13  0.381650E-13   221.266       221.266    
  49  0.529546     -0.635736     -0.268131E-13  0.268131E-13   221.376       221.376    
  50  0.146961      -1.91759     -0.808772E-13  0.808772E-13   221.419       221.419    
  51  0.280443      -1.27139     -0.536225E-13  0.536225E-13   221.669       221.669    
  52  0.626052     -0.468322     -0.197522E-13  0.197522E-13   222.033       222.033    
  53  0.246193E-01  -3.70422     -0.156231E-12  0.156231E-12   222.393       222.393    
  54  0.986450     -0.136428E-01 -0.575406E-15  0.575406E-15   222.956       222.956    
  55  0.196376      -1.62773     -0.686517E-13  0.686517E-13   222.967       222.967    
  56  0.739155     -0.302247     -0.127477E-13  0.127477E-13   223.181       223.181    
  57  0.518168     -0.657455     -0.277291E-13  0.277291E-13   223.198       223.198    
  58  0.323987      -1.12705     -0.475351E-13  0.475351E-13   223.370       223.370    
  59  0.518188     -0.657416     -0.277275E-13  0.277275E-13   223.611       223.611    
  60  0.991368     -0.866919E-02 -0.365636E-15  0.365636E-15   223.636       223.636    
  61  0.296760E-01  -3.51742     -0.148352E-12  0.148352E-12   210.860       210.860    
loop,thermsimp(1:2)       83  0.998552E-14  0.340684E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    287              197.57          0.80          0.47         20.31
Just calling func    0   0         23.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    288              194.05          0.77          0.46         20.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    194.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       83
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       84
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      291
neval,tstepnext:      287     291

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.161292      -1.82454     -0.769525E-13  0.769525E-13   198.488       198.488    
   2  0.537396     -0.621019     -0.261924E-13  0.261924E-13   203.055       203.055    
   3  0.454396     -0.788787     -0.332682E-13  0.332682E-13   204.171       204.171    
   4  0.784195     -0.243097     -0.102530E-13  0.102530E-13   204.213       204.213    
   5  0.253278      -1.37327     -0.579196E-13  0.579196E-13   204.446       204.446    
   6  0.138939      -1.97372     -0.832446E-13  0.832446E-13   204.595       204.595    
   7  0.588796     -0.529676     -0.223399E-13  0.223399E-13   204.760       204.760    
   8  0.414791     -0.879981     -0.371145E-13  0.371145E-13   206.414       206.414    
   9  0.432627     -0.837880     -0.353388E-13  0.353388E-13   206.556       206.556    
  10  0.139801      -1.96753     -0.829837E-13  0.829837E-13   207.841       207.841    
  11  0.213171      -1.54566     -0.651906E-13  0.651906E-13   209.163       209.163    
  12  0.473978     -0.746595     -0.314887E-13  0.314887E-13   210.275       210.275    
  13  0.713607     -0.337423     -0.142313E-13  0.142313E-13   210.633       210.633    
  14  0.909813     -0.945165E-01 -0.398637E-14  0.398637E-14   210.860       210.860    
  15  0.753388     -0.283174     -0.119433E-13  0.119433E-13   211.316       211.316    
  16  0.191457      -1.65309     -0.697215E-13  0.697215E-13   212.314       212.314    
  17  0.487051     -0.719386     -0.303411E-13  0.303411E-13   212.788       212.788    
  18  0.449343     -0.799969     -0.337399E-13  0.337399E-13   212.820       212.820    
  19  0.167578      -1.78630     -0.753400E-13  0.753400E-13   213.685       213.685    
  20  0.469924     -0.755184     -0.318510E-13  0.318510E-13   213.829       213.829    
  21  0.622518E-01  -2.77657     -0.117106E-12  0.117106E-12   214.409       214.409    
  22  0.888111     -0.118659     -0.500460E-14  0.500460E-14   214.759       214.759    
  23  0.196457      -1.62731     -0.686343E-13  0.686343E-13   215.071       215.071    
  24  0.456494E-01  -3.08677     -0.130189E-12  0.130189E-12   215.164       215.164    
  25  0.808538E-01  -2.51511     -0.106079E-12  0.106079E-12   215.655       215.655    
  26  0.293796      -1.22487     -0.516607E-13  0.516607E-13   215.701       215.701    
  27  0.257902      -1.35517     -0.571565E-13  0.571565E-13   215.969       215.969    
  28  0.152531      -1.88039     -0.793081E-13  0.793081E-13   216.105       216.105    
  29  0.171975      -1.76040     -0.742476E-13  0.742476E-13   216.230       216.230    
  30  0.503193     -0.686781     -0.289660E-13  0.289660E-13   216.880       216.880    
  31  0.814282     -0.205448     -0.866508E-14  0.866508E-14   217.102       217.102    
  32  0.576437     -0.550890     -0.232346E-13  0.232346E-13   217.644       217.644    
  33  0.457944     -0.781009     -0.329402E-13  0.329402E-13   217.907       217.907    
  34  0.776130     -0.253435     -0.106890E-13  0.106890E-13   218.263       218.263    
  35  0.868283     -0.141237     -0.595688E-14  0.595688E-14   218.364       218.364    
  36  0.152844      -1.87834     -0.792218E-13  0.792218E-13   218.532       218.532    
  37  0.871455     -0.137591     -0.580309E-14  0.580309E-14   218.573       218.573    
  38  0.573423     -0.556132     -0.234557E-13  0.234557E-13   218.696       218.696    
  39  0.952516     -0.486480E-01 -0.205180E-14  0.205180E-14   219.138       219.138    
  40  0.182499E-01  -4.00360     -0.168858E-12  0.168858E-12   219.565       219.565    
  41  0.465481     -0.764684     -0.322517E-13  0.322517E-13   219.730       219.730    
  42  0.260975      -1.34333     -0.566569E-13  0.566569E-13   220.127       220.127    
  43  0.844429     -0.169095     -0.713183E-14  0.713183E-14   220.481       220.481    
  44  0.190310      -1.65910     -0.699750E-13  0.699750E-13   220.548       220.548    
  45  0.908245     -0.962411E-01 -0.405911E-14  0.405911E-14   220.576       220.576    
  46  0.917434     -0.861743E-01 -0.363453E-14  0.363453E-14   220.782       220.782    
  47  0.498007     -0.697141     -0.294029E-13  0.294029E-13   221.103       221.103    
  48  0.200548E-01  -3.90929     -0.164880E-12  0.164880E-12   221.131       221.131    
  49  0.346353      -1.06030     -0.447196E-13  0.447196E-13   221.266       221.266    
  50  0.604830     -0.502807     -0.212066E-13  0.212066E-13   221.376       221.376    
  51  0.545877     -0.605362     -0.255320E-13  0.255320E-13   221.419       221.419    
  52  0.475613     -0.743151     -0.313435E-13  0.313435E-13   221.669       221.669    
  53  0.963257     -0.374353E-01 -0.157889E-14  0.157889E-14   222.033       222.033    
  54  0.111388      -2.19473     -0.925661E-13  0.925661E-13   222.393       222.393    
  55  0.100468      -2.29791     -0.969179E-13  0.969179E-13   222.956       222.956    
  56  0.922729     -0.804195E-01 -0.339181E-14  0.339181E-14   222.967       222.967    
  57  0.925654     -0.772552E-01 -0.325835E-14  0.325835E-14   223.181       223.181    
  58  0.590801     -0.526276     -0.221965E-13  0.221965E-13   223.198       223.198    
  59  0.361267      -1.01814     -0.429415E-13  0.429415E-13   223.370       223.370    
  60  0.139221      -1.97169     -0.831590E-13  0.831590E-13   223.611       223.611    
  61  0.479998     -0.733973     -0.309564E-13  0.309564E-13   194.053       194.053    
loop,thermsimp(1:2)       84  0.769525E-13  0.261924E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    289              195.00          0.82          0.46         20.34
Just calling func    0   0         23.18


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       84
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       85
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      291
neval,tstepnext:      288     291

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980195     -0.200040E-01 -0.843698E-15  0.843698E-15   194.053       194.053    
   2  0.579603     -0.545411     -0.230035E-13  0.230035E-13   198.488       198.488    
   3  0.640653     -0.445267     -0.187798E-13  0.187798E-13   203.055       203.055    
   4  0.176994      -1.73164     -0.730343E-13  0.730343E-13   204.171       204.171    
   5  0.454797E-01  -3.09049     -0.130346E-12  0.130346E-12   204.213       204.213    
   6  0.400020     -0.916242     -0.386439E-13  0.386439E-13   204.446       204.446    
   7  0.211465      -1.55370     -0.655294E-13  0.655294E-13   204.595       204.595    
   8  0.208832      -1.56622     -0.660578E-13  0.660578E-13   204.760       204.760    
   9  0.447586     -0.803886     -0.339051E-13  0.339051E-13   206.414       206.414    
  10  0.967789     -0.327410E-01 -0.138090E-14  0.138090E-14   206.556       206.556    
  11  0.942465     -0.592560E-01 -0.249921E-14  0.249921E-14   207.841       207.841    
  12  0.849041     -0.163648     -0.690208E-14  0.690208E-14   209.163       209.163    
  13  0.559112     -0.581406     -0.245217E-13  0.245217E-13   210.275       210.275    
  14  0.749263     -0.288666     -0.121749E-13  0.121749E-13   210.633       210.633    
  15  0.178491      -1.72322     -0.726793E-13  0.726793E-13   210.860       210.860    
  16  0.309496      -1.17281     -0.494651E-13  0.494651E-13   211.316       211.316    
  17  0.658115     -0.418375     -0.176456E-13  0.176456E-13   212.314       212.314    
  18  0.513260     -0.666973     -0.281306E-13  0.281306E-13   212.788       212.788    
  19  0.152490      -1.88066     -0.793196E-13  0.793196E-13   212.820       212.820    
  20  0.204252      -1.58840     -0.669931E-13  0.669931E-13   213.685       213.685    
  21  0.684317     -0.379333     -0.159989E-13  0.159989E-13   213.829       213.829    
  22  0.122552      -2.09922     -0.885376E-13  0.885376E-13   214.409       214.409    
  23  0.986236     -0.138600E-01 -0.584565E-15  0.584565E-15   214.759       214.759    
  24  0.722314     -0.325295     -0.137198E-13  0.137198E-13   215.071       215.071    
  25  0.762135     -0.271632     -0.114565E-13  0.114565E-13   215.164       215.164    
  26  0.664039     -0.409415     -0.172677E-13  0.172677E-13   215.655       215.655    
  27  0.674360     -0.393991     -0.166171E-13  0.166171E-13   215.701       215.701    
  28  0.698349     -0.359037     -0.151429E-13  0.151429E-13   215.969       215.969    
  29  0.396217     -0.925792     -0.390467E-13  0.390467E-13   216.105       216.105    
  30  0.724242     -0.322629     -0.136074E-13  0.136074E-13   216.230       216.230    
  31  0.131894      -2.02575     -0.854391E-13  0.854391E-13   216.880       216.880    
  32  0.194376      -1.63796     -0.690833E-13  0.690833E-13   217.102       217.102    
  33  0.194218      -1.63877     -0.691177E-13  0.691177E-13   217.644       217.644    
  34  0.283952      -1.25895     -0.530981E-13  0.530981E-13   217.907       217.907    
  35  0.812894     -0.207155     -0.873706E-14  0.873706E-14   218.263       218.263    
  36  0.665924     -0.406579     -0.171481E-13  0.171481E-13   218.364       218.364    
  37  0.607411E-01  -2.80113     -0.118142E-12  0.118142E-12   218.532       218.532    
  38  0.599873     -0.511037     -0.215537E-13  0.215537E-13   218.573       218.573    
  39  0.105895      -2.24530     -0.946990E-13  0.946990E-13   218.696       218.696    
  40  0.974165     -0.261750E-01 -0.110397E-14  0.110397E-14   219.138       219.138    
  41  0.883143     -0.124269     -0.524121E-14  0.524121E-14   219.565       219.565    
  42  0.400667     -0.914625     -0.385757E-13  0.385757E-13   219.730       219.730    
  43  0.371409     -0.990451     -0.417737E-13  0.417737E-13   220.127       220.127    
  44  0.989773     -0.102799E-01 -0.433569E-15  0.433569E-15   220.481       220.481    
  45  0.846990     -0.166067     -0.700412E-14  0.700412E-14   220.548       220.548    
  46  0.206986      -1.57511     -0.664324E-13  0.664324E-13   220.576       220.576    
  47  0.905135E-02  -4.70484     -0.198434E-12  0.198434E-12   220.782       220.782    
  48  0.717668     -0.331748     -0.139920E-13  0.139920E-13   221.103       221.103    
  49  0.513226     -0.667038     -0.281333E-13  0.281333E-13   221.131       221.131    
  50  0.911164     -0.930327E-01 -0.392379E-14  0.392379E-14   221.266       221.266    
  51  0.509502     -0.674321     -0.284405E-13  0.284405E-13   221.376       221.376    
  52  0.707863     -0.345504     -0.145722E-13  0.145722E-13   221.419       221.419    
  53  0.526637     -0.641244     -0.270454E-13  0.270454E-13   221.669       221.669    
  54  0.756529     -0.279015     -0.117679E-13  0.117679E-13   222.033       222.033    
  55  0.613009     -0.489375     -0.206401E-13  0.206401E-13   222.393       222.393    
  56  0.303358      -1.19284     -0.503099E-13  0.503099E-13   222.956       222.956    
  57  0.201320      -1.60286     -0.676029E-13  0.676029E-13   222.967       222.967    
  58  0.561979     -0.576291     -0.243059E-13  0.243059E-13   223.181       223.181    
  59  0.652822     -0.426451     -0.179862E-13  0.179862E-13   223.198       223.198    
  60  0.851117E-01  -2.46379     -0.103914E-12  0.103914E-12   223.370       223.370    
  61  0.527693     -0.639241     -0.269609E-13  0.269609E-13   195.002       195.002    
loop,thermsimp(1:2)       85  0.843698E-15  0.230035E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    290              197.74          0.80          0.47         20.38
Just calling func    0   0         23.21


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       85
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       86
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      291
neval,tstepnext:      289     291

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.725030     -0.321542     -0.135615E-13  0.135615E-13   194.053       194.053    
   2  0.602614     -0.506478     -0.213615E-13  0.213615E-13   195.002       195.002    
   3  0.825497     -0.191770     -0.808817E-14  0.808817E-14   198.488       198.488    
   4  0.374854E-01  -3.28380     -0.138499E-12  0.138499E-12   203.055       203.055    
   5  0.779717     -0.248824     -0.104945E-13  0.104945E-13   204.171       204.171    
   6  0.590209     -0.527278     -0.222387E-13  0.222387E-13   204.213       204.213    
   7  0.166282      -1.79407     -0.756675E-13  0.756675E-13   204.446       204.446    
   8  0.396675E-01  -3.22722     -0.136113E-12  0.136113E-12   204.595       204.595    
   9  0.248979      -1.39039     -0.586417E-13  0.586417E-13   204.760       204.760    
  10  0.276369      -1.28602     -0.542397E-13  0.542397E-13   206.414       206.414    
  11  0.639227     -0.447495     -0.188738E-13  0.188738E-13   206.556       206.556    
  12  0.114548      -2.16676     -0.913864E-13  0.913864E-13   207.841       207.841    
  13  0.888427     -0.118303     -0.498959E-14  0.498959E-14   209.163       209.163    
  14  0.861476     -0.149108     -0.628884E-14  0.628884E-14   210.275       210.275    
  15  0.222457E-01  -3.80561     -0.160507E-12  0.160507E-12   210.633       210.633    
  16  0.816820     -0.202336     -0.853383E-14  0.853383E-14   210.860       210.860    
  17  0.781838     -0.246108     -0.103800E-13  0.103800E-13   211.316       211.316    
  18  0.596132     -0.517293     -0.218176E-13  0.218176E-13   212.314       212.314    
  19  0.997971     -0.203109E-02 -0.856642E-16  0.856642E-16   212.788       212.788    
  20  0.404506     -0.905088     -0.381734E-13  0.381734E-13   212.820       212.820    
  21  0.820028     -0.198416     -0.836851E-14  0.836851E-14   213.685       213.685    
  22  0.768712     -0.263039     -0.110941E-13  0.110941E-13   213.829       213.829    
  23  0.848420E-01  -2.46696     -0.104048E-12  0.104048E-12   214.409       214.409    
  24  0.855191     -0.156430     -0.659769E-14  0.659769E-14   214.759       214.759    
  25  0.989196     -0.108624E-01 -0.458137E-15  0.458137E-15   215.071       215.071    
  26  0.134969      -2.00271     -0.844672E-13  0.844672E-13   215.164       215.164    
  27  0.202388      -1.59757     -0.673798E-13  0.673798E-13   215.655       215.655    
  28  0.506678     -0.679879     -0.286749E-13  0.286749E-13   215.701       215.701    
  29  0.733429     -0.310024     -0.130757E-13  0.130757E-13   215.969       215.969    
  30  0.891450     -0.114905     -0.484631E-14  0.484631E-14   216.105       216.105    
  31  0.602822     -0.506133     -0.213469E-13  0.213469E-13   216.230       216.230    
  32  0.904170     -0.100738     -0.424875E-14  0.424875E-14   216.880       216.880    
  33  0.770982     -0.260090     -0.109697E-13  0.109697E-13   217.102       217.102    
  34  0.512408     -0.668635     -0.282007E-13  0.282007E-13   217.644       217.644    
  35  0.926422     -0.764259E-01 -0.322338E-14  0.322338E-14   217.907       217.907    
  36  0.231705E-01  -3.76487     -0.158789E-12  0.158789E-12   218.263       218.263    
  37  0.853203     -0.158758     -0.669585E-14  0.669585E-14   218.364       218.364    
  38  0.800782     -0.222166     -0.937020E-14  0.937020E-14   218.532       218.532    
  39  0.464574     -0.766634     -0.323339E-13  0.323339E-13   218.573       218.573    
  40  0.152274      -1.88208     -0.793793E-13  0.793793E-13   218.696       218.696    
  41  0.835976     -0.179155     -0.755614E-14  0.755614E-14   219.138       219.138    
  42  0.423139     -0.860054     -0.362740E-13  0.362740E-13   219.565       219.565    
  43  0.964604     -0.360374E-01 -0.151993E-14  0.151993E-14   219.730       219.730    
  44  0.281317      -1.26827     -0.534912E-13  0.534912E-13   220.127       220.127    
  45  0.397980     -0.921353     -0.388594E-13  0.388594E-13   220.481       220.481    
  46  0.709091     -0.343772     -0.144991E-13  0.144991E-13   220.548       220.548    
  47  0.162626      -1.81630     -0.766052E-13  0.766052E-13   220.576       220.576    
  48  0.608490     -0.496775     -0.209522E-13  0.209522E-13   220.782       220.782    
  49  0.658977     -0.417067     -0.175904E-13  0.175904E-13   221.103       221.103    
  50  0.955830E-01  -2.34776     -0.990203E-13  0.990203E-13   221.131       221.131    
  51  0.668557     -0.402634     -0.169817E-13  0.169817E-13   221.266       221.266    
  52  0.572570     -0.557621     -0.235185E-13  0.235185E-13   221.376       221.376    
  53  0.682241     -0.382372     -0.161271E-13  0.161271E-13   221.419       221.419    
  54  0.597753     -0.514578     -0.217031E-13  0.217031E-13   221.669       221.669    
  55  0.249417      -1.38863     -0.585675E-13  0.585675E-13   222.033       222.033    
  56  0.850643     -0.161763     -0.682258E-14  0.682258E-14   222.393       222.393    
  57  0.916805E-01  -2.38945     -0.100778E-12  0.100778E-12   222.956       222.956    
  58  0.623220     -0.472855     -0.199434E-13  0.199434E-13   222.967       222.967    
  59  0.236121      -1.44341     -0.608780E-13  0.608780E-13   223.181       223.181    
  60  0.495952     -0.701276     -0.295773E-13  0.295773E-13   223.198       223.198    
  61  0.105421      -2.24979     -0.948883E-13  0.948883E-13   197.742       197.742    
loop,thermsimp(1:2)       86  0.135615E-13  0.213615E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    291              206.47          0.80          0.47         20.30
Just calling func    0   0         23.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    206.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       86
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       87
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      291
neval,tstepnext:      290     291

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.852271     -0.159851     -0.674196E-14  0.674196E-14   194.053       194.053    
   2  0.633113     -0.457107     -0.192791E-13  0.192791E-13   195.002       195.002    
   3  0.483901     -0.725874     -0.306148E-13  0.306148E-13   197.742       197.742    
   4  0.748172     -0.290123     -0.122363E-13  0.122363E-13   198.488       198.488    
   5  0.151869      -1.88474     -0.794916E-13  0.794916E-13   203.055       203.055    
   6  0.693568     -0.365906     -0.154326E-13  0.154326E-13   204.171       204.171    
   7  0.792713     -0.232294     -0.979734E-14  0.979734E-14   204.213       204.213    
   8  0.589542     -0.528410     -0.222865E-13  0.222865E-13   204.446       204.446    
   9  0.621692     -0.475311     -0.200469E-13  0.200469E-13   204.595       204.595    
  10  0.377645     -0.973800     -0.410715E-13  0.410715E-13   204.760       204.760    
  11  0.545059E-01  -2.90945     -0.122710E-12  0.122710E-12   206.414       206.414    
  12  0.318651      -1.14366     -0.482354E-13  0.482354E-13   206.556       206.556    
  13  0.750577E-02  -4.89208     -0.206331E-12  0.206331E-12   207.841       207.841    
  14  0.591780     -0.524621     -0.221267E-13  0.221267E-13   209.163       209.163    
  15  0.252707      -1.37553     -0.580148E-13  0.580148E-13   210.275       210.275    
  16  0.102087      -2.28193     -0.962439E-13  0.962439E-13   210.633       210.633    
  17  0.503906     -0.685366     -0.289063E-13  0.289063E-13   210.860       210.860    
  18  0.281953      -1.26602     -0.533961E-13  0.533961E-13   211.316       211.316    
  19  0.320767      -1.13704     -0.479564E-13  0.479564E-13   212.314       212.314    
  20  0.940588     -0.612504E-01 -0.258333E-14  0.258333E-14   212.788       212.788    
  21  0.502431     -0.688297     -0.290299E-13  0.290299E-13   212.820       212.820    
  22  0.363008      -1.01333     -0.427387E-13  0.427387E-13   213.685       213.685    
  23  0.764106     -0.269048     -0.113475E-13  0.113475E-13   213.829       213.829    
  24  0.238540      -1.43322     -0.604481E-13  0.604481E-13   214.409       214.409    
  25  0.704005     -0.350970     -0.148027E-13  0.148027E-13   214.759       214.759    
  26  0.853321E-01  -2.46120     -0.103805E-12  0.103805E-12   215.071       215.071    
  27  0.342003      -1.07294     -0.452527E-13  0.452527E-13   215.164       215.164    
  28  0.595251     -0.518773     -0.218800E-13  0.218800E-13   215.655       215.655    
  29  0.602208E-01  -2.80974     -0.118505E-12  0.118505E-12   215.701       215.701    
  30  0.723154     -0.324132     -0.136708E-13  0.136708E-13   215.969       215.969    
  31  0.508662     -0.675971     -0.285101E-13  0.285101E-13   216.105       216.105    
  32  0.280413      -1.27149     -0.536271E-13  0.536271E-13   216.230       216.230    
  33  0.865692E-01  -2.44681     -0.103198E-12  0.103198E-12   216.880       216.880    
  34  0.519833     -0.654247     -0.275938E-13  0.275938E-13   217.102       217.102    
  35  0.880906     -0.126804     -0.534815E-14  0.534815E-14   217.644       217.644    
  36  0.466197     -0.763147     -0.321869E-13  0.321869E-13   217.907       217.907    
  37  0.540152     -0.615905     -0.259767E-13  0.259767E-13   218.263       218.263    
  38  0.260574      -1.34487     -0.567217E-13  0.567217E-13   218.364       218.364    
  39  0.422002     -0.862746     -0.363876E-13  0.363876E-13   218.532       218.532    
  40  0.402557     -0.909918     -0.383771E-13  0.383771E-13   218.573       218.573    
  41  0.142151      -1.95087     -0.822807E-13  0.822807E-13   218.696       218.696    
  42  0.921065     -0.822247E-01 -0.346795E-14  0.346795E-14   219.138       219.138    
  43  0.636048E-01  -2.75507     -0.116199E-12  0.116199E-12   219.565       219.565    
  44  0.314568      -1.15656     -0.487794E-13  0.487794E-13   219.730       219.730    
  45  0.755462     -0.280426     -0.118274E-13  0.118274E-13   220.127       220.127    
  46  0.510222     -0.672910     -0.283810E-13  0.283810E-13   220.481       220.481    
  47  0.302895      -1.19437     -0.503743E-13  0.503743E-13   220.548       220.548    
  48  0.565162     -0.570644     -0.240677E-13  0.240677E-13   220.576       220.576    
  49  0.924624     -0.783682E-01 -0.330529E-14  0.330529E-14   220.782       220.782    
  50  0.813230     -0.206741     -0.871962E-14  0.871962E-14   221.103       221.103    
  51  0.634572     -0.454804     -0.191820E-13  0.191820E-13   221.131       221.131    
  52  0.415646     -0.877922     -0.370277E-13  0.370277E-13   221.266       221.266    
  53  0.213421      -1.54449     -0.651411E-13  0.651411E-13   221.376       221.376    
  54  0.244737      -1.40757     -0.593664E-13  0.593664E-13   221.419       221.419    
  55  0.917674     -0.859135E-01 -0.362353E-14  0.362353E-14   221.669       221.669    
  56  0.770596     -0.260590     -0.109908E-13  0.109908E-13   222.033       222.033    
  57  0.192181      -1.64932     -0.695624E-13  0.695624E-13   222.393       222.393    
  58  0.130099      -2.03946     -0.860173E-13  0.860173E-13   222.956       222.956    
  59  0.555916     -0.587138     -0.247634E-13  0.247634E-13   222.967       222.967    
  60  0.447638     -0.803770     -0.339002E-13  0.339002E-13   223.181       223.181    
  61  0.224093      -1.49569     -0.630831E-13  0.630831E-13   206.471       206.471    
loop,thermsimp(1:2)       87  0.674196E-14  0.192791E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    292              229.41          0.80          0.47         20.23
Just calling func    0   0         22.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    293              222.51          0.77          0.46         20.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    222.51
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       87
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.421765E-13           291
loop is:       88
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.843530E-14           301

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      292     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.743094     -0.296933     -0.250472E-14  0.250472E-14   194.053       194.053    
   2  0.852632     -0.159427     -0.134481E-14  0.134481E-14   195.002       195.002    
   3  0.172486      -1.75744     -0.148245E-13  0.148245E-13   197.742       197.742    
   4  0.183064E-01  -4.00051     -0.337454E-13  0.337454E-13   198.488       198.488    
   5  0.897053     -0.108641     -0.916415E-15  0.916415E-15   203.055       203.055    
   6  0.316113      -1.15166     -0.971456E-14  0.971456E-14   204.171       204.171    
   7  0.647354     -0.434862     -0.366819E-14  0.366819E-14   204.213       204.213    
   8  0.984739     -0.153792E-01 -0.129728E-15  0.129728E-15   204.446       204.446    
   9  0.416089     -0.876857     -0.739655E-14  0.739655E-14   204.595       204.595    
  10  0.433330     -0.836257     -0.705407E-14  0.705407E-14   204.760       204.760    
  11  0.461666     -0.772914     -0.651976E-14  0.651976E-14   206.414       206.414    
  12  0.690551     -0.370266     -0.312330E-14  0.312330E-14   206.471       206.471    
  13  0.539668     -0.616801     -0.520290E-14  0.520290E-14   206.556       206.556    
  14  0.828062     -0.188667     -0.159146E-14  0.159146E-14   207.841       207.841    
  15  0.864366     -0.145759     -0.122952E-14  0.122952E-14   209.163       209.163    
  16  0.369138     -0.996583     -0.840648E-14  0.840648E-14   210.275       210.275    
  17  0.946568     -0.549121E-01 -0.463200E-15  0.463200E-15   210.633       210.633    
  18  0.278978      -1.27662     -0.107687E-13  0.107687E-13   210.860       210.860    
  19  0.161130      -1.82554     -0.153990E-13  0.153990E-13   211.316       211.316    
  20  0.658581     -0.417667     -0.352315E-14  0.352315E-14   212.314       212.314    
  21  0.997378     -0.262541E-02 -0.221461E-16  0.221461E-16   212.788       212.788    
  22  0.724093     -0.322835     -0.272321E-14  0.272321E-14   212.820       212.820    
  23  0.924006     -0.790364E-01 -0.666696E-15  0.666696E-15   213.685       213.685    
  24  0.598911     -0.512643     -0.432429E-14  0.432429E-14   213.829       213.829    
  25  0.594665     -0.519756     -0.438430E-14  0.438430E-14   214.409       214.409    
  26  0.931426     -0.710388E-01 -0.599233E-15  0.599233E-15   214.759       214.759    
  27  0.414955     -0.879585     -0.741956E-14  0.741956E-14   215.071       215.071    
  28  0.831594     -0.184411     -0.155556E-14  0.155556E-14   215.164       215.164    
  29  0.693045     -0.366661     -0.309289E-14  0.309289E-14   215.655       215.655    
  30  0.791212     -0.234190     -0.197546E-14  0.197546E-14   215.701       215.701    
  31  0.408722     -0.894720     -0.754723E-14  0.754723E-14   215.969       215.969    
  32  0.475596     -0.743186     -0.626900E-14  0.626900E-14   216.105       216.105    
  33  0.156042      -1.85763     -0.156697E-13  0.156697E-13   216.230       216.230    
  34  0.647453E-01  -2.73729     -0.230899E-13  0.230899E-13   216.880       216.880    
  35  0.223726      -1.49733     -0.126305E-13  0.126305E-13   217.102       217.102    
  36  0.704496     -0.350272     -0.295465E-14  0.295465E-14   217.644       217.644    
  37  0.524950     -0.644452     -0.543614E-14  0.543614E-14   217.907       217.907    
  38  0.930575     -0.719529E-01 -0.606944E-15  0.606944E-15   218.263       218.263    
  39  0.478018     -0.738107     -0.622615E-14  0.622615E-14   218.364       218.364    
  40  0.715357     -0.334973     -0.282560E-14  0.282560E-14   218.532       218.532    
  41  0.169926      -1.77239     -0.149506E-13  0.149506E-13   218.573       218.573    
  42  0.725563     -0.320808     -0.270611E-14  0.270611E-14   218.696       218.696    
  43  0.966230     -0.343533E-01 -0.289781E-15  0.289781E-15   219.138       219.138    
  44  0.281657      -1.26707     -0.106881E-13  0.106881E-13   219.565       219.565    
  45  0.995486E-01  -2.30711     -0.194611E-13  0.194611E-13   219.730       219.730    
  46  0.926207     -0.766576E-01 -0.646629E-15  0.646629E-15   220.127       220.127    
  47  0.549982     -0.597869     -0.504320E-14  0.504320E-14   220.481       220.481    
  48  0.687038     -0.375366     -0.316632E-14  0.316632E-14   220.548       220.548    
  49  0.222334      -1.50358     -0.126831E-13  0.126831E-13   220.576       220.576    
  50  0.953054     -0.480832E-01 -0.405596E-15  0.405596E-15   220.782       220.782    
  51  0.350464      -1.04850     -0.884439E-14  0.884439E-14   221.103       221.103    
  52  0.414993     -0.879493     -0.741879E-14  0.741879E-14   221.131       221.131    
  53  0.196889      -1.62512     -0.137083E-13  0.137083E-13   221.266       221.266    
  54  0.194613      -1.63674     -0.138064E-13  0.138064E-13   221.376       221.376    
  55  0.672918     -0.396132     -0.334149E-14  0.334149E-14   221.419       221.419    
  56  0.189727      -1.66217     -0.140209E-13  0.140209E-13   221.669       221.669    
  57  0.422275     -0.862099     -0.727206E-14  0.727206E-14   222.033       222.033    
  58  0.153584      -1.87351     -0.158036E-13  0.158036E-13   222.393       222.393    
  59  0.937630E-01  -2.36699     -0.199662E-13  0.199662E-13   222.956       222.956    
  60  0.824578     -0.192883     -0.162703E-14  0.162703E-14   222.967       222.967    
  61  0.726312     -0.319776     -0.269740E-14  0.269740E-14   222.507       222.507    
loop,thermsimp(1:2)       88  0.250472E-14  0.134481E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    294              209.89          0.80          0.47         20.30
Just calling func    0   0         22.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    209.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       88
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       89
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      293     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.483787E-01  -3.02870     -0.255479E-13  0.255479E-13   194.053       194.053    
   2  0.502659     -0.687843     -0.580216E-14  0.580216E-14   195.002       195.002    
   3  0.622053E-01  -2.77732     -0.234275E-13  0.234275E-13   197.742       197.742    
   4  0.176261      -1.73579     -0.146419E-13  0.146419E-13   198.488       198.488    
   5  0.781017     -0.247159     -0.208486E-14  0.208486E-14   203.055       203.055    
   6  0.927491     -0.752722E-01 -0.634943E-15  0.634943E-15   204.171       204.171    
   7  0.890150     -0.116366     -0.981578E-15  0.981578E-15   204.213       204.213    
   8  0.331737      -1.10341     -0.930761E-14  0.930761E-14   204.446       204.446    
   9  0.654948     -0.423199     -0.356981E-14  0.356981E-14   204.595       204.595    
  10  0.162370      -1.81788     -0.153343E-13  0.153343E-13   204.760       204.760    
  11  0.419496E-01  -3.17129     -0.267507E-13  0.267507E-13   206.414       206.414    
  12  0.630993E-01  -2.76305     -0.233071E-13  0.233071E-13   206.471       206.471    
  13  0.111914      -2.19002     -0.184735E-13  0.184735E-13   206.556       206.556    
  14  0.702236     -0.353485     -0.298175E-14  0.298175E-14   207.841       207.841    
  15  0.909689     -0.946521E-01 -0.798418E-15  0.798418E-15   209.163       209.163    
  16  0.599352     -0.511906     -0.431808E-14  0.431808E-14   210.275       210.275    
  17  0.739988     -0.301121     -0.254005E-14  0.254005E-14   210.633       210.633    
  18  0.907197     -0.973958E-01 -0.821562E-15  0.821562E-15   210.860       210.860    
  19  0.119353      -2.12567     -0.179307E-13  0.179307E-13   211.316       211.316    
  20  0.220102      -1.51366     -0.127682E-13  0.127682E-13   212.314       212.314    
  21  0.656494     -0.420842     -0.354993E-14  0.354993E-14   212.788       212.788    
  22  0.142575      -1.94789     -0.164310E-13  0.164310E-13   212.820       212.820    
  23  0.106012      -2.24421     -0.189305E-13  0.189305E-13   213.685       213.685    
  24  0.342869      -1.07041     -0.902920E-14  0.902920E-14   213.829       213.829    
  25  0.894826E-01  -2.41371     -0.203604E-13  0.203604E-13   214.409       214.409    
  26  0.507741     -0.677785     -0.571731E-14  0.571731E-14   214.759       214.759    
  27  0.240390      -1.42549     -0.120245E-13  0.120245E-13   215.071       215.071    
  28  0.320146      -1.13898     -0.960761E-14  0.960761E-14   215.164       215.164    
  29  0.145996      -1.92418     -0.162310E-13  0.162310E-13   215.655       215.655    
  30  0.201293      -1.60300     -0.135217E-13  0.135217E-13   215.701       215.701    
  31  0.420147     -0.867149     -0.731466E-14  0.731466E-14   215.969       215.969    
  32  0.869249     -0.140126     -0.118200E-14  0.118200E-14   216.105       216.105    
  33  0.274637E-01  -3.59489     -0.303240E-13  0.303240E-13   216.230       216.230    
  34  0.115426      -2.15913     -0.182129E-13  0.182129E-13   216.880       216.880    
  35  0.500913     -0.691324     -0.583152E-14  0.583152E-14   217.102       217.102    
  36  0.949924     -0.513731E-01 -0.433348E-15  0.433348E-15   217.644       217.644    
  37  0.699439     -0.357477     -0.301543E-14  0.301543E-14   217.907       217.907    
  38  0.756755     -0.278716     -0.235105E-14  0.235105E-14   218.263       218.263    
  39  0.857707     -0.153493     -0.129476E-14  0.129476E-14   218.364       218.364    
  40  0.117341      -2.14267     -0.180741E-13  0.180741E-13   218.532       218.532    
  41  0.416803     -0.875141     -0.738207E-14  0.738207E-14   218.573       218.573    
  42  0.494613     -0.703979     -0.593827E-14  0.593827E-14   218.696       218.696    
  43  0.504500     -0.684187     -0.577132E-14  0.577132E-14   219.138       219.138    
  44  0.186088      -1.68154     -0.141843E-13  0.141843E-13   219.565       219.565    
  45  0.344855      -1.06463     -0.898049E-14  0.898049E-14   219.730       219.730    
  46  0.578581     -0.547176     -0.461559E-14  0.461559E-14   220.127       220.127    
  47  0.451166     -0.795919     -0.671381E-14  0.671381E-14   220.481       220.481    
  48  0.667948     -0.403545     -0.340402E-14  0.340402E-14   220.548       220.548    
  49  0.396211     -0.925809     -0.780947E-14  0.780947E-14   220.576       220.576    
  50  0.324782      -1.12460     -0.948634E-14  0.948634E-14   220.782       220.782    
  51  0.218617      -1.52043     -0.128253E-13  0.128253E-13   221.103       221.103    
  52  0.843763     -0.169883     -0.143302E-14  0.143302E-14   221.131       221.131    
  53  0.825555E-01  -2.49428     -0.210400E-13  0.210400E-13   221.266       221.266    
  54  0.934649     -0.675837E-01 -0.570089E-15  0.570089E-15   221.376       221.376    
  55  0.450534     -0.797322     -0.672564E-14  0.672564E-14   221.419       221.419    
  56  0.110220      -2.20528     -0.186022E-13  0.186022E-13   221.669       221.669    
  57  0.784202     -0.243089     -0.205052E-14  0.205052E-14   222.033       222.033    
  58  0.973239     -0.271256E-01 -0.228813E-15  0.228813E-15   222.393       222.393    
  59  0.105301      -2.25093     -0.189873E-13  0.189873E-13   222.507       222.507    
  60  0.119187E-01  -4.42965     -0.373654E-13  0.373654E-13   222.956       222.956    
  61  0.368202     -0.999124     -0.842791E-14  0.842791E-14   209.889       209.889    
loop,thermsimp(1:2)       89  0.255479E-13  0.580216E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    295              207.72          0.79          0.46         20.40
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    207.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       89
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       90
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      294     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.850693     -0.161703     -0.136402E-14  0.136402E-14   194.053       194.053    
   2  0.728327     -0.317006     -0.267404E-14  0.267404E-14   195.002       195.002    
   3  0.799306     -0.224011     -0.188960E-14  0.188960E-14   197.742       197.742    
   4  0.319023      -1.14249     -0.963725E-14  0.963725E-14   198.488       198.488    
   5  0.193894      -1.64044     -0.138376E-13  0.138376E-13   203.055       203.055    
   6  0.615803     -0.484828     -0.408967E-14  0.408967E-14   204.171       204.171    
   7  0.305652      -1.18531     -0.999843E-14  0.999843E-14   204.213       204.213    
   8  0.779185     -0.249507     -0.210466E-14  0.210466E-14   204.446       204.446    
   9  0.974231     -0.261063E-01 -0.220215E-15  0.220215E-15   204.595       204.595    
  10  0.810638     -0.209933     -0.177085E-14  0.177085E-14   204.760       204.760    
  11  0.790598E-01  -2.53755     -0.214050E-13  0.214050E-13   206.414       206.414    
  12  0.959442     -0.414039E-01 -0.349254E-15  0.349254E-15   206.471       206.471    
  13  0.574156     -0.554855     -0.468036E-14  0.468036E-14   206.556       206.556    
  14  0.550915     -0.596176     -0.502892E-14  0.502892E-14   207.841       207.841    
  15  0.677555     -0.389264     -0.328356E-14  0.328356E-14   209.163       209.163    
  16  0.771591     -0.259301     -0.218728E-14  0.218728E-14   209.889       209.889    
  17  0.247550      -1.39614     -0.117769E-13  0.117769E-13   210.275       210.275    
  18  0.553651     -0.591220     -0.498712E-14  0.498712E-14   210.633       210.633    
  19  0.148388      -1.90793     -0.160939E-13  0.160939E-13   210.860       210.860    
  20  0.684615     -0.378899     -0.319612E-14  0.319612E-14   211.316       211.316    
  21  0.905721     -0.990245E-01 -0.835301E-15  0.835301E-15   212.314       212.314    
  22  0.237503E-01  -3.74016     -0.315494E-13  0.315494E-13   212.788       212.788    
  23  0.414431     -0.880848     -0.743021E-14  0.743021E-14   212.820       212.820    
  24  0.399605     -0.917280     -0.773752E-14  0.773752E-14   213.685       213.685    
  25  0.699835     -0.356910     -0.301065E-14  0.301065E-14   213.829       213.829    
  26  0.511141     -0.671110     -0.566101E-14  0.566101E-14   214.409       214.409    
  27  0.830158     -0.186139     -0.157014E-14  0.157014E-14   214.759       214.759    
  28  0.597009     -0.515824     -0.435112E-14  0.435112E-14   215.071       215.071    
  29  0.518984     -0.655882     -0.553256E-14  0.553256E-14   215.164       215.164    
  30  0.167051      -1.78946     -0.150946E-13  0.150946E-13   215.655       215.655    
  31  0.986994     -0.130912E-01 -0.110428E-15  0.110428E-15   215.701       215.701    
  32  0.369307     -0.996127     -0.840262E-14  0.840262E-14   215.969       215.969    
  33  0.819076     -0.199579     -0.168351E-14  0.168351E-14   216.105       216.105    
  34  0.982119     -0.180424E-01 -0.152193E-15  0.152193E-15   216.230       216.230    
  35  0.674735     -0.393436     -0.331875E-14  0.331875E-14   216.880       216.880    
  36  0.524507     -0.645296     -0.544326E-14  0.544326E-14   217.102       217.102    
  37  0.749732     -0.288039     -0.242970E-14  0.242970E-14   217.644       217.644    
  38  0.320039      -1.13931     -0.961043E-14  0.961043E-14   217.907       217.907    
  39  0.859496     -0.151410     -0.127718E-14  0.127718E-14   218.263       218.263    
  40  0.167351      -1.78766     -0.150795E-13  0.150795E-13   218.364       218.364    
  41  0.985113     -0.149990E-01 -0.126521E-15  0.126521E-15   218.532       218.532    
  42  0.620544     -0.477159     -0.402498E-14  0.402498E-14   218.573       218.573    
  43  0.392477     -0.935277     -0.788934E-14  0.788934E-14   218.696       218.696    
  44  0.561783     -0.576639     -0.486412E-14  0.486412E-14   219.138       219.138    
  45  0.768707     -0.263046     -0.221887E-14  0.221887E-14   219.565       219.565    
  46  0.649358     -0.431771     -0.364212E-14  0.364212E-14   219.730       219.730    
  47  0.355289      -1.03482     -0.872904E-14  0.872904E-14   220.127       220.127    
  48  0.934578     -0.676599E-01 -0.570731E-15  0.570731E-15   220.481       220.481    
  49  0.988054     -0.120177E-01 -0.101373E-15  0.101373E-15   220.548       220.548    
  50  0.973844     -0.265037E-01 -0.223567E-15  0.223567E-15   220.576       220.576    
  51  0.915113     -0.887076E-01 -0.748275E-15  0.748275E-15   220.782       220.782    
  52  0.365322      -1.00698     -0.849415E-14  0.849415E-14   221.103       221.103    
  53  0.317708E-01  -3.44921     -0.290951E-13  0.290951E-13   221.131       221.131    
  54  0.342300      -1.07207     -0.904320E-14  0.904320E-14   221.266       221.266    
  55  0.208126      -1.56961     -0.132401E-13  0.132401E-13   221.376       221.376    
  56  0.672850E-02  -5.00140     -0.421883E-13  0.421883E-13   221.419       221.419    
  57  0.547085     -0.603152     -0.508776E-14  0.508776E-14   221.669       221.669    
  58  0.631240     -0.460070     -0.388082E-14  0.388082E-14   222.033       222.033    
  59  0.844639     -0.168846     -0.142427E-14  0.142427E-14   222.393       222.393    
  60  0.747130     -0.291516     -0.245903E-14  0.245903E-14   222.507       222.507    
  61  0.758773     -0.276052     -0.232858E-14  0.232858E-14   207.724       207.724    
loop,thermsimp(1:2)       90  0.136402E-14  0.267404E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    296              210.71          0.79          0.46         20.35
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    210.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       90
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       91
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      295     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.733505     -0.309921     -0.261427E-14  0.261427E-14   194.053       194.053    
   2  0.442991     -0.814205     -0.686806E-14  0.686806E-14   195.002       195.002    
   3  0.749974     -0.287717     -0.242698E-14  0.242698E-14   197.742       197.742    
   4  0.424884     -0.855940     -0.722010E-14  0.722010E-14   198.488       198.488    
   5  0.314097      -1.15805     -0.976851E-14  0.976851E-14   203.055       203.055    
   6  0.108234      -2.22346     -0.187555E-13  0.187555E-13   204.171       204.171    
   7  0.723213     -0.324052     -0.273347E-14  0.273347E-14   204.213       204.213    
   8  0.462950     -0.770137     -0.649633E-14  0.649633E-14   204.446       204.446    
   9  0.453407     -0.790965     -0.667202E-14  0.667202E-14   204.595       204.595    
  10  0.775216E-01  -2.55720     -0.215707E-13  0.215707E-13   204.760       204.760    
  11  0.770048     -0.261303     -0.220417E-14  0.220417E-14   206.414       206.414    
  12  0.709643     -0.342994     -0.289325E-14  0.289325E-14   206.471       206.471    
  13  0.104462      -2.25893     -0.190547E-13  0.190547E-13   206.556       206.556    
  14  0.500720     -0.691708     -0.583476E-14  0.583476E-14   207.724       207.724    
  15  0.691181     -0.369354     -0.311561E-14  0.311561E-14   207.841       207.841    
  16  0.806654     -0.214861     -0.181242E-14  0.181242E-14   209.163       209.163    
  17  0.881000     -0.126698     -0.106873E-14  0.106873E-14   209.889       209.889    
  18  0.328786      -1.11235     -0.938299E-14  0.938299E-14   210.275       210.275    
  19  0.164653      -1.80391     -0.152166E-13  0.152166E-13   210.633       210.633    
  20  0.113608      -2.17501     -0.183468E-13  0.183468E-13   210.860       210.860    
  21  0.939851E-01  -2.36462     -0.199463E-13  0.199463E-13   211.316       211.316    
  22  0.777851     -0.251221     -0.211912E-14  0.211912E-14   212.314       212.314    
  23  0.330473      -1.10723     -0.933981E-14  0.933981E-14   212.788       212.788    
  24  0.846035     -0.167195     -0.141034E-14  0.141034E-14   212.820       212.820    
  25  0.179717      -1.71637     -0.144781E-13  0.144781E-13   213.685       213.685    
  26  0.779861     -0.248640     -0.209735E-14  0.209735E-14   213.829       213.829    
  27  0.543184     -0.610307     -0.514812E-14  0.514812E-14   214.409       214.409    
  28  0.968696     -0.318045E-01 -0.268281E-15  0.268281E-15   214.759       214.759    
  29  0.492995     -0.707257     -0.596592E-14  0.596592E-14   215.071       215.071    
  30  0.976670     -0.236069E-01 -0.199131E-15  0.199131E-15   215.164       215.164    
  31  0.637195     -0.450680     -0.380162E-14  0.380162E-14   215.655       215.655    
  32  0.210617      -1.55771     -0.131398E-13  0.131398E-13   215.701       215.701    
  33  0.624186     -0.471306     -0.397561E-14  0.397561E-14   215.969       215.969    
  34  0.428397     -0.847705     -0.715064E-14  0.715064E-14   216.105       216.105    
  35  0.809570     -0.211252     -0.178197E-14  0.178197E-14   216.230       216.230    
  36  0.753648     -0.282830     -0.238575E-14  0.238575E-14   216.880       216.880    
  37  0.578836     -0.546736     -0.461188E-14  0.461188E-14   217.102       217.102    
  38  0.701833E-02  -4.95923     -0.418326E-13  0.418326E-13   217.644       217.644    
  39  0.189434E-01  -3.96630     -0.334569E-13  0.334569E-13   217.907       217.907    
  40  0.985509     -0.145969E-01 -0.123129E-15  0.123129E-15   218.263       218.263    
  41  0.778661     -0.250180     -0.211034E-14  0.211034E-14   218.364       218.364    
  42  0.221047      -1.50938     -0.127321E-13  0.127321E-13   218.532       218.532    
  43  0.131158      -2.03135     -0.171351E-13  0.171351E-13   218.573       218.573    
  44  0.680512     -0.384909     -0.324683E-14  0.324683E-14   218.696       218.696    
  45  0.693961     -0.365340     -0.308175E-14  0.308175E-14   219.138       219.138    
  46  0.778856E-01  -2.55251     -0.215312E-13  0.215312E-13   219.565       219.565    
  47  0.252856      -1.37494     -0.115980E-13  0.115980E-13   219.730       219.730    
  48  0.716074     -0.333972     -0.281715E-14  0.281715E-14   220.127       220.127    
  49  0.107503      -2.23023     -0.188127E-13  0.188127E-13   220.481       220.481    
  50  0.114572E-01  -4.46913     -0.376985E-13  0.376985E-13   220.548       220.548    
  51  0.620358     -0.477458     -0.402750E-14  0.402750E-14   220.576       220.576    
  52  0.976600     -0.236779E-01 -0.199730E-15  0.199730E-15   220.782       220.782    
  53  0.857008     -0.154308     -0.130163E-14  0.130163E-14   221.103       221.103    
  54  0.537590     -0.620660     -0.523545E-14  0.523545E-14   221.131       221.131    
  55  0.855637     -0.155909     -0.131514E-14  0.131514E-14   221.266       221.266    
  56  0.798657     -0.224823     -0.189645E-14  0.189645E-14   221.376       221.376    
  57  0.112323      -2.18638     -0.184427E-13  0.184427E-13   221.419       221.419    
  58  0.367511      -1.00100     -0.844374E-14  0.844374E-14   221.669       221.669    
  59  0.837330E-01  -2.48012     -0.209206E-13  0.209206E-13   222.033       222.033    
  60  0.472045     -0.750681     -0.633222E-14  0.633222E-14   222.393       222.393    
  61  0.197267      -1.62320     -0.136922E-13  0.136922E-13   210.711       210.711    
loop,thermsimp(1:2)       91  0.261427E-14  0.686806E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    297              192.78          0.79          0.47         20.32
Just calling func    0   0         23.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    298              195.37          0.77          0.46         20.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       91
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       92
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      297     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.294702      -1.22179     -0.103062E-13  0.103062E-13   194.053       194.053    
   2  0.783622     -0.243828     -0.205676E-14  0.205676E-14   195.002       195.002    
   3  0.340236      -1.07812     -0.909422E-14  0.909422E-14   197.742       197.742    
   4  0.431297     -0.840958     -0.709373E-14  0.709373E-14   198.488       198.488    
   5  0.735563     -0.307119     -0.259064E-14  0.259064E-14   203.055       203.055    
   6  0.613025     -0.489349     -0.412780E-14  0.412780E-14   204.171       204.171    
   7  0.510576     -0.672217     -0.567035E-14  0.567035E-14   204.213       204.213    
   8  0.233529      -1.45445     -0.122687E-13  0.122687E-13   204.446       204.446    
   9  0.464049     -0.767765     -0.647632E-14  0.647632E-14   204.595       204.595    
  10  0.200056      -1.60916     -0.135737E-13  0.135737E-13   204.760       204.760    
  11  0.179486      -1.71766     -0.144889E-13  0.144889E-13   206.414       206.414    
  12  0.997088     -0.291608E-02 -0.245980E-16  0.245980E-16   206.471       206.471    
  13  0.867126     -0.142571     -0.120262E-14  0.120262E-14   206.556       206.556    
  14  0.421009     -0.865100     -0.729737E-14  0.729737E-14   207.724       207.724    
  15  0.519856     -0.654204     -0.551840E-14  0.551840E-14   207.841       207.841    
  16  0.624838E-01  -2.77285     -0.233898E-13  0.233898E-13   209.163       209.163    
  17  0.695007E-01  -2.66642     -0.224920E-13  0.224920E-13   209.889       209.889    
  18  0.134482      -2.00633     -0.169240E-13  0.169240E-13   210.275       210.275    
  19  0.196229      -1.62847     -0.137367E-13  0.137367E-13   210.633       210.633    
  20  0.423741     -0.858632     -0.724282E-14  0.724282E-14   210.711       210.711    
  21  0.214680E-01  -3.84119     -0.324016E-13  0.324016E-13   210.860       210.860    
  22  0.395893     -0.926611     -0.781623E-14  0.781623E-14   211.316       211.316    
  23  0.222162      -1.50435     -0.126896E-13  0.126896E-13   212.314       212.314    
  24  0.393695     -0.932180     -0.786321E-14  0.786321E-14   212.788       212.788    
  25  0.965772     -0.348270E-01 -0.293776E-15  0.293776E-15   212.820       212.820    
  26  0.166835      -1.79075     -0.151055E-13  0.151055E-13   213.685       213.685    
  27  0.176392      -1.73505     -0.146357E-13  0.146357E-13   213.829       213.829    
  28  0.480938     -0.732018     -0.617479E-14  0.617479E-14   214.409       214.409    
  29  0.244479      -1.40863     -0.118822E-13  0.118822E-13   214.759       214.759    
  30  0.708233     -0.344982     -0.291003E-14  0.291003E-14   215.071       215.071    
  31  0.436051E-02  -5.43517     -0.458472E-13  0.458472E-13   215.164       215.164    
  32  0.688809     -0.372791     -0.314460E-14  0.314460E-14   215.655       215.655    
  33  0.656613     -0.420660     -0.354839E-14  0.354839E-14   215.701       215.701    
  34  0.624665     -0.470540     -0.396914E-14  0.396914E-14   215.969       215.969    
  35  0.274595      -1.29246     -0.109023E-13  0.109023E-13   216.105       216.105    
  36  0.258204      -1.35401     -0.114214E-13  0.114214E-13   216.230       216.230    
  37  0.991186     -0.885351E-02 -0.746820E-16  0.746820E-16   216.880       216.880    
  38  0.565379E-01  -2.87284     -0.242333E-13  0.242333E-13   217.102       217.102    
  39  0.278093      -1.27980     -0.107955E-13  0.107955E-13   217.644       217.644    
  40  0.812908     -0.207138     -0.174727E-14  0.174727E-14   217.907       217.907    
  41  0.816399     -0.202852     -0.171112E-14  0.171112E-14   218.263       218.263    
  42  0.842517     -0.171361     -0.144548E-14  0.144548E-14   218.364       218.364    
  43  0.343593      -1.06830     -0.901141E-14  0.901141E-14   218.532       218.532    
  44  0.416331     -0.876275     -0.739164E-14  0.739164E-14   218.573       218.573    
  45  0.962115     -0.386210E-01 -0.325780E-15  0.325780E-15   218.696       218.696    
  46  0.559330     -0.581015     -0.490103E-14  0.490103E-14   219.138       219.138    
  47  0.304591      -1.18879     -0.100278E-13  0.100278E-13   219.565       219.565    
  48  0.532251     -0.630640     -0.531963E-14  0.531963E-14   219.730       219.730    
  49  0.344998      -1.06422     -0.897697E-14  0.897697E-14   220.127       220.127    
  50  0.508806     -0.675689     -0.569964E-14  0.569964E-14   220.481       220.481    
  51  0.242992      -1.41473     -0.119336E-13  0.119336E-13   220.548       220.548    
  52  0.573905     -0.555292     -0.468405E-14  0.468405E-14   220.576       220.576    
  53  0.476287     -0.741734     -0.625675E-14  0.625675E-14   220.782       220.782    
  54  0.606876     -0.499431     -0.421285E-14  0.421285E-14   221.103       221.103    
  55  0.539431     -0.617240     -0.520661E-14  0.520661E-14   221.131       221.131    
  56  0.716216     -0.333774     -0.281548E-14  0.281548E-14   221.266       221.266    
  57  0.827734     -0.189063     -0.159480E-14  0.159480E-14   221.376       221.376    
  58  0.873764     -0.134945     -0.113830E-14  0.113830E-14   221.419       221.419    
  59  0.105735      -2.24682     -0.189526E-13  0.189526E-13   221.669       221.669    
  60  0.923589     -0.794880E-01 -0.670504E-15  0.670504E-15   222.033       222.033    
  61  0.907849     -0.966769E-01 -0.815498E-15  0.815498E-15   192.782       192.782    
loop,thermsimp(1:2)       92  0.103062E-13  0.205676E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    299              217.23          0.80          0.46         20.23
Just calling func    0   0         23.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    217.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       92
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       93
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      298     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.547890     -0.601681     -0.507536E-14  0.507536E-14   192.782       192.782    
   2  0.184648      -1.68930     -0.142498E-13  0.142498E-13   194.053       194.053    
   3  0.802675     -0.219806     -0.185413E-14  0.185413E-14   195.002       195.002    
   4  0.595919     -0.517651     -0.436654E-14  0.436654E-14   197.742       197.742    
   5  0.420163     -0.867112     -0.731434E-14  0.731434E-14   198.488       198.488    
   6  0.702400     -0.353252     -0.297978E-14  0.297978E-14   203.055       203.055    
   7  0.862893     -0.147465     -0.124391E-14  0.124391E-14   204.171       204.171    
   8  0.736334     -0.306071     -0.258180E-14  0.258180E-14   204.213       204.213    
   9  0.928533     -0.741492E-01 -0.625470E-15  0.625470E-15   204.446       204.446    
  10  0.146130      -1.92326     -0.162233E-13  0.162233E-13   204.595       204.595    
  11  0.461246     -0.773823     -0.652743E-14  0.652743E-14   204.760       204.760    
  12  0.508152E-01  -2.97956     -0.251335E-13  0.251335E-13   206.414       206.414    
  13  0.223424      -1.49868     -0.126418E-13  0.126418E-13   206.471       206.471    
  14  0.689778     -0.371385     -0.313275E-14  0.313275E-14   206.556       206.556    
  15  0.750034     -0.287637     -0.242630E-14  0.242630E-14   207.724       207.724    
  16  0.593299     -0.522058     -0.440371E-14  0.440371E-14   207.841       207.841    
  17  0.295241      -1.21996     -0.102907E-13  0.102907E-13   209.163       209.163    
  18  0.384046     -0.956992     -0.807251E-14  0.807251E-14   209.889       209.889    
  19  0.147412      -1.91452     -0.161496E-13  0.161496E-13   210.275       210.275    
  20  0.518427     -0.656956     -0.554162E-14  0.554162E-14   210.633       210.633    
  21  0.113986      -2.17168     -0.183188E-13  0.183188E-13   210.711       210.711    
  22  0.712468     -0.339021     -0.285974E-14  0.285974E-14   210.860       210.860    
  23  0.748488     -0.289700     -0.244371E-14  0.244371E-14   211.316       211.316    
  24  0.568660E-01  -2.86706     -0.241845E-13  0.241845E-13   212.314       212.314    
  25  0.806421     -0.215149     -0.181485E-14  0.181485E-14   212.788       212.788    
  26  0.640577E-01  -2.74797     -0.231800E-13  0.231800E-13   212.820       212.820    
  27  0.254038E-01  -3.67285     -0.309816E-13  0.309816E-13   213.685       213.685    
  28  0.331344      -1.10460     -0.931761E-14  0.931761E-14   213.829       213.829    
  29  0.715918     -0.334190     -0.281899E-14  0.281899E-14   214.409       214.409    
  30  0.486631     -0.720249     -0.607551E-14  0.607551E-14   214.759       214.759    
  31  0.959362     -0.414864E-01 -0.349950E-15  0.349950E-15   215.071       215.071    
  32  0.183348      -1.69637     -0.143094E-13  0.143094E-13   215.164       215.164    
  33  0.544709     -0.607503     -0.512446E-14  0.512446E-14   215.655       215.655    
  34  0.220567E-01  -3.81414     -0.321734E-13  0.321734E-13   215.701       215.701    
  35  0.942929E-01  -2.36135     -0.199187E-13  0.199187E-13   215.969       215.969    
  36  0.212494      -1.54884     -0.130649E-13  0.130649E-13   216.105       216.105    
  37  0.449703     -0.799169     -0.674122E-14  0.674122E-14   216.230       216.230    
  38  0.301970      -1.19743     -0.101006E-13  0.101006E-13   216.880       216.880    
  39  0.484332     -0.724985     -0.611547E-14  0.611547E-14   217.102       217.102    
  40  0.783693     -0.243738     -0.205600E-14  0.205600E-14   217.644       217.644    
  41  0.324421      -1.12571     -0.949572E-14  0.949572E-14   217.907       217.907    
  42  0.910718     -0.935221E-01 -0.788886E-15  0.788886E-15   218.263       218.263    
  43  0.669314     -0.401502     -0.338679E-14  0.338679E-14   218.364       218.364    
  44  0.839229     -0.175272     -0.147847E-14  0.147847E-14   218.532       218.532    
  45  0.387740     -0.947420     -0.799177E-14  0.799177E-14   218.573       218.573    
  46  0.830549     -0.185669     -0.156617E-14  0.156617E-14   218.696       218.696    
  47  0.915851     -0.879017E-01 -0.741477E-15  0.741477E-15   219.138       219.138    
  48  0.826113     -0.191023     -0.161134E-14  0.161134E-14   219.565       219.565    
  49  0.152583      -1.88004     -0.158587E-13  0.158587E-13   219.730       219.730    
  50  0.502775     -0.687612     -0.580021E-14  0.580021E-14   220.127       220.127    
  51  0.136200      -1.99363     -0.168168E-13  0.168168E-13   220.481       220.481    
  52  0.425843     -0.853684     -0.720108E-14  0.720108E-14   220.548       220.548    
  53  0.782896     -0.244756     -0.206459E-14  0.206459E-14   220.576       220.576    
  54  0.616060     -0.484411     -0.408615E-14  0.408615E-14   220.782       220.782    
  55  0.620642     -0.477001     -0.402365E-14  0.402365E-14   221.103       221.103    
  56  0.300865      -1.20109     -0.101316E-13  0.101316E-13   221.131       221.131    
  57  0.719816     -0.328759     -0.277318E-14  0.277318E-14   221.266       221.266    
  58  0.485204     -0.723185     -0.610028E-14  0.610028E-14   221.376       221.376    
  59  0.929612     -0.729876E-01 -0.615672E-15  0.615672E-15   221.419       221.419    
  60  0.231746      -1.46211     -0.123334E-13  0.123334E-13   221.669       221.669    
  61  0.750327E-02  -4.89242     -0.412690E-13  0.412690E-13   217.227       217.227    
loop,thermsimp(1:2)       93  0.507536E-14  0.142498E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    300              208.54          0.79          0.47         20.30
Just calling func    0   0         22.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    208.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       93
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       94
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      299     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218891      -1.51918     -0.128148E-13  0.128148E-13   192.782       192.782    
   2  0.116405      -2.15068     -0.181416E-13  0.181416E-13   194.053       194.053    
   3  0.414479     -0.880734     -0.742925E-14  0.742925E-14   195.002       195.002    
   4  0.584246     -0.537434     -0.453341E-14  0.453341E-14   197.742       197.742    
   5  0.343059      -1.06985     -0.902453E-14  0.902453E-14   198.488       198.488    
   6  0.766765     -0.265575     -0.224020E-14  0.224020E-14   203.055       203.055    
   7  0.753744     -0.282703     -0.238468E-14  0.238468E-14   204.171       204.171    
   8  0.741268     -0.299393     -0.252547E-14  0.252547E-14   204.213       204.213    
   9  0.595740     -0.517951     -0.436907E-14  0.436907E-14   204.446       204.446    
  10  0.324906E-01  -3.42681     -0.289061E-13  0.289061E-13   204.595       204.595    
  11  0.537420     -0.620975     -0.523811E-14  0.523811E-14   204.760       204.760    
  12  0.525515     -0.643376     -0.542707E-14  0.542707E-14   206.414       206.414    
  13  0.462236     -0.771679     -0.650934E-14  0.650934E-14   206.471       206.471    
  14  0.176478E-01  -4.03715     -0.340545E-13  0.340545E-13   206.556       206.556    
  15  0.420197     -0.867032     -0.731367E-14  0.731367E-14   207.724       207.724    
  16  0.711893E-01  -2.64241     -0.222895E-13  0.222895E-13   207.841       207.841    
  17  0.484010     -0.725649     -0.612106E-14  0.612106E-14   209.163       209.163    
  18  0.410073     -0.891419     -0.751938E-14  0.751938E-14   209.889       209.889    
  19  0.554359     -0.589942     -0.497634E-14  0.497634E-14   210.275       210.275    
  20  0.680773     -0.384526     -0.324359E-14  0.324359E-14   210.633       210.633    
  21  0.918940E-01  -2.38712     -0.201361E-13  0.201361E-13   210.711       210.711    
  22  0.150595      -1.89316     -0.159694E-13  0.159694E-13   210.860       210.860    
  23  0.864931E-01  -2.44769     -0.206470E-13  0.206470E-13   211.316       211.316    
  24  0.572509     -0.557727     -0.470459E-14  0.470459E-14   212.314       212.314    
  25  0.423445E-01  -3.16192     -0.266717E-13  0.266717E-13   212.788       212.788    
  26  0.204701      -1.58620     -0.133801E-13  0.133801E-13   212.820       212.820    
  27  0.612077     -0.490897     -0.414086E-14  0.414086E-14   213.685       213.685    
  28  0.607250     -0.498815     -0.420765E-14  0.420765E-14   213.829       213.829    
  29  0.140072      -1.96560     -0.165804E-13  0.165804E-13   214.409       214.409    
  30  0.274254      -1.29370     -0.109128E-13  0.109128E-13   214.759       214.759    
  31  0.946542     -0.549398E-01 -0.463434E-15  0.463434E-15   215.071       215.071    
  32  0.277694      -1.28124     -0.108076E-13  0.108076E-13   215.164       215.164    
  33  0.327902      -1.11504     -0.940570E-14  0.940570E-14   215.655       215.655    
  34  0.898148     -0.107421     -0.906127E-15  0.906127E-15   215.701       215.701    
  35  0.919498     -0.839273E-01 -0.707952E-15  0.707952E-15   215.969       215.969    
  36  0.845199E-01  -2.47077     -0.208417E-13  0.208417E-13   216.105       216.105    
  37  0.578208     -0.547822     -0.462104E-14  0.462104E-14   216.230       216.230    
  38  0.347781      -1.05618     -0.890921E-14  0.890921E-14   216.880       216.880    
  39  0.893243     -0.112897     -0.952317E-15  0.952317E-15   217.102       217.102    
  40  0.619000     -0.479650     -0.404599E-14  0.404599E-14   217.227       217.227    
  41  0.373769     -0.984117     -0.830132E-14  0.830132E-14   217.644       217.644    
  42  0.555031     -0.588731     -0.496612E-14  0.496612E-14   217.907       217.907    
  43  0.730257     -0.314359     -0.265171E-14  0.265171E-14   218.263       218.263    
  44  0.709655     -0.342977     -0.289311E-14  0.289311E-14   218.364       218.364    
  45  0.619596     -0.478687     -0.403787E-14  0.403787E-14   218.532       218.532    
  46  0.294144      -1.22369     -0.103222E-13  0.103222E-13   218.573       218.573    
  47  0.639098     -0.447697     -0.377646E-14  0.377646E-14   218.696       218.696    
  48  0.889543     -0.117048     -0.987333E-15  0.987333E-15   219.138       219.138    
  49  0.744753     -0.294703     -0.248590E-14  0.248590E-14   219.565       219.565    
  50  0.541001     -0.614334     -0.518209E-14  0.518209E-14   219.730       219.730    
  51  0.282659      -1.26352     -0.106581E-13  0.106581E-13   220.127       220.127    
  52  0.170019      -1.77185     -0.149461E-13  0.149461E-13   220.481       220.481    
  53  0.430547     -0.842699     -0.710841E-14  0.710841E-14   220.548       220.548    
  54  0.397795     -0.921819     -0.777581E-14  0.777581E-14   220.576       220.576    
  55  0.939855     -0.620298E-01 -0.523239E-15  0.523239E-15   220.782       220.782    
  56  0.214356      -1.54012     -0.129913E-13  0.129913E-13   221.103       221.103    
  57  0.836726     -0.178258     -0.150366E-14  0.150366E-14   221.131       221.131    
  58  0.489383     -0.714611     -0.602795E-14  0.602795E-14   221.266       221.266    
  59  0.667494     -0.404225     -0.340976E-14  0.340976E-14   221.376       221.376    
  60  0.615740     -0.484930     -0.409053E-14  0.409053E-14   221.419       221.419    
  61  0.439181     -0.822844     -0.694094E-14  0.694094E-14   208.538       208.538    
loop,thermsimp(1:2)       94  0.128148E-13  0.181416E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    301              194.41          0.79          0.47         20.18
Just calling func    0   0         22.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    194.41        2.450     -1.866      4.077     -100.0     0.3237    
                      -1.585      1.166     -100.0      2.943     -1.074    
                     -0.2211E-01 -1.942      2.009      0.000     0.6600    
                      -1.116     -20.00      0.000      0.000     -1.221    

                      -1.600      6871.      9247.     -560.8     -1451.    
                      -4.215     -5.826     -4.536     -15.33     -5.168    
                      -13.02     -2.679     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.6292E-01-0.5893E-01  0.000    -0.1377    
                     -0.2216    -0.1387    -0.1590    -0.1943    -0.7000E-02

                     -0.7101     -2.765      1.382     0.2133     0.4104E-01
                      0.6777E-01-0.4215E-01-0.1351    -0.3991E-01-0.7258E-01
                     -0.7517E-01 0.9135E-01-0.2366     -3.108      1.382    

                      -1.351     -1.754      3501.      2276.      0.000    
                       0.000      9.144      8.450      0.000     0.1000    
                       1.289     0.9018      9.158      8.899     -119.4    

                      0.1000      1.289      1.257      9.258      9.106    
                      -622.4     0.1000     0.3322     0.8565      9.358    
                       9.222      7977.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       94
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       95
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      301
neval,tstepnext:      300     301

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.414646     -0.880330     -0.742585E-14  0.742585E-14   192.782       192.782    
   2  0.304185      -1.19012     -0.100390E-13  0.100390E-13   194.053       194.053    
   3  0.316090      -1.15173     -0.971517E-14  0.971517E-14   195.002       195.002    
   4  0.660440     -0.414850     -0.349938E-14  0.349938E-14   197.742       197.742    
   5  0.204225      -1.58853     -0.133998E-13  0.133998E-13   198.488       198.488    
   6  0.841148     -0.172988     -0.145921E-14  0.145921E-14   203.055       203.055    
   7  0.519774     -0.654361     -0.551973E-14  0.551973E-14   204.171       204.171    
   8  0.694012E-01  -2.66785     -0.225041E-13  0.225041E-13   204.213       204.213    
   9  0.711965     -0.339727     -0.286570E-14  0.286570E-14   204.446       204.446    
  10  0.715648     -0.334567     -0.282218E-14  0.282218E-14   204.595       204.595    
  11  0.815356     -0.204130     -0.172190E-14  0.172190E-14   204.760       204.760    
  12  0.304123      -1.19032     -0.100407E-13  0.100407E-13   206.414       206.414    
  13  0.540033     -0.616124     -0.519719E-14  0.519719E-14   206.471       206.471    
  14  0.546685     -0.603882     -0.509392E-14  0.509392E-14   206.556       206.556    
  15  0.542843     -0.610935     -0.515342E-14  0.515342E-14   207.724       207.724    
  16  0.348089      -1.05530     -0.890175E-14  0.890175E-14   207.841       207.841    
  17  0.876701     -0.131590     -0.111000E-14  0.111000E-14   208.538       208.538    
  18  0.880707     -0.127030     -0.107153E-14  0.107153E-14   209.163       209.163    
  19  0.561099E-02  -5.18303     -0.437204E-13  0.437204E-13   209.889       209.889    
  20  0.402773     -0.909383     -0.767091E-14  0.767091E-14   210.275       210.275    
  21  0.824015     -0.193567     -0.163279E-14  0.163279E-14   210.633       210.633    
  22  0.821064     -0.197154     -0.166306E-14  0.166306E-14   210.711       210.711    
  23  0.555898     -0.587170     -0.495295E-14  0.495295E-14   210.860       210.860    
  24  0.100544E-02  -6.90233     -0.582232E-13  0.582232E-13   211.316       211.316    
  25  0.388073     -0.946562     -0.798453E-14  0.798453E-14   212.314       212.314    
  26  0.878731     -0.129276     -0.109048E-14  0.109048E-14   212.788       212.788    
  27  0.227612      -1.48011     -0.124852E-13  0.124852E-13   212.820       212.820    
  28  0.729179     -0.315836     -0.266417E-14  0.266417E-14   213.685       213.685    
  29  0.794443E-01  -2.53270     -0.213641E-13  0.213641E-13   213.829       213.829    
  30  0.453166     -0.791496     -0.667651E-14  0.667651E-14   214.409       214.409    
  31  0.439026     -0.823197     -0.694391E-14  0.694391E-14   214.759       214.759    
  32  0.592635     -0.523176     -0.441315E-14  0.441315E-14   215.071       215.071    
  33  0.915924     -0.878216E-01 -0.740801E-15  0.740801E-15   215.164       215.164    
  34  0.779290     -0.249373     -0.210353E-14  0.210353E-14   215.655       215.655    
  35  0.268008      -1.31674     -0.111071E-13  0.111071E-13   215.701       215.701    
  36  0.652045     -0.427642     -0.360729E-14  0.360729E-14   215.969       215.969    
  37  0.988560     -0.115061E-01 -0.970573E-16  0.970573E-16   216.105       216.105    
  38  0.814646     -0.205001     -0.172925E-14  0.172925E-14   216.230       216.230    
  39  0.113715      -2.17406     -0.183388E-13  0.183388E-13   216.880       216.880    
  40  0.587782E-01  -2.83398     -0.239055E-13  0.239055E-13   217.102       217.102    
  41  0.476497     -0.741294     -0.625303E-14  0.625303E-14   217.227       217.227    
  42  0.871820     -0.137173     -0.115709E-14  0.115709E-14   217.644       217.644    
  43  0.531692     -0.631691     -0.532850E-14  0.532850E-14   217.907       217.907    
  44  0.132744      -2.01933     -0.170337E-13  0.170337E-13   218.263       218.263    
  45  0.887739     -0.119078     -0.100446E-14  0.100446E-14   218.364       218.364    
  46  0.619826     -0.478316     -0.403474E-14  0.403474E-14   218.532       218.532    
  47  0.419855E-02  -5.47302     -0.461665E-13  0.461665E-13   218.573       218.573    
  48  0.344318      -1.06619     -0.899363E-14  0.899363E-14   218.696       218.696    
  49  0.480270     -0.733407     -0.618650E-14  0.618650E-14   219.138       219.138    
  50  0.157321      -1.84947     -0.156008E-13  0.156008E-13   219.565       219.565    
  51  0.889532     -0.117060     -0.987433E-15  0.987433E-15   219.730       219.730    
  52  0.614155E-01  -2.79009     -0.235353E-13  0.235353E-13   220.127       220.127    
  53  0.795240     -0.229111     -0.193262E-14  0.193262E-14   220.481       220.481    
  54  0.154718      -1.86615     -0.157415E-13  0.157415E-13   220.548       220.548    
  55  0.178287      -1.72436     -0.145455E-13  0.145455E-13   220.576       220.576    
  56  0.601782     -0.507860     -0.428395E-14  0.428395E-14   220.782       220.782    
  57  0.654058     -0.424559     -0.358128E-14  0.358128E-14   221.103       221.103    
  58  0.692123     -0.367991     -0.310411E-14  0.310411E-14   221.131       221.131    
  59  0.371323     -0.990683     -0.835670E-14  0.835670E-14   221.266       221.266    
  60  0.102672      -2.27621     -0.192005E-13  0.192005E-13   221.376       221.376    
  61  0.434419     -0.833745     -0.703288E-14  0.703288E-14   194.406       194.406    
loop,thermsimp(1:2)       95  0.742585E-14  0.100390E-13

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    302              212.10          0.80          0.47         20.27
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    212.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:       95
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   7.52681    

hmean,hstd : ****************************


write best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd : ****************************
h(1),h(best1),h(np1) : ******************************************
htherm(1),htherm(best1),htherm(np1) : ******************************************


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj:    303              210.42          0.79          0.47         20.35

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    2.4295      -1.7693       3.9956      -100.00      0.31773      -1.4980    
    1.1058      -100.00       2.8850      -1.1132     -0.10665      -1.9545    
    2.0085       0.0000      0.66000      -1.1235      -20.000       0.0000    
    0.0000      -1.2210      -1.6000       6863.4       9120.9      -552.55    

   -1451.5      -4.2152      -5.7497      -4.4650      -15.334      -5.1680    
   -13.086      -2.6772      -3855.2       0.0000      -1859.4      -450.20    
    5710.5      -141.03       115.02       2346.3      -915.58      0.55820E-01
  -0.62691E-01   0.0000     -0.13894     -0.21464     -0.14111     -0.16084    

  -0.19784     -0.78663E-02 -0.71642      -2.7736       1.3819      0.20844    
   0.38811E-01  0.75574E-01 -0.35341E-01 -0.12240     -0.37430E-01 -0.66468E-01
  -0.77381E-01  0.81023E-01 -0.23700      -3.1073       1.3819      -1.3595    
   -1.7164       3496.7       2352.4       0.0000       0.0000       9.1419    

    8.4589       0.0000      0.10000       1.2445       1.2316       9.1489    
    8.9016      -119.46      0.10000       1.2445       1.2275       9.2489    
    9.1057      -610.59      0.10000      0.43754      0.88187       9.3489    
    9.2168       7992.5      0.10000    
 Function value at centroid =   210.416    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.843530E-14           301
loop is:        1
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.168706E-14           311

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      311
neval,tstepnext:      302     311

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356901      -1.03030     -0.173817E-14  0.173817E-14   192.782       192.782    
   2  0.557062     -0.585078     -0.987062E-15  0.987062E-15   194.053       194.053    
   3  0.547739     -0.601956     -0.101554E-14  0.101554E-14   194.406       194.406    
   4  0.782317     -0.245496     -0.414166E-15  0.414166E-15   195.002       195.002    
   5  0.350628      -1.04803     -0.176809E-14  0.176809E-14   197.742       197.742    
   6  0.629381     -0.463018     -0.781139E-15  0.781139E-15   198.488       198.488    
   7  0.379152     -0.969818     -0.163614E-14  0.163614E-14   203.055       203.055    
   8  0.646843     -0.435651     -0.734969E-15  0.734969E-15   204.171       204.171    
   9  0.278741      -1.27747     -0.215517E-14  0.215517E-14   204.213       204.213    
  10  0.434015     -0.834676     -0.140815E-14  0.140815E-14   204.446       204.446    
  11  0.430267     -0.843350     -0.142278E-14  0.142278E-14   204.595       204.595    
  12  0.875033     -0.133493     -0.225211E-15  0.225211E-15   204.760       204.760    
  13  0.615613     -0.485137     -0.818454E-15  0.818454E-15   206.414       206.414    
  14  0.131070      -2.03203     -0.342815E-14  0.342815E-14   206.471       206.471    
  15  0.417809     -0.872730     -0.147235E-14  0.147235E-14   206.556       206.556    
  16  0.541324     -0.613737     -0.103541E-14  0.103541E-14   207.724       207.724    
  17  0.512921     -0.667633     -0.112634E-14  0.112634E-14   207.841       207.841    
  18  0.706058     -0.348059     -0.587195E-15  0.587195E-15   208.538       208.538    
  19  0.365092      -1.00761     -0.169989E-14  0.169989E-14   209.163       209.163    
  20  0.345085      -1.06396     -0.179497E-14  0.179497E-14   209.889       209.889    
  21  0.749883     -0.287838     -0.485600E-15  0.485600E-15   210.275       210.275    
  22  0.227696      -1.47974     -0.249641E-14  0.249641E-14   210.633       210.633    
  23  0.391100     -0.938791     -0.158380E-14  0.158380E-14   210.711       210.711    
  24  0.958338     -0.425550E-01 -0.717928E-16  0.717928E-16   210.860       210.860    
  25  0.487893     -0.717660     -0.121073E-14  0.121073E-14   211.316       211.316    
  26  0.301642      -1.19851     -0.202196E-14  0.202196E-14   212.314       212.314    
  27  0.510466     -0.672431     -0.113443E-14  0.113443E-14   212.788       212.788    
  28  0.321866      -1.13362     -0.191248E-14  0.191248E-14   212.820       212.820    
  29  0.133194      -2.01595     -0.340103E-14  0.340103E-14   213.685       213.685    
  30  0.830587E-01  -2.48821     -0.419775E-14  0.419775E-14   213.829       213.829    
  31  0.664808     -0.408257     -0.688754E-15  0.688754E-15   214.409       214.409    
  32  0.624024     -0.471567     -0.795562E-15  0.795562E-15   214.759       214.759    
  33  0.113240      -2.17825     -0.367483E-14  0.367483E-14   215.071       215.071    
  34  0.491224     -0.710855     -0.119925E-14  0.119925E-14   215.164       215.164    
  35  0.817870     -0.201052     -0.339187E-15  0.339187E-15   215.655       215.655    
  36  0.493334E-01  -3.00915     -0.507662E-14  0.507662E-14   215.701       215.701    
  37  0.122586      -2.09895     -0.354105E-14  0.354105E-14   215.969       215.969    
  38  0.731713     -0.312367     -0.526982E-15  0.526982E-15   216.105       216.105    
  39  0.199646      -1.61121     -0.271820E-14  0.271820E-14   216.230       216.230    
  40  0.120832      -2.11336     -0.356536E-14  0.356536E-14   216.880       216.880    
  41  0.875272     -0.133221     -0.224751E-15  0.224751E-15   217.102       217.102    
  42  0.203197      -1.59358     -0.268846E-14  0.268846E-14   217.227       217.227    
  43  0.435004     -0.832401     -0.140431E-14  0.140431E-14   217.644       217.644    
  44  0.359665      -1.02258     -0.172516E-14  0.172516E-14   217.907       217.907    
  45  0.466537     -0.762418     -0.128624E-14  0.128624E-14   218.263       218.263    
  46  0.295145      -1.22029     -0.205870E-14  0.205870E-14   218.364       218.364    
  47  0.883700     -0.123638     -0.208585E-15  0.208585E-15   218.532       218.532    
  48  0.534106     -0.627161     -0.105806E-14  0.105806E-14   218.573       218.573    
  49  0.250778      -1.38319     -0.233352E-14  0.233352E-14   218.696       218.696    
  50  0.265892E-01  -3.62725     -0.611939E-14  0.611939E-14   219.138       219.138    
  51  0.717650E-01  -2.63436     -0.444432E-14  0.444432E-14   219.565       219.565    
  52  0.155402      -1.86174     -0.314086E-14  0.314086E-14   219.730       219.730    
  53  0.943311     -0.583595E-01 -0.984558E-16  0.984558E-16   220.127       220.127    
  54  0.295838      -1.21794     -0.205474E-14  0.205474E-14   220.481       220.481    
  55  0.705587     -0.348725     -0.588319E-15  0.588319E-15   220.548       220.548    
  56  0.332027      -1.10254     -0.186005E-14  0.186005E-14   220.576       220.576    
  57  0.554523     -0.589647     -0.994768E-15  0.994768E-15   220.782       220.782    
  58  0.128195      -2.05420     -0.346556E-14  0.346556E-14   221.103       221.103    
  59  0.881665E-01  -2.42853     -0.409707E-14  0.409707E-14   221.131       221.131    
  60  0.637084     -0.450854     -0.760618E-15  0.760618E-15   221.266       221.266    
  61  0.566712     -0.567904     -0.958088E-15  0.958088E-15   212.098       212.098    
loop,thermsimp(1:2)        1  0.173817E-14  0.987062E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    304              196.61          0.77          0.46         20.30
Just calling func    0   0         22.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        1
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        2
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      311
neval,tstepnext:      303     311

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876291     -0.132057     -0.222787E-15  0.222787E-15   192.782       192.782    
   2  0.290008      -1.23785     -0.208832E-14  0.208832E-14   194.053       194.053    
   3  0.554226     -0.590182     -0.995672E-15  0.995672E-15   194.406       194.406    
   4  0.530394     -0.634136     -0.106982E-14  0.106982E-14   195.002       195.002    
   5  0.486060     -0.721423     -0.121708E-14  0.121708E-14   197.742       197.742    
   6  0.277719      -1.28114     -0.216137E-14  0.216137E-14   198.488       198.488    
   7  0.748241     -0.290031     -0.489299E-15  0.489299E-15   203.055       203.055    
   8  0.148920      -1.90434     -0.321274E-14  0.321274E-14   204.171       204.171    
   9  0.397601     -0.922308     -0.155599E-14  0.155599E-14   204.213       204.213    
  10  0.105784      -2.24636     -0.378974E-14  0.378974E-14   204.446       204.446    
  11  0.815763     -0.203631     -0.343538E-15  0.343538E-15   204.595       204.595    
  12  0.779342     -0.249306     -0.420594E-15  0.420594E-15   204.760       204.760    
  13  0.121666      -2.10648     -0.355375E-14  0.355375E-14   206.414       206.414    
  14  0.335651      -1.09168     -0.184173E-14  0.184173E-14   206.471       206.471    
  15  0.187421      -1.67440     -0.282481E-14  0.282481E-14   206.556       206.556    
  16  0.691177     -0.369360     -0.623132E-15  0.623132E-15   207.724       207.724    
  17  0.118158      -2.13573     -0.360310E-14  0.360310E-14   207.841       207.841    
  18  0.606368     -0.500269     -0.843983E-15  0.843983E-15   208.538       208.538    
  19  0.855457     -0.156119     -0.263383E-15  0.263383E-15   209.163       209.163    
  20  0.769581     -0.261909     -0.441855E-15  0.441855E-15   209.889       209.889    
  21  0.859009E-01  -2.45456     -0.414099E-14  0.414099E-14   210.275       210.275    
  22  0.452216     -0.793595     -0.133884E-14  0.133884E-14   210.633       210.633    
  23  0.623330     -0.472679     -0.797438E-15  0.797438E-15   210.711       210.711    
  24  0.366647      -1.00336     -0.169272E-14  0.169272E-14   210.860       210.860    
  25  0.350348      -1.04883     -0.176943E-14  0.176943E-14   211.316       211.316    
  26  0.449278     -0.800113     -0.134984E-14  0.134984E-14   212.098       212.098    
  27  0.303374      -1.19279     -0.201231E-14  0.201231E-14   212.314       212.314    
  28  0.377638     -0.973819     -0.164289E-14  0.164289E-14   212.788       212.788    
  29  0.424905     -0.855889     -0.144394E-14  0.144394E-14   212.820       212.820    
  30  0.947804     -0.536073E-01 -0.904387E-16  0.904387E-16   213.685       213.685    
  31  0.153947      -1.87115     -0.315673E-14  0.315673E-14   213.829       213.829    
  32  0.485845E-01  -3.02445     -0.510243E-14  0.510243E-14   214.409       214.409    
  33  0.156500      -1.85470     -0.312899E-14  0.312899E-14   214.759       214.759    
  34  0.560376     -0.579148     -0.977056E-15  0.977056E-15   215.071       215.071    
  35  0.544007E-01  -2.91138     -0.491167E-14  0.491167E-14   215.164       215.164    
  36  0.580278     -0.544248     -0.918179E-15  0.918179E-15   215.655       215.655    
  37  0.800919     -0.221995     -0.374519E-15  0.374519E-15   215.701       215.701    
  38  0.265529      -1.32603     -0.223709E-14  0.223709E-14   215.969       215.969    
  39  0.848344     -0.164469     -0.277470E-15  0.277470E-15   216.105       216.105    
  40  0.962498     -0.382232E-01 -0.644848E-16  0.644848E-16   216.230       216.230    
  41  0.272739      -1.29924     -0.219190E-14  0.219190E-14   216.880       216.880    
  42  0.571507     -0.559478     -0.943872E-15  0.943872E-15   217.102       217.102    
  43  0.776527     -0.252924     -0.426697E-15  0.426697E-15   217.227       217.227    
  44  0.952222     -0.489569E-01 -0.825931E-16  0.825931E-16   217.644       217.644    
  45  0.134463      -2.00647     -0.338503E-14  0.338503E-14   217.907       217.907    
  46  0.869337     -0.140024     -0.236229E-15  0.236229E-15   218.263       218.263    
  47  0.517158     -0.659407     -0.111246E-14  0.111246E-14   218.364       218.364    
  48  0.175310      -1.74120     -0.293751E-14  0.293751E-14   218.532       218.532    
  49  0.602392     -0.506847     -0.855081E-15  0.855081E-15   218.573       218.573    
  50  0.688358     -0.373447     -0.630027E-15  0.630027E-15   218.696       218.696    
  51  0.640936     -0.444826     -0.750447E-15  0.750447E-15   219.138       219.138    
  52  0.185831      -1.68292     -0.283918E-14  0.283918E-14   219.565       219.565    
  53  0.669908     -0.400615     -0.675861E-15  0.675861E-15   219.730       219.730    
  54  0.436160     -0.829746     -0.139983E-14  0.139983E-14   220.127       220.127    
  55  0.670984     -0.399009     -0.673152E-15  0.673152E-15   220.481       220.481    
  56  0.798425     -0.225115     -0.379782E-15  0.379782E-15   220.548       220.548    
  57  0.736238     -0.306202     -0.516580E-15  0.516580E-15   220.576       220.576    
  58  0.433294E-01  -3.13892     -0.529555E-14  0.529555E-14   220.782       220.782    
  59  0.611084     -0.492521     -0.830911E-15  0.830911E-15   221.103       221.103    
  60  0.280934      -1.26963     -0.214195E-14  0.214195E-14   221.131       221.131    
  61  0.398426     -0.920234     -0.155249E-14  0.155249E-14   196.611       196.611    
loop,thermsimp(1:2)        2  0.222787E-15  0.208832E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    305              201.47          0.80          0.47         20.27
Just calling func    0   0         22.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    201.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        2
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        3
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      311
neval,tstepnext:      304     311

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.634703     -0.454598     -0.766933E-15  0.766933E-15   192.782       192.782    
   2  0.130770      -2.03432     -0.343201E-14  0.343201E-14   194.053       194.053    
   3  0.665686E-01  -2.70952     -0.457112E-14  0.457112E-14   194.406       194.406    
   4  0.109483      -2.21198     -0.373175E-14  0.373175E-14   195.002       195.002    
   5  0.692619     -0.367275     -0.619614E-15  0.619614E-15   196.611       196.611    
   6  0.222037      -1.50491     -0.253888E-14  0.253888E-14   197.742       197.742    
   7  0.507534     -0.678192     -0.114415E-14  0.114415E-14   198.488       198.488    
   8  0.321246      -1.13555     -0.191573E-14  0.191573E-14   203.055       203.055    
   9  0.440141     -0.820661     -0.138450E-14  0.138450E-14   204.171       204.171    
  10  0.476585E-02  -5.34628     -0.901949E-14  0.901949E-14   204.213       204.213    
  11  0.690860     -0.369818     -0.623905E-15  0.623905E-15   204.446       204.446    
  12  0.125197      -2.07787     -0.350549E-14  0.350549E-14   204.595       204.595    
  13  0.125327      -2.07683     -0.350373E-14  0.350373E-14   204.760       204.760    
  14  0.732856     -0.310805     -0.524347E-15  0.524347E-15   206.414       206.414    
  15  0.108214      -2.22364     -0.375141E-14  0.375141E-14   206.471       206.471    
  16  0.651383     -0.428657     -0.723169E-15  0.723169E-15   206.556       206.556    
  17  0.629680     -0.462544     -0.780339E-15  0.780339E-15   207.724       207.724    
  18  0.370337     -0.993341     -0.167582E-14  0.167582E-14   207.841       207.841    
  19  0.351029      -1.04689     -0.176616E-14  0.176616E-14   208.538       208.538    
  20  0.675458     -0.392364     -0.661941E-15  0.661941E-15   209.163       209.163    
  21  0.784716     -0.242434     -0.409000E-15  0.409000E-15   209.889       209.889    
  22  0.802366     -0.220190     -0.371474E-15  0.371474E-15   210.275       210.275    
  23  0.954818     -0.462342E-01 -0.779999E-16  0.779999E-16   210.633       210.633    
  24  0.312990      -1.16158     -0.195966E-14  0.195966E-14   210.711       210.711    
  25  0.109581      -2.21109     -0.373024E-14  0.373024E-14   210.860       210.860    
  26  0.606410     -0.500200     -0.843867E-15  0.843867E-15   211.316       211.316    
  27  0.150749      -1.89214     -0.319216E-14  0.319216E-14   212.098       212.098    
  28  0.699014     -0.358085     -0.604110E-15  0.604110E-15   212.314       212.314    
  29  0.271406      -1.30414     -0.220016E-14  0.220016E-14   212.788       212.788    
  30  0.649177     -0.432051     -0.728895E-15  0.728895E-15   212.820       212.820    
  31  0.359756      -1.02233     -0.172473E-14  0.172473E-14   213.685       213.685    
  32  0.512598     -0.668263     -0.112740E-14  0.112740E-14   213.829       213.829    
  33  0.959585     -0.412547E-01 -0.695991E-16  0.695991E-16   214.409       214.409    
  34  0.938569     -0.633985E-01 -0.106957E-15  0.106957E-15   214.759       214.759    
  35  0.490053     -0.713241     -0.120328E-14  0.120328E-14   215.071       215.071    
  36  0.417673     -0.873056     -0.147290E-14  0.147290E-14   215.164       215.164    
  37  0.543372E-01  -2.91255     -0.491364E-14  0.491364E-14   215.655       215.655    
  38  0.653043     -0.426113     -0.718877E-15  0.718877E-15   215.701       215.701    
  39  0.100835E-01  -4.59685     -0.775516E-14  0.775516E-14   215.969       215.969    
  40  0.214613      -1.53892     -0.259624E-14  0.259624E-14   216.105       216.105    
  41  0.837691     -0.177106     -0.298788E-15  0.298788E-15   216.230       216.230    
  42  0.158167      -1.84410     -0.311111E-14  0.311111E-14   216.880       216.880    
  43  0.331778      -1.10329     -0.186131E-14  0.186131E-14   217.102       217.102    
  44  0.831192     -0.184894     -0.311927E-15  0.311927E-15   217.227       217.227    
  45  0.897055     -0.108638     -0.183279E-15  0.183279E-15   217.644       217.644    
  46  0.374190     -0.982992     -0.165837E-14  0.165837E-14   217.907       217.907    
  47  0.261065      -1.34299     -0.226570E-14  0.226570E-14   218.263       218.263    
  48  0.995129     -0.488293E-02 -0.823779E-17  0.823779E-17   218.364       218.364    
  49  0.670727     -0.399392     -0.673798E-15  0.673798E-15   218.532       218.532    
  50  0.878779     -0.129222     -0.218004E-15  0.218004E-15   218.573       218.573    
  51  0.491656E-02  -5.31515     -0.896697E-14  0.896697E-14   218.696       218.696    
  52  0.181239      -1.70794     -0.288139E-14  0.288139E-14   219.138       219.138    
  53  0.979003     -0.212209E-01 -0.358010E-16  0.358010E-16   219.565       219.565    
  54  0.469957     -0.755114     -0.127392E-14  0.127392E-14   219.730       219.730    
  55  0.954998     -0.460458E-01 -0.776821E-16  0.776821E-16   220.127       220.127    
  56  0.552285     -0.593692     -0.100159E-14  0.100159E-14   220.481       220.481    
  57  0.813695     -0.206170     -0.347821E-15  0.347821E-15   220.548       220.548    
  58  0.756455     -0.279113     -0.470880E-15  0.470880E-15   220.576       220.576    
  59  0.262385      -1.33794     -0.225719E-14  0.225719E-14   220.782       220.782    
  60  0.167477E-01  -4.08949     -0.689922E-14  0.689922E-14   221.103       221.103    
  61  0.756693     -0.278798     -0.470349E-15  0.470349E-15   201.471       201.471    
loop,thermsimp(1:2)        3  0.766933E-15  0.343201E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    306              192.34          0.79          0.47         20.23
Just calling func    0   0         22.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    307              202.17          0.77          0.46         20.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        3
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        4
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      311
neval,tstepnext:      306     311

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.149994      -1.89716     -0.320062E-14  0.320062E-14   192.782       192.782    
   2  0.411169     -0.888751     -0.149938E-14  0.149938E-14   194.053       194.053    
   3  0.318550      -1.14398     -0.192996E-14  0.192996E-14   194.406       194.406    
   4  0.549516     -0.598717     -0.101007E-14  0.101007E-14   195.002       195.002    
   5  0.247994      -1.39435     -0.235235E-14  0.235235E-14   196.611       196.611    
   6  0.203153      -1.59380     -0.268883E-14  0.268883E-14   197.742       197.742    
   7  0.788072     -0.238166     -0.401799E-15  0.401799E-15   198.488       198.488    
   8  0.838609     -0.176011     -0.296941E-15  0.296941E-15   201.471       201.471    
   9  0.923019     -0.801058E-01 -0.135143E-15  0.135143E-15   203.055       203.055    
  10  0.741992     -0.298417     -0.503447E-15  0.503447E-15   204.171       204.171    
  11  0.339475      -1.08036     -0.182262E-14  0.182262E-14   204.213       204.213    
  12  0.415261     -0.878849     -0.148267E-14  0.148267E-14   204.446       204.446    
  13  0.876126     -0.132246     -0.223106E-15  0.223106E-15   204.595       204.595    
  14  0.635306     -0.453649     -0.765332E-15  0.765332E-15   204.760       204.760    
  15  0.224225      -1.49511     -0.252233E-14  0.252233E-14   206.414       206.414    
  16  0.132139      -2.02390     -0.341444E-14  0.341444E-14   206.471       206.471    
  17  0.288765      -1.24214     -0.209557E-14  0.209557E-14   206.556       206.556    
  18  0.632480     -0.458106     -0.772852E-15  0.772852E-15   207.724       207.724    
  19  0.424062     -0.857876     -0.144729E-14  0.144729E-14   207.841       207.841    
  20  0.941052E-01  -2.36334     -0.398710E-14  0.398710E-14   208.538       208.538    
  21  0.494605     -0.703996     -0.118768E-14  0.118768E-14   209.163       209.163    
  22  0.517459     -0.658826     -0.111148E-14  0.111148E-14   209.889       209.889    
  23  0.840203     -0.174112     -0.293737E-15  0.293737E-15   210.275       210.275    
  24  0.244910E-01  -3.70945     -0.625806E-14  0.625806E-14   210.633       210.633    
  25  0.283731      -1.25973     -0.212523E-14  0.212523E-14   210.711       210.711    
  26  0.610701     -0.493148     -0.831970E-15  0.831970E-15   210.860       210.860    
  27  0.183146E-01  -4.00006     -0.674834E-14  0.674834E-14   211.316       211.316    
  28  0.808413     -0.212682     -0.358807E-15  0.358807E-15   212.098       212.098    
  29  0.377174     -0.975049     -0.164497E-14  0.164497E-14   212.314       212.314    
  30  0.174045E-01  -4.05102     -0.683432E-14  0.683432E-14   212.788       212.788    
  31  0.694981     -0.363871     -0.613871E-15  0.613871E-15   212.820       212.820    
  32  0.610687     -0.493170     -0.832007E-15  0.832007E-15   213.685       213.685    
  33  0.947515     -0.539122E-01 -0.909531E-16  0.909531E-16   213.829       213.829    
  34  0.847235E-01  -2.46836     -0.416427E-14  0.416427E-14   214.409       214.409    
  35  0.923547E-01  -2.38212     -0.401878E-14  0.401878E-14   214.759       214.759    
  36  0.782421     -0.245363     -0.413942E-15  0.413942E-15   215.071       215.071    
  37  0.656766     -0.420428     -0.709287E-15  0.709287E-15   215.164       215.164    
  38  0.103428      -2.26888     -0.382774E-14  0.382774E-14   215.655       215.655    
  39  0.455826     -0.785645     -0.132543E-14  0.132543E-14   215.701       215.701    
  40  0.851703     -0.160517     -0.270802E-15  0.270802E-15   215.969       215.969    
  41  0.224869      -1.49224     -0.251749E-14  0.251749E-14   216.105       216.105    
  42  0.816111     -0.203205     -0.342819E-15  0.342819E-15   216.230       216.230    
  43  0.985915E-01  -2.31677     -0.390853E-14  0.390853E-14   216.880       216.880    
  44  0.704957     -0.349619     -0.589828E-15  0.589828E-15   217.102       217.102    
  45  0.622990     -0.473225     -0.798359E-15  0.798359E-15   217.227       217.227    
  46  0.764210     -0.268913     -0.453672E-15  0.453672E-15   217.644       217.644    
  47  0.976924     -0.233466E-01 -0.393870E-16  0.393870E-16   217.907       217.907    
  48  0.475203E-01  -3.04660     -0.513979E-14  0.513979E-14   218.263       218.263    
  49  0.111178      -2.19662     -0.370583E-14  0.370583E-14   218.364       218.364    
  50  0.214071      -1.54145     -0.260051E-14  0.260051E-14   218.532       218.532    
  51  0.712632     -0.338789     -0.571558E-15  0.571558E-15   218.573       218.573    
  52  0.850512     -0.161917     -0.273163E-15  0.273163E-15   218.696       218.696    
  53  0.791588     -0.233715     -0.394290E-15  0.394290E-15   219.138       219.138    
  54  0.598930     -0.512610     -0.864804E-15  0.864804E-15   219.565       219.565    
  55  0.215023      -1.53701     -0.259303E-14  0.259303E-14   219.730       219.730    
  56  0.380683     -0.965789     -0.162934E-14  0.162934E-14   220.127       220.127    
  57  0.812601     -0.207515     -0.350089E-15  0.350089E-15   220.481       220.481    
  58  0.204275      -1.58829     -0.267953E-14  0.267953E-14   220.548       220.548    
  59  0.570017     -0.562089     -0.948277E-15  0.948277E-15   220.576       220.576    
  60  0.241016      -1.42289     -0.240051E-14  0.240051E-14   220.782       220.782    
  61  0.809841     -0.210918     -0.355830E-15  0.355830E-15   192.343       192.343    
loop,thermsimp(1:2)        4  0.320062E-14  0.149938E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    308              192.05          0.80          0.47         20.35
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    309              208.43          0.77          0.46         20.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    192.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        4
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        5
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      311
neval,tstepnext:      308     311

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352399      -1.04299     -0.175959E-14  0.175959E-14   192.343       192.343    
   2  0.671439     -0.398332     -0.672010E-15  0.672010E-15   192.782       192.782    
   3  0.227715      -1.47966     -0.249628E-14  0.249628E-14   194.053       194.053    
   4  0.681878     -0.382905     -0.645983E-15  0.645983E-15   194.406       194.406    
   5  0.545340     -0.606346     -0.102294E-14  0.102294E-14   195.002       195.002    
   6  0.248797      -1.39112     -0.234690E-14  0.234690E-14   196.611       196.611    
   7  0.497795     -0.697567     -0.117684E-14  0.117684E-14   197.742       197.742    
   8  0.252257      -1.37731     -0.232360E-14  0.232360E-14   198.488       198.488    
   9  0.975842     -0.244546E-01 -0.412563E-16  0.412563E-16   201.471       201.471    
  10  0.474659     -0.745158     -0.125713E-14  0.125713E-14   203.055       203.055    
  11  0.192477      -1.64778     -0.277990E-14  0.277990E-14   204.171       204.171    
  12  0.989618     -0.104360E-01 -0.176062E-16  0.176062E-16   204.213       204.213    
  13  0.867654E-01  -2.44455     -0.412410E-14  0.412410E-14   204.446       204.446    
  14  0.285494      -1.25353     -0.211479E-14  0.211479E-14   204.595       204.595    
  15  0.367236      -1.00175     -0.169001E-14  0.169001E-14   204.760       204.760    
  16  0.249495      -1.38832     -0.234217E-14  0.234217E-14   206.414       206.414    
  17  0.878194     -0.129888     -0.219128E-15  0.219128E-15   206.471       206.471    
  18  0.771427     -0.259513     -0.437814E-15  0.437814E-15   206.556       206.556    
  19  0.739249     -0.302121     -0.509696E-15  0.509696E-15   207.724       207.724    
  20  0.205695      -1.58136     -0.266785E-14  0.266785E-14   207.841       207.841    
  21  0.777841     -0.251233     -0.423845E-15  0.423845E-15   208.538       208.538    
  22  0.409059     -0.893896     -0.150806E-14  0.150806E-14   209.163       209.163    
  23  0.824625     -0.192827     -0.325310E-15  0.325310E-15   209.889       209.889    
  24  0.666458E-01  -2.70836     -0.456917E-14  0.456917E-14   210.275       210.275    
  25  0.252070      -1.37805     -0.232485E-14  0.232485E-14   210.633       210.633    
  26  0.597454E-01  -2.81766     -0.475356E-14  0.475356E-14   210.711       210.711    
  27  0.171353E-01  -4.06661     -0.686062E-14  0.686062E-14   210.860       210.860    
  28  0.336542      -1.08903     -0.183726E-14  0.183726E-14   211.316       211.316    
  29  0.614299     -0.487274     -0.822059E-15  0.822059E-15   212.098       212.098    
  30  0.820677     -0.197626     -0.333407E-15  0.333407E-15   212.314       212.314    
  31  0.974612     -0.257159E-01 -0.433843E-16  0.433843E-16   212.788       212.788    
  32  0.315266      -1.15434     -0.194744E-14  0.194744E-14   212.820       212.820    
  33  0.707962     -0.345364     -0.582650E-15  0.582650E-15   213.685       213.685    
  34  0.207706      -1.57163     -0.265143E-14  0.265143E-14   213.829       213.829    
  35  0.289365      -1.24007     -0.209207E-14  0.209207E-14   214.409       214.409    
  36  0.509070E-01  -2.97776     -0.502365E-14  0.502365E-14   214.759       214.759    
  37  0.916755     -0.869148E-01 -0.146630E-15  0.146630E-15   215.071       215.071    
  38  0.301182      -1.20004     -0.202454E-14  0.202454E-14   215.164       215.164    
  39  0.912614     -0.914424E-01 -0.154269E-15  0.154269E-15   215.655       215.655    
  40  0.669851     -0.400700     -0.676005E-15  0.676005E-15   215.701       215.701    
  41  0.172911      -1.75498     -0.296075E-14  0.296075E-14   215.969       215.969    
  42  0.901869     -0.103286     -0.174249E-15  0.174249E-15   216.105       216.105    
  43  0.401606E-01  -3.21487     -0.542367E-14  0.542367E-14   216.230       216.230    
  44  0.871722     -0.137284     -0.231607E-15  0.231607E-15   216.880       216.880    
  45  0.239700      -1.42837     -0.240974E-14  0.240974E-14   217.102       217.102    
  46  0.293766      -1.22497     -0.206660E-14  0.206660E-14   217.227       217.227    
  47  0.978972     -0.212518E-01 -0.358530E-16  0.358530E-16   217.644       217.644    
  48  0.335179E-01  -3.39567     -0.572870E-14  0.572870E-14   217.907       217.907    
  49  0.306066      -1.18396     -0.199740E-14  0.199740E-14   218.263       218.263    
  50  0.353931      -1.03865     -0.175227E-14  0.175227E-14   218.364       218.364    
  51  0.416481     -0.875915     -0.147772E-14  0.147772E-14   218.532       218.532    
  52  0.647828     -0.434130     -0.732404E-15  0.732404E-15   218.573       218.573    
  53  0.372356     -0.987904     -0.166665E-14  0.166665E-14   218.696       218.696    
  54  0.235297      -1.44691     -0.244102E-14  0.244102E-14   219.138       219.138    
  55  0.782393     -0.245398     -0.414001E-15  0.414001E-15   219.565       219.565    
  56  0.930913     -0.715890E-01 -0.120775E-15  0.120775E-15   219.730       219.730    
  57  0.923882     -0.791713E-01 -0.133567E-15  0.133567E-15   220.127       220.127    
  58  0.529408     -0.635997     -0.107296E-14  0.107296E-14   220.481       220.481    
  59  0.373786     -0.984071     -0.166019E-14  0.166019E-14   220.548       220.548    
  60  0.425584     -0.854293     -0.144124E-14  0.144124E-14   220.576       220.576    
  61  0.747647     -0.290824     -0.490638E-15  0.490638E-15   192.054       192.054    
loop,thermsimp(1:2)        5  0.175959E-14  0.672010E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    310              204.44          0.79          0.47         20.23
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    204.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        5
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        6
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      311
neval,tstepnext:      309     311

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.246701      -1.39958     -0.236117E-14  0.236117E-14   192.054       192.054    
   2  0.501084     -0.690981     -0.116573E-14  0.116573E-14   192.343       192.343    
   3  0.674759     -0.393400     -0.663690E-15  0.663690E-15   192.782       192.782    
   4  0.644527     -0.439239     -0.741022E-15  0.741022E-15   194.053       194.053    
   5  0.966723     -0.338429E-01 -0.570950E-16  0.570950E-16   194.406       194.406    
   6  0.928963     -0.736861E-01 -0.124313E-15  0.124313E-15   195.002       195.002    
   7  0.170718      -1.76774     -0.298229E-14  0.298229E-14   196.611       196.611    
   8  0.717266     -0.332308     -0.560623E-15  0.560623E-15   197.742       197.742    
   9  0.884998     -0.122170     -0.206107E-15  0.206107E-15   198.488       198.488    
  10  0.115073      -2.16219     -0.364774E-14  0.364774E-14   201.471       201.471    
  11  0.189870      -1.66142     -0.280291E-14  0.280291E-14   203.055       203.055    
  12  0.768449     -0.263381     -0.444340E-15  0.444340E-15   204.171       204.171    
  13  0.407006E-01  -3.20151     -0.540114E-14  0.540114E-14   204.213       204.213    
  14  0.792015     -0.233175     -0.393380E-15  0.393380E-15   204.446       204.446    
  15  0.953656     -0.474518E-01 -0.800540E-16  0.800540E-16   204.595       204.595    
  16  0.476211     -0.741894     -0.125162E-14  0.125162E-14   204.760       204.760    
  17  0.858816     -0.152200     -0.256771E-15  0.256771E-15   206.414       206.414    
  18  0.504323     -0.684537     -0.115486E-14  0.115486E-14   206.471       206.471    
  19  0.368133     -0.999312     -0.168590E-14  0.168590E-14   206.556       206.556    
  20  0.938846     -0.631035E-01 -0.106459E-15  0.106459E-15   207.724       207.724    
  21  0.929854     -0.727274E-01 -0.122695E-15  0.122695E-15   207.841       207.841    
  22  0.325404      -1.12269     -0.189404E-14  0.189404E-14   208.538       208.538    
  23  0.171351E-01  -4.06663     -0.686064E-14  0.686064E-14   209.163       209.163    
  24  0.448497     -0.801854     -0.135278E-14  0.135278E-14   209.889       209.889    
  25  0.227327      -1.48136     -0.249915E-14  0.249915E-14   210.275       210.275    
  26  0.809571     -0.211250     -0.356392E-15  0.356392E-15   210.633       210.633    
  27  0.646133     -0.436749     -0.736822E-15  0.736822E-15   210.711       210.711    
  28  0.522696     -0.648756     -0.109449E-14  0.109449E-14   210.860       210.860    
  29  0.217047E-01  -3.83023     -0.646182E-14  0.646182E-14   211.316       211.316    
  30  0.432888     -0.837277     -0.141254E-14  0.141254E-14   212.098       212.098    
  31  0.260856      -1.34379     -0.226705E-14  0.226705E-14   212.314       212.314    
  32  0.286880      -1.24869     -0.210661E-14  0.210661E-14   212.788       212.788    
  33  0.987360     -0.127206E-01 -0.214604E-16  0.214604E-16   212.820       212.820    
  34  0.795729     -0.228497     -0.385488E-15  0.385488E-15   213.685       213.685    
  35  0.580013     -0.544704     -0.918948E-15  0.918948E-15   213.829       213.829    
  36  0.678549     -0.387798     -0.654238E-15  0.654238E-15   214.409       214.409    
  37  0.302714      -1.19497     -0.201598E-14  0.201598E-14   214.759       214.759    
  38  0.116021      -2.15399     -0.363390E-14  0.363390E-14   215.071       215.071    
  39  0.623529     -0.472361     -0.796900E-15  0.796900E-15   215.164       215.164    
  40  0.102319      -2.27966     -0.384592E-14  0.384592E-14   215.655       215.655    
  41  0.487302     -0.718872     -0.121278E-14  0.121278E-14   215.701       215.701    
  42  0.424297     -0.857323     -0.144635E-14  0.144635E-14   215.969       215.969    
  43  0.313430      -1.16018     -0.195729E-14  0.195729E-14   216.105       216.105    
  44  0.998789E-01  -2.30380     -0.388664E-14  0.388664E-14   216.230       216.230    
  45  0.549333     -0.599050     -0.101063E-14  0.101063E-14   216.880       216.880    
  46  0.309815      -1.17178     -0.197686E-14  0.197686E-14   217.102       217.102    
  47  0.646336     -0.436435     -0.736292E-15  0.736292E-15   217.227       217.227    
  48  0.345618      -1.06242     -0.179237E-14  0.179237E-14   217.644       217.644    
  49  0.834219E-02  -4.78643     -0.807499E-14  0.807499E-14   217.907       217.907    
  50  0.436970     -0.827891     -0.139670E-14  0.139670E-14   218.263       218.263    
  51  0.906833     -0.977970E-01 -0.164989E-15  0.164989E-15   218.364       218.364    
  52  0.215119      -1.53656     -0.259227E-14  0.259227E-14   218.532       218.532    
  53  0.105100      -2.25284     -0.380067E-14  0.380067E-14   218.573       218.573    
  54  0.214892      -1.53762     -0.259405E-14  0.259405E-14   218.696       218.696    
  55  0.325272      -1.12309     -0.189472E-14  0.189472E-14   219.138       219.138    
  56  0.272623      -1.29967     -0.219261E-14  0.219261E-14   219.565       219.565    
  57  0.912921     -0.911064E-01 -0.153702E-15  0.153702E-15   219.730       219.730    
  58  0.886950     -0.119966     -0.202390E-15  0.202390E-15   220.127       220.127    
  59  0.761939     -0.271889     -0.458693E-15  0.458693E-15   220.481       220.481    
  60  0.793447     -0.231368     -0.390332E-15  0.390332E-15   220.548       220.548    
  61  0.308076      -1.17741     -0.198636E-14  0.198636E-14   204.441       204.441    
loop,thermsimp(1:2)        6  0.236117E-14  0.116573E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    311              195.59          0.79          0.46         20.24
Just calling func    0   0         22.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        6
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        7
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      311
neval,tstepnext:      310     311

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.606993     -0.499238     -0.842243E-15  0.842243E-15   192.054       192.054    
   2  0.834613     -0.180788     -0.304999E-15  0.304999E-15   192.343       192.343    
   3  0.515109E-01  -2.96596     -0.500375E-14  0.500375E-14   192.782       192.782    
   4  0.759058     -0.275677     -0.465083E-15  0.465083E-15   194.053       194.053    
   5  0.969748     -0.307188E-01 -0.518244E-16  0.518244E-16   194.406       194.406    
   6  0.596095     -0.517355     -0.872809E-15  0.872809E-15   195.002       195.002    
   7  0.105268E-01  -4.55383     -0.768258E-14  0.768258E-14   196.611       196.611    
   8  0.105619      -2.24792     -0.379237E-14  0.379237E-14   197.742       197.742    
   9  0.928956     -0.736941E-01 -0.124326E-15  0.124326E-15   198.488       198.488    
  10  0.779151     -0.249550     -0.421006E-15  0.421006E-15   201.471       201.471    
  11  0.771283E-01  -2.56228     -0.432273E-14  0.432273E-14   203.055       203.055    
  12  0.604507     -0.503342     -0.849167E-15  0.849167E-15   204.171       204.171    
  13  0.206137      -1.57921     -0.266422E-14  0.266422E-14   204.213       204.213    
  14  0.862446     -0.147982     -0.249655E-15  0.249655E-15   204.441       204.441    
  15  0.204278      -1.58827     -0.267951E-14  0.267951E-14   204.446       204.446    
  16  0.755003     -0.281033     -0.474120E-15  0.474120E-15   204.595       204.595    
  17  0.983343     -0.167974E-01 -0.283382E-16  0.283382E-16   204.760       204.760    
  18  0.291982      -1.23106     -0.207688E-14  0.207688E-14   206.414       206.414    
  19  0.552382     -0.593516     -0.100130E-14  0.100130E-14   206.471       206.471    
  20  0.850975     -0.161373     -0.272245E-15  0.272245E-15   206.556       206.556    
  21  0.319654      -1.14052     -0.192412E-14  0.192412E-14   207.724       207.724    
  22  0.534336     -0.626730     -0.105733E-14  0.105733E-14   207.841       207.841    
  23  0.136073      -1.99457     -0.336495E-14  0.336495E-14   208.538       208.538    
  24  0.356559      -1.03126     -0.173979E-14  0.173979E-14   209.163       209.163    
  25  0.538811     -0.618390     -0.104326E-14  0.104326E-14   209.889       209.889    
  26  0.145017      -1.93091     -0.325755E-14  0.325755E-14   210.275       210.275    
  27  0.933470E-01  -2.37143     -0.400075E-14  0.400075E-14   210.633       210.633    
  28  0.497794     -0.697569     -0.117684E-14  0.117684E-14   210.711       210.711    
  29  0.938903     -0.630433E-01 -0.106358E-15  0.106358E-15   210.860       210.860    
  30  0.428227     -0.848101     -0.143080E-14  0.143080E-14   211.316       211.316    
  31  0.275832      -1.28796     -0.217287E-14  0.217287E-14   212.098       212.098    
  32  0.756901     -0.278522     -0.469884E-15  0.469884E-15   212.314       212.314    
  33  0.577676     -0.548741     -0.925759E-15  0.925759E-15   212.788       212.788    
  34  0.302484      -1.19573     -0.201726E-14  0.201726E-14   212.820       212.820    
  35  0.724086     -0.322846     -0.544660E-15  0.544660E-15   213.685       213.685    
  36  0.797123     -0.226746     -0.382534E-15  0.382534E-15   213.829       213.829    
  37  0.770259     -0.261028     -0.440370E-15  0.440370E-15   214.409       214.409    
  38  0.665099     -0.407819     -0.688015E-15  0.688015E-15   214.759       214.759    
  39  0.151700E-01  -4.18844     -0.706614E-14  0.706614E-14   215.071       215.071    
  40  0.633698     -0.456183     -0.769608E-15  0.769608E-15   215.164       215.164    
  41  0.585026     -0.536099     -0.904430E-15  0.904430E-15   215.655       215.655    
  42  0.301914      -1.19761     -0.202045E-14  0.202045E-14   215.701       215.701    
  43  0.137096      -1.98707     -0.335231E-14  0.335231E-14   215.969       215.969    
  44  0.680098     -0.385519     -0.650393E-15  0.650393E-15   216.105       216.105    
  45  0.822083     -0.195914     -0.330519E-15  0.330519E-15   216.230       216.230    
  46  0.517510     -0.658726     -0.111131E-14  0.111131E-14   216.880       216.880    
  47  0.478075     -0.737987     -0.124503E-14  0.124503E-14   217.102       217.102    
  48  0.143257E-01  -4.24570     -0.716275E-14  0.716275E-14   217.227       217.227    
  49  0.292563      -1.22908     -0.207352E-14  0.207352E-14   217.644       217.644    
  50  0.138355      -1.97793     -0.333689E-14  0.333689E-14   217.907       217.907    
  51  0.415350     -0.878635     -0.148231E-14  0.148231E-14   218.263       218.263    
  52  0.893434E-01  -2.41527     -0.407470E-14  0.407470E-14   218.364       218.364    
  53  0.861475     -0.149109     -0.251556E-15  0.251556E-15   218.532       218.532    
  54  0.224132E-01  -3.79811     -0.640763E-14  0.640763E-14   218.573       218.573    
  55  0.284206E-01  -3.56064     -0.600701E-14  0.600701E-14   218.696       218.696    
  56  0.124067      -2.08693     -0.352077E-14  0.352077E-14   219.138       219.138    
  57  0.160722      -1.82808     -0.308408E-14  0.308408E-14   219.565       219.565    
  58  0.762371     -0.271322     -0.457736E-15  0.457736E-15   219.730       219.730    
  59  0.894891     -0.111053     -0.187353E-15  0.187353E-15   220.127       220.127    
  60  0.349549      -1.05111     -0.177329E-14  0.177329E-14   220.481       220.481    
  61  0.586189     -0.534113     -0.901081E-15  0.901081E-15   195.591       195.591    
loop,thermsimp(1:2)        7  0.842243E-15  0.304999E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    312              201.38          0.79          0.47         20.38
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    201.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        7
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        8
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      311
neval,tstepnext:      311     311

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334770E-01  -3.39690     -0.573076E-14  0.573076E-14   192.054       192.054    
   2  0.619715     -0.478495     -0.807250E-15  0.807250E-15   192.343       192.343    
   3  0.413480     -0.883146     -0.148992E-14  0.148992E-14   192.782       192.782    
   4  0.769911     -0.261480     -0.441132E-15  0.441132E-15   194.053       194.053    
   5  0.482351     -0.729083     -0.123001E-14  0.123001E-14   194.406       194.406    
   6  0.505398     -0.682408     -0.115126E-14  0.115126E-14   195.002       195.002    
   7  0.381859E-01  -3.26529     -0.550874E-14  0.550874E-14   195.591       195.591    
   8  0.800423     -0.222614     -0.375564E-15  0.375564E-15   196.611       196.611    
   9  0.523632     -0.646966     -0.109147E-14  0.109147E-14   197.742       197.742    
  10  0.869445     -0.139900     -0.236020E-15  0.236020E-15   198.488       198.488    
  11  0.986482     -0.136104E-01 -0.229615E-16  0.229615E-16   201.471       201.471    
  12  0.619977     -0.478073     -0.806537E-15  0.806537E-15   203.055       203.055    
  13  0.950049     -0.512415E-01 -0.864474E-16  0.864474E-16   204.171       204.171    
  14  0.360908      -1.01913     -0.171934E-14  0.171934E-14   204.213       204.213    
  15  0.176738      -1.73309     -0.292382E-14  0.292382E-14   204.441       204.441    
  16  0.658385E-01  -2.72055     -0.458973E-14  0.458973E-14   204.446       204.446    
  17  0.738621     -0.302970     -0.511129E-15  0.511129E-15   204.595       204.595    
  18  0.566250     -0.568720     -0.959465E-15  0.959465E-15   204.760       204.760    
  19  0.762745     -0.270832     -0.456909E-15  0.456909E-15   206.414       206.414    
  20  0.949059E-01  -2.35487     -0.397280E-14  0.397280E-14   206.471       206.471    
  21  0.817780     -0.201162     -0.339373E-15  0.339373E-15   206.556       206.556    
  22  0.928877     -0.737788E-01 -0.124469E-15  0.124469E-15   207.724       207.724    
  23  0.689279     -0.372109     -0.627769E-15  0.627769E-15   207.841       207.841    
  24  0.247334      -1.39702     -0.235685E-14  0.235685E-14   208.538       208.538    
  25  0.225714      -1.48848     -0.251116E-14  0.251116E-14   209.163       209.163    
  26  0.166105      -1.79513     -0.302850E-14  0.302850E-14   209.889       209.889    
  27  0.160483      -1.82957     -0.308659E-14  0.308659E-14   210.275       210.275    
  28  0.878770     -0.129233     -0.218023E-15  0.218023E-15   210.633       210.633    
  29  0.466632E-01  -3.06480     -0.517050E-14  0.517050E-14   210.711       210.711    
  30  0.250594      -1.38392     -0.233475E-14  0.233475E-14   210.860       210.860    
  31  0.695308     -0.363400     -0.613077E-15  0.613077E-15   211.316       211.316    
  32  0.851424     -0.160845     -0.271354E-15  0.271354E-15   212.098       212.098    
  33  0.881958E-01  -2.42820     -0.409651E-14  0.409651E-14   212.314       212.314    
  34  0.392302     -0.935723     -0.157862E-14  0.157862E-14   212.788       212.788    
  35  0.402422     -0.910253     -0.153565E-14  0.153565E-14   212.820       212.820    
  36  0.509837     -0.673664     -0.113651E-14  0.113651E-14   213.685       213.685    
  37  0.105620      -2.24790     -0.379235E-14  0.379235E-14   213.829       213.829    
  38  0.296610      -1.21534     -0.205034E-14  0.205034E-14   214.409       214.409    
  39  0.966074     -0.345147E-01 -0.582284E-16  0.582284E-16   214.759       214.759    
  40  0.139916      -1.96671     -0.331796E-14  0.331796E-14   215.071       215.071    
  41  0.736732E-01  -2.60812     -0.440005E-14  0.440005E-14   215.164       215.164    
  42  0.459947     -0.776645     -0.131025E-14  0.131025E-14   215.655       215.655    
  43  0.291994      -1.23102     -0.207681E-14  0.207681E-14   215.701       215.701    
  44  0.361273      -1.01812     -0.171763E-14  0.171763E-14   215.969       215.969    
  45  0.232466      -1.45901     -0.246144E-14  0.246144E-14   216.105       216.105    
  46  0.998040     -0.196185E-02 -0.330975E-17  0.330975E-17   216.230       216.230    
  47  0.185412      -1.68517     -0.284299E-14  0.284299E-14   216.880       216.880    
  48  0.755516     -0.280355     -0.472975E-15  0.472975E-15   217.102       217.102    
  49  0.605813     -0.501184     -0.845527E-15  0.845527E-15   217.227       217.227    
  50  0.923353     -0.797434E-01 -0.134532E-15  0.134532E-15   217.644       217.644    
  51  0.280726E-02  -5.87555     -0.991239E-14  0.991239E-14   217.907       217.907    
  52  0.793087     -0.231822     -0.391098E-15  0.391098E-15   218.263       218.263    
  53  0.688830E-02  -4.97793     -0.839806E-14  0.839806E-14   218.364       218.364    
  54  0.110165      -2.20578     -0.372127E-14  0.372127E-14   218.532       218.532    
  55  0.693960     -0.365342     -0.616353E-15  0.616353E-15   218.573       218.573    
  56  0.555073     -0.588655     -0.993096E-15  0.993096E-15   218.696       218.696    
  57  0.238964      -1.43144     -0.241493E-14  0.241493E-14   219.138       219.138    
  58  0.539834     -0.616493     -0.104006E-14  0.104006E-14   219.565       219.565    
  59  0.266190      -1.32354     -0.223290E-14  0.223290E-14   219.730       219.730    
  60  0.894701     -0.111266     -0.187712E-15  0.187712E-15   220.127       220.127    
  61  0.661348E-01  -2.71606     -0.458215E-14  0.458215E-14   201.382       201.382    
loop,thermsimp(1:2)        8  0.573076E-14  0.807250E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    313              199.73          0.80          0.47         20.30
Just calling func    0   0         22.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    199.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        8
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.168706E-14           311
loop is:        9
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.337412E-15           321

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      312     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.993901     -0.611776E-02 -0.206421E-17  0.206421E-17   192.054       192.054    
   2  0.777964     -0.251075     -0.847158E-16  0.847158E-16   192.343       192.343    
   3  0.570471     -0.561294     -0.189387E-15  0.189387E-15   192.782       192.782    
   4  0.622159     -0.474560     -0.160122E-15  0.160122E-15   194.053       194.053    
   5  0.160072      -1.83213     -0.618183E-15  0.618183E-15   194.406       194.406    
   6  0.691565     -0.368797     -0.124437E-15  0.124437E-15   195.002       195.002    
   7  0.282355      -1.26459     -0.426688E-15  0.426688E-15   195.591       195.591    
   8  0.838686     -0.175919     -0.593571E-16  0.593571E-16   196.611       196.611    
   9  0.322294      -1.13229     -0.382048E-15  0.382048E-15   197.742       197.742    
  10  0.295371      -1.21952     -0.411482E-15  0.411482E-15   198.488       198.488    
  11  0.673680     -0.395001     -0.133278E-15  0.133278E-15   201.382       201.382    
  12  0.376751     -0.976170     -0.329371E-15  0.329371E-15   201.471       201.471    
  13  0.431006     -0.841633     -0.283977E-15  0.283977E-15   203.055       203.055    
  14  0.849530     -0.163072     -0.550226E-16  0.550226E-16   204.171       204.171    
  15  0.539917     -0.616339     -0.207960E-15  0.207960E-15   204.213       204.213    
  16  0.354089      -1.03821     -0.350304E-15  0.350304E-15   204.441       204.441    
  17  0.383428     -0.958604     -0.323444E-15  0.323444E-15   204.446       204.446    
  18  0.904348     -0.100541     -0.339237E-16  0.339237E-16   204.595       204.595    
  19  0.719026     -0.329858     -0.111298E-15  0.111298E-15   204.760       204.760    
  20  0.873188     -0.135604     -0.457544E-16  0.457544E-16   206.414       206.414    
  21  0.785177     -0.241846     -0.816017E-16  0.816017E-16   206.471       206.471    
  22  0.448605     -0.801612     -0.270473E-15  0.270473E-15   206.556       206.556    
  23  0.559098     -0.581431     -0.196182E-15  0.196182E-15   207.724       207.724    
  24  0.552871     -0.592630     -0.199961E-15  0.199961E-15   207.841       207.841    
  25  0.438484     -0.824431     -0.278173E-15  0.278173E-15   208.538       208.538    
  26  0.925958     -0.769268E-01 -0.259560E-16  0.259560E-16   209.163       209.163    
  27  0.448095     -0.802750     -0.270857E-15  0.270857E-15   209.889       209.889    
  28  0.535163     -0.625184     -0.210944E-15  0.210944E-15   210.275       210.275    
  29  0.789517     -0.236334     -0.797419E-16  0.797419E-16   210.633       210.633    
  30  0.892110     -0.114166     -0.385210E-16  0.385210E-16   210.711       210.711    
  31  0.555152     -0.588513     -0.198571E-15  0.198571E-15   210.860       210.860    
  32  0.407743     -0.897119     -0.302699E-15  0.302699E-15   211.316       211.316    
  33  0.242057      -1.41858     -0.478646E-15  0.478646E-15   212.098       212.098    
  34  0.670290     -0.400044     -0.134980E-15  0.134980E-15   212.314       212.314    
  35  0.284490E-01  -3.55964     -0.120107E-14  0.120107E-14   212.788       212.788    
  36  0.537596     -0.620648     -0.209414E-15  0.209414E-15   212.820       212.820    
  37  0.428355     -0.847804     -0.286059E-15  0.286059E-15   213.685       213.685    
  38  0.669459E-01  -2.70387     -0.912318E-15  0.912318E-15   213.829       213.829    
  39  0.809262     -0.211633     -0.714075E-16  0.714075E-16   214.409       214.409    
  40  0.608246     -0.497177     -0.167753E-15  0.167753E-15   214.759       214.759    
  41  0.947536     -0.538902E-01 -0.181832E-16  0.181832E-16   215.071       215.071    
  42  0.781409     -0.246657     -0.832250E-16  0.832250E-16   215.164       215.164    
  43  0.691154     -0.369393     -0.124637E-15  0.124637E-15   215.655       215.655    
  44  0.349174      -1.05218     -0.355019E-15  0.355019E-15   215.701       215.701    
  45  0.285328      -1.25412     -0.423154E-15  0.423154E-15   215.969       215.969    
  46  0.327723      -1.11559     -0.376412E-15  0.376412E-15   216.105       216.105    
  47  0.896814     -0.108907     -0.367464E-16  0.367464E-16   216.230       216.230    
  48  0.502698E-01  -2.99035     -0.100898E-14  0.100898E-14   216.880       216.880    
  49  0.262603      -1.33711     -0.451158E-15  0.451158E-15   217.102       217.102    
  50  0.943379     -0.582877E-01 -0.196670E-16  0.196670E-16   217.227       217.227    
  51  0.739497     -0.301785     -0.101826E-15  0.101826E-15   217.644       217.644    
  52  0.261793      -1.34020     -0.452200E-15  0.452200E-15   217.907       217.907    
  53  0.500542     -0.692065     -0.233511E-15  0.233511E-15   218.263       218.263    
  54  0.730146     -0.314511     -0.106120E-15  0.106120E-15   218.364       218.364    
  55  0.724962     -0.321637     -0.108524E-15  0.108524E-15   218.532       218.532    
  56  0.979299     -0.209187E-01 -0.705820E-17  0.705820E-17   218.573       218.573    
  57  0.266160      -1.32366     -0.446618E-15  0.446618E-15   218.696       218.696    
  58  0.555465E-01  -2.89054     -0.975301E-15  0.975301E-15   219.138       219.138    
  59  0.276210      -1.28659     -0.434112E-15  0.434112E-15   219.565       219.565    
  60  0.670711     -0.399418     -0.134768E-15  0.134768E-15   219.730       219.730    
  61  0.559891     -0.580013     -0.195703E-15  0.195703E-15   199.726       199.726    
loop,thermsimp(1:2)        9  0.206421E-17  0.847158E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    314              197.18          0.80          0.47         20.33
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:        9
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       10
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      313     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219228      -1.51764     -0.512071E-15  0.512071E-15   192.054       192.054    
   2  0.615668     -0.485048     -0.163661E-15  0.163661E-15   192.343       192.343    
   3  0.486219     -0.721097     -0.243307E-15  0.243307E-15   192.782       192.782    
   4  0.678117E-01  -2.69102     -0.907982E-15  0.907982E-15   194.053       194.053    
   5  0.521200     -0.651622     -0.219865E-15  0.219865E-15   194.406       194.406    
   6  0.836598     -0.178411     -0.601981E-16  0.601981E-16   195.002       195.002    
   7  0.561016     -0.578005     -0.195026E-15  0.195026E-15   195.591       195.591    
   8  0.508765     -0.675769     -0.228012E-15  0.228012E-15   196.611       196.611    
   9  0.368809     -0.997476     -0.336560E-15  0.336560E-15   197.742       197.742    
  10  0.716901     -0.332817     -0.112296E-15  0.112296E-15   198.488       198.488    
  11  0.649650     -0.431322     -0.145533E-15  0.145533E-15   199.726       199.726    
  12  0.500511     -0.692127     -0.233532E-15  0.233532E-15   201.382       201.382    
  13  0.223632      -1.49776     -0.505360E-15  0.505360E-15   201.471       201.471    
  14  0.573220     -0.556486     -0.187765E-15  0.187765E-15   203.055       203.055    
  15  0.998696     -0.130533E-02 -0.440433E-18  0.440433E-18   204.171       204.171    
  16  0.573233     -0.556462     -0.187757E-15  0.187757E-15   204.213       204.213    
  17  0.781440     -0.246617     -0.832115E-16  0.832115E-16   204.441       204.441    
  18  0.787849     -0.238449     -0.804554E-16  0.804554E-16   204.446       204.446    
  19  0.499174     -0.694800     -0.234434E-15  0.234434E-15   204.595       204.595    
  20  0.893939     -0.112118     -0.378299E-16  0.378299E-16   204.760       204.760    
  21  0.999605     -0.395271E-03 -0.133369E-18  0.133369E-18   206.414       206.414    
  22  0.707991     -0.345324     -0.116516E-15  0.116516E-15   206.471       206.471    
  23  0.161052      -1.82603     -0.616123E-15  0.616123E-15   206.556       206.556    
  24  0.768068     -0.263877     -0.890352E-16  0.890352E-16   207.724       207.724    
  25  0.590973     -0.525984     -0.177473E-15  0.177473E-15   207.841       207.841    
  26  0.418468     -0.871154     -0.293938E-15  0.293938E-15   208.538       208.538    
  27  0.130988      -2.03265     -0.685841E-15  0.685841E-15   209.163       209.163    
  28  0.615126     -0.485929     -0.163958E-15  0.163958E-15   209.889       209.889    
  29  0.518814     -0.656210     -0.221413E-15  0.221413E-15   210.275       210.275    
  30  0.798741     -0.224718     -0.758226E-16  0.758226E-16   210.633       210.633    
  31  0.346168      -1.06083     -0.357937E-15  0.357937E-15   210.711       210.711    
  32  0.257177      -1.35799     -0.458203E-15  0.458203E-15   210.860       210.860    
  33  0.179718      -1.71637     -0.579123E-15  0.579123E-15   211.316       211.316    
  34  0.291566      -1.23249     -0.415857E-15  0.415857E-15   212.098       212.098    
  35  0.667302     -0.404512     -0.136487E-15  0.136487E-15   212.314       212.314    
  36  0.454956     -0.787555     -0.265731E-15  0.265731E-15   212.788       212.788    
  37  0.660307     -0.415051     -0.140043E-15  0.140043E-15   212.820       212.820    
  38  0.376038     -0.978065     -0.330011E-15  0.330011E-15   213.685       213.685    
  39  0.561658     -0.576862     -0.194640E-15  0.194640E-15   213.829       213.829    
  40  0.523928     -0.646400     -0.218103E-15  0.218103E-15   214.409       214.409    
  41  0.269453      -1.31136     -0.442468E-15  0.442468E-15   214.759       214.759    
  42  0.913458     -0.905180E-01 -0.305418E-16  0.305418E-16   215.071       215.071    
  43  0.808259     -0.212872     -0.718257E-16  0.718257E-16   215.164       215.164    
  44  0.495535     -0.702118     -0.236903E-15  0.236903E-15   215.655       215.655    
  45  0.101716      -2.28557     -0.771179E-15  0.771179E-15   215.701       215.701    
  46  0.506259     -0.680707     -0.229679E-15  0.229679E-15   215.969       215.969    
  47  0.509601E-01  -2.97671     -0.100438E-14  0.100438E-14   216.105       216.105    
  48  0.930447     -0.720901E-01 -0.243241E-16  0.243241E-16   216.230       216.230    
  49  0.610747     -0.493073     -0.166368E-15  0.166368E-15   216.880       216.880    
  50  0.263723      -1.33286     -0.449722E-15  0.449722E-15   217.102       217.102    
  51  0.117708      -2.13955     -0.721908E-15  0.721908E-15   217.227       217.227    
  52  0.122283E-01  -4.40400     -0.148596E-14  0.148596E-14   217.644       217.644    
  53  0.285180      -1.25463     -0.423328E-15  0.423328E-15   217.907       217.907    
  54  0.388014     -0.946714     -0.319432E-15  0.319432E-15   218.263       218.263    
  55  0.470513     -0.753932     -0.254386E-15  0.254386E-15   218.364       218.364    
  56  0.144758      -1.93269     -0.652113E-15  0.652113E-15   218.532       218.532    
  57  0.959834     -0.409949E-01 -0.138322E-16  0.138322E-16   218.573       218.573    
  58  0.657595     -0.419166     -0.141432E-15  0.141432E-15   218.696       218.696    
  59  0.484343     -0.724962     -0.244611E-15  0.244611E-15   219.138       219.138    
  60  0.215379      -1.53536     -0.518047E-15  0.518047E-15   219.565       219.565    
  61  0.567065E-01  -2.86987     -0.968327E-15  0.968327E-15   197.184       197.184    
loop,thermsimp(1:2)       10  0.512071E-15  0.163661E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    315              197.60          0.80          0.47         20.30
Just calling func    0   0         22.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.60
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       10
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       11
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      314     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.998311     -0.168994E-02 -0.570204E-18  0.570204E-18   192.054       192.054    
   2  0.914032     -0.898897E-01 -0.303298E-16  0.303298E-16   192.343       192.343    
   3  0.171679      -1.76213     -0.594563E-15  0.594563E-15   192.782       192.782    
   4  0.641308     -0.444246     -0.149894E-15  0.149894E-15   194.053       194.053    
   5  0.598674     -0.513039     -0.173105E-15  0.173105E-15   194.406       194.406    
   6  0.251043      -1.38213     -0.466347E-15  0.466347E-15   195.002       195.002    
   7  0.239086E-01  -3.73352     -0.125973E-14  0.125973E-14   195.591       195.591    
   8  0.227631      -1.48003     -0.499379E-15  0.499379E-15   196.611       196.611    
   9  0.537251     -0.621291     -0.209631E-15  0.209631E-15   197.184       197.184    
  10  0.539565     -0.616993     -0.208181E-15  0.208181E-15   197.742       197.742    
  11  0.538147     -0.619623     -0.209068E-15  0.209068E-15   198.488       198.488    
  12  0.539970     -0.616241     -0.207927E-15  0.207927E-15   199.726       199.726    
  13  0.173804      -1.74983     -0.590412E-15  0.590412E-15   201.382       201.382    
  14  0.776891     -0.252456     -0.851815E-16  0.851815E-16   201.471       201.471    
  15  0.842078     -0.171882     -0.579951E-16  0.579951E-16   203.055       203.055    
  16  0.365877      -1.00546     -0.339253E-15  0.339253E-15   204.171       204.171    
  17  0.309897      -1.17151     -0.395283E-15  0.395283E-15   204.213       204.213    
  18  0.905360E-01  -2.40201     -0.810466E-15  0.810466E-15   204.441       204.441    
  19  0.524074     -0.646123     -0.218010E-15  0.218010E-15   204.446       204.446    
  20  0.230232      -1.46867     -0.495547E-15  0.495547E-15   204.595       204.595    
  21  0.413253     -0.883696     -0.298170E-15  0.298170E-15   204.760       204.760    
  22  0.864114     -0.146051     -0.492792E-16  0.492792E-16   206.414       206.414    
  23  0.130442      -2.03683     -0.687251E-15  0.687251E-15   206.471       206.471    
  24  0.753486     -0.283044     -0.955025E-16  0.955025E-16   206.556       206.556    
  25  0.487928     -0.717588     -0.242123E-15  0.242123E-15   207.724       207.724    
  26  0.883736     -0.123597     -0.417031E-16  0.417031E-16   207.841       207.841    
  27  0.428551     -0.847345     -0.285904E-15  0.285904E-15   208.538       208.538    
  28  0.643769     -0.440416     -0.148601E-15  0.148601E-15   209.163       209.163    
  29  0.302128E-01  -3.49949     -0.118077E-14  0.118077E-14   209.889       209.889    
  30  0.768776     -0.262956     -0.887243E-16  0.887243E-16   210.275       210.275    
  31  0.754747     -0.281373     -0.949385E-16  0.949385E-16   210.633       210.633    
  32  0.179270      -1.71886     -0.579965E-15  0.579965E-15   210.711       210.711    
  33  0.336630      -1.08877     -0.367364E-15  0.367364E-15   210.860       210.860    
  34  0.618889     -0.479829     -0.161900E-15  0.161900E-15   211.316       211.316    
  35  0.565254     -0.570480     -0.192487E-15  0.192487E-15   212.098       212.098    
  36  0.405274     -0.903192     -0.304748E-15  0.304748E-15   212.314       212.314    
  37  0.670164     -0.400233     -0.135043E-15  0.135043E-15   212.788       212.788    
  38  0.271591      -1.30346     -0.439803E-15  0.439803E-15   212.820       212.820    
  39  0.564490     -0.571833     -0.192943E-15  0.192943E-15   213.685       213.685    
  40  0.633175     -0.457009     -0.154200E-15  0.154200E-15   213.829       213.829    
  41  0.206087      -1.57946     -0.532928E-15  0.532928E-15   214.409       214.409    
  42  0.994556     -0.545909E-02 -0.184196E-17  0.184196E-17   214.759       214.759    
  43  0.378280     -0.972122     -0.328005E-15  0.328005E-15   215.071       215.071    
  44  0.522771     -0.648611     -0.218849E-15  0.218849E-15   215.164       215.164    
  45  0.316505      -1.15042     -0.388164E-15  0.388164E-15   215.655       215.655    
  46  0.953900     -0.471967E-01 -0.159247E-16  0.159247E-16   215.701       215.701    
  47  0.292949      -1.22776     -0.414259E-15  0.414259E-15   215.969       215.969    
  48  0.682904E-01  -2.68399     -0.905609E-15  0.905609E-15   216.105       216.105    
  49  0.640265     -0.445873     -0.150443E-15  0.150443E-15   216.230       216.230    
  50  0.178568      -1.72279     -0.581289E-15  0.581289E-15   216.880       216.880    
  51  0.982517     -0.176375E-01 -0.595109E-17  0.595109E-17   217.102       217.102    
  52  0.851080     -0.161249     -0.544075E-16  0.544075E-16   217.227       217.227    
  53  0.401182     -0.913341     -0.308172E-15  0.308172E-15   217.644       217.644    
  54  0.984795     -0.153223E-01 -0.516992E-17  0.516992E-17   217.907       217.907    
  55  0.408875     -0.894345     -0.301763E-15  0.301763E-15   218.263       218.263    
  56  0.747427     -0.291119     -0.982269E-16  0.982269E-16   218.364       218.364    
  57  0.903892     -0.101045     -0.340938E-16  0.340938E-16   218.532       218.532    
  58  0.749342     -0.288560     -0.973637E-16  0.973637E-16   218.573       218.573    
  59  0.475424E-01  -3.04613     -0.102780E-14  0.102780E-14   218.696       218.696    
  60  0.897497     -0.108146     -0.364896E-16  0.364896E-16   219.138       219.138    
  61  0.933752     -0.685449E-01 -0.231279E-16  0.231279E-16   197.603       197.603    
loop,thermsimp(1:2)       11  0.570204E-18  0.303298E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    316              197.90          0.79          0.47         20.34
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       11
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       12
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      315     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291311      -1.23336     -0.416151E-15  0.416151E-15   192.054       192.054    
   2  0.315574      -1.15336     -0.389158E-15  0.389158E-15   192.343       192.343    
   3  0.966521     -0.340523E-01 -0.114897E-16  0.114897E-16   192.782       192.782    
   4  0.160913      -1.82689     -0.616414E-15  0.616414E-15   194.053       194.053    
   5  0.991272     -0.876659E-02 -0.295795E-17  0.295795E-17   194.406       194.406    
   6  0.448552     -0.801731     -0.270514E-15  0.270514E-15   195.002       195.002    
   7  0.901062     -0.104181     -0.351520E-16  0.351520E-16   195.591       195.591    
   8  0.568403E-01  -2.86751     -0.967531E-15  0.967531E-15   196.611       196.611    
   9  0.800949     -0.221959     -0.748915E-16  0.748915E-16   197.184       197.184    
  10  0.832223     -0.183655     -0.619673E-16  0.619673E-16   197.603       197.603    
  11  0.133126      -2.01646     -0.680378E-15  0.680378E-15   197.742       197.742    
  12  0.856518     -0.154880     -0.522582E-16  0.522582E-16   198.488       198.488    
  13  0.622342     -0.474265     -0.160023E-15  0.160023E-15   199.726       199.726    
  14  0.645980     -0.436986     -0.147444E-15  0.147444E-15   201.382       201.382    
  15  0.957505     -0.434247E-01 -0.146520E-16  0.146520E-16   201.471       201.471    
  16  0.451130     -0.796000     -0.268580E-15  0.268580E-15   203.055       203.055    
  17  0.338971      -1.08184     -0.365026E-15  0.365026E-15   204.171       204.171    
  18  0.826605     -0.190428     -0.642528E-16  0.642528E-16   204.213       204.213    
  19  0.754772     -0.281340     -0.949273E-16  0.949273E-16   204.441       204.441    
  20  0.290672      -1.23556     -0.416892E-15  0.416892E-15   204.446       204.446    
  21  0.764537     -0.268485     -0.905899E-16  0.905899E-16   204.595       204.595    
  22  0.986059     -0.140392E-01 -0.473701E-17  0.473701E-17   204.760       204.760    
  23  0.121254      -2.10987     -0.711895E-15  0.711895E-15   206.414       206.414    
  24  0.858391E-01  -2.45528     -0.828441E-15  0.828441E-15   206.471       206.471    
  25  0.380238     -0.966957     -0.326263E-15  0.326263E-15   206.556       206.556    
  26  0.707810     -0.345579     -0.116603E-15  0.116603E-15   207.724       207.724    
  27  0.358756E-01  -3.32770     -0.112280E-14  0.112280E-14   207.841       207.841    
  28  0.704478     -0.350298     -0.118195E-15  0.118195E-15   208.538       208.538    
  29  0.462659E-02  -5.37594     -0.181390E-14  0.181390E-14   209.163       209.163    
  30  0.557151     -0.584918     -0.197358E-15  0.197358E-15   209.889       209.889    
  31  0.696937     -0.361060     -0.121826E-15  0.121826E-15   210.275       210.275    
  32  0.918976     -0.844956E-01 -0.285098E-16  0.285098E-16   210.633       210.633    
  33  0.872683     -0.136183     -0.459498E-16  0.459498E-16   210.711       210.711    
  34  0.387661     -0.947625     -0.319740E-15  0.319740E-15   210.860       210.860    
  35  0.467607     -0.760127     -0.256476E-15  0.256476E-15   211.316       211.316    
  36  0.597552     -0.514913     -0.173738E-15  0.173738E-15   212.098       212.098    
  37  0.750262     -0.287332     -0.969493E-16  0.969493E-16   212.314       212.314    
  38  0.487548     -0.718367     -0.242385E-15  0.242385E-15   212.788       212.788    
  39  0.240978      -1.42305     -0.480154E-15  0.480154E-15   212.820       212.820    
  40  0.571561E-01  -2.86197     -0.965662E-15  0.965662E-15   213.685       213.685    
  41  0.900819     -0.104451     -0.352429E-16  0.352429E-16   213.829       213.829    
  42  0.417201     -0.874186     -0.294961E-15  0.294961E-15   214.409       214.409    
  43  0.572985     -0.556896     -0.187903E-15  0.187903E-15   214.759       214.759    
  44  0.265863      -1.32477     -0.446994E-15  0.446994E-15   215.071       215.071    
  45  0.701580     -0.354421     -0.119586E-15  0.119586E-15   215.164       215.164    
  46  0.552997     -0.592403     -0.199884E-15  0.199884E-15   215.655       215.655    
  47  0.433406     -0.836080     -0.282103E-15  0.282103E-15   215.701       215.701    
  48  0.854803     -0.156884     -0.529346E-16  0.529346E-16   215.969       215.969    
  49  0.263598      -1.33333     -0.449881E-15  0.449881E-15   216.105       216.105    
  50  0.400903     -0.914035     -0.308406E-15  0.308406E-15   216.230       216.230    
  51  0.898385     -0.107156     -0.361558E-16  0.361558E-16   216.880       216.880    
  52  0.733249     -0.310270     -0.104689E-15  0.104689E-15   217.102       217.102    
  53  0.640976     -0.444764     -0.150069E-15  0.150069E-15   217.227       217.227    
  54  0.592235     -0.523852     -0.176754E-15  0.176754E-15   217.644       217.644    
  55  0.232499E-01  -3.76145     -0.126916E-14  0.126916E-14   217.907       217.907    
  56  0.998340     -0.166173E-02 -0.560687E-18  0.560687E-18   218.263       218.263    
  57  0.506162     -0.680899     -0.229743E-15  0.229743E-15   218.364       218.364    
  58  0.107845      -2.22706     -0.751435E-15  0.751435E-15   218.532       218.532    
  59  0.625602     -0.469041     -0.158260E-15  0.158260E-15   218.573       218.573    
  60  0.114728      -2.16519     -0.730560E-15  0.730560E-15   218.696       218.696    
  61  0.897320     -0.108343     -0.365562E-16  0.365562E-16   197.904       197.904    
loop,thermsimp(1:2)       12  0.416151E-15  0.389158E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    317              195.13          0.79          0.47         20.32
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       12
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       13
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      316     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.365969      -1.00521     -0.339168E-15  0.339168E-15   192.054       192.054    
   2  0.945807     -0.557163E-01 -0.187993E-16  0.187993E-16   192.343       192.343    
   3  0.532951     -0.629326     -0.212342E-15  0.212342E-15   192.782       192.782    
   4  0.893170E-01  -2.41556     -0.815040E-15  0.815040E-15   194.053       194.053    
   5  0.883792     -0.123533     -0.416815E-16  0.416815E-16   194.406       194.406    
   6  0.613115     -0.489204     -0.165063E-15  0.165063E-15   195.002       195.002    
   7  0.807205     -0.214178     -0.722662E-16  0.722662E-16   195.591       195.591    
   8  0.150808      -1.89175     -0.638299E-15  0.638299E-15   196.611       196.611    
   9  0.403200     -0.908322     -0.306479E-15  0.306479E-15   197.184       197.184    
  10  0.838219     -0.176476     -0.595452E-16  0.595452E-16   197.603       197.603    
  11  0.251576      -1.38001     -0.465632E-15  0.465632E-15   197.742       197.742    
  12  0.375789     -0.978729     -0.330235E-15  0.330235E-15   197.904       197.904    
  13  0.864650     -0.145431     -0.490701E-16  0.490701E-16   198.488       198.488    
  14  0.441384     -0.817839     -0.275949E-15  0.275949E-15   199.726       199.726    
  15  0.760259     -0.274096     -0.924831E-16  0.924831E-16   201.382       201.382    
  16  0.390082     -0.941397     -0.317639E-15  0.317639E-15   201.471       201.471    
  17  0.352357      -1.04311     -0.351958E-15  0.351958E-15   203.055       203.055    
  18  0.905636     -0.991179E-01 -0.334436E-16  0.334436E-16   204.171       204.171    
  19  0.302926      -1.19427     -0.402959E-15  0.402959E-15   204.213       204.213    
  20  0.834698     -0.180685     -0.609652E-16  0.609652E-16   204.441       204.441    
  21  0.277864      -1.28062     -0.432097E-15  0.432097E-15   204.446       204.446    
  22  0.631182     -0.460161     -0.155264E-15  0.155264E-15   204.595       204.595    
  23  0.337024      -1.08760     -0.366970E-15  0.366970E-15   204.760       204.760    
  24  0.944739     -0.568461E-01 -0.191806E-16  0.191806E-16   206.414       206.414    
  25  0.258506      -1.35284     -0.456463E-15  0.456463E-15   206.471       206.471    
  26  0.743401     -0.296520     -0.100049E-15  0.100049E-15   206.556       206.556    
  27  0.458262     -0.780313     -0.263287E-15  0.263287E-15   207.724       207.724    
  28  0.326196      -1.12026     -0.377988E-15  0.377988E-15   207.841       207.841    
  29  0.131890      -2.02579     -0.683526E-15  0.683526E-15   208.538       208.538    
  30  0.554561     -0.589579     -0.198931E-15  0.198931E-15   209.163       209.163    
  31  0.356066      -1.03264     -0.348425E-15  0.348425E-15   209.889       209.889    
  32  0.460699     -0.775011     -0.261498E-15  0.261498E-15   210.275       210.275    
  33  0.384977     -0.954571     -0.322084E-15  0.322084E-15   210.633       210.633    
  34  0.205557      -1.58203     -0.533797E-15  0.533797E-15   210.711       210.711    
  35  0.423200     -0.859911     -0.290144E-15  0.290144E-15   210.860       210.860    
  36  0.865310E-01  -2.44725     -0.825732E-15  0.825732E-15   211.316       211.316    
  37  0.541701     -0.613041     -0.206847E-15  0.206847E-15   212.098       212.098    
  38  0.805218     -0.216642     -0.730977E-16  0.730977E-16   212.314       212.314    
  39  0.879972E-01  -2.43045     -0.820063E-15  0.820063E-15   212.788       212.788    
  40  0.482934     -0.727874     -0.245593E-15  0.245593E-15   212.820       212.820    
  41  0.244418      -1.40887     -0.475371E-15  0.475371E-15   213.685       213.685    
  42  0.816018     -0.203319     -0.686021E-16  0.686021E-16   213.829       213.829    
  43  0.903634     -0.101331     -0.341903E-16  0.341903E-16   214.409       214.409    
  44  0.831437     -0.184600     -0.622861E-16  0.622861E-16   214.759       214.759    
  45  0.934625     -0.676103E-01 -0.228125E-16  0.228125E-16   215.071       215.071    
  46  0.276136      -1.28686     -0.434202E-15  0.434202E-15   215.164       215.164    
  47  0.959401     -0.414463E-01 -0.139845E-16  0.139845E-16   215.655       215.655    
  48  0.511053E-01  -2.97387     -0.100342E-14  0.100342E-14   215.701       215.701    
  49  0.683639     -0.380325     -0.128326E-15  0.128326E-15   215.969       215.969    
  50  0.830943     -0.185194     -0.624867E-16  0.624867E-16   216.105       216.105    
  51  0.575979E-01  -2.85427     -0.963064E-15  0.963064E-15   216.230       216.230    
  52  0.533734E-01  -2.93044     -0.988766E-15  0.988766E-15   216.880       216.880    
  53  0.405874     -0.901711     -0.304248E-15  0.304248E-15   217.102       217.102    
  54  0.740333E-01  -2.60324     -0.878364E-15  0.878364E-15   217.227       217.227    
  55  0.522317     -0.649480     -0.219142E-15  0.219142E-15   217.644       217.644    
  56  0.998480     -0.152148E-02 -0.513364E-18  0.513364E-18   217.907       217.907    
  57  0.468977     -0.757202     -0.255489E-15  0.255489E-15   218.263       218.263    
  58  0.984183     -0.159432E-01 -0.537941E-17  0.537941E-17   218.364       218.364    
  59  0.916361     -0.873450E-01 -0.294712E-16  0.294712E-16   218.532       218.532    
  60  0.264014      -1.33175     -0.449350E-15  0.449350E-15   218.573       218.573    
  61  0.939465     -0.624448E-01 -0.210696E-16  0.210696E-16   195.128       195.128    
loop,thermsimp(1:2)       13  0.339168E-15  0.187993E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    318              196.81          0.80          0.47         20.37
Just calling func    0   0         22.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       13
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       14
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      317     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.877572     -0.130596     -0.440646E-16  0.440646E-16   192.054       192.054    
   2  0.279543      -1.27460     -0.430064E-15  0.430064E-15   192.343       192.343    
   3  0.870205     -0.139027     -0.469092E-16  0.469092E-16   192.782       192.782    
   4  0.337313      -1.08674     -0.366680E-15  0.366680E-15   194.053       194.053    
   5  0.761418     -0.272573     -0.919692E-16  0.919692E-16   194.406       194.406    
   6  0.259616      -1.34855     -0.455017E-15  0.455017E-15   195.002       195.002    
   7  0.149006      -1.90377     -0.642353E-15  0.642353E-15   195.128       195.128    
   8  0.971274     -0.291470E-01 -0.983455E-17  0.983455E-17   195.591       195.591    
   9  0.447809E-01  -3.10597     -0.104799E-14  0.104799E-14   196.611       196.611    
  10  0.374637     -0.981798     -0.331270E-15  0.331270E-15   197.184       197.184    
  11  0.929717     -0.728752E-01 -0.245889E-16  0.245889E-16   197.603       197.603    
  12  0.641526     -0.443906     -0.149779E-15  0.149779E-15   197.742       197.742    
  13  0.339436      -1.08047     -0.364563E-15  0.364563E-15   197.904       197.904    
  14  0.500124E-01  -2.99548     -0.101071E-14  0.101071E-14   198.488       198.488    
  15  0.629551     -0.462748     -0.156137E-15  0.156137E-15   199.726       199.726    
  16  0.543952     -0.608893     -0.205448E-15  0.205448E-15   201.382       201.382    
  17  0.912945     -0.910797E-01 -0.307314E-16  0.307314E-16   201.471       201.471    
  18  0.806387     -0.215191     -0.726081E-16  0.726081E-16   203.055       203.055    
  19  0.942365     -0.593628E-01 -0.200297E-16  0.200297E-16   204.171       204.171    
  20  0.507139E-01  -2.98156     -0.100601E-14  0.100601E-14   204.213       204.213    
  21  0.916528E-01  -2.38975     -0.806329E-15  0.806329E-15   204.441       204.441    
  22  0.597726     -0.514624     -0.173640E-15  0.173640E-15   204.446       204.446    
  23  0.540276     -0.615676     -0.207736E-15  0.207736E-15   204.595       204.595    
  24  0.991715E-01  -2.31090     -0.779727E-15  0.779727E-15   204.760       204.760    
  25  0.235029      -1.44805     -0.488588E-15  0.488588E-15   206.414       206.414    
  26  0.139084E-01  -4.27527     -0.144253E-14  0.144253E-14   206.471       206.471    
  27  0.993705     -0.631516E-02 -0.213081E-17  0.213081E-17   206.556       206.556    
  28  0.795509     -0.228774     -0.771909E-16  0.771909E-16   207.724       207.724    
  29  0.385044     -0.954398     -0.322025E-15  0.322025E-15   207.841       207.841    
  30  0.391836     -0.936912     -0.316125E-15  0.316125E-15   208.538       208.538    
  31  0.378494     -0.971555     -0.327814E-15  0.327814E-15   209.163       209.163    
  32  0.418119     -0.871989     -0.294219E-15  0.294219E-15   209.889       209.889    
  33  0.836325     -0.178738     -0.603082E-16  0.603082E-16   210.275       210.275    
  34  0.374217     -0.982919     -0.331648E-15  0.331648E-15   210.633       210.633    
  35  0.453198     -0.791427     -0.267037E-15  0.267037E-15   210.711       210.711    
  36  0.301778      -1.19806     -0.404241E-15  0.404241E-15   210.860       210.860    
  37  0.188236      -1.67006     -0.563497E-15  0.563497E-15   211.316       211.316    
  38  0.656627     -0.420639     -0.141929E-15  0.141929E-15   212.098       212.098    
  39  0.330648E-01  -3.40928     -0.115033E-14  0.115033E-14   212.314       212.314    
  40  0.365232      -1.00722     -0.339849E-15  0.339849E-15   212.788       212.788    
  41  0.122133      -2.10265     -0.709458E-15  0.709458E-15   212.820       212.820    
  42  0.453285     -0.791234     -0.266972E-15  0.266972E-15   213.685       213.685    
  43  0.803958     -0.218208     -0.736261E-16  0.736261E-16   213.829       213.829    
  44  0.909619E-01  -2.39731     -0.808882E-15  0.808882E-15   214.409       214.409    
  45  0.180479      -1.71214     -0.577697E-15  0.577697E-15   214.759       214.759    
  46  0.737277     -0.304792     -0.102840E-15  0.102840E-15   215.071       215.071    
  47  0.831129     -0.184970     -0.624110E-16  0.624110E-16   215.164       215.164    
  48  0.257878      -1.35527     -0.457284E-15  0.457284E-15   215.655       215.655    
  49  0.326160      -1.12037     -0.378025E-15  0.378025E-15   215.701       215.701    
  50  0.169671      -1.77390     -0.598534E-15  0.598534E-15   215.969       215.969    
  51  0.239195      -1.43048     -0.482660E-15  0.482660E-15   216.105       216.105    
  52  0.170417      -1.76951     -0.597053E-15  0.597053E-15   216.230       216.230    
  53  0.401807E-01  -3.21437     -0.108457E-14  0.108457E-14   216.880       216.880    
  54  0.950973     -0.502694E-01 -0.169615E-16  0.169615E-16   217.102       217.102    
  55  0.879283     -0.128648     -0.434074E-16  0.434074E-16   217.227       217.227    
  56  0.434990E-01  -3.13502     -0.105779E-14  0.105779E-14   217.644       217.644    
  57  0.699698     -0.357106     -0.120492E-15  0.120492E-15   217.907       217.907    
  58  0.726557     -0.319438     -0.107782E-15  0.107782E-15   218.263       218.263    
  59  0.812627     -0.207483     -0.700071E-16  0.700071E-16   218.364       218.364    
  60  0.505808E-01  -2.98418     -0.100690E-14  0.100690E-14   218.532       218.532    
  61  0.122785      -2.09732     -0.707662E-15  0.707662E-15   196.808       196.808    
loop,thermsimp(1:2)       14  0.440646E-16  0.430064E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    319              195.94          0.82          0.46         20.36
Just calling func    0   0         22.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       14
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       15
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      318     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.601619E-01  -2.81072     -0.948369E-15  0.948369E-15   192.054       192.054    
   2  0.948386     -0.529932E-01 -0.178805E-16  0.178805E-16   192.343       192.343    
   3  0.926625     -0.762064E-01 -0.257129E-16  0.257129E-16   192.782       192.782    
   4  0.854561     -0.157168     -0.530303E-16  0.530303E-16   194.053       194.053    
   5  0.970504     -0.299399E-01 -0.101021E-16  0.101021E-16   194.406       194.406    
   6  0.615507     -0.485309     -0.163749E-15  0.163749E-15   195.002       195.002    
   7  0.200583      -1.60653     -0.542062E-15  0.542062E-15   195.128       195.128    
   8  0.681007     -0.384183     -0.129628E-15  0.129628E-15   195.591       195.591    
   9  0.748667     -0.289462     -0.976677E-16  0.976677E-16   196.611       196.611    
  10  0.899775     -0.105610     -0.356341E-16  0.356341E-16   196.808       196.808    
  11  0.285036      -1.25514     -0.423499E-15  0.423499E-15   197.184       197.184    
  12  0.559314     -0.581044     -0.196051E-15  0.196051E-15   197.603       197.603    
  13  0.294787      -1.22150     -0.412149E-15  0.412149E-15   197.742       197.742    
  14  0.433642     -0.835537     -0.281920E-15  0.281920E-15   197.904       197.904    
  15  0.857428     -0.153818     -0.519001E-16  0.519001E-16   198.488       198.488    
  16  0.237108      -1.43924     -0.485616E-15  0.485616E-15   199.726       199.726    
  17  0.572258     -0.558165     -0.188331E-15  0.188331E-15   201.382       201.382    
  18  0.958657     -0.422219E-01 -0.142462E-16  0.142462E-16   201.471       201.471    
  19  0.874270     -0.134366     -0.453367E-16  0.453367E-16   203.055       203.055    
  20  0.860007     -0.150815     -0.508867E-16  0.508867E-16   204.171       204.171    
  21  0.865444     -0.144512     -0.487601E-16  0.487601E-16   204.213       204.213    
  22  0.388651     -0.945073     -0.318879E-15  0.318879E-15   204.441       204.441    
  23  0.802126     -0.220490     -0.743959E-16  0.743959E-16   204.446       204.446    
  24  0.551952     -0.594294     -0.200522E-15  0.200522E-15   204.595       204.595    
  25  0.896826     -0.108893     -0.367419E-16  0.367419E-16   204.760       204.760    
  26  0.552967     -0.592457     -0.199902E-15  0.199902E-15   206.414       206.414    
  27  0.739905     -0.301234     -0.101640E-15  0.101640E-15   206.471       206.471    
  28  0.981292     -0.188854E-01 -0.637214E-17  0.637214E-17   206.556       206.556    
  29  0.967501     -0.330384E-01 -0.111476E-16  0.111476E-16   207.724       207.724    
  30  0.735433     -0.307296     -0.103685E-15  0.103685E-15   207.841       207.841    
  31  0.780544     -0.247764     -0.835985E-16  0.835985E-16   208.538       208.538    
  32  0.173270      -1.75290     -0.591451E-15  0.591451E-15   209.163       209.163    
  33  0.107002E-01  -4.53749     -0.153100E-14  0.153100E-14   209.889       209.889    
  34  0.601435     -0.508437     -0.171553E-15  0.171553E-15   210.275       210.275    
  35  0.178950      -1.72065     -0.580566E-15  0.580566E-15   210.633       210.633    
  36  0.691558     -0.368808     -0.124440E-15  0.124440E-15   210.711       210.711    
  37  0.637946     -0.449502     -0.151667E-15  0.151667E-15   210.860       210.860    
  38  0.674327     -0.394040     -0.132954E-15  0.132954E-15   211.316       211.316    
  39  0.239469E-01  -3.73192     -0.125919E-14  0.125919E-14   212.098       212.098    
  40  0.964236     -0.364197E-01 -0.122884E-16  0.122884E-16   212.314       212.314    
  41  0.649721     -0.431212     -0.145496E-15  0.145496E-15   212.788       212.788    
  42  0.387791     -0.947288     -0.319626E-15  0.319626E-15   212.820       212.820    
  43  0.927471     -0.752938E-01 -0.254050E-16  0.254050E-16   213.685       213.685    
  44  0.858994     -0.151994     -0.512844E-16  0.512844E-16   213.829       213.829    
  45  0.349238      -1.05200     -0.354958E-15  0.354958E-15   214.409       214.409    
  46  0.836256     -0.178820     -0.603361E-16  0.603361E-16   214.759       214.759    
  47  0.571403E-01  -2.86225     -0.965755E-15  0.965755E-15   215.071       215.071    
  48  0.881813     -0.125776     -0.424382E-16  0.424382E-16   215.164       215.164    
  49  0.578003     -0.548176     -0.184961E-15  0.184961E-15   215.655       215.655    
  50  0.327869      -1.11514     -0.376262E-15  0.376262E-15   215.701       215.701    
  51  0.259914      -1.34741     -0.454631E-15  0.454631E-15   215.969       215.969    
  52  0.355143      -1.03524     -0.349301E-15  0.349301E-15   216.105       216.105    
  53  0.504320     -0.684544     -0.230973E-15  0.230973E-15   216.230       216.230    
  54  0.927046     -0.757521E-01 -0.255597E-16  0.255597E-16   216.880       216.880    
  55  0.256445      -1.36084     -0.459164E-15  0.459164E-15   217.102       217.102    
  56  0.178409      -1.72368     -0.581589E-15  0.581589E-15   217.227       217.227    
  57  0.233684      -1.45379     -0.490525E-15  0.490525E-15   217.644       217.644    
  58  0.171122      -1.76538     -0.595660E-15  0.595660E-15   217.907       217.907    
  59  0.789270     -0.236647     -0.798475E-16  0.798475E-16   218.263       218.263    
  60  0.186623      -1.67866     -0.566401E-15  0.566401E-15   218.364       218.364    
  61  0.814202     -0.205546     -0.693538E-16  0.693538E-16   195.941       195.941    
loop,thermsimp(1:2)       15  0.948369E-15  0.178805E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    320              194.45          0.78          0.47         20.34
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       15
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       16
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      319     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.790244     -0.235414     -0.794313E-16  0.794313E-16   192.054       192.054    
   2  0.251953E-01  -3.68110     -0.124205E-14  0.124205E-14   192.343       192.343    
   3  0.478109     -0.737917     -0.248982E-15  0.248982E-15   192.782       192.782    
   4  0.825342     -0.191957     -0.647687E-16  0.647687E-16   194.053       194.053    
   5  0.186218      -1.68084     -0.567135E-15  0.567135E-15   194.406       194.406    
   6  0.807858     -0.213368     -0.719930E-16  0.719930E-16   195.002       195.002    
   7  0.353879      -1.03880     -0.350503E-15  0.350503E-15   195.128       195.128    
   8  0.218321      -1.52179     -0.513470E-15  0.513470E-15   195.591       195.591    
   9  0.584969     -0.536197     -0.180919E-15  0.180919E-15   195.941       195.941    
  10  0.927396     -0.753750E-01 -0.254324E-16  0.254324E-16   196.611       196.611    
  11  0.855072     -0.156570     -0.528285E-16  0.528285E-16   196.808       196.808    
  12  0.781328     -0.246760     -0.832597E-16  0.832597E-16   197.184       197.184    
  13  0.220614      -1.51134     -0.509945E-15  0.509945E-15   197.603       197.603    
  14  0.417429E-01  -3.17623     -0.107170E-14  0.107170E-14   197.742       197.742    
  15  0.490847E-01  -3.01421     -0.101703E-14  0.101703E-14   197.904       197.904    
  16  0.974666     -0.256602E-01 -0.865805E-17  0.865805E-17   198.488       198.488    
  17  0.473363     -0.747894     -0.252348E-15  0.252348E-15   199.726       199.726    
  18  0.913339     -0.906480E-01 -0.305857E-16  0.305857E-16   201.382       201.382    
  19  0.456287     -0.784633     -0.264744E-15  0.264744E-15   201.471       201.471    
  20  0.145311      -1.92888     -0.650826E-15  0.650826E-15   203.055       203.055    
  21  0.463238     -0.769515     -0.259643E-15  0.259643E-15   204.171       204.171    
  22  0.618267     -0.480834     -0.162239E-15  0.162239E-15   204.213       204.213    
  23  0.115949E-01  -4.45719     -0.150391E-14  0.150391E-14   204.441       204.441    
  24  0.500974     -0.691201     -0.233219E-15  0.233219E-15   204.446       204.446    
  25  0.855408E-01  -2.45876     -0.829615E-15  0.829615E-15   204.595       204.595    
  26  0.463824     -0.768251     -0.259217E-15  0.259217E-15   204.760       204.760    
  27  0.940481     -0.613640E-01 -0.207049E-16  0.207049E-16   206.414       206.414    
  28  0.307438      -1.17948     -0.397971E-15  0.397971E-15   206.471       206.471    
  29  0.349958      -1.04994     -0.354263E-15  0.354263E-15   206.556       206.556    
  30  0.143800      -1.93933     -0.654353E-15  0.654353E-15   207.724       207.724    
  31  0.216289      -1.53114     -0.516625E-15  0.516625E-15   207.841       207.841    
  32  0.780008     -0.248452     -0.838305E-16  0.838305E-16   208.538       208.538    
  33  0.965261     -0.353569E-01 -0.119298E-16  0.119298E-16   209.163       209.163    
  34  0.916592     -0.870926E-01 -0.293861E-16  0.293861E-16   209.889       209.889    
  35  0.210733      -1.55716     -0.525405E-15  0.525405E-15   210.275       210.275    
  36  0.837445     -0.177400     -0.598569E-16  0.598569E-16   210.633       210.633    
  37  0.591235     -0.525542     -0.177324E-15  0.177324E-15   210.711       210.711    
  38  0.853499     -0.158411     -0.534498E-16  0.534498E-16   210.860       210.860    
  39  0.315759      -1.15278     -0.388961E-15  0.388961E-15   211.316       211.316    
  40  0.399832     -0.916710     -0.309309E-15  0.309309E-15   212.098       212.098    
  41  0.488848     -0.715704     -0.241487E-15  0.241487E-15   212.314       212.314    
  42  0.676770     -0.390424     -0.131734E-15  0.131734E-15   212.788       212.788    
  43  0.333984      -1.09666     -0.370027E-15  0.370027E-15   212.820       212.820    
  44  0.524522     -0.645268     -0.217721E-15  0.217721E-15   213.685       213.685    
  45  0.403639     -0.907233     -0.306111E-15  0.306111E-15   213.829       213.829    
  46  0.571827     -0.558919     -0.188586E-15  0.188586E-15   214.409       214.409    
  47  0.916778E-01  -2.38948     -0.806237E-15  0.806237E-15   214.759       214.759    
  48  0.528288     -0.638114     -0.215307E-15  0.215307E-15   215.071       215.071    
  49  0.735608     -0.307057     -0.103605E-15  0.103605E-15   215.164       215.164    
  50  0.941298     -0.604957E-01 -0.204120E-16  0.204120E-16   215.655       215.655    
  51  0.326430      -1.11954     -0.377745E-15  0.377745E-15   215.701       215.701    
  52  0.195165      -1.63391     -0.551300E-15  0.551300E-15   215.969       215.969    
  53  0.204279      -1.58827     -0.535901E-15  0.535901E-15   216.105       216.105    
  54  0.857435     -0.153810     -0.518972E-16  0.518972E-16   216.230       216.230    
  55  0.946812     -0.546551E-01 -0.184413E-16  0.184413E-16   216.880       216.880    
  56  0.887818     -0.118989     -0.401483E-16  0.401483E-16   217.102       217.102    
  57  0.454905     -0.787667     -0.265768E-15  0.265768E-15   217.227       217.227    
  58  0.727016E-01  -2.62139     -0.884488E-15  0.884488E-15   217.644       217.644    
  59  0.964103     -0.365576E-01 -0.123350E-16  0.123350E-16   217.907       217.907    
  60  0.538057     -0.619791     -0.209125E-15  0.209125E-15   218.263       218.263    
  61  0.389166     -0.943749     -0.318432E-15  0.318432E-15   194.449       194.449    
loop,thermsimp(1:2)       16  0.794313E-16  0.124205E-14

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    321              197.71          0.80          0.47         20.32
Just calling func    0   0         22.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    197.71        2.406     -1.845      4.026     -100.0     0.3477    
                      -1.568      1.091     -100.0      2.856     -1.082    
                     -0.3386E-01 -1.927      2.009      0.000     0.6600    
                      -1.138     -20.00      0.000      0.000     -1.221    

                      -1.600      6899.      9295.     -549.6     -1451.    
                      -4.215     -5.769     -4.509     -15.33     -5.168    
                      -13.09     -2.674     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.6609E-01-0.6346E-01  0.000    -0.1243    
                     -0.2205    -0.1205    -0.1420    -0.3108    -0.1107E-01

                     -0.7107     -2.768      1.382     0.2165     0.5516E-01
                      0.7756E-01-0.3439E-01-0.1410    -0.3240E-01-0.6459E-01
                     -0.7022E-01 0.8761E-01-0.2390     -3.105      1.382    

                      -1.333     -1.733      3553.      2336.      0.000    
                       0.000      9.138      8.442      0.000     0.1000    
                       1.269      1.263      9.153      8.898     -114.0    

                      0.1000      1.281      1.250      9.255      9.108    
                      -614.3     0.1000     0.2811     0.8638      9.361    
                       9.229      7969.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       16
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       17
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      320     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.241426      -1.42119     -0.479527E-15  0.479527E-15   192.054       192.054    
   2  0.330673      -1.10662     -0.373388E-15  0.373388E-15   192.343       192.343    
   3  0.475582     -0.743216     -0.250770E-15  0.250770E-15   192.782       192.782    
   4  0.686172     -0.376627     -0.127078E-15  0.127078E-15   194.053       194.053    
   5  0.502728     -0.687706     -0.232040E-15  0.232040E-15   194.406       194.406    
   6  0.553719     -0.591099     -0.199444E-15  0.199444E-15   194.449       194.449    
   7  0.683570     -0.380426     -0.128360E-15  0.128360E-15   195.002       195.002    
   8  0.574477     -0.554295     -0.187026E-15  0.187026E-15   195.128       195.128    
   9  0.816082     -0.203240     -0.685756E-16  0.685756E-16   195.591       195.591    
  10  0.410241     -0.891010     -0.300637E-15  0.300637E-15   195.941       195.941    
  11  0.188026      -1.67117     -0.563873E-15  0.563873E-15   196.611       196.611    
  12  0.754506E-01  -2.58428     -0.871966E-15  0.871966E-15   196.808       196.808    
  13  0.399332     -0.917962     -0.309731E-15  0.309731E-15   197.184       197.184    
  14  0.533680     -0.627959     -0.211881E-15  0.211881E-15   197.603       197.603    
  15  0.730720     -0.313725     -0.105855E-15  0.105855E-15   197.742       197.742    
  16  0.736514     -0.305827     -0.103190E-15  0.103190E-15   197.904       197.904    
  17  0.473063     -0.748527     -0.252562E-15  0.252562E-15   198.488       198.488    
  18  0.909804     -0.945260E-01 -0.318942E-16  0.318942E-16   199.726       199.726    
  19  0.701412     -0.354659     -0.119666E-15  0.119666E-15   201.382       201.382    
  20  0.224250E-01  -3.79758     -0.128135E-14  0.128135E-14   201.471       201.471    
  21  0.586347     -0.533844     -0.180125E-15  0.180125E-15   203.055       203.055    
  22  0.322722      -1.13096     -0.381600E-15  0.381600E-15   204.171       204.171    
  23  0.424038     -0.857931     -0.289476E-15  0.289476E-15   204.213       204.213    
  24  0.749756     -0.288007     -0.971771E-16  0.971771E-16   204.441       204.441    
  25  0.621781     -0.475168     -0.160327E-15  0.160327E-15   204.446       204.446    
  26  0.145701      -1.92620     -0.649922E-15  0.649922E-15   204.595       204.595    
  27  0.250972      -1.38241     -0.466443E-15  0.466443E-15   204.760       204.760    
  28  0.172064      -1.75989     -0.593808E-15  0.593808E-15   206.414       206.414    
  29  0.783725     -0.243698     -0.822265E-16  0.822265E-16   206.471       206.471    
  30  0.153385      -1.87480     -0.632580E-15  0.632580E-15   206.556       206.556    
  31  0.276475      -1.28564     -0.433789E-15  0.433789E-15   207.724       207.724    
  32  0.109640      -2.21055     -0.745866E-15  0.745866E-15   207.841       207.841    
  33  0.898368     -0.107176     -0.361623E-16  0.361623E-16   208.538       208.538    
  34  0.894604     -0.111374     -0.375788E-16  0.375788E-16   209.163       209.163    
  35  0.465311     -0.765048     -0.258136E-15  0.258136E-15   209.889       209.889    
  36  0.101043E-01  -4.59479     -0.155034E-14  0.155034E-14   210.275       210.275    
  37  0.915362     -0.884356E-01 -0.298392E-16  0.298392E-16   210.633       210.633    
  38  0.914979     -0.888542E-01 -0.299805E-16  0.299805E-16   210.711       210.711    
  39  0.824527     -0.192945     -0.651019E-16  0.651019E-16   210.860       210.860    
  40  0.231326      -1.46393     -0.493946E-15  0.493946E-15   211.316       211.316    
  41  0.276608      -1.28515     -0.433626E-15  0.433626E-15   212.098       212.098    
  42  0.208157      -1.56946     -0.529555E-15  0.529555E-15   212.314       212.314    
  43  0.901458     -0.103742     -0.350037E-16  0.350037E-16   212.788       212.788    
  44  0.874902     -0.133643     -0.450928E-16  0.450928E-16   212.820       212.820    
  45  0.841342     -0.172757     -0.582904E-16  0.582904E-16   213.685       213.685    
  46  0.895635     -0.110222     -0.371904E-16  0.371904E-16   213.829       213.829    
  47  0.297339      -1.21288     -0.409241E-15  0.409241E-15   214.409       214.409    
  48  0.466900     -0.761640     -0.256986E-15  0.256986E-15   214.759       214.759    
  49  0.353475      -1.03994     -0.350889E-15  0.350889E-15   215.071       215.071    
  50  0.947865     -0.535433E-01 -0.180661E-16  0.180661E-16   215.164       215.164    
  51  0.454230     -0.789152     -0.266269E-15  0.266269E-15   215.655       215.655    
  52  0.956834     -0.441252E-01 -0.148884E-16  0.148884E-16   215.701       215.701    
  53  0.380091     -0.967345     -0.326394E-15  0.326394E-15   215.969       215.969    
  54  0.567148     -0.567134     -0.191358E-15  0.191358E-15   216.105       216.105    
  55  0.575766     -0.552054     -0.186270E-15  0.186270E-15   216.230       216.230    
  56  0.425240E-01  -3.15769     -0.106544E-14  0.106544E-14   216.880       216.880    
  57  0.145832      -1.92530     -0.649618E-15  0.649618E-15   217.102       217.102    
  58  0.388971     -0.944250     -0.318601E-15  0.318601E-15   217.227       217.227    
  59  0.774814E-01  -2.55772     -0.863004E-15  0.863004E-15   217.644       217.644    
  60  0.443475     -0.813114     -0.274354E-15  0.274354E-15   217.907       217.907    
  61  0.590263     -0.527186     -0.177879E-15  0.177879E-15   197.710       197.710    
loop,thermsimp(1:2)       17  0.479527E-15  0.373388E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    322              210.39          0.81          0.47         20.30
Just calling func    0   0         22.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    210.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       17
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       18
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      321
neval,tstepnext:      321     321

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.728624     -0.316597     -0.106824E-15  0.106824E-15   192.054       192.054    
   2  0.804380     -0.217683     -0.734488E-16  0.734488E-16   192.343       192.343    
   3  0.735354     -0.307403     -0.103721E-15  0.103721E-15   192.782       192.782    
   4  0.182795      -1.69939     -0.573394E-15  0.573394E-15   194.053       194.053    
   5  0.298027      -1.21057     -0.408462E-15  0.408462E-15   194.406       194.406    
   6  0.807126     -0.214276     -0.722992E-16  0.722992E-16   194.449       194.449    
   7  0.587026     -0.532686     -0.179735E-15  0.179735E-15   195.002       195.002    
   8  0.174651      -1.74497     -0.588773E-15  0.588773E-15   195.128       195.128    
   9  0.112964      -2.18068     -0.735788E-15  0.735788E-15   195.591       195.591    
  10  0.247631      -1.39582     -0.470965E-15  0.470965E-15   195.941       195.941    
  11  0.238535      -1.43324     -0.483593E-15  0.483593E-15   196.611       196.611    
  12  0.211244      -1.55474     -0.524588E-15  0.524588E-15   196.808       196.808    
  13  0.367983E-01  -3.30230     -0.111424E-14  0.111424E-14   197.184       197.184    
  14  0.471500     -0.751836     -0.253678E-15  0.253678E-15   197.603       197.603    
  15  0.152179      -1.88270     -0.635245E-15  0.635245E-15   197.710       197.710    
  16  0.768671     -0.263092     -0.887703E-16  0.887703E-16   197.742       197.742    
  17  0.919889     -0.835027E-01 -0.281748E-16  0.281748E-16   197.904       197.904    
  18  0.422770     -0.860927     -0.290487E-15  0.290487E-15   198.488       198.488    
  19  0.460539     -0.775359     -0.261615E-15  0.261615E-15   199.726       199.726    
  20  0.979082     -0.211402E-01 -0.713294E-17  0.713294E-17   201.382       201.382    
  21  0.487128     -0.719229     -0.242676E-15  0.242676E-15   201.471       201.471    
  22  0.648871     -0.432521     -0.145938E-15  0.145938E-15   203.055       203.055    
  23  0.905198     -0.996011E-01 -0.336066E-16  0.336066E-16   204.171       204.171    
  24  0.584554     -0.536906     -0.181158E-15  0.181158E-15   204.213       204.213    
  25  0.996206     -0.380169E-02 -0.128273E-17  0.128273E-17   204.441       204.441    
  26  0.783153E-01  -2.54701     -0.859392E-15  0.859392E-15   204.446       204.446    
  27  0.625438     -0.469302     -0.158348E-15  0.158348E-15   204.595       204.595    
  28  0.546425     -0.604358     -0.203918E-15  0.203918E-15   204.760       204.760    
  29  0.968052     -0.324690E-01 -0.109554E-16  0.109554E-16   206.414       206.414    
  30  0.200381      -1.60753     -0.542400E-15  0.542400E-15   206.471       206.471    
  31  0.519406     -0.655070     -0.221028E-15  0.221028E-15   206.556       206.556    
  32  0.183261      -1.69684     -0.572535E-15  0.572535E-15   207.724       207.724    
  33  0.731918E-01  -2.61467     -0.882221E-15  0.882221E-15   207.841       207.841    
  34  0.298735      -1.20820     -0.407661E-15  0.407661E-15   208.538       208.538    
  35  0.512687     -0.668089     -0.225421E-15  0.225421E-15   209.163       209.163    
  36  0.600298     -0.510329     -0.172191E-15  0.172191E-15   209.889       209.889    
  37  0.490869     -0.711578     -0.240095E-15  0.240095E-15   210.275       210.275    
  38  0.347676      -1.05648     -0.356470E-15  0.356470E-15   210.633       210.633    
  39  0.832585E-01  -2.48581     -0.838740E-15  0.838740E-15   210.711       210.711    
  40  0.746868     -0.291867     -0.984795E-16  0.984795E-16   210.860       210.860    
  41  0.576384     -0.550982     -0.185908E-15  0.185908E-15   211.316       211.316    
  42  0.320005      -1.13942     -0.384453E-15  0.384453E-15   212.098       212.098    
  43  0.394247     -0.930777     -0.314055E-15  0.314055E-15   212.314       212.314    
  44  0.489226     -0.714930     -0.241226E-15  0.241226E-15   212.788       212.788    
  45  0.723533     -0.323610     -0.109190E-15  0.109190E-15   212.820       212.820    
  46  0.683684E-01  -2.68284     -0.905224E-15  0.905224E-15   213.685       213.685    
  47  0.839413     -0.175053     -0.590649E-16  0.590649E-16   213.829       213.829    
  48  0.988987     -0.110736E-01 -0.373637E-17  0.373637E-17   214.409       214.409    
  49  0.111552E-01  -4.49585     -0.151695E-14  0.151695E-14   214.759       214.759    
  50  0.355224      -1.03501     -0.349223E-15  0.349223E-15   215.071       215.071    
  51  0.120547      -2.11571     -0.713867E-15  0.713867E-15   215.164       215.164    
  52  0.152042      -1.88360     -0.635549E-15  0.635549E-15   215.655       215.655    
  53  0.690155     -0.370840     -0.125126E-15  0.125126E-15   215.701       215.701    
  54  0.724480     -0.322301     -0.108748E-15  0.108748E-15   215.969       215.969    
  55  0.986759     -0.133290E-01 -0.449735E-17  0.449735E-17   216.105       216.105    
  56  0.108221      -2.22358     -0.750262E-15  0.750262E-15   216.230       216.230    
  57  0.154088      -1.87023     -0.631039E-15  0.631039E-15   216.880       216.880    
  58  0.326669      -1.11881     -0.377499E-15  0.377499E-15   217.102       217.102    
  59  0.712803     -0.338551     -0.114231E-15  0.114231E-15   217.227       217.227    
  60  0.551729E-02  -5.19987     -0.175450E-14  0.175450E-14   217.644       217.644    
  61  0.199435      -1.61227     -0.543998E-15  0.543998E-15   210.391       210.391    
loop,thermsimp(1:2)       18  0.106824E-15  0.734488E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    323              195.02          0.79          0.47         20.37
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       18
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.337412E-15           321
loop is:       19
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.674824E-16           331

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      322     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.546856     -0.603569     -0.407303E-16  0.407303E-16   192.054       192.054    
   2  0.824538     -0.192933     -0.130195E-16  0.130195E-16   192.343       192.343    
   3  0.420971     -0.865192     -0.583852E-16  0.583852E-16   192.782       192.782    
   4  0.356424      -1.03163     -0.696171E-16  0.696171E-16   194.053       194.053    
   5  0.396749     -0.924451     -0.623841E-16  0.623841E-16   194.406       194.406    
   6  0.226335E-01  -3.78832     -0.255645E-15  0.255645E-15   194.449       194.449    
   7  0.468137     -0.758995     -0.512188E-16  0.512188E-16   195.002       195.002    
   8  0.679042     -0.387072     -0.261205E-16  0.261205E-16   195.128       195.128    
   9  0.886760     -0.120181     -0.811010E-17  0.811010E-17   195.591       195.591    
  10  0.825931E-01  -2.49383     -0.168290E-15  0.168290E-15   195.941       195.941    
  11  0.304526      -1.18900     -0.802363E-16  0.802363E-16   196.611       196.611    
  12  0.541038     -0.614266     -0.414521E-16  0.414521E-16   196.808       196.808    
  13  0.500340     -0.692467     -0.467293E-16  0.467293E-16   197.184       197.184    
  14  0.433071     -0.836854     -0.564729E-16  0.564729E-16   197.603       197.603    
  15  0.617202     -0.482560     -0.325643E-16  0.325643E-16   197.710       197.710    
  16  0.746701     -0.292091     -0.197110E-16  0.197110E-16   197.742       197.742    
  17  0.710597     -0.341650     -0.230554E-16  0.230554E-16   197.904       197.904    
  18  0.854451     -0.157296     -0.106147E-16  0.106147E-16   198.488       198.488    
  19  0.878451     -0.129595     -0.874536E-17  0.874536E-17   199.726       199.726    
  20  0.299334      -1.20620     -0.813970E-16  0.813970E-16   201.382       201.382    
  21  0.909477     -0.948860E-01 -0.640313E-17  0.640313E-17   201.471       201.471    
  22  0.135621      -1.99789     -0.134822E-15  0.134822E-15   203.055       203.055    
  23  0.168200      -1.78260     -0.120294E-15  0.120294E-15   204.171       204.171    
  24  0.909531     -0.948265E-01 -0.639911E-17  0.639911E-17   204.213       204.213    
  25  0.239086      -1.43093     -0.965626E-16  0.965626E-16   204.441       204.441    
  26  0.980834     -0.193520E-01 -0.130592E-17  0.130592E-17   204.446       204.446    
  27  0.651407     -0.428621     -0.289244E-16  0.289244E-16   204.595       204.595    
  28  0.906019     -0.986947E-01 -0.666015E-17  0.666015E-17   204.760       204.760    
  29  0.986368     -0.137261E-01 -0.926270E-18  0.926270E-18   206.414       206.414    
  30  0.850605     -0.161808     -0.109192E-16  0.109192E-16   206.471       206.471    
  31  0.641712E-01  -2.74620     -0.185320E-15  0.185320E-15   206.556       206.556    
  32  0.155541      -1.86084     -0.125574E-15  0.125574E-15   207.724       207.724    
  33  0.582442E-01  -2.84311     -0.191860E-15  0.191860E-15   207.841       207.841    
  34  0.463100     -0.769813     -0.519488E-16  0.519488E-16   208.538       208.538    
  35  0.851840     -0.160357     -0.108213E-16  0.108213E-16   209.163       209.163    
  36  0.806829     -0.214644     -0.144847E-16  0.144847E-16   209.889       209.889    
  37  0.901602     -0.103582     -0.698993E-17  0.698993E-17   210.275       210.275    
  38  0.344693      -1.06510     -0.718755E-16  0.718755E-16   210.391       210.391    
  39  0.902176     -0.102946     -0.694702E-17  0.694702E-17   210.633       210.633    
  40  0.422396     -0.861811     -0.581570E-16  0.581570E-16   210.711       210.711    
  41  0.665988     -0.406484     -0.274305E-16  0.274305E-16   210.860       210.860    
  42  0.322164      -1.13270     -0.764370E-16  0.764370E-16   211.316       211.316    
  43  0.683838     -0.380034     -0.256456E-16  0.256456E-16   212.098       212.098    
  44  0.500669     -0.691811     -0.466850E-16  0.466850E-16   212.314       212.314    
  45  0.771569     -0.259330     -0.175002E-16  0.175002E-16   212.788       212.788    
  46  0.807021E-01  -2.51699     -0.169852E-15  0.169852E-15   212.820       212.820    
  47  0.663028     -0.410938     -0.277311E-16  0.277311E-16   213.685       213.685    
  48  0.934703     -0.675267E-01 -0.455686E-17  0.455686E-17   213.829       213.829    
  49  0.907599     -0.969531E-01 -0.654262E-17  0.654262E-17   214.409       214.409    
  50  0.864581     -0.145510     -0.981936E-17  0.981936E-17   214.759       214.759    
  51  0.255156      -1.36588     -0.921727E-16  0.921727E-16   215.071       215.071    
  52  0.677530     -0.389301     -0.262710E-16  0.262710E-16   215.164       215.164    
  53  0.408082     -0.896287     -0.604836E-16  0.604836E-16   215.655       215.655    
  54  0.184028      -1.69267     -0.114225E-15  0.114225E-15   215.701       215.701    
  55  0.438052     -0.825417     -0.557011E-16  0.557011E-16   215.969       215.969    
  56  0.909886     -0.944364E-01 -0.637279E-17  0.637279E-17   216.105       216.105    
  57  0.568027     -0.565586     -0.381671E-16  0.381671E-16   216.230       216.230    
  58  0.671335     -0.398488     -0.268909E-16  0.268909E-16   216.880       216.880    
  59  0.278149      -1.27960     -0.863503E-16  0.863503E-16   217.102       217.102    
  60  0.365509      -1.00646     -0.679186E-16  0.679186E-16   217.227       217.227    
  61  0.941425     -0.603601E-01 -0.407324E-17  0.407324E-17   195.025       195.025    
loop,thermsimp(1:2)       19  0.407303E-16  0.130195E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    324              202.71          0.79          0.47         20.31
Just calling func    0   0         22.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    202.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       19
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       20
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      323     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.398668     -0.919627     -0.620586E-16  0.620586E-16   192.054       192.054    
   2  0.165455      -1.79905     -0.121404E-15  0.121404E-15   192.343       192.343    
   3  0.289449      -1.23977     -0.836629E-16  0.836629E-16   192.782       192.782    
   4  0.557448     -0.584385     -0.394357E-16  0.394357E-16   194.053       194.053    
   5  0.703097     -0.352260     -0.237714E-16  0.237714E-16   194.406       194.406    
   6  0.503068     -0.687030     -0.463624E-16  0.463624E-16   194.449       194.449    
   7  0.938077     -0.639227E-01 -0.431366E-17  0.431366E-17   195.002       195.002    
   8  0.891324     -0.115047     -0.776366E-17  0.776366E-17   195.025       195.025    
   9  0.630354     -0.461474     -0.311414E-16  0.311414E-16   195.128       195.128    
  10  0.291878      -1.23142     -0.830990E-16  0.830990E-16   195.591       195.591    
  11  0.428685     -0.847033     -0.571598E-16  0.571598E-16   195.941       195.941    
  12  0.757144     -0.278202     -0.187738E-16  0.187738E-16   196.611       196.611    
  13  0.561005     -0.578026     -0.390065E-16  0.390065E-16   196.808       196.808    
  14  0.426292     -0.852630     -0.575375E-16  0.575375E-16   197.184       197.184    
  15  0.851731     -0.160484     -0.108299E-16  0.108299E-16   197.603       197.603    
  16  0.262726      -1.33664     -0.901998E-16  0.901998E-16   197.710       197.710    
  17  0.172079      -1.75980     -0.118756E-15  0.118756E-15   197.742       197.742    
  18  0.213889      -1.54230     -0.104078E-15  0.104078E-15   197.904       197.904    
  19  0.810642     -0.209929     -0.141665E-16  0.141665E-16   198.488       198.488    
  20  0.479829E-01  -3.03691     -0.204938E-15  0.204938E-15   199.726       199.726    
  21  0.306513      -1.18250     -0.797976E-16  0.797976E-16   201.382       201.382    
  22  0.924966     -0.779988E-01 -0.526355E-17  0.526355E-17   201.471       201.471    
  23  0.124113      -2.08657     -0.140806E-15  0.140806E-15   203.055       203.055    
  24  0.862528     -0.147888     -0.997983E-17  0.997983E-17   204.171       204.171    
  25  0.214419      -1.53982     -0.103911E-15  0.103911E-15   204.213       204.213    
  26  0.910738     -0.935002E-01 -0.630961E-17  0.630961E-17   204.441       204.441    
  27  0.168206      -1.78257     -0.120292E-15  0.120292E-15   204.446       204.446    
  28  0.220235      -1.51306     -0.102105E-15  0.102105E-15   204.595       204.595    
  29  0.664745     -0.408352     -0.275566E-16  0.275566E-16   204.760       204.760    
  30  0.852665     -0.159389     -0.107559E-16  0.107559E-16   206.414       206.414    
  31  0.525433     -0.643533     -0.434271E-16  0.434271E-16   206.471       206.471    
  32  0.834716     -0.180664     -0.121916E-16  0.121916E-16   206.556       206.556    
  33  0.703970     -0.351020     -0.236877E-16  0.236877E-16   207.724       207.724    
  34  0.518343     -0.657118     -0.443439E-16  0.443439E-16   207.841       207.841    
  35  0.894988E-01  -2.41353     -0.162871E-15  0.162871E-15   208.538       208.538    
  36  0.365962      -1.00523     -0.678350E-16  0.678350E-16   209.163       209.163    
  37  0.664392     -0.408883     -0.275924E-16  0.275924E-16   209.889       209.889    
  38  0.287667      -1.24595     -0.840797E-16  0.840797E-16   210.275       210.275    
  39  0.408382     -0.895553     -0.604341E-16  0.604341E-16   210.391       210.391    
  40  0.606391     -0.500230     -0.337567E-16  0.337567E-16   210.633       210.633    
  41  0.747532     -0.290979     -0.196359E-16  0.196359E-16   210.711       210.711    
  42  0.279016      -1.27649     -0.861403E-16  0.861403E-16   210.860       210.860    
  43  0.847660     -0.165275     -0.111532E-16  0.111532E-16   211.316       211.316    
  44  0.706621     -0.347261     -0.234340E-16  0.234340E-16   212.098       212.098    
  45  0.231602      -1.46274     -0.987089E-16  0.987089E-16   212.314       212.314    
  46  0.368415E-01  -3.30113     -0.222768E-15  0.222768E-15   212.788       212.788    
  47  0.386839     -0.949747     -0.640912E-16  0.640912E-16   212.820       212.820    
  48  0.769195     -0.262410     -0.177081E-16  0.177081E-16   213.685       213.685    
  49  0.388245     -0.946120     -0.638464E-16  0.638464E-16   213.829       213.829    
  50  0.449203     -0.800280     -0.540048E-16  0.540048E-16   214.409       214.409    
  51  0.580602     -0.543689     -0.366894E-16  0.366894E-16   214.759       214.759    
  52  0.537890     -0.620102     -0.418459E-16  0.418459E-16   215.071       215.071    
  53  0.887600     -0.119234     -0.804617E-17  0.804617E-17   215.164       215.164    
  54  0.339588      -1.08002     -0.728824E-16  0.728824E-16   215.655       215.655    
  55  0.969041     -0.314483E-01 -0.212221E-17  0.212221E-17   215.701       215.701    
  56  0.826477     -0.190584     -0.128610E-16  0.128610E-16   215.969       215.969    
  57  0.876887     -0.131377     -0.886561E-17  0.886561E-17   216.105       216.105    
  58  0.283575      -1.26028     -0.850465E-16  0.850465E-16   216.230       216.230    
  59  0.310760      -1.16873     -0.788689E-16  0.788689E-16   216.880       216.880    
  60  0.117911      -2.13783     -0.144266E-15  0.144266E-15   217.102       217.102    
  61  0.774515E-01  -2.55810     -0.172627E-15  0.172627E-15   202.706       202.706    
loop,thermsimp(1:2)       20  0.620586E-16  0.121404E-15

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    325              191.06          0.79          0.47         20.37
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    326              184.35          0.77          0.47         20.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    184.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       20
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       21
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      325     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.290333      -1.23673     -0.834572E-16  0.834572E-16   192.054       192.054    
   2  0.588671     -0.529888     -0.357581E-16  0.357581E-16   192.343       192.343    
   3  0.640357     -0.445730     -0.300789E-16  0.300789E-16   192.782       192.782    
   4  0.435190     -0.831972     -0.561434E-16  0.561434E-16   194.053       194.053    
   5  0.428930     -0.846462     -0.571213E-16  0.571213E-16   194.406       194.406    
   6  0.666600     -0.405566     -0.273685E-16  0.273685E-16   194.449       194.449    
   7  0.731679     -0.312414     -0.210824E-16  0.210824E-16   195.002       195.002    
   8  0.815785     -0.203605     -0.137397E-16  0.137397E-16   195.025       195.025    
   9  0.107338      -2.23177     -0.150605E-15  0.150605E-15   195.128       195.128    
  10  0.327727      -1.11557     -0.752816E-16  0.752816E-16   195.591       195.591    
  11  0.390619     -0.940022     -0.634349E-16  0.634349E-16   195.941       195.941    
  12  0.120430      -2.11669     -0.142839E-15  0.142839E-15   196.611       196.611    
  13  0.314423      -1.15702     -0.780783E-16  0.780783E-16   196.808       196.808    
  14  0.505778     -0.681658     -0.459999E-16  0.459999E-16   197.184       197.184    
  15  0.321484      -1.13481     -0.765795E-16  0.765795E-16   197.603       197.603    
  16  0.334089      -1.09635     -0.739842E-16  0.739842E-16   197.710       197.710    
  17  0.441346     -0.817927     -0.551956E-16  0.551956E-16   197.742       197.742    
  18  0.327485      -1.11631     -0.753314E-16  0.753314E-16   197.904       197.904    
  19  0.196216      -1.62854     -0.109898E-15  0.109898E-15   198.488       198.488    
  20  0.765124     -0.267718     -0.180662E-16  0.180662E-16   199.726       199.726    
  21  0.219988      -1.51418     -0.102181E-15  0.102181E-15   201.382       201.382    
  22  0.475742     -0.742880     -0.501313E-16  0.501313E-16   201.471       201.471    
  23  0.799379     -0.223920     -0.151107E-16  0.151107E-16   202.706       202.706    
  24  0.559785     -0.580202     -0.391534E-16  0.391534E-16   203.055       203.055    
  25  0.717455     -0.332045     -0.224072E-16  0.224072E-16   204.171       204.171    
  26  0.840694     -0.173527     -0.117100E-16  0.117100E-16   204.213       204.213    
  27  0.138942      -1.97370     -0.133190E-15  0.133190E-15   204.441       204.441    
  28  0.614590     -0.486799     -0.328504E-16  0.328504E-16   204.446       204.446    
  29  0.717603E-01  -2.63442     -0.177777E-15  0.177777E-15   204.595       204.595    
  30  0.180411      -1.71252     -0.115565E-15  0.115565E-15   204.760       204.760    
  31  0.903828     -0.101116     -0.682353E-17  0.682353E-17   206.414       206.414    
  32  0.204750      -1.58596     -0.107025E-15  0.107025E-15   206.471       206.471    
  33  0.461593     -0.773071     -0.521687E-16  0.521687E-16   206.556       206.556    
  34  0.167940      -1.78415     -0.120398E-15  0.120398E-15   207.724       207.724    
  35  0.784723     -0.242424     -0.163593E-16  0.163593E-16   207.841       207.841    
  36  0.680260     -0.385280     -0.259996E-16  0.259996E-16   208.538       208.538    
  37  0.407108     -0.898677     -0.606449E-16  0.606449E-16   209.163       209.163    
  38  0.253935      -1.37068     -0.924964E-16  0.924964E-16   209.889       209.889    
  39  0.715625     -0.334599     -0.225795E-16  0.225795E-16   210.275       210.275    
  40  0.944329     -0.572804E-01 -0.386542E-17  0.386542E-17   210.391       210.391    
  41  0.419285E-01  -3.17179     -0.214040E-15  0.214040E-15   210.633       210.633    
  42  0.631893     -0.459035     -0.309768E-16  0.309768E-16   210.711       210.711    
  43  0.633467     -0.456548     -0.308089E-16  0.308089E-16   210.860       210.860    
  44  0.525115     -0.644137     -0.434679E-16  0.434679E-16   211.316       211.316    
  45  0.710784     -0.341387     -0.230376E-16  0.230376E-16   212.098       212.098    
  46  0.640363     -0.445720     -0.300782E-16  0.300782E-16   212.314       212.314    
  47  0.903852E-01  -2.40368     -0.162206E-15  0.162206E-15   212.788       212.788    
  48  0.571075     -0.560235     -0.378059E-16  0.378059E-16   212.820       212.820    
  49  0.126894      -2.06440     -0.139311E-15  0.139311E-15   213.685       213.685    
  50  0.895266     -0.110634     -0.746586E-17  0.746586E-17   213.829       213.829    
  51  0.443361     -0.813371     -0.548882E-16  0.548882E-16   214.409       214.409    
  52  0.932508     -0.698779E-01 -0.471553E-17  0.471553E-17   214.759       214.759    
  53  0.996540     -0.346592E-02 -0.233888E-18  0.233888E-18   215.071       215.071    
  54  0.471104     -0.752676     -0.507924E-16  0.507924E-16   215.164       215.164    
  55  0.682233     -0.382385     -0.258042E-16  0.258042E-16   215.655       215.655    
  56  0.939109     -0.628237E-01 -0.423949E-17  0.423949E-17   215.701       215.701    
  57  0.686735     -0.375806     -0.253603E-16  0.253603E-16   215.969       215.969    
  58  0.155558      -1.86073     -0.125567E-15  0.125567E-15   216.105       216.105    
  59  0.403357     -0.907934     -0.612696E-16  0.612696E-16   216.230       216.230    
  60  0.846501     -0.166644     -0.112455E-16  0.112455E-16   216.880       216.880    
  61  0.773314     -0.257070     -0.173477E-16  0.173477E-16   184.352       184.352    
loop,thermsimp(1:2)       21  0.834572E-16  0.357581E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    327              195.81          0.78          0.47         20.34
Just calling func    0   0         22.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       21
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       22
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      326     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.110347      -2.20412     -0.148739E-15  0.148739E-15   184.352       184.352    
   2  0.570837     -0.560651     -0.378341E-16  0.378341E-16   192.054       192.054    
   3  0.561393     -0.577334     -0.389598E-16  0.389598E-16   192.343       192.343    
   4  0.773765     -0.256487     -0.173084E-16  0.173084E-16   192.782       192.782    
   5  0.515641     -0.662344     -0.446965E-16  0.446965E-16   194.053       194.053    
   6  0.737205     -0.304889     -0.205747E-16  0.205747E-16   194.406       194.406    
   7  0.632817     -0.457575     -0.308782E-16  0.308782E-16   194.449       194.449    
   8  0.613179     -0.489099     -0.330055E-16  0.330055E-16   195.002       195.002    
   9  0.620440     -0.477327     -0.322112E-16  0.322112E-16   195.025       195.025    
  10  0.144343      -1.93556     -0.130616E-15  0.130616E-15   195.128       195.128    
  11  0.376783     -0.976085     -0.658685E-16  0.658685E-16   195.591       195.591    
  12  0.917768     -0.858109E-01 -0.579073E-17  0.579073E-17   195.941       195.941    
  13  0.165698      -1.79759     -0.121306E-15  0.121306E-15   196.611       196.611    
  14  0.884262E-01  -2.42559     -0.163684E-15  0.163684E-15   196.808       196.808    
  15  0.939871     -0.620122E-01 -0.418473E-17  0.418473E-17   197.184       197.184    
  16  0.378966     -0.970310     -0.654788E-16  0.654788E-16   197.603       197.603    
  17  0.820890     -0.197366     -0.133187E-16  0.133187E-16   197.710       197.710    
  18  0.249247      -1.38931     -0.937539E-16  0.937539E-16   197.742       197.742    
  19  0.190676      -1.65718     -0.111830E-15  0.111830E-15   197.904       197.904    
  20  0.984661     -0.154583E-01 -0.104316E-17  0.104316E-17   198.488       198.488    
  21  0.254067      -1.37016     -0.924614E-16  0.924614E-16   199.726       199.726    
  22  0.505660     -0.681891     -0.460156E-16  0.460156E-16   201.382       201.382    
  23  0.705808     -0.348412     -0.235116E-16  0.235116E-16   201.471       201.471    
  24  0.479604     -0.734794     -0.495857E-16  0.495857E-16   202.706       202.706    
  25  0.401241     -0.913193     -0.616244E-16  0.616244E-16   203.055       203.055    
  26  0.588965     -0.529388     -0.357244E-16  0.357244E-16   204.171       204.171    
  27  0.287704      -1.24582     -0.840711E-16  0.840711E-16   204.213       204.213    
  28  0.663365     -0.410429     -0.276967E-16  0.276967E-16   204.441       204.441    
  29  0.698041     -0.359478     -0.242584E-16  0.242584E-16   204.446       204.446    
  30  0.460105E-01  -3.07889     -0.207770E-15  0.207770E-15   204.595       204.595    
  31  0.315546      -1.15345     -0.778376E-16  0.778376E-16   204.760       204.760    
  32  0.128481      -2.05198     -0.138472E-15  0.138472E-15   206.414       206.414    
  33  0.683083     -0.381139     -0.257202E-16  0.257202E-16   206.471       206.471    
  34  0.459829     -0.776900     -0.524271E-16  0.524271E-16   206.556       206.556    
  35  0.720682     -0.327557     -0.221043E-16  0.221043E-16   207.724       207.724    
  36  0.410074     -0.891419     -0.601550E-16  0.601550E-16   207.841       207.841    
  37  0.147434      -1.91437     -0.129187E-15  0.129187E-15   208.538       208.538    
  38  0.776447     -0.253026     -0.170748E-16  0.170748E-16   209.163       209.163    
  39  0.183126E-01  -4.00017     -0.269941E-15  0.269941E-15   209.889       209.889    
  40  0.456168     -0.784895     -0.529666E-16  0.529666E-16   210.275       210.275    
  41  0.441178     -0.818307     -0.552213E-16  0.552213E-16   210.391       210.391    
  42  0.672940     -0.396099     -0.267297E-16  0.267297E-16   210.633       210.633    
  43  0.158102      -1.84451     -0.124472E-15  0.124472E-15   210.711       210.711    
  44  0.513575     -0.666359     -0.449675E-16  0.449675E-16   210.860       210.860    
  45  0.654668     -0.423627     -0.285873E-16  0.285873E-16   211.316       211.316    
  46  0.805975     -0.215702     -0.145561E-16  0.145561E-16   212.098       212.098    
  47  0.560756     -0.578469     -0.390365E-16  0.390365E-16   212.314       212.314    
  48  0.374591     -0.981920     -0.662623E-16  0.662623E-16   212.788       212.788    
  49  0.923881     -0.791720E-01 -0.534272E-17  0.534272E-17   212.820       212.820    
  50  0.747563     -0.290937     -0.196331E-16  0.196331E-16   213.685       213.685    
  51  0.810415     -0.210208     -0.141854E-16  0.141854E-16   213.829       213.829    
  52  0.407593     -0.897486     -0.605645E-16  0.605645E-16   214.409       214.409    
  53  0.334911      -1.09389     -0.738183E-16  0.738183E-16   214.759       214.759    
  54  0.799805E-02  -4.82856     -0.325842E-15  0.325842E-15   215.071       215.071    
  55  0.184164      -1.69193     -0.114175E-15  0.114175E-15   215.164       215.164    
  56  0.100659      -2.29602     -0.154941E-15  0.154941E-15   215.655       215.655    
  57  0.660676     -0.414492     -0.279709E-16  0.279709E-16   215.701       215.701    
  58  0.711050     -0.341013     -0.230124E-16  0.230124E-16   215.969       215.969    
  59  0.325330      -1.12292     -0.757770E-16  0.757770E-16   216.105       216.105    
  60  0.823059     -0.194727     -0.131407E-16  0.131407E-16   216.230       216.230    
  61  0.117841      -2.13842     -0.144306E-15  0.144306E-15   195.809       195.809    
loop,thermsimp(1:2)       22  0.148739E-15  0.378341E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    328              194.87          0.78          0.46         20.36
Just calling func    0   0         23.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       22
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       23
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      327     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.635581     -0.453215     -0.305840E-16  0.305840E-16   184.352       184.352    
   2  0.635538     -0.453284     -0.305887E-16  0.305887E-16   192.054       192.054    
   3  0.605859     -0.501108     -0.338160E-16  0.338160E-16   192.343       192.343    
   4  0.142526      -1.94823     -0.131471E-15  0.131471E-15   192.782       192.782    
   5  0.282576      -1.26381     -0.852847E-16  0.852847E-16   194.053       194.053    
   6  0.128414      -2.05250     -0.138507E-15  0.138507E-15   194.406       194.406    
   7  0.232100      -1.46059     -0.985640E-16  0.985640E-16   194.449       194.449    
   8  0.355942      -1.03299     -0.697084E-16  0.697084E-16   195.002       195.002    
   9  0.686742E-01  -2.67838     -0.180744E-15  0.180744E-15   195.025       195.025    
  10  0.720594     -0.327679     -0.221126E-16  0.221126E-16   195.128       195.128    
  11  0.126110      -2.07060     -0.139729E-15  0.139729E-15   195.591       195.591    
  12  0.559659     -0.580427     -0.391686E-16  0.391686E-16   195.809       195.809    
  13  0.332456      -1.10125     -0.743148E-16  0.743148E-16   195.941       195.941    
  14  0.323070      -1.12989     -0.762473E-16  0.762473E-16   196.611       196.611    
  15  0.467580     -0.760185     -0.512991E-16  0.512991E-16   196.808       196.808    
  16  0.980100     -0.201009E-01 -0.135646E-17  0.135646E-17   197.184       197.184    
  17  0.574508     -0.554241     -0.374015E-16  0.374015E-16   197.603       197.603    
  18  0.252898      -1.37477     -0.927727E-16  0.927727E-16   197.710       197.710    
  19  0.276027      -1.28726     -0.868671E-16  0.868671E-16   197.742       197.742    
  20  0.709849     -0.342703     -0.231264E-16  0.231264E-16   197.904       197.904    
  21  0.699474     -0.357426     -0.241200E-16  0.241200E-16   198.488       198.488    
  22  0.388890     -0.944458     -0.637343E-16  0.637343E-16   199.726       199.726    
  23  0.832978     -0.182748     -0.123322E-16  0.123322E-16   201.382       201.382    
  24  0.387543     -0.947927     -0.639684E-16  0.639684E-16   201.471       201.471    
  25  0.151158      -1.88943     -0.127503E-15  0.127503E-15   202.706       202.706    
  26  0.530072     -0.634742     -0.428339E-16  0.428339E-16   203.055       203.055    
  27  0.348714      -1.05350     -0.710929E-16  0.710929E-16   204.171       204.171    
  28  0.705153     -0.349340     -0.235743E-16  0.235743E-16   204.213       204.213    
  29  0.912077     -0.920312E-01 -0.621048E-17  0.621048E-17   204.441       204.441    
  30  0.514822E-01  -2.96652     -0.200188E-15  0.200188E-15   204.446       204.446    
  31  0.872082     -0.136872     -0.923642E-17  0.923642E-17   204.595       204.595    
  32  0.722900     -0.324485     -0.218970E-16  0.218970E-16   204.760       204.760    
  33  0.557160     -0.584904     -0.394707E-16  0.394707E-16   206.414       206.414    
  34  0.905151     -0.996536E-01 -0.672486E-17  0.672486E-17   206.471       206.471    
  35  0.170846      -1.76699     -0.119241E-15  0.119241E-15   206.556       206.556    
  36  0.668454     -0.402788     -0.271811E-16  0.271811E-16   207.724       207.724    
  37  0.473092     -0.748465     -0.505082E-16  0.505082E-16   207.841       207.841    
  38  0.859942     -0.150891     -0.101825E-16  0.101825E-16   208.538       208.538    
  39  0.119406      -2.12523     -0.143415E-15  0.143415E-15   209.163       209.163    
  40  0.802120     -0.220497     -0.148797E-16  0.148797E-16   209.889       209.889    
  41  0.334927E-02  -5.69901     -0.384583E-15  0.384583E-15   210.275       210.275    
  42  0.236296      -1.44267     -0.973548E-16  0.973548E-16   210.391       210.391    
  43  0.881409     -0.126233     -0.851852E-17  0.851852E-17   210.633       210.633    
  44  0.305353      -1.18629     -0.800534E-16  0.800534E-16   210.711       210.711    
  45  0.625059     -0.469909     -0.317105E-16  0.317105E-16   210.860       210.860    
  46  0.638741     -0.448256     -0.302494E-16  0.302494E-16   211.316       211.316    
  47  0.164601      -1.80423     -0.121754E-15  0.121754E-15   212.098       212.098    
  48  0.196032E-01  -3.93206     -0.265345E-15  0.265345E-15   212.314       212.314    
  49  0.230069E-01  -3.77196     -0.254541E-15  0.254541E-15   212.788       212.788    
  50  0.493435     -0.706364     -0.476671E-16  0.476671E-16   212.820       212.820    
  51  0.958816     -0.420565E-01 -0.283807E-17  0.283807E-17   213.685       213.685    
  52  0.378075     -0.972664     -0.656377E-16  0.656377E-16   213.829       213.829    
  53  0.274244      -1.29374     -0.873044E-16  0.873044E-16   214.409       214.409    
  54  0.325391      -1.12273     -0.757642E-16  0.757642E-16   214.759       214.759    
  55  0.515849     -0.661942     -0.446694E-16  0.446694E-16   215.071       215.071    
  56  0.760536     -0.273732     -0.184721E-16  0.184721E-16   215.164       215.164    
  57  0.422728E-01  -3.16361     -0.213488E-15  0.213488E-15   215.655       215.655    
  58  0.762475     -0.271186     -0.183003E-16  0.183003E-16   215.701       215.701    
  59  0.119033      -2.12835     -0.143626E-15  0.143626E-15   215.969       215.969    
  60  0.811919     -0.208355     -0.140603E-16  0.140603E-16   216.105       216.105    
  61  0.474223     -0.746077     -0.503471E-16  0.503471E-16   194.870       194.870    
loop,thermsimp(1:2)       23  0.305840E-16  0.305887E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    329              193.81          0.80          0.47         20.28
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       23
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       24
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      328     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.649497     -0.431557     -0.291225E-16  0.291225E-16   184.352       184.352    
   2  0.361609      -1.01719     -0.686426E-16  0.686426E-16   192.054       192.054    
   3  0.244658      -1.40790     -0.950081E-16  0.950081E-16   192.343       192.343    
   4  0.851714E-01  -2.46309     -0.166215E-15  0.166215E-15   192.782       192.782    
   5  0.770692E-01  -2.56305     -0.172961E-15  0.172961E-15   194.053       194.053    
   6  0.312068      -1.16453     -0.785855E-16  0.785855E-16   194.406       194.406    
   7  0.318793      -1.14321     -0.771468E-16  0.771468E-16   194.449       194.449    
   8  0.220498      -1.51187     -0.102024E-15  0.102024E-15   194.870       194.870    
   9  0.134026      -2.00972     -0.135621E-15  0.135621E-15   195.002       195.002    
  10  0.231005      -1.46532     -0.988830E-16  0.988830E-16   195.025       195.025    
  11  0.968179     -0.323379E-01 -0.218224E-17  0.218224E-17   195.128       195.128    
  12  0.268657      -1.31432     -0.886935E-16  0.886935E-16   195.591       195.591    
  13  0.980804     -0.193830E-01 -0.130801E-17  0.130801E-17   195.809       195.809    
  14  0.680516     -0.384903     -0.259742E-16  0.259742E-16   195.941       195.941    
  15  0.866307     -0.143515     -0.968476E-17  0.968476E-17   196.611       196.611    
  16  0.893093     -0.113065     -0.762987E-17  0.762987E-17   196.808       196.808    
  17  0.855158     -0.156468     -0.105589E-16  0.105589E-16   197.184       197.184    
  18  0.644092     -0.439914     -0.296864E-16  0.296864E-16   197.603       197.603    
  19  0.885016     -0.122149     -0.824292E-17  0.824292E-17   197.710       197.710    
  20  0.290528E-02  -5.84122     -0.394180E-15  0.394180E-15   197.742       197.742    
  21  0.804184     -0.217927     -0.147062E-16  0.147062E-16   197.904       197.904    
  22  0.229354      -1.47249     -0.993671E-16  0.993671E-16   198.488       198.488    
  23  0.264293      -1.33070     -0.897985E-16  0.897985E-16   199.726       199.726    
  24  0.790648     -0.234902     -0.158518E-16  0.158518E-16   201.382       201.382    
  25  0.900488     -0.104819     -0.707342E-17  0.707342E-17   201.471       201.471    
  26  0.639812E-01  -2.74917     -0.185520E-15  0.185520E-15   202.706       202.706    
  27  0.626787     -0.467149     -0.315243E-16  0.315243E-16   203.055       203.055    
  28  0.901307E-01  -2.40649     -0.162396E-15  0.162396E-15   204.171       204.171    
  29  0.264318      -1.33060     -0.897923E-16  0.897923E-16   204.213       204.213    
  30  0.884330     -0.122925     -0.829525E-17  0.829525E-17   204.441       204.441    
  31  0.549353     -0.599014     -0.404229E-16  0.404229E-16   204.446       204.446    
  32  0.221691      -1.50647     -0.101660E-15  0.101660E-15   204.595       204.595    
  33  0.760879     -0.273281     -0.184417E-16  0.184417E-16   204.760       204.760    
  34  0.331750      -1.10337     -0.744583E-16  0.744583E-16   206.414       206.414    
  35  0.802652     -0.219834     -0.148349E-16  0.148349E-16   206.471       206.471    
  36  0.778297     -0.250647     -0.169142E-16  0.169142E-16   206.556       206.556    
  37  0.943841     -0.577973E-01 -0.390030E-17  0.390030E-17   207.724       207.724    
  38  0.576132     -0.551418     -0.372110E-16  0.372110E-16   207.841       207.841    
  39  0.626516E-02  -5.07275     -0.342321E-15  0.342321E-15   208.538       208.538    
  40  0.516122E-01  -2.96400     -0.200018E-15  0.200018E-15   209.163       209.163    
  41  0.264202      -1.33104     -0.898218E-16  0.898218E-16   209.889       209.889    
  42  0.366974      -1.00247     -0.676487E-16  0.676487E-16   210.275       210.275    
  43  0.723047     -0.324281     -0.218833E-16  0.218833E-16   210.391       210.391    
  44  0.453004     -0.791854     -0.534362E-16  0.534362E-16   210.633       210.633    
  45  0.272810      -1.29898     -0.876581E-16  0.876581E-16   210.711       210.711    
  46  0.437992     -0.825554     -0.557103E-16  0.557103E-16   210.860       210.860    
  47  0.419315     -0.869133     -0.586511E-16  0.586511E-16   211.316       211.316    
  48  0.668870     -0.402166     -0.271391E-16  0.271391E-16   212.098       212.098    
  49  0.326779      -1.11847     -0.754770E-16  0.754770E-16   212.314       212.314    
  50  0.443616     -0.812795     -0.548493E-16  0.548493E-16   212.788       212.788    
  51  0.694544     -0.364500     -0.245973E-16  0.245973E-16   212.820       212.820    
  52  0.966906     -0.336544E-01 -0.227108E-17  0.227108E-17   213.685       213.685    
  53  0.921407     -0.818529E-01 -0.552363E-17  0.552363E-17   213.829       213.829    
  54  0.343071      -1.06982     -0.721938E-16  0.721938E-16   214.409       214.409    
  55  0.580072     -0.544603     -0.367511E-16  0.367511E-16   214.759       214.759    
  56  0.258853      -1.35149     -0.912020E-16  0.912020E-16   215.071       215.071    
  57  0.998625     -0.137573E-02 -0.928373E-19  0.928373E-19   215.164       215.164    
  58  0.876958     -0.131296     -0.886017E-17  0.886017E-17   215.655       215.655    
  59  0.550149E-01  -2.90015     -0.195709E-15  0.195709E-15   215.701       215.701    
  60  0.573027     -0.556823     -0.375757E-16  0.375757E-16   215.969       215.969    
  61  0.739231     -0.302145     -0.203895E-16  0.203895E-16   193.810       193.810    
loop,thermsimp(1:2)       24  0.291225E-16  0.686426E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    330              195.01          0.79          0.46         20.27
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       24
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       25
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      329     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.868674     -0.140787     -0.950063E-17  0.950063E-17   184.352       184.352    
   2  0.757825     -0.277303     -0.187131E-16  0.187131E-16   192.054       192.054    
   3  0.129351      -2.04523     -0.138017E-15  0.138017E-15   192.343       192.343    
   4  0.951723     -0.494810E-01 -0.333909E-17  0.333909E-17   192.782       192.782    
   5  0.409870E-02  -5.49708     -0.370956E-15  0.370956E-15   193.810       193.810    
   6  0.818514     -0.200264     -0.135143E-16  0.135143E-16   194.053       194.053    
   7  0.797890     -0.225784     -0.152365E-16  0.152365E-16   194.406       194.406    
   8  0.107973      -2.22587     -0.150207E-15  0.150207E-15   194.449       194.449    
   9  0.325679E-01  -3.42443     -0.231089E-15  0.231089E-15   194.870       194.870    
  10  0.132315      -2.02257     -0.136488E-15  0.136488E-15   195.002       195.002    
  11  0.851789     -0.160416     -0.108253E-16  0.108253E-16   195.025       195.025    
  12  0.171522      -1.76304     -0.118974E-15  0.118974E-15   195.128       195.128    
  13  0.693604     -0.365854     -0.246887E-16  0.246887E-16   195.591       195.591    
  14  0.373448     -0.984976     -0.664685E-16  0.664685E-16   195.809       195.809    
  15  0.716452     -0.333444     -0.225016E-16  0.225016E-16   195.941       195.941    
  16  0.387205     -0.948802     -0.640274E-16  0.640274E-16   196.611       196.611    
  17  0.576813     -0.550237     -0.371313E-16  0.371313E-16   196.808       196.808    
  18  0.834128     -0.181368     -0.122392E-16  0.122392E-16   197.184       197.184    
  19  0.408363E-01  -3.19818     -0.215821E-15  0.215821E-15   197.603       197.603    
  20  0.307943E-01  -3.48043     -0.234867E-15  0.234867E-15   197.710       197.710    
  21  0.861669     -0.148884     -0.100471E-16  0.100471E-16   197.742       197.742    
  22  0.766633     -0.265748     -0.179333E-16  0.179333E-16   197.904       197.904    
  23  0.552665     -0.593004     -0.400173E-16  0.400173E-16   198.488       198.488    
  24  0.770959     -0.260120     -0.175535E-16  0.175535E-16   199.726       199.726    
  25  0.784307     -0.242954     -0.163951E-16  0.163951E-16   201.382       201.382    
  26  0.525243     -0.643894     -0.434515E-16  0.434515E-16   201.471       201.471    
  27  0.848820     -0.163908     -0.110609E-16  0.110609E-16   202.706       202.706    
  28  0.328416      -1.11347     -0.751398E-16  0.751398E-16   203.055       203.055    
  29  0.100989      -2.29274     -0.154720E-15  0.154720E-15   204.171       204.171    
  30  0.594158     -0.520610     -0.351320E-16  0.351320E-16   204.213       204.213    
  31  0.648267     -0.433452     -0.292504E-16  0.292504E-16   204.441       204.441    
  32  0.203713      -1.59104     -0.107367E-15  0.107367E-15   204.446       204.446    
  33  0.877410E-01  -2.43337     -0.164209E-15  0.164209E-15   204.595       204.595    
  34  0.606772     -0.499601     -0.337143E-16  0.337143E-16   204.760       204.760    
  35  0.789652     -0.236163     -0.159369E-16  0.159369E-16   206.414       206.414    
  36  0.219168      -1.51792     -0.102433E-15  0.102433E-15   206.471       206.471    
  37  0.788806E-01  -2.53982     -0.171393E-15  0.171393E-15   206.556       206.556    
  38  0.407396     -0.897969     -0.605970E-16  0.605970E-16   207.724       207.724    
  39  0.484598     -0.724435     -0.488866E-16  0.488866E-16   207.841       207.841    
  40  0.919951     -0.834348E-01 -0.563038E-17  0.563038E-17   208.538       208.538    
  41  0.242720      -1.41585     -0.955446E-16  0.955446E-16   209.163       209.163    
  42  0.813047     -0.206966     -0.139666E-16  0.139666E-16   209.889       209.889    
  43  0.534955     -0.625572     -0.422151E-16  0.422151E-16   210.275       210.275    
  44  0.877190     -0.131031     -0.884230E-17  0.884230E-17   210.391       210.391    
  45  0.417946     -0.872403     -0.588718E-16  0.588718E-16   210.633       210.633    
  46  0.200959      -1.60466     -0.108286E-15  0.108286E-15   210.711       210.711    
  47  0.869217     -0.140162     -0.945846E-17  0.945846E-17   210.860       210.860    
  48  0.901844     -0.103314     -0.697188E-17  0.697188E-17   211.316       211.316    
  49  0.842683     -0.171164     -0.115505E-16  0.115505E-16   212.098       212.098    
  50  0.359232      -1.02379     -0.690875E-16  0.690875E-16   212.314       212.314    
  51  0.517911E-01  -2.96054     -0.199784E-15  0.199784E-15   212.788       212.788    
  52  0.363565      -1.01180     -0.682785E-16  0.682785E-16   212.820       212.820    
  53  0.442860     -0.814502     -0.549646E-16  0.549646E-16   213.685       213.685    
  54  0.281829      -1.26646     -0.854634E-16  0.854634E-16   213.829       213.829    
  55  0.730352     -0.314229     -0.212049E-16  0.212049E-16   214.409       214.409    
  56  0.746711     -0.292076     -0.197100E-16  0.197100E-16   214.759       214.759    
  57  0.338345E-01  -3.38627     -0.228514E-15  0.228514E-15   215.071       215.071    
  58  0.491947     -0.709383     -0.478709E-16  0.478709E-16   215.164       215.164    
  59  0.298959      -1.20745     -0.814815E-16  0.814815E-16   215.655       215.655    
  60  0.573005     -0.556860     -0.375782E-16  0.375782E-16   215.701       215.701    
  61  0.377461     -0.974287     -0.657472E-16  0.657472E-16   195.010       195.010    
loop,thermsimp(1:2)       25  0.950063E-17  0.187131E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    331              192.90          0.79          0.47         20.34
Just calling func    0   0         22.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.90
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       25
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       26
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      330     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.868634     -0.140834     -0.950381E-17  0.950381E-17   184.352       184.352    
   2  0.264334      -1.33054     -0.897880E-16  0.897880E-16   192.054       192.054    
   3  0.996480     -0.352669E-02 -0.237989E-18  0.237989E-18   192.343       192.343    
   4  0.572876     -0.557087     -0.375935E-16  0.375935E-16   192.782       192.782    
   5  0.576748     -0.550349     -0.371389E-16  0.371389E-16   193.810       193.810    
   6  0.511622     -0.670170     -0.452246E-16  0.452246E-16   194.053       194.053    
   7  0.144561      -1.93405     -0.130514E-15  0.130514E-15   194.406       194.406    
   8  0.800927     -0.221986     -0.149801E-16  0.149801E-16   194.449       194.449    
   9  0.877402     -0.130790     -0.882600E-17  0.882600E-17   194.870       194.870    
  10  0.406591     -0.899947     -0.607305E-16  0.607305E-16   195.002       195.002    
  11  0.212527      -1.54868     -0.104509E-15  0.104509E-15   195.010       195.010    
  12  0.305624      -1.18540     -0.799936E-16  0.799936E-16   195.025       195.025    
  13  0.811834     -0.208459     -0.140673E-16  0.140673E-16   195.128       195.128    
  14  0.599271     -0.512041     -0.345537E-16  0.345537E-16   195.591       195.591    
  15  0.577280     -0.549428     -0.370767E-16  0.370767E-16   195.809       195.809    
  16  0.451033     -0.796214     -0.537304E-16  0.537304E-16   195.941       195.941    
  17  0.168928E-01  -4.08087     -0.275386E-15  0.275386E-15   196.611       196.611    
  18  0.486421     -0.720680     -0.486332E-16  0.486332E-16   196.808       196.808    
  19  0.888812     -0.117870     -0.795415E-17  0.795415E-17   197.184       197.184    
  20  0.477810     -0.738541     -0.498385E-16  0.498385E-16   197.603       197.603    
  21  0.804328     -0.217748     -0.146942E-16  0.146942E-16   197.710       197.710    
  22  0.864857     -0.145191     -0.979781E-17  0.979781E-17   197.742       197.742    
  23  0.908691     -0.957496E-01 -0.646141E-17  0.646141E-17   197.904       197.904    
  24  0.890736     -0.115707     -0.780817E-17  0.780817E-17   198.488       198.488    
  25  0.218118E-01  -3.82530     -0.258141E-15  0.258141E-15   199.726       199.726    
  26  0.146688      -1.91944     -0.129529E-15  0.129529E-15   201.382       201.382    
  27  0.484981     -0.723645     -0.488333E-16  0.488333E-16   201.471       201.471    
  28  0.555788     -0.587369     -0.396370E-16  0.396370E-16   202.706       202.706    
  29  0.817241     -0.201821     -0.136194E-16  0.136194E-16   203.055       203.055    
  30  0.292551      -1.22912     -0.829437E-16  0.829437E-16   204.171       204.171    
  31  0.840538     -0.173713     -0.117226E-16  0.117226E-16   204.213       204.213    
  32  0.345115      -1.06388     -0.717930E-16  0.717930E-16   204.441       204.441    
  33  0.165893      -1.79641     -0.121226E-15  0.121226E-15   204.446       204.446    
  34  0.374801     -0.981360     -0.662245E-16  0.662245E-16   204.595       204.595    
  35  0.253409      -1.37275     -0.926366E-16  0.926366E-16   204.760       204.760    
  36  0.138166      -1.97930     -0.133568E-15  0.133568E-15   206.414       206.414    
  37  0.613915     -0.487899     -0.329245E-16  0.329245E-16   206.471       206.471    
  38  0.110533      -2.20244     -0.148626E-15  0.148626E-15   206.556       206.556    
  39  0.637535     -0.450147     -0.303770E-16  0.303770E-16   207.724       207.724    
  40  0.348108      -1.05524     -0.712102E-16  0.712102E-16   207.841       207.841    
  41  0.608362     -0.496985     -0.335377E-16  0.335377E-16   208.538       208.538    
  42  0.979603     -0.206076E-01 -0.139065E-17  0.139065E-17   209.163       209.163    
  43  0.819168     -0.199466     -0.134605E-16  0.134605E-16   209.889       209.889    
  44  0.459105     -0.778476     -0.525334E-16  0.525334E-16   210.275       210.275    
  45  0.220895      -1.51007     -0.101903E-15  0.101903E-15   210.391       210.391    
  46  0.179533      -1.71739     -0.115894E-15  0.115894E-15   210.633       210.633    
  47  0.354213      -1.03786     -0.700371E-16  0.700371E-16   210.711       210.711    
  48  0.452698     -0.792531     -0.534818E-16  0.534818E-16   210.860       210.860    
  49  0.471349     -0.752157     -0.507573E-16  0.507573E-16   211.316       211.316    
  50  0.667096     -0.404821     -0.273183E-16  0.273183E-16   212.098       212.098    
  51  0.660183     -0.415239     -0.280213E-16  0.280213E-16   212.314       212.314    
  52  0.594200     -0.520539     -0.351272E-16  0.351272E-16   212.788       212.788    
  53  0.948624     -0.527424E-01 -0.355918E-17  0.355918E-17   212.820       212.820    
  54  0.979229     -0.209900E-01 -0.141646E-17  0.141646E-17   213.685       213.685    
  55  0.299108E-01  -3.50954     -0.236832E-15  0.236832E-15   213.829       213.829    
  56  0.953849     -0.472501E-01 -0.318855E-17  0.318855E-17   214.409       214.409    
  57  0.516036     -0.661579     -0.446449E-16  0.446449E-16   214.759       214.759    
  58  0.897012     -0.108686     -0.733442E-17  0.733442E-17   215.071       215.071    
  59  0.415155     -0.879103     -0.593240E-16  0.593240E-16   215.164       215.164    
  60  0.405923     -0.901591     -0.608415E-16  0.608415E-16   215.655       215.655    
  61  0.624815E-03  -7.37806     -0.497889E-15  0.497889E-15   192.901       192.901    
loop,thermsimp(1:2)       26  0.950381E-17  0.897880E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    332              209.74          0.80          0.47         20.31
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    209.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       26
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       27
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      331
neval,tstepnext:      331     331

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.430148     -0.843625     -0.569298E-16  0.569298E-16   184.352       184.352    
   2  0.980657     -0.195321E-01 -0.131807E-17  0.131807E-17   192.054       192.054    
   3  0.110536      -2.20241     -0.148624E-15  0.148624E-15   192.343       192.343    
   4  0.973118     -0.272503E-01 -0.183891E-17  0.183891E-17   192.782       192.782    
   5  0.738729     -0.302824     -0.204353E-16  0.204353E-16   192.901       192.901    
   6  0.247218      -1.39749     -0.943057E-16  0.943057E-16   193.810       193.810    
   7  0.254436      -1.36871     -0.923635E-16  0.923635E-16   194.053       194.053    
   8  0.972818     -0.275582E-01 -0.185969E-17  0.185969E-17   194.406       194.406    
   9  0.512991     -0.667497     -0.450443E-16  0.450443E-16   194.449       194.449    
  10  0.575375     -0.552734     -0.372998E-16  0.372998E-16   194.870       194.870    
  11  0.316494      -1.15045     -0.776352E-16  0.776352E-16   195.002       195.002    
  12  0.681242E-01  -2.68642     -0.181286E-15  0.181286E-15   195.010       195.010    
  13  0.411061     -0.889013     -0.599927E-16  0.599927E-16   195.025       195.025    
  14  0.843709     -0.169948     -0.114685E-16  0.114685E-16   195.128       195.128    
  15  0.128103      -2.05492     -0.138671E-15  0.138671E-15   195.591       195.591    
  16  0.811978     -0.208282     -0.140554E-16  0.140554E-16   195.809       195.809    
  17  0.985816     -0.142856E-01 -0.964023E-18  0.964023E-18   195.941       195.941    
  18  0.506443E-01  -2.98293     -0.201295E-15  0.201295E-15   196.611       196.611    
  19  0.841309     -0.172796     -0.116607E-16  0.116607E-16   196.808       196.808    
  20  0.993094     -0.693039E-02 -0.467679E-18  0.467679E-18   197.184       197.184    
  21  0.179868      -1.71553     -0.115768E-15  0.115768E-15   197.603       197.603    
  22  0.913027E-01  -2.39357     -0.161524E-15  0.161524E-15   197.710       197.710    
  23  0.716131E-01  -2.63648     -0.177916E-15  0.177916E-15   197.742       197.742    
  24  0.335305      -1.09272     -0.737390E-16  0.737390E-16   197.904       197.904    
  25  0.713194     -0.338001     -0.228091E-16  0.228091E-16   198.488       198.488    
  26  0.965176     -0.354443E-01 -0.239187E-17  0.239187E-17   199.726       199.726    
  27  0.998966     -0.103470E-02 -0.698238E-19  0.698238E-19   201.382       201.382    
  28  0.383401     -0.958673     -0.646935E-16  0.646935E-16   201.471       201.471    
  29  0.397823     -0.921748     -0.622018E-16  0.622018E-16   202.706       202.706    
  30  0.692228     -0.367840     -0.248227E-16  0.248227E-16   203.055       203.055    
  31  0.696942     -0.361053     -0.243647E-16  0.243647E-16   204.171       204.171    
  32  0.270977      -1.30572     -0.881131E-16  0.881131E-16   204.213       204.213    
  33  0.229526      -1.47174     -0.993164E-16  0.993164E-16   204.441       204.441    
  34  0.940554     -0.612863E-01 -0.413574E-17  0.413574E-17   204.446       204.446    
  35  0.775356     -0.254433     -0.171697E-16  0.171697E-16   204.595       204.595    
  36  0.133411      -2.01432     -0.135931E-15  0.135931E-15   204.760       204.760    
  37  0.944275     -0.573376E-01 -0.386928E-17  0.386928E-17   206.414       206.414    
  38  0.828857     -0.187708     -0.126670E-16  0.126670E-16   206.471       206.471    
  39  0.302053      -1.19715     -0.807867E-16  0.807867E-16   206.556       206.556    
  40  0.948967     -0.523817E-01 -0.353484E-17  0.353484E-17   207.724       207.724    
  41  0.410470     -0.890453     -0.600899E-16  0.600899E-16   207.841       207.841    
  42  0.843978     -0.169629     -0.114470E-16  0.114470E-16   208.538       208.538    
  43  0.772105     -0.258635     -0.174533E-16  0.174533E-16   209.163       209.163    
  44  0.226828E-01  -3.78615     -0.255498E-15  0.255498E-15   209.889       209.889    
  45  0.929409     -0.732066E-01 -0.494016E-17  0.494016E-17   210.275       210.275    
  46  0.691239     -0.369270     -0.249192E-16  0.249192E-16   210.391       210.391    
  47  0.513091     -0.667303     -0.450312E-16  0.450312E-16   210.633       210.633    
  48  0.870029     -0.139229     -0.939547E-17  0.939547E-17   210.711       210.711    
  49  0.990308     -0.973884E-02 -0.657200E-18  0.657200E-18   210.860       210.860    
  50  0.561498E-02  -5.18232     -0.349715E-15  0.349715E-15   211.316       211.316    
  51  0.412342     -0.885902     -0.597828E-16  0.597828E-16   212.098       212.098    
  52  0.502805     -0.687553     -0.463977E-16  0.463977E-16   212.314       212.314    
  53  0.175561      -1.73977     -0.117404E-15  0.117404E-15   212.788       212.788    
  54  0.629914     -0.462172     -0.311885E-16  0.311885E-16   212.820       212.820    
  55  0.514353     -0.664846     -0.448654E-16  0.448654E-16   213.685       213.685    
  56  0.748055     -0.290279     -0.195887E-16  0.195887E-16   213.829       213.829    
  57  0.274345      -1.29337     -0.872795E-16  0.872795E-16   214.409       214.409    
  58  0.181114      -1.70863     -0.115302E-15  0.115302E-15   214.759       214.759    
  59  0.943669     -0.579796E-01 -0.391260E-17  0.391260E-17   215.071       215.071    
  60  0.642812     -0.441902     -0.298206E-16  0.298206E-16   215.164       215.164    
  61  0.579759     -0.545144     -0.367876E-16  0.367876E-16   209.738       209.738    
loop,thermsimp(1:2)       27  0.569298E-16  0.131807E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    333              191.78          0.80          0.47         20.36
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    191.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       27
neval is:      332
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.674824E-16           331
loop is:       28
neval is:      332


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.134965E-16           341

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      332     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.907419E-02  -4.70232     -0.634647E-16  0.634647E-16   184.352       184.352    
   2  0.918060     -0.854922E-01 -0.115384E-17  0.115384E-17   192.054       192.054    
   3  0.937744     -0.642786E-01 -0.867534E-18  0.867534E-18   192.343       192.343    
   4  0.247338E-01  -3.69959     -0.499314E-16  0.499314E-16   192.782       192.782    
   5  0.413042     -0.884205     -0.119337E-16  0.119337E-16   192.901       192.901    
   6  0.819135     -0.199506     -0.269263E-17  0.269263E-17   193.810       193.810    
   7  0.228227      -1.47742     -0.199399E-16  0.199399E-16   194.053       194.053    
   8  0.248364      -1.39286     -0.187987E-16  0.187987E-16   194.406       194.406    
   9  0.935042     -0.671640E-01 -0.906477E-18  0.906477E-18   194.449       194.449    
  10  0.858198     -0.152921     -0.206389E-17  0.206389E-17   194.870       194.870    
  11  0.258419      -1.35317     -0.182631E-16  0.182631E-16   195.002       195.002    
  12  0.324107      -1.12668     -0.152062E-16  0.152062E-16   195.010       195.010    
  13  0.896118     -0.109683     -0.148033E-17  0.148033E-17   195.025       195.025    
  14  0.622492     -0.474024     -0.639765E-17  0.639765E-17   195.128       195.128    
  15  0.689682     -0.371524     -0.501427E-17  0.501427E-17   195.591       195.591    
  16  0.575734     -0.552109     -0.745152E-17  0.745152E-17   195.809       195.809    
  17  0.814674     -0.204968     -0.276634E-17  0.276634E-17   195.941       195.941    
  18  0.728211     -0.317164     -0.428060E-17  0.428060E-17   196.611       196.611    
  19  0.373706     -0.984286     -0.132844E-16  0.132844E-16   196.808       196.808    
  20  0.602103     -0.507326     -0.684711E-17  0.684711E-17   197.184       197.184    
  21  0.947689     -0.537293E-01 -0.725157E-18  0.725157E-18   197.603       197.603    
  22  0.424134E-01  -3.16029     -0.426528E-16  0.426528E-16   197.710       197.710    
  23  0.401137     -0.913452     -0.123284E-16  0.123284E-16   197.742       197.742    
  24  0.676088     -0.391433     -0.528296E-17  0.528296E-17   197.904       197.904    
  25  0.504108     -0.684964     -0.924460E-17  0.924460E-17   198.488       198.488    
  26  0.502997     -0.687172     -0.927439E-17  0.927439E-17   199.726       199.726    
  27  0.802653     -0.219832     -0.296696E-17  0.296696E-17   201.382       201.382    
  28  0.993668     -0.635247E-02 -0.857359E-19  0.857359E-19   201.471       201.471    
  29  0.875701     -0.132731     -0.179139E-17  0.179139E-17   202.706       202.706    
  30  0.619695     -0.478528     -0.645844E-17  0.645844E-17   203.055       203.055    
  31  0.441954     -0.816549     -0.110205E-16  0.110205E-16   204.171       204.171    
  32  0.580185     -0.544409     -0.734760E-17  0.734760E-17   204.213       204.213    
  33  0.826527     -0.190523     -0.257139E-17  0.257139E-17   204.441       204.441    
  34  0.896292     -0.109489     -0.147771E-17  0.147771E-17   204.446       204.446    
  35  0.168694      -1.77967     -0.240193E-16  0.240193E-16   204.595       204.595    
  36  0.150396      -1.89448     -0.255688E-16  0.255688E-16   204.760       204.760    
  37  0.848381     -0.164425     -0.221916E-17  0.221916E-17   206.414       206.414    
  38  0.475208E-01  -3.04659     -0.411182E-16  0.411182E-16   206.471       206.471    
  39  0.988295E-01  -2.31436     -0.312357E-16  0.312357E-16   206.556       206.556    
  40  0.534220     -0.626948     -0.846159E-17  0.846159E-17   207.724       207.724    
  41  0.706691     -0.347161     -0.468545E-17  0.468545E-17   207.841       207.841    
  42  0.367643E-01  -3.30323     -0.445819E-16  0.445819E-16   208.538       208.538    
  43  0.495947     -0.701285     -0.946488E-17  0.946488E-17   209.163       209.163    
  44  0.328997      -1.11171     -0.150041E-16  0.150041E-16   209.738       209.738    
  45  0.688815E-01  -2.67537     -0.361080E-16  0.361080E-16   209.889       209.889    
  46  0.819393     -0.199192     -0.268839E-17  0.268839E-17   210.275       210.275    
  47  0.595344     -0.518615     -0.699948E-17  0.699948E-17   210.391       210.391    
  48  0.753910     -0.282482     -0.381251E-17  0.381251E-17   210.633       210.633    
  49  0.931670     -0.707769E-01 -0.955238E-18  0.955238E-18   210.711       210.711    
  50  0.793733     -0.231009     -0.311780E-17  0.311780E-17   210.860       210.860    
  51  0.281211      -1.26865     -0.171223E-16  0.171223E-16   211.316       211.316    
  52  0.248959      -1.39047     -0.187664E-16  0.187664E-16   212.098       212.098    
  53  0.856999     -0.154319     -0.208276E-17  0.208276E-17   212.314       212.314    
  54  0.563224     -0.574078     -0.774802E-17  0.774802E-17   212.788       212.788    
  55  0.383536     -0.958321     -0.129340E-16  0.129340E-16   212.820       212.820    
  56  0.453585     -0.790572     -0.106699E-16  0.106699E-16   213.685       213.685    
  57  0.749769     -0.287990     -0.388685E-17  0.388685E-17   213.829       213.829    
  58  0.819741     -0.198766     -0.268264E-17  0.268264E-17   214.409       214.409    
  59  0.499015     -0.695118     -0.938165E-17  0.938165E-17   214.759       214.759    
  60  0.528038E-02  -5.24376     -0.707722E-16  0.707722E-16   215.071       215.071    
  61  0.814645     -0.205002     -0.276681E-17  0.276681E-17   191.777       191.777    
loop,thermsimp(1:2)       28  0.634647E-16  0.115384E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    334              197.58          0.80          0.47         20.30
Just calling func    0   0         22.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       28
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       29
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      333     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.185946      -1.68230     -0.227051E-16  0.227051E-16   184.352       184.352    
   2  0.598164     -0.513890     -0.693570E-17  0.693570E-17   191.777       191.777    
   3  0.935578     -0.665913E-01 -0.898747E-18  0.898747E-18   192.054       192.054    
   4  0.974499     -0.258321E-01 -0.348642E-18  0.348642E-18   192.343       192.343    
   5  0.484876     -0.723862     -0.976959E-17  0.976959E-17   192.782       192.782    
   6  0.637756     -0.449799     -0.607070E-17  0.607070E-17   192.901       192.901    
   7  0.709283     -0.343501     -0.463605E-17  0.463605E-17   193.810       193.810    
   8  0.881597     -0.126020     -0.170082E-17  0.170082E-17   194.053       194.053    
   9  0.509086     -0.675138     -0.911197E-17  0.911197E-17   194.406       194.406    
  10  0.444638     -0.810494     -0.109388E-16  0.109388E-16   194.449       194.449    
  11  0.471677E-01  -3.05405     -0.412188E-16  0.412188E-16   194.870       194.870    
  12  0.671049     -0.398914     -0.538393E-17  0.538393E-17   195.002       195.002    
  13  0.651833     -0.427967     -0.577604E-17  0.577604E-17   195.010       195.010    
  14  0.112210      -2.18738     -0.295219E-16  0.295219E-16   195.025       195.025    
  15  0.191924      -1.65066     -0.222781E-16  0.222781E-16   195.128       195.128    
  16  0.698186     -0.359270     -0.484887E-17  0.484887E-17   195.591       195.591    
  17  0.258943      -1.35115     -0.182357E-16  0.182357E-16   195.809       195.809    
  18  0.285306      -1.25419     -0.169272E-16  0.169272E-16   195.941       195.941    
  19  0.178900      -1.72093     -0.232265E-16  0.232265E-16   196.611       196.611    
  20  0.420392     -0.866567     -0.116956E-16  0.116956E-16   196.808       196.808    
  21  0.527276E-01  -2.94262     -0.397149E-16  0.397149E-16   197.184       197.184    
  22  0.293061      -1.22737     -0.165652E-16  0.165652E-16   197.603       197.603    
  23  0.800482     -0.222541     -0.300351E-17  0.300351E-17   197.710       197.710    
  24  0.140966      -1.95924     -0.264428E-16  0.264428E-16   197.742       197.742    
  25  0.465093     -0.765518     -0.103318E-16  0.103318E-16   197.904       197.904    
  26  0.623294     -0.472737     -0.638028E-17  0.638028E-17   198.488       198.488    
  27  0.747256     -0.291347     -0.393216E-17  0.393216E-17   199.726       199.726    
  28  0.867183E-01  -2.44509     -0.330001E-16  0.330001E-16   201.382       201.382    
  29  0.284575      -1.25676     -0.169618E-16  0.169618E-16   201.471       201.471    
  30  0.951287     -0.499397E-01 -0.674010E-18  0.674010E-18   202.706       202.706    
  31  0.453902     -0.789874     -0.106605E-16  0.106605E-16   203.055       203.055    
  32  0.899965E-01  -2.40798     -0.324993E-16  0.324993E-16   204.171       204.171    
  33  0.381241     -0.964322     -0.130150E-16  0.130150E-16   204.213       204.213    
  34  0.234612      -1.44982     -0.195675E-16  0.195675E-16   204.441       204.441    
  35  0.261732E-01  -3.64302     -0.491679E-16  0.491679E-16   204.446       204.446    
  36  0.279010      -1.27651     -0.172283E-16  0.172283E-16   204.595       204.595    
  37  0.898608     -0.106908     -0.144288E-17  0.144288E-17   204.760       204.760    
  38  0.191575      -1.65247     -0.223026E-16  0.223026E-16   206.414       206.414    
  39  0.866237     -0.143597     -0.193805E-17  0.193805E-17   206.471       206.471    
  40  0.763709     -0.269568     -0.363822E-17  0.363822E-17   206.556       206.556    
  41  0.554165     -0.590293     -0.796687E-17  0.796687E-17   207.724       207.724    
  42  0.189603      -1.66282     -0.224422E-16  0.224422E-16   207.841       207.841    
  43  0.660319     -0.415032     -0.560146E-17  0.560146E-17   208.538       208.538    
  44  0.908325     -0.961534E-01 -0.129773E-17  0.129773E-17   209.163       209.163    
  45  0.309928      -1.17142     -0.158100E-16  0.158100E-16   209.738       209.738    
  46  0.428160     -0.848257     -0.114485E-16  0.114485E-16   209.889       209.889    
  47  0.490124     -0.713096     -0.962428E-17  0.962428E-17   210.275       210.275    
  48  0.645646     -0.437504     -0.590476E-17  0.590476E-17   210.391       210.391    
  49  0.314702      -1.15613     -0.156037E-16  0.156037E-16   210.633       210.633    
  50  0.248884E-01  -3.69335     -0.498473E-16  0.498473E-16   210.711       210.711    
  51  0.367463      -1.00113     -0.135118E-16  0.135118E-16   210.860       210.860    
  52  0.921780     -0.814485E-01 -0.109927E-17  0.109927E-17   211.316       211.316    
  53  0.934320     -0.679358E-01 -0.916894E-18  0.916894E-18   212.098       212.098    
  54  0.582725     -0.540039     -0.728862E-17  0.728862E-17   212.314       212.314    
  55  0.918873     -0.846078E-01 -0.114191E-17  0.114191E-17   212.788       212.788    
  56  0.582340     -0.540700     -0.729755E-17  0.729755E-17   212.820       212.820    
  57  0.517647     -0.658463     -0.888692E-17  0.888692E-17   213.685       213.685    
  58  0.385965     -0.952009     -0.128488E-16  0.128488E-16   213.829       213.829    
  59  0.737941     -0.303891     -0.410146E-17  0.410146E-17   214.409       214.409    
  60  0.384940     -0.954669     -0.128847E-16  0.128847E-16   214.759       214.759    
  61  0.469877     -0.755284     -0.101937E-16  0.101937E-16   197.581       197.581    
loop,thermsimp(1:2)       29  0.227051E-16  0.693570E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    335              183.39          0.79          0.47         20.35
Just calling func    0   0         22.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    336              183.43          0.77          0.46         20.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    183.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       29
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       30
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      335     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.377093     -0.975265     -0.131626E-16  0.131626E-16   184.352       184.352    
   2  0.235534      -1.44590     -0.195146E-16  0.195146E-16   191.777       191.777    
   3  0.813567     -0.206327     -0.278468E-17  0.278468E-17   192.054       192.054    
   4  0.548074     -0.601345     -0.811604E-17  0.811604E-17   192.343       192.343    
   5  0.210138      -1.55999     -0.210544E-16  0.210544E-16   192.782       192.782    
   6  0.467199     -0.761001     -0.102708E-16  0.102708E-16   192.901       192.901    
   7  0.221273      -1.50836     -0.203575E-16  0.203575E-16   193.810       193.810    
   8  0.379741     -0.968266     -0.130682E-16  0.130682E-16   194.053       194.053    
   9  0.983919     -0.162113E-01 -0.218795E-18  0.218795E-18   194.406       194.406    
  10  0.359354      -1.02345     -0.138129E-16  0.138129E-16   194.449       194.449    
  11  0.447299     -0.804528     -0.108583E-16  0.108583E-16   194.870       194.870    
  12  0.405301E-01  -3.20571     -0.432658E-16  0.432658E-16   195.002       195.002    
  13  0.321600      -1.13445     -0.153110E-16  0.153110E-16   195.010       195.010    
  14  0.207964      -1.57039     -0.211947E-16  0.211947E-16   195.025       195.025    
  15  0.617793     -0.481601     -0.649992E-17  0.649992E-17   195.128       195.128    
  16  0.378822     -0.970689     -0.131009E-16  0.131009E-16   195.591       195.591    
  17  0.173523      -1.75144     -0.236383E-16  0.236383E-16   195.809       195.809    
  18  0.232062      -1.46075     -0.197150E-16  0.197150E-16   195.941       195.941    
  19  0.162519      -1.81696     -0.245226E-16  0.245226E-16   196.611       196.611    
  20  0.247355      -1.39693     -0.188537E-16  0.188537E-16   196.808       196.808    
  21  0.488568E-01  -3.01886     -0.407440E-16  0.407440E-16   197.184       197.184    
  22  0.712078E-01  -2.64215     -0.356597E-16  0.356597E-16   197.581       197.581    
  23  0.961996     -0.387449E-01 -0.522920E-18  0.522920E-18   197.603       197.603    
  24  0.530152     -0.634592     -0.856475E-17  0.856475E-17   197.710       197.710    
  25  0.803209     -0.219141     -0.295763E-17  0.295763E-17   197.742       197.742    
  26  0.140888      -1.95979     -0.264502E-16  0.264502E-16   197.904       197.904    
  27  0.503338     -0.686494     -0.926524E-17  0.926524E-17   198.488       198.488    
  28  0.665517     -0.407192     -0.549565E-17  0.549565E-17   199.726       199.726    
  29  0.918849     -0.846336E-01 -0.114226E-17  0.114226E-17   201.382       201.382    
  30  0.473327     -0.747968     -0.100949E-16  0.100949E-16   201.471       201.471    
  31  0.111776      -2.19126     -0.295743E-16  0.295743E-16   202.706       202.706    
  32  0.888841     -0.117837     -0.159039E-17  0.159039E-17   203.055       203.055    
  33  0.390287     -0.940872     -0.126985E-16  0.126985E-16   204.171       204.171    
  34  0.343964      -1.06722     -0.144037E-16  0.144037E-16   204.213       204.213    
  35  0.362309      -1.01526     -0.137024E-16  0.137024E-16   204.441       204.441    
  36  0.275770      -1.28819     -0.173860E-16  0.173860E-16   204.446       204.446    
  37  0.249474      -1.38840     -0.187385E-16  0.187385E-16   204.595       204.595    
  38  0.760377     -0.273941     -0.369724E-17  0.369724E-17   204.760       204.760    
  39  0.701603     -0.354388     -0.478299E-17  0.478299E-17   206.414       206.414    
  40  0.863509     -0.146751     -0.198062E-17  0.198062E-17   206.471       206.471    
  41  0.839263E-01  -2.47782     -0.334418E-16  0.334418E-16   206.556       206.556    
  42  0.942302     -0.594290E-01 -0.802081E-18  0.802081E-18   207.724       207.724    
  43  0.170903E-01  -4.06924     -0.549204E-16  0.549204E-16   207.841       207.841    
  44  0.122952      -2.09596     -0.282881E-16  0.282881E-16   208.538       208.538    
  45  0.110315      -2.20441     -0.297518E-16  0.297518E-16   209.163       209.163    
  46  0.317810E-01  -3.44889     -0.465478E-16  0.465478E-16   209.738       209.738    
  47  0.671614E-01  -2.70066     -0.364493E-16  0.364493E-16   209.889       209.889    
  48  0.603561     -0.504909     -0.681448E-17  0.681448E-17   210.275       210.275    
  49  0.228144      -1.47778     -0.199448E-16  0.199448E-16   210.391       210.391    
  50  0.743743     -0.296060     -0.399577E-17  0.399577E-17   210.633       210.633    
  51  0.113586      -2.17519     -0.293574E-16  0.293574E-16   210.711       210.711    
  52  0.639121     -0.447661     -0.604185E-17  0.604185E-17   210.860       210.860    
  53  0.356863      -1.03040     -0.139068E-16  0.139068E-16   211.316       211.316    
  54  0.713720     -0.337264     -0.455188E-17  0.455188E-17   212.098       212.098    
  55  0.753536E-01  -2.58556     -0.348960E-16  0.348960E-16   212.314       212.314    
  56  0.665004     -0.407962     -0.550605E-17  0.550605E-17   212.788       212.788    
  57  0.818836     -0.199872     -0.269757E-17  0.269757E-17   212.820       212.820    
  58  0.438400     -0.824624     -0.111295E-16  0.111295E-16   213.685       213.685    
  59  0.814001     -0.205794     -0.277749E-17  0.277749E-17   213.829       213.829    
  60  0.319806      -1.14004     -0.153865E-16  0.153865E-16   214.409       214.409    
  61  0.288022      -1.24472     -0.167993E-16  0.167993E-16   183.388       183.388    
loop,thermsimp(1:2)       30  0.131626E-16  0.195146E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    337              203.75          0.80          0.47         20.20
Just calling func    0   0         22.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    203.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       30
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       31
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      336     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.528149     -0.638377     -0.861584E-17  0.861584E-17   183.388       183.388    
   2  0.100667      -2.29594     -0.309871E-16  0.309871E-16   184.352       184.352    
   3  0.187902      -1.67184     -0.225639E-16  0.225639E-16   191.777       191.777    
   4  0.922926E-01  -2.38279     -0.321593E-16  0.321593E-16   192.054       192.054    
   5  0.616863     -0.483108     -0.652026E-17  0.652026E-17   192.343       192.343    
   6  0.414737E-01  -3.18270     -0.429552E-16  0.429552E-16   192.782       192.782    
   7  0.832341     -0.183513     -0.247677E-17  0.247677E-17   192.901       192.901    
   8  0.315977      -1.15209     -0.155491E-16  0.155491E-16   193.810       193.810    
   9  0.857403     -0.153847     -0.207639E-17  0.207639E-17   194.053       194.053    
  10  0.347637E-01  -3.35918     -0.453371E-16  0.453371E-16   194.406       194.406    
  11  0.694971     -0.363885     -0.491117E-17  0.491117E-17   194.449       194.449    
  12  0.189797      -1.66180     -0.224284E-16  0.224284E-16   194.870       194.870    
  13  0.654101     -0.424494     -0.572917E-17  0.572917E-17   195.002       195.002    
  14  0.431024     -0.841592     -0.113585E-16  0.113585E-16   195.010       195.010    
  15  0.869507     -0.139829     -0.188719E-17  0.188719E-17   195.025       195.025    
  16  0.381868     -0.962679     -0.129928E-16  0.129928E-16   195.128       195.128    
  17  0.115496      -2.15852     -0.291325E-16  0.291325E-16   195.591       195.591    
  18  0.906890E-03  -7.00549     -0.945494E-16  0.945494E-16   195.809       195.809    
  19  0.733476     -0.309960     -0.418337E-17  0.418337E-17   195.941       195.941    
  20  0.183143      -1.69749     -0.229101E-16  0.229101E-16   196.611       196.611    
  21  0.518251     -0.657295     -0.887116E-17  0.887116E-17   196.808       196.808    
  22  0.638621E-02  -5.05361     -0.682060E-16  0.682060E-16   197.184       197.184    
  23  0.622935     -0.473313     -0.638806E-17  0.638806E-17   197.581       197.581    
  24  0.388553     -0.945327     -0.127586E-16  0.127586E-16   197.603       197.603    
  25  0.153040      -1.87706     -0.253337E-16  0.253337E-16   197.710       197.710    
  26  0.532893     -0.629434     -0.849514E-17  0.849514E-17   197.742       197.742    
  27  0.780982     -0.247203     -0.333637E-17  0.333637E-17   197.904       197.904    
  28  0.933408     -0.689133E-01 -0.930087E-18  0.930087E-18   198.488       198.488    
  29  0.487681     -0.718094     -0.969173E-17  0.969173E-17   199.726       199.726    
  30  0.878419E-02  -4.73480     -0.639031E-16  0.639031E-16   201.382       201.382    
  31  0.459095     -0.778497     -0.105070E-16  0.105070E-16   201.471       201.471    
  32  0.513417     -0.666666     -0.899764E-17  0.899764E-17   202.706       202.706    
  33  0.778078     -0.250928     -0.338664E-17  0.338664E-17   203.055       203.055    
  34  0.882292     -0.125233     -0.169020E-17  0.169020E-17   204.171       204.171    
  35  0.606561     -0.499950     -0.674755E-17  0.674755E-17   204.213       204.213    
  36  0.685250     -0.377972     -0.510129E-17  0.510129E-17   204.441       204.441    
  37  0.882535     -0.124956     -0.168647E-17  0.168647E-17   204.446       204.446    
  38  0.638714E-01  -2.75088     -0.371272E-16  0.371272E-16   204.595       204.595    
  39  0.245511      -1.40441     -0.189546E-16  0.189546E-16   204.760       204.760    
  40  0.489166     -0.715053     -0.965069E-17  0.965069E-17   206.414       206.414    
  41  0.566678     -0.567964     -0.766551E-17  0.766551E-17   206.471       206.471    
  42  0.782180     -0.245670     -0.331568E-17  0.331568E-17   206.556       206.556    
  43  0.233528      -1.45445     -0.196300E-16  0.196300E-16   207.724       207.724    
  44  0.256469E-01  -3.66333     -0.494421E-16  0.494421E-16   207.841       207.841    
  45  0.947445     -0.539862E-01 -0.728623E-18  0.728623E-18   208.538       208.538    
  46  0.402593     -0.909830     -0.122795E-16  0.122795E-16   209.163       209.163    
  47  0.288804      -1.24201     -0.167627E-16  0.167627E-16   209.738       209.738    
  48  0.232285      -1.45979     -0.197020E-16  0.197020E-16   209.889       209.889    
  49  0.754779     -0.281330     -0.379696E-17  0.379696E-17   210.275       210.275    
  50  0.507021     -0.679202     -0.916683E-17  0.916683E-17   210.391       210.391    
  51  0.839338     -0.175141     -0.236379E-17  0.236379E-17   210.633       210.633    
  52  0.659700     -0.415970     -0.561412E-17  0.561412E-17   210.711       210.711    
  53  0.685236     -0.377992     -0.510156E-17  0.510156E-17   210.860       210.860    
  54  0.995388     -0.462260E-02 -0.623888E-19  0.623888E-19   211.316       211.316    
  55  0.656013     -0.421575     -0.568977E-17  0.568977E-17   212.098       212.098    
  56  0.374617     -0.981851     -0.132515E-16  0.132515E-16   212.314       212.314    
  57  0.232435      -1.45915     -0.196933E-16  0.196933E-16   212.788       212.788    
  58  0.993489     -0.653255E-02 -0.881663E-19  0.881663E-19   212.820       212.820    
  59  0.392270     -0.935806     -0.126301E-16  0.126301E-16   213.685       213.685    
  60  0.885868     -0.121188     -0.163561E-17  0.163561E-17   213.829       213.829    
  61  0.395014     -0.928834     -0.125360E-16  0.125360E-16   203.753       203.753    
loop,thermsimp(1:2)       31  0.861584E-17  0.309871E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    338              196.34          0.79          0.47         20.37
Just calling func    0   0         22.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       31
neval is:      337
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       32
neval is:      337


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      337     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611823E-01  -2.79390     -0.377078E-16  0.377078E-16   183.388       183.388    
   2  0.527988     -0.638681     -0.861994E-17  0.861994E-17   184.352       184.352    
   3  0.812775     -0.207301     -0.279783E-17  0.279783E-17   191.777       191.777    
   4  0.664791     -0.408282     -0.551037E-17  0.551037E-17   192.054       192.054    
   5  0.398024     -0.921243     -0.124335E-16  0.124335E-16   192.343       192.343    
   6  0.743393E-01  -2.59912     -0.350789E-16  0.350789E-16   192.782       192.782    
   7  0.240606      -1.42459     -0.192270E-16  0.192270E-16   192.901       192.901    
   8  0.401764     -0.911890     -0.123073E-16  0.123073E-16   193.810       193.810    
   9  0.470232     -0.754529     -0.101835E-16  0.101835E-16   194.053       194.053    
  10  0.254902E-01  -3.66946     -0.495248E-16  0.495248E-16   194.406       194.406    
  11  0.967688     -0.328456E-01 -0.443300E-18  0.443300E-18   194.449       194.449    
  12  0.393139     -0.933593     -0.126002E-16  0.126002E-16   194.870       194.870    
  13  0.343650      -1.06813     -0.144160E-16  0.144160E-16   195.002       195.002    
  14  0.228322      -1.47700     -0.199343E-16  0.199343E-16   195.010       195.010    
  15  0.853977E-01  -2.46044     -0.332072E-16  0.332072E-16   195.025       195.025    
  16  0.899127     -0.106331     -0.143510E-17  0.143510E-17   195.128       195.128    
  17  0.995981     -0.402688E-02 -0.543487E-19  0.543487E-19   195.591       195.591    
  18  0.451121     -0.796020     -0.107435E-16  0.107435E-16   195.809       195.809    
  19  0.646640     -0.435965     -0.588399E-17  0.588399E-17   195.941       195.941    
  20  0.551629     -0.594880     -0.802879E-17  0.802879E-17   196.611       196.611    
  21  0.372230     -0.988242     -0.133378E-16  0.133378E-16   196.808       196.808    
  22  0.799031E-02  -4.82953     -0.651816E-16  0.651816E-16   197.184       197.184    
  23  0.568175     -0.565326     -0.762990E-17  0.762990E-17   197.581       197.581    
  24  0.311937      -1.16495     -0.157228E-16  0.157228E-16   197.603       197.603    
  25  0.261635      -1.34081     -0.180961E-16  0.180961E-16   197.710       197.710    
  26  0.608323E-01  -2.79963     -0.377852E-16  0.377852E-16   197.742       197.742    
  27  0.261368      -1.34183     -0.181099E-16  0.181099E-16   197.904       197.904    
  28  0.922629     -0.805286E-01 -0.108685E-17  0.108685E-17   198.488       198.488    
  29  0.217510      -1.52551     -0.205890E-16  0.205890E-16   199.726       199.726    
  30  0.728473     -0.316805     -0.427575E-17  0.427575E-17   201.382       201.382    
  31  0.456964     -0.783151     -0.105698E-16  0.105698E-16   201.471       201.471    
  32  0.902599     -0.102477     -0.138308E-17  0.138308E-17   202.706       202.706    
  33  0.375663     -0.979063     -0.132139E-16  0.132139E-16   203.055       203.055    
  34  0.516379     -0.660914     -0.892001E-17  0.892001E-17   203.753       203.753    
  35  0.553493     -0.591505     -0.798324E-17  0.798324E-17   204.171       204.171    
  36  0.459421     -0.777789     -0.104974E-16  0.104974E-16   204.213       204.213    
  37  0.858541     -0.152520     -0.205849E-17  0.205849E-17   204.441       204.441    
  38  0.365546      -1.00636     -0.135823E-16  0.135823E-16   204.446       204.446    
  39  0.948824     -0.525315E-01 -0.708990E-18  0.708990E-18   204.595       204.595    
  40  0.981479     -0.186946E-01 -0.252311E-18  0.252311E-18   204.760       204.760    
  41  0.864846E-01  -2.44779     -0.330365E-16  0.330365E-16   206.414       206.414    
  42  0.789664     -0.236148     -0.318716E-17  0.318716E-17   206.471       206.471    
  43  0.143297      -1.94283     -0.262214E-16  0.262214E-16   206.556       206.556    
  44  0.438972     -0.823320     -0.111119E-16  0.111119E-16   207.724       207.724    
  45  0.745743     -0.293374     -0.395952E-17  0.395952E-17   207.841       207.841    
  46  0.671780     -0.397824     -0.536922E-17  0.536922E-17   208.538       208.538    
  47  0.592615     -0.523211     -0.706150E-17  0.706150E-17   209.163       209.163    
  48  0.689054E-01  -2.67502     -0.361033E-16  0.361033E-16   209.738       209.738    
  49  0.840713     -0.173505     -0.234170E-17  0.234170E-17   209.889       209.889    
  50  0.428840     -0.846670     -0.114271E-16  0.114271E-16   210.275       210.275    
  51  0.113781      -2.17348     -0.293343E-16  0.293343E-16   210.391       210.391    
  52  0.375756     -0.978816     -0.132106E-16  0.132106E-16   210.633       210.633    
  53  0.756137     -0.279532     -0.377270E-17  0.377270E-17   210.711       210.711    
  54  0.406122     -0.901102     -0.121617E-16  0.121617E-16   210.860       210.860    
  55  0.893144     -0.113008     -0.152520E-17  0.152520E-17   211.316       211.316    
  56  0.252351      -1.37693     -0.185837E-16  0.185837E-16   212.098       212.098    
  57  0.357197      -1.02947     -0.138942E-16  0.138942E-16   212.314       212.314    
  58  0.848004     -0.164870     -0.222516E-17  0.222516E-17   212.788       212.788    
  59  0.788513     -0.237606     -0.320684E-17  0.320684E-17   212.820       212.820    
  60  0.545227     -0.606554     -0.818634E-17  0.818634E-17   213.685       213.685    
  61  0.780638     -0.247644     -0.334232E-17  0.334232E-17   196.342       196.342    
loop,thermsimp(1:2)       32  0.377078E-16  0.861994E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    339              196.06          0.80          0.47         20.36
Just calling func    0   0         22.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       32
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       33
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      338     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.249229      -1.38938     -0.187518E-16  0.187518E-16   183.388       183.388    
   2  0.900708     -0.104575     -0.141139E-17  0.141139E-17   184.352       184.352    
   3  0.964345     -0.363060E-01 -0.490003E-18  0.490003E-18   191.777       191.777    
   4  0.532902     -0.629418     -0.849492E-17  0.849492E-17   192.054       192.054    
   5  0.725901E-01  -2.62293     -0.354003E-16  0.354003E-16   192.343       192.343    
   6  0.674437     -0.393877     -0.531595E-17  0.531595E-17   192.782       192.782    
   7  0.186890      -1.67724     -0.226368E-16  0.226368E-16   192.901       192.901    
   8  0.721653     -0.326210     -0.440269E-17  0.440269E-17   193.810       193.810    
   9  0.452365     -0.793266     -0.107063E-16  0.107063E-16   194.053       194.053    
  10  0.346700      -1.05930     -0.142968E-16  0.142968E-16   194.406       194.406    
  11  0.180165      -1.71388     -0.231314E-16  0.231314E-16   194.449       194.449    
  12  0.179360      -1.71836     -0.231918E-16  0.231918E-16   194.870       194.870    
  13  0.675340     -0.392539     -0.529789E-17  0.529789E-17   195.002       195.002    
  14  0.767893E-01  -2.56669     -0.346413E-16  0.346413E-16   195.010       195.010    
  15  0.983812     -0.163207E-01 -0.220272E-18  0.220272E-18   195.025       195.025    
  16  0.857942     -0.153219     -0.206792E-17  0.206792E-17   195.128       195.128    
  17  0.127402      -2.06041     -0.278082E-16  0.278082E-16   195.591       195.591    
  18  0.334543      -1.09499     -0.147785E-16  0.147785E-16   195.809       195.809    
  19  0.290839      -1.23498     -0.166679E-16  0.166679E-16   195.941       195.941    
  20  0.341966      -1.07304     -0.144823E-16  0.144823E-16   196.342       196.342    
  21  0.530480     -0.633973     -0.855640E-17  0.855640E-17   196.611       196.611    
  22  0.574837     -0.553669     -0.747258E-17  0.747258E-17   196.808       196.808    
  23  0.516835     -0.660032     -0.890811E-17  0.890811E-17   197.184       197.184    
  24  0.165406      -1.79935     -0.242849E-16  0.242849E-16   197.581       197.581    
  25  0.991635     -0.839982E-02 -0.113368E-18  0.113368E-18   197.603       197.603    
  26  0.784756     -0.242382     -0.327131E-17  0.327131E-17   197.710       197.710    
  27  0.873974     -0.134705     -0.181804E-17  0.181804E-17   197.742       197.742    
  28  0.236718      -1.44089     -0.194469E-16  0.194469E-16   197.904       197.904    
  29  0.740805     -0.300018     -0.404919E-17  0.404919E-17   198.488       198.488    
  30  0.637039     -0.450925     -0.608589E-17  0.608589E-17   199.726       199.726    
  31  0.810299     -0.210352     -0.283901E-17  0.283901E-17   201.382       201.382    
  32  0.926725E-01  -2.37868     -0.321038E-16  0.321038E-16   201.471       201.471    
  33  0.463977     -0.767921     -0.103642E-16  0.103642E-16   202.706       202.706    
  34  0.936504     -0.656017E-01 -0.885392E-18  0.885392E-18   203.055       203.055    
  35  0.595797     -0.517854     -0.698921E-17  0.698921E-17   203.753       203.753    
  36  0.737587     -0.304372     -0.410794E-17  0.410794E-17   204.171       204.171    
  37  0.149596      -1.89982     -0.256409E-16  0.256409E-16   204.213       204.213    
  38  0.480972     -0.731947     -0.987870E-17  0.987870E-17   204.441       204.441    
  39  0.162177      -1.81906     -0.245510E-16  0.245510E-16   204.446       204.446    
  40  0.538592     -0.618798     -0.835158E-17  0.835158E-17   204.595       204.595    
  41  0.995781     -0.422758E-02 -0.570575E-19  0.570575E-19   204.760       204.760    
  42  0.192053      -1.64998     -0.222690E-16  0.222690E-16   206.414       206.414    
  43  0.273379      -1.29690     -0.175035E-16  0.175035E-16   206.471       206.471    
  44  0.397087     -0.923600     -0.124653E-16  0.124653E-16   206.556       206.556    
  45  0.527168     -0.640237     -0.864094E-17  0.864094E-17   207.724       207.724    
  46  0.247591      -1.39598     -0.188408E-16  0.188408E-16   207.841       207.841    
  47  0.997746     -0.225694E-02 -0.304608E-19  0.304608E-19   208.538       208.538    
  48  0.267227      -1.31966     -0.178107E-16  0.178107E-16   209.163       209.163    
  49  0.548868     -0.599897     -0.809649E-17  0.809649E-17   209.738       209.738    
  50  0.905119     -0.996883E-01 -0.134544E-17  0.134544E-17   209.889       209.889    
  51  0.990775     -0.926802E-02 -0.125086E-18  0.125086E-18   210.275       210.275    
  52  0.994900     -0.511316E-02 -0.690097E-19  0.690097E-19   210.391       210.391    
  53  0.457828     -0.781263     -0.105443E-16  0.105443E-16   210.633       210.633    
  54  0.444399     -0.811031     -0.109461E-16  0.109461E-16   210.711       210.711    
  55  0.350476      -1.04846     -0.141506E-16  0.141506E-16   210.860       210.860    
  56  0.496459     -0.700254     -0.945097E-17  0.945097E-17   211.316       211.316    
  57  0.702173     -0.353576     -0.477202E-17  0.477202E-17   212.098       212.098    
  58  0.835633     -0.179566     -0.242351E-17  0.242351E-17   212.314       212.314    
  59  0.947955     -0.534478E-01 -0.721357E-18  0.721357E-18   212.788       212.788    
  60  0.166275      -1.79412     -0.242142E-16  0.242142E-16   212.820       212.820    
  61  0.696989E-01  -2.66357     -0.359488E-16  0.359488E-16   196.063       196.063    
loop,thermsimp(1:2)       33  0.187518E-16  0.141139E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    340              191.36          0.80          0.46         20.23
Just calling func    0   0         23.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    191.36
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       33
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       34
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      339     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382417     -0.961243     -0.129734E-16  0.129734E-16   183.388       183.388    
   2  0.130478      -2.03655     -0.274863E-16  0.274863E-16   184.352       184.352    
   3  0.828976     -0.187564     -0.253145E-17  0.253145E-17   191.777       191.777    
   4  0.634715     -0.454579     -0.613521E-17  0.613521E-17   192.054       192.054    
   5  0.152962      -1.87756     -0.253405E-16  0.253405E-16   192.343       192.343    
   6  0.770706     -0.260448     -0.351513E-17  0.351513E-17   192.782       192.782    
   7  0.913686     -0.902688E-01 -0.121831E-17  0.121831E-17   192.901       192.901    
   8  0.614003     -0.487755     -0.658298E-17  0.658298E-17   193.810       193.810    
   9  0.617787     -0.481612     -0.650006E-17  0.650006E-17   194.053       194.053    
  10  0.261849      -1.33999     -0.180851E-16  0.180851E-16   194.406       194.406    
  11  0.601534     -0.508273     -0.685989E-17  0.685989E-17   194.449       194.449    
  12  0.651506     -0.428469     -0.578282E-17  0.578282E-17   194.870       194.870    
  13  0.175228      -1.74167     -0.235064E-16  0.235064E-16   195.002       195.002    
  14  0.100012      -2.30246     -0.310751E-16  0.310751E-16   195.010       195.010    
  15  0.771209     -0.259796     -0.350633E-17  0.350633E-17   195.025       195.025    
  16  0.977255     -0.230077E-01 -0.310523E-18  0.310523E-18   195.128       195.128    
  17  0.344428      -1.06587     -0.143855E-16  0.143855E-16   195.591       195.591    
  18  0.642576E-01  -2.74486     -0.370459E-16  0.370459E-16   195.809       195.809    
  19  0.536556     -0.622585     -0.840270E-17  0.840270E-17   195.941       195.941    
  20  0.452749     -0.792417     -0.106948E-16  0.106948E-16   196.063       196.063    
  21  0.780215     -0.248185     -0.334963E-17  0.334963E-17   196.342       196.342    
  22  0.267564E-01  -3.62098     -0.488705E-16  0.488705E-16   196.611       196.611    
  23  0.983964     -0.161661E-01 -0.218185E-18  0.218185E-18   196.808       196.808    
  24  0.324361      -1.12590     -0.151957E-16  0.151957E-16   197.184       197.184    
  25  0.781599     -0.246414     -0.332572E-17  0.332572E-17   197.581       197.581    
  26  0.415425     -0.878453     -0.118560E-16  0.118560E-16   197.603       197.603    
  27  0.164856      -1.80268     -0.243298E-16  0.243298E-16   197.710       197.710    
  28  0.112155      -2.18787     -0.295286E-16  0.295286E-16   197.742       197.742    
  29  0.913690     -0.902635E-01 -0.121824E-17  0.121824E-17   197.904       197.904    
  30  0.885633     -0.121453     -0.163918E-17  0.163918E-17   198.488       198.488    
  31  0.575453     -0.552598     -0.745813E-17  0.745813E-17   199.726       199.726    
  32  0.349416      -1.05149     -0.141914E-16  0.141914E-16   201.382       201.382    
  33  0.421723     -0.863407     -0.116529E-16  0.116529E-16   201.471       201.471    
  34  0.454717     -0.788080     -0.106363E-16  0.106363E-16   202.706       202.706    
  35  0.594078     -0.520744     -0.702821E-17  0.702821E-17   203.055       203.055    
  36  0.624604     -0.470637     -0.635194E-17  0.635194E-17   203.753       203.753    
  37  0.666344     -0.405949     -0.547887E-17  0.547887E-17   204.171       204.171    
  38  0.388552     -0.945328     -0.127586E-16  0.127586E-16   204.213       204.213    
  39  0.408730     -0.894700     -0.120753E-16  0.120753E-16   204.441       204.441    
  40  0.757746     -0.277407     -0.374402E-17  0.374402E-17   204.446       204.446    
  41  0.486554     -0.720407     -0.972295E-17  0.972295E-17   204.595       204.595    
  42  0.815112     -0.204430     -0.275908E-17  0.275908E-17   204.760       204.760    
  43  0.255488E-01  -3.66716     -0.494938E-16  0.494938E-16   206.414       206.414    
  44  0.509805     -0.673728     -0.909295E-17  0.909295E-17   206.471       206.471    
  45  0.855511     -0.156056     -0.210621E-17  0.210621E-17   206.556       206.556    
  46  0.830215     -0.186071     -0.251130E-17  0.251130E-17   207.724       207.724    
  47  0.883671     -0.123670     -0.166911E-17  0.166911E-17   207.841       207.841    
  48  0.518151E-01  -2.96007     -0.399506E-16  0.399506E-16   208.538       208.538    
  49  0.271323      -1.30445     -0.176054E-16  0.176054E-16   209.163       209.163    
  50  0.114594      -2.16636     -0.292382E-16  0.292382E-16   209.738       209.738    
  51  0.176035      -1.73707     -0.234444E-16  0.234444E-16   209.889       209.889    
  52  0.607728     -0.498027     -0.672161E-17  0.672161E-17   210.275       210.275    
  53  0.806907     -0.214547     -0.289563E-17  0.289563E-17   210.391       210.391    
  54  0.770954     -0.260126     -0.351079E-17  0.351079E-17   210.633       210.633    
  55  0.920860     -0.824478E-01 -0.111275E-17  0.111275E-17   210.711       210.711    
  56  0.600380     -0.510192     -0.688579E-17  0.688579E-17   210.860       210.860    
  57  0.462581     -0.770933     -0.104049E-16  0.104049E-16   211.316       211.316    
  58  0.613763     -0.488147     -0.658826E-17  0.658826E-17   212.098       212.098    
  59  0.806960     -0.214481     -0.289473E-17  0.289473E-17   212.314       212.314    
  60  0.428646E-01  -3.14971     -0.425100E-16  0.425100E-16   212.788       212.788    
  61  0.662017     -0.412464     -0.556681E-17  0.556681E-17   191.359       191.359    
loop,thermsimp(1:2)       34  0.129734E-16  0.274863E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    341              187.61          0.79          0.47         20.30
Just calling func    0   0         22.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    187.61        2.417     -1.928      4.072     -100.0     0.2901    
                      -1.698      1.179     -100.0      2.845     -1.098    
                      0.9002E-01 -1.806      2.009      0.000     0.6600    
                      -1.122     -20.00      0.000      0.000     -1.221    

                      -1.600      6763.      9490.     -549.2     -1451.    
                      -4.215     -5.802     -4.555     -15.33     -5.168    
                      -13.09     -2.682     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.6506E-01-0.5491E-01  0.000    -0.1379    
                     -0.2250    -0.1374    -0.1587    -0.1877    -0.6106E-02

                     -0.7044     -2.761      1.382     0.2108     0.4458E-01
                      0.5704E-01-0.5175E-01-0.1617    -0.4602E-01-0.8038E-01
                     -0.8476E-01 0.8311E-01-0.2309     -3.108      1.382    

                      -1.349     -1.780      3480.      2291.      0.000    
                       0.000      9.133      8.412      0.000     0.1000    
                       1.306      1.296      9.160      8.894     -108.7    

                      0.1000      1.329      1.274      9.263      9.104    
                      -620.3     0.1000     0.1063      1.167      9.370    
                       9.227      7926.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.61
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       34
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       35
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      340     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.610983     -0.492687     -0.664954E-17  0.664954E-17   183.388       183.388    
   2  0.445386     -0.808814     -0.109161E-16  0.109161E-16   184.352       184.352    
   3  0.362134      -1.01574     -0.137089E-16  0.137089E-16   191.359       191.359    
   4  0.944836     -0.567439E-01 -0.765842E-18  0.765842E-18   191.777       191.777    
   5  0.162414      -1.81761     -0.245313E-16  0.245313E-16   192.054       192.054    
   6  0.454510     -0.788536     -0.106425E-16  0.106425E-16   192.343       192.343    
   7  0.325883      -1.12122     -0.151325E-16  0.151325E-16   192.782       192.782    
   8  0.104398      -2.25955     -0.304959E-16  0.304959E-16   192.901       192.901    
   9  0.224149      -1.49545     -0.201832E-16  0.201832E-16   193.810       193.810    
  10  0.180125      -1.71410     -0.231343E-16  0.231343E-16   194.053       194.053    
  11  0.779605     -0.248968     -0.336019E-17  0.336019E-17   194.406       194.406    
  12  0.984693     -0.154256E-01 -0.208191E-18  0.208191E-18   194.449       194.449    
  13  0.491372     -0.710553     -0.958996E-17  0.958996E-17   194.870       194.870    
  14  0.654920     -0.423242     -0.571228E-17  0.571228E-17   195.002       195.002    
  15  0.779947     -0.248529     -0.335426E-17  0.335426E-17   195.010       195.010    
  16  0.643823     -0.440331     -0.594292E-17  0.594292E-17   195.025       195.025    
  17  0.257241E-01  -3.66033     -0.494015E-16  0.494015E-16   195.128       195.128    
  18  0.508568E-02  -5.28133     -0.712793E-16  0.712793E-16   195.591       195.591    
  19  0.100933      -2.29330     -0.309514E-16  0.309514E-16   195.809       195.809    
  20  0.182765      -1.69955     -0.229380E-16  0.229380E-16   195.941       195.941    
  21  0.308979      -1.17448     -0.158514E-16  0.158514E-16   196.063       196.063    
  22  0.613119     -0.489196     -0.660242E-17  0.660242E-17   196.342       196.342    
  23  0.366679      -1.00327     -0.135406E-16  0.135406E-16   196.611       196.611    
  24  0.650700     -0.429706     -0.579952E-17  0.579952E-17   196.808       196.808    
  25  0.586764     -0.533133     -0.719542E-17  0.719542E-17   197.184       197.184    
  26  0.972794     -0.275833E-01 -0.372278E-18  0.372278E-18   197.581       197.581    
  27  0.496436     -0.700300     -0.945158E-17  0.945158E-17   197.603       197.603    
  28  0.207712      -1.57160     -0.212111E-16  0.212111E-16   197.710       197.710    
  29  0.120677      -2.11464     -0.285402E-16  0.285402E-16   197.742       197.742    
  30  0.470614     -0.753717     -0.101725E-16  0.101725E-16   197.904       197.904    
  31  0.901056     -0.104188     -0.140617E-17  0.140617E-17   198.488       198.488    
  32  0.535827     -0.623944     -0.842104E-17  0.842104E-17   199.726       199.726    
  33  0.812714     -0.207376     -0.279885E-17  0.279885E-17   201.382       201.382    
  34  0.297926      -1.21091     -0.163430E-16  0.163430E-16   201.471       201.471    
  35  0.222045      -1.50488     -0.203105E-16  0.203105E-16   202.706       202.706    
  36  0.825600     -0.191645     -0.258653E-17  0.258653E-17   203.055       203.055    
  37  0.820869     -0.197392     -0.266409E-17  0.266409E-17   203.753       203.753    
  38  0.865510     -0.144436     -0.194938E-17  0.194938E-17   204.171       204.171    
  39  0.903776     -0.101173     -0.136548E-17  0.136548E-17   204.213       204.213    
  40  0.696194     -0.362128     -0.488745E-17  0.488745E-17   204.441       204.441    
  41  0.882669     -0.124805     -0.168442E-17  0.168442E-17   204.446       204.446    
  42  0.338270      -1.08391     -0.146290E-16  0.146290E-16   204.595       204.595    
  43  0.539615     -0.616900     -0.832597E-17  0.832597E-17   204.760       204.760    
  44  0.218388      -1.52148     -0.205346E-16  0.205346E-16   206.414       206.414    
  45  0.602616     -0.506476     -0.683563E-17  0.683563E-17   206.471       206.471    
  46  0.920113     -0.832591E-01 -0.112370E-17  0.112370E-17   206.556       206.556    
  47  0.595126E-01  -2.82157     -0.380812E-16  0.380812E-16   207.724       207.724    
  48  0.814650     -0.204996     -0.276673E-17  0.276673E-17   207.841       207.841    
  49  0.135570      -1.99827     -0.269696E-16  0.269696E-16   208.538       208.538    
  50  0.720412     -0.327932     -0.442592E-17  0.442592E-17   209.163       209.163    
  51  0.236365      -1.44238     -0.194670E-16  0.194670E-16   209.738       209.738    
  52  0.927266     -0.755149E-01 -0.101918E-17  0.101918E-17   209.889       209.889    
  53  0.533275     -0.628719     -0.848549E-17  0.848549E-17   210.275       210.275    
  54  0.240004      -1.42710     -0.192608E-16  0.192608E-16   210.391       210.391    
  55  0.553349     -0.591767     -0.798676E-17  0.798676E-17   210.633       210.633    
  56  0.528532     -0.637653     -0.860606E-17  0.860606E-17   210.711       210.711    
  57  0.216083      -1.53209     -0.206778E-16  0.206778E-16   210.860       210.860    
  58  0.894878     -0.111068     -0.149903E-17  0.149903E-17   211.316       211.316    
  59  0.740867     -0.299934     -0.404806E-17  0.404806E-17   212.098       212.098    
  60  0.210068      -1.56032     -0.210589E-16  0.210589E-16   212.314       212.314    
  61  0.408205     -0.895986     -0.120927E-16  0.120927E-16   187.612       187.612    
loop,thermsimp(1:2)       35  0.664954E-17  0.109161E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    342              199.29          0.79          0.47         20.21
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    199.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       35
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       36
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      341
neval,tstepnext:      341     341

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.570960     -0.560437     -0.756392E-17  0.756392E-17   183.388       183.388    
   2  0.455915     -0.785449     -0.106008E-16  0.106008E-16   184.352       184.352    
   3  0.866186     -0.143656     -0.193885E-17  0.193885E-17   187.612       187.612    
   4  0.346672      -1.05938     -0.142979E-16  0.142979E-16   191.359       191.359    
   5  0.906611     -0.980415E-01 -0.132321E-17  0.132321E-17   191.777       191.777    
   6  0.434977     -0.832463     -0.112353E-16  0.112353E-16   192.054       192.054    
   7  0.532195     -0.630745     -0.851283E-17  0.851283E-17   192.343       192.343    
   8  0.523130     -0.647926     -0.874472E-17  0.874472E-17   192.782       192.782    
   9  0.208522      -1.56771     -0.211586E-16  0.211586E-16   192.901       192.901    
  10  0.115414      -2.15923     -0.291420E-16  0.291420E-16   193.810       193.810    
  11  0.142547      -1.94808     -0.262922E-16  0.262922E-16   194.053       194.053    
  12  0.919217     -0.842327E-01 -0.113684E-17  0.113684E-17   194.406       194.406    
  13  0.581955     -0.541362     -0.730647E-17  0.730647E-17   194.449       194.449    
  14  0.291289      -1.23344     -0.166471E-16  0.166471E-16   194.870       194.870    
  15  0.201469      -1.60212     -0.216230E-16  0.216230E-16   195.002       195.002    
  16  0.613706     -0.488239     -0.658951E-17  0.658951E-17   195.010       195.010    
  17  0.705773E-01  -2.65105     -0.357798E-16  0.357798E-16   195.025       195.025    
  18  0.403447     -0.907710     -0.122509E-16  0.122509E-16   195.128       195.128    
  19  0.551034     -0.595958     -0.804333E-17  0.804333E-17   195.591       195.591    
  20  0.513318     -0.666859     -0.900025E-17  0.900025E-17   195.809       195.809    
  21  0.347388      -1.05731     -0.142700E-16  0.142700E-16   195.941       195.941    
  22  0.984346     -0.157781E-01 -0.212949E-18  0.212949E-18   196.063       196.063    
  23  0.865108     -0.144901     -0.195565E-17  0.195565E-17   196.342       196.342    
  24  0.688141     -0.373761     -0.504446E-17  0.504446E-17   196.611       196.611    
  25  0.396397     -0.925338     -0.124888E-16  0.124888E-16   196.808       196.808    
  26  0.708768E-01  -2.64681     -0.357226E-16  0.357226E-16   197.184       197.184    
  27  0.774146     -0.255995     -0.345503E-17  0.345503E-17   197.581       197.581    
  28  0.275352      -1.28970     -0.174064E-16  0.174064E-16   197.603       197.603    
  29  0.881232     -0.126435     -0.170642E-17  0.170642E-17   197.710       197.710    
  30  0.174685      -1.74477     -0.235482E-16  0.235482E-16   197.742       197.742    
  31  0.831145     -0.184951     -0.249619E-17  0.249619E-17   197.904       197.904    
  32  0.223098      -1.50014     -0.202467E-16  0.202467E-16   198.488       198.488    
  33  0.752135     -0.284840     -0.384433E-17  0.384433E-17   199.726       199.726    
  34  0.755172E-02  -4.88598     -0.659435E-16  0.659435E-16   201.382       201.382    
  35  0.266080      -1.32396     -0.178688E-16  0.178688E-16   201.471       201.471    
  36  0.375554     -0.979352     -0.132178E-16  0.132178E-16   202.706       202.706    
  37  0.712621     -0.338806     -0.457268E-17  0.457268E-17   203.055       203.055    
  38  0.681751     -0.383091     -0.517038E-17  0.517038E-17   203.753       203.753    
  39  0.224565      -1.49359     -0.201582E-16  0.201582E-16   204.171       204.171    
  40  0.305127      -1.18703     -0.160207E-16  0.160207E-16   204.213       204.213    
  41  0.300733      -1.20153     -0.162165E-16  0.162165E-16   204.441       204.441    
  42  0.692818     -0.366988     -0.495304E-17  0.495304E-17   204.446       204.446    
  43  0.327504      -1.11626     -0.150655E-16  0.150655E-16   204.595       204.595    
  44  0.253910      -1.37078     -0.185006E-16  0.185006E-16   204.760       204.760    
  45  0.947051     -0.544028E-01 -0.734245E-18  0.734245E-18   206.414       206.414    
  46  0.435100     -0.832180     -0.112315E-16  0.112315E-16   206.471       206.471    
  47  0.382429     -0.961212     -0.129730E-16  0.129730E-16   206.556       206.556    
  48  0.465880     -0.763828     -0.103090E-16  0.103090E-16   207.724       207.724    
  49  0.110258      -2.20493     -0.297588E-16  0.297588E-16   207.841       207.841    
  50  0.779931     -0.248550     -0.335455E-17  0.335455E-17   208.538       208.538    
  51  0.131026      -2.03236     -0.274297E-16  0.274297E-16   209.163       209.163    
  52  0.610280     -0.493837     -0.666506E-17  0.666506E-17   209.738       209.738    
  53  0.614446     -0.487034     -0.657324E-17  0.657324E-17   209.889       209.889    
  54  0.905442     -0.993323E-01 -0.134064E-17  0.134064E-17   210.275       210.275    
  55  0.636845     -0.451229     -0.609000E-17  0.609000E-17   210.391       210.391    
  56  0.127773      -2.05750     -0.277690E-16  0.277690E-16   210.633       210.633    
  57  0.800876     -0.222049     -0.299688E-17  0.299688E-17   210.711       210.711    
  58  0.579507     -0.545577     -0.736337E-17  0.736337E-17   210.860       210.860    
  59  0.873630     -0.135098     -0.182335E-17  0.182335E-17   211.316       211.316    
  60  0.117161      -2.14420     -0.289392E-16  0.289392E-16   212.098       212.098    
  61  0.561371     -0.577372     -0.779249E-17  0.779249E-17   199.285       199.285    
loop,thermsimp(1:2)       36  0.756392E-17  0.106008E-16

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    343              194.85          0.80          0.46         20.33
Just calling func    0   0         22.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       36
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.134965E-16           341
loop is:       37
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.269929E-17           351

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      342     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.283787      -1.25953     -0.339984E-17  0.339984E-17   183.388       183.388    
   2  0.130648      -2.03525     -0.549373E-17  0.549373E-17   184.352       184.352    
   3  0.707136     -0.346532     -0.935392E-18  0.935392E-18   187.612       187.612    
   4  0.324278      -1.12616     -0.303982E-17  0.303982E-17   191.359       191.359    
   5  0.556058     -0.586883     -0.158417E-17  0.158417E-17   191.777       191.777    
   6  0.455468     -0.786429     -0.212280E-17  0.212280E-17   192.054       192.054    
   7  0.978617E-01  -2.32420     -0.627370E-17  0.627370E-17   192.343       192.343    
   8  0.400969     -0.913870     -0.246680E-17  0.246680E-17   192.782       192.782    
   9  0.728380E-01  -2.61952     -0.707085E-17  0.707085E-17   192.901       192.901    
  10  0.268214      -1.31597     -0.355219E-17  0.355219E-17   193.810       193.810    
  11  0.476675     -0.740920     -0.199996E-17  0.199996E-17   194.053       194.053    
  12  0.178317      -1.72419     -0.465410E-17  0.465410E-17   194.406       194.406    
  13  0.653048     -0.426105     -0.115018E-17  0.115018E-17   194.449       194.449    
  14  0.340076      -1.07859     -0.291142E-17  0.291142E-17   194.870       194.870    
  15  0.863228     -0.147076     -0.397002E-18  0.397002E-18   195.002       195.002    
  16  0.909924     -0.943941E-01 -0.254797E-18  0.254797E-18   195.010       195.010    
  17  0.825237     -0.192084     -0.518492E-18  0.518492E-18   195.025       195.025    
  18  0.153124      -1.87651     -0.506524E-17  0.506524E-17   195.128       195.128    
  19  0.194945      -1.63504     -0.441345E-17  0.441345E-17   195.591       195.591    
  20  0.261172      -1.34257     -0.362400E-17  0.362400E-17   195.809       195.809    
  21  0.313407      -1.16025     -0.313187E-17  0.313187E-17   195.941       195.941    
  22  0.565316     -0.570370     -0.153960E-17  0.153960E-17   196.063       196.063    
  23  0.312773      -1.16228     -0.313733E-17  0.313733E-17   196.342       196.342    
  24  0.702940     -0.352484     -0.951458E-18  0.951458E-18   196.611       196.611    
  25  0.525509     -0.643388     -0.173669E-17  0.173669E-17   196.808       196.808    
  26  0.509634     -0.674062     -0.181949E-17  0.181949E-17   197.184       197.184    
  27  0.595724     -0.517978     -0.139817E-17  0.139817E-17   197.581       197.581    
  28  0.947496     -0.539321E-01 -0.145579E-18  0.145579E-18   197.603       197.603    
  29  0.815419     -0.204054     -0.550801E-18  0.550801E-18   197.710       197.710    
  30  0.630299     -0.461561     -0.124589E-17  0.124589E-17   197.742       197.742    
  31  0.959632     -0.412055E-01 -0.111226E-18  0.111226E-18   197.904       197.904    
  32  0.776002     -0.253600     -0.684542E-18  0.684542E-18   198.488       198.488    
  33  0.154344      -1.86857     -0.504382E-17  0.504382E-17   199.285       199.285    
  34  0.701539     -0.354479     -0.956844E-18  0.956844E-18   199.726       199.726    
  35  0.571389     -0.559686     -0.151076E-17  0.151076E-17   201.382       201.382    
  36  0.727901     -0.317591     -0.857271E-18  0.857271E-18   201.471       201.471    
  37  0.441271     -0.818096     -0.220828E-17  0.220828E-17   202.706       202.706    
  38  0.175631      -1.73937     -0.469507E-17  0.469507E-17   203.055       203.055    
  39  0.634136     -0.455491     -0.122950E-17  0.122950E-17   203.753       203.753    
  40  0.472630     -0.749443     -0.202297E-17  0.202297E-17   204.171       204.171    
  41  0.885361E-01  -2.42434     -0.654402E-17  0.654402E-17   204.213       204.213    
  42  0.191272      -1.65406     -0.446480E-17  0.446480E-17   204.441       204.441    
  43  0.764515     -0.268514     -0.724797E-18  0.724797E-18   204.446       204.446    
  44  0.735299     -0.307478     -0.829974E-18  0.829974E-18   204.595       204.595    
  45  0.838202     -0.176496     -0.476415E-18  0.476415E-18   204.760       204.760    
  46  0.349916      -1.05006     -0.283443E-17  0.283443E-17   206.414       206.414    
  47  0.470630     -0.753683     -0.203441E-17  0.203441E-17   206.471       206.471    
  48  0.952151     -0.490319E-01 -0.132352E-18  0.132352E-18   206.556       206.556    
  49  0.285274      -1.25431     -0.338574E-17  0.338574E-17   207.724       207.724    
  50  0.973437     -0.269219E-01 -0.726702E-19  0.726702E-19   207.841       207.841    
  51  0.254869      -1.36701     -0.368995E-17  0.368995E-17   208.538       208.538    
  52  0.217180      -1.52703     -0.412190E-17  0.412190E-17   209.163       209.163    
  53  0.222525      -1.50272     -0.405627E-17  0.405627E-17   209.738       209.738    
  54  0.527869     -0.638908     -0.172460E-17  0.172460E-17   209.889       209.889    
  55  0.978548     -0.216854E-01 -0.585353E-19  0.585353E-19   210.275       210.275    
  56  0.836708     -0.178280     -0.481231E-18  0.481231E-18   210.391       210.391    
  57  0.918509     -0.850034E-01 -0.229449E-18  0.229449E-18   210.633       210.633    
  58  0.226619      -1.48449     -0.400707E-17  0.400707E-17   210.711       210.711    
  59  0.367267      -1.00167     -0.270379E-17  0.270379E-17   210.860       210.860    
  60  0.601156     -0.508901     -0.137367E-17  0.137367E-17   211.316       211.316    
  61  0.459959     -0.776618     -0.209632E-17  0.209632E-17   194.854       194.854    
loop,thermsimp(1:2)       37  0.339984E-17  0.549373E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    344              196.00          0.80          0.47         20.34
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       37
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       38
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      343     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343764      -1.06780     -0.288231E-17  0.288231E-17   183.388       183.388    
   2  0.890540E-01  -2.41851     -0.652828E-17  0.652828E-17   184.352       184.352    
   3  0.742818     -0.297304     -0.802512E-18  0.802512E-18   187.612       187.612    
   4  0.773319     -0.257063     -0.693890E-18  0.693890E-18   191.359       191.359    
   5  0.847623     -0.165319     -0.446245E-18  0.446245E-18   191.777       191.777    
   6  0.822983     -0.194820     -0.525877E-18  0.525877E-18   192.054       192.054    
   7  0.214596      -1.53900     -0.415421E-17  0.415421E-17   192.343       192.343    
   8  0.766640E-01  -2.56832     -0.693266E-17  0.693266E-17   192.782       192.782    
   9  0.208806      -1.56635     -0.422803E-17  0.422803E-17   192.901       192.901    
  10  0.545442     -0.606158     -0.163620E-17  0.163620E-17   193.810       193.810    
  11  0.290288      -1.23688     -0.333871E-17  0.333871E-17   194.053       194.053    
  12  0.826179E-01  -2.49353     -0.673077E-17  0.673077E-17   194.406       194.406    
  13  0.124429      -2.08402     -0.562538E-17  0.562538E-17   194.449       194.449    
  14  0.553203     -0.592029     -0.159806E-17  0.159806E-17   194.854       194.854    
  15  0.988049     -0.120231E-01 -0.324538E-19  0.324538E-19   194.870       194.870    
  16  0.169892      -1.77259     -0.478475E-17  0.478475E-17   195.002       195.002    
  17  0.784655     -0.242511     -0.654608E-18  0.654608E-18   195.010       195.010    
  18  0.101155      -2.29110     -0.618434E-17  0.618434E-17   195.025       195.025    
  19  0.134854      -2.00356     -0.540820E-17  0.540820E-17   195.128       195.128    
  20  0.336865      -1.08807     -0.293703E-17  0.293703E-17   195.591       195.591    
  21  0.160269      -1.83090     -0.494214E-17  0.494214E-17   195.809       195.809    
  22  0.802228     -0.220362     -0.594822E-18  0.594822E-18   195.941       195.941    
  23  0.231161      -1.46464     -0.395349E-17  0.395349E-17   196.063       196.063    
  24  0.904753     -0.100093     -0.270180E-18  0.270180E-18   196.342       196.342    
  25  0.275334      -1.28977     -0.348147E-17  0.348147E-17   196.611       196.611    
  26  0.822245     -0.195717     -0.528298E-18  0.528298E-18   196.808       196.808    
  27  0.406029     -0.901331     -0.243296E-17  0.243296E-17   197.184       197.184    
  28  0.657719     -0.418978     -0.113094E-17  0.113094E-17   197.581       197.581    
  29  0.381499     -0.963648     -0.260117E-17  0.260117E-17   197.603       197.603    
  30  0.562358E-01  -2.87820     -0.776911E-17  0.776911E-17   197.710       197.710    
  31  0.918062     -0.854906E-01 -0.230764E-18  0.230764E-18   197.742       197.742    
  32  0.914455     -0.894270E-01 -0.241390E-18  0.241390E-18   197.904       197.904    
  33  0.779616     -0.248954     -0.671999E-18  0.671999E-18   198.488       198.488    
  34  0.919415     -0.840181E-01 -0.226790E-18  0.226790E-18   199.285       199.285    
  35  0.641747     -0.443561     -0.119730E-17  0.119730E-17   199.726       199.726    
  36  0.724474     -0.322309     -0.870008E-18  0.870008E-18   201.382       201.382    
  37  0.661215     -0.413676     -0.111663E-17  0.111663E-17   201.471       201.471    
  38  0.700189     -0.356405     -0.962043E-18  0.962043E-18   202.706       202.706    
  39  0.999836     -0.164508E-03 -0.444056E-21  0.444056E-21   203.055       203.055    
  40  0.803027     -0.219367     -0.592136E-18  0.592136E-18   203.753       203.753    
  41  0.302839      -1.19455     -0.322445E-17  0.322445E-17   204.171       204.171    
  42  0.146979      -1.91746     -0.517580E-17  0.517580E-17   204.213       204.213    
  43  0.870703     -0.138454     -0.373728E-18  0.373728E-18   204.441       204.441    
  44  0.161223      -1.82497     -0.492613E-17  0.492613E-17   204.446       204.446    
  45  0.413120     -0.884018     -0.238623E-17  0.238623E-17   204.595       204.595    
  46  0.935392     -0.667893E-01 -0.180284E-18  0.180284E-18   204.760       204.760    
  47  0.458676E-01  -3.08200     -0.831922E-17  0.831922E-17   206.414       206.414    
  48  0.600614     -0.509803     -0.137611E-17  0.137611E-17   206.471       206.471    
  49  0.831811     -0.184150     -0.497075E-18  0.497075E-18   206.556       206.556    
  50  0.212416      -1.54921     -0.418177E-17  0.418177E-17   207.724       207.724    
  51  0.954434E-01  -2.34922     -0.634124E-17  0.634124E-17   207.841       207.841    
  52  0.805816     -0.215899     -0.582776E-18  0.582776E-18   208.538       208.538    
  53  0.108994      -2.21646     -0.598289E-17  0.598289E-17   209.163       209.163    
  54  0.616956     -0.482958     -0.130365E-17  0.130365E-17   209.738       209.738    
  55  0.962815     -0.378936E-01 -0.102286E-18  0.102286E-18   209.889       209.889    
  56  0.529181     -0.636424     -0.171790E-17  0.171790E-17   210.275       210.275    
  57  0.500307     -0.692533     -0.186935E-17  0.186935E-17   210.391       210.391    
  58  0.339832E-01  -3.38189     -0.912871E-17  0.912871E-17   210.633       210.633    
  59  0.679127     -0.386947     -0.104449E-17  0.104449E-17   210.711       210.711    
  60  0.608368     -0.496976     -0.134148E-17  0.134148E-17   210.860       210.860    
  61  0.921830     -0.813941E-01 -0.219707E-18  0.219707E-18   196.001       196.001    
loop,thermsimp(1:2)       38  0.288231E-17  0.652828E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    345              198.73          0.80          0.47         20.35
Just calling func    0   0         22.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    198.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       38
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       39
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      344     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.509755     -0.673825     -0.181885E-17  0.181885E-17   183.388       183.388    
   2  0.592911     -0.522711     -0.141095E-17  0.141095E-17   184.352       184.352    
   3  0.915251     -0.885566E-01 -0.239040E-18  0.239040E-18   187.612       187.612    
   4  0.940851E-01  -2.36356     -0.637993E-17  0.637993E-17   191.359       191.359    
   5  0.640177     -0.446010     -0.120391E-17  0.120391E-17   191.777       191.777    
   6  0.880604E-01  -2.42973     -0.655856E-17  0.655856E-17   192.054       192.054    
   7  0.139701      -1.96825     -0.531289E-17  0.531289E-17   192.343       192.343    
   8  0.169438      -1.77527     -0.479198E-17  0.479198E-17   192.782       192.782    
   9  0.976301     -0.239846E-01 -0.647416E-19  0.647416E-19   192.901       192.901    
  10  0.889219     -0.117412     -0.316929E-18  0.316929E-18   193.810       193.810    
  11  0.886348     -0.120646     -0.325659E-18  0.325659E-18   194.053       194.053    
  12  0.202058      -1.59920     -0.431672E-17  0.431672E-17   194.406       194.406    
  13  0.351896      -1.04442     -0.281920E-17  0.281920E-17   194.449       194.449    
  14  0.962465     -0.382576E-01 -0.103269E-18  0.103269E-18   194.854       194.854    
  15  0.167777      -1.78512     -0.481857E-17  0.481857E-17   194.870       194.870    
  16  0.619551     -0.478760     -0.129231E-17  0.129231E-17   195.002       195.002    
  17  0.612409E-01  -2.79294     -0.753897E-17  0.753897E-17   195.010       195.010    
  18  0.346879      -1.05878     -0.285796E-17  0.285796E-17   195.025       195.025    
  19  0.851751     -0.160461     -0.433132E-18  0.433132E-18   195.128       195.128    
  20  0.159503      -1.83569     -0.495508E-17  0.495508E-17   195.591       195.591    
  21  0.979911     -0.202938E-01 -0.547790E-19  0.547790E-19   195.809       195.809    
  22  0.602686     -0.506358     -0.136681E-17  0.136681E-17   195.941       195.941    
  23  0.173567E-01  -4.05377     -0.109423E-16  0.109423E-16   196.001       196.001    
  24  0.194864      -1.63545     -0.441457E-17  0.441457E-17   196.063       196.063    
  25  0.291124      -1.23401     -0.333095E-17  0.333095E-17   196.342       196.342    
  26  0.710110     -0.342335     -0.924063E-18  0.924063E-18   196.611       196.611    
  27  0.303870      -1.19116     -0.321528E-17  0.321528E-17   196.808       196.808    
  28  0.847433     -0.165544     -0.446851E-18  0.446851E-18   197.184       197.184    
  29  0.681285E-01  -2.68636     -0.725128E-17  0.725128E-17   197.581       197.581    
  30  0.800118E-01  -2.52558     -0.681729E-17  0.681729E-17   197.603       197.603    
  31  0.989316     -0.107418E-01 -0.289953E-19  0.289953E-19   197.710       197.710    
  32  0.945347     -0.562037E-01 -0.151710E-18  0.151710E-18   197.742       197.742    
  33  0.443974     -0.811989     -0.219180E-17  0.219180E-17   197.904       197.904    
  34  0.673760     -0.394881     -0.106590E-17  0.106590E-17   198.488       198.488    
  35  0.480840     -0.732222     -0.197648E-17  0.197648E-17   199.285       199.285    
  36  0.232510      -1.45882     -0.393779E-17  0.393779E-17   199.726       199.726    
  37  0.238368      -1.43394     -0.387063E-17  0.387063E-17   201.382       201.382    
  38  0.655665     -0.422106     -0.113939E-17  0.113939E-17   201.471       201.471    
  39  0.128203      -2.05414     -0.554472E-17  0.554472E-17   202.706       202.706    
  40  0.404438     -0.905256     -0.244355E-17  0.244355E-17   203.055       203.055    
  41  0.412302     -0.886000     -0.239158E-17  0.239158E-17   203.753       203.753    
  42  0.236142      -1.44332     -0.389595E-17  0.389595E-17   204.171       204.171    
  43  0.822769     -0.195080     -0.526578E-18  0.526578E-18   204.213       204.213    
  44  0.592053     -0.524159     -0.141486E-17  0.141486E-17   204.441       204.441    
  45  0.469672     -0.755722     -0.203992E-17  0.203992E-17   204.446       204.446    
  46  0.143267E-01  -4.24563     -0.114602E-16  0.114602E-16   204.595       204.595    
  47  0.946596     -0.548832E-01 -0.148146E-18  0.148146E-18   204.760       204.760    
  48  0.622205     -0.474486     -0.128078E-17  0.128078E-17   206.414       206.414    
  49  0.887998     -0.118786     -0.320638E-18  0.320638E-18   206.471       206.471    
  50  0.531727     -0.631625     -0.170494E-17  0.170494E-17   206.556       206.556    
  51  0.582467     -0.540482     -0.145892E-17  0.145892E-17   207.724       207.724    
  52  0.311714      -1.16567     -0.314649E-17  0.314649E-17   207.841       207.841    
  53  0.391889     -0.936778     -0.252864E-17  0.252864E-17   208.538       208.538    
  54  0.297815      -1.21128     -0.326961E-17  0.326961E-17   209.163       209.163    
  55  0.117136      -2.14442     -0.578843E-17  0.578843E-17   209.738       209.738    
  56  0.990781     -0.926225E-02 -0.250015E-19  0.250015E-19   209.889       209.889    
  57  0.941149     -0.606535E-01 -0.163722E-18  0.163722E-18   210.275       210.275    
  58  0.935979E-01  -2.36875     -0.639395E-17  0.639395E-17   210.391       210.391    
  59  0.276627      -1.28508     -0.346882E-17  0.346882E-17   210.633       210.633    
  60  0.792537     -0.232516     -0.627629E-18  0.627629E-18   210.711       210.711    
  61  0.244448      -1.40875     -0.380263E-17  0.380263E-17   198.734       198.734    
loop,thermsimp(1:2)       39  0.181885E-17  0.141095E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    346              194.00          0.80          0.46         20.33
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       39
neval is:      345
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       40
neval is:      345


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      345     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.384308     -0.956311     -0.258136E-17  0.258136E-17   183.388       183.388    
   2  0.188156      -1.67049     -0.450913E-17  0.450913E-17   184.352       184.352    
   3  0.471373     -0.752105     -0.203015E-17  0.203015E-17   187.612       187.612    
   4  0.974090     -0.262514E-01 -0.708602E-19  0.708602E-19   191.359       191.359    
   5  0.360206      -1.02108     -0.275619E-17  0.275619E-17   191.777       191.777    
   6  0.341937      -1.07313     -0.289669E-17  0.289669E-17   192.054       192.054    
   7  0.388342     -0.945869     -0.255318E-17  0.255318E-17   192.343       192.343    
   8  0.999843     -0.157248E-03 -0.424459E-21  0.424459E-21   192.782       192.782    
   9  0.481510     -0.730828     -0.197272E-17  0.197272E-17   192.901       192.901    
  10  0.970539     -0.299036E-01 -0.807187E-19  0.807187E-19   193.810       193.810    
  11  0.340162      -1.07833     -0.291074E-17  0.291074E-17   194.053       194.053    
  12  0.715920     -0.334187     -0.902070E-18  0.902070E-18   194.406       194.406    
  13  0.518760     -0.656314     -0.177159E-17  0.177159E-17   194.449       194.449    
  14  0.438222E-01  -3.12761     -0.844235E-17  0.844235E-17   194.854       194.854    
  15  0.685383     -0.377777     -0.101973E-17  0.101973E-17   194.870       194.870    
  16  0.929753     -0.728359E-01 -0.196605E-18  0.196605E-18   195.002       195.002    
  17  0.468637     -0.757928     -0.204587E-17  0.204587E-17   195.010       195.010    
  18  0.425685     -0.854055     -0.230535E-17  0.230535E-17   195.025       195.025    
  19  0.757115     -0.278240     -0.751052E-18  0.751052E-18   195.128       195.128    
  20  0.484938     -0.723734     -0.195357E-17  0.195357E-17   195.591       195.591    
  21  0.640954     -0.444798     -0.120064E-17  0.120064E-17   195.809       195.809    
  22  0.432975     -0.837076     -0.225952E-17  0.225952E-17   195.941       195.941    
  23  0.400697     -0.914549     -0.246864E-17  0.246864E-17   196.001       196.001    
  24  0.254590      -1.36810     -0.369290E-17  0.369290E-17   196.063       196.063    
  25  0.844914     -0.168520     -0.454886E-18  0.454886E-18   196.342       196.342    
  26  0.440545     -0.819744     -0.221273E-17  0.221273E-17   196.611       196.611    
  27  0.903733     -0.101221     -0.273225E-18  0.273225E-18   196.808       196.808    
  28  0.670912     -0.399117     -0.107733E-17  0.107733E-17   197.184       197.184    
  29  0.458291     -0.780250     -0.210612E-17  0.210612E-17   197.581       197.581    
  30  0.599512     -0.511640     -0.138107E-17  0.138107E-17   197.603       197.603    
  31  0.450309     -0.797821     -0.215355E-17  0.215355E-17   197.710       197.710    
  32  0.699665     -0.357154     -0.964064E-18  0.964064E-18   197.742       197.742    
  33  0.551272     -0.595527     -0.160750E-17  0.160750E-17   197.904       197.904    
  34  0.600413     -0.510137     -0.137701E-17  0.137701E-17   198.488       198.488    
  35  0.695840     -0.362636     -0.978860E-18  0.978860E-18   198.734       198.734    
  36  0.945685     -0.558453E-01 -0.150743E-18  0.150743E-18   199.285       199.285    
  37  0.492797     -0.707658     -0.191018E-17  0.191018E-17   199.726       199.726    
  38  0.196359E-01  -3.93040     -0.106093E-16  0.106093E-16   201.382       201.382    
  39  0.543904     -0.608983     -0.164383E-17  0.164383E-17   201.471       201.471    
  40  0.924904E-01  -2.38065     -0.642608E-17  0.642608E-17   202.706       202.706    
  41  0.672455     -0.396820     -0.107113E-17  0.107113E-17   203.055       203.055    
  42  0.725747     -0.320554     -0.865271E-18  0.865271E-18   203.753       203.753    
  43  0.197127      -1.62391     -0.438340E-17  0.438340E-17   204.171       204.171    
  44  0.666623     -0.405531     -0.109465E-17  0.109465E-17   204.213       204.213    
  45  0.659280     -0.416606     -0.112454E-17  0.112454E-17   204.441       204.441    
  46  0.143932E-01  -4.24100     -0.114477E-16  0.114477E-16   204.446       204.446    
  47  0.883325     -0.124062     -0.334879E-18  0.334879E-18   204.595       204.595    
  48  0.300396      -1.20266     -0.324632E-17  0.324632E-17   204.760       204.760    
  49  0.243723      -1.41172     -0.381065E-17  0.381065E-17   206.414       206.414    
  50  0.173289      -1.75280     -0.473131E-17  0.473131E-17   206.471       206.471    
  51  0.663169     -0.410725     -0.110867E-17  0.110867E-17   206.556       206.556    
  52  0.981778     -0.183897E-01 -0.496393E-19  0.496393E-19   207.724       207.724    
  53  0.410631     -0.890059     -0.240253E-17  0.240253E-17   207.841       207.841    
  54  0.421919     -0.862943     -0.232934E-17  0.232934E-17   208.538       208.538    
  55  0.864095     -0.146073     -0.394294E-18  0.394294E-18   209.163       209.163    
  56  0.568294     -0.565116     -0.152542E-17  0.152542E-17   209.738       209.738    
  57  0.562697     -0.575013     -0.155213E-17  0.155213E-17   209.889       209.889    
  58  0.457553     -0.781863     -0.211048E-17  0.211048E-17   210.275       210.275    
  59  0.283046      -1.26215     -0.340691E-17  0.340691E-17   210.391       210.391    
  60  0.486131     -0.721277     -0.194694E-17  0.194694E-17   210.633       210.633    
  61  0.946393     -0.550978E-01 -0.148725E-18  0.148725E-18   194.001       194.001    
loop,thermsimp(1:2)       40  0.258136E-17  0.450913E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    347              193.34          0.80          0.46         20.38
Just calling func    0   0         22.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       40
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       41
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      346     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.965243E-01  -2.33796     -0.631084E-17  0.631084E-17   183.388       183.388    
   2  0.826426     -0.190645     -0.514607E-18  0.514607E-18   184.352       184.352    
   3  0.697005     -0.360963     -0.974346E-18  0.974346E-18   187.612       187.612    
   4  0.822022     -0.195988     -0.529029E-18  0.529029E-18   191.359       191.359    
   5  0.735768E-01  -2.60942     -0.704361E-17  0.704361E-17   191.777       191.777    
   6  0.569125     -0.563656     -0.152147E-17  0.152147E-17   192.054       192.054    
   7  0.317628      -1.14687     -0.309575E-17  0.309575E-17   192.343       192.343    
   8  0.732716     -0.310997     -0.839474E-18  0.839474E-18   192.782       192.782    
   9  0.550794     -0.596394     -0.160984E-17  0.160984E-17   192.901       192.901    
  10  0.437990     -0.825559     -0.222843E-17  0.222843E-17   193.810       193.810    
  11  0.859226     -0.151724     -0.409547E-18  0.409547E-18   194.001       194.001    
  12  0.755794E-01  -2.58257     -0.697112E-17  0.697112E-17   194.053       194.053    
  13  0.694909E-01  -2.66656     -0.719783E-17  0.719783E-17   194.406       194.406    
  14  0.874723     -0.133848     -0.361295E-18  0.361295E-18   194.449       194.449    
  15  0.954899     -0.461494E-01 -0.124571E-18  0.124571E-18   194.854       194.854    
  16  0.545437     -0.606168     -0.163622E-17  0.163622E-17   194.870       194.870    
  17  0.624162     -0.471345     -0.127230E-17  0.127230E-17   195.002       195.002    
  18  0.205475      -1.58243     -0.427145E-17  0.427145E-17   195.010       195.010    
  19  0.133118E-01  -4.31910     -0.116585E-16  0.116585E-16   195.025       195.025    
  20  0.560670     -0.578624     -0.156188E-17  0.156188E-17   195.128       195.128    
  21  0.611732     -0.491461     -0.132660E-17  0.132660E-17   195.591       195.591    
  22  0.929349E-01  -2.37586     -0.641313E-17  0.641313E-17   195.809       195.809    
  23  0.193096      -1.64457     -0.443917E-17  0.443917E-17   195.941       195.941    
  24  0.679388     -0.386562     -0.104345E-17  0.104345E-17   196.001       196.001    
  25  0.339923      -1.07904     -0.291264E-17  0.291264E-17   196.063       196.063    
  26  0.448333     -0.802219     -0.216543E-17  0.216543E-17   196.342       196.342    
  27  0.404152     -0.905965     -0.244547E-17  0.244547E-17   196.611       196.611    
  28  0.608670     -0.496478     -0.134014E-17  0.134014E-17   196.808       196.808    
  29  0.263213      -1.33479     -0.360299E-17  0.360299E-17   197.184       197.184    
  30  0.293948      -1.22435     -0.330488E-17  0.330488E-17   197.581       197.581    
  31  0.191404      -1.65337     -0.446292E-17  0.446292E-17   197.603       197.603    
  32  0.149949      -1.89746     -0.512180E-17  0.512180E-17   197.710       197.710    
  33  0.440556     -0.819719     -0.221266E-17  0.221266E-17   197.742       197.742    
  34  0.580733     -0.543464     -0.146697E-17  0.146697E-17   197.904       197.904    
  35  0.875413     -0.133059     -0.359167E-18  0.359167E-18   198.488       198.488    
  36  0.698542     -0.358760     -0.968399E-18  0.968399E-18   198.734       198.734    
  37  0.562011     -0.576235     -0.155543E-17  0.155543E-17   199.285       199.285    
  38  0.887456     -0.119396     -0.322286E-18  0.322286E-18   199.726       199.726    
  39  0.646558     -0.436093     -0.117714E-17  0.117714E-17   201.382       201.382    
  40  0.379078     -0.970015     -0.261835E-17  0.261835E-17   201.471       201.471    
  41  0.673622     -0.395086     -0.106645E-17  0.106645E-17   202.706       202.706    
  42  0.195349      -1.63297     -0.440786E-17  0.440786E-17   203.055       203.055    
  43  0.127474      -2.05984     -0.556012E-17  0.556012E-17   203.753       203.753    
  44  0.781302     -0.246794     -0.666169E-18  0.666169E-18   204.171       204.171    
  45  0.784106     -0.243211     -0.656499E-18  0.656499E-18   204.213       204.213    
  46  0.711755     -0.340021     -0.917818E-18  0.917818E-18   204.441       204.441    
  47  0.604776E-01  -2.80548     -0.757282E-17  0.757282E-17   204.446       204.446    
  48  0.735482E-01  -2.60981     -0.704466E-17  0.704466E-17   204.595       204.595    
  49  0.261848      -1.33999     -0.361704E-17  0.361704E-17   204.760       204.760    
  50  0.913399     -0.905822E-01 -0.244508E-18  0.244508E-18   206.414       206.414    
  51  0.357302      -1.02917     -0.277804E-17  0.277804E-17   206.471       206.471    
  52  0.823631     -0.194033     -0.523751E-18  0.523751E-18   206.556       206.556    
  53  0.966650E-01  -2.33650     -0.630691E-17  0.630691E-17   207.724       207.724    
  54  0.519760     -0.654387     -0.176638E-17  0.176638E-17   207.841       207.841    
  55  0.106444      -2.24013     -0.604678E-17  0.604678E-17   208.538       208.538    
  56  0.206450      -1.57770     -0.425867E-17  0.425867E-17   209.163       209.163    
  57  0.325102      -1.12362     -0.303297E-17  0.303297E-17   209.738       209.738    
  58  0.435470     -0.831328     -0.224400E-17  0.224400E-17   209.889       209.889    
  59  0.417930     -0.872442     -0.235498E-17  0.235498E-17   210.275       210.275    
  60  0.547478     -0.602433     -0.162614E-17  0.162614E-17   210.391       210.391    
  61  0.774414     -0.255649     -0.690072E-18  0.690072E-18   193.343       193.343    
loop,thermsimp(1:2)       41  0.631084E-17  0.514607E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    348              196.13          0.80          0.47         20.37
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       41
neval is:      347
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       42
neval is:      347


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      347     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.435274     -0.831778     -0.224522E-17  0.224522E-17   183.388       183.388    
   2  0.913158     -0.908468E-01 -0.245222E-18  0.245222E-18   184.352       184.352    
   3  0.456237     -0.784743     -0.211825E-17  0.211825E-17   187.612       187.612    
   4  0.943086     -0.585975E-01 -0.158172E-18  0.158172E-18   191.359       191.359    
   5  0.880698     -0.127041     -0.342920E-18  0.342920E-18   191.777       191.777    
   6  0.214663      -1.53868     -0.415336E-17  0.415336E-17   192.054       192.054    
   7  0.693944     -0.365364     -0.986225E-18  0.986225E-18   192.343       192.343    
   8  0.742763     -0.297378     -0.802710E-18  0.802710E-18   192.782       192.782    
   9  0.883151     -0.124259     -0.335412E-18  0.335412E-18   192.901       192.901    
  10  0.509658     -0.674015     -0.181936E-17  0.181936E-17   193.343       193.343    
  11  0.718367     -0.330775     -0.892860E-18  0.892860E-18   193.810       193.810    
  12  0.411003     -0.889155     -0.240009E-17  0.240009E-17   194.001       194.001    
  13  0.313195      -1.16093     -0.313369E-17  0.313369E-17   194.053       194.053    
  14  0.606213     -0.500524     -0.135106E-17  0.135106E-17   194.406       194.406    
  15  0.825884     -0.191301     -0.516377E-18  0.516377E-18   194.449       194.449    
  16  0.903364     -0.101630     -0.274329E-18  0.274329E-18   194.854       194.854    
  17  0.245324      -1.40518     -0.379299E-17  0.379299E-17   194.870       194.870    
  18  0.320507      -1.13785     -0.307139E-17  0.307139E-17   195.002       195.002    
  19  0.495964     -0.701252     -0.189289E-17  0.189289E-17   195.010       195.010    
  20  0.734808E-01  -2.61073     -0.704713E-17  0.704713E-17   195.025       195.025    
  21  0.908991     -0.954206E-01 -0.257568E-18  0.257568E-18   195.128       195.128    
  22  0.340371      -1.07772     -0.290908E-17  0.290908E-17   195.591       195.591    
  23  0.692458     -0.367507     -0.992011E-18  0.992011E-18   195.809       195.809    
  24  0.988887     -0.111757E-01 -0.301665E-19  0.301665E-19   195.941       195.941    
  25  0.334754      -1.09436     -0.295400E-17  0.295400E-17   196.001       196.001    
  26  0.990579     -0.946606E-02 -0.255517E-19  0.255517E-19   196.063       196.063    
  27  0.103068      -2.27237     -0.613380E-17  0.613380E-17   196.342       196.342    
  28  0.883635     -0.123712     -0.333934E-18  0.333934E-18   196.611       196.611    
  29  0.720708     -0.327521     -0.884077E-18  0.884077E-18   196.808       196.808    
  30  0.795302     -0.229033     -0.618227E-18  0.618227E-18   197.184       197.184    
  31  0.876097     -0.132278     -0.357058E-18  0.357058E-18   197.581       197.581    
  32  0.465583     -0.764464     -0.206351E-17  0.206351E-17   197.603       197.603    
  33  0.544020E-01  -2.91135     -0.785860E-17  0.785860E-17   197.710       197.710    
  34  0.348199      -1.05498     -0.284770E-17  0.284770E-17   197.742       197.742    
  35  0.791579     -0.233726     -0.630895E-18  0.630895E-18   197.904       197.904    
  36  0.936790     -0.652964E-01 -0.176254E-18  0.176254E-18   198.488       198.488    
  37  0.942673     -0.590360E-01 -0.159355E-18  0.159355E-18   198.734       198.734    
  38  0.780353     -0.248008     -0.669448E-18  0.669448E-18   199.285       199.285    
  39  0.694609     -0.364406     -0.983639E-18  0.983639E-18   199.726       199.726    
  40  0.815825E-01  -2.50614     -0.676481E-17  0.676481E-17   201.382       201.382    
  41  0.374973     -0.980902     -0.264774E-17  0.264774E-17   201.471       201.471    
  42  0.959952     -0.408724E-01 -0.110327E-18  0.110327E-18   202.706       202.706    
  43  0.956468     -0.445079E-01 -0.120140E-18  0.120140E-18   203.055       203.055    
  44  0.110884      -2.19927     -0.593648E-17  0.593648E-17   203.753       203.753    
  45  0.302297      -1.19635     -0.322929E-17  0.322929E-17   204.171       204.171    
  46  0.859685     -0.151190     -0.408105E-18  0.408105E-18   204.213       204.213    
  47  0.955011     -0.460329E-01 -0.124256E-18  0.124256E-18   204.441       204.441    
  48  0.193700E-01  -3.94403     -0.106461E-16  0.106461E-16   204.446       204.446    
  49  0.913337     -0.906502E-01 -0.244692E-18  0.244692E-18   204.595       204.595    
  50  0.420211     -0.866999     -0.234028E-17  0.234028E-17   204.760       204.760    
  51  0.524021     -0.646223     -0.174435E-17  0.174435E-17   206.414       206.414    
  52  0.862562     -0.147849     -0.399087E-18  0.399087E-18   206.471       206.471    
  53  0.258148      -1.35422     -0.365544E-17  0.365544E-17   206.556       206.556    
  54  0.943856E-01  -2.36037     -0.637133E-17  0.637133E-17   207.724       207.724    
  55  0.430004     -0.843962     -0.227810E-17  0.227810E-17   207.841       207.841    
  56  0.940011     -0.618641E-01 -0.166989E-18  0.166989E-18   208.538       208.538    
  57  0.488719     -0.715969     -0.193261E-17  0.193261E-17   209.163       209.163    
  58  0.500241     -0.692665     -0.186971E-17  0.186971E-17   209.738       209.738    
  59  0.890127E-01  -2.41898     -0.652953E-17  0.652953E-17   209.889       209.889    
  60  0.759694     -0.274840     -0.741874E-18  0.741874E-18   210.275       210.275    
  61  0.593555     -0.521626     -0.140802E-17  0.140802E-17   196.127       196.127    
loop,thermsimp(1:2)       42  0.224522E-17  0.245222E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    349              190.44          0.80          0.46         20.29
Just calling func    0   0         23.11


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.44
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       42
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       43
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      348     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.153335      -1.87513     -0.506153E-17  0.506153E-17   183.388       183.388    
   2  0.734999     -0.307886     -0.831075E-18  0.831075E-18   184.352       184.352    
   3  0.557272E-01  -2.88729     -0.779364E-17  0.779364E-17   187.612       187.612    
   4  0.218003      -1.52325     -0.411169E-17  0.411169E-17   191.359       191.359    
   5  0.705499     -0.348850     -0.941648E-18  0.941648E-18   191.777       191.777    
   6  0.614694     -0.486631     -0.131356E-17  0.131356E-17   192.054       192.054    
   7  0.904286     -0.100609     -0.271574E-18  0.271574E-18   192.343       192.343    
   8  0.490092     -0.713162     -0.192504E-17  0.192504E-17   192.782       192.782    
   9  0.220338E-01  -3.81518     -0.102983E-16  0.102983E-16   192.901       192.901    
  10  0.652673     -0.426679     -0.115173E-17  0.115173E-17   193.343       193.343    
  11  0.469050     -0.757046     -0.204349E-17  0.204349E-17   193.810       193.810    
  12  0.653426     -0.425526     -0.114862E-17  0.114862E-17   194.001       194.001    
  13  0.706469E-02  -4.95265     -0.133687E-16  0.133687E-16   194.053       194.053    
  14  0.468602     -0.758001     -0.204607E-17  0.204607E-17   194.406       194.406    
  15  0.743881     -0.295874     -0.798650E-18  0.798650E-18   194.449       194.449    
  16  0.909543     -0.948127E-01 -0.255928E-18  0.255928E-18   194.854       194.854    
  17  0.695861     -0.362605     -0.978777E-18  0.978777E-18   194.870       194.870    
  18  0.959658     -0.411786E-01 -0.111153E-18  0.111153E-18   195.002       195.002    
  19  0.796170     -0.227942     -0.615283E-18  0.615283E-18   195.010       195.010    
  20  0.997979     -0.202331E-02 -0.546151E-20  0.546151E-20   195.025       195.025    
  21  0.923009     -0.801159E-01 -0.216256E-18  0.216256E-18   195.128       195.128    
  22  0.527769     -0.639096     -0.172511E-17  0.172511E-17   195.591       195.591    
  23  0.482398     -0.728985     -0.196775E-17  0.196775E-17   195.809       195.809    
  24  0.225218E-01  -3.79327     -0.102392E-16  0.102392E-16   195.941       195.941    
  25  0.484549     -0.724536     -0.195574E-17  0.195574E-17   196.001       196.001    
  26  0.256859      -1.35923     -0.366895E-17  0.366895E-17   196.063       196.063    
  27  0.968211     -0.323054E-01 -0.872017E-19  0.872017E-19   196.127       196.127    
  28  0.415878     -0.877364     -0.236826E-17  0.236826E-17   196.342       196.342    
  29  0.867787     -0.141810     -0.382786E-18  0.382786E-18   196.611       196.611    
  30  0.344621      -1.06531     -0.287558E-17  0.287558E-17   196.808       196.808    
  31  0.370146     -0.993858     -0.268272E-17  0.268272E-17   197.184       197.184    
  32  0.387766E-01  -3.24994     -0.877254E-17  0.877254E-17   197.581       197.581    
  33  0.262420      -1.33781     -0.361114E-17  0.361114E-17   197.603       197.603    
  34  0.837638     -0.177169     -0.478232E-18  0.478232E-18   197.710       197.710    
  35  0.208835      -1.56621     -0.422766E-17  0.422766E-17   197.742       197.742    
  36  0.217607      -1.52507     -0.411660E-17  0.411660E-17   197.904       197.904    
  37  0.263300      -1.33446     -0.360210E-17  0.360210E-17   198.488       198.488    
  38  0.820482     -0.197863     -0.534090E-18  0.534090E-18   198.734       198.734    
  39  0.737242     -0.304839     -0.822849E-18  0.822849E-18   199.285       199.285    
  40  0.539263     -0.617552     -0.166696E-17  0.166696E-17   199.726       199.726    
  41  0.370701     -0.992360     -0.267867E-17  0.267867E-17   201.382       201.382    
  42  0.787196     -0.239278     -0.645882E-18  0.645882E-18   201.471       201.471    
  43  0.622804     -0.473524     -0.127818E-17  0.127818E-17   202.706       202.706    
  44  0.810841E-01  -2.51227     -0.678135E-17  0.678135E-17   203.055       203.055    
  45  0.399851     -0.916662     -0.247434E-17  0.247434E-17   203.753       203.753    
  46  0.966481     -0.340937E-01 -0.920288E-19  0.920288E-19   204.171       204.171    
  47  0.398407     -0.920280     -0.248411E-17  0.248411E-17   204.213       204.213    
  48  0.149093      -1.90318     -0.513725E-17  0.513725E-17   204.441       204.441    
  49  0.327065      -1.11759     -0.301672E-17  0.301672E-17   204.446       204.446    
  50  0.858059     -0.153082     -0.413215E-18  0.413215E-18   204.595       204.595    
  51  0.902683     -0.102384     -0.276365E-18  0.276365E-18   204.760       204.760    
  52  0.416756     -0.875254     -0.236257E-17  0.236257E-17   206.414       206.414    
  53  0.666015     -0.406443     -0.109711E-17  0.109711E-17   206.471       206.471    
  54  0.744390     -0.295190     -0.796805E-18  0.796805E-18   206.556       206.556    
  55  0.203590      -1.59165     -0.429633E-17  0.429633E-17   207.724       207.724    
  56  0.101097      -2.29168     -0.618591E-17  0.618591E-17   207.841       207.841    
  57  0.467400E-01  -3.06315     -0.826836E-17  0.826836E-17   208.538       208.538    
  58  0.185722      -1.68351     -0.454428E-17  0.454428E-17   209.163       209.163    
  59  0.183166      -1.69736     -0.458168E-17  0.458168E-17   209.738       209.738    
  60  0.629759E-01  -2.76500     -0.746356E-17  0.746356E-17   209.889       209.889    
  61  0.497767     -0.697623     -0.188309E-17  0.188309E-17   190.441       190.441    
loop,thermsimp(1:2)       43  0.506153E-17  0.831075E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    350              203.14          0.80          0.47         20.35
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    203.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       43
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       44
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      349     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.217398      -1.52602     -0.411919E-17  0.411919E-17   183.388       183.388    
   2  0.700064     -0.356584     -0.962525E-18  0.962525E-18   184.352       184.352    
   3  0.568704E-01  -2.86698     -0.773883E-17  0.773883E-17   187.612       187.612    
   4  0.912267     -0.918226E-01 -0.247856E-18  0.247856E-18   190.441       190.441    
   5  0.221450      -1.50756     -0.406935E-17  0.406935E-17   191.359       191.359    
   6  0.132856      -2.01849     -0.544850E-17  0.544850E-17   191.777       191.777    
   7  0.227604      -1.48015     -0.399535E-17  0.399535E-17   192.054       192.054    
   8  0.892606     -0.113610     -0.306666E-18  0.306666E-18   192.343       192.343    
   9  0.786368     -0.240330     -0.648723E-18  0.648723E-18   192.782       192.782    
  10  0.819298     -0.199307     -0.537988E-18  0.537988E-18   192.901       192.901    
  11  0.669969     -0.400524     -0.108113E-17  0.108113E-17   193.343       193.343    
  12  0.476984E-01  -3.04286     -0.821357E-17  0.821357E-17   193.810       193.810    
  13  0.907567     -0.969875E-01 -0.261798E-18  0.261798E-18   194.001       194.001    
  14  0.207099      -1.57456     -0.425020E-17  0.425020E-17   194.053       194.053    
  15  0.726501     -0.319515     -0.862465E-18  0.862465E-18   194.406       194.406    
  16  0.840420     -0.173854     -0.469283E-18  0.469283E-18   194.449       194.449    
  17  0.193124      -1.64442     -0.443878E-17  0.443878E-17   194.854       194.854    
  18  0.670011     -0.400461     -0.108096E-17  0.108096E-17   194.870       194.870    
  19  0.328683      -1.11266     -0.300340E-17  0.300340E-17   195.002       195.002    
  20  0.105268      -2.25125     -0.607678E-17  0.607678E-17   195.010       195.010    
  21  0.818702     -0.200035     -0.539955E-18  0.539955E-18   195.025       195.025    
  22  0.170630      -1.76826     -0.477305E-17  0.477305E-17   195.128       195.128    
  23  0.787450     -0.238956     -0.645012E-18  0.645012E-18   195.591       195.591    
  24  0.918544     -0.849653E-01 -0.229346E-18  0.229346E-18   195.809       195.809    
  25  0.865796E-01  -2.44669     -0.660434E-17  0.660434E-17   195.941       195.941    
  26  0.112582      -2.18407     -0.589545E-17  0.589545E-17   196.001       196.001    
  27  0.558599     -0.582323     -0.157186E-17  0.157186E-17   196.063       196.063    
  28  0.776985     -0.252334     -0.681124E-18  0.681124E-18   196.127       196.127    
  29  0.969305     -0.311761E-01 -0.841535E-19  0.841535E-19   196.342       196.342    
  30  0.823544     -0.194138     -0.524037E-18  0.524037E-18   196.611       196.611    
  31  0.494646     -0.703914     -0.190007E-17  0.190007E-17   196.808       196.808    
  32  0.536944     -0.621862     -0.167859E-17  0.167859E-17   197.184       197.184    
  33  0.756314     -0.279299     -0.753910E-18  0.753910E-18   197.581       197.581    
  34  0.925227     -0.777163E-01 -0.209779E-18  0.209779E-18   197.603       197.603    
  35  0.370253     -0.993569     -0.268194E-17  0.268194E-17   197.710       197.710    
  36  0.151358      -1.88810     -0.509655E-17  0.509655E-17   197.742       197.742    
  37  0.903927     -0.101006     -0.272645E-18  0.272645E-18   197.904       197.904    
  38  0.652674     -0.426677     -0.115173E-17  0.115173E-17   198.488       198.488    
  39  0.663971     -0.409517     -0.110541E-17  0.110541E-17   198.734       198.734    
  40  0.844980E-01  -2.47103     -0.667003E-17  0.667003E-17   199.285       199.285    
  41  0.513326     -0.666843     -0.180001E-17  0.180001E-17   199.726       199.726    
  42  0.728565     -0.316679     -0.854809E-18  0.854809E-18   201.382       201.382    
  43  0.498503     -0.696147     -0.187910E-17  0.187910E-17   201.471       201.471    
  44  0.258828      -1.35159     -0.364835E-17  0.364835E-17   202.706       202.706    
  45  0.265078      -1.32773     -0.358394E-17  0.358394E-17   203.055       203.055    
  46  0.808124     -0.213039     -0.575056E-18  0.575056E-18   203.753       203.753    
  47  0.306575E-01  -3.48488     -0.940671E-17  0.940671E-17   204.171       204.171    
  48  0.717096     -0.332545     -0.897637E-18  0.897637E-18   204.213       204.213    
  49  0.570545     -0.561163     -0.151475E-17  0.151475E-17   204.441       204.441    
  50  0.604964     -0.502586     -0.135663E-17  0.135663E-17   204.446       204.446    
  51  0.734831     -0.308115     -0.831694E-18  0.831694E-18   204.595       204.595    
  52  0.285973      -1.25186     -0.337913E-17  0.337913E-17   204.760       204.760    
  53  0.402323     -0.910501     -0.245771E-17  0.245771E-17   206.414       206.414    
  54  0.124934      -2.07997     -0.561444E-17  0.561444E-17   206.471       206.471    
  55  0.747703     -0.290749     -0.784818E-18  0.784818E-18   206.556       206.556    
  56  0.130062      -2.03974     -0.550587E-17  0.550587E-17   207.724       207.724    
  57  0.323020      -1.13004     -0.305032E-17  0.305032E-17   207.841       207.841    
  58  0.399381E-01  -3.22042     -0.869287E-17  0.869287E-17   208.538       208.538    
  59  0.410444E-01  -3.19310     -0.861912E-17  0.861912E-17   209.163       209.163    
  60  0.283940      -1.25899     -0.339839E-17  0.339839E-17   209.738       209.738    
  61  0.550874     -0.596249     -0.160945E-17  0.160945E-17   203.140       203.140    
loop,thermsimp(1:2)       44  0.411919E-17  0.962525E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    351              199.93          0.80          0.46         20.30
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    199.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       44
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       45
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      350     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.140200      -1.96468     -0.530326E-17  0.530326E-17   183.388       183.388    
   2  0.677049     -0.390012     -0.105276E-17  0.105276E-17   184.352       184.352    
   3  0.252596      -1.37596     -0.371413E-17  0.371413E-17   187.612       187.612    
   4  0.336249      -1.08990     -0.294197E-17  0.294197E-17   190.441       190.441    
   5  0.954196     -0.468862E-01 -0.126560E-18  0.126560E-18   191.359       191.359    
   6  0.535580E-01  -2.92699     -0.790081E-17  0.790081E-17   191.777       191.777    
   7  0.826200     -0.190918     -0.515345E-18  0.515345E-18   192.054       192.054    
   8  0.235555      -1.44581     -0.390267E-17  0.390267E-17   192.343       192.343    
   9  0.756404     -0.279180     -0.753589E-18  0.753589E-18   192.782       192.782    
  10  0.902996     -0.102038     -0.275430E-18  0.275430E-18   192.901       192.901    
  11  0.415196     -0.879005     -0.237269E-17  0.237269E-17   193.343       193.343    
  12  0.555214     -0.588401     -0.158827E-17  0.158827E-17   193.810       193.810    
  13  0.914354E-01  -2.39212     -0.645704E-17  0.645704E-17   194.001       194.001    
  14  0.102144      -2.28137     -0.615810E-17  0.615810E-17   194.053       194.053    
  15  0.745120     -0.294210     -0.794160E-18  0.794160E-18   194.406       194.406    
  16  0.301244      -1.19983     -0.323871E-17  0.323871E-17   194.449       194.449    
  17  0.530858     -0.633261     -0.170936E-17  0.170936E-17   194.854       194.854    
  18  0.836420     -0.178624     -0.482158E-18  0.482158E-18   194.870       194.870    
  19  0.372950     -0.986311     -0.266234E-17  0.266234E-17   195.002       195.002    
  20  0.925684E-01  -2.37981     -0.642380E-17  0.642380E-17   195.010       195.010    
  21  0.155953      -1.85820     -0.501583E-17  0.501583E-17   195.025       195.025    
  22  0.572150     -0.558354     -0.150716E-17  0.150716E-17   195.128       195.128    
  23  0.788104     -0.238125     -0.642770E-18  0.642770E-18   195.591       195.591    
  24  0.216620      -1.52961     -0.412887E-17  0.412887E-17   195.809       195.809    
  25  0.263305      -1.33444     -0.360205E-17  0.360205E-17   195.941       195.941    
  26  0.197063      -1.62423     -0.438428E-17  0.438428E-17   196.001       196.001    
  27  0.120142      -2.11908     -0.572002E-17  0.572002E-17   196.063       196.063    
  28  0.360344      -1.02070     -0.275516E-17  0.275516E-17   196.127       196.127    
  29  0.510787     -0.671802     -0.181339E-17  0.181339E-17   196.342       196.342    
  30  0.306640      -1.18208     -0.319079E-17  0.319079E-17   196.611       196.611    
  31  0.258613      -1.35242     -0.365059E-17  0.365059E-17   196.808       196.808    
  32  0.931526     -0.709307E-01 -0.191463E-18  0.191463E-18   197.184       197.184    
  33  0.587039     -0.532665     -0.143782E-17  0.143782E-17   197.581       197.581    
  34  0.171443      -1.76350     -0.476021E-17  0.476021E-17   197.603       197.603    
  35  0.661850E-01  -2.71530     -0.732940E-17  0.732940E-17   197.710       197.710    
  36  0.977341     -0.229195E-01 -0.618664E-19  0.618664E-19   197.742       197.742    
  37  0.532792E-01  -2.93221     -0.791490E-17  0.791490E-17   197.904       197.904    
  38  0.642541     -0.442324     -0.119396E-17  0.119396E-17   198.488       198.488    
  39  0.200086      -1.60901     -0.434319E-17  0.434319E-17   198.734       198.734    
  40  0.708423     -0.344715     -0.930486E-18  0.930486E-18   199.285       199.285    
  41  0.928550     -0.741310E-01 -0.200101E-18  0.200101E-18   199.726       199.726    
  42  0.575082     -0.553243     -0.149337E-17  0.149337E-17   201.382       201.382    
  43  0.929509     -0.730989E-01 -0.197315E-18  0.197315E-18   201.471       201.471    
  44  0.340527      -1.07726     -0.290785E-17  0.290785E-17   202.706       202.706    
  45  0.247115      -1.39790     -0.377335E-17  0.377335E-17   203.055       203.055    
  46  0.871956     -0.137017     -0.369849E-18  0.369849E-18   203.140       203.140    
  47  0.380508     -0.966249     -0.260819E-17  0.260819E-17   203.753       203.753    
  48  0.250012E-01  -3.68883     -0.995724E-17  0.995724E-17   204.171       204.171    
  49  0.112955      -2.18077     -0.588653E-17  0.588653E-17   204.213       204.213    
  50  0.942260     -0.594745E-01 -0.160539E-18  0.160539E-18   204.441       204.441    
  51  0.978971     -0.212531E-01 -0.573683E-19  0.573683E-19   204.446       204.446    
  52  0.259868      -1.34758     -0.363752E-17  0.363752E-17   204.595       204.595    
  53  0.600369     -0.510210     -0.137721E-17  0.137721E-17   204.760       204.760    
  54  0.510278E-01  -2.97538     -0.803144E-17  0.803144E-17   206.414       206.414    
  55  0.951373E-01  -2.35243     -0.634991E-17  0.634991E-17   206.471       206.471    
  56  0.479653     -0.734692     -0.198315E-17  0.198315E-17   206.556       206.556    
  57  0.408628     -0.894949     -0.241573E-17  0.241573E-17   207.724       207.724    
  58  0.360288      -1.02085     -0.275558E-17  0.275558E-17   207.841       207.841    
  59  0.224476      -1.49399     -0.403271E-17  0.403271E-17   208.538       208.538    
  60  0.585743     -0.534875     -0.144378E-17  0.144378E-17   209.163       209.163    
  61  0.820792     -0.197485     -0.533071E-18  0.533071E-18   199.932       199.932    
loop,thermsimp(1:2)       45  0.530326E-17  0.105276E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    352              193.77          0.79          0.46         20.32
Just calling func    0   0         23.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       45
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       46
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      351
neval,tstepnext:      351     351

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.545686     -0.605711     -0.163499E-17  0.163499E-17   183.388       183.388    
   2  0.904864     -0.999702E-01 -0.269849E-18  0.269849E-18   184.352       184.352    
   3  0.885544     -0.121553     -0.328108E-18  0.328108E-18   187.612       187.612    
   4  0.644309     -0.439578     -0.118655E-17  0.118655E-17   190.441       190.441    
   5  0.593443     -0.521814     -0.140853E-17  0.140853E-17   191.359       191.359    
   6  0.806560     -0.214977     -0.580285E-18  0.580285E-18   191.777       191.777    
   7  0.816503     -0.202724     -0.547212E-18  0.547212E-18   192.054       192.054    
   8  0.557472     -0.584343     -0.157731E-17  0.157731E-17   192.343       192.343    
   9  0.322457      -1.13179     -0.305502E-17  0.305502E-17   192.782       192.782    
  10  0.450886     -0.796541     -0.215010E-17  0.215010E-17   192.901       192.901    
  11  0.714987     -0.335490     -0.905587E-18  0.905587E-18   193.343       193.343    
  12  0.658923     -0.417149     -0.112601E-17  0.112601E-17   193.810       193.810    
  13  0.672334     -0.397001     -0.107162E-17  0.107162E-17   194.001       194.001    
  14  0.333740      -1.09739     -0.296219E-17  0.296219E-17   194.053       194.053    
  15  0.126924      -2.06417     -0.557180E-17  0.557180E-17   194.406       194.406    
  16  0.106260      -2.24187     -0.605147E-17  0.605147E-17   194.449       194.449    
  17  0.439583     -0.821928     -0.221863E-17  0.221863E-17   194.854       194.854    
  18  0.628503     -0.464414     -0.125359E-17  0.125359E-17   194.870       194.870    
  19  0.162896      -1.81464     -0.489825E-17  0.489825E-17   195.002       195.002    
  20  0.165539      -1.79855     -0.485482E-17  0.485482E-17   195.010       195.010    
  21  0.734030     -0.309205     -0.834635E-18  0.834635E-18   195.025       195.025    
  22  0.152376      -1.88141     -0.507847E-17  0.507847E-17   195.128       195.128    
  23  0.910683     -0.935608E-01 -0.252548E-18  0.252548E-18   195.591       195.591    
  24  0.676766     -0.390430     -0.105389E-17  0.105389E-17   195.809       195.809    
  25  0.450119     -0.798242     -0.215469E-17  0.215469E-17   195.941       195.941    
  26  0.202865      -1.59521     -0.430595E-17  0.430595E-17   196.001       196.001    
  27  0.436510     -0.828944     -0.223756E-17  0.223756E-17   196.063       196.063    
  28  0.425045     -0.855560     -0.230941E-17  0.230941E-17   196.127       196.127    
  29  0.922492     -0.806771E-01 -0.217771E-18  0.217771E-18   196.342       196.342    
  30  0.715104     -0.335327     -0.905145E-18  0.905145E-18   196.611       196.611    
  31  0.714104     -0.336726     -0.908923E-18  0.908923E-18   196.808       196.808    
  32  0.569316     -0.563319     -0.152056E-17  0.152056E-17   197.184       197.184    
  33  0.628551E-01  -2.76692     -0.746874E-17  0.746874E-17   197.581       197.581    
  34  0.746808     -0.291947     -0.788051E-18  0.788051E-18   197.603       197.603    
  35  0.747014     -0.291671     -0.787307E-18  0.787307E-18   197.710       197.710    
  36  0.518107     -0.657573     -0.177498E-17  0.177498E-17   197.742       197.742    
  37  0.276480      -1.28562     -0.347026E-17  0.347026E-17   197.904       197.904    
  38  0.442345     -0.815664     -0.220172E-17  0.220172E-17   198.488       198.488    
  39  0.611448     -0.491926     -0.132785E-17  0.132785E-17   198.734       198.734    
  40  0.340331      -1.07784     -0.290940E-17  0.290940E-17   199.285       199.285    
  41  0.635799     -0.452872     -0.122244E-17  0.122244E-17   199.726       199.726    
  42  0.772960     -0.257528     -0.695143E-18  0.695143E-18   199.932       199.932    
  43  0.685267E-01  -2.68053     -0.723555E-17  0.723555E-17   201.382       201.382    
  44  0.168162      -1.78282     -0.481237E-17  0.481237E-17   201.471       201.471    
  45  0.277666      -1.28133     -0.345870E-17  0.345870E-17   202.706       202.706    
  46  0.640770     -0.445084     -0.120141E-17  0.120141E-17   203.055       203.055    
  47  0.691172     -0.369366     -0.997027E-18  0.997027E-18   203.140       203.140    
  48  0.376017     -0.978121     -0.264024E-17  0.264024E-17   203.753       203.753    
  49  0.760648E-01  -2.57617     -0.695384E-17  0.695384E-17   204.171       204.171    
  50  0.889191E-01  -2.42003     -0.653237E-17  0.653237E-17   204.213       204.213    
  51  0.190789      -1.65659     -0.447162E-17  0.447162E-17   204.441       204.441    
  52  0.962674     -0.380400E-01 -0.102681E-18  0.102681E-18   204.446       204.446    
  53  0.757286     -0.278014     -0.750441E-18  0.750441E-18   204.595       204.595    
  54  0.621945     -0.474904     -0.128190E-17  0.128190E-17   204.760       204.760    
  55  0.975699     -0.246016E-01 -0.664071E-19  0.664071E-19   206.414       206.414    
  56  0.569098     -0.563703     -0.152160E-17  0.152160E-17   206.471       206.471    
  57  0.251529      -1.38020     -0.372556E-17  0.372556E-17   206.556       206.556    
  58  0.682524     -0.381957     -0.103101E-17  0.103101E-17   207.724       207.724    
  59  0.250063      -1.38604     -0.374134E-17  0.374134E-17   207.841       207.841    
  60  0.566525     -0.568234     -0.153383E-17  0.153383E-17   208.538       208.538    
  61  0.733279     -0.310229     -0.837399E-18  0.837399E-18   193.773       193.773    
loop,thermsimp(1:2)       46  0.163499E-17  0.269849E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    353              204.52          0.80          0.46         20.19
Just calling func    0   0         22.89


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    204.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       46
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.269929E-17           351
loop is:       47
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.539859E-18           361

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      352     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.470563     -0.753825     -0.406959E-18  0.406959E-18   183.388       183.388    
   2  0.988665     -0.113993E-01 -0.615404E-20  0.615404E-20   184.352       184.352    
   3  0.119631      -2.12335     -0.114631E-17  0.114631E-17   187.612       187.612    
   4  0.266244      -1.32334     -0.714417E-18  0.714417E-18   190.441       190.441    
   5  0.465842     -0.763909     -0.412403E-18  0.412403E-18   191.359       191.359    
   6  0.508839     -0.675623     -0.364741E-18  0.364741E-18   191.777       191.777    
   7  0.509621     -0.674088     -0.363912E-18  0.363912E-18   192.054       192.054    
   8  0.843738     -0.169913     -0.917290E-19  0.917290E-19   192.343       192.343    
   9  0.907382     -0.971921E-01 -0.524700E-19  0.524700E-19   192.782       192.782    
  10  0.716125     -0.333900     -0.180259E-18  0.180259E-18   192.901       192.901    
  11  0.590831     -0.526226     -0.284088E-18  0.284088E-18   193.343       193.343    
  12  0.188272      -1.66987     -0.901492E-18  0.901492E-18   193.773       193.773    
  13  0.762591     -0.271034     -0.146320E-18  0.146320E-18   193.810       193.810    
  14  0.662249     -0.412113     -0.222483E-18  0.222483E-18   194.001       194.001    
  15  0.182458      -1.70124     -0.918427E-18  0.918427E-18   194.053       194.053    
  16  0.101019E-01  -4.59503     -0.248067E-17  0.248067E-17   194.406       194.406    
  17  0.802915     -0.219507     -0.118503E-18  0.118503E-18   194.449       194.449    
  18  0.557581     -0.584148     -0.315358E-18  0.315358E-18   194.854       194.854    
  19  0.743487     -0.296403     -0.160016E-18  0.160016E-18   194.870       194.870    
  20  0.882446     -0.125057     -0.675134E-19  0.675134E-19   195.002       195.002    
  21  0.150663      -1.89271     -0.102180E-17  0.102180E-17   195.010       195.010    
  22  0.747229     -0.291384     -0.157306E-18  0.157306E-18   195.025       195.025    
  23  0.524268     -0.645752     -0.348615E-18  0.348615E-18   195.128       195.128    
  24  0.252358      -1.37691     -0.743336E-18  0.743336E-18   195.591       195.591    
  25  0.605067     -0.502415     -0.271233E-18  0.271233E-18   195.809       195.809    
  26  0.149217      -1.90236     -0.102700E-17  0.102700E-17   195.941       195.941    
  27  0.803279     -0.219053     -0.118258E-18  0.118258E-18   196.001       196.001    
  28  0.981835     -0.183319E-01 -0.989666E-20  0.989666E-20   196.063       196.063    
  29  0.942525     -0.591930E-01 -0.319559E-19  0.319559E-19   196.127       196.127    
  30  0.421673     -0.863524     -0.466181E-18  0.466181E-18   196.342       196.342    
  31  0.967043     -0.335125E-01 -0.180920E-19  0.180920E-19   196.611       196.611    
  32  0.578819     -0.546765     -0.295176E-18  0.295176E-18   196.808       196.808    
  33  0.747659     -0.290808     -0.156995E-18  0.156995E-18   197.184       197.184    
  34  0.964089     -0.365713E-01 -0.197434E-19  0.197434E-19   197.581       197.581    
  35  0.513085     -0.667313     -0.360255E-18  0.360255E-18   197.603       197.603    
  36  0.233661      -1.45389     -0.784893E-18  0.784893E-18   197.710       197.710    
  37  0.204974      -1.58487     -0.855607E-18  0.855607E-18   197.742       197.742    
  38  0.544565     -0.607768     -0.328109E-18  0.328109E-18   197.904       197.904    
  39  0.299343      -1.20616     -0.651158E-18  0.651158E-18   198.488       198.488    
  40  0.803894     -0.218288     -0.117845E-18  0.117845E-18   198.734       198.734    
  41  0.776899     -0.252446     -0.136285E-18  0.136285E-18   199.285       199.285    
  42  0.492523     -0.708213     -0.382335E-18  0.382335E-18   199.726       199.726    
  43  0.656127     -0.421400     -0.227497E-18  0.227497E-18   199.932       199.932    
  44  0.440032     -0.820908     -0.443175E-18  0.443175E-18   201.382       201.382    
  45  0.227715      -1.47966     -0.798807E-18  0.798807E-18   201.471       201.471    
  46  0.420413     -0.866517     -0.467797E-18  0.467797E-18   202.706       202.706    
  47  0.106187      -2.24256     -0.121066E-17  0.121066E-17   203.055       203.055    
  48  0.433780     -0.835217     -0.450899E-18  0.450899E-18   203.140       203.140    
  49  0.600309     -0.510311     -0.275496E-18  0.275496E-18   203.753       203.753    
  50  0.417652     -0.873108     -0.471355E-18  0.471355E-18   204.171       204.171    
  51  0.209860      -1.56132     -0.842890E-18  0.842890E-18   204.213       204.213    
  52  0.403323     -0.908017     -0.490201E-18  0.490201E-18   204.441       204.441    
  53  0.351124      -1.04662     -0.565025E-18  0.565025E-18   204.446       204.446    
  54  0.142331      -1.94960     -0.105251E-17  0.105251E-17   204.595       204.595    
  55  0.534596     -0.626244     -0.338083E-18  0.338083E-18   204.760       204.760    
  56  0.385079     -0.954306     -0.515190E-18  0.515190E-18   206.414       206.414    
  57  0.224935      -1.49194     -0.805439E-18  0.805439E-18   206.471       206.471    
  58  0.472333     -0.750071     -0.404933E-18  0.404933E-18   206.556       206.556    
  59  0.232565E-01  -3.76117     -0.203050E-17  0.203050E-17   207.724       207.724    
  60  0.646176     -0.436683     -0.235747E-18  0.235747E-18   207.841       207.841    
  61  0.537854     -0.620169     -0.334804E-18  0.334804E-18   204.520       204.520    
loop,thermsimp(1:2)       47  0.406959E-18  0.615404E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    354              188.00          0.80          0.46         20.35
Just calling func    0   0         23.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       47
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       48
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      353     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.953209     -0.479211E-01 -0.258706E-19  0.258706E-19   183.388       183.388    
   2  0.407755E-01  -3.19967     -0.172737E-17  0.172737E-17   184.352       184.352    
   3  0.312275      -1.16387     -0.628326E-18  0.628326E-18   187.612       187.612    
   4  0.936809     -0.652758E-01 -0.352397E-19  0.352397E-19   190.441       190.441    
   5  0.355487      -1.03427     -0.558358E-18  0.558358E-18   191.359       191.359    
   6  0.246755      -1.39936     -0.755457E-18  0.755457E-18   191.777       191.777    
   7  0.321480      -1.13482     -0.612643E-18  0.612643E-18   192.054       192.054    
   8  0.563674     -0.573280     -0.309490E-18  0.309490E-18   192.343       192.343    
   9  0.136191      -1.99370     -0.107632E-17  0.107632E-17   192.782       192.782    
  10  0.972704     -0.276750E-01 -0.149406E-19  0.149406E-19   192.901       192.901    
  11  0.389570     -0.942711     -0.508931E-18  0.508931E-18   193.343       193.343    
  12  0.991706     -0.832817E-02 -0.449603E-20  0.449603E-20   193.773       193.773    
  13  0.609799     -0.494625     -0.267028E-18  0.267028E-18   193.810       193.810    
  14  0.249392      -1.38873     -0.749717E-18  0.749717E-18   194.001       194.001    
  15  0.587346     -0.532141     -0.287281E-18  0.287281E-18   194.053       194.053    
  16  0.302188      -1.19671     -0.646052E-18  0.646052E-18   194.406       194.406    
  17  0.319684      -1.14042     -0.615666E-18  0.615666E-18   194.449       194.449    
  18  0.591019     -0.525907     -0.283916E-18  0.283916E-18   194.854       194.854    
  19  0.263119      -1.33515     -0.720791E-18  0.720791E-18   194.870       194.870    
  20  0.793697E-01  -2.53364     -0.136781E-17  0.136781E-17   195.002       195.002    
  21  0.547035     -0.603242     -0.325666E-18  0.325666E-18   195.010       195.010    
  22  0.290262      -1.23697     -0.667790E-18  0.667790E-18   195.025       195.025    
  23  0.480752     -0.732404     -0.395395E-18  0.395395E-18   195.128       195.128    
  24  0.232814      -1.45752     -0.786853E-18  0.786853E-18   195.591       195.591    
  25  0.571338     -0.559775     -0.302199E-18  0.302199E-18   195.809       195.809    
  26  0.304636      -1.18864     -0.641697E-18  0.641697E-18   195.941       195.941    
  27  0.222509      -1.50279     -0.811294E-18  0.811294E-18   196.001       196.001    
  28  0.145682E-01  -4.22891     -0.228302E-17  0.228302E-17   196.063       196.063    
  29  0.535717     -0.624149     -0.336952E-18  0.336952E-18   196.127       196.127    
  30  0.956416     -0.445626E-01 -0.240575E-19  0.240575E-19   196.342       196.342    
  31  0.578183     -0.547865     -0.295770E-18  0.295770E-18   196.611       196.611    
  32  0.868819     -0.140620     -0.759152E-19  0.759152E-19   196.808       196.808    
  33  0.594461     -0.520101     -0.280781E-18  0.280781E-18   197.184       197.184    
  34  0.303464      -1.19249     -0.643777E-18  0.643777E-18   197.581       197.581    
  35  0.839670     -0.174746     -0.943384E-19  0.943384E-19   197.603       197.603    
  36  0.902575     -0.102503     -0.553372E-19  0.553372E-19   197.710       197.710    
  37  0.732003     -0.311971     -0.168420E-18  0.168420E-18   197.742       197.742    
  38  0.125270      -2.07729     -0.112144E-17  0.112144E-17   197.904       197.904    
  39  0.523235     -0.647724     -0.349680E-18  0.349680E-18   198.488       198.488    
  40  0.378423     -0.971742     -0.524604E-18  0.524604E-18   198.734       198.734    
  41  0.203722      -1.59100     -0.858916E-18  0.858916E-18   199.285       199.285    
  42  0.681155     -0.383965     -0.207287E-18  0.207287E-18   199.726       199.726    
  43  0.621538E-01  -2.77814     -0.149981E-17  0.149981E-17   199.932       199.932    
  44  0.282608      -1.26369     -0.682217E-18  0.682217E-18   201.382       201.382    
  45  0.212102      -1.55069     -0.837152E-18  0.837152E-18   201.471       201.471    
  46  0.312499      -1.16315     -0.627939E-18  0.627939E-18   202.706       202.706    
  47  0.252764      -1.37530     -0.742467E-18  0.742467E-18   203.055       203.055    
  48  0.167725E-01  -4.08802     -0.220695E-17  0.220695E-17   203.140       203.140    
  49  0.440375     -0.820128     -0.442753E-18  0.442753E-18   203.753       203.753    
  50  0.725986     -0.320224     -0.172876E-18  0.172876E-18   204.171       204.171    
  51  0.736261     -0.306170     -0.165289E-18  0.165289E-18   204.213       204.213    
  52  0.717878     -0.331456     -0.178939E-18  0.178939E-18   204.441       204.441    
  53  0.502981     -0.687202     -0.370992E-18  0.370992E-18   204.446       204.446    
  54  0.283856      -1.25929     -0.679838E-18  0.679838E-18   204.520       204.520    
  55  0.355154      -1.03520     -0.558864E-18  0.558864E-18   204.595       204.595    
  56  0.400005     -0.916277     -0.494661E-18  0.494661E-18   204.760       204.760    
  57  0.492594     -0.708071     -0.382258E-18  0.382258E-18   206.414       206.414    
  58  0.819704     -0.198811     -0.107330E-18  0.107330E-18   206.471       206.471    
  59  0.685904     -0.377017     -0.203536E-18  0.203536E-18   206.556       206.556    
  60  0.980961     -0.192222E-01 -0.103773E-19  0.103773E-19   207.724       207.724    
  61  0.909385     -0.949863E-01 -0.512792E-19  0.512792E-19   187.995       187.995    
loop,thermsimp(1:2)       48  0.258706E-19  0.172737E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    355              188.28          0.80          0.47         20.30
Just calling func    0   0         23.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       48
neval is:      354
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       49
neval is:      354


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      354     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.407283     -0.898248     -0.484927E-18  0.484927E-18   183.388       183.388    
   2  0.632022     -0.458832     -0.247704E-18  0.247704E-18   184.352       184.352    
   3  0.507573     -0.678114     -0.366086E-18  0.366086E-18   187.612       187.612    
   4  0.233859      -1.45304     -0.784435E-18  0.784435E-18   187.995       187.995    
   5  0.709117     -0.343735     -0.185568E-18  0.185568E-18   190.441       190.441    
   6  0.281467E-01  -3.57032     -0.192747E-17  0.192747E-17   191.359       191.359    
   7  0.819487     -0.199077     -0.107474E-18  0.107474E-18   191.777       191.777    
   8  0.316844      -1.14935     -0.620484E-18  0.620484E-18   192.054       192.054    
   9  0.912281E-01  -2.39439     -0.129263E-17  0.129263E-17   192.343       192.343    
  10  0.495366     -0.702459     -0.379229E-18  0.379229E-18   192.782       192.782    
  11  0.786463     -0.240209     -0.129679E-18  0.129679E-18   192.901       192.901    
  12  0.656928     -0.420180     -0.226838E-18  0.226838E-18   193.343       193.343    
  13  0.973311     -0.270520E-01 -0.146043E-19  0.146043E-19   193.773       193.773    
  14  0.425083E-01  -3.15806     -0.170490E-17  0.170490E-17   193.810       193.810    
  15  0.330991      -1.10566     -0.596902E-18  0.596902E-18   194.001       194.001    
  16  0.228326      -1.47698     -0.797362E-18  0.797362E-18   194.053       194.053    
  17  0.358469      -1.02591     -0.553848E-18  0.553848E-18   194.406       194.406    
  18  0.448634     -0.801548     -0.432723E-18  0.432723E-18   194.449       194.449    
  19  0.924418     -0.785906E-01 -0.424278E-19  0.424278E-19   194.854       194.854    
  20  0.514218     -0.665107     -0.359064E-18  0.359064E-18   194.870       194.870    
  21  0.973636     -0.267179E-01 -0.144239E-19  0.144239E-19   195.002       195.002    
  22  0.712004     -0.339672     -0.183375E-18  0.183375E-18   195.010       195.010    
  23  0.478261     -0.737599     -0.398200E-18  0.398200E-18   195.025       195.025    
  24  0.885539     -0.121559     -0.656246E-19  0.656246E-19   195.128       195.128    
  25  0.393603     -0.932414     -0.503372E-18  0.503372E-18   195.591       195.591    
  26  0.773274     -0.257121     -0.138809E-18  0.138809E-18   195.809       195.809    
  27  0.163961      -1.80813     -0.976133E-18  0.976133E-18   195.941       195.941    
  28  0.712914     -0.338395     -0.182686E-18  0.182686E-18   196.001       196.001    
  29  0.622950     -0.473289     -0.255509E-18  0.255509E-18   196.063       196.063    
  30  0.492500     -0.708262     -0.382361E-18  0.382361E-18   196.127       196.127    
  31  0.587216     -0.532363     -0.287401E-18  0.287401E-18   196.342       196.342    
  32  0.889420     -0.117186     -0.632638E-19  0.632638E-19   196.611       196.611    
  33  0.247352      -1.39694     -0.754151E-18  0.754151E-18   196.808       196.808    
  34  0.879455     -0.128453     -0.693466E-19  0.693466E-19   197.184       197.184    
  35  0.678748     -0.387506     -0.209198E-18  0.209198E-18   197.581       197.581    
  36  0.585851E-01  -2.83727     -0.153173E-17  0.153173E-17   197.603       197.603    
  37  0.765663     -0.267013     -0.144149E-18  0.144149E-18   197.710       197.710    
  38  0.225374E-02  -6.09516     -0.329053E-17  0.329053E-17   197.742       197.742    
  39  0.508726     -0.675845     -0.364861E-18  0.364861E-18   197.904       197.904    
  40  0.750515     -0.286995     -0.154937E-18  0.154937E-18   198.488       198.488    
  41  0.889821     -0.116735     -0.630203E-19  0.630203E-19   198.734       198.734    
  42  0.564400     -0.571992     -0.308795E-18  0.308795E-18   199.285       199.285    
  43  0.145891      -1.92489     -0.103917E-17  0.103917E-17   199.726       199.726    
  44  0.556217     -0.586597     -0.316680E-18  0.316680E-18   199.932       199.932    
  45  0.354656      -1.03661     -0.559622E-18  0.559622E-18   201.382       201.382    
  46  0.544158     -0.608516     -0.328513E-18  0.328513E-18   201.471       201.471    
  47  0.308382      -1.17642     -0.635099E-18  0.635099E-18   202.706       202.706    
  48  0.570388E-01  -2.86402     -0.154617E-17  0.154617E-17   203.055       203.055    
  49  0.560308E-01  -2.88185     -0.155579E-17  0.155579E-17   203.140       203.140    
  50  0.113882      -2.17260     -0.117289E-17  0.117289E-17   203.753       203.753    
  51  0.341715      -1.07378     -0.579688E-18  0.579688E-18   204.171       204.171    
  52  0.222617      -1.50230     -0.811031E-18  0.811031E-18   204.213       204.213    
  53  0.183848      -1.69365     -0.914330E-18  0.914330E-18   204.441       204.441    
  54  0.358682      -1.02532     -0.553527E-18  0.553527E-18   204.446       204.446    
  55  0.266539      -1.32223     -0.713820E-18  0.713820E-18   204.520       204.520    
  56  0.222777      -1.50158     -0.810643E-18  0.810643E-18   204.595       204.595    
  57  0.283746      -1.25968     -0.680048E-18  0.680048E-18   204.760       204.760    
  58  0.835688     -0.179499     -0.969043E-19  0.969043E-19   206.414       206.414    
  59  0.604854     -0.502768     -0.271424E-18  0.271424E-18   206.471       206.471    
  60  0.491661     -0.709965     -0.383281E-18  0.383281E-18   206.556       206.556    
  61  0.198996      -1.61447     -0.871585E-18  0.871585E-18   188.280       188.280    
loop,thermsimp(1:2)       49  0.484927E-18  0.247704E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    356              192.06          0.80          0.47         20.27
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       49
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       50
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      355     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.845665     -0.167632     -0.904974E-19  0.904974E-19   183.388       183.388    
   2  0.463720     -0.768474     -0.414867E-18  0.414867E-18   184.352       184.352    
   3  0.391374     -0.938092     -0.506437E-18  0.506437E-18   187.612       187.612    
   4  0.994625     -0.538919E-02 -0.290940E-20  0.290940E-20   187.995       187.995    
   5  0.640197     -0.445980     -0.240766E-18  0.240766E-18   188.280       188.280    
   6  0.426374     -0.852439     -0.460197E-18  0.460197E-18   190.441       190.441    
   7  0.360862E-02  -5.62443     -0.303640E-17  0.303640E-17   191.359       191.359    
   8  0.624591     -0.470659     -0.254089E-18  0.254089E-18   191.777       191.777    
   9  0.378629     -0.971198     -0.524310E-18  0.524310E-18   192.054       192.054    
  10  0.471055     -0.752781     -0.406395E-18  0.406395E-18   192.343       192.343    
  11  0.660420     -0.414879     -0.223976E-18  0.223976E-18   192.782       192.782    
  12  0.427037E-01  -3.15347     -0.170243E-17  0.170243E-17   192.901       192.901    
  13  0.951253     -0.499753E-01 -0.269796E-19  0.269796E-19   193.343       193.343    
  14  0.133708      -2.01210     -0.108625E-17  0.108625E-17   193.773       193.773    
  15  0.435838     -0.830485     -0.448345E-18  0.448345E-18   193.810       193.810    
  16  0.846435     -0.166722     -0.900061E-19  0.900061E-19   194.001       194.001    
  17  0.958332     -0.425615E-01 -0.229772E-19  0.229772E-19   194.053       194.053    
  18  0.672660     -0.396515     -0.214062E-18  0.214062E-18   194.406       194.406    
  19  0.239079      -1.43096     -0.772517E-18  0.772517E-18   194.449       194.449    
  20  0.827885     -0.188881     -0.101969E-18  0.101969E-18   194.854       194.854    
  21  0.851161     -0.161154     -0.870005E-19  0.870005E-19   194.870       194.870    
  22  0.960667     -0.401271E-01 -0.216630E-19  0.216630E-19   195.002       195.002    
  23  0.732673     -0.311056     -0.167926E-18  0.167926E-18   195.010       195.010    
  24  0.623631     -0.472196     -0.254919E-18  0.254919E-18   195.025       195.025    
  25  0.426556     -0.852011     -0.459966E-18  0.459966E-18   195.128       195.128    
  26  0.129022      -2.04778     -0.110551E-17  0.110551E-17   195.591       195.591    
  27  0.483856     -0.725968     -0.391920E-18  0.391920E-18   195.809       195.809    
  28  0.164321E-01  -4.10852     -0.221802E-17  0.221802E-17   195.941       195.941    
  29  0.169229      -1.77651     -0.959062E-18  0.959062E-18   196.001       196.001    
  30  0.940819     -0.610045E-01 -0.329338E-19  0.329338E-19   196.063       196.063    
  31  0.947899     -0.535074E-01 -0.288864E-19  0.288864E-19   196.127       196.127    
  32  0.344606      -1.06535     -0.575140E-18  0.575140E-18   196.342       196.342    
  33  0.144900      -1.93171     -0.104285E-17  0.104285E-17   196.611       196.611    
  34  0.267483      -1.31870     -0.711912E-18  0.711912E-18   196.808       196.808    
  35  0.329865      -1.10907     -0.598743E-18  0.598743E-18   197.184       197.184    
  36  0.294139      -1.22370     -0.660628E-18  0.660628E-18   197.581       197.581    
  37  0.512200     -0.669041     -0.361188E-18  0.361188E-18   197.603       197.603    
  38  0.841463     -0.172613     -0.931867E-19  0.931867E-19   197.710       197.710    
  39  0.394241     -0.930792     -0.502496E-18  0.502496E-18   197.742       197.742    
  40  0.472631     -0.749439     -0.404591E-18  0.404591E-18   197.904       197.904    
  41  0.615825E-01  -2.78738     -0.150479E-17  0.150479E-17   198.488       198.488    
  42  0.801889     -0.220785     -0.119193E-18  0.119193E-18   198.734       198.734    
  43  0.657522     -0.419277     -0.226351E-18  0.226351E-18   199.285       199.285    
  44  0.322294      -1.13229     -0.611278E-18  0.611278E-18   199.726       199.726    
  45  0.297863      -1.21112     -0.653835E-18  0.653835E-18   199.932       199.932    
  46  0.767716     -0.264335     -0.142704E-18  0.142704E-18   201.382       201.382    
  47  0.675826     -0.391820     -0.211527E-18  0.211527E-18   201.471       201.471    
  48  0.877792     -0.130345     -0.703680E-19  0.703680E-19   202.706       202.706    
  49  0.997128     -0.287593E-02 -0.155260E-20  0.155260E-20   203.055       203.055    
  50  0.123873      -2.08850     -0.112749E-17  0.112749E-17   203.140       203.140    
  51  0.349979      -1.04988     -0.566789E-18  0.566789E-18   203.753       203.753    
  52  0.791214     -0.234186     -0.126428E-18  0.126428E-18   204.171       204.171    
  53  0.179665      -1.71666     -0.926755E-18  0.926755E-18   204.213       204.213    
  54  0.758243     -0.276751     -0.149407E-18  0.149407E-18   204.441       204.441    
  55  0.566553     -0.568185     -0.306740E-18  0.306740E-18   204.446       204.446    
  56  0.466758     -0.761944     -0.411342E-18  0.411342E-18   204.520       204.520    
  57  0.404765     -0.904448     -0.488274E-18  0.488274E-18   204.595       204.595    
  58  0.706996     -0.346731     -0.187186E-18  0.187186E-18   204.760       204.760    
  59  0.601993     -0.507510     -0.273984E-18  0.273984E-18   206.414       206.414    
  60  0.849121     -0.163553     -0.882957E-19  0.882957E-19   206.471       206.471    
  61  0.747999     -0.290354     -0.156750E-18  0.156750E-18   192.064       192.064    
loop,thermsimp(1:2)       50  0.904974E-19  0.414867E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    357              207.70          0.78          0.47         20.32
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    358              197.24          0.77          0.47         20.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    197.24
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       50
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       51
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      357     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.562266     -0.575781     -0.310841E-18  0.310841E-18   183.388       183.388    
   2  0.977443     -0.228149E-01 -0.123168E-19  0.123168E-19   184.352       184.352    
   3  0.584716E-01  -2.83921     -0.153277E-17  0.153277E-17   187.612       187.612    
   4  0.161052      -1.82603     -0.985797E-18  0.985797E-18   187.995       187.995    
   5  0.186796      -1.67774     -0.905741E-18  0.905741E-18   188.280       188.280    
   6  0.634807     -0.454435     -0.245331E-18  0.245331E-18   190.441       190.441    
   7  0.116244      -2.15206     -0.116181E-17  0.116181E-17   191.359       191.359    
   8  0.376147     -0.977775     -0.527860E-18  0.527860E-18   191.777       191.777    
   9  0.390670     -0.939892     -0.507409E-18  0.507409E-18   192.054       192.054    
  10  0.108916      -2.21718     -0.119696E-17  0.119696E-17   192.064       192.064    
  11  0.834291     -0.181173     -0.978081E-19  0.978081E-19   192.343       192.343    
  12  0.113661      -2.17453     -0.117394E-17  0.117394E-17   192.782       192.782    
  13  0.408380     -0.895557     -0.483474E-18  0.483474E-18   192.901       192.901    
  14  0.252317      -1.37707     -0.743422E-18  0.743422E-18   193.343       193.343    
  15  0.724794     -0.321867     -0.173763E-18  0.173763E-18   193.773       193.773    
  16  0.741302     -0.299348     -0.161605E-18  0.161605E-18   193.810       193.810    
  17  0.479622     -0.734757     -0.396665E-18  0.396665E-18   194.001       194.001    
  18  0.187432      -1.67434     -0.903906E-18  0.903906E-18   194.053       194.053    
  19  0.616958     -0.482954     -0.260727E-18  0.260727E-18   194.406       194.406    
  20  0.380714     -0.965707     -0.521346E-18  0.521346E-18   194.449       194.449    
  21  0.370612     -0.992600     -0.535864E-18  0.535864E-18   194.854       194.854    
  22  0.709129     -0.343718     -0.185559E-18  0.185559E-18   194.870       194.870    
  23  0.267222      -1.31968     -0.712439E-18  0.712439E-18   195.002       195.002    
  24  0.487417     -0.718634     -0.387961E-18  0.387961E-18   195.010       195.010    
  25  0.133328      -2.01494     -0.108778E-17  0.108778E-17   195.025       195.025    
  26  0.971958     -0.284427E-01 -0.153551E-19  0.153551E-19   195.128       195.128    
  27  0.379610E-01  -3.27120     -0.176598E-17  0.176598E-17   195.591       195.591    
  28  0.971879     -0.285240E-01 -0.153989E-19  0.153989E-19   195.809       195.809    
  29  0.267258E-01  -3.62213     -0.195544E-17  0.195544E-17   195.941       195.941    
  30  0.987911     -0.121624E-01 -0.656598E-20  0.656598E-20   196.001       196.001    
  31  0.416239E-01  -3.17908     -0.171626E-17  0.171626E-17   196.063       196.063    
  32  0.699828     -0.356921     -0.192687E-18  0.192687E-18   196.127       196.127    
  33  0.101938      -2.28339     -0.123271E-17  0.123271E-17   196.342       196.342    
  34  0.470899     -0.753112     -0.406574E-18  0.406574E-18   196.611       196.611    
  35  0.405100     -0.903620     -0.487827E-18  0.487827E-18   196.808       196.808    
  36  0.727931E-01  -2.62013     -0.141450E-17  0.141450E-17   197.184       197.184    
  37  0.556861     -0.585440     -0.316055E-18  0.316055E-18   197.581       197.581    
  38  0.505343     -0.682518     -0.368463E-18  0.368463E-18   197.603       197.603    
  39  0.420353     -0.866661     -0.467875E-18  0.467875E-18   197.710       197.710    
  40  0.474058     -0.746426     -0.402965E-18  0.402965E-18   197.742       197.742    
  41  0.436799     -0.828283     -0.447156E-18  0.447156E-18   197.904       197.904    
  42  0.478848     -0.736373     -0.397538E-18  0.397538E-18   198.488       198.488    
  43  0.292091      -1.23069     -0.664399E-18  0.664399E-18   198.734       198.734    
  44  0.861181     -0.149451     -0.806825E-19  0.806825E-19   199.285       199.285    
  45  0.968900     -0.315942E-01 -0.170564E-19  0.170564E-19   199.726       199.726    
  46  0.488794     -0.715814     -0.386439E-18  0.386439E-18   199.932       199.932    
  47  0.166015      -1.79568     -0.969412E-18  0.969412E-18   201.382       201.382    
  48  0.169254      -1.77635     -0.958981E-18  0.958981E-18   201.471       201.471    
  49  0.353523      -1.03981     -0.561349E-18  0.561349E-18   202.706       202.706    
  50  0.917877E-01  -2.38828     -0.128933E-17  0.128933E-17   203.055       203.055    
  51  0.122005      -2.10369     -0.113570E-17  0.113570E-17   203.140       203.140    
  52  0.737959     -0.303868     -0.164046E-18  0.164046E-18   203.753       203.753    
  53  0.809505     -0.211332     -0.114090E-18  0.114090E-18   204.171       204.171    
  54  0.827193     -0.189717     -0.102420E-18  0.102420E-18   204.213       204.213    
  55  0.706348     -0.347647     -0.187680E-18  0.187680E-18   204.441       204.441    
  56  0.531868     -0.631361     -0.340846E-18  0.340846E-18   204.446       204.446    
  57  0.553098     -0.592220     -0.319715E-18  0.319715E-18   204.520       204.520    
  58  0.827349     -0.189528     -0.102318E-18  0.102318E-18   204.595       204.595    
  59  0.651834     -0.427965     -0.231041E-18  0.231041E-18   204.760       204.760    
  60  0.814700     -0.204936     -0.110636E-18  0.110636E-18   206.414       206.414    
  61  0.878120     -0.129972     -0.701667E-19  0.701667E-19   197.242       197.242    
loop,thermsimp(1:2)       51  0.310841E-18  0.123168E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    359              188.99          0.79          0.47         20.36
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       51
neval is:      358
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       52
neval is:      358


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      358     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.265548      -1.32596     -0.715831E-18  0.715831E-18   183.388       183.388    
   2  0.878311     -0.129754     -0.700489E-19  0.700489E-19   184.352       184.352    
   3  0.806174E-01  -2.51804     -0.135939E-17  0.135939E-17   187.612       187.612    
   4  0.991971     -0.806179E-02 -0.435223E-20  0.435223E-20   187.995       187.995    
   5  0.850750     -0.161637     -0.872613E-19  0.872613E-19   188.280       188.280    
   6  0.465440     -0.764772     -0.412869E-18  0.412869E-18   190.441       190.441    
   7  0.894386     -0.111618     -0.602580E-19  0.602580E-19   191.359       191.359    
   8  0.696114     -0.362242     -0.195559E-18  0.195559E-18   191.777       191.777    
   9  0.846389     -0.166776     -0.900356E-19  0.900356E-19   192.054       192.054    
  10  0.783226     -0.244334     -0.131906E-18  0.131906E-18   192.064       192.064    
  11  0.938044     -0.639585E-01 -0.345286E-19  0.345286E-19   192.343       192.343    
  12  0.442907     -0.814396     -0.439659E-18  0.439659E-18   192.782       192.782    
  13  0.850140     -0.162354     -0.876484E-19  0.876484E-19   192.901       192.901    
  14  0.793391E-01  -2.53402     -0.136802E-17  0.136802E-17   193.343       193.343    
  15  0.179031      -1.72020     -0.928665E-18  0.928665E-18   193.773       193.773    
  16  0.387297     -0.948562     -0.512090E-18  0.512090E-18   193.810       193.810    
  17  0.267603      -1.31825     -0.711669E-18  0.711669E-18   194.001       194.001    
  18  0.124689E-02  -6.68710     -0.361009E-17  0.361009E-17   194.053       194.053    
  19  0.961937     -0.388062E-01 -0.209498E-19  0.209498E-19   194.406       194.406    
  20  0.194437      -1.63765     -0.884099E-18  0.884099E-18   194.449       194.449    
  21  0.860447     -0.150303     -0.811426E-19  0.811426E-19   194.854       194.854    
  22  0.637730     -0.449840     -0.242850E-18  0.242850E-18   194.870       194.870    
  23  0.227722      -1.47963     -0.798791E-18  0.798791E-18   195.002       195.002    
  24  0.868668     -0.140794     -0.760090E-19  0.760090E-19   195.010       195.010    
  25  0.190747      -1.65681     -0.894442E-18  0.894442E-18   195.025       195.025    
  26  0.725092     -0.321457     -0.173541E-18  0.173541E-18   195.128       195.128    
  27  0.521944     -0.650195     -0.351014E-18  0.351014E-18   195.591       195.591    
  28  0.315691      -1.15299     -0.622453E-18  0.622453E-18   195.809       195.809    
  29  0.226982      -1.48289     -0.800549E-18  0.800549E-18   195.941       195.941    
  30  0.788342     -0.237823     -0.128391E-18  0.128391E-18   196.001       196.001    
  31  0.952063     -0.491244E-01 -0.265202E-19  0.265202E-19   196.063       196.063    
  32  0.367935     -0.999848     -0.539777E-18  0.539777E-18   196.127       196.127    
  33  0.911502     -0.926613E-01 -0.500241E-19  0.500241E-19   196.342       196.342    
  34  0.249308      -1.38907     -0.749900E-18  0.749900E-18   196.611       196.611    
  35  0.495896     -0.701389     -0.378651E-18  0.378651E-18   196.808       196.808    
  36  0.383118     -0.959412     -0.517947E-18  0.517947E-18   197.184       197.184    
  37  0.712472     -0.339015     -0.183020E-18  0.183020E-18   197.242       197.242    
  38  0.123105      -2.09472     -0.113085E-17  0.113085E-17   197.581       197.581    
  39  0.296716E-02  -5.82015     -0.314206E-17  0.314206E-17   197.603       197.603    
  40  0.914293     -0.896038E-01 -0.483734E-19  0.483734E-19   197.710       197.710    
  41  0.710922     -0.341192     -0.184196E-18  0.184196E-18   197.742       197.742    
  42  0.449342     -0.799972     -0.431872E-18  0.431872E-18   197.904       197.904    
  43  0.617812     -0.481571     -0.259981E-18  0.259981E-18   198.488       198.488    
  44  0.141862      -1.95290     -0.105429E-17  0.105429E-17   198.734       198.734    
  45  0.529312E-01  -2.93876     -0.158652E-17  0.158652E-17   199.285       199.285    
  46  0.472926     -0.748817     -0.404256E-18  0.404256E-18   199.726       199.726    
  47  0.624924     -0.470125     -0.253801E-18  0.253801E-18   199.932       199.932    
  48  0.910120E-01  -2.39676     -0.129391E-17  0.129391E-17   201.382       201.382    
  49  0.508687     -0.675922     -0.364902E-18  0.364902E-18   201.471       201.471    
  50  0.721931     -0.325825     -0.175900E-18  0.175900E-18   202.706       202.706    
  51  0.701604     -0.354386     -0.191318E-18  0.191318E-18   203.055       203.055    
  52  0.488535     -0.716344     -0.386725E-18  0.386725E-18   203.140       203.140    
  53  0.416742     -0.875287     -0.472532E-18  0.472532E-18   203.753       203.753    
  54  0.838540     -0.176093     -0.950652E-19  0.950652E-19   204.171       204.171    
  55  0.741216     -0.299463     -0.161668E-18  0.161668E-18   204.213       204.213    
  56  0.724127     -0.322788     -0.174260E-18  0.174260E-18   204.441       204.441    
  57  0.297207      -1.21333     -0.655026E-18  0.655026E-18   204.446       204.446    
  58  0.947342     -0.540946E-01 -0.292035E-19  0.292035E-19   204.520       204.520    
  59  0.207870      -1.57084     -0.848033E-18  0.848033E-18   204.595       204.595    
  60  0.794595     -0.229922     -0.124126E-18  0.124126E-18   204.760       204.760    
  61  0.322357      -1.13209     -0.611171E-18  0.611171E-18   188.990       188.990    
loop,thermsimp(1:2)       52  0.715831E-18  0.700489E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    360              188.06          0.79          0.46         20.38
Just calling func    0   0         22.93


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.06
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       52
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       53
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      359     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980470     -0.197234E-01 -0.106478E-19  0.106478E-19   183.388       183.388    
   2  0.652007     -0.427700     -0.230898E-18  0.230898E-18   184.352       184.352    
   3  0.619124     -0.479450     -0.258835E-18  0.258835E-18   187.612       187.612    
   4  0.578702     -0.546968     -0.295285E-18  0.295285E-18   187.995       187.995    
   5  0.841746     -0.172277     -0.930050E-19  0.930050E-19   188.280       188.280    
   6  0.163298      -1.81218     -0.978319E-18  0.978319E-18   188.990       188.990    
   7  0.416242     -0.876490     -0.473181E-18  0.473181E-18   190.441       190.441    
   8  0.300548      -1.20215     -0.648991E-18  0.648991E-18   191.359       191.359    
   9  0.799382     -0.223917     -0.120883E-18  0.120883E-18   191.777       191.777    
  10  0.766458E-01  -2.56856     -0.138666E-17  0.138666E-17   192.054       192.054    
  11  0.293156      -1.22705     -0.662434E-18  0.662434E-18   192.064       192.064    
  12  0.869460     -0.139883     -0.755174E-19  0.755174E-19   192.343       192.343    
  13  0.921593E-01  -2.38424     -0.128715E-17  0.128715E-17   192.782       192.782    
  14  0.466484     -0.762532     -0.411660E-18  0.411660E-18   192.901       192.901    
  15  0.583091     -0.539412     -0.291206E-18  0.291206E-18   193.343       193.343    
  16  0.258931      -1.35119     -0.729454E-18  0.729454E-18   193.773       193.773    
  17  0.420161     -0.867118     -0.468121E-18  0.468121E-18   193.810       193.810    
  18  0.893415     -0.112705     -0.608446E-19  0.608446E-19   194.001       194.001    
  19  0.272650      -1.29957     -0.701583E-18  0.701583E-18   194.053       194.053    
  20  0.485305     -0.722977     -0.390305E-18  0.390305E-18   194.406       194.406    
  21  0.721226     -0.326803     -0.176428E-18  0.176428E-18   194.449       194.449    
  22  0.792637     -0.232390     -0.125458E-18  0.125458E-18   194.854       194.854    
  23  0.436105     -0.829871     -0.448013E-18  0.448013E-18   194.870       194.870    
  24  0.724717     -0.321974     -0.173820E-18  0.173820E-18   195.002       195.002    
  25  0.290699      -1.23547     -0.666978E-18  0.666978E-18   195.010       195.010    
  26  0.886111     -0.120913     -0.652762E-19  0.652762E-19   195.025       195.025    
  27  0.260861      -1.34377     -0.725445E-18  0.725445E-18   195.128       195.128    
  28  0.832877     -0.182869     -0.987235E-19  0.987235E-19   195.591       195.591    
  29  0.225544E-01  -3.79183     -0.204705E-17  0.204705E-17   195.809       195.809    
  30  0.830778     -0.185393     -0.100086E-18  0.100086E-18   195.941       195.941    
  31  0.166912      -1.79029     -0.966504E-18  0.966504E-18   196.001       196.001    
  32  0.882576     -0.124911     -0.674341E-19  0.674341E-19   196.063       196.063    
  33  0.761681E-01  -2.57481     -0.139004E-17  0.139004E-17   196.127       196.127    
  34  0.173874      -1.74942     -0.944442E-18  0.944442E-18   196.342       196.342    
  35  0.785670     -0.241219     -0.130224E-18  0.130224E-18   196.611       196.611    
  36  0.571994     -0.558626     -0.301579E-18  0.301579E-18   196.808       196.808    
  37  0.425678     -0.854072     -0.461079E-18  0.461079E-18   197.184       197.184    
  38  0.489055     -0.715279     -0.386150E-18  0.386150E-18   197.242       197.242    
  39  0.950375     -0.508991E-01 -0.274783E-19  0.274783E-19   197.581       197.581    
  40  0.400834     -0.914208     -0.493543E-18  0.493543E-18   197.603       197.603    
  41  0.788850     -0.237179     -0.128043E-18  0.128043E-18   197.710       197.710    
  42  0.691673     -0.368642     -0.199015E-18  0.199015E-18   197.742       197.742    
  43  0.399701     -0.917038     -0.495071E-18  0.495071E-18   197.904       197.904    
  44  0.103947      -2.26388     -0.122217E-17  0.122217E-17   198.488       198.488    
  45  0.225043      -1.49146     -0.805180E-18  0.805180E-18   198.734       198.734    
  46  0.930239     -0.723134E-01 -0.390390E-19  0.390390E-19   199.285       199.285    
  47  0.474571     -0.745344     -0.402381E-18  0.402381E-18   199.726       199.726    
  48  0.811048     -0.209428     -0.113062E-18  0.113062E-18   199.932       199.932    
  49  0.243042      -1.41452     -0.763642E-18  0.763642E-18   201.382       201.382    
  50  0.623295E-01  -2.77532     -0.149828E-17  0.149828E-17   201.471       201.471    
  51  0.951945     -0.492485E-01 -0.265872E-19  0.265872E-19   202.706       202.706    
  52  0.616358     -0.483928     -0.261253E-18  0.261253E-18   203.055       203.055    
  53  0.212104      -1.55068     -0.837148E-18  0.837148E-18   203.140       203.140    
  54  0.125064      -2.07893     -0.112233E-17  0.112233E-17   203.753       203.753    
  55  0.869868E-01  -2.44200     -0.131834E-17  0.131834E-17   204.171       204.171    
  56  0.541392     -0.613611     -0.331264E-18  0.331264E-18   204.213       204.213    
  57  0.529923     -0.635023     -0.342823E-18  0.342823E-18   204.441       204.441    
  58  0.155730      -1.85963     -0.100394E-17  0.100394E-17   204.446       204.446    
  59  0.121719      -2.10604     -0.113697E-17  0.113697E-17   204.520       204.520    
  60  0.761634     -0.272290     -0.146998E-18  0.146998E-18   204.595       204.595    
  61  0.267888E-01  -3.61977     -0.195416E-17  0.195416E-17   188.056       188.056    
loop,thermsimp(1:2)       53  0.106478E-19  0.230898E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    361              186.00          0.79          0.47         20.34
Just calling func    0   0         23.02


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    186.00        2.426     -1.827      5.262     -100.0     0.3340    
                      -1.659      1.177     -100.0      2.854     -1.060    
                      0.1920E-01 -1.837      2.009      0.000     0.6600    
                      -1.122     -20.00      0.000      0.000     -1.221    

                      -1.600      6784.      9444.     -551.2     -1451.    
                      -4.215     -5.731     -4.454     -15.33     -5.168    
                      -13.08     -2.677     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.6709E-01-0.6039E-01  0.000    -0.1308    
                     -0.2259    -0.1285    -0.1500    -0.1896    -0.9320E-02

                     -0.7103     -2.765      1.382     0.2135     0.5192E-01
                      0.6877E-01-0.4209E-01-0.1612    -0.3964E-01-0.7033E-01
                     -0.8341E-01 0.9521E-01-0.2236     -3.105      1.382    

                      -1.338     -1.786      3566.      2363.      0.000    
                       0.000      9.114      8.419      0.000     0.1000    
                       1.282      1.268      9.155      8.898     -101.4    

                      0.1000      1.322      1.241      9.260      9.106    
                      -610.4     0.1000     0.2523E-01 0.8114      9.371    
                       9.236      7936.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    186.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       53
neval is:      360
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       54
neval is:      360


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      360     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311718      -1.16566     -0.629289E-18  0.629289E-18   183.388       183.388    
   2  0.828507     -0.188130     -0.101564E-18  0.101564E-18   184.352       184.352    
   3  0.683891     -0.379957     -0.205123E-18  0.205123E-18   187.612       187.612    
   4  0.673501     -0.395266     -0.213388E-18  0.213388E-18   187.995       187.995    
   5  0.635022     -0.454096     -0.245148E-18  0.245148E-18   188.056       188.056    
   6  0.555151     -0.588514     -0.317715E-18  0.317715E-18   188.280       188.280    
   7  0.667138     -0.404758     -0.218512E-18  0.218512E-18   188.990       188.990    
   8  0.176117      -1.73661     -0.937524E-18  0.937524E-18   190.441       190.441    
   9  0.654696     -0.423584     -0.228675E-18  0.228675E-18   191.359       191.359    
  10  0.647997     -0.433869     -0.234228E-18  0.234228E-18   191.777       191.777    
  11  0.823337     -0.194390     -0.104943E-18  0.104943E-18   192.054       192.054    
  12  0.468128     -0.759014     -0.409760E-18  0.409760E-18   192.064       192.064    
  13  0.442186     -0.816025     -0.440538E-18  0.440538E-18   192.343       192.343    
  14  0.191561      -1.65255     -0.892142E-18  0.892142E-18   192.782       192.782    
  15  0.677740     -0.388991     -0.210001E-18  0.210001E-18   192.901       192.901    
  16  0.309251      -1.17360     -0.633580E-18  0.633580E-18   193.343       193.343    
  17  0.491565     -0.710162     -0.383387E-18  0.383387E-18   193.773       193.773    
  18  0.734678     -0.308323     -0.166451E-18  0.166451E-18   193.810       193.810    
  19  0.196242      -1.62840     -0.879109E-18  0.879109E-18   194.001       194.001    
  20  0.307383      -1.17966     -0.636850E-18  0.636850E-18   194.053       194.053    
  21  0.776393     -0.253097     -0.136637E-18  0.136637E-18   194.406       194.406    
  22  0.388611     -0.945176     -0.510261E-18  0.510261E-18   194.449       194.449    
  23  0.130215      -2.03857     -0.110054E-17  0.110054E-17   194.854       194.854    
  24  0.180811      -1.71030     -0.923321E-18  0.923321E-18   194.870       194.870    
  25  0.742395E-01  -2.60046     -0.140388E-17  0.140388E-17   195.002       195.002    
  26  0.978730E-01  -2.32408     -0.125468E-17  0.125468E-17   195.010       195.010    
  27  0.545285     -0.606446     -0.327395E-18  0.327395E-18   195.025       195.025    
  28  0.384316     -0.956291     -0.516262E-18  0.516262E-18   195.128       195.128    
  29  0.894254     -0.111766     -0.603378E-19  0.603378E-19   195.591       195.591    
  30  0.771937     -0.258852     -0.139744E-18  0.139744E-18   195.809       195.809    
  31  0.614249     -0.487355     -0.263103E-18  0.263103E-18   195.941       195.941    
  32  0.943554     -0.581022E-01 -0.313670E-19  0.313670E-19   196.001       196.001    
  33  0.119682E-01  -4.42550     -0.238915E-17  0.238915E-17   196.063       196.063    
  34  0.239965      -1.42726     -0.770520E-18  0.770520E-18   196.127       196.127    
  35  0.230871      -1.46589     -0.791376E-18  0.791376E-18   196.342       196.342    
  36  0.810454     -0.210161     -0.113457E-18  0.113457E-18   196.611       196.611    
  37  0.252087      -1.37798     -0.743915E-18  0.743915E-18   196.808       196.808    
  38  0.507024     -0.679198     -0.366671E-18  0.366671E-18   197.184       197.184    
  39  0.972347     -0.280423E-01 -0.151389E-19  0.151389E-19   197.242       197.242    
  40  0.675670     -0.392050     -0.211652E-18  0.211652E-18   197.581       197.581    
  41  0.280681      -1.27054     -0.685911E-18  0.685911E-18   197.603       197.603    
  42  0.689449     -0.371863     -0.200754E-18  0.200754E-18   197.710       197.710    
  43  0.122692      -2.09808     -0.113267E-17  0.113267E-17   197.742       197.742    
  44  0.377190     -0.975006     -0.526365E-18  0.526365E-18   197.904       197.904    
  45  0.412636     -0.885189     -0.477877E-18  0.477877E-18   198.488       198.488    
  46  0.386201     -0.951398     -0.513621E-18  0.513621E-18   198.734       198.734    
  47  0.993666     -0.635463E-02 -0.343060E-20  0.343060E-20   199.285       199.285    
  48  0.756179     -0.279477     -0.150878E-18  0.150878E-18   199.726       199.726    
  49  0.570708     -0.560877     -0.302795E-18  0.302795E-18   199.932       199.932    
  50  0.673692     -0.394983     -0.213235E-18  0.213235E-18   201.382       201.382    
  51  0.339771      -1.07948     -0.582769E-18  0.582769E-18   201.471       201.471    
  52  0.220100      -1.51368     -0.817171E-18  0.817171E-18   202.706       202.706    
  53  0.944514     -0.570845E-01 -0.308176E-19  0.308176E-19   203.055       203.055    
  54  0.873678     -0.135043     -0.729043E-19  0.729043E-19   203.140       203.140    
  55  0.415394     -0.878527     -0.474281E-18  0.474281E-18   203.753       203.753    
  56  0.802278     -0.220300     -0.118931E-18  0.118931E-18   204.171       204.171    
  57  0.124152      -2.08625     -0.112628E-17  0.112628E-17   204.213       204.213    
  58  0.228353      -1.47686     -0.797297E-18  0.797297E-18   204.441       204.441    
  59  0.652585E-01  -2.72940     -0.147349E-17  0.147349E-17   204.446       204.446    
  60  0.838886     -0.175681     -0.948429E-19  0.948429E-19   204.520       204.520    
  61  0.264250      -1.33086     -0.718477E-18  0.718477E-18   186.004       186.004    
loop,thermsimp(1:2)       54  0.629289E-18  0.101564E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    362              198.37          0.79          0.47         20.33
Just calling func    0   0         23.00


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    198.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       54
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       55
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      361
neval,tstepnext:      361     361

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.483320     -0.727077     -0.392519E-18  0.392519E-18   183.388       183.388    
   2  0.270963E-01  -3.60836     -0.194800E-17  0.194800E-17   184.352       184.352    
   3  0.675954     -0.391630     -0.211425E-18  0.211425E-18   186.004       186.004    
   4  0.710530     -0.341745     -0.184494E-18  0.184494E-18   187.612       187.612    
   5  0.699087     -0.357980     -0.193259E-18  0.193259E-18   187.995       187.995    
   6  0.293358      -1.22636     -0.662062E-18  0.662062E-18   188.056       188.056    
   7  0.245586      -1.40411     -0.758021E-18  0.758021E-18   188.280       188.280    
   8  0.899593     -0.105813     -0.571240E-19  0.571240E-19   188.990       188.990    
   9  0.444239     -0.811394     -0.438038E-18  0.438038E-18   190.441       190.441    
  10  0.190821      -1.65642     -0.894231E-18  0.894231E-18   191.359       191.359    
  11  0.530827     -0.633320     -0.341903E-18  0.341903E-18   191.777       191.777    
  12  0.185886      -1.68262     -0.908379E-18  0.908379E-18   192.054       192.054    
  13  0.361674      -1.01701     -0.549043E-18  0.549043E-18   192.064       192.064    
  14  0.528816     -0.637115     -0.343952E-18  0.343952E-18   192.343       192.343    
  15  0.295701      -1.21841     -0.657767E-18  0.657767E-18   192.782       192.782    
  16  0.226145      -1.48658     -0.802543E-18  0.802543E-18   192.901       192.901    
  17  0.425678     -0.854073     -0.461079E-18  0.461079E-18   193.343       193.343    
  18  0.994889     -0.512411E-02 -0.276629E-20  0.276629E-20   193.773       193.773    
  19  0.340314      -1.07789     -0.581907E-18  0.581907E-18   193.810       193.810    
  20  0.232707      -1.45797     -0.787101E-18  0.787101E-18   194.001       194.001    
  21  0.811264E-02  -4.81433     -0.259906E-17  0.259906E-17   194.053       194.053    
  22  0.676167     -0.391315     -0.211255E-18  0.211255E-18   194.406       194.406    
  23  0.623013     -0.473188     -0.255455E-18  0.255455E-18   194.449       194.449    
  24  0.589471E-01  -2.83112     -0.152840E-17  0.152840E-17   194.854       194.854    
  25  0.120542      -2.11576     -0.114221E-17  0.114221E-17   194.870       194.870    
  26  0.802280     -0.220298     -0.118930E-18  0.118930E-18   195.002       195.002    
  27  0.656903     -0.420220     -0.226859E-18  0.226859E-18   195.010       195.010    
  28  0.934478     -0.677672E-01 -0.365847E-19  0.365847E-19   195.025       195.025    
  29  0.759044     -0.275695     -0.148837E-18  0.148837E-18   195.128       195.128    
  30  0.553280     -0.591892     -0.319538E-18  0.319538E-18   195.591       195.591    
  31  0.670760     -0.399344     -0.215589E-18  0.215589E-18   195.809       195.809    
  32  0.520117     -0.653701     -0.352906E-18  0.352906E-18   195.941       195.941    
  33  0.936542     -0.655609E-01 -0.353936E-19  0.353936E-19   196.001       196.001    
  34  0.603232     -0.505453     -0.272873E-18  0.272873E-18   196.063       196.063    
  35  0.640815     -0.445014     -0.240245E-18  0.240245E-18   196.127       196.127    
  36  0.227815      -1.47922     -0.798570E-18  0.798570E-18   196.342       196.342    
  37  0.453126     -0.791586     -0.427345E-18  0.427345E-18   196.611       196.611    
  38  0.990453     -0.959290E-02 -0.517881E-20  0.517881E-20   196.808       196.808    
  39  0.141651      -1.95439     -0.105509E-17  0.105509E-17   197.184       197.184    
  40  0.468633     -0.757935     -0.409178E-18  0.409178E-18   197.242       197.242    
  41  0.727697     -0.317870     -0.171605E-18  0.171605E-18   197.581       197.581    
  42  0.447908     -0.803167     -0.433597E-18  0.433597E-18   197.603       197.603    
  43  0.506046     -0.681128     -0.367713E-18  0.367713E-18   197.710       197.710    
  44  0.370082     -0.994030     -0.536636E-18  0.536636E-18   197.742       197.742    
  45  0.791610     -0.233687     -0.126158E-18  0.126158E-18   197.904       197.904    
  46  0.239581      -1.42886     -0.771385E-18  0.771385E-18   198.488       198.488    
  47  0.939786     -0.621034E-01 -0.335271E-19  0.335271E-19   198.734       198.734    
  48  0.901246E-01  -2.40656     -0.129920E-17  0.129920E-17   199.285       199.285    
  49  0.212925      -1.54681     -0.835061E-18  0.835061E-18   199.726       199.726    
  50  0.703134     -0.352208     -0.190143E-18  0.190143E-18   199.932       199.932    
  51  0.567185     -0.567070     -0.306138E-18  0.306138E-18   201.382       201.382    
  52  0.853810     -0.158046     -0.853227E-19  0.853227E-19   201.471       201.471    
  53  0.631811     -0.459166     -0.247885E-18  0.247885E-18   202.706       202.706    
  54  0.663941     -0.409562     -0.221106E-18  0.221106E-18   203.055       203.055    
  55  0.300442      -1.20250     -0.649181E-18  0.649181E-18   203.140       203.140    
  56  0.480737     -0.732436     -0.395412E-18  0.395412E-18   203.753       203.753    
  57  0.503318     -0.686533     -0.370631E-18  0.370631E-18   204.171       204.171    
  58  0.540702     -0.614887     -0.331952E-18  0.331952E-18   204.213       204.213    
  59  0.427319     -0.850225     -0.459001E-18  0.459001E-18   204.441       204.441    
  60  0.533683     -0.627953     -0.339006E-18  0.339006E-18   204.446       204.446    
  61  0.306587E-01  -3.48484     -0.188132E-17  0.188132E-17   198.372       198.372    
loop,thermsimp(1:2)       55  0.392519E-18  0.194800E-17

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    363              201.53          0.79          0.47         20.32
Just calling func    0   0         23.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    201.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       55
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.539859E-18           361
loop is:       56
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.107972E-18           371

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      362     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980950     -0.192335E-01 -0.207667E-20  0.207667E-20   183.388       183.388    
   2  0.963068     -0.376317E-01 -0.406316E-20  0.406316E-20   184.352       184.352    
   3  0.389891     -0.941888     -0.101697E-18  0.101697E-18   186.004       186.004    
   4  0.688444E-01  -2.67591     -0.288922E-18  0.288922E-18   187.612       187.612    
   5  0.243983      -1.41066     -0.152311E-18  0.152311E-18   187.995       187.995    
   6  0.393371     -0.933003     -0.100738E-18  0.100738E-18   188.056       188.056    
   7  0.294162      -1.22362     -0.132117E-18  0.132117E-18   188.280       188.280    
   8  0.503859     -0.685458     -0.740102E-19  0.740102E-19   188.990       188.990    
   9  0.523432     -0.647348     -0.698953E-19  0.698953E-19   190.441       190.441    
  10  0.377372     -0.974523     -0.105221E-18  0.105221E-18   191.359       191.359    
  11  0.950434E-01  -2.35342     -0.254103E-18  0.254103E-18   191.777       191.777    
  12  0.113403      -2.17681     -0.235034E-18  0.235034E-18   192.054       192.054    
  13  0.973984     -0.263603E-01 -0.284617E-20  0.284617E-20   192.064       192.064    
  14  0.465902     -0.763780     -0.824666E-19  0.824666E-19   192.343       192.343    
  15  0.206587      -1.57703     -0.170275E-18  0.170275E-18   192.782       192.782    
  16  0.852080     -0.160075     -0.172836E-19  0.172836E-19   192.901       192.901    
  17  0.323074      -1.12987     -0.121994E-18  0.121994E-18   193.343       193.343    
  18  0.426634     -0.851830     -0.919736E-19  0.919736E-19   193.773       193.773    
  19  0.931607     -0.708441E-01 -0.764916E-20  0.764916E-20   193.810       193.810    
  20  0.172217      -1.75900     -0.189923E-18  0.189923E-18   194.001       194.001    
  21  0.491044     -0.711222     -0.767919E-19  0.767919E-19   194.053       194.053    
  22  0.611403     -0.491999     -0.531220E-19  0.531220E-19   194.406       194.406    
  23  0.602677     -0.506374     -0.546741E-19  0.546741E-19   194.449       194.449    
  24  0.619065     -0.479545     -0.517773E-19  0.517773E-19   194.854       194.854    
  25  0.508813E-01  -2.97826     -0.321568E-18  0.321568E-18   194.870       194.870    
  26  0.403351     -0.907948     -0.980327E-19  0.980327E-19   195.002       195.002    
  27  0.442038     -0.816359     -0.881437E-19  0.881437E-19   195.010       195.010    
  28  0.183881      -1.69347     -0.182847E-18  0.182847E-18   195.025       195.025    
  29  0.193055      -1.64478     -0.177590E-18  0.177590E-18   195.128       195.128    
  30  0.591049     -0.525857     -0.567777E-19  0.567777E-19   195.591       195.591    
  31  0.718942     -0.329975     -0.356279E-19  0.356279E-19   195.809       195.809    
  32  0.734225     -0.308939     -0.333567E-19  0.333567E-19   195.941       195.941    
  33  0.633587     -0.456358     -0.492737E-19  0.492737E-19   196.001       196.001    
  34  0.589059     -0.529229     -0.571418E-19  0.571418E-19   196.063       196.063    
  35  0.597488     -0.515022     -0.556078E-19  0.556078E-19   196.127       196.127    
  36  0.396873     -0.924139     -0.997809E-19  0.997809E-19   196.342       196.342    
  37  0.476147     -0.742028     -0.801181E-19  0.801181E-19   196.611       196.611    
  38  0.275508      -1.28914     -0.139191E-18  0.139191E-18   196.808       196.808    
  39  0.186416E-01  -3.98236     -0.429982E-18  0.429982E-18   197.184       197.184    
  40  0.699546     -0.357324     -0.385809E-19  0.385809E-19   197.242       197.242    
  41  0.851411     -0.160860     -0.173683E-19  0.173683E-19   197.581       197.581    
  42  0.992383     -0.764617E-02 -0.825571E-21  0.825571E-21   197.603       197.603    
  43  0.866693     -0.143070     -0.154475E-19  0.154475E-19   197.710       197.710    
  44  0.684363     -0.379267     -0.409502E-19  0.409502E-19   197.742       197.742    
  45  0.200302      -1.60793     -0.173611E-18  0.173611E-18   197.904       197.904    
  46  0.272860      -1.29880     -0.140233E-18  0.140233E-18   198.372       198.372    
  47  0.763173     -0.270271     -0.291816E-19  0.291816E-19   198.488       198.488    
  48  0.455149     -0.787130     -0.849878E-19  0.849878E-19   198.734       198.734    
  49  0.868517     -0.140968     -0.152206E-19  0.152206E-19   199.285       199.285    
  50  0.458117     -0.780630     -0.842860E-19  0.842860E-19   199.726       199.726    
  51  0.348530      -1.05403     -0.113806E-18  0.113806E-18   199.932       199.932    
  52  0.334563      -1.09493     -0.118221E-18  0.118221E-18   201.382       201.382    
  53  0.549491     -0.598762     -0.646494E-19  0.646494E-19   201.471       201.471    
  54  0.349946      -1.04998     -0.113368E-18  0.113368E-18   202.706       202.706    
  55  0.404660     -0.904708     -0.976829E-19  0.976829E-19   203.055       203.055    
  56  0.646985     -0.435433     -0.470145E-19  0.470145E-19   203.140       203.140    
  57  0.326234      -1.12014     -0.120944E-18  0.120944E-18   203.753       203.753    
  58  0.510473     -0.672417     -0.726021E-19  0.726021E-19   204.171       204.171    
  59  0.637141     -0.450764     -0.486698E-19  0.486698E-19   204.213       204.213    
  60  0.167920      -1.78427     -0.192650E-18  0.192650E-18   204.441       204.441    
  61  0.558835     -0.581901     -0.628289E-19  0.628289E-19   201.533       201.533    
loop,thermsimp(1:2)       56  0.207667E-20  0.406316E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    364              188.57          0.79          0.47         20.22
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    188.57
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       56
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       57
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      363     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.250836      -1.38296     -0.149320E-18  0.149320E-18   183.388       183.388    
   2  0.486867     -0.719764     -0.777142E-19  0.777142E-19   184.352       184.352    
   3  0.924056E-01  -2.38157     -0.257142E-18  0.257142E-18   186.004       186.004    
   4  0.493011E-01  -3.00981     -0.324974E-18  0.324974E-18   187.612       187.612    
   5  0.238523      -1.43329     -0.154755E-18  0.154755E-18   187.995       187.995    
   6  0.911127     -0.930732E-01 -0.100493E-19  0.100493E-19   188.056       188.056    
   7  0.124409      -2.08418     -0.225032E-18  0.225032E-18   188.280       188.280    
   8  0.477916     -0.738321     -0.797179E-19  0.797179E-19   188.990       188.990    
   9  0.226483      -1.48508     -0.160347E-18  0.160347E-18   190.441       190.441    
  10  0.616955     -0.482959     -0.521459E-19  0.521459E-19   191.359       191.359    
  11  0.569886     -0.562320     -0.607146E-19  0.607146E-19   191.777       191.777    
  12  0.806718     -0.214781     -0.231903E-19  0.231903E-19   192.054       192.054    
  13  0.799661     -0.223568     -0.241390E-19  0.241390E-19   192.064       192.064    
  14  0.751126     -0.286181     -0.308995E-19  0.308995E-19   192.343       192.343    
  15  0.726514     -0.319497     -0.344967E-19  0.344967E-19   192.782       192.782    
  16  0.569495E-02  -5.16817     -0.558017E-18  0.558017E-18   192.901       192.901    
  17  0.800541E-01  -2.52505     -0.272634E-18  0.272634E-18   193.343       193.343    
  18  0.431333     -0.840874     -0.907907E-19  0.907907E-19   193.773       193.773    
  19  0.433329     -0.836258     -0.902923E-19  0.902923E-19   193.810       193.810    
  20  0.312323      -1.16372     -0.125649E-18  0.125649E-18   194.001       194.001    
  21  0.450130     -0.798218     -0.861851E-19  0.861851E-19   194.053       194.053    
  22  0.576537     -0.550715     -0.594617E-19  0.594617E-19   194.406       194.406    
  23  0.787980     -0.238282     -0.257278E-19  0.257278E-19   194.449       194.449    
  24  0.877583     -0.130584     -0.140994E-19  0.140994E-19   194.854       194.854    
  25  0.479178     -0.735684     -0.794331E-19  0.794331E-19   194.870       194.870    
  26  0.529869     -0.635125     -0.685756E-19  0.685756E-19   195.002       195.002    
  27  0.642869     -0.441815     -0.477036E-19  0.477036E-19   195.010       195.010    
  28  0.708166     -0.345076     -0.372585E-19  0.372585E-19   195.025       195.025    
  29  0.464621     -0.766533     -0.827639E-19  0.827639E-19   195.128       195.128    
  30  0.593927     -0.521000     -0.562533E-19  0.562533E-19   195.591       195.591    
  31  0.632466     -0.458129     -0.494650E-19  0.494650E-19   195.809       195.809    
  32  0.993024     -0.700036E-02 -0.755842E-21  0.755842E-21   195.941       195.941    
  33  0.406358     -0.900521     -0.972309E-19  0.972309E-19   196.001       196.001    
  34  0.324241      -1.12627     -0.121605E-18  0.121605E-18   196.063       196.063    
  35  0.749656     -0.288140     -0.311110E-19  0.311110E-19   196.127       196.127    
  36  0.560280     -0.579319     -0.625501E-19  0.625501E-19   196.342       196.342    
  37  0.142759      -1.94659     -0.210177E-18  0.210177E-18   196.611       196.611    
  38  0.140696      -1.96115     -0.211749E-18  0.211749E-18   196.808       196.808    
  39  0.453674     -0.790377     -0.853384E-19  0.853384E-19   197.184       197.184    
  40  0.190314      -1.65908     -0.179134E-18  0.179134E-18   197.242       197.242    
  41  0.962609E-01  -2.34069     -0.252729E-18  0.252729E-18   197.581       197.581    
  42  0.779791     -0.248730     -0.268558E-19  0.268558E-19   197.603       197.603    
  43  0.475749     -0.742864     -0.802084E-19  0.802084E-19   197.710       197.710    
  44  0.345212      -1.06360     -0.114838E-18  0.114838E-18   197.742       197.742    
  45  0.194868      -1.63543     -0.176581E-18  0.176581E-18   197.904       197.904    
  46  0.827725     -0.189075     -0.204147E-19  0.204147E-19   198.372       198.372    
  47  0.330000      -1.10866     -0.119704E-18  0.119704E-18   198.488       198.488    
  48  0.663089     -0.410845     -0.443597E-19  0.443597E-19   198.734       198.734    
  49  0.571722E-01  -2.86169     -0.308982E-18  0.308982E-18   199.285       199.285    
  50  0.488786     -0.715830     -0.772894E-19  0.772894E-19   199.726       199.726    
  51  0.942697     -0.590105E-01 -0.637147E-20  0.637147E-20   199.932       199.932    
  52  0.698108     -0.359381     -0.388030E-19  0.388030E-19   201.382       201.382    
  53  0.595983     -0.517543     -0.558800E-19  0.558800E-19   201.471       201.471    
  54  0.164493      -1.80489     -0.194877E-18  0.194877E-18   201.533       201.533    
  55  0.749392     -0.288492     -0.311490E-19  0.311490E-19   202.706       202.706    
  56  0.977031     -0.232365E-01 -0.250889E-20  0.250889E-20   203.055       203.055    
  57  0.713248     -0.337927     -0.364865E-19  0.364865E-19   203.140       203.140    
  58  0.931367     -0.711019E-01 -0.767700E-20  0.767700E-20   203.753       203.753    
  59  0.449508     -0.799601     -0.863343E-19  0.863343E-19   204.171       204.171    
  60  0.614342     -0.487203     -0.526042E-19  0.526042E-19   204.213       204.213    
  61  0.963961     -0.367040E-01 -0.396299E-20  0.396299E-20   188.569       188.569    
loop,thermsimp(1:2)       57  0.149320E-18  0.777142E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    365              186.88          0.79          0.47         20.29
Just calling func    0   0         23.03


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    186.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       57
neval is:      364
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       58
neval is:      364


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      364     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.373469     -0.984919     -0.106344E-18  0.106344E-18   183.388       183.388    
   2  0.223930      -1.49642     -0.161571E-18  0.161571E-18   184.352       184.352    
   3  0.410281     -0.890913     -0.961935E-19  0.961935E-19   186.004       186.004    
   4  0.250414      -1.38464     -0.149502E-18  0.149502E-18   187.612       187.612    
   5  0.654052     -0.424568     -0.458413E-19  0.458413E-19   187.995       187.995    
   6  0.282638      -1.26359     -0.136432E-18  0.136432E-18   188.056       188.056    
   7  0.108682      -2.21933     -0.239624E-18  0.239624E-18   188.280       188.280    
   8  0.128350      -2.05300     -0.221666E-18  0.221666E-18   188.569       188.569    
   9  0.193875      -1.64054     -0.177132E-18  0.177132E-18   188.990       188.990    
  10  0.891230     -0.115153     -0.124332E-19  0.124332E-19   190.441       190.441    
  11  0.414971     -0.879548     -0.949663E-19  0.949663E-19   191.359       191.359    
  12  0.578439     -0.547423     -0.591062E-19  0.591062E-19   191.777       191.777    
  13  0.851598     -0.160640     -0.173446E-19  0.173446E-19   192.054       192.054    
  14  0.306842      -1.18142     -0.127560E-18  0.127560E-18   192.064       192.064    
  15  0.444047     -0.811824     -0.876541E-19  0.876541E-19   192.343       192.343    
  16  0.493612     -0.706006     -0.762287E-19  0.762287E-19   192.782       192.782    
  17  0.444364     -0.811112     -0.875772E-19  0.875772E-19   192.901       192.901    
  18  0.105310      -2.25085     -0.243028E-18  0.243028E-18   193.343       193.343    
  19  0.154246      -1.86921     -0.201822E-18  0.201822E-18   193.773       193.773    
  20  0.463723     -0.768467     -0.829727E-19  0.829727E-19   193.810       193.810    
  21  0.696425     -0.361795     -0.390637E-19  0.390637E-19   194.001       194.001    
  22  0.295851      -1.21790     -0.131499E-18  0.131499E-18   194.053       194.053    
  23  0.396125     -0.926027     -0.999847E-19  0.999847E-19   194.406       194.406    
  24  0.130905      -2.03328     -0.219537E-18  0.219537E-18   194.449       194.449    
  25  0.943514     -0.581444E-01 -0.627795E-20  0.627795E-20   194.854       194.854    
  26  0.438285     -0.824887     -0.890645E-19  0.890645E-19   194.870       194.870    
  27  0.763379     -0.270000     -0.291524E-19  0.291524E-19   195.002       195.002    
  28  0.330613      -1.10681     -0.119504E-18  0.119504E-18   195.010       195.010    
  29  0.591540     -0.525026     -0.566880E-19  0.566880E-19   195.025       195.025    
  30  0.645591     -0.437589     -0.472473E-19  0.472473E-19   195.128       195.128    
  31  0.999544     -0.456114E-03 -0.492474E-22  0.492474E-22   195.591       195.591    
  32  0.731381     -0.312820     -0.337758E-19  0.337758E-19   195.809       195.809    
  33  0.859320     -0.151614     -0.163701E-19  0.163701E-19   195.941       195.941    
  34  0.125182      -2.07799     -0.224364E-18  0.224364E-18   196.001       196.001    
  35  0.546328     -0.604536     -0.652728E-19  0.652728E-19   196.063       196.063    
  36  0.922277     -0.809094E-01 -0.873593E-20  0.873593E-20   196.127       196.127    
  37  0.714167     -0.336639     -0.363475E-19  0.363475E-19   196.342       196.342    
  38  0.257772      -1.35568     -0.146375E-18  0.146375E-18   196.611       196.611    
  39  0.188581      -1.66823     -0.180122E-18  0.180122E-18   196.808       196.808    
  40  0.886673     -0.120279     -0.129867E-19  0.129867E-19   197.184       197.184    
  41  0.878831     -0.129163     -0.139460E-19  0.139460E-19   197.242       197.242    
  42  0.778112     -0.250884     -0.270884E-19  0.270884E-19   197.581       197.581    
  43  0.644385     -0.439460     -0.474492E-19  0.474492E-19   197.603       197.603    
  44  0.941103     -0.607031E-01 -0.655422E-20  0.655422E-20   197.710       197.710    
  45  0.715441     -0.334856     -0.361551E-19  0.361551E-19   197.742       197.742    
  46  0.363099      -1.01308     -0.109384E-18  0.109384E-18   197.904       197.904    
  47  0.932951     -0.694027E-01 -0.749353E-20  0.749353E-20   198.372       198.372    
  48  0.234445      -1.45053     -0.156617E-18  0.156617E-18   198.488       198.488    
  49  0.701275E-01  -2.65744     -0.286929E-18  0.286929E-18   198.734       198.734    
  50  0.350913E-01  -3.34980     -0.361684E-18  0.361684E-18   199.285       199.285    
  51  0.853114     -0.158862     -0.171526E-19  0.171526E-19   199.726       199.726    
  52  0.955654     -0.453592E-01 -0.489751E-20  0.489751E-20   199.932       199.932    
  53  0.301521      -1.19891     -0.129449E-18  0.129449E-18   201.382       201.382    
  54  0.651564     -0.428380     -0.462529E-19  0.462529E-19   201.471       201.471    
  55  0.726653     -0.319306     -0.344760E-19  0.344760E-19   201.533       201.533    
  56  0.481980     -0.729853     -0.788036E-19  0.788036E-19   202.706       202.706    
  57  0.352803      -1.04185     -0.112490E-18  0.112490E-18   203.055       203.055    
  58  0.545072E-01  -2.90942     -0.314136E-18  0.314136E-18   203.140       203.140    
  59  0.448400     -0.802070     -0.866009E-19  0.866009E-19   203.753       203.753    
  60  0.771408     -0.259538     -0.280227E-19  0.280227E-19   204.171       204.171    
  61  0.919226E-01  -2.38681     -0.257708E-18  0.257708E-18   186.885       186.885    
loop,thermsimp(1:2)       58  0.106344E-18  0.161571E-18

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    366              186.68          0.79          0.47         20.32
Just calling func    0   0         22.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    186.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       58
neval is:      365
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       59
neval is:      365


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      365     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.436748     -0.828399     -0.894437E-19  0.894437E-19   183.388       183.388    
   2  0.623075     -0.473088     -0.510801E-19  0.510801E-19   184.352       184.352    
   3  0.452446     -0.793088     -0.856311E-19  0.856311E-19   186.004       186.004    
   4  0.586035     -0.534376     -0.576975E-19  0.576975E-19   186.885       186.885    
   5  0.904579     -0.100286     -0.108280E-19  0.108280E-19   187.612       187.612    
   6  0.364850      -1.00827     -0.108865E-18  0.108865E-18   187.995       187.995    
   7  0.533244     -0.628777     -0.678902E-19  0.678902E-19   188.056       188.056    
   8  0.636887     -0.451163     -0.487129E-19  0.487129E-19   188.280       188.280    
   9  0.592760     -0.522966     -0.564656E-19  0.564656E-19   188.569       188.569    
  10  0.460496E-01  -3.07804     -0.332341E-18  0.332341E-18   188.990       188.990    
  11  0.892112     -0.114163     -0.123264E-19  0.123264E-19   190.441       190.441    
  12  0.802800     -0.219650     -0.237160E-19  0.237160E-19   191.359       191.359    
  13  0.207981      -1.57031     -0.169549E-18  0.169549E-18   191.777       191.777    
  14  0.548983     -0.599687     -0.647493E-19  0.647493E-19   192.054       192.054    
  15  0.745493     -0.293709     -0.317123E-19  0.317123E-19   192.064       192.064    
  16  0.512690     -0.668085     -0.721343E-19  0.721343E-19   192.343       192.343    
  17  0.825417     -0.191867     -0.207162E-19  0.207162E-19   192.782       192.782    
  18  0.180686      -1.71099     -0.184739E-18  0.184739E-18   192.901       192.901    
  19  0.960674     -0.401204E-01 -0.433188E-20  0.433188E-20   193.343       193.343    
  20  0.886816     -0.120118     -0.129694E-19  0.129694E-19   193.773       193.773    
  21  0.187621      -1.67333     -0.180672E-18  0.180672E-18   193.810       193.810    
  22  0.956558E-01  -2.34700     -0.253410E-18  0.253410E-18   194.001       194.001    
  23  0.544997     -0.606975     -0.655362E-19  0.655362E-19   194.053       194.053    
  24  0.641297     -0.444263     -0.479678E-19  0.479678E-19   194.406       194.406    
  25  0.299451      -1.20580     -0.130193E-18  0.130193E-18   194.449       194.449    
  26  0.970441E-01  -2.33259     -0.251854E-18  0.251854E-18   194.854       194.854    
  27  0.873683     -0.135038     -0.145803E-19  0.145803E-19   194.870       194.870    
  28  0.946974     -0.544838E-01 -0.588271E-20  0.588271E-20   195.002       195.002    
  29  0.504298     -0.684589     -0.739163E-19  0.739163E-19   195.010       195.010    
  30  0.672121     -0.397317     -0.428991E-19  0.428991E-19   195.025       195.025    
  31  0.838704E-01  -2.47848     -0.267606E-18  0.267606E-18   195.128       195.128    
  32  0.891651     -0.114680     -0.123823E-19  0.123823E-19   195.591       195.591    
  33  0.643626     -0.440637     -0.475764E-19  0.475764E-19   195.809       195.809    
  34  0.124705      -2.08181     -0.224776E-18  0.224776E-18   195.941       195.941    
  35  0.426788     -0.851467     -0.919345E-19  0.919345E-19   196.001       196.001    
  36  0.802357     -0.220202     -0.237756E-19  0.237756E-19   196.063       196.063    
  37  0.728493     -0.316777     -0.342029E-19  0.342029E-19   196.127       196.127    
  38  0.893008     -0.113160     -0.122181E-19  0.122181E-19   196.342       196.342    
  39  0.687401     -0.374837     -0.404718E-19  0.404718E-19   196.611       196.611    
  40  0.768777     -0.262954     -0.283917E-19  0.283917E-19   196.808       196.808    
  41  0.181641      -1.70572     -0.184170E-18  0.184170E-18   197.184       197.184    
  42  0.600170     -0.510542     -0.551241E-19  0.551241E-19   197.242       197.242    
  43  0.471531E-01  -3.05436     -0.329784E-18  0.329784E-18   197.581       197.581    
  44  0.881591E-01  -2.42861     -0.262222E-18  0.262222E-18   197.603       197.603    
  45  0.339676      -1.07976     -0.116584E-18  0.116584E-18   197.710       197.710    
  46  0.101605      -2.28667     -0.246895E-18  0.246895E-18   197.742       197.742    
  47  0.888556     -0.118158     -0.127577E-19  0.127577E-19   197.904       197.904    
  48  0.612329     -0.490485     -0.529586E-19  0.529586E-19   198.372       198.372    
  49  0.179070      -1.71998     -0.185709E-18  0.185709E-18   198.488       198.488    
  50  0.704625     -0.350089     -0.377998E-19  0.377998E-19   198.734       198.734    
  51  0.224310      -1.49473     -0.161388E-18  0.161388E-18   199.285       199.285    
  52  0.168874      -1.77860     -0.192039E-18  0.192039E-18   199.726       199.726    
  53  0.710411     -0.341911     -0.369167E-19  0.369167E-19   199.932       199.932    
  54  0.244990      -1.40654     -0.151867E-18  0.151867E-18   201.382       201.382    
  55  0.156373      -1.85551     -0.200343E-18  0.200343E-18   201.471       201.471    
  56  0.827567E-01  -2.49185     -0.269049E-18  0.269049E-18   201.533       201.533    
  57  0.395699     -0.927102     -0.100101E-18  0.100101E-18   202.706       202.706    
  58  0.403813     -0.906802     -0.979091E-19  0.979091E-19   203.055       203.055    
  59  0.686592     -0.376015     -0.405990E-19  0.405990E-19   203.140       203.140    
  60  0.788911     -0.237102     -0.256003E-19  0.256003E-19   203.753       203.753    
  61  0.654157     -0.424408     -0.458241E-19  0.458241E-19   186.680       186.680    
loop,thermsimp(1:2)       59  0.894437E-19  0.510801E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    367              196.74          0.80          0.47         20.39
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    196.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       59
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       60
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      366     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.319184      -1.14199     -0.123303E-18  0.123303E-18   183.388       183.388    
   2  0.587004     -0.532723     -0.575191E-19  0.575191E-19   184.352       184.352    
   3  0.724281     -0.322575     -0.348290E-19  0.348290E-19   186.004       186.004    
   4  0.565129E-01  -2.87329     -0.310234E-18  0.310234E-18   186.680       186.680    
   5  0.984177     -0.159500E-01 -0.172215E-20  0.172215E-20   186.885       186.885    
   6  0.298647E-01  -3.51108     -0.379097E-18  0.379097E-18   187.612       187.612    
   7  0.484168     -0.725324     -0.783146E-19  0.783146E-19   187.995       187.995    
   8  0.729334     -0.315623     -0.340784E-19  0.340784E-19   188.056       188.056    
   9  0.765402     -0.267354     -0.288666E-19  0.288666E-19   188.280       188.280    
  10  0.354404      -1.03732     -0.112001E-18  0.112001E-18   188.569       188.569    
  11  0.563829     -0.573005     -0.618683E-19  0.618683E-19   188.990       188.990    
  12  0.641698     -0.443637     -0.479003E-19  0.479003E-19   190.441       190.441    
  13  0.791397     -0.233955     -0.252606E-19  0.252606E-19   191.359       191.359    
  14  0.342944      -1.07019     -0.115550E-18  0.115550E-18   191.777       191.777    
  15  0.628963     -0.463684     -0.500647E-19  0.500647E-19   192.054       192.054    
  16  0.614942     -0.486227     -0.524988E-19  0.524988E-19   192.064       192.064    
  17  0.768961     -0.262715     -0.283658E-19  0.283658E-19   192.343       192.343    
  18  0.914292     -0.896056E-01 -0.967488E-20  0.967488E-20   192.782       192.782    
  19  0.117751      -2.13918     -0.230971E-18  0.230971E-18   192.901       192.901    
  20  0.208498      -1.56782     -0.169281E-18  0.169281E-18   193.343       193.343    
  21  0.828700     -0.187897     -0.202875E-19  0.202875E-19   193.773       193.773    
  22  0.118783      -2.13046     -0.230030E-18  0.230030E-18   193.810       193.810    
  23  0.773166     -0.257261     -0.277769E-19  0.277769E-19   194.001       194.001    
  24  0.661304     -0.413541     -0.446508E-19  0.446508E-19   194.053       194.053    
  25  0.508676     -0.675945     -0.729830E-19  0.729830E-19   194.406       194.406    
  26  0.843157     -0.170603     -0.184203E-19  0.184203E-19   194.449       194.449    
  27  0.784129     -0.243182     -0.262568E-19  0.262568E-19   194.854       194.854    
  28  0.543473     -0.609776     -0.658386E-19  0.658386E-19   194.870       194.870    
  29  0.693334E-01  -2.66883     -0.288158E-18  0.288158E-18   195.002       195.002    
  30  0.682815     -0.381532     -0.411946E-19  0.411946E-19   195.010       195.010    
  31  0.839468     -0.174987     -0.188936E-19  0.188936E-19   195.025       195.025    
  32  0.713811     -0.337137     -0.364013E-19  0.364013E-19   195.128       195.128    
  33  0.655517     -0.422332     -0.455999E-19  0.455999E-19   195.591       195.591    
  34  0.502549     -0.688063     -0.742914E-19  0.742914E-19   195.809       195.809    
  35  0.317063      -1.14865     -0.124022E-18  0.124022E-18   195.941       195.941    
  36  0.240440      -1.42528     -0.153890E-18  0.153890E-18   196.001       196.001    
  37  0.923125     -0.799906E-01 -0.863673E-20  0.863673E-20   196.063       196.063    
  38  0.391787     -0.937037     -0.101174E-18  0.101174E-18   196.127       196.127    
  39  0.588165     -0.530747     -0.573057E-19  0.573057E-19   196.342       196.342    
  40  0.694541     -0.364504     -0.393562E-19  0.393562E-19   196.611       196.611    
  41  0.231268E-01  -3.76677     -0.406704E-18  0.406704E-18   196.808       196.808    
  42  0.965978     -0.346138E-01 -0.373732E-20  0.373732E-20   197.184       197.184    
  43  0.130634E-01  -4.33794     -0.468375E-18  0.468375E-18   197.242       197.242    
  44  0.927786     -0.749545E-01 -0.809297E-20  0.809297E-20   197.581       197.581    
  45  0.931042     -0.714504E-01 -0.771463E-20  0.771463E-20   197.603       197.603    
  46  0.647150     -0.435177     -0.469868E-19  0.469868E-19   197.710       197.710    
  47  0.122650      -2.09842     -0.226571E-18  0.226571E-18   197.742       197.742    
  48  0.685799     -0.377170     -0.407238E-19  0.407238E-19   197.904       197.904    
  49  0.374333     -0.982609     -0.106094E-18  0.106094E-18   198.372       198.372    
  50  0.488642     -0.716124     -0.773212E-19  0.773212E-19   198.488       198.488    
  51  0.640950E-01  -2.74739     -0.296640E-18  0.296640E-18   198.734       198.734    
  52  0.781313     -0.246779     -0.266452E-19  0.266452E-19   199.285       199.285    
  53  0.432076E-01  -3.14174     -0.339219E-18  0.339219E-18   199.726       199.726    
  54  0.755695     -0.280118     -0.302448E-19  0.302448E-19   199.932       199.932    
  55  0.697960     -0.359594     -0.388260E-19  0.388260E-19   201.382       201.382    
  56  0.284174      -1.25817     -0.135847E-18  0.135847E-18   201.471       201.471    
  57  0.341893      -1.07326     -0.115882E-18  0.115882E-18   201.533       201.533    
  58  0.536821E-01  -2.92468     -0.315783E-18  0.315783E-18   202.706       202.706    
  59  0.799228     -0.224109     -0.241974E-19  0.241974E-19   203.055       203.055    
  60  0.662285     -0.412059     -0.444908E-19  0.444908E-19   203.140       203.140    
  61  0.460849     -0.774686     -0.836442E-19  0.836442E-19   196.738       196.738    
loop,thermsimp(1:2)       60  0.123303E-18  0.575191E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    368              197.52          0.80          0.46         20.31
Just calling func    0   0         23.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.52
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       60
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       61
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      367     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.904335     -0.100555     -0.108571E-19  0.108571E-19   183.388       183.388    
   2  0.972609     -0.277727E-01 -0.299866E-20  0.299866E-20   184.352       184.352    
   3  0.499700     -0.693747     -0.749051E-19  0.749051E-19   186.004       186.004    
   4  0.242122E-01  -3.72090     -0.401752E-18  0.401752E-18   186.680       186.680    
   5  0.326476      -1.11940     -0.120863E-18  0.120863E-18   186.885       186.885    
   6  0.825933     -0.191242     -0.206487E-19  0.206487E-19   187.612       187.612    
   7  0.427575     -0.849625     -0.917355E-19  0.917355E-19   187.995       187.995    
   8  0.116760      -2.14763     -0.231884E-18  0.231884E-18   188.056       188.056    
   9  0.713644     -0.337370     -0.364265E-19  0.364265E-19   188.280       188.280    
  10  0.450157     -0.798159     -0.861786E-19  0.861786E-19   188.569       188.569    
  11  0.821346     -0.196810     -0.212500E-19  0.212500E-19   188.990       188.990    
  12  0.774586     -0.255426     -0.275789E-19  0.275789E-19   190.441       190.441    
  13  0.964602E-01  -2.33862     -0.252505E-18  0.252505E-18   191.359       191.359    
  14  0.939750     -0.621415E-01 -0.670953E-20  0.670953E-20   191.777       191.777    
  15  0.950241     -0.510398E-01 -0.551086E-20  0.551086E-20   192.054       192.054    
  16  0.135756      -1.99689     -0.215608E-18  0.215608E-18   192.064       192.064    
  17  0.303081      -1.19376     -0.128892E-18  0.128892E-18   192.343       192.343    
  18  0.161409      -1.82381     -0.196920E-18  0.196920E-18   192.782       192.782    
  19  0.132087      -2.02429     -0.218566E-18  0.218566E-18   192.901       192.901    
  20  0.559950     -0.579908     -0.626137E-19  0.626137E-19   193.343       193.343    
  21  0.710453     -0.341853     -0.369105E-19  0.369105E-19   193.773       193.773    
  22  0.617019     -0.482855     -0.521347E-19  0.521347E-19   193.810       193.810    
  23  0.902548     -0.102534     -0.110707E-19  0.110707E-19   194.001       194.001    
  24  0.982231     -0.179291E-01 -0.193584E-20  0.193584E-20   194.053       194.053    
  25  0.662252     -0.412109     -0.444962E-19  0.444962E-19   194.406       194.406    
  26  0.681235     -0.383847     -0.414447E-19  0.414447E-19   194.449       194.449    
  27  0.628551E-01  -2.76692     -0.298750E-18  0.298750E-18   194.854       194.854    
  28  0.530317E-01  -2.93687     -0.317099E-18  0.317099E-18   194.870       194.870    
  29  0.114491      -2.16726     -0.234003E-18  0.234003E-18   195.002       195.002    
  30  0.504444     -0.684298     -0.738849E-19  0.738849E-19   195.010       195.010    
  31  0.431156     -0.841285     -0.908351E-19  0.908351E-19   195.025       195.025    
  32  0.260928      -1.34351     -0.145061E-18  0.145061E-18   195.128       195.128    
  33  0.925556     -0.773603E-01 -0.835273E-20  0.835273E-20   195.591       195.591    
  34  0.280630      -1.27072     -0.137202E-18  0.137202E-18   195.809       195.809    
  35  0.480368     -0.733202     -0.791652E-19  0.791652E-19   195.941       195.941    
  36  0.362305      -1.01527     -0.109620E-18  0.109620E-18   196.001       196.001    
  37  0.819144     -0.199496     -0.215399E-19  0.215399E-19   196.063       196.063    
  38  0.456449E-01  -3.08686     -0.333294E-18  0.333294E-18   196.127       196.127    
  39  0.463355     -0.769261     -0.830585E-19  0.830585E-19   196.342       196.342    
  40  0.314083      -1.15810     -0.125042E-18  0.125042E-18   196.611       196.611    
  41  0.695442     -0.363207     -0.392161E-19  0.392161E-19   196.738       196.738    
  42  0.479522     -0.734965     -0.793554E-19  0.793554E-19   196.808       196.808    
  43  0.773491     -0.256841     -0.277316E-19  0.277316E-19   197.184       197.184    
  44  0.451502     -0.795175     -0.858565E-19  0.858565E-19   197.242       197.242    
  45  0.555563     -0.587773     -0.634629E-19  0.634629E-19   197.581       197.581    
  46  0.183872      -1.69351     -0.182852E-18  0.182852E-18   197.603       197.603    
  47  0.107207E-01  -4.53558     -0.489714E-18  0.489714E-18   197.710       197.710    
  48  0.126579      -2.06689     -0.223165E-18  0.223165E-18   197.742       197.742    
  49  0.669273     -0.401563     -0.433574E-19  0.433574E-19   197.904       197.904    
  50  0.801967     -0.220687     -0.238280E-19  0.238280E-19   198.372       198.372    
  51  0.200391      -1.60749     -0.173563E-18  0.173563E-18   198.488       198.488    
  52  0.544789     -0.607357     -0.655774E-19  0.655774E-19   198.734       198.734    
  53  0.869738     -0.139563     -0.150689E-19  0.150689E-19   199.285       199.285    
  54  0.298408      -1.20930     -0.130570E-18  0.130570E-18   199.726       199.726    
  55  0.420161     -0.867116     -0.936241E-19  0.936241E-19   199.932       199.932    
  56  0.581482E-01  -2.84476     -0.307154E-18  0.307154E-18   201.382       201.382    
  57  0.616323     -0.483985     -0.522567E-19  0.522567E-19   201.471       201.471    
  58  0.417760     -0.872849     -0.942431E-19  0.942431E-19   201.533       201.533    
  59  0.819397     -0.199187     -0.215066E-19  0.215066E-19   202.706       202.706    
  60  0.356975      -1.03009     -0.111221E-18  0.111221E-18   203.055       203.055    
  61  0.115406      -2.15930     -0.233143E-18  0.233143E-18   197.518       197.518    
loop,thermsimp(1:2)       61  0.108571E-19  0.299866E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    369              184.03          0.79          0.46         20.38
Just calling func    0   0         22.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    184.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       61
neval is:      368
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       62
neval is:      368


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      368     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.930679     -0.718406E-01 -0.775676E-20  0.775676E-20   183.388       183.388    
   2  0.665280     -0.407548     -0.440036E-19  0.440036E-19   184.352       184.352    
   3  0.775388     -0.254392     -0.274671E-19  0.274671E-19   186.004       186.004    
   4  0.147503      -1.91390     -0.206648E-18  0.206648E-18   186.680       186.680    
   5  0.428706     -0.846983     -0.914503E-19  0.914503E-19   186.885       186.885    
   6  0.457554     -0.781861     -0.844189E-19  0.844189E-19   187.612       187.612    
   7  0.353166      -1.04082     -0.112379E-18  0.112379E-18   187.995       187.995    
   8  0.378258     -0.972179     -0.104968E-18  0.104968E-18   188.056       188.056    
   9  0.425432     -0.854651     -0.922782E-19  0.922782E-19   188.280       188.280    
  10  0.883543     -0.123816     -0.133686E-19  0.133686E-19   188.569       188.569    
  11  0.500746     -0.691657     -0.746794E-19  0.746794E-19   188.990       188.990    
  12  0.347615      -1.05666     -0.114089E-18  0.114089E-18   190.441       190.441    
  13  0.565086E-01  -2.87336     -0.310242E-18  0.310242E-18   191.359       191.359    
  14  0.423129     -0.860079     -0.928642E-19  0.928642E-19   191.777       191.777    
  15  0.825886     -0.191299     -0.206549E-19  0.206549E-19   192.054       192.054    
  16  0.347394      -1.05730     -0.114158E-18  0.114158E-18   192.064       192.064    
  17  0.541056     -0.614233     -0.663199E-19  0.663199E-19   192.343       192.343    
  18  0.676933     -0.390184     -0.421288E-19  0.421288E-19   192.782       192.782    
  19  0.620772     -0.476791     -0.514800E-19  0.514800E-19   192.901       192.901    
  20  0.407275E-01  -3.20085     -0.345602E-18  0.345602E-18   193.343       193.343    
  21  0.497801     -0.697555     -0.753163E-19  0.753163E-19   193.773       193.773    
  22  0.231315      -1.46397     -0.158068E-18  0.158068E-18   193.810       193.810    
  23  0.141663      -1.95430     -0.211010E-18  0.211010E-18   194.001       194.001    
  24  0.546981     -0.603341     -0.651438E-19  0.651438E-19   194.053       194.053    
  25  0.229845      -1.47035     -0.158756E-18  0.158756E-18   194.406       194.406    
  26  0.563063     -0.574363     -0.620150E-19  0.620150E-19   194.449       194.449    
  27  0.461849     -0.772516     -0.834100E-19  0.834100E-19   194.854       194.854    
  28  0.419241     -0.869310     -0.938610E-19  0.938610E-19   194.870       194.870    
  29  0.770828     -0.260290     -0.281040E-19  0.281040E-19   195.002       195.002    
  30  0.896074     -0.109733     -0.118480E-19  0.118480E-19   195.010       195.010    
  31  0.891391     -0.114972     -0.124138E-19  0.124138E-19   195.025       195.025    
  32  0.218429      -1.52129     -0.164257E-18  0.164257E-18   195.128       195.128    
  33  0.785285     -0.241708     -0.260977E-19  0.260977E-19   195.591       195.591    
  34  0.489112     -0.715164     -0.772175E-19  0.772175E-19   195.809       195.809    
  35  0.819703     -0.198814     -0.214663E-19  0.214663E-19   195.941       195.941    
  36  0.267081E-01  -3.62279     -0.391159E-18  0.391159E-18   196.001       196.001    
  37  0.799869     -0.223307     -0.241109E-19  0.241109E-19   196.063       196.063    
  38  0.841449     -0.172629     -0.186391E-19  0.186391E-19   196.127       196.127    
  39  0.739887     -0.301258     -0.325274E-19  0.325274E-19   196.342       196.342    
  40  0.346284      -1.06049     -0.114504E-18  0.114504E-18   196.611       196.611    
  41  0.606437     -0.500155     -0.540026E-19  0.540026E-19   196.738       196.738    
  42  0.936009     -0.661301E-01 -0.714019E-20  0.714019E-20   196.808       196.808    
  43  0.153672      -1.87294     -0.202224E-18  0.202224E-18   197.184       197.184    
  44  0.403220     -0.908272     -0.980678E-19  0.980678E-19   197.242       197.242    
  45  0.135597      -1.99807     -0.215735E-18  0.215735E-18   197.518       197.518    
  46  0.996684     -0.332126E-02 -0.358603E-21  0.358603E-21   197.581       197.581    
  47  0.920714     -0.826061E-01 -0.891913E-20  0.891913E-20   197.603       197.603    
  48  0.505388     -0.682428     -0.736830E-19  0.736830E-19   197.710       197.710    
  49  0.790218     -0.235446     -0.254216E-19  0.254216E-19   197.742       197.742    
  50  0.533609     -0.628091     -0.678161E-19  0.678161E-19   197.904       197.904    
  51  0.206243      -1.57870     -0.170455E-18  0.170455E-18   198.372       198.372    
  52  0.296361      -1.21618     -0.131313E-18  0.131313E-18   198.488       198.488    
  53  0.596238     -0.517115     -0.558338E-19  0.558338E-19   198.734       198.734    
  54  0.537700     -0.620455     -0.669916E-19  0.669916E-19   199.285       199.285    
  55  0.587935     -0.531139     -0.573480E-19  0.573480E-19   199.726       199.726    
  56  0.532082     -0.630958     -0.681257E-19  0.681257E-19   199.932       199.932    
  57  0.263156      -1.33501     -0.144143E-18  0.144143E-18   201.382       201.382    
  58  0.587411E-01  -2.83462     -0.306058E-18  0.306058E-18   201.471       201.471    
  59  0.678131E-01  -2.69100     -0.290552E-18  0.290552E-18   201.533       201.533    
  60  0.431760     -0.839885     -0.906839E-19  0.906839E-19   202.706       202.706    
  61  0.491044     -0.711221     -0.767918E-19  0.767918E-19   184.029       184.029    
loop,thermsimp(1:2)       62  0.775676E-20  0.440036E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    370              193.59          0.79          0.47         20.33
Just calling func    0   0         23.09


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       62
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       63
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      369     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.507235     -0.678780     -0.732891E-19  0.732891E-19   183.388       183.388    
   2  0.560215     -0.579436     -0.625627E-19  0.625627E-19   184.029       184.029    
   3  0.195765      -1.63084     -0.176085E-18  0.176085E-18   184.352       184.352    
   4  0.802690     -0.219787     -0.237308E-19  0.237308E-19   186.004       186.004    
   5  0.150644      -1.89284     -0.204373E-18  0.204373E-18   186.680       186.680    
   6  0.358896      -1.02472     -0.110641E-18  0.110641E-18   186.885       186.885    
   7  0.245890      -1.40287     -0.151470E-18  0.151470E-18   187.612       187.612    
   8  0.407254     -0.898317     -0.969929E-19  0.969929E-19   187.995       187.995    
   9  0.678188     -0.388331     -0.419288E-19  0.419288E-19   188.056       188.056    
  10  0.496263     -0.700649     -0.756503E-19  0.756503E-19   188.280       188.280    
  11  0.226220      -1.48625     -0.160473E-18  0.160473E-18   188.569       188.569    
  12  0.333682      -1.09757     -0.118506E-18  0.118506E-18   188.990       188.990    
  13  0.627957     -0.465283     -0.502374E-19  0.502374E-19   190.441       190.441    
  14  0.807150     -0.214246     -0.231325E-19  0.231325E-19   191.359       191.359    
  15  0.135428      -1.99932     -0.215870E-18  0.215870E-18   191.777       191.777    
  16  0.716229     -0.333755     -0.360362E-19  0.360362E-19   192.054       192.054    
  17  0.676313     -0.391099     -0.422277E-19  0.422277E-19   192.064       192.064    
  18  0.841854     -0.172149     -0.185872E-19  0.185872E-19   192.343       192.343    
  19  0.743243     -0.296732     -0.320387E-19  0.320387E-19   192.782       192.782    
  20  0.359513      -1.02300     -0.110456E-18  0.110456E-18   192.901       192.901    
  21  0.812478     -0.207666     -0.224221E-19  0.224221E-19   193.343       193.343    
  22  0.480713     -0.732485     -0.790877E-19  0.790877E-19   193.773       193.773    
  23  0.583568E-01  -2.84118     -0.306767E-18  0.306767E-18   193.810       193.810    
  24  0.799208E-01  -2.52672     -0.272814E-18  0.272814E-18   194.001       194.001    
  25  0.349384      -1.05158     -0.113541E-18  0.113541E-18   194.053       194.053    
  26  0.538901     -0.618224     -0.667508E-19  0.667508E-19   194.406       194.406    
  27  0.849640     -0.162942     -0.175931E-19  0.175931E-19   194.449       194.449    
  28  0.553054     -0.592300     -0.639517E-19  0.639517E-19   194.854       194.854    
  29  0.871118     -0.137978     -0.148977E-19  0.148977E-19   194.870       194.870    
  30  0.843445     -0.170261     -0.183834E-19  0.183834E-19   195.002       195.002    
  31  0.359804      -1.02219     -0.110368E-18  0.110368E-18   195.010       195.010    
  32  0.646916     -0.435539     -0.470259E-19  0.470259E-19   195.025       195.025    
  33  0.772475     -0.258155     -0.278735E-19  0.278735E-19   195.128       195.128    
  34  0.779931     -0.248550     -0.268364E-19  0.268364E-19   195.591       195.591    
  35  0.603065     -0.505731     -0.546046E-19  0.546046E-19   195.809       195.809    
  36  0.733954     -0.309309     -0.333967E-19  0.333967E-19   195.941       195.941    
  37  0.451018E-01  -3.09883     -0.334586E-18  0.334586E-18   196.001       196.001    
  38  0.595488     -0.518375     -0.559699E-19  0.559699E-19   196.063       196.063    
  39  0.578603     -0.547139     -0.590756E-19  0.590756E-19   196.127       196.127    
  40  0.929818     -0.727665E-01 -0.785672E-20  0.785672E-20   196.342       196.342    
  41  0.113104      -2.17945     -0.235319E-18  0.235319E-18   196.611       196.611    
  42  0.954823     -0.462293E-01 -0.499146E-20  0.499146E-20   196.738       196.738    
  43  0.186925E-01  -3.97963     -0.429688E-18  0.429688E-18   196.808       196.808    
  44  0.567367     -0.566750     -0.611930E-19  0.611930E-19   197.184       197.184    
  45  0.112041      -2.18889     -0.236338E-18  0.236338E-18   197.242       197.242    
  46  0.381811     -0.962830     -0.103958E-18  0.103958E-18   197.518       197.518    
  47  0.530242E-01  -2.93701     -0.317114E-18  0.317114E-18   197.581       197.581    
  48  0.608320     -0.497054     -0.536678E-19  0.536678E-19   197.603       197.603    
  49  0.873530     -0.135213     -0.145992E-19  0.145992E-19   197.710       197.710    
  50  0.374528     -0.982088     -0.106038E-18  0.106038E-18   197.742       197.742    
  51  0.165246      -1.80032     -0.194384E-18  0.194384E-18   197.904       197.904    
  52  0.291803      -1.23168     -0.132986E-18  0.132986E-18   198.372       198.372    
  53  0.896856     -0.108860     -0.117538E-19  0.117538E-19   198.488       198.488    
  54  0.909058     -0.953458E-01 -0.102947E-19  0.102947E-19   198.734       198.734    
  55  0.938251     -0.637375E-01 -0.688185E-20  0.688185E-20   199.285       199.285    
  56  0.806402     -0.215172     -0.232325E-19  0.232325E-19   199.726       199.726    
  57  0.995848     -0.416075E-02 -0.449243E-21  0.449243E-21   199.932       199.932    
  58  0.193134      -1.64437     -0.177546E-18  0.177546E-18   201.382       201.382    
  59  0.435242     -0.831853     -0.898167E-19  0.898167E-19   201.471       201.471    
  60  0.925123     -0.778290E-01 -0.840334E-20  0.840334E-20   201.533       201.533    
  61  0.424024     -0.857966     -0.926361E-19  0.926361E-19   193.590       193.590    
loop,thermsimp(1:2)       63  0.732891E-19  0.625627E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    371              197.05          0.80          0.46         20.31
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    197.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       63
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       64
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      370     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.503450     -0.686272     -0.740980E-19  0.740980E-19   183.388       183.388    
   2  0.481353     -0.731153     -0.789439E-19  0.789439E-19   184.029       184.029    
   3  0.292996      -1.22760     -0.132546E-18  0.132546E-18   184.352       184.352    
   4  0.730665     -0.313800     -0.338816E-19  0.338816E-19   186.004       186.004    
   5  0.155712E-01  -4.16234     -0.449415E-18  0.449415E-18   186.680       186.680    
   6  0.868957     -0.140462     -0.151659E-19  0.151659E-19   186.885       186.885    
   7  0.498625     -0.695901     -0.751377E-19  0.751377E-19   187.612       187.612    
   8  0.988076E-01  -2.31458     -0.249909E-18  0.249909E-18   187.995       187.995    
   9  0.816118     -0.203196     -0.219394E-19  0.219394E-19   188.056       188.056    
  10  0.758123     -0.276909     -0.298984E-19  0.298984E-19   188.280       188.280    
  11  0.142453      -1.94874     -0.210409E-18  0.210409E-18   188.569       188.569    
  12  0.136379      -1.99232     -0.215114E-18  0.215114E-18   188.990       188.990    
  13  0.549776     -0.598244     -0.645934E-19  0.645934E-19   190.441       190.441    
  14  0.266674      -1.32173     -0.142709E-18  0.142709E-18   191.359       191.359    
  15  0.552935     -0.592515     -0.639749E-19  0.639749E-19   191.777       191.777    
  16  0.921366     -0.818977E-01 -0.884264E-20  0.884264E-20   192.054       192.054    
  17  0.337425      -1.08641     -0.117302E-18  0.117302E-18   192.064       192.064    
  18  0.723395     -0.323800     -0.349613E-19  0.349613E-19   192.343       192.343    
  19  0.695114     -0.363680     -0.392672E-19  0.392672E-19   192.782       192.782    
  20  0.514730     -0.664114     -0.717055E-19  0.717055E-19   192.901       192.901    
  21  0.543399     -0.609911     -0.658532E-19  0.658532E-19   193.343       193.343    
  22  0.706396     -0.347580     -0.375288E-19  0.375288E-19   193.590       193.590    
  23  0.267140      -1.31998     -0.142521E-18  0.142521E-18   193.773       193.773    
  24  0.717583     -0.331867     -0.358322E-19  0.358322E-19   193.810       193.810    
  25  0.812140     -0.208082     -0.224670E-19  0.224670E-19   194.001       194.001    
  26  0.895822     -0.110013     -0.118783E-19  0.118783E-19   194.053       194.053    
  27  0.574491     -0.554271     -0.598457E-19  0.598457E-19   194.406       194.406    
  28  0.580512     -0.543844     -0.587198E-19  0.587198E-19   194.449       194.449    
  29  0.725553     -0.320821     -0.346396E-19  0.346396E-19   194.854       194.854    
  30  0.344058      -1.06695     -0.115200E-18  0.115200E-18   194.870       194.870    
  31  0.394437     -0.930297     -0.100446E-18  0.100446E-18   195.002       195.002    
  32  0.744890     -0.294519     -0.317998E-19  0.317998E-19   195.010       195.010    
  33  0.833672     -0.181915     -0.196417E-19  0.196417E-19   195.025       195.025    
  34  0.154911      -1.86490     -0.201357E-18  0.201357E-18   195.128       195.128    
  35  0.439625     -0.821833     -0.887348E-19  0.887348E-19   195.591       195.591    
  36  0.835493     -0.179733     -0.194061E-19  0.194061E-19   195.809       195.809    
  37  0.407845     -0.896869     -0.968365E-19  0.968365E-19   195.941       195.941    
  38  0.441579E-01  -3.11998     -0.336870E-18  0.336870E-18   196.001       196.001    
  39  0.584256     -0.537417     -0.580258E-19  0.580258E-19   196.063       196.063    
  40  0.910975     -0.932396E-01 -0.100672E-19  0.100672E-19   196.127       196.127    
  41  0.788177     -0.238033     -0.257008E-19  0.257008E-19   196.342       196.342    
  42  0.942186     -0.595524E-01 -0.642998E-20  0.642998E-20   196.611       196.611    
  43  0.376878E-01  -3.27842     -0.353977E-18  0.353977E-18   196.738       196.738    
  44  0.185034      -1.68722     -0.182172E-18  0.182172E-18   196.808       196.808    
  45  0.859906     -0.150932     -0.162964E-19  0.162964E-19   197.184       197.184    
  46  0.505172     -0.682857     -0.737292E-19  0.737292E-19   197.242       197.242    
  47  0.736553     -0.305774     -0.330149E-19  0.330149E-19   197.518       197.518    
  48  0.422274     -0.862101     -0.930826E-19  0.930826E-19   197.581       197.581    
  49  0.577658     -0.548773     -0.592520E-19  0.592520E-19   197.603       197.603    
  50  0.880578     -0.127176     -0.137315E-19  0.137315E-19   197.710       197.710    
  51  0.951537     -0.496763E-01 -0.536364E-20  0.536364E-20   197.742       197.742    
  52  0.111218      -2.19626     -0.237134E-18  0.237134E-18   197.904       197.904    
  53  0.770219     -0.261081     -0.281893E-19  0.281893E-19   198.372       198.372    
  54  0.811211E-01  -2.51181     -0.271205E-18  0.271205E-18   198.488       198.488    
  55  0.723132     -0.324163     -0.350005E-19  0.350005E-19   198.734       198.734    
  56  0.763034     -0.270453     -0.292013E-19  0.292013E-19   199.285       199.285    
  57  0.829169     -0.187331     -0.202265E-19  0.202265E-19   199.726       199.726    
  58  0.533277     -0.628714     -0.678833E-19  0.678833E-19   199.932       199.932    
  59  0.111996      -2.18929     -0.236382E-18  0.236382E-18   201.382       201.382    
  60  0.511282     -0.670835     -0.724312E-19  0.724312E-19   201.471       201.471    
  61  0.703371     -0.351871     -0.379921E-19  0.379921E-19   197.046       197.046    
loop,thermsimp(1:2)       64  0.740980E-19  0.789439E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    372              190.80          0.79          0.47         20.35
Just calling func    0   0         23.17


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       64
neval is:      371
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       65
neval is:      371


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      371
neval,tstepnext:      371     371

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.137523      -1.98396     -0.214212E-18  0.214212E-18   183.388       183.388    
   2  0.739755     -0.301436     -0.325466E-19  0.325466E-19   184.029       184.029    
   3  0.131726      -2.02703     -0.218862E-18  0.218862E-18   184.352       184.352    
   4  0.984411     -0.157121E-01 -0.169646E-20  0.169646E-20   186.004       186.004    
   5  0.910154     -0.941415E-01 -0.101646E-19  0.101646E-19   186.680       186.680    
   6  0.524383     -0.645532     -0.696993E-19  0.696993E-19   186.885       186.885    
   7  0.316588      -1.15015     -0.124184E-18  0.124184E-18   187.612       187.612    
   8  0.946253     -0.552453E-01 -0.596493E-20  0.596493E-20   187.995       187.995    
   9  0.227770      -1.47942     -0.159736E-18  0.159736E-18   188.056       188.056    
  10  0.138853      -1.97434     -0.213173E-18  0.213173E-18   188.280       188.280    
  11  0.447355     -0.804403     -0.868528E-19  0.868528E-19   188.569       188.569    
  12  0.169533      -1.77471     -0.191618E-18  0.191618E-18   188.990       188.990    
  13  0.926916     -0.758924E-01 -0.819424E-20  0.819424E-20   190.441       190.441    
  14  0.937434     -0.646093E-01 -0.697598E-20  0.697598E-20   191.359       191.359    
  15  0.467121     -0.761167     -0.821846E-19  0.821846E-19   191.777       191.777    
  16  0.676223     -0.391232     -0.422420E-19  0.422420E-19   192.054       192.054    
  17  0.656992     -0.420084     -0.453572E-19  0.453572E-19   192.064       192.064    
  18  0.938120     -0.638775E-01 -0.689697E-20  0.689697E-20   192.343       192.343    
  19  0.913840     -0.900995E-01 -0.972820E-20  0.972820E-20   192.782       192.782    
  20  0.833625     -0.181972     -0.196478E-19  0.196478E-19   192.901       192.901    
  21  0.973383     -0.269772E-01 -0.291277E-20  0.291277E-20   193.343       193.343    
  22  0.173233      -1.75312     -0.189287E-18  0.189287E-18   193.590       193.590    
  23  0.298525      -1.20890     -0.130527E-18  0.130527E-18   193.773       193.773    
  24  0.685393     -0.377762     -0.407877E-19  0.407877E-19   193.810       193.810    
  25  0.512690     -0.668084     -0.721342E-19  0.721342E-19   194.001       194.001    
  26  0.923912     -0.791390E-01 -0.854478E-20  0.854478E-20   194.053       194.053    
  27  0.676218     -0.391240     -0.422429E-19  0.422429E-19   194.406       194.406    
  28  0.903934     -0.100999     -0.109051E-19  0.109051E-19   194.449       194.449    
  29  0.115412      -2.15925     -0.233138E-18  0.233138E-18   194.854       194.854    
  30  0.862835     -0.147531     -0.159292E-19  0.159292E-19   194.870       194.870    
  31  0.327219      -1.11713     -0.120618E-18  0.120618E-18   195.002       195.002    
  32  0.514127     -0.665286     -0.718321E-19  0.718321E-19   195.010       195.010    
  33  0.872174     -0.136767     -0.147669E-19  0.147669E-19   195.025       195.025    
  34  0.651215     -0.428915     -0.463108E-19  0.463108E-19   195.128       195.128    
  35  0.130750      -2.03447     -0.219665E-18  0.219665E-18   195.591       195.591    
  36  0.102047      -2.28232     -0.246426E-18  0.246426E-18   195.809       195.809    
  37  0.698683     -0.358558     -0.387141E-19  0.387141E-19   195.941       195.941    
  38  0.890278     -0.116221     -0.125486E-19  0.125486E-19   196.001       196.001    
  39  0.665870     -0.406662     -0.439080E-19  0.439080E-19   196.063       196.063    
  40  0.921761     -0.814689E-01 -0.879635E-20  0.879635E-20   196.127       196.127    
  41  0.918240     -0.852964E-01 -0.920960E-20  0.920960E-20   196.342       196.342    
  42  0.701967     -0.353870     -0.382079E-19  0.382079E-19   196.611       196.611    
  43  0.281035      -1.26928     -0.137046E-18  0.137046E-18   196.738       196.738    
  44  0.583794     -0.538207     -0.581111E-19  0.581111E-19   196.808       196.808    
  45  0.657329     -0.419570     -0.453018E-19  0.453018E-19   197.046       197.046    
  46  0.865922     -0.143961     -0.155437E-19  0.155437E-19   197.184       197.184    
  47  0.948004     -0.533961E-01 -0.576527E-20  0.576527E-20   197.242       197.242    
  48  0.791550     -0.233762     -0.252397E-19  0.252397E-19   197.518       197.518    
  49  0.303861      -1.19118     -0.128614E-18  0.128614E-18   197.581       197.581    
  50  0.236850E-01  -3.74291     -0.404129E-18  0.404129E-18   197.603       197.603    
  51  0.247392E-01  -3.69937     -0.399427E-18  0.399427E-18   197.710       197.710    
  52  0.767814     -0.264208     -0.285270E-19  0.285270E-19   197.742       197.742    
  53  0.551092     -0.595854     -0.643354E-19  0.643354E-19   197.904       197.904    
  54  0.594030     -0.520826     -0.562345E-19  0.562345E-19   198.372       198.372    
  55  0.895528     -0.110342     -0.119138E-19  0.119138E-19   198.488       198.488    
  56  0.878096     -0.130000     -0.140363E-19  0.140363E-19   198.734       198.734    
  57  0.745537E-01  -2.59624     -0.280320E-18  0.280320E-18   199.285       199.285    
  58  0.512667     -0.668130     -0.721391E-19  0.721391E-19   199.726       199.726    
  59  0.376986     -0.975548     -0.105332E-18  0.105332E-18   199.932       199.932    
  60  0.140372      -1.96346     -0.211998E-18  0.211998E-18   201.382       201.382    
  61  0.656268     -0.421185     -0.454761E-19  0.454761E-19   190.799       190.799    
loop,thermsimp(1:2)       65  0.214212E-18  0.325466E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    373              187.58          0.79          0.47         20.34
Just calling func    0   0         23.10


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.58
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       65
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.107972E-18           371
loop is:       66
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.215944E-19           381

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      381
neval,tstepnext:      372     381

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447974     -0.803019     -0.173407E-19  0.173407E-19   183.388       183.388    
   2  0.194846      -1.63555     -0.353186E-19  0.353186E-19   184.029       184.029    
   3  0.912710     -0.913367E-01 -0.197236E-20  0.197236E-20   184.352       184.352    
   4  0.352015      -1.04408     -0.225462E-19  0.225462E-19   186.004       186.004    
   5  0.102243      -2.28040     -0.492438E-19  0.492438E-19   186.680       186.680    
   6  0.932792E-01  -2.37216     -0.512252E-19  0.512252E-19   186.885       186.885    
   7  0.324075      -1.12678     -0.243321E-19  0.243321E-19   187.612       187.612    
   8  0.615248     -0.485731     -0.104890E-19  0.104890E-19   187.995       187.995    
   9  0.306101      -1.18384     -0.255643E-19  0.255643E-19   188.056       188.056    
  10  0.772990     -0.257489     -0.556031E-20  0.556031E-20   188.280       188.280    
  11  0.565042     -0.570855     -0.123272E-19  0.123272E-19   188.569       188.569    
  12  0.848963     -0.163739     -0.353585E-20  0.353585E-20   188.990       188.990    
  13  0.134768      -2.00420     -0.432793E-19  0.432793E-19   190.441       190.441    
  14  0.617613     -0.481893     -0.104062E-19  0.104062E-19   190.799       190.799    
  15  0.804208     -0.217897     -0.470535E-20  0.470535E-20   191.359       191.359    
  16  0.526742     -0.641044     -0.138429E-19  0.138429E-19   191.777       191.777    
  17  0.856763     -0.154594     -0.333835E-20  0.333835E-20   192.054       192.054    
  18  0.178878      -1.72105     -0.371651E-19  0.371651E-19   192.064       192.064    
  19  0.884979     -0.122192     -0.263865E-20  0.263865E-20   192.343       192.343    
  20  0.460777     -0.774842     -0.167322E-19  0.167322E-19   192.782       192.782    
  21  0.130554      -2.03597     -0.439654E-19  0.439654E-19   192.901       192.901    
  22  0.556762     -0.585617     -0.126460E-19  0.126460E-19   193.343       193.343    
  23  0.879171E-01  -2.43136     -0.525037E-19  0.525037E-19   193.590       193.590    
  24  0.436717     -0.828469     -0.178903E-19  0.178903E-19   193.773       193.773    
  25  0.612048     -0.490945     -0.106016E-19  0.106016E-19   193.810       193.810    
  26  0.743201     -0.296789     -0.640897E-20  0.640897E-20   194.001       194.001    
  27  0.888301     -0.118445     -0.255775E-20  0.255775E-20   194.053       194.053    
  28  0.949684E-01  -2.35421     -0.508377E-19  0.508377E-19   194.406       194.406    
  29  0.991400     -0.863695E-02 -0.186509E-21  0.186509E-21   194.449       194.449    
  30  0.404761     -0.904459     -0.195312E-19  0.195312E-19   194.854       194.854    
  31  0.328268      -1.11393     -0.240545E-19  0.240545E-19   194.870       194.870    
  32  0.538871     -0.618278     -0.133513E-19  0.133513E-19   195.002       195.002    
  33  0.806889E-01  -2.51715     -0.543563E-19  0.543563E-19   195.010       195.010    
  34  0.349671      -1.05076     -0.226905E-19  0.226905E-19   195.025       195.025    
  35  0.123971      -2.08771     -0.450827E-19  0.450827E-19   195.128       195.128    
  36  0.264693      -1.32919     -0.287029E-19  0.287029E-19   195.591       195.591    
  37  0.221218E-01  -3.81119     -0.823003E-19  0.823003E-19   195.809       195.809    
  38  0.168081      -1.78331     -0.385095E-19  0.385095E-19   195.941       195.941    
  39  0.577461     -0.549114     -0.118578E-19  0.118578E-19   196.001       196.001    
  40  0.746942     -0.291767     -0.630053E-20  0.630053E-20   196.063       196.063    
  41  0.546997     -0.603312     -0.130281E-19  0.130281E-19   196.127       196.127    
  42  0.333719      -1.09746     -0.236989E-19  0.236989E-19   196.342       196.342    
  43  0.730542     -0.313969     -0.677995E-20  0.677995E-20   196.611       196.611    
  44  0.676659     -0.390588     -0.843450E-20  0.843450E-20   196.738       196.738    
  45  0.309500      -1.17280     -0.253258E-19  0.253258E-19   196.808       196.808    
  46  0.977405     -0.228543E-01 -0.493525E-21  0.493525E-21   197.046       197.046    
  47  0.713216     -0.337971     -0.729826E-20  0.729826E-20   197.184       197.184    
  48  0.648656     -0.432852     -0.934716E-20  0.934716E-20   197.242       197.242    
  49  0.759518     -0.275072     -0.594000E-20  0.594000E-20   197.518       197.518    
  50  0.375038E-01  -3.28331     -0.709010E-19  0.709010E-19   197.581       197.581    
  51  0.917123     -0.865138E-01 -0.186821E-20  0.186821E-20   197.603       197.603    
  52  0.425033     -0.855590     -0.184759E-19  0.184759E-19   197.710       197.710    
  53  0.808469     -0.212613     -0.459125E-20  0.459125E-20   197.742       197.742    
  54  0.809483     -0.211360     -0.456418E-20  0.456418E-20   197.904       197.904    
  55  0.365720      -1.00589     -0.217215E-19  0.217215E-19   198.372       198.372    
  56  0.271310      -1.30449     -0.281697E-19  0.281697E-19   198.488       198.488    
  57  0.565835     -0.569452     -0.122970E-19  0.122970E-19   198.734       198.734    
  58  0.323938      -1.12720     -0.243412E-19  0.243412E-19   199.285       199.285    
  59  0.675452     -0.392374     -0.847306E-20  0.847306E-20   199.726       199.726    
  60  0.260596      -1.34478     -0.290397E-19  0.290397E-19   199.932       199.932    
  61  0.190486      -1.65818     -0.358073E-19  0.358073E-19   187.579       187.579    
loop,thermsimp(1:2)       66  0.173407E-19  0.353186E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    374              202.28          0.78          0.47         20.23
Just calling func    0   0         22.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    375              196.09          0.77          0.46         20.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    196.09
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       66
neval is:      374
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       67
neval is:      374


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      381
neval,tstepnext:      374     381

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.938434     -0.635422E-01 -0.137215E-20  0.137215E-20   183.388       183.388    
   2  0.512847     -0.667778     -0.144202E-19  0.144202E-19   184.029       184.029    
   3  0.433649     -0.835519     -0.180425E-19  0.180425E-19   184.352       184.352    
   4  0.292674      -1.22869     -0.265329E-19  0.265329E-19   186.004       186.004    
   5  0.504971     -0.683254     -0.147544E-19  0.147544E-19   186.680       186.680    
   6  0.527455     -0.639692     -0.138137E-19  0.138137E-19   186.885       186.885    
   7  0.491781     -0.709722     -0.153260E-19  0.153260E-19   187.579       187.579    
   8  0.309835      -1.17172     -0.253024E-19  0.253024E-19   187.612       187.612    
   9  0.679614     -0.386231     -0.834041E-20  0.834041E-20   187.995       187.995    
  10  0.675529     -0.392259     -0.847058E-20  0.847058E-20   188.056       188.056    
  11  0.127086      -2.06289     -0.445468E-19  0.445468E-19   188.280       188.280    
  12  0.833971     -0.181557     -0.392060E-20  0.392060E-20   188.569       188.569    
  13  0.105576      -2.24833     -0.485512E-19  0.485512E-19   188.990       188.990    
  14  0.868123     -0.141422     -0.305392E-20  0.305392E-20   190.441       190.441    
  15  0.845414     -0.167928     -0.362631E-20  0.362631E-20   190.799       190.799    
  16  0.399820     -0.916741     -0.197964E-19  0.197964E-19   191.359       191.359    
  17  0.748539     -0.289632     -0.625443E-20  0.625443E-20   191.777       191.777    
  18  0.156482      -1.85481     -0.400535E-19  0.400535E-19   192.054       192.054    
  19  0.919257     -0.841900E-01 -0.181803E-20  0.181803E-20   192.064       192.064    
  20  0.832791     -0.182972     -0.395116E-20  0.395116E-20   192.343       192.343    
  21  0.582610     -0.540238     -0.116661E-19  0.116661E-19   192.782       192.782    
  22  0.309935E-01  -3.47398     -0.750183E-19  0.750183E-19   192.901       192.901    
  23  0.232502      -1.45886     -0.315031E-19  0.315031E-19   193.343       193.343    
  24  0.862209     -0.148258     -0.320154E-20  0.320154E-20   193.590       193.590    
  25  0.691703     -0.368598     -0.795964E-20  0.795964E-20   193.773       193.773    
  26  0.569898     -0.562299     -0.121425E-19  0.121425E-19   193.810       193.810    
  27  0.652332     -0.427201     -0.922514E-20  0.922514E-20   194.001       194.001    
  28  0.156591      -1.85412     -0.400384E-19  0.400384E-19   194.053       194.053    
  29  0.519374E-01  -2.95772     -0.638700E-19  0.638700E-19   194.406       194.406    
  30  0.194294      -1.63838     -0.353798E-19  0.353798E-19   194.449       194.449    
  31  0.877999     -0.130110     -0.280964E-20  0.280964E-20   194.854       194.854    
  32  0.142658      -1.94730     -0.420508E-19  0.420508E-19   194.870       194.870    
  33  0.360225      -1.02103     -0.220484E-19  0.220484E-19   195.002       195.002    
  34  0.516792     -0.660115     -0.142548E-19  0.142548E-19   195.010       195.010    
  35  0.529216     -0.636359     -0.137418E-19  0.137418E-19   195.025       195.025    
  36  0.763444     -0.269916     -0.582866E-20  0.582866E-20   195.128       195.128    
  37  0.928674     -0.739971E-01 -0.159792E-20  0.159792E-20   195.591       195.591    
  38  0.394074     -0.931218     -0.201090E-19  0.201090E-19   195.809       195.809    
  39  0.156371      -1.85552     -0.400688E-19  0.400688E-19   195.941       195.941    
  40  0.474422     -0.745658     -0.161020E-19  0.161020E-19   196.001       196.001    
  41  0.898049     -0.107531     -0.232206E-20  0.232206E-20   196.063       196.063    
  42  0.406160     -0.901008     -0.194567E-19  0.194567E-19   196.127       196.127    
  43  0.134890      -2.00329     -0.432599E-19  0.432599E-19   196.342       196.342    
  44  0.891162E-01  -2.41781     -0.522111E-19  0.522111E-19   196.611       196.611    
  45  0.119575      -2.12381     -0.458623E-19  0.458623E-19   196.738       196.738    
  46  0.283412      -1.26085     -0.272273E-19  0.272273E-19   196.808       196.808    
  47  0.719276     -0.329511     -0.711557E-20  0.711557E-20   197.046       197.046    
  48  0.260586      -1.34482     -0.290406E-19  0.290406E-19   197.184       197.184    
  49  0.525471     -0.643461     -0.138951E-19  0.138951E-19   197.242       197.242    
  50  0.779684     -0.248866     -0.537410E-20  0.537410E-20   197.518       197.518    
  51  0.931400E-01  -2.37365     -0.512575E-19  0.512575E-19   197.581       197.581    
  52  0.494134     -0.704948     -0.152229E-19  0.152229E-19   197.603       197.603    
  53  0.285177      -1.25464     -0.270932E-19  0.270932E-19   197.710       197.710    
  54  0.343543E-01  -3.37103     -0.727952E-19  0.727952E-19   197.742       197.742    
  55  0.711105     -0.340935     -0.736227E-20  0.736227E-20   197.904       197.904    
  56  0.629880     -0.462226     -0.998147E-20  0.998147E-20   198.372       198.372    
  57  0.125017      -2.07931     -0.449013E-19  0.449013E-19   198.488       198.488    
  58  0.472929     -0.748810     -0.161701E-19  0.161701E-19   198.734       198.734    
  59  0.260330      -1.34581     -0.290618E-19  0.290618E-19   199.285       199.285    
  60  0.395894     -0.926609     -0.200095E-19  0.200095E-19   199.726       199.726    
  61  0.311840      -1.16526     -0.251631E-19  0.251631E-19   196.092       196.092    
loop,thermsimp(1:2)       67  0.137215E-20  0.144202E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    376              181.21          0.79          0.47         20.34
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    377              174.23          0.78          0.46         20.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1    174.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       67
neval is:      376
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       68
neval is:      376


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      381
neval,tstepnext:      376     381

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.257886      -1.35524     -0.292655E-19  0.292655E-19   183.388       183.388    
   2  0.242922      -1.41501     -0.305563E-19  0.305563E-19   184.029       184.029    
   3  0.537558     -0.620719     -0.134040E-19  0.134040E-19   184.352       184.352    
   4  0.311097E-01  -3.47024     -0.749375E-19  0.749375E-19   186.004       186.004    
   5  0.849612     -0.162976     -0.351935E-20  0.351935E-20   186.680       186.680    
   6  0.541350     -0.613690     -0.132522E-19  0.132522E-19   186.885       186.885    
   7  0.816679     -0.202510     -0.437307E-20  0.437307E-20   187.579       187.579    
   8  0.215267      -1.53587     -0.331662E-19  0.331662E-19   187.612       187.612    
   9  0.264970      -1.32814     -0.286803E-19  0.286803E-19   187.995       187.995    
  10  0.178106      -1.72537     -0.372583E-19  0.372583E-19   188.056       188.056    
  11  0.442272     -0.815829     -0.176173E-19  0.176173E-19   188.280       188.280    
  12  0.230243      -1.46862     -0.317139E-19  0.317139E-19   188.569       188.569    
  13  0.735992     -0.306536     -0.661945E-20  0.661945E-20   188.990       188.990    
  14  0.407144     -0.898589     -0.194045E-19  0.194045E-19   190.441       190.441    
  15  0.601807     -0.507819     -0.109660E-19  0.109660E-19   190.799       190.799    
  16  0.266184      -1.32357     -0.285816E-19  0.285816E-19   191.359       191.359    
  17  0.618209     -0.480928     -0.103853E-19  0.103853E-19   191.777       191.777    
  18  0.537074     -0.621619     -0.134235E-19  0.134235E-19   192.054       192.054    
  19  0.980054     -0.201475E-01 -0.435072E-21  0.435072E-21   192.064       192.064    
  20  0.964248     -0.364066E-01 -0.786177E-21  0.786177E-21   192.343       192.343    
  21  0.545265     -0.606483     -0.130966E-19  0.130966E-19   192.782       192.782    
  22  0.239760E-01  -3.73070     -0.805621E-19  0.805621E-19   192.901       192.901    
  23  0.933839     -0.684510E-01 -0.147816E-20  0.147816E-20   193.343       193.343    
  24  0.114455      -2.16757     -0.468073E-19  0.468073E-19   193.590       193.590    
  25  0.898708E-02  -4.71197     -0.101752E-18  0.101752E-18   193.773       193.773    
  26  0.418060     -0.872131     -0.188331E-19  0.188331E-19   193.810       193.810    
  27  0.365353      -1.00689     -0.217432E-19  0.217432E-19   194.001       194.001    
  28  0.134827      -2.00376     -0.432699E-19  0.432699E-19   194.053       194.053    
  29  0.186020      -1.68190     -0.363196E-19  0.363196E-19   194.406       194.406    
  30  0.613552E-01  -2.79108     -0.602715E-19  0.602715E-19   194.449       194.449    
  31  0.734156     -0.309034     -0.667339E-20  0.667339E-20   194.854       194.854    
  32  0.804142     -0.217980     -0.470713E-20  0.470713E-20   194.870       194.870    
  33  0.182846      -1.69911     -0.366913E-19  0.366913E-19   195.002       195.002    
  34  0.452472     -0.793030     -0.171250E-19  0.171250E-19   195.010       195.010    
  35  0.455900     -0.785482     -0.169620E-19  0.169620E-19   195.025       195.025    
  36  0.832218     -0.183660     -0.396603E-20  0.396603E-20   195.128       195.128    
  37  0.564105     -0.572514     -0.123631E-19  0.123631E-19   195.591       195.591    
  38  0.349478      -1.05132     -0.227025E-19  0.227025E-19   195.809       195.809    
  39  0.831843     -0.184112     -0.397577E-20  0.397577E-20   195.941       195.941    
  40  0.298343      -1.20951     -0.261187E-19  0.261187E-19   196.001       196.001    
  41  0.996891     -0.311362E-02 -0.672366E-22  0.672366E-22   196.063       196.063    
  42  0.375698     -0.978969     -0.211402E-19  0.211402E-19   196.092       196.092    
  43  0.584789     -0.536505     -0.115855E-19  0.115855E-19   196.127       196.127    
  44  0.606526     -0.500008     -0.107973E-19  0.107973E-19   196.342       196.342    
  45  0.200383      -1.60752     -0.347135E-19  0.347135E-19   196.611       196.611    
  46  0.512295     -0.668854     -0.144435E-19  0.144435E-19   196.738       196.738    
  47  0.665032     -0.407919     -0.880876E-20  0.880876E-20   196.808       196.808    
  48  0.599732     -0.511272     -0.110406E-19  0.110406E-19   197.046       197.046    
  49  0.803518     -0.218756     -0.472389E-20  0.472389E-20   197.184       197.184    
  50  0.976074     -0.242169E-01 -0.522948E-21  0.522948E-21   197.242       197.242    
  51  0.143702      -1.94002     -0.418934E-19  0.418934E-19   197.518       197.518    
  52  0.398685E-01  -3.22217     -0.695806E-19  0.695806E-19   197.581       197.581    
  53  0.120209      -2.11853     -0.457482E-19  0.457482E-19   197.603       197.603    
  54  0.989123     -0.109365E-01 -0.236166E-21  0.236166E-21   197.710       197.710    
  55  0.359257E-01  -3.32630     -0.718294E-19  0.718294E-19   197.742       197.742    
  56  0.459695E-01  -3.07978     -0.665058E-19  0.665058E-19   197.904       197.904    
  57  0.130849      -2.03371     -0.439167E-19  0.439167E-19   198.372       198.372    
  58  0.171252      -1.76462     -0.381059E-19  0.381059E-19   198.488       198.488    
  59  0.453039     -0.791777     -0.170979E-19  0.170979E-19   198.734       198.734    
  60  0.752712     -0.284072     -0.613435E-20  0.613435E-20   199.285       199.285    
  61  0.417226     -0.874126     -0.188762E-19  0.188762E-19   174.233       174.233    
loop,thermsimp(1:2)       68  0.292655E-19  0.305563E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    378              187.65          0.80          0.47         20.31
Just calling func    0   0         22.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       68
neval is:      377
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       69
neval is:      377


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      381
neval,tstepnext:      377     381

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.315077      -1.15494     -0.249402E-19  0.249402E-19   174.233       174.233    
   2  0.634517E-01  -2.75748     -0.595459E-19  0.595459E-19   183.388       183.388    
   3  0.816954     -0.202173     -0.436580E-20  0.436580E-20   184.029       184.029    
   4  0.575556     -0.552418     -0.119291E-19  0.119291E-19   184.352       184.352    
   5  0.627259     -0.466395     -0.100715E-19  0.100715E-19   186.004       186.004    
   6  0.868809E-01  -2.44322     -0.527597E-19  0.527597E-19   186.680       186.680    
   7  0.839383     -0.175088     -0.378090E-20  0.378090E-20   186.885       186.885    
   8  0.926982E-01  -2.37841     -0.513601E-19  0.513601E-19   187.579       187.579    
   9  0.476200     -0.741917     -0.160212E-19  0.160212E-19   187.612       187.612    
  10  0.790353     -0.235275     -0.508062E-20  0.508062E-20   187.995       187.995    
  11  0.472984     -0.748693     -0.161675E-19  0.161675E-19   188.056       188.056    
  12  0.890015     -0.116517     -0.251611E-20  0.251611E-20   188.280       188.280    
  13  0.768147     -0.263774     -0.569602E-20  0.569602E-20   188.569       188.569    
  14  0.511560     -0.670291     -0.144745E-19  0.144745E-19   188.990       188.990    
  15  0.746942E-01  -2.59435     -0.560234E-19  0.560234E-19   190.441       190.441    
  16  0.671948     -0.397574     -0.858536E-20  0.858536E-20   190.799       190.799    
  17  0.481265E-01  -3.03392     -0.655156E-19  0.655156E-19   191.359       191.359    
  18  0.574604     -0.554073     -0.119649E-19  0.119649E-19   191.777       191.777    
  19  0.404682     -0.904654     -0.195354E-19  0.195354E-19   192.054       192.054    
  20  0.508220E-01  -2.97943     -0.643388E-19  0.643388E-19   192.064       192.064    
  21  0.330693      -1.10657     -0.238956E-19  0.238956E-19   192.343       192.343    
  22  0.865519     -0.144426     -0.311879E-20  0.311879E-20   192.782       192.782    
  23  0.141675      -1.95422     -0.422002E-19  0.422002E-19   192.901       192.901    
  24  0.342472      -1.07157     -0.231398E-19  0.231398E-19   193.343       193.343    
  25  0.873890     -0.134801     -0.291094E-20  0.291094E-20   193.590       193.590    
  26  0.531326     -0.632380     -0.136558E-19  0.136558E-19   193.773       193.773    
  27  0.955801E-01  -2.34779     -0.506990E-19  0.506990E-19   193.810       193.810    
  28  0.420903E-01  -3.16794     -0.684096E-19  0.684096E-19   194.001       194.001    
  29  0.668732     -0.402372     -0.868896E-20  0.868896E-20   194.053       194.053    
  30  0.766647     -0.265729     -0.573824E-20  0.573824E-20   194.406       194.406    
  31  0.139182      -1.97198     -0.425835E-19  0.425835E-19   194.449       194.449    
  32  0.525302     -0.643781     -0.139020E-19  0.139020E-19   194.854       194.854    
  33  0.997993     -0.200902E-02 -0.433836E-22  0.433836E-22   194.870       194.870    
  34  0.988602     -0.114632E-01 -0.247540E-21  0.247540E-21   195.002       195.002    
  35  0.150952      -1.89080     -0.408305E-19  0.408305E-19   195.010       195.010    
  36  0.195157      -1.63395     -0.352841E-19  0.352841E-19   195.025       195.025    
  37  0.161546      -1.82297     -0.393658E-19  0.393658E-19   195.128       195.128    
  38  0.781995E-01  -2.54849     -0.550330E-19  0.550330E-19   195.591       195.591    
  39  0.686063     -0.376786     -0.813645E-20  0.813645E-20   195.809       195.809    
  40  0.429390     -0.845391     -0.182557E-19  0.182557E-19   195.941       195.941    
  41  0.635181     -0.453845     -0.980049E-20  0.980049E-20   196.001       196.001    
  42  0.281182E-01  -3.57134     -0.771207E-19  0.771207E-19   196.063       196.063    
  43  0.698604     -0.358671     -0.774527E-20  0.774527E-20   196.092       196.092    
  44  0.321555      -1.13459     -0.245007E-19  0.245007E-19   196.127       196.127    
  45  0.207773E-01  -3.87389     -0.836543E-19  0.836543E-19   196.342       196.342    
  46  0.136377      -1.99233     -0.430231E-19  0.430231E-19   196.611       196.611    
  47  0.872411     -0.136494     -0.294751E-20  0.294751E-20   196.738       196.738    
  48  0.864707     -0.145364     -0.313905E-20  0.313905E-20   196.808       196.808    
  49  0.755888     -0.279862     -0.604343E-20  0.604343E-20   197.046       197.046    
  50  0.217223E-01  -3.82942     -0.826938E-19  0.826938E-19   197.184       197.184    
  51  0.912404     -0.916728E-01 -0.197961E-20  0.197961E-20   197.242       197.242    
  52  0.200556      -1.60666     -0.346949E-19  0.346949E-19   197.518       197.518    
  53  0.941810     -0.599513E-01 -0.129461E-20  0.129461E-20   197.581       197.581    
  54  0.514718     -0.664135     -0.143416E-19  0.143416E-19   197.603       197.603    
  55  0.106763      -2.23715     -0.483097E-19  0.483097E-19   197.710       197.710    
  56  0.363649      -1.01157     -0.218441E-19  0.218441E-19   197.742       197.742    
  57  0.456814     -0.783480     -0.169187E-19  0.169187E-19   197.904       197.904    
  58  0.527665     -0.639294     -0.138052E-19  0.138052E-19   198.372       198.372    
  59  0.751218     -0.286060     -0.617727E-20  0.617727E-20   198.488       198.488    
  60  0.411916     -0.886937     -0.191528E-19  0.191528E-19   198.734       198.734    
  61  0.327657      -1.11579     -0.240948E-19  0.240948E-19   187.645       187.645    
loop,thermsimp(1:2)       69  0.249402E-19  0.595459E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    379              187.68          0.79          0.47         20.36
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       69
neval is:      378
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       70
neval is:      378


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      381
neval,tstepnext:      378     381

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.501195     -0.690759     -0.149165E-19  0.149165E-19   174.233       174.233    
   2  0.178057      -1.72565     -0.372643E-19  0.372643E-19   183.388       183.388    
   3  0.146249      -1.92245     -0.415140E-19  0.415140E-19   184.029       184.029    
   4  0.162447      -1.81740     -0.392457E-19  0.392457E-19   184.352       184.352    
   5  0.905594     -0.991644E-01 -0.214139E-20  0.214139E-20   186.004       186.004    
   6  0.602808     -0.506156     -0.109301E-19  0.109301E-19   186.680       186.680    
   7  0.618787E-01  -2.78258     -0.600880E-19  0.600880E-19   186.885       186.885    
   8  0.748332     -0.289909     -0.626040E-20  0.626040E-20   187.579       187.579    
   9  0.599486     -0.511683     -0.110495E-19  0.110495E-19   187.612       187.612    
  10  0.694311     -0.364836     -0.787839E-20  0.787839E-20   187.645       187.645    
  11  0.173180      -1.75342     -0.378640E-19  0.378640E-19   187.995       187.995    
  12  0.571974E-01  -2.86125     -0.617868E-19  0.617868E-19   188.056       188.056    
  13  0.601199     -0.508830     -0.109878E-19  0.109878E-19   188.280       188.280    
  14  0.891713     -0.114611     -0.247495E-20  0.247495E-20   188.569       188.569    
  15  0.177027E-01  -4.03404     -0.871125E-19  0.871125E-19   188.990       188.990    
  16  0.702884     -0.352564     -0.761339E-20  0.761339E-20   190.441       190.441    
  17  0.268632      -1.31441     -0.283839E-19  0.283839E-19   190.799       190.799    
  18  0.370677     -0.992424     -0.214308E-19  0.214308E-19   191.359       191.359    
  19  0.712960E-01  -2.64091     -0.570289E-19  0.570289E-19   191.777       191.777    
  20  0.622832     -0.473479     -0.102245E-19  0.102245E-19   192.054       192.054    
  21  0.903062     -0.101964     -0.220184E-20  0.220184E-20   192.064       192.064    
  22  0.210279E-01  -3.86190     -0.833953E-19  0.833953E-19   192.343       192.343    
  23  0.678706     -0.387567     -0.836926E-20  0.836926E-20   192.782       192.782    
  24  0.879852     -0.128001     -0.276410E-20  0.276410E-20   192.901       192.901    
  25  0.555986E-01  -2.88960     -0.623990E-19  0.623990E-19   193.343       193.343    
  26  0.623195     -0.472896     -0.102119E-19  0.102119E-19   193.590       193.590    
  27  0.340169      -1.07831     -0.232855E-19  0.232855E-19   193.773       193.773    
  28  0.674142     -0.394315     -0.851497E-20  0.851497E-20   193.810       193.810    
  29  0.791027     -0.234423     -0.506221E-20  0.506221E-20   194.001       194.001    
  30  0.856218     -0.155231     -0.335211E-20  0.335211E-20   194.053       194.053    
  31  0.941038     -0.607714E-01 -0.131232E-20  0.131232E-20   194.406       194.406    
  32  0.600740     -0.509593     -0.110043E-19  0.110043E-19   194.449       194.449    
  33  0.269508      -1.31116     -0.283136E-19  0.283136E-19   194.854       194.854    
  34  0.117837      -2.13846     -0.461786E-19  0.461786E-19   194.870       194.870    
  35  0.511730     -0.669958     -0.144673E-19  0.144673E-19   195.002       195.002    
  36  0.414855     -0.879826     -0.189993E-19  0.189993E-19   195.010       195.010    
  37  0.166056      -1.79543     -0.387711E-19  0.387711E-19   195.025       195.025    
  38  0.773789     -0.256456     -0.553801E-20  0.553801E-20   195.128       195.128    
  39  0.420279     -0.866837     -0.187188E-19  0.187188E-19   195.591       195.591    
  40  0.454559     -0.788427     -0.170256E-19  0.170256E-19   195.809       195.809    
  41  0.655016     -0.423095     -0.913647E-20  0.913647E-20   195.941       195.941    
  42  0.390632     -0.939990     -0.202985E-19  0.202985E-19   196.001       196.001    
  43  0.235049      -1.44796     -0.312678E-19  0.312678E-19   196.063       196.063    
  44  0.956055E-01  -2.34752     -0.506933E-19  0.506933E-19   196.092       196.092    
  45  0.351919      -1.04435     -0.225522E-19  0.225522E-19   196.127       196.127    
  46  0.863213     -0.147093     -0.317638E-20  0.317638E-20   196.342       196.342    
  47  0.626156     -0.468156     -0.101095E-19  0.101095E-19   196.611       196.611    
  48  0.473604     -0.747384     -0.161393E-19  0.161393E-19   196.738       196.738    
  49  0.153106      -1.87663     -0.405245E-19  0.405245E-19   196.808       196.808    
  50  0.235952      -1.44413     -0.311850E-19  0.311850E-19   197.046       197.046    
  51  0.412485     -0.885556     -0.191230E-19  0.191230E-19   197.184       197.184    
  52  0.981292     -0.188852E-01 -0.407813E-21  0.407813E-21   197.242       197.242    
  53  0.112850      -2.18170     -0.471124E-19  0.471124E-19   197.518       197.518    
  54  0.626443E-01  -2.77028     -0.598225E-19  0.598225E-19   197.581       197.581    
  55  0.596457     -0.516749     -0.111589E-19  0.111589E-19   197.603       197.603    
  56  0.758580     -0.276308     -0.596668E-20  0.596668E-20   197.710       197.710    
  57  0.369600     -0.995334     -0.214936E-19  0.214936E-19   197.742       197.742    
  58  0.919332     -0.841078E-01 -0.181625E-20  0.181625E-20   197.904       197.904    
  59  0.382601     -0.960763     -0.207471E-19  0.207471E-19   198.372       198.372    
  60  0.119470      -2.12469     -0.458813E-19  0.458813E-19   198.488       198.488    
  61  0.869864     -0.139418     -0.301064E-20  0.301064E-20   187.676       187.676    
loop,thermsimp(1:2)       70  0.149165E-19  0.372643E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    380              183.76          0.80          0.47         20.32
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    183.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       70
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       71
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      381
neval,tstepnext:      379     381

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.555405     -0.588058     -0.126987E-19  0.126987E-19   174.233       174.233    
   2  0.256969      -1.35880     -0.293424E-19  0.293424E-19   183.388       183.388    
   3  0.747890     -0.290500     -0.627315E-20  0.627315E-20   184.029       184.029    
   4  0.722939     -0.324430     -0.700586E-20  0.700586E-20   184.352       184.352    
   5  0.209506E-01  -3.86559     -0.834749E-19  0.834749E-19   186.004       186.004    
   6  0.174454      -1.74609     -0.377058E-19  0.377058E-19   186.680       186.680    
   7  0.782527     -0.245226     -0.529550E-20  0.529550E-20   186.885       186.885    
   8  0.542484     -0.611597     -0.132071E-19  0.132071E-19   187.579       187.579    
   9  0.824137     -0.193419     -0.417676E-20  0.417676E-20   187.612       187.612    
  10  0.308161      -1.17713     -0.254194E-19  0.254194E-19   187.645       187.645    
  11  0.660698     -0.414459     -0.894998E-20  0.894998E-20   187.676       187.676    
  12  0.340265      -1.07803     -0.232794E-19  0.232794E-19   187.995       187.995    
  13  0.207374E-01  -3.87582     -0.836958E-19  0.836958E-19   188.056       188.056    
  14  0.138113      -1.97968     -0.427499E-19  0.427499E-19   188.280       188.280    
  15  0.579616     -0.545390     -0.117773E-19  0.117773E-19   188.569       188.569    
  16  0.555337     -0.588180     -0.127014E-19  0.127014E-19   188.990       188.990    
  17  0.492838     -0.707575     -0.152796E-19  0.152796E-19   190.441       190.441    
  18  0.359664      -1.02258     -0.220820E-19  0.220820E-19   190.799       190.799    
  19  0.464932     -0.765863     -0.165383E-19  0.165383E-19   191.359       191.359    
  20  0.476701     -0.740866     -0.159985E-19  0.159985E-19   191.777       191.777    
  21  0.488095     -0.717246     -0.154885E-19  0.154885E-19   192.054       192.054    
  22  0.381435     -0.963814     -0.208129E-19  0.208129E-19   192.064       192.064    
  23  0.469894     -0.755248     -0.163091E-19  0.163091E-19   192.343       192.343    
  24  0.808598     -0.212454     -0.458780E-20  0.458780E-20   192.782       192.782    
  25  0.135825      -1.99639     -0.431107E-19  0.431107E-19   192.901       192.901    
  26  0.925768E-01  -2.37972     -0.513885E-19  0.513885E-19   193.343       193.343    
  27  0.157720      -1.84693     -0.398833E-19  0.398833E-19   193.590       193.590    
  28  0.719771     -0.328822     -0.710070E-20  0.710070E-20   193.773       193.773    
  29  0.389173     -0.943732     -0.203793E-19  0.203793E-19   193.810       193.810    
  30  0.718090     -0.331160     -0.715120E-20  0.715120E-20   194.001       194.001    
  31  0.890364     -0.116125     -0.250764E-20  0.250764E-20   194.053       194.053    
  32  0.489555E-01  -3.01684     -0.651468E-19  0.651468E-19   194.406       194.406    
  33  0.978816     -0.214112E-01 -0.462362E-21  0.462362E-21   194.449       194.449    
  34  0.662335E-01  -2.71457     -0.586194E-19  0.586194E-19   194.854       194.854    
  35  0.762519     -0.271128     -0.585484E-20  0.585484E-20   194.870       194.870    
  36  0.579193     -0.546119     -0.117931E-19  0.117931E-19   195.002       195.002    
  37  0.349295      -1.05184     -0.227138E-19  0.227138E-19   195.010       195.010    
  38  0.919087     -0.843747E-01 -0.182202E-20  0.182202E-20   195.025       195.025    
  39  0.892437     -0.113799     -0.245742E-20  0.245742E-20   195.128       195.128    
  40  0.410620     -0.890088     -0.192209E-19  0.192209E-19   195.591       195.591    
  41  0.407562     -0.897563     -0.193823E-19  0.193823E-19   195.809       195.809    
  42  0.250840      -1.38294     -0.298637E-19  0.298637E-19   195.941       195.941    
  43  0.304902      -1.18777     -0.256490E-19  0.256490E-19   196.001       196.001    
  44  0.568834     -0.564166     -0.121828E-19  0.121828E-19   196.063       196.063    
  45  0.825634     -0.191604     -0.413756E-20  0.413756E-20   196.092       196.092    
  46  0.953341     -0.477825E-01 -0.103183E-20  0.103183E-20   196.127       196.127    
  47  0.660616     -0.414583     -0.895264E-20  0.895264E-20   196.342       196.342    
  48  0.177638      -1.72801     -0.373152E-19  0.373152E-19   196.611       196.611    
  49  0.189771      -1.66194     -0.358884E-19  0.358884E-19   196.738       196.738    
  50  0.215043E-01  -3.83950     -0.829116E-19  0.829116E-19   196.808       196.808    
  51  0.742609     -0.297585     -0.642616E-20  0.642616E-20   197.046       197.046    
  52  0.512525     -0.668406     -0.144338E-19  0.144338E-19   197.184       197.184    
  53  0.772373     -0.258288     -0.557756E-20  0.557756E-20   197.242       197.242    
  54  0.738339     -0.303352     -0.655069E-20  0.655069E-20   197.518       197.518    
  55  0.710033     -0.342444     -0.739486E-20  0.739486E-20   197.581       197.581    
  56  0.309583      -1.17253     -0.253200E-19  0.253200E-19   197.603       197.603    
  57  0.875282E-01  -2.43579     -0.525994E-19  0.525994E-19   197.710       197.710    
  58  0.257597      -1.35636     -0.292897E-19  0.292897E-19   197.742       197.742    
  59  0.846487     -0.166660     -0.359892E-20  0.359892E-20   197.904       197.904    
  60  0.698072     -0.359433     -0.776171E-20  0.776171E-20   198.372       198.372    
  61  0.328934E-01  -3.41448     -0.737336E-19  0.737336E-19   183.761       183.761    
loop,thermsimp(1:2)       71  0.126987E-19  0.293424E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    381              198.44          0.80          0.46         20.23
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    382              190.60          0.77          0.46         20.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    198.44        2.525     -1.896      4.083     -100.0     0.4250    
                      -1.748      1.237     -100.0      2.863    -0.9474    
                      0.8845E-01 -1.888      2.009      0.000     0.6600    
                      -1.106     -20.00      0.000      0.000     -1.221    

                      -1.600      6848.      9519.     -552.4     -1451.    
                      -4.215     -5.892     -4.614     -15.33     -5.168    
                      -13.07     -2.665     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.6712E-01-0.6617E-01  0.000    -0.1346    
                     -0.2293    -0.1325    -0.1540    -0.1959    -0.8369E-02

                     -0.7058     -2.766      1.382     0.2137     0.6092E-01
                      0.7452E-01-0.3677E-01-0.1590    -0.3566E-01-0.6487E-01
                     -0.7370E-01 0.9377E-01-0.2143     -3.097      1.382    

                      -1.345     -1.803      3550.      2298.      0.000    
                       0.000      9.120      8.430      0.000     0.1000    
                       1.280      1.267      9.155      8.901     -109.9    

                      0.1000      1.318      1.262      9.270      9.036    
                      -630.9     0.1000     0.2862E-01 0.8220      9.370    
                       9.236      7947.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    190.60
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       71
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       72
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      381
neval,tstepnext:      381     381

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.749564E-01  -2.59085     -0.559477E-19  0.559477E-19   174.233       174.233    
   2  0.180317      -1.71304     -0.369920E-19  0.369920E-19   183.388       183.388    
   3  0.309055      -1.17424     -0.253569E-19  0.253569E-19   183.761       183.761    
   4  0.561206     -0.577667     -0.124743E-19  0.124743E-19   184.029       184.029    
   5  0.288668      -1.24248     -0.268305E-19  0.268305E-19   184.352       184.352    
   6  0.687809     -0.374243     -0.808155E-20  0.808155E-20   186.004       186.004    
   7  0.546391     -0.604420     -0.130521E-19  0.130521E-19   186.680       186.680    
   8  0.751061     -0.286268     -0.618178E-20  0.618178E-20   186.885       186.885    
   9  0.177582      -1.72832     -0.373221E-19  0.373221E-19   187.579       187.579    
  10  0.109706      -2.20995     -0.477224E-19  0.477224E-19   187.612       187.612    
  11  0.163303      -1.81215     -0.391322E-19  0.391322E-19   187.645       187.645    
  12  0.321394      -1.13509     -0.245115E-19  0.245115E-19   187.676       187.676    
  13  0.674608     -0.393624     -0.850005E-20  0.850005E-20   187.995       187.995    
  14  0.774799     -0.255152     -0.550984E-20  0.550984E-20   188.056       188.056    
  15  0.525704     -0.643018     -0.138856E-19  0.138856E-19   188.280       188.280    
  16  0.591380     -0.525296     -0.113434E-19  0.113434E-19   188.569       188.569    
  17  0.531517     -0.632020     -0.136481E-19  0.136481E-19   188.990       188.990    
  18  0.604738     -0.502961     -0.108611E-19  0.108611E-19   190.441       190.441    
  19  0.374335     -0.982605     -0.212187E-19  0.212187E-19   190.799       190.799    
  20  0.146384      -1.92152     -0.414940E-19  0.414940E-19   191.359       191.359    
  21  0.939513     -0.623937E-01 -0.134735E-20  0.134735E-20   191.777       191.777    
  22  0.887920     -0.118874     -0.256701E-20  0.256701E-20   192.054       192.054    
  23  0.605889     -0.501058     -0.108200E-19  0.108200E-19   192.064       192.064    
  24  0.363663      -1.01153     -0.218433E-19  0.218433E-19   192.343       192.343    
  25  0.627607     -0.465840     -0.100595E-19  0.100595E-19   192.782       192.782    
  26  0.626628     -0.467402     -0.100932E-19  0.100932E-19   192.901       192.901    
  27  0.208110      -1.56969     -0.338964E-19  0.338964E-19   193.343       193.343    
  28  0.102795      -2.27502     -0.491275E-19  0.491275E-19   193.590       193.590    
  29  0.901878     -0.103276     -0.223017E-20  0.223017E-20   193.773       193.773    
  30  0.880199     -0.127607     -0.275560E-20  0.275560E-20   193.810       193.810    
  31  0.552307     -0.593651     -0.128195E-19  0.128195E-19   194.001       194.001    
  32  0.807422     -0.213909     -0.461922E-20  0.461922E-20   194.053       194.053    
  33  0.607040     -0.499160     -0.107790E-19  0.107790E-19   194.406       194.406    
  34  0.289946      -1.23806     -0.267351E-19  0.267351E-19   194.449       194.449    
  35  0.212200E-01  -3.85281     -0.831990E-19  0.831990E-19   194.854       194.854    
  36  0.552812     -0.592737     -0.127998E-19  0.127998E-19   194.870       194.870    
  37  0.821251     -0.196927     -0.425251E-20  0.425251E-20   195.002       195.002    
  38  0.801736     -0.220975     -0.477182E-20  0.477182E-20   195.010       195.010    
  39  0.628735     -0.464045     -0.100208E-19  0.100208E-19   195.025       195.025    
  40  0.517767     -0.658230     -0.142141E-19  0.142141E-19   195.128       195.128    
  41  0.770790     -0.260340     -0.562187E-20  0.562187E-20   195.591       195.591    
  42  0.986896     -0.131905E-01 -0.284840E-21  0.284840E-21   195.809       195.809    
  43  0.467248     -0.760895     -0.164310E-19  0.164310E-19   195.941       195.941    
  44  0.466766     -0.761927     -0.164533E-19  0.164533E-19   196.001       196.001    
  45  0.336322      -1.08969     -0.235311E-19  0.235311E-19   196.063       196.063    
  46  0.374047     -0.983374     -0.212353E-19  0.212353E-19   196.092       196.092    
  47  0.173610      -1.75094     -0.378105E-19  0.378105E-19   196.127       196.127    
  48  0.250159      -1.38566     -0.299224E-19  0.299224E-19   196.342       196.342    
  49  0.656909     -0.420209     -0.907415E-20  0.907415E-20   196.611       196.611    
  50  0.480448     -0.733036     -0.158294E-19  0.158294E-19   196.738       196.738    
  51  0.979192     -0.210271E-01 -0.454066E-21  0.454066E-21   196.808       196.808    
  52  0.566169     -0.568864     -0.122842E-19  0.122842E-19   197.046       197.046    
  53  0.189707      -1.66227     -0.358957E-19  0.358957E-19   197.184       197.184    
  54  0.734556     -0.308490     -0.666164E-20  0.666164E-20   197.242       197.242    
  55  0.746224E-02  -4.89790     -0.105767E-18  0.105767E-18   197.518       197.518    
  56  0.537647     -0.620553     -0.134004E-19  0.134004E-19   197.581       197.581    
  57  0.343419      -1.06880     -0.230801E-19  0.230801E-19   197.603       197.603    
  58  0.151447      -1.88752     -0.407597E-19  0.407597E-19   197.710       197.710    
  59  0.425953     -0.853427     -0.184292E-19  0.184292E-19   197.742       197.742    
  60  0.926732E-02  -4.68126     -0.101089E-18  0.101089E-18   197.904       197.904    
  61  0.542953     -0.610732     -0.131884E-19  0.131884E-19   190.604       190.604    
loop,thermsimp(1:2)       72  0.559477E-19  0.369920E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    383              190.08          0.81          0.47         20.29
Just calling func    0   0         23.07


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    190.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       72
neval is:      382
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.215944E-19           381
loop is:       73
neval is:      382


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.431887E-20           391

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      382     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.276878      -1.28418     -0.554620E-20  0.554620E-20   174.233       174.233    
   2  0.960281     -0.405295E-01 -0.175042E-21  0.175042E-21   183.388       183.388    
   3  0.495041     -0.703114     -0.303666E-20  0.303666E-20   183.761       183.761    
   4  0.887918     -0.118876     -0.513411E-21  0.513411E-21   184.029       184.029    
   5  0.810320     -0.210326     -0.908372E-21  0.908372E-21   184.352       184.352    
   6  0.982210     -0.179497E-01 -0.775225E-22  0.775225E-22   186.004       186.004    
   7  0.244364      -1.40910     -0.608571E-20  0.608571E-20   186.680       186.680    
   8  0.889237     -0.117391     -0.506999E-21  0.506999E-21   186.885       186.885    
   9  0.433040     -0.836925     -0.361457E-20  0.361457E-20   187.579       187.579    
  10  0.233036      -1.45656     -0.629071E-20  0.629071E-20   187.612       187.612    
  11  0.861046     -0.149607     -0.646134E-21  0.646134E-21   187.645       187.645    
  12  0.237558      -1.43734     -0.620769E-20  0.620769E-20   187.676       187.676    
  13  0.335233E-01  -3.39552     -0.146648E-19  0.146648E-19   187.995       187.995    
  14  0.419298E-01  -3.17176     -0.136984E-19  0.136984E-19   188.056       188.056    
  15  0.523833     -0.646583     -0.279251E-20  0.279251E-20   188.280       188.280    
  16  0.804281     -0.217806     -0.940677E-21  0.940677E-21   188.569       188.569    
  17  0.626719     -0.467257     -0.201802E-20  0.201802E-20   188.990       188.990    
  18  0.122353      -2.10084     -0.907327E-20  0.907327E-20   190.441       190.441    
  19  0.291307      -1.23338     -0.532680E-20  0.532680E-20   190.604       190.604    
  20  0.101047      -2.29216     -0.989956E-20  0.989956E-20   190.799       190.799    
  21  0.849990     -0.162531     -0.701949E-21  0.701949E-21   191.359       191.359    
  22  0.767025     -0.265235     -0.114552E-20  0.114552E-20   191.777       191.777    
  23  0.138607E-01  -4.27870     -0.184791E-19  0.184791E-19   192.054       192.054    
  24  0.237861      -1.43607     -0.620220E-20  0.620220E-20   192.064       192.064    
  25  0.867462     -0.142184     -0.614074E-21  0.614074E-21   192.343       192.343    
  26  0.121099E-01  -4.41374     -0.190624E-19  0.190624E-19   192.782       192.782    
  27  0.914840E-01  -2.39159     -0.103290E-19  0.103290E-19   192.901       192.901    
  28  0.422383     -0.861843     -0.372219E-20  0.372219E-20   193.343       193.343    
  29  0.669992     -0.400490     -0.172966E-20  0.172966E-20   193.590       193.590    
  30  0.915535     -0.882472E-01 -0.381128E-21  0.381128E-21   193.773       193.773    
  31  0.611426     -0.491961     -0.212472E-20  0.212472E-20   193.810       193.810    
  32  0.274631      -1.29233     -0.558139E-20  0.558139E-20   194.001       194.001    
  33  0.468325     -0.758593     -0.327627E-20  0.327627E-20   194.053       194.053    
  34  0.272609      -1.29972     -0.561331E-20  0.561331E-20   194.406       194.406    
  35  0.327221      -1.11712     -0.482470E-20  0.482470E-20   194.449       194.449    
  36  0.133517      -2.01353     -0.869617E-20  0.869617E-20   194.854       194.854    
  37  0.740512     -0.300413     -0.129745E-20  0.129745E-20   194.870       194.870    
  38  0.214708      -1.53847     -0.664447E-20  0.664447E-20   195.002       195.002    
  39  0.336721      -1.08850     -0.470110E-20  0.470110E-20   195.010       195.010    
  40  0.648197     -0.433561     -0.187250E-20  0.187250E-20   195.025       195.025    
  41  0.629669     -0.462561     -0.199774E-20  0.199774E-20   195.128       195.128    
  42  0.366757      -1.00306     -0.433207E-20  0.433207E-20   195.591       195.591    
  43  0.355373      -1.03459     -0.446825E-20  0.446825E-20   195.809       195.809    
  44  0.887321     -0.119548     -0.516314E-21  0.516314E-21   195.941       195.941    
  45  0.708867     -0.344088     -0.148607E-20  0.148607E-20   196.001       196.001    
  46  0.964337     -0.363149E-01 -0.156839E-21  0.156839E-21   196.063       196.063    
  47  0.635525E-01  -2.75589     -0.119023E-19  0.119023E-19   196.092       196.092    
  48  0.300267      -1.20308     -0.519596E-20  0.519596E-20   196.127       196.127    
  49  0.485717     -0.722129     -0.311878E-20  0.311878E-20   196.342       196.342    
  50  0.604286     -0.503708     -0.217545E-20  0.217545E-20   196.611       196.611    
  51  0.555889     -0.587187     -0.253598E-20  0.253598E-20   196.738       196.738    
  52  0.654592     -0.423744     -0.183010E-20  0.183010E-20   196.808       196.808    
  53  0.296458      -1.21585     -0.525109E-20  0.525109E-20   197.046       197.046    
  54  0.226429      -1.48532     -0.641492E-20  0.641492E-20   197.184       197.184    
  55  0.924262     -0.787598E-01 -0.340154E-21  0.340154E-21   197.242       197.242    
  56  0.700184     -0.356412     -0.153930E-20  0.153930E-20   197.518       197.518    
  57  0.644312     -0.439572     -0.189846E-20  0.189846E-20   197.581       197.581    
  58  0.786353     -0.240349     -0.103804E-20  0.103804E-20   197.603       197.603    
  59  0.800188     -0.222909     -0.962716E-21  0.962716E-21   197.710       197.710    
  60  0.359284      -1.02364     -0.442098E-20  0.442098E-20   197.742       197.742    
  61  0.265309      -1.32686     -0.573054E-20  0.573054E-20   190.081       190.081    
loop,thermsimp(1:2)       73  0.554620E-20  0.175042E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    384              191.28          0.80          0.46         20.38
Just calling func    0   0         23.01


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    191.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       73
neval is:      383
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       74
neval is:      383


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      383     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.600212     -0.510472     -0.220466E-20  0.220466E-20   174.233       174.233    
   2  0.608153     -0.497328     -0.214790E-20  0.214790E-20   183.388       183.388    
   3  0.907696     -0.968455E-01 -0.418263E-21  0.418263E-21   183.761       183.761    
   4  0.965864     -0.347319E-01 -0.150003E-21  0.150003E-21   184.029       184.029    
   5  0.444497     -0.810813     -0.350180E-20  0.350180E-20   184.352       184.352    
   6  0.763810     -0.269436     -0.116366E-20  0.116366E-20   186.004       186.004    
   7  0.985925     -0.141753E-01 -0.612211E-22  0.612211E-22   186.680       186.680    
   8  0.887544     -0.119297     -0.515230E-21  0.515230E-21   186.885       186.885    
   9  0.276880      -1.28417     -0.554616E-20  0.554616E-20   187.579       187.579    
  10  0.203718      -1.59102     -0.687140E-20  0.687140E-20   187.612       187.612    
  11  0.400157     -0.915899     -0.395565E-20  0.395565E-20   187.645       187.645    
  12  0.158428      -1.84246     -0.795733E-20  0.795733E-20   187.676       187.676    
  13  0.200809      -1.60540     -0.693352E-20  0.693352E-20   187.995       187.995    
  14  0.568435     -0.564867     -0.243959E-20  0.243959E-20   188.056       188.056    
  15  0.606874     -0.499434     -0.215699E-20  0.215699E-20   188.280       188.280    
  16  0.292237      -1.23019     -0.531303E-20  0.531303E-20   188.569       188.569    
  17  0.761376     -0.272628     -0.117745E-20  0.117745E-20   188.990       188.990    
  18  0.820011     -0.198437     -0.857025E-21  0.857025E-21   190.081       190.081    
  19  0.345773      -1.06197     -0.458652E-20  0.458652E-20   190.441       190.441    
  20  0.118961      -2.12896     -0.919471E-20  0.919471E-20   190.604       190.604    
  21  0.873600     -0.135132     -0.583620E-21  0.583620E-21   190.799       190.799    
  22  0.550422     -0.597070     -0.257867E-20  0.257867E-20   191.359       191.359    
  23  0.585718E-01  -2.83750     -0.122548E-19  0.122548E-19   191.777       191.777    
  24  0.971091     -0.293347E-01 -0.126693E-21  0.126693E-21   192.054       192.054    
  25  0.277651      -1.28139     -0.553416E-20  0.553416E-20   192.064       192.064    
  26  0.533339     -0.628597     -0.271483E-20  0.271483E-20   192.343       192.343    
  27  0.860482E-01  -2.45285     -0.105935E-19  0.105935E-19   192.782       192.782    
  28  0.743322     -0.296626     -0.128109E-20  0.128109E-20   192.901       192.901    
  29  0.778395     -0.250522     -0.108197E-20  0.108197E-20   193.343       193.343    
  30  0.802444     -0.220093     -0.950555E-21  0.950555E-21   193.590       193.590    
  31  0.746008     -0.293019     -0.126551E-20  0.126551E-20   193.773       193.773    
  32  0.773881     -0.256337     -0.110708E-20  0.110708E-20   193.810       193.810    
  33  0.310380      -1.16996     -0.505290E-20  0.505290E-20   194.001       194.001    
  34  0.253003      -1.37435     -0.593565E-20  0.593565E-20   194.053       194.053    
  35  0.411409     -0.888167     -0.383588E-20  0.383588E-20   194.406       194.406    
  36  0.284390      -1.25741     -0.543059E-20  0.543059E-20   194.449       194.449    
  37  0.516016     -0.661617     -0.285744E-20  0.285744E-20   194.854       194.854    
  38  0.241133      -1.42241     -0.614319E-20  0.614319E-20   194.870       194.870    
  39  0.693812     -0.365554     -0.157878E-20  0.157878E-20   195.002       195.002    
  40  0.965762     -0.348379E-01 -0.150460E-21  0.150460E-21   195.010       195.010    
  41  0.913803     -0.901407E-01 -0.389306E-21  0.389306E-21   195.025       195.025    
  42  0.722368     -0.325220     -0.140458E-20  0.140458E-20   195.128       195.128    
  43  0.735733     -0.306888     -0.132541E-20  0.132541E-20   195.591       195.591    
  44  0.221351      -1.50801     -0.651288E-20  0.651288E-20   195.809       195.809    
  45  0.296059      -1.21720     -0.525692E-20  0.525692E-20   195.941       195.941    
  46  0.857904     -0.153264     -0.661926E-21  0.661926E-21   196.001       196.001    
  47  0.455606E-01  -3.08871     -0.133398E-19  0.133398E-19   196.063       196.063    
  48  0.548490     -0.600587     -0.259386E-20  0.259386E-20   196.092       196.092    
  49  0.593635     -0.521491     -0.225225E-20  0.225225E-20   196.127       196.127    
  50  0.732230     -0.311660     -0.134602E-20  0.134602E-20   196.342       196.342    
  51  0.141118      -1.95816     -0.845703E-20  0.845703E-20   196.611       196.611    
  52  0.908129     -0.963687E-01 -0.416204E-21  0.416204E-21   196.738       196.738    
  53  0.252790      -1.37520     -0.593930E-20  0.593930E-20   196.808       196.808    
  54  0.141794      -1.95338     -0.843640E-20  0.843640E-20   197.046       197.046    
  55  0.602699     -0.506338     -0.218681E-20  0.218681E-20   197.184       197.184    
  56  0.301659      -1.19846     -0.517599E-20  0.517599E-20   197.242       197.242    
  57  0.733740     -0.309600     -0.133712E-20  0.133712E-20   197.518       197.518    
  58  0.848193     -0.164647     -0.711087E-21  0.711087E-21   197.581       197.581    
  59  0.642267     -0.442751     -0.191218E-20  0.191218E-20   197.603       197.603    
  60  0.260838      -1.34385     -0.580393E-20  0.580393E-20   197.710       197.710    
  61  0.781144E-01  -2.54958     -0.110113E-19  0.110113E-19   191.278       191.278    
loop,thermsimp(1:2)       74  0.220466E-20  0.214790E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    385              187.84          0.80          0.47         20.23
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.84
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       74
neval is:      384
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       75
neval is:      384


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      384     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307272      -1.18002     -0.509636E-20  0.509636E-20   174.233       174.233    
   2  0.282261      -1.26492     -0.546304E-20  0.546304E-20   183.388       183.388    
   3  0.556855     -0.585449     -0.252848E-20  0.252848E-20   183.761       183.761    
   4  0.854538     -0.157195     -0.678904E-21  0.678904E-21   184.029       184.029    
   5  0.405041     -0.903767     -0.390325E-20  0.390325E-20   184.352       184.352    
   6  0.130571      -2.03583     -0.879251E-20  0.879251E-20   186.004       186.004    
   7  0.661341     -0.413486     -0.178579E-20  0.178579E-20   186.680       186.680    
   8  0.189074E-01  -3.96820     -0.171382E-19  0.171382E-19   186.885       186.885    
   9  0.863591     -0.146656     -0.633386E-21  0.633386E-21   187.579       187.579    
  10  0.765429     -0.267319     -0.115452E-20  0.115452E-20   187.612       187.612    
  11  0.698043     -0.359474     -0.155252E-20  0.155252E-20   187.645       187.645    
  12  0.828289     -0.188394     -0.813648E-21  0.813648E-21   187.676       187.676    
  13  0.282524      -1.26399     -0.545902E-20  0.545902E-20   187.995       187.995    
  14  0.409758     -0.892189     -0.385325E-20  0.385325E-20   188.056       188.056    
  15  0.810704     -0.209852     -0.906326E-21  0.906326E-21   188.280       188.280    
  16  0.889322     -0.117296     -0.506586E-21  0.506586E-21   188.569       188.569    
  17  0.441963     -0.816529     -0.352648E-20  0.352648E-20   188.990       188.990    
  18  0.359401      -1.02332     -0.441957E-20  0.441957E-20   190.081       190.081    
  19  0.248888      -1.39075     -0.600647E-20  0.600647E-20   190.441       190.441    
  20  0.837054     -0.177867     -0.768184E-21  0.768184E-21   190.604       190.604    
  21  0.128897      -2.04874     -0.884824E-20  0.884824E-20   190.799       190.799    
  22  0.549163     -0.599360     -0.258856E-20  0.258856E-20   191.278       191.278    
  23  0.279595      -1.27441     -0.550402E-20  0.550402E-20   191.359       191.359    
  24  0.320504      -1.13786     -0.491427E-20  0.491427E-20   191.777       191.777    
  25  0.771949     -0.258837     -0.111788E-20  0.111788E-20   192.054       192.054    
  26  0.299679      -1.20504     -0.520442E-20  0.520442E-20   192.064       192.064    
  27  0.397812     -0.921775     -0.398103E-20  0.398103E-20   192.343       192.343    
  28  0.371745     -0.989547     -0.427373E-20  0.427373E-20   192.782       192.782    
  29  0.105539      -2.24867     -0.971172E-20  0.971172E-20   192.901       192.901    
  30  0.574366     -0.554489     -0.239477E-20  0.239477E-20   193.343       193.343    
  31  0.330143      -1.10823     -0.478630E-20  0.478630E-20   193.590       193.590    
  32  0.221992      -1.50512     -0.650040E-20  0.650040E-20   193.773       193.773    
  33  0.849989     -0.162532     -0.701956E-21  0.701956E-21   193.810       193.810    
  34  0.830745     -0.185433     -0.800859E-21  0.800859E-21   194.001       194.001    
  35  0.699308     -0.357664     -0.154471E-20  0.154471E-20   194.053       194.053    
  36  0.968729E-02  -4.63694     -0.200263E-19  0.200263E-19   194.406       194.406    
  37  0.793041     -0.231881     -0.100146E-20  0.100146E-20   194.449       194.449    
  38  0.389865     -0.941954     -0.406818E-20  0.406818E-20   194.854       194.854    
  39  0.827323     -0.189561     -0.818688E-21  0.818688E-21   194.870       194.870    
  40  0.104466      -2.25890     -0.975588E-20  0.975588E-20   195.002       195.002    
  41  0.866137     -0.143712     -0.620673E-21  0.620673E-21   195.010       195.010    
  42  0.401301     -0.913044     -0.394332E-20  0.394332E-20   195.025       195.025    
  43  0.312424E-01  -3.46598     -0.149691E-19  0.149691E-19   195.128       195.128    
  44  0.247378      -1.39684     -0.603276E-20  0.603276E-20   195.591       195.591    
  45  0.397438E-01  -3.22530     -0.139297E-19  0.139297E-19   195.809       195.809    
  46  0.477391E-01  -3.04200     -0.131380E-19  0.131380E-19   195.941       195.941    
  47  0.198277      -1.61809     -0.698833E-20  0.698833E-20   196.001       196.001    
  48  0.689406     -0.371925     -0.160630E-20  0.160630E-20   196.063       196.063    
  49  0.415189E-01  -3.18161     -0.137409E-19  0.137409E-19   196.092       196.092    
  50  0.965990     -0.346020E-01 -0.149441E-21  0.149441E-21   196.127       196.127    
  51  0.973957     -0.263884E-01 -0.113968E-21  0.113968E-21   196.342       196.342    
  52  0.462140E-02  -5.37706     -0.232228E-19  0.232228E-19   196.611       196.611    
  53  0.784906     -0.242191     -0.104599E-20  0.104599E-20   196.738       196.738    
  54  0.734662     -0.308344     -0.133170E-20  0.133170E-20   196.808       196.808    
  55  0.407693     -0.897242     -0.387507E-20  0.387507E-20   197.046       197.046    
  56  0.542277     -0.611979     -0.264306E-20  0.264306E-20   197.184       197.184    
  57  0.376227     -0.977563     -0.422197E-20  0.422197E-20   197.242       197.242    
  58  0.943098     -0.585854E-01 -0.253023E-21  0.253023E-21   197.518       197.518    
  59  0.984323     -0.158011E-01 -0.682429E-22  0.682429E-22   197.581       197.581    
  60  0.499755     -0.693638     -0.299573E-20  0.299573E-20   197.603       197.603    
  61  0.176613      -1.73379     -0.748803E-20  0.748803E-20   187.837       187.837    
loop,thermsimp(1:2)       75  0.509636E-20  0.546304E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    386              193.46          0.80          0.47         20.22
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       75
neval is:      385
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       76
neval is:      385


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      385     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.918430     -0.850897E-01 -0.367491E-21  0.367491E-21   174.233       174.233    
   2  0.326692      -1.11874     -0.483168E-20  0.483168E-20   183.388       183.388    
   3  0.994136     -0.588088E-02 -0.253988E-22  0.253988E-22   183.761       183.761    
   4  0.472459     -0.749805     -0.323831E-20  0.323831E-20   184.029       184.029    
   5  0.117248      -2.14346     -0.925734E-20  0.925734E-20   184.352       184.352    
   6  0.610863     -0.492882     -0.212869E-20  0.212869E-20   186.004       186.004    
   7  0.178246      -1.72459     -0.744827E-20  0.744827E-20   186.680       186.680    
   8  0.194448      -1.63759     -0.707253E-20  0.707253E-20   186.885       186.885    
   9  0.225620E-01  -3.79149     -0.163750E-19  0.163750E-19   187.579       187.579    
  10  0.992989     -0.703606E-02 -0.303879E-22  0.303879E-22   187.612       187.612    
  11  0.790662     -0.234884     -0.101444E-20  0.101444E-20   187.645       187.645    
  12  0.881301     -0.126356     -0.545717E-21  0.545717E-21   187.676       187.676    
  13  0.879299     -0.128630     -0.555536E-21  0.555536E-21   187.837       187.837    
  14  0.263584      -1.33338     -0.575872E-20  0.575872E-20   187.995       187.995    
  15  0.509377     -0.674568     -0.291337E-20  0.291337E-20   188.056       188.056    
  16  0.612873E-01  -2.79218     -0.120591E-19  0.120591E-19   188.280       188.280    
  17  0.887959     -0.118829     -0.513208E-21  0.513208E-21   188.569       188.569    
  18  0.413503     -0.883091     -0.381396E-20  0.381396E-20   188.990       188.990    
  19  0.702485     -0.353132     -0.152513E-20  0.152513E-20   190.081       190.081    
  20  0.959571E-01  -2.34385     -0.101228E-19  0.101228E-19   190.441       190.441    
  21  0.694882     -0.364013     -0.157212E-20  0.157212E-20   190.604       190.604    
  22  0.139642      -1.96868     -0.850245E-20  0.850245E-20   190.799       190.799    
  23  0.410607     -0.890119     -0.384431E-20  0.384431E-20   191.278       191.278    
  24  0.291310      -1.23337     -0.532675E-20  0.532675E-20   191.359       191.359    
  25  0.601851E-01  -2.81033     -0.121375E-19  0.121375E-19   191.777       191.777    
  26  0.104750E-03  -9.16394     -0.395779E-19  0.395779E-19   192.054       192.054    
  27  0.772742     -0.257811     -0.111345E-20  0.111345E-20   192.064       192.064    
  28  0.975159     -0.251552E-01 -0.108642E-21  0.108642E-21   192.343       192.343    
  29  0.450918     -0.796469     -0.343985E-20  0.343985E-20   192.782       192.782    
  30  0.471801E-01  -3.05378     -0.131889E-19  0.131889E-19   192.901       192.901    
  31  0.589208     -0.528976     -0.228458E-20  0.228458E-20   193.343       193.343    
  32  0.524303     -0.645686     -0.278864E-20  0.278864E-20   193.590       193.590    
  33  0.792814     -0.232167     -0.100270E-20  0.100270E-20   193.773       193.773    
  34  0.294152      -1.22366     -0.528482E-20  0.528482E-20   193.810       193.810    
  35  0.731652     -0.312450     -0.134943E-20  0.134943E-20   194.001       194.001    
  36  0.569670     -0.562698     -0.243022E-20  0.243022E-20   194.053       194.053    
  37  0.701750     -0.354178     -0.152965E-20  0.152965E-20   194.406       194.406    
  38  0.950386     -0.508874E-01 -0.219776E-21  0.219776E-21   194.449       194.449    
  39  0.610054     -0.494207     -0.213442E-20  0.213442E-20   194.854       194.854    
  40  0.827274E-01  -2.49220     -0.107635E-19  0.107635E-19   194.870       194.870    
  41  0.566439     -0.568386     -0.245479E-20  0.245479E-20   195.002       195.002    
  42  0.621325     -0.475900     -0.205535E-20  0.205535E-20   195.010       195.010    
  43  0.105160      -2.25227     -0.972726E-20  0.972726E-20   195.025       195.025    
  44  0.549836E-01  -2.90072     -0.125278E-19  0.125278E-19   195.128       195.128    
  45  0.609552     -0.495030     -0.213797E-20  0.213797E-20   195.591       195.591    
  46  0.642775E-01  -2.74455     -0.118533E-19  0.118533E-19   195.809       195.809    
  47  0.970635E-01  -2.33239     -0.100733E-19  0.100733E-19   195.941       195.941    
  48  0.141887      -1.95273     -0.843357E-20  0.843357E-20   196.001       196.001    
  49  0.430581     -0.842620     -0.363917E-20  0.363917E-20   196.063       196.063    
  50  0.310421      -1.16983     -0.505233E-20  0.505233E-20   196.092       196.092    
  51  0.181588      -1.70601     -0.736806E-20  0.736806E-20   196.127       196.127    
  52  0.121405      -2.10862     -0.910687E-20  0.910687E-20   196.342       196.342    
  53  0.146218      -1.92265     -0.830370E-20  0.830370E-20   196.611       196.611    
  54  0.135488      -1.99887     -0.863287E-20  0.863287E-20   196.738       196.738    
  55  0.750530     -0.286975     -0.123941E-20  0.123941E-20   196.808       196.808    
  56  0.161063      -1.82596     -0.788609E-20  0.788609E-20   197.046       197.046    
  57  0.824832     -0.192576     -0.831711E-21  0.831711E-21   197.184       197.184    
  58  0.510119     -0.673112     -0.290708E-20  0.290708E-20   197.242       197.242    
  59  0.466210     -0.763119     -0.329581E-20  0.329581E-20   197.518       197.518    
  60  0.845669     -0.167627     -0.723958E-21  0.723958E-21   197.581       197.581    
  61  0.888390     -0.118344     -0.511114E-21  0.511114E-21   193.458       193.458    
loop,thermsimp(1:2)       76  0.367491E-21  0.483168E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    387              187.00          0.78          0.47         20.27
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       76
neval is:      386
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       77
neval is:      386


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      386     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883861     -0.123455     -0.533188E-21  0.533188E-21   174.233       174.233    
   2  0.469418E-01  -3.05885     -0.132108E-19  0.132108E-19   183.388       183.388    
   3  0.581993E-01  -2.84388     -0.122824E-19  0.122824E-19   183.761       183.761    
   4  0.342902      -1.07031     -0.462253E-20  0.462253E-20   184.029       184.029    
   5  0.989240     -0.108182E-01 -0.467222E-22  0.467222E-22   184.352       184.352    
   6  0.627217     -0.466462     -0.201459E-20  0.201459E-20   186.004       186.004    
   7  0.477495E-01  -3.04179     -0.131371E-19  0.131371E-19   186.680       186.680    
   8  0.121326E-01  -4.41186     -0.190543E-19  0.190543E-19   186.885       186.885    
   9  0.462445     -0.771229     -0.333084E-20  0.333084E-20   187.579       187.579    
  10  0.994148     -0.586870E-02 -0.253462E-22  0.253462E-22   187.612       187.612    
  11  0.760857     -0.273310     -0.118039E-20  0.118039E-20   187.645       187.645    
  12  0.447429     -0.804239     -0.347340E-20  0.347340E-20   187.676       187.676    
  13  0.201290E-01  -3.90559     -0.168678E-19  0.168678E-19   187.837       187.837    
  14  0.384777E-01  -3.25768     -0.140695E-19  0.140695E-19   187.995       187.995    
  15  0.307284      -1.17998     -0.509620E-20  0.509620E-20   188.056       188.056    
  16  0.539000     -0.618040     -0.266924E-20  0.266924E-20   188.280       188.280    
  17  0.926813     -0.760037E-01 -0.328250E-21  0.328250E-21   188.569       188.569    
  18  0.335943      -1.09081     -0.471109E-20  0.471109E-20   188.990       188.990    
  19  0.581276     -0.542529     -0.234311E-20  0.234311E-20   190.081       190.081    
  20  0.170237      -1.77056     -0.764683E-20  0.764683E-20   190.441       190.441    
  21  0.618262     -0.480842     -0.207670E-20  0.207670E-20   190.604       190.604    
  22  0.600629     -0.509777     -0.220166E-20  0.220166E-20   190.799       190.799    
  23  0.168627      -1.78007     -0.768789E-20  0.768789E-20   191.278       191.278    
  24  0.358688      -1.02530     -0.442814E-20  0.442814E-20   191.359       191.359    
  25  0.705322     -0.349101     -0.150772E-20  0.150772E-20   191.777       191.777    
  26  0.369734     -0.994971     -0.429715E-20  0.429715E-20   192.054       192.054    
  27  0.564674     -0.571507     -0.246827E-20  0.246827E-20   192.064       192.064    
  28  0.472777     -0.749132     -0.323540E-20  0.323540E-20   192.343       192.343    
  29  0.925472     -0.774517E-01 -0.334504E-21  0.334504E-21   192.782       192.782    
  30  0.587242     -0.532318     -0.229901E-20  0.229901E-20   192.901       192.901    
  31  0.717283     -0.332285     -0.143509E-20  0.143509E-20   193.343       193.343    
  32  0.993141     -0.688257E-02 -0.297249E-22  0.297249E-22   193.458       193.458    
  33  0.903891     -0.101046     -0.436406E-21  0.436406E-21   193.590       193.590    
  34  0.731845     -0.312187     -0.134829E-20  0.134829E-20   193.773       193.773    
  35  0.326093      -1.12057     -0.483960E-20  0.483960E-20   193.810       193.810    
  36  0.288565      -1.24283     -0.536764E-20  0.536764E-20   194.001       194.001    
  37  0.989268     -0.107902E-01 -0.466017E-22  0.466017E-22   194.053       194.053    
  38  0.608489     -0.496777     -0.214552E-20  0.214552E-20   194.406       194.406    
  39  0.484162     -0.725335     -0.313263E-20  0.313263E-20   194.449       194.449    
  40  0.959258     -0.415949E-01 -0.179643E-21  0.179643E-21   194.854       194.854    
  41  0.703678     -0.351434     -0.151780E-20  0.151780E-20   194.870       194.870    
  42  0.516853     -0.659997     -0.285044E-20  0.285044E-20   195.002       195.002    
  43  0.754124E-01  -2.58478     -0.111633E-19  0.111633E-19   195.010       195.010    
  44  0.176484      -1.73452     -0.749118E-20  0.749118E-20   195.025       195.025    
  45  0.906889     -0.977353E-01 -0.422106E-21  0.422106E-21   195.128       195.128    
  46  0.961343     -0.394236E-01 -0.170265E-21  0.170265E-21   195.591       195.591    
  47  0.930711     -0.718066E-01 -0.310123E-21  0.310123E-21   195.809       195.809    
  48  0.989416     -0.106409E-01 -0.459566E-22  0.459566E-22   195.941       195.941    
  49  0.297871      -1.21110     -0.523056E-20  0.523056E-20   196.001       196.001    
  50  0.916693     -0.869824E-01 -0.375666E-21  0.375666E-21   196.063       196.063    
  51  0.153014      -1.87723     -0.810750E-20  0.810750E-20   196.092       196.092    
  52  0.151195E-01  -4.19177     -0.181037E-19  0.181037E-19   196.127       196.127    
  53  0.988719     -0.113453E-01 -0.489988E-22  0.489988E-22   196.342       196.342    
  54  0.741660     -0.298864     -0.129076E-20  0.129076E-20   196.611       196.611    
  55  0.726421     -0.319626     -0.138042E-20  0.138042E-20   196.738       196.738    
  56  0.572971     -0.556920     -0.240527E-20  0.240527E-20   196.808       196.808    
  57  0.798650     -0.224833     -0.971024E-21  0.971024E-21   197.046       197.046    
  58  0.528115     -0.638441     -0.275734E-20  0.275734E-20   197.184       197.184    
  59  0.889686     -0.116886     -0.504817E-21  0.504817E-21   197.242       197.242    
  60  0.918237     -0.853001E-01 -0.368400E-21  0.368400E-21   197.518       197.518    
  61  0.786664     -0.239954     -0.103633E-20  0.103633E-20   186.997       186.997    
loop,thermsimp(1:2)       77  0.533188E-21  0.132108E-19

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    388              201.30          0.80          0.47         20.36
Just calling func    0   0         22.98


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    389              194.00          0.77          0.46         20.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    194.00
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       77
neval is:      388
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       78
neval is:      388


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      388     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.427826     -0.849039     -0.366689E-20  0.366689E-20   174.233       174.233    
   2  0.880643     -0.127103     -0.548940E-21  0.548940E-21   183.388       183.388    
   3  0.506359E-01  -2.98309     -0.128836E-19  0.128836E-19   183.761       183.761    
   4  0.687811     -0.374242     -0.161630E-20  0.161630E-20   184.029       184.029    
   5  0.459209     -0.778251     -0.336116E-20  0.336116E-20   184.352       184.352    
   6  0.663916     -0.409599     -0.176901E-20  0.176901E-20   186.004       186.004    
   7  0.111271      -2.19579     -0.948332E-20  0.948332E-20   186.680       186.680    
   8  0.315824      -1.15257     -0.497780E-20  0.497780E-20   186.885       186.885    
   9  0.928159     -0.745526E-01 -0.321983E-21  0.321983E-21   186.997       186.997    
  10  0.452579     -0.792794     -0.342397E-20  0.342397E-20   187.579       187.579    
  11  0.549272     -0.599162     -0.258770E-20  0.258770E-20   187.612       187.612    
  12  0.991118     -0.892188E-02 -0.385325E-22  0.385325E-22   187.645       187.645    
  13  0.878098E-01  -2.43258     -0.105060E-19  0.105060E-19   187.676       187.676    
  14  0.402912     -0.909036     -0.392601E-20  0.392601E-20   187.837       187.837    
  15  0.462606     -0.770880     -0.332933E-20  0.332933E-20   187.995       187.995    
  16  0.323416      -1.12882     -0.487521E-20  0.487521E-20   188.056       188.056    
  17  0.365411      -1.00673     -0.434795E-20  0.434795E-20   188.280       188.280    
  18  0.792815     -0.232166     -0.100269E-20  0.100269E-20   188.569       188.569    
  19  0.450727     -0.796893     -0.344168E-20  0.344168E-20   188.990       188.990    
  20  0.344366      -1.06605     -0.460413E-20  0.460413E-20   190.081       190.081    
  21  0.569717     -0.562615     -0.242986E-20  0.242986E-20   190.441       190.441    
  22  0.710958     -0.341142     -0.147335E-20  0.147335E-20   190.604       190.604    
  23  0.780676     -0.247595     -0.106933E-20  0.106933E-20   190.799       190.799    
  24  0.177587      -1.72830     -0.746429E-20  0.746429E-20   191.278       191.278    
  25  0.509560     -0.674208     -0.291182E-20  0.291182E-20   191.359       191.359    
  26  0.242492      -1.41679     -0.611892E-20  0.611892E-20   191.777       191.777    
  27  0.947754E-01  -2.35625     -0.101763E-19  0.101763E-19   192.054       192.054    
  28  0.281418E-01  -3.57050     -0.154205E-19  0.154205E-19   192.064       192.064    
  29  0.739659     -0.301567     -0.130243E-20  0.130243E-20   192.343       192.343    
  30  0.936697     -0.653955E-01 -0.282435E-21  0.282435E-21   192.782       192.782    
  31  0.823774     -0.193859     -0.837251E-21  0.837251E-21   192.901       192.901    
  32  0.366864      -1.00276     -0.433081E-20  0.433081E-20   193.343       193.343    
  33  0.979838     -0.203678E-01 -0.879659E-22  0.879659E-22   193.458       193.458    
  34  0.401194     -0.913311     -0.394447E-20  0.394447E-20   193.590       193.590    
  35  0.809161     -0.211757     -0.914553E-21  0.914553E-21   193.773       193.773    
  36  0.438442     -0.824527     -0.356103E-20  0.356103E-20   193.810       193.810    
  37  0.539299     -0.617485     -0.266684E-20  0.266684E-20   194.001       194.001    
  38  0.307070      -1.18068     -0.509920E-20  0.509920E-20   194.053       194.053    
  39  0.541881     -0.612710     -0.264621E-20  0.264621E-20   194.406       194.406    
  40  0.902593E-01  -2.40507     -0.103872E-19  0.103872E-19   194.449       194.449    
  41  0.552404     -0.593476     -0.256315E-20  0.256315E-20   194.854       194.854    
  42  0.819486     -0.199078     -0.859791E-21  0.859791E-21   194.870       194.870    
  43  0.510538     -0.672290     -0.290353E-20  0.290353E-20   195.002       195.002    
  44  0.408651     -0.894895     -0.386494E-20  0.386494E-20   195.010       195.010    
  45  0.907822     -0.967070E-01 -0.417665E-21  0.417665E-21   195.025       195.025    
  46  0.846295     -0.166888     -0.720767E-21  0.720767E-21   195.128       195.128    
  47  0.824752     -0.192672     -0.832126E-21  0.832126E-21   195.591       195.591    
  48  0.495006     -0.703186     -0.303697E-20  0.303697E-20   195.809       195.809    
  49  0.747401     -0.291154     -0.125746E-20  0.125746E-20   195.941       195.941    
  50  0.579040     -0.546383     -0.235976E-20  0.235976E-20   196.001       196.001    
  51  0.793231     -0.231641     -0.100043E-20  0.100043E-20   196.063       196.063    
  52  0.440184     -0.820563     -0.354391E-20  0.354391E-20   196.092       196.092    
  53  0.609276     -0.495484     -0.213993E-20  0.213993E-20   196.127       196.127    
  54  0.592626     -0.523191     -0.225960E-20  0.225960E-20   196.342       196.342    
  55  0.304283      -1.18980     -0.513859E-20  0.513859E-20   196.611       196.611    
  56  0.500052     -0.693044     -0.299317E-20  0.299317E-20   196.738       196.738    
  57  0.752642     -0.284166     -0.122728E-20  0.122728E-20   196.808       196.808    
  58  0.142818      -1.94618     -0.840531E-20  0.840531E-20   197.046       197.046    
  59  0.938871     -0.630775E-01 -0.272423E-21  0.272423E-21   197.184       197.184    
  60  0.773832     -0.256401     -0.110736E-20  0.110736E-20   197.242       197.242    
  61  0.490482E-01  -3.01495     -0.130212E-19  0.130212E-19   194.001       194.001    
loop,thermsimp(1:2)       78  0.366689E-20  0.548940E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    390              182.73          0.80          0.46         20.34
Just calling func    0   0         22.97


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    182.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       78
neval is:      389
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       79
neval is:      389


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      389     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.512608     -0.668244     -0.288606E-20  0.288606E-20   174.233       174.233    
   2  0.321863      -1.13363     -0.489600E-20  0.489600E-20   183.388       183.388    
   3  0.659986     -0.415536     -0.179465E-20  0.179465E-20   183.761       183.761    
   4  0.123688E-01  -4.39258     -0.189710E-19  0.189710E-19   184.029       184.029    
   5  0.861308     -0.149303     -0.644822E-21  0.644822E-21   184.352       184.352    
   6  0.845225E-01  -2.47074     -0.106708E-19  0.106708E-19   186.004       186.004    
   7  0.930458     -0.720784E-01 -0.311297E-21  0.311297E-21   186.680       186.680    
   8  0.600395     -0.510168     -0.220335E-20  0.220335E-20   186.885       186.885    
   9  0.520619     -0.652737     -0.281909E-20  0.281909E-20   186.997       186.997    
  10  0.139164      -1.97210     -0.851725E-20  0.851725E-20   187.579       187.579    
  11  0.769340     -0.262222     -0.113250E-20  0.113250E-20   187.612       187.612    
  12  0.798664     -0.224815     -0.970945E-21  0.970945E-21   187.645       187.645    
  13  0.228147      -1.47777     -0.638228E-20  0.638228E-20   187.676       187.676    
  14  0.287182      -1.24764     -0.538839E-20  0.538839E-20   187.837       187.837    
  15  0.538478     -0.619009     -0.267342E-20  0.267342E-20   187.995       187.995    
  16  0.771488     -0.259434     -0.112046E-20  0.112046E-20   188.056       188.056    
  17  0.860954     -0.149715     -0.646598E-21  0.646598E-21   188.280       188.280    
  18  0.991454     -0.858291E-02 -0.370685E-22  0.370685E-22   188.569       188.569    
  19  0.535539     -0.624481     -0.269705E-20  0.269705E-20   188.990       188.990    
  20  0.774566     -0.255453     -0.110327E-20  0.110327E-20   190.081       190.081    
  21  0.844164     -0.169409     -0.731656E-21  0.731656E-21   190.441       190.441    
  22  0.196626      -1.62645     -0.702444E-20  0.702444E-20   190.604       190.604    
  23  0.751828     -0.285247     -0.123195E-20  0.123195E-20   190.799       190.799    
  24  0.995777     -0.423200E-02 -0.182775E-22  0.182775E-22   191.278       191.278    
  25  0.789532     -0.236315     -0.102061E-20  0.102061E-20   191.359       191.359    
  26  0.693460     -0.366062     -0.158098E-20  0.158098E-20   191.777       191.777    
  27  0.391489     -0.937798     -0.405023E-20  0.405023E-20   192.054       192.054    
  28  0.494947     -0.703305     -0.303748E-20  0.303748E-20   192.064       192.064    
  29  0.200897      -1.60496     -0.693164E-20  0.693164E-20   192.343       192.343    
  30  0.929060     -0.735820E-01 -0.317791E-21  0.317791E-21   192.782       192.782    
  31  0.564626     -0.571592     -0.246863E-20  0.246863E-20   192.901       192.901    
  32  0.632246     -0.458476     -0.198010E-20  0.198010E-20   193.343       193.343    
  33  0.991846     -0.818784E-02 -0.353622E-22  0.353622E-22   193.458       193.458    
  34  0.455121     -0.787193     -0.339978E-20  0.339978E-20   193.590       193.590    
  35  0.399507     -0.917525     -0.396267E-20  0.396267E-20   193.773       193.773    
  36  0.624988     -0.470022     -0.202997E-20  0.202997E-20   193.810       193.810    
  37  0.354883      -1.03597     -0.447421E-20  0.447421E-20   194.001       194.001    
  38  0.976526     -0.237542E-01 -0.102591E-21  0.102591E-21   194.001       194.001    
  39  0.189119      -1.66538     -0.719256E-20  0.719256E-20   194.053       194.053    
  40  0.229722      -1.47088     -0.635256E-20  0.635256E-20   194.406       194.406    
  41  0.645060     -0.438412     -0.189344E-20  0.189344E-20   194.449       194.449    
  42  0.698652     -0.358603     -0.154876E-20  0.154876E-20   194.854       194.854    
  43  0.986707     -0.133820E-01 -0.577953E-22  0.577953E-22   194.870       194.870    
  44  0.159409      -1.83628     -0.793065E-20  0.793065E-20   195.002       195.002    
  45  0.968133     -0.323856E-01 -0.139869E-21  0.139869E-21   195.010       195.010    
  46  0.809061     -0.211881     -0.915087E-21  0.915087E-21   195.025       195.025    
  47  0.554994     -0.588798     -0.254294E-20  0.254294E-20   195.128       195.128    
  48  0.106403      -2.24052     -0.967653E-20  0.967653E-20   195.591       195.591    
  49  0.606489     -0.500069     -0.215973E-20  0.215973E-20   195.809       195.809    
  50  0.811897     -0.208382     -0.899975E-21  0.899975E-21   195.941       195.941    
  51  0.310846      -1.16846     -0.504642E-20  0.504642E-20   196.001       196.001    
  52  0.633701     -0.456178     -0.197017E-20  0.197017E-20   196.063       196.063    
  53  0.857193E-01  -2.45668     -0.106101E-19  0.106101E-19   196.092       196.092    
  54  0.483722     -0.726244     -0.313656E-20  0.313656E-20   196.127       196.127    
  55  0.186100      -1.68147     -0.726206E-20  0.726206E-20   196.342       196.342    
  56  0.179091      -1.71986     -0.742785E-20  0.742785E-20   196.611       196.611    
  57  0.955818     -0.451872E-01 -0.195158E-21  0.195158E-21   196.738       196.738    
  58  0.195485      -1.63227     -0.704957E-20  0.704957E-20   196.808       196.808    
  59  0.272096      -1.30160     -0.562144E-20  0.562144E-20   197.046       197.046    
  60  0.962235     -0.384968E-01 -0.166263E-21  0.166263E-21   197.184       197.184    
  61  0.846058     -0.167167     -0.721972E-21  0.721972E-21   182.732       182.732    
loop,thermsimp(1:2)       79  0.288606E-20  0.489600E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    391              180.93          0.78          0.47         20.26
Just calling func    0   0         23.15


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    180.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       79
neval is:      390
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       80
neval is:      390


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      390     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.510066     -0.673215     -0.290753E-20  0.290753E-20   174.233       174.233    
   2  0.625076     -0.469881     -0.202936E-20  0.202936E-20   182.732       182.732    
   3  0.370796     -0.992104     -0.428477E-20  0.428477E-20   183.388       183.388    
   4  0.611668     -0.491565     -0.212301E-20  0.212301E-20   183.761       183.761    
   5  0.736824     -0.305406     -0.131901E-20  0.131901E-20   184.029       184.029    
   6  0.539909     -0.616356     -0.266196E-20  0.266196E-20   184.352       184.352    
   7  0.468869     -0.757432     -0.327125E-20  0.327125E-20   186.004       186.004    
   8  0.530012     -0.634856     -0.274186E-20  0.274186E-20   186.680       186.680    
   9  0.304273      -1.18983     -0.513873E-20  0.513873E-20   186.885       186.885    
  10  0.233379      -1.45509     -0.628434E-20  0.628434E-20   186.997       186.997    
  11  0.284831E-01  -3.55844     -0.153685E-19  0.153685E-19   187.579       187.579    
  12  0.955004     -0.460398E-01 -0.198840E-21  0.198840E-21   187.612       187.612    
  13  0.602961     -0.505903     -0.218493E-20  0.218493E-20   187.645       187.645    
  14  0.155689      -1.85989     -0.803263E-20  0.803263E-20   187.676       187.676    
  15  0.272746      -1.29921     -0.561114E-20  0.561114E-20   187.837       187.837    
  16  0.336064      -1.09045     -0.470953E-20  0.470953E-20   187.995       187.995    
  17  0.774207     -0.255917     -0.110527E-20  0.110527E-20   188.056       188.056    
  18  0.740320     -0.300673     -0.129857E-20  0.129857E-20   188.280       188.280    
  19  0.126403      -2.06828     -0.893262E-20  0.893262E-20   188.569       188.569    
  20  0.137846      -1.98162     -0.855835E-20  0.855835E-20   188.990       188.990    
  21  0.879324     -0.128602     -0.555414E-21  0.555414E-21   190.081       190.081    
  22  0.663669     -0.409972     -0.177062E-20  0.177062E-20   190.441       190.441    
  23  0.545789E-01  -2.90811     -0.125597E-19  0.125597E-19   190.604       190.604    
  24  0.321116      -1.13595     -0.490603E-20  0.490603E-20   190.799       190.799    
  25  0.964599     -0.360427E-01 -0.155664E-21  0.155664E-21   191.278       191.278    
  26  0.967065     -0.334898E-01 -0.144638E-21  0.144638E-21   191.359       191.359    
  27  0.932688     -0.696849E-01 -0.300960E-21  0.300960E-21   191.777       191.777    
  28  0.798097     -0.225526     -0.974016E-21  0.974016E-21   192.054       192.054    
  29  0.223480      -1.49843     -0.647154E-20  0.647154E-20   192.064       192.064    
  30  0.719520     -0.329171     -0.142165E-20  0.142165E-20   192.343       192.343    
  31  0.165938      -1.79614     -0.775731E-20  0.775731E-20   192.782       192.782    
  32  0.405858     -0.901752     -0.389455E-20  0.389455E-20   192.901       192.901    
  33  0.921291     -0.819790E-01 -0.354057E-21  0.354057E-21   193.343       193.343    
  34  0.449673     -0.799235     -0.345179E-20  0.345179E-20   193.458       193.458    
  35  0.731080     -0.313232     -0.135281E-20  0.135281E-20   193.590       193.590    
  36  0.566719     -0.567892     -0.245265E-20  0.245265E-20   193.773       193.773    
  37  0.882397     -0.125113     -0.540348E-21  0.540348E-21   193.810       193.810    
  38  0.912015     -0.920988E-01 -0.397763E-21  0.397763E-21   194.001       194.001    
  39  0.757955     -0.277131     -0.119689E-20  0.119689E-20   194.001       194.001    
  40  0.232301E-02  -6.06489     -0.261935E-19  0.261935E-19   194.053       194.053    
  41  0.520799     -0.652392     -0.281760E-20  0.281760E-20   194.406       194.406    
  42  0.808411     -0.212684     -0.918555E-21  0.918555E-21   194.449       194.449    
  43  0.603077     -0.505710     -0.218410E-20  0.218410E-20   194.854       194.854    
  44  0.588711     -0.529820     -0.228822E-20  0.228822E-20   194.870       194.870    
  45  0.833739E-02  -4.78701     -0.206745E-19  0.206745E-19   195.002       195.002    
  46  0.560441     -0.579031     -0.250076E-20  0.250076E-20   195.010       195.010    
  47  0.655866     -0.421798     -0.182169E-20  0.182169E-20   195.025       195.025    
  48  0.238155      -1.43483     -0.619686E-20  0.619686E-20   195.128       195.128    
  49  0.641900     -0.443323     -0.191466E-20  0.191466E-20   195.591       195.591    
  50  0.176199      -1.73614     -0.749818E-20  0.749818E-20   195.809       195.809    
  51  0.849660     -0.162919     -0.703628E-21  0.703628E-21   195.941       195.941    
  52  0.655849     -0.421825     -0.182181E-20  0.182181E-20   196.001       196.001    
  53  0.209533      -1.56287     -0.674985E-20  0.674985E-20   196.063       196.063    
  54  0.768693     -0.263063     -0.113614E-20  0.113614E-20   196.092       196.092    
  55  0.475486     -0.743418     -0.321073E-20  0.321073E-20   196.127       196.127    
  56  0.438308     -0.824834     -0.356235E-20  0.356235E-20   196.342       196.342    
  57  0.844823E-01  -2.47121     -0.106728E-19  0.106728E-19   196.611       196.611    
  58  0.734755     -0.308219     -0.133116E-20  0.133116E-20   196.738       196.738    
  59  0.773850     -0.256377     -0.110726E-20  0.110726E-20   196.808       196.808    
  60  0.322133      -1.13279     -0.489237E-20  0.489237E-20   197.046       197.046    
  61  0.782543     -0.245206     -0.105901E-20  0.105901E-20   180.931       180.931    
loop,thermsimp(1:2)       80  0.290753E-20  0.202936E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    392              195.18          0.79          0.47         20.37
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    195.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       80
neval is:      391
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       81
neval is:      391


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      391
neval,tstepnext:      391     391

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941865     -0.598938E-01 -0.258673E-21  0.258673E-21   174.233       174.233    
   2  0.218886      -1.51920     -0.656124E-20  0.656124E-20   180.931       180.931    
   3  0.573431     -0.556118     -0.240180E-20  0.240180E-20   182.732       182.732    
   4  0.354705      -1.03647     -0.447638E-20  0.447638E-20   183.388       183.388    
   5  0.832107     -0.183794     -0.793781E-21  0.793781E-21   183.761       183.761    
   6  0.967978     -0.325459E-01 -0.140561E-21  0.140561E-21   184.029       184.029    
   7  0.171144E-01  -4.06783     -0.175685E-19  0.175685E-19   184.352       184.352    
   8  0.756216     -0.279428     -0.120681E-20  0.120681E-20   186.004       186.004    
   9  0.828136     -0.188578     -0.814445E-21  0.814445E-21   186.680       186.680    
  10  0.994435     -0.558100E-02 -0.241036E-22  0.241036E-22   186.885       186.885    
  11  0.179368      -1.71832     -0.742119E-20  0.742119E-20   186.997       186.997    
  12  0.628446     -0.464504     -0.200613E-20  0.200613E-20   187.579       187.579    
  13  0.401101     -0.913542     -0.394547E-20  0.394547E-20   187.612       187.612    
  14  0.461648     -0.772952     -0.333828E-20  0.333828E-20   187.645       187.645    
  15  0.556515     -0.586061     -0.253112E-20  0.253112E-20   187.676       187.676    
  16  0.522564     -0.649007     -0.280298E-20  0.280298E-20   187.837       187.837    
  17  0.588626     -0.529965     -0.228885E-20  0.228885E-20   187.995       187.995    
  18  0.334509      -1.09509     -0.472956E-20  0.472956E-20   188.056       188.056    
  19  0.868150     -0.141391     -0.610650E-21  0.610650E-21   188.280       188.280    
  20  0.880953E-01  -2.42934     -0.104920E-19  0.104920E-19   188.569       188.569    
  21  0.371321     -0.990687     -0.427865E-20  0.427865E-20   188.990       188.990    
  22  0.204104      -1.58912     -0.686322E-20  0.686322E-20   190.081       190.081    
  23  0.522602     -0.648935     -0.280267E-20  0.280267E-20   190.441       190.441    
  24  0.919381     -0.840549E-01 -0.363022E-21  0.363022E-21   190.604       190.604    
  25  0.979874E-01  -2.32292     -0.100324E-19  0.100324E-19   190.799       190.799    
  26  0.705655     -0.348629     -0.150568E-20  0.150568E-20   191.278       191.278    
  27  0.112867      -2.18154     -0.942180E-20  0.942180E-20   191.359       191.359    
  28  0.806280     -0.215325     -0.929959E-21  0.929959E-21   191.777       191.777    
  29  0.855182     -0.156441     -0.675649E-21  0.675649E-21   192.054       192.054    
  30  0.956225     -0.447623E-01 -0.193323E-21  0.193323E-21   192.064       192.064    
  31  0.191338E-01  -3.95630     -0.170867E-19  0.170867E-19   192.343       192.343    
  32  0.315504      -1.15358     -0.498218E-20  0.498218E-20   192.782       192.782    
  33  0.969705     -0.307629E-01 -0.132861E-21  0.132861E-21   192.901       192.901    
  34  0.373317     -0.985326     -0.425550E-20  0.425550E-20   193.343       193.343    
  35  0.111425E-01  -4.49699     -0.194219E-19  0.194219E-19   193.458       193.458    
  36  0.125213      -2.07774     -0.897348E-20  0.897348E-20   193.590       193.590    
  37  0.176667      -1.73349     -0.748672E-20  0.748672E-20   193.773       193.773    
  38  0.750081     -0.287574     -0.124200E-20  0.124200E-20   193.810       193.810    
  39  0.288247E-01  -3.54652     -0.153170E-19  0.153170E-19   194.001       194.001    
  40  0.754983     -0.281060     -0.121386E-20  0.121386E-20   194.001       194.001    
  41  0.282758      -1.26316     -0.545545E-20  0.545545E-20   194.053       194.053    
  42  0.475613     -0.743151     -0.320957E-20  0.320957E-20   194.406       194.406    
  43  0.145863      -1.92509     -0.831421E-20  0.831421E-20   194.449       194.449    
  44  0.274146      -1.29410     -0.558903E-20  0.558903E-20   194.854       194.854    
  45  0.387524     -0.947978     -0.409420E-20  0.409420E-20   194.870       194.870    
  46  0.492386E-01  -3.01108     -0.130045E-19  0.130045E-19   195.002       195.002    
  47  0.590112     -0.527443     -0.227796E-20  0.227796E-20   195.010       195.010    
  48  0.177995      -1.72600     -0.745438E-20  0.745438E-20   195.025       195.025    
  49  0.427241     -0.850406     -0.367280E-20  0.367280E-20   195.128       195.128    
  50  0.494423     -0.704365     -0.304206E-20  0.304206E-20   195.591       195.591    
  51  0.245621      -1.40396     -0.606354E-20  0.606354E-20   195.809       195.809    
  52  0.666163     -0.406221     -0.175442E-20  0.175442E-20   195.941       195.941    
  53  0.614882     -0.486324     -0.210037E-20  0.210037E-20   196.001       196.001    
  54  0.525851     -0.642737     -0.277590E-20  0.277590E-20   196.063       196.063    
  55  0.331473      -1.10421     -0.476894E-20  0.476894E-20   196.092       196.092    
  56  0.718893     -0.330043     -0.142541E-20  0.142541E-20   196.127       196.127    
  57  0.281285      -1.26839     -0.547800E-20  0.547800E-20   196.342       196.342    
  58  0.491098     -0.711111     -0.307120E-20  0.307120E-20   196.611       196.611    
  59  0.804761E-01  -2.51979     -0.108827E-19  0.108827E-19   196.738       196.738    
  60  0.926026     -0.768528E-01 -0.331918E-21  0.331918E-21   196.808       196.808    
  61  0.947799     -0.536126E-01 -0.231546E-21  0.231546E-21   195.180       195.180    
loop,thermsimp(1:2)       81  0.258673E-21  0.656124E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    393              193.24          0.80          0.47         20.32
Just calling func    0   0         22.96


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       81
neval is:      392
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.431887E-20           391
loop is:       82
neval is:      392


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.863774E-21           401

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      401
neval,tstepnext:      392     401

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584900     -0.536314     -0.463254E-21  0.463254E-21   174.233       174.233    
   2  0.810551     -0.210041     -0.181428E-21  0.181428E-21   180.931       180.931    
   3  0.415569     -0.878105     -0.758485E-21  0.758485E-21   182.732       182.732    
   4  0.634599E-01  -2.75735     -0.238173E-20  0.238173E-20   183.388       183.388    
   5  0.565510     -0.570028     -0.492375E-21  0.492375E-21   183.761       183.761    
   6  0.597498     -0.515004     -0.444847E-21  0.444847E-21   184.029       184.029    
   7  0.510461     -0.672441     -0.580837E-21  0.580837E-21   184.352       184.352    
   8  0.447806     -0.803395     -0.693952E-21  0.693952E-21   186.004       186.004    
   9  0.880401E-01  -2.42996     -0.209894E-20  0.209894E-20   186.680       186.680    
  10  0.287965      -1.24491     -0.107533E-20  0.107533E-20   186.885       186.885    
  11  0.784538     -0.242661     -0.209604E-21  0.209604E-21   186.997       186.997    
  12  0.298065E-01  -3.51303     -0.303446E-20  0.303446E-20   187.579       187.579    
  13  0.501603     -0.689946     -0.595957E-21  0.595957E-21   187.612       187.612    
  14  0.583836     -0.538135     -0.464827E-21  0.464827E-21   187.645       187.645    
  15  0.553133     -0.592157     -0.511490E-21  0.511490E-21   187.676       187.676    
  16  0.626602     -0.467444     -0.403766E-21  0.403766E-21   187.837       187.837    
  17  0.605551     -0.501617     -0.433284E-21  0.433284E-21   187.995       187.995    
  18  0.218693      -1.52009     -0.131301E-20  0.131301E-20   188.056       188.056    
  19  0.702896     -0.352546     -0.304520E-21  0.304520E-21   188.280       188.280    
  20  0.839902     -0.174470     -0.150703E-21  0.150703E-21   188.569       188.569    
  21  0.619457     -0.478912     -0.413672E-21  0.413672E-21   188.990       188.990    
  22  0.586767     -0.533128     -0.460502E-21  0.460502E-21   190.081       190.081    
  23  0.677698     -0.389054     -0.336055E-21  0.336055E-21   190.441       190.441    
  24  0.779413     -0.249215     -0.215265E-21  0.215265E-21   190.604       190.604    
  25  0.149579      -1.89993     -0.164111E-20  0.164111E-20   190.799       190.799    
  26  0.284627      -1.25657     -0.108540E-20  0.108540E-20   191.278       191.278    
  27  0.759064     -0.275669     -0.238116E-21  0.238116E-21   191.359       191.359    
  28  0.381423     -0.963845     -0.832545E-21  0.832545E-21   191.777       191.777    
  29  0.298819      -1.20792     -0.104337E-20  0.104337E-20   192.054       192.054    
  30  0.204288      -1.58822     -0.137187E-20  0.137187E-20   192.064       192.064    
  31  0.873708     -0.135009     -0.116617E-21  0.116617E-21   192.343       192.343    
  32  0.965915     -0.346790E-01 -0.299548E-22  0.299548E-22   192.782       192.782    
  33  0.674180E-01  -2.69684     -0.232946E-20  0.232946E-20   192.901       192.901    
  34  0.290848      -1.23496     -0.106672E-20  0.106672E-20   193.343       193.343    
  35  0.345679E-01  -3.36483     -0.290645E-20  0.290645E-20   193.458       193.458    
  36  0.150259E-01  -4.19798     -0.362610E-20  0.362610E-20   193.590       193.590    
  37  0.666992     -0.404978     -0.349809E-21  0.349809E-21   193.773       193.773    
  38  0.215298E-01  -3.83832     -0.331544E-20  0.331544E-20   193.810       193.810    
  39  0.900946     -0.104310     -0.901003E-22  0.901003E-22   194.001       194.001    
  40  0.217134      -1.52724     -0.131919E-20  0.131919E-20   194.001       194.001    
  41  0.843443     -0.170263     -0.147069E-21  0.147069E-21   194.053       194.053    
  42  0.225934      -1.48751     -0.128488E-20  0.128488E-20   194.406       194.406    
  43  0.970669     -0.297696E-01 -0.257142E-22  0.257142E-22   194.449       194.449    
  44  0.654683     -0.423604     -0.365898E-21  0.365898E-21   194.854       194.854    
  45  0.683252E-01  -2.68348     -0.231792E-20  0.231792E-20   194.870       194.870    
  46  0.249419      -1.38862     -0.119946E-20  0.119946E-20   195.002       195.002    
  47  0.957339     -0.435974E-01 -0.376583E-22  0.376583E-22   195.010       195.010    
  48  0.597511     -0.514982     -0.444828E-21  0.444828E-21   195.025       195.025    
  49  0.598276     -0.513704     -0.443724E-21  0.443724E-21   195.128       195.128    
  50  0.697396     -0.360402     -0.311306E-21  0.311306E-21   195.180       195.180    
  51  0.102440      -2.27848     -0.196809E-20  0.196809E-20   195.591       195.591    
  52  0.559707     -0.580341     -0.501284E-21  0.501284E-21   195.809       195.809    
  53  0.961923     -0.388214E-01 -0.335329E-22  0.335329E-22   195.941       195.941    
  54  0.236704      -1.44095     -0.124465E-20  0.124465E-20   196.001       196.001    
  55  0.189651      -1.66257     -0.143609E-20  0.143609E-20   196.063       196.063    
  56  0.461985     -0.772222     -0.667026E-21  0.667026E-21   196.092       196.092    
  57  0.954852E-01  -2.34878     -0.202882E-20  0.202882E-20   196.127       196.127    
  58  0.802943     -0.219472     -0.189574E-21  0.189574E-21   196.342       196.342    
  59  0.700086     -0.356552     -0.307980E-21  0.307980E-21   196.611       196.611    
  60  0.326059      -1.12068     -0.968012E-21  0.968012E-21   196.738       196.738    
  61  0.514679     -0.664211     -0.573728E-21  0.573728E-21   193.239       193.239    
loop,thermsimp(1:2)       82  0.463254E-21  0.181428E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    394              194.63          0.78          0.46         20.35
Just calling func    0   0         22.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    194.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       82
neval is:      393
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       83
neval is:      393


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      401
neval,tstepnext:      393     401

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.852403     -0.159695     -0.137941E-21  0.137941E-21   174.233       174.233    
   2  0.995793     -0.421569E-02 -0.364140E-23  0.364140E-23   180.931       180.931    
   3  0.264533E-01  -3.63238     -0.313755E-20  0.313755E-20   182.732       182.732    
   4  0.830815     -0.185349     -0.160099E-21  0.160099E-21   183.388       183.388    
   5  0.884163     -0.123114     -0.106343E-21  0.106343E-21   183.761       183.761    
   6  0.163410      -1.81149     -0.156472E-20  0.156472E-20   184.029       184.029    
   7  0.971837     -0.285675E-01 -0.246759E-22  0.246759E-22   184.352       184.352    
   8  0.895468     -0.110409     -0.953682E-22  0.953682E-22   186.004       186.004    
   9  0.922648     -0.805077E-01 -0.695405E-22  0.695405E-22   186.680       186.680    
  10  0.332238      -1.10190     -0.951796E-21  0.951796E-21   186.885       186.885    
  11  0.259951      -1.34726     -0.116373E-20  0.116373E-20   186.997       186.997    
  12  0.611613     -0.491655     -0.424679E-21  0.424679E-21   187.579       187.579    
  13  0.740125     -0.300936     -0.259941E-21  0.259941E-21   187.612       187.612    
  14  0.272831      -1.29890     -0.112196E-20  0.112196E-20   187.645       187.645    
  15  0.409805     -0.892075     -0.770551E-21  0.770551E-21   187.676       187.676    
  16  0.766418     -0.266028     -0.229788E-21  0.229788E-21   187.837       187.837    
  17  0.552309     -0.593648     -0.512778E-21  0.512778E-21   187.995       187.995    
  18  0.987506E-01  -2.31516     -0.199977E-20  0.199977E-20   188.056       188.056    
  19  0.543527E-02  -5.21485     -0.450445E-20  0.450445E-20   188.280       188.280    
  20  0.939122     -0.628098E-01 -0.542535E-22  0.542535E-22   188.569       188.569    
  21  0.164402      -1.80544     -0.155949E-20  0.155949E-20   188.990       188.990    
  22  0.254088      -1.37007     -0.118343E-20  0.118343E-20   190.081       190.081    
  23  0.297811      -1.21130     -0.104629E-20  0.104629E-20   190.441       190.441    
  24  0.447695     -0.803644     -0.694167E-21  0.694167E-21   190.604       190.604    
  25  0.388664     -0.945040     -0.816301E-21  0.816301E-21   190.799       190.799    
  26  0.985364     -0.147445E-01 -0.127359E-22  0.127359E-22   191.278       191.278    
  27  0.372308     -0.988034     -0.853438E-21  0.853438E-21   191.359       191.359    
  28  0.824717     -0.192715     -0.166463E-21  0.166463E-21   191.777       191.777    
  29  0.578084     -0.548035     -0.473379E-21  0.473379E-21   192.054       192.054    
  30  0.289760      -1.23870     -0.106996E-20  0.106996E-20   192.064       192.064    
  31  0.577648     -0.548791     -0.474031E-21  0.474031E-21   192.343       192.343    
  32  0.645980E-01  -2.73957     -0.236637E-20  0.236637E-20   192.782       192.782    
  33  0.987802     -0.122730E-01 -0.106011E-22  0.106011E-22   192.901       192.901    
  34  0.163914      -1.80841     -0.156206E-20  0.156206E-20   193.239       193.239    
  35  0.801913     -0.220755     -0.190682E-21  0.190682E-21   193.343       193.343    
  36  0.448648E-01  -3.10410     -0.268124E-20  0.268124E-20   193.458       193.458    
  37  0.776139     -0.253423     -0.218901E-21  0.218901E-21   193.590       193.590    
  38  0.194116      -1.63930     -0.141598E-20  0.141598E-20   193.773       193.773    
  39  0.172057      -1.75993     -0.152018E-20  0.152018E-20   193.810       193.810    
  40  0.954554     -0.465111E-01 -0.401751E-22  0.401751E-22   194.001       194.001    
  41  0.174449      -1.74613     -0.150826E-20  0.150826E-20   194.001       194.001    
  42  0.126823      -2.06497     -0.178366E-20  0.178366E-20   194.053       194.053    
  43  0.431911     -0.839535     -0.725168E-21  0.725168E-21   194.406       194.406    
  44  0.880140     -0.127674     -0.110282E-21  0.110282E-21   194.449       194.449    
  45  0.666266     -0.406067     -0.350750E-21  0.350750E-21   194.854       194.854    
  46  0.221274      -1.50835     -0.130288E-20  0.130288E-20   194.870       194.870    
  47  0.986737     -0.133521E-01 -0.115332E-22  0.115332E-22   195.002       195.002    
  48  0.350912      -1.04722     -0.904560E-21  0.904560E-21   195.010       195.010    
  49  0.482588     -0.728592     -0.629339E-21  0.629339E-21   195.025       195.025    
  50  0.498941     -0.695266     -0.600553E-21  0.600553E-21   195.128       195.128    
  51  0.391471     -0.937845     -0.810086E-21  0.810086E-21   195.180       195.180    
  52  0.984409E-01  -2.31830     -0.200249E-20  0.200249E-20   195.591       195.591    
  53  0.629704     -0.462506     -0.399501E-21  0.399501E-21   195.809       195.809    
  54  0.816254E-01  -2.50562     -0.216429E-20  0.216429E-20   195.941       195.941    
  55  0.939809     -0.620783E-01 -0.536217E-22  0.536217E-22   196.001       196.001    
  56  0.676056E-03  -7.29923     -0.630489E-20  0.630489E-20   196.063       196.063    
  57  0.393386     -0.932965     -0.805871E-21  0.805871E-21   196.092       196.092    
  58  0.486333     -0.720862     -0.622662E-21  0.622662E-21   196.127       196.127    
  59  0.702501     -0.353109     -0.305006E-21  0.305006E-21   196.342       196.342    
  60  0.326083      -1.12060     -0.967948E-21  0.967948E-21   196.611       196.611    
  61  0.606344     -0.500308     -0.432153E-21  0.432153E-21   194.627       194.627    
loop,thermsimp(1:2)       83  0.137941E-21  0.364140E-23

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    395              185.23          0.79          0.47         20.37
Just calling func    0   0         22.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    185.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       83
neval is:      394
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       84
neval is:      394


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      401
neval,tstepnext:      394     401

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.444537     -0.810723     -0.700281E-21  0.700281E-21   174.233       174.233    
   2  0.569249E-01  -2.86602     -0.247560E-20  0.247560E-20   180.931       180.931    
   3  0.651455     -0.428547     -0.370168E-21  0.370168E-21   182.732       182.732    
   4  0.730700     -0.313752     -0.271011E-21  0.271011E-21   183.388       183.388    
   5  0.288639      -1.24258     -0.107331E-20  0.107331E-20   183.761       183.761    
   6  0.283496      -1.26056     -0.108884E-20  0.108884E-20   184.029       184.029    
   7  0.764333     -0.268751     -0.232140E-21  0.232140E-21   184.352       184.352    
   8  0.119898      -2.12112     -0.183217E-20  0.183217E-20   186.004       186.004    
   9  0.121772      -2.10561     -0.181877E-20  0.181877E-20   186.680       186.680    
  10  0.504451     -0.684284     -0.591067E-21  0.591067E-21   186.885       186.885    
  11  0.652195     -0.427411     -0.369187E-21  0.369187E-21   186.997       186.997    
  12  0.573855     -0.555379     -0.479722E-21  0.479722E-21   187.579       187.579    
  13  0.162485E-01  -4.11975     -0.355854E-20  0.355854E-20   187.612       187.612    
  14  0.325661      -1.12190     -0.969067E-21  0.969067E-21   187.645       187.645    
  15  0.437363     -0.826992     -0.714335E-21  0.714335E-21   187.676       187.676    
  16  0.659307E-01  -2.71915     -0.234873E-20  0.234873E-20   187.837       187.837    
  17  0.500100     -0.692947     -0.598550E-21  0.598550E-21   187.995       187.995    
  18  0.330792E-01  -3.40885     -0.294448E-20  0.294448E-20   188.056       188.056    
  19  0.471837     -0.751121     -0.648799E-21  0.648799E-21   188.280       188.280    
  20  0.279372      -1.27521     -0.110149E-20  0.110149E-20   188.569       188.569    
  21  0.418405     -0.871304     -0.752610E-21  0.752610E-21   188.990       188.990    
  22  0.786297     -0.240420     -0.207669E-21  0.207669E-21   190.081       190.081    
  23  0.185456      -1.68494     -0.145541E-20  0.145541E-20   190.441       190.441    
  24  0.770976     -0.260099     -0.224667E-21  0.224667E-21   190.604       190.604    
  25  0.105820      -2.24602     -0.194005E-20  0.194005E-20   190.799       190.799    
  26  0.308363      -1.17648     -0.101621E-20  0.101621E-20   191.278       191.278    
  27  0.952432E-01  -2.35132     -0.203101E-20  0.203101E-20   191.359       191.359    
  28  0.938570     -0.633974E-01 -0.547610E-22  0.547610E-22   191.777       191.777    
  29  0.193314      -1.64344     -0.141956E-20  0.141956E-20   192.054       192.054    
  30  0.794064     -0.230591     -0.199179E-21  0.199179E-21   192.064       192.064    
  31  0.283922      -1.25906     -0.108754E-20  0.108754E-20   192.343       192.343    
  32  0.481656     -0.730525     -0.631008E-21  0.631008E-21   192.782       192.782    
  33  0.358356      -1.02623     -0.886431E-21  0.886431E-21   192.901       192.901    
  34  0.239544      -1.42902     -0.123435E-20  0.123435E-20   193.239       193.239    
  35  0.320665      -1.13736     -0.982420E-21  0.982420E-21   193.343       193.343    
  36  0.221679      -1.50652     -0.130130E-20  0.130130E-20   193.458       193.458    
  37  0.809669     -0.211130     -0.182369E-21  0.182369E-21   193.590       193.590    
  38  0.696529     -0.361647     -0.312381E-21  0.312381E-21   193.773       193.773    
  39  0.366950      -1.00253     -0.865960E-21  0.865960E-21   193.810       193.810    
  40  0.918574     -0.849333E-01 -0.733632E-22  0.733632E-22   194.001       194.001    
  41  0.754341     -0.281911     -0.243507E-21  0.243507E-21   194.001       194.001    
  42  0.104528      -2.25830     -0.195066E-20  0.195066E-20   194.053       194.053    
  43  0.880327     -0.127462     -0.110098E-21  0.110098E-21   194.406       194.406    
  44  0.159845      -1.83355     -0.158377E-20  0.158377E-20   194.449       194.449    
  45  0.206722      -1.57638     -0.136164E-20  0.136164E-20   194.627       194.627    
  46  0.444164     -0.811561     -0.701005E-21  0.701005E-21   194.854       194.854    
  47  0.261231      -1.34235     -0.115949E-20  0.115949E-20   194.870       194.870    
  48  0.774763     -0.255198     -0.220434E-21  0.220434E-21   195.002       195.002    
  49  0.601415     -0.508470     -0.439203E-21  0.439203E-21   195.010       195.010    
  50  0.942045E-01  -2.36229     -0.204048E-20  0.204048E-20   195.025       195.025    
  51  0.273656      -1.29588     -0.111935E-20  0.111935E-20   195.128       195.128    
  52  0.637209     -0.450657     -0.389266E-21  0.389266E-21   195.180       195.180    
  53  0.218251E-01  -3.82470     -0.330367E-20  0.330367E-20   195.591       195.591    
  54  0.931956     -0.704696E-01 -0.608698E-22  0.608698E-22   195.809       195.809    
  55  0.209660      -1.56227     -0.134945E-20  0.134945E-20   195.941       195.941    
  56  0.526414     -0.641668     -0.554256E-21  0.554256E-21   196.001       196.001    
  57  0.327452      -1.11641     -0.964329E-21  0.964329E-21   196.063       196.063    
  58  0.959351     -0.414984E-01 -0.358453E-22  0.358453E-22   196.092       196.092    
  59  0.711128     -0.340902     -0.294463E-21  0.294463E-21   196.127       196.127    
  60  0.600248     -0.510413     -0.440881E-21  0.440881E-21   196.342       196.342    
  61  0.222323      -1.50363     -0.129879E-20  0.129879E-20   185.232       185.232    
loop,thermsimp(1:2)       84  0.700281E-21  0.247560E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    396              179.47          0.82          0.46         20.24
Just calling func    0   0         22.91


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    179.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       84
neval is:      395
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       85
neval is:      395


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      401
neval,tstepnext:      395     401

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.774791     -0.255162     -0.220402E-21  0.220402E-21   174.233       174.233    
   2  0.723714     -0.323359     -0.279309E-21  0.279309E-21   180.931       180.931    
   3  0.291753      -1.23185     -0.106404E-20  0.106404E-20   182.732       182.732    
   4  0.380348     -0.966669     -0.834984E-21  0.834984E-21   183.388       183.388    
   5  0.636775     -0.451339     -0.389855E-21  0.389855E-21   183.761       183.761    
   6  0.179376      -1.71827     -0.148420E-20  0.148420E-20   184.029       184.029    
   7  0.577193     -0.549578     -0.474711E-21  0.474711E-21   184.352       184.352    
   8  0.859424E-01  -2.45408     -0.211977E-20  0.211977E-20   185.232       185.232    
   9  0.632232     -0.458499     -0.396039E-21  0.396039E-21   186.004       186.004    
  10  0.355152      -1.03521     -0.894186E-21  0.894186E-21   186.680       186.680    
  11  0.382894     -0.959998     -0.829222E-21  0.829222E-21   186.885       186.885    
  12  0.833963     -0.181566     -0.156832E-21  0.156832E-21   186.997       186.997    
  13  0.461304     -0.773697     -0.668300E-21  0.668300E-21   187.579       187.579    
  14  0.100597      -2.29663     -0.198377E-20  0.198377E-20   187.612       187.612    
  15  0.410869     -0.889480     -0.768310E-21  0.768310E-21   187.645       187.645    
  16  0.406011     -0.901374     -0.778584E-21  0.778584E-21   187.676       187.676    
  17  0.816238E-01  -2.50563     -0.216430E-20  0.216430E-20   187.837       187.837    
  18  0.369623     -0.995271     -0.859689E-21  0.859689E-21   187.995       187.995    
  19  0.236218      -1.44300     -0.124643E-20  0.124643E-20   188.056       188.056    
  20  0.448923     -0.800903     -0.691800E-21  0.691800E-21   188.280       188.280    
  21  0.380942     -0.965108     -0.833636E-21  0.833636E-21   188.569       188.569    
  22  0.846221E-01  -2.46956     -0.213314E-20  0.213314E-20   188.990       188.990    
  23  0.641818     -0.443451     -0.383041E-21  0.383041E-21   190.081       190.081    
  24  0.980766     -0.194212E-01 -0.167755E-22  0.167755E-22   190.441       190.441    
  25  0.201058      -1.60416     -0.138563E-20  0.138563E-20   190.604       190.604    
  26  0.675455     -0.392369     -0.338918E-21  0.338918E-21   190.799       190.799    
  27  0.250901E-01  -3.68528     -0.318325E-20  0.318325E-20   191.278       191.278    
  28  0.646571     -0.436073     -0.376669E-21  0.376669E-21   191.359       191.359    
  29  0.635900     -0.452714     -0.391043E-21  0.391043E-21   191.777       191.777    
  30  0.288824      -1.24194     -0.107275E-20  0.107275E-20   192.054       192.054    
  31  0.529703     -0.635439     -0.548876E-21  0.548876E-21   192.064       192.064    
  32  0.660982     -0.414028     -0.357627E-21  0.357627E-21   192.343       192.343    
  33  0.729195E-01  -2.61840     -0.226171E-20  0.226171E-20   192.782       192.782    
  34  0.188030      -1.67115     -0.144350E-20  0.144350E-20   192.901       192.901    
  35  0.389137     -0.943824     -0.815251E-21  0.815251E-21   193.239       193.239    
  36  0.677283     -0.389665     -0.336583E-21  0.336583E-21   193.343       193.343    
  37  0.329645      -1.10974     -0.958563E-21  0.958563E-21   193.458       193.458    
  38  0.307701      -1.17863     -0.101807E-20  0.101807E-20   193.590       193.590    
  39  0.741763     -0.298725     -0.258031E-21  0.258031E-21   193.773       193.773    
  40  0.921289     -0.819820E-01 -0.708139E-22  0.708139E-22   193.810       193.810    
  41  0.644752     -0.438890     -0.379102E-21  0.379102E-21   194.001       194.001    
  42  0.280534      -1.27106     -0.109791E-20  0.109791E-20   194.001       194.001    
  43  0.484471     -0.724699     -0.625976E-21  0.625976E-21   194.053       194.053    
  44  0.540702     -0.614887     -0.531123E-21  0.531123E-21   194.406       194.406    
  45  0.851186     -0.161124     -0.139175E-21  0.139175E-21   194.449       194.449    
  46  0.160846      -1.82731     -0.157838E-20  0.157838E-20   194.627       194.627    
  47  0.454897     -0.787684     -0.680381E-21  0.680381E-21   194.854       194.854    
  48  0.787995     -0.238263     -0.205805E-21  0.205805E-21   194.870       194.870    
  49  0.299301      -1.20630     -0.104197E-20  0.104197E-20   195.002       195.002    
  50  0.745478     -0.293729     -0.253716E-21  0.253716E-21   195.010       195.010    
  51  0.433466     -0.835943     -0.722066E-21  0.722066E-21   195.025       195.025    
  52  0.952536     -0.486269E-01 -0.420026E-22  0.420026E-22   195.128       195.128    
  53  0.973805     -0.265444E-01 -0.229283E-22  0.229283E-22   195.180       195.180    
  54  0.885384     -0.121734     -0.105151E-21  0.105151E-21   195.591       195.591    
  55  0.836947     -0.177994     -0.153747E-21  0.153747E-21   195.809       195.809    
  56  0.883769E-02  -4.72873     -0.408456E-20  0.408456E-20   195.941       195.941    
  57  0.233565      -1.45429     -0.125618E-20  0.125618E-20   196.001       196.001    
  58  0.213025      -1.54635     -0.133569E-20  0.133569E-20   196.063       196.063    
  59  0.179925      -1.71522     -0.148156E-20  0.148156E-20   196.092       196.092    
  60  0.587396     -0.532056     -0.459576E-21  0.459576E-21   196.127       196.127    
  61  0.443264     -0.813590     -0.702758E-21  0.702758E-21   179.473       179.473    
loop,thermsimp(1:2)       85  0.220402E-21  0.279309E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    397              211.21          0.79          0.47         20.37
Just calling func    0   0         22.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    398              194.87          0.77          0.46         20.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    194.87
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       85
neval is:      397
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       86
neval is:      397


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      401
neval,tstepnext:      397     401

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.268243      -1.31586     -0.113661E-20  0.113661E-20   174.233       174.233    
   2  0.452006     -0.794059     -0.685888E-21  0.685888E-21   179.473       179.473    
   3  0.635985     -0.452580     -0.390927E-21  0.390927E-21   180.931       180.931    
   4  0.580278     -0.544248     -0.470108E-21  0.470108E-21   182.732       182.732    
   5  0.369236     -0.996319     -0.860595E-21  0.860595E-21   183.388       183.388    
   6  0.429250     -0.845717     -0.730508E-21  0.730508E-21   183.761       183.761    
   7  0.223637E-01  -3.80031     -0.328261E-20  0.328261E-20   184.029       184.029    
   8  0.600341     -0.510257     -0.440747E-21  0.440747E-21   184.352       184.352    
   9  0.177575      -1.72836     -0.149291E-20  0.149291E-20   185.232       185.232    
  10  0.520971     -0.652060     -0.563233E-21  0.563233E-21   186.004       186.004    
  11  0.614532E-03  -7.39465     -0.638731E-20  0.638731E-20   186.680       186.680    
  12  0.828513     -0.188122     -0.162495E-21  0.162495E-21   186.885       186.885    
  13  0.461760     -0.772709     -0.667446E-21  0.667446E-21   186.997       186.997    
  14  0.389548     -0.942769     -0.814339E-21  0.814339E-21   187.579       187.579    
  15  0.636530     -0.451723     -0.390187E-21  0.390187E-21   187.612       187.612    
  16  0.868716     -0.140739     -0.121567E-21  0.121567E-21   187.645       187.645    
  17  0.288740      -1.24223     -0.107301E-20  0.107301E-20   187.676       187.676    
  18  0.918408     -0.851138E-01 -0.735191E-22  0.735191E-22   187.837       187.837    
  19  0.360741      -1.01959     -0.880699E-21  0.880699E-21   187.995       187.995    
  20  0.307644      -1.17881     -0.101823E-20  0.101823E-20   188.056       188.056    
  21  0.867599     -0.142026     -0.122678E-21  0.122678E-21   188.280       188.280    
  22  0.835116     -0.180185     -0.155639E-21  0.155639E-21   188.569       188.569    
  23  0.557905     -0.583567     -0.504071E-21  0.504071E-21   188.990       188.990    
  24  0.275616      -1.28875     -0.111319E-20  0.111319E-20   190.081       190.081    
  25  0.987110     -0.129741E-01 -0.112067E-22  0.112067E-22   190.441       190.441    
  26  0.544416     -0.608042     -0.525211E-21  0.525211E-21   190.604       190.604    
  27  0.936226     -0.658980E-01 -0.569210E-22  0.569210E-22   190.799       190.799    
  28  0.207476      -1.57274     -0.135849E-20  0.135849E-20   191.278       191.278    
  29  0.654516     -0.423859     -0.366119E-21  0.366119E-21   191.359       191.359    
  30  0.877856E-01  -2.43286     -0.210144E-20  0.210144E-20   191.777       191.777    
  31  0.873447     -0.135307     -0.116875E-21  0.116875E-21   192.054       192.054    
  32  0.665673     -0.406956     -0.351518E-21  0.351518E-21   192.064       192.064    
  33  0.961627     -0.391287E-01 -0.337983E-22  0.337983E-22   192.343       192.343    
  34  0.861902     -0.148613     -0.128368E-21  0.128368E-21   192.782       192.782    
  35  0.303145      -1.19354     -0.103095E-20  0.103095E-20   192.901       192.901    
  36  0.372914E-01  -3.28899     -0.284095E-20  0.284095E-20   193.239       193.239    
  37  0.523942     -0.646375     -0.558322E-21  0.558322E-21   193.343       193.343    
  38  0.628800     -0.463943     -0.400742E-21  0.400742E-21   193.458       193.458    
  39  0.980125     -0.200757E-01 -0.173408E-22  0.173408E-22   193.590       193.590    
  40  0.425947     -0.853439     -0.737179E-21  0.737179E-21   193.773       193.773    
  41  0.103656      -2.26668     -0.195790E-20  0.195790E-20   193.810       193.810    
  42  0.658303     -0.418091     -0.361136E-21  0.361136E-21   194.001       194.001    
  43  0.491486     -0.710322     -0.613558E-21  0.613558E-21   194.001       194.001    
  44  0.772852     -0.257667     -0.222566E-21  0.222566E-21   194.053       194.053    
  45  0.636940     -0.451079     -0.389631E-21  0.389631E-21   194.406       194.406    
  46  0.647864     -0.434075     -0.374943E-21  0.374943E-21   194.449       194.449    
  47  0.860208     -0.150581     -0.130068E-21  0.130068E-21   194.627       194.627    
  48  0.944350E-01  -2.35984     -0.203837E-20  0.203837E-20   194.854       194.854    
  49  0.715636E-01  -2.63717     -0.227792E-20  0.227792E-20   194.870       194.870    
  50  0.143369      -1.94234     -0.167774E-20  0.167774E-20   195.002       195.002    
  51  0.143630      -1.94052     -0.167617E-20  0.167617E-20   195.010       195.010    
  52  0.133128      -2.01644     -0.174175E-20  0.174175E-20   195.025       195.025    
  53  0.665445     -0.407300     -0.351815E-21  0.351815E-21   195.128       195.128    
  54  0.967276     -0.332718E-01 -0.287393E-22  0.287393E-22   195.180       195.180    
  55  0.163088      -1.81347     -0.156643E-20  0.156643E-20   195.591       195.591    
  56  0.125777      -2.07324     -0.179081E-20  0.179081E-20   195.809       195.809    
  57  0.683222     -0.380935     -0.329042E-21  0.329042E-21   195.941       195.941    
  58  0.852486     -0.159598     -0.137857E-21  0.137857E-21   196.001       196.001    
  59  0.258129      -1.35430     -0.116981E-20  0.116981E-20   196.063       196.063    
  60  0.866255     -0.143576     -0.124017E-21  0.124017E-21   196.092       196.092    
  61  0.169104      -1.77724     -0.153514E-20  0.153514E-20   194.873       194.873    
loop,thermsimp(1:2)       86  0.113661E-20  0.685888E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    399              182.29          0.79          0.47         20.30
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    182.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       86
neval is:      398
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       87
neval is:      398


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      401
neval,tstepnext:      398     401

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.144523      -1.93432     -0.167082E-20  0.167082E-20   174.233       174.233    
   2  0.103642      -2.26681     -0.195801E-20  0.195801E-20   179.473       179.473    
   3  0.225558      -1.48918     -0.128631E-20  0.128631E-20   180.931       180.931    
   4  0.680110     -0.385500     -0.332985E-21  0.332985E-21   182.732       182.732    
   5  0.420873E-01  -3.16801     -0.273644E-20  0.273644E-20   183.388       183.388    
   6  0.263071      -1.33533     -0.115342E-20  0.115342E-20   183.761       183.761    
   7  0.646567     -0.436078     -0.376673E-21  0.376673E-21   184.029       184.029    
   8  0.418583     -0.870881     -0.752244E-21  0.752244E-21   184.352       184.352    
   9  0.397243     -0.923206     -0.797442E-21  0.797442E-21   185.232       185.232    
  10  0.282122E-01  -3.56800     -0.308195E-20  0.308195E-20   186.004       186.004    
  11  0.965775     -0.348249E-01 -0.300808E-22  0.300808E-22   186.680       186.680    
  12  0.728263E-01  -2.61968     -0.226281E-20  0.226281E-20   186.885       186.885    
  13  0.975687     -0.246133E-01 -0.212603E-22  0.212603E-22   186.997       186.997    
  14  0.758413     -0.276527     -0.238857E-21  0.238857E-21   187.579       187.579    
  15  0.143075      -1.94439     -0.167951E-20  0.167951E-20   187.612       187.612    
  16  0.736589     -0.305725     -0.264077E-21  0.264077E-21   187.645       187.645    
  17  0.399054     -0.918658     -0.793513E-21  0.793513E-21   187.676       187.676    
  18  0.803426     -0.218870     -0.189054E-21  0.189054E-21   187.837       187.837    
  19  0.209040      -1.56523     -0.135200E-20  0.135200E-20   187.995       187.995    
  20  0.966076     -0.345130E-01 -0.298114E-22  0.298114E-22   188.056       188.056    
  21  0.982997     -0.171494E-01 -0.148132E-22  0.148132E-22   188.280       188.280    
  22  0.152841      -1.87836     -0.162248E-20  0.162248E-20   188.569       188.569    
  23  0.869989     -0.139275     -0.120302E-21  0.120302E-21   188.990       188.990    
  24  0.241993      -1.41885     -0.122556E-20  0.122556E-20   190.081       190.081    
  25  0.206135E-01  -3.88181     -0.335301E-20  0.335301E-20   190.441       190.441    
  26  0.716773     -0.332996     -0.287633E-21  0.287633E-21   190.604       190.604    
  27  0.377465     -0.974278     -0.841556E-21  0.841556E-21   190.799       190.799    
  28  0.567762     -0.566053     -0.488942E-21  0.488942E-21   191.278       191.278    
  29  0.195202E-01  -3.93630     -0.340008E-20  0.340008E-20   191.359       191.359    
  30  0.347713      -1.05638     -0.912472E-21  0.912472E-21   191.777       191.777    
  31  0.219028      -1.51855     -0.131169E-20  0.131169E-20   192.054       192.054    
  32  0.653262E-01  -2.72836     -0.235669E-20  0.235669E-20   192.064       192.064    
  33  0.474351     -0.745807     -0.644209E-21  0.644209E-21   192.343       192.343    
  34  0.765539     -0.267175     -0.230779E-21  0.230779E-21   192.782       192.782    
  35  0.500635E-01  -2.99446     -0.258654E-20  0.258654E-20   192.901       192.901    
  36  0.772475     -0.258156     -0.222988E-21  0.222988E-21   193.239       193.239    
  37  0.319747      -1.14023     -0.984898E-21  0.984898E-21   193.343       193.343    
  38  0.448797E-01  -3.10377     -0.268096E-20  0.268096E-20   193.458       193.458    
  39  0.115063      -2.16228     -0.186772E-20  0.186772E-20   193.590       193.590    
  40  0.967914E-01  -2.33520     -0.201708E-20  0.201708E-20   193.773       193.773    
  41  0.144697      -1.93311     -0.166977E-20  0.166977E-20   193.810       193.810    
  42  0.280303      -1.27188     -0.109862E-20  0.109862E-20   194.001       194.001    
  43  0.790188     -0.235484     -0.203405E-21  0.203405E-21   194.001       194.001    
  44  0.848835     -0.163891     -0.141564E-21  0.141564E-21   194.053       194.053    
  45  0.695588     -0.362998     -0.313548E-21  0.313548E-21   194.406       194.406    
  46  0.434593E-02  -5.43852     -0.469765E-20  0.469765E-20   194.449       194.449    
  47  0.686283     -0.376466     -0.325182E-21  0.325182E-21   194.627       194.627    
  48  0.179900      -1.71535     -0.148168E-20  0.148168E-20   194.854       194.854    
  49  0.940174     -0.616899E-01 -0.532862E-22  0.532862E-22   194.870       194.870    
  50  0.429655     -0.844773     -0.729693E-21  0.729693E-21   194.873       194.873    
  51  0.806347     -0.215242     -0.185920E-21  0.185920E-21   195.002       195.002    
  52  0.228300      -1.47709     -0.127588E-20  0.127588E-20   195.010       195.010    
  53  0.859513     -0.151389     -0.130766E-21  0.130766E-21   195.025       195.025    
  54  0.349419      -1.05148     -0.908243E-21  0.908243E-21   195.128       195.128    
  55  0.931938E-01  -2.37307     -0.204980E-20  0.204980E-20   195.180       195.180    
  56  0.990868     -0.917425E-02 -0.792448E-23  0.792448E-23   195.591       195.591    
  57  0.391101     -0.938791     -0.810903E-21  0.810903E-21   195.809       195.809    
  58  0.962304     -0.384245E-01 -0.331901E-22  0.331901E-22   195.941       195.941    
  59  0.548730     -0.600150     -0.518394E-21  0.518394E-21   196.001       196.001    
  60  0.972877     -0.274979E-01 -0.237519E-22  0.237519E-22   196.063       196.063    
  61  0.111472      -2.19398     -0.189510E-20  0.189510E-20   182.289       182.289    
loop,thermsimp(1:2)       87  0.167082E-20  0.195801E-20

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    400              187.83          0.79          0.47         20.32
Just calling func    0   0         22.95


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    187.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       87
neval is:      399
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       88
neval is:      399


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      401
neval,tstepnext:      399     401

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383212     -0.959166     -0.828503E-21  0.828503E-21   174.233       174.233    
   2  0.683521     -0.380497     -0.328664E-21  0.328664E-21   179.473       179.473    
   3  0.489097     -0.715194     -0.617766E-21  0.617766E-21   180.931       180.931    
   4  0.334103      -1.09630     -0.946960E-21  0.946960E-21   182.289       182.289    
   5  0.806154     -0.215480     -0.186126E-21  0.186126E-21   182.732       182.732    
   6  0.241415      -1.42124     -0.122763E-20  0.122763E-20   183.388       183.388    
   7  0.702740     -0.352768     -0.304712E-21  0.304712E-21   183.761       183.761    
   8  0.958019     -0.428882E-01 -0.370457E-22  0.370457E-22   184.029       184.029    
   9  0.444383     -0.811070     -0.700581E-21  0.700581E-21   184.352       184.352    
  10  0.311431      -1.16658     -0.100766E-20  0.100766E-20   185.232       185.232    
  11  0.230640      -1.46690     -0.126707E-20  0.126707E-20   186.004       186.004    
  12  0.524228     -0.645829     -0.557851E-21  0.557851E-21   186.680       186.680    
  13  0.317374      -1.14768     -0.991332E-21  0.991332E-21   186.885       186.885    
  14  0.111052      -2.19776     -0.189837E-20  0.189837E-20   186.997       186.997    
  15  0.661634     -0.413043     -0.356776E-21  0.356776E-21   187.579       187.579    
  16  0.692906     -0.366861     -0.316885E-21  0.316885E-21   187.612       187.612    
  17  0.460836     -0.774714     -0.669178E-21  0.669178E-21   187.645       187.645    
  18  0.650994     -0.429255     -0.370779E-21  0.370779E-21   187.676       187.676    
  19  0.639644     -0.446843     -0.385972E-21  0.385972E-21   187.837       187.837    
  20  0.379724E-01  -3.27090     -0.282532E-20  0.282532E-20   187.995       187.995    
  21  0.756579     -0.278948     -0.240948E-21  0.240948E-21   188.056       188.056    
  22  0.803990     -0.218168     -0.188448E-21  0.188448E-21   188.280       188.280    
  23  0.175285      -1.74134     -0.150413E-20  0.150413E-20   188.569       188.569    
  24  0.246523      -1.40030     -0.120954E-20  0.120954E-20   188.990       188.990    
  25  0.288835      -1.24190     -0.107272E-20  0.107272E-20   190.081       190.081    
  26  0.993993E-01  -2.30861     -0.199412E-20  0.199412E-20   190.441       190.441    
  27  0.237168      -1.43899     -0.124296E-20  0.124296E-20   190.604       190.604    
  28  0.431012     -0.841619     -0.726969E-21  0.726969E-21   190.799       190.799    
  29  0.626037     -0.468346     -0.404545E-21  0.404545E-21   191.278       191.278    
  30  0.830291     -0.185980     -0.160644E-21  0.160644E-21   191.359       191.359    
  31  0.404024     -0.906282     -0.782823E-21  0.782823E-21   191.777       191.777    
  32  0.350194      -1.04927     -0.906331E-21  0.906331E-21   192.054       192.054    
  33  0.337611      -1.08586     -0.937939E-21  0.937939E-21   192.064       192.064    
  34  0.972485E-01  -2.33049     -0.201301E-20  0.201301E-20   192.343       192.343    
  35  0.740138     -0.300918     -0.259925E-21  0.259925E-21   192.782       192.782    
  36  0.309114      -1.17405     -0.101411E-20  0.101411E-20   192.901       192.901    
  37  0.789092E-01  -2.53946     -0.219352E-20  0.219352E-20   193.239       193.239    
  38  0.649087     -0.432189     -0.373314E-21  0.373314E-21   193.343       193.343    
  39  0.240148      -1.42650     -0.123217E-20  0.123217E-20   193.458       193.458    
  40  0.417285     -0.873986     -0.754927E-21  0.754927E-21   193.590       193.590    
  41  0.117015      -2.14545     -0.185319E-20  0.185319E-20   193.773       193.773    
  42  0.353070E-01  -3.34367     -0.288818E-20  0.288818E-20   193.810       193.810    
  43  0.943571     -0.580836E-01 -0.501711E-22  0.501711E-22   194.001       194.001    
  44  0.115062      -2.16229     -0.186773E-20  0.186773E-20   194.001       194.001    
  45  0.337461      -1.08631     -0.938323E-21  0.938323E-21   194.053       194.053    
  46  0.874181     -0.134468     -0.116150E-21  0.116150E-21   194.406       194.406    
  47  0.950034     -0.512572E-01 -0.442747E-22  0.442747E-22   194.449       194.449    
  48  0.531560     -0.631940     -0.545853E-21  0.545853E-21   194.627       194.627    
  49  0.932171     -0.702387E-01 -0.606704E-22  0.606704E-22   194.854       194.854    
  50  0.639765     -0.446655     -0.385809E-21  0.385809E-21   194.870       194.870    
  51  0.536238     -0.623177     -0.538284E-21  0.538284E-21   194.873       194.873    
  52  0.650652     -0.429781     -0.371233E-21  0.371233E-21   195.002       195.002    
  53  0.176784      -1.73283     -0.149677E-20  0.149677E-20   195.010       195.010    
  54  0.578839     -0.546732     -0.472253E-21  0.472253E-21   195.025       195.025    
  55  0.155968      -1.85810     -0.160498E-20  0.160498E-20   195.128       195.128    
  56  0.109126      -2.21526     -0.191348E-20  0.191348E-20   195.180       195.180    
  57  0.257258      -1.35767     -0.117272E-20  0.117272E-20   195.591       195.591    
  58  0.407145     -0.898585     -0.776175E-21  0.776175E-21   195.809       195.809    
  59  0.964722     -0.359153E-01 -0.310227E-22  0.310227E-22   195.941       195.941    
  60  0.926509     -0.763313E-01 -0.659330E-22  0.659330E-22   196.001       196.001    
  61  0.139004      -1.97325     -0.170444E-20  0.170444E-20   187.825       187.825    
loop,thermsimp(1:2)       88  0.828503E-21  0.328664E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    401              185.30          0.80          0.47         20.36
Just calling func    0   0         22.99


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    185.30        2.398     -1.920      4.067     -100.0     0.3721    
                      -1.648      1.131     -100.0      2.892     -1.647    
                     -0.2448E-01 -1.819      2.009      0.000     0.6600    
                      -1.128     -20.00      0.000      0.000     -1.221    

                      -1.600      6836.      9471.     -556.7     -1451.    
                      -4.215     -5.789     -4.585     -15.33     -5.168    
                      -13.06     -2.671     -3855.      0.000     -1859.    

                      -450.2      5711.     -141.0      115.0      2346.    
                      -915.6     0.6774E-01-0.6480E-01  0.000    -0.1250    
                     -0.2212    -0.1316    -0.1543    -0.1792    -0.1164E-02

                     -0.7138     -2.770      1.382     0.2167     0.5304E-01
                      0.7318E-01-0.4972E-01-0.1427    -0.4968E-01-0.8124E-01
                     -0.6347E-01 0.1058    -0.2153     -3.109      1.382    

                      -1.358     -1.724      3463.      2242.      0.000    
                       0.000      9.111      8.444      0.000     0.1000    
                       1.260      1.252      9.157      8.900     -107.3    

                      0.1000      1.285      1.231      9.273      9.101    
                      -615.8     0.1000     0.1533     0.8312      9.369    
                       9.238      7947.     0.1000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    185.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       88
neval is:      400
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       89
neval is:      400


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      401
neval,tstepnext:      400     401

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.110622      -2.20164     -0.190172E-20  0.190172E-20   174.233       174.233    
   2  0.815431     -0.204039     -0.176243E-21  0.176243E-21   179.473       179.473    
   3  0.936520     -0.655846E-01 -0.566503E-22  0.566503E-22   180.931       180.931    
   4  0.177786      -1.72718     -0.149189E-20  0.149189E-20   182.289       182.289    
   5  0.759608     -0.274953     -0.237497E-21  0.237497E-21   182.732       182.732    
   6  0.712385     -0.339137     -0.292938E-21  0.292938E-21   183.388       183.388    
   7  0.237413      -1.43795     -0.124207E-20  0.124207E-20   183.761       183.761    
   8  0.500877     -0.691395     -0.597209E-21  0.597209E-21   184.029       184.029    
   9  0.971633     -0.287769E-01 -0.248568E-22  0.248568E-22   184.352       184.352    
  10  0.976361     -0.239232E-01 -0.206642E-22  0.206642E-22   185.232       185.232    
  11  0.660321     -0.415028     -0.358491E-21  0.358491E-21   186.004       186.004    
  12  0.988298     -0.117708E-01 -0.101673E-22  0.101673E-22   186.680       186.680    
  13  0.446580     -0.806136     -0.696320E-21  0.696320E-21   186.885       186.885    
  14  0.624104     -0.471439     -0.407216E-21  0.407216E-21   186.997       186.997    
  15  0.214608      -1.53894     -0.132930E-20  0.132930E-20   187.579       187.579    
  16  0.333013E-02  -5.70474     -0.492761E-20  0.492761E-20   187.612       187.612    
  17  0.272887      -1.29870     -0.112178E-20  0.112178E-20   187.645       187.645    
  18  0.869119     -0.140275     -0.121166E-21  0.121166E-21   187.676       187.676    
  19  0.872994     -0.135826     -0.117323E-21  0.117323E-21   187.825       187.825    
  20  0.695618     -0.362955     -0.313511E-21  0.313511E-21   187.837       187.837    
  21  0.125356      -2.07659     -0.179371E-20  0.179371E-20   187.995       187.995    
  22  0.416820     -0.875101     -0.755890E-21  0.755890E-21   188.056       188.056    
  23  0.857859     -0.153316     -0.132430E-21  0.132430E-21   188.280       188.280    
  24  0.499345     -0.694458     -0.599855E-21  0.599855E-21   188.569       188.569    
  25  0.731048     -0.313276     -0.270600E-21  0.270600E-21   188.990       188.990    
  26  0.459855     -0.776843     -0.671017E-21  0.671017E-21   190.081       190.081    
  27  0.185097      -1.68687     -0.145708E-20  0.145708E-20   190.441       190.441    
  28  0.339640      -1.07987     -0.932763E-21  0.932763E-21   190.604       190.604    
  29  0.639088     -0.447713     -0.386723E-21  0.386723E-21   190.799       190.799    
  30  0.472231     -0.750286     -0.648078E-21  0.648078E-21   191.278       191.278    
  31  0.165256      -1.80026     -0.155502E-20  0.155502E-20   191.359       191.359    
  32  0.652895     -0.426339     -0.368261E-21  0.368261E-21   191.777       191.777    
  33  0.145007      -1.93098     -0.166793E-20  0.166793E-20   192.054       192.054    
  34  0.216067      -1.53216     -0.132344E-20  0.132344E-20   192.064       192.064    
  35  0.649319     -0.431831     -0.373004E-21  0.373004E-21   192.343       192.343    
  36  0.700190E-01  -2.65899     -0.229677E-20  0.229677E-20   192.782       192.782    
  37  0.459205     -0.778260     -0.672241E-21  0.672241E-21   192.901       192.901    
  38  0.289919      -1.23815     -0.106948E-20  0.106948E-20   193.239       193.239    
  39  0.594508     -0.520022     -0.449182E-21  0.449182E-21   193.343       193.343    
  40  0.386540     -0.950519     -0.821034E-21  0.821034E-21   193.458       193.458    
  41  0.945584     -0.559521E-01 -0.483300E-22  0.483300E-22   193.590       193.590    
  42  0.384831     -0.954951     -0.824862E-21  0.824862E-21   193.773       193.773    
  43  0.378486E-01  -3.27416     -0.282814E-20  0.282814E-20   193.810       193.810    
  44  0.394698     -0.929635     -0.802995E-21  0.802995E-21   194.001       194.001    
  45  0.664838E-01  -2.71080     -0.234152E-20  0.234152E-20   194.001       194.001    
  46  0.638920     -0.447977     -0.386951E-21  0.386951E-21   194.053       194.053    
  47  0.856450     -0.154960     -0.133850E-21  0.133850E-21   194.406       194.406    
  48  0.388362E-01  -3.24840     -0.280589E-20  0.280589E-20   194.449       194.449    
  49  0.684151     -0.379577     -0.327869E-21  0.327869E-21   194.627       194.627    
  50  0.487715     -0.718024     -0.620211E-21  0.620211E-21   194.854       194.854    
  51  0.258765      -1.35183     -0.116768E-20  0.116768E-20   194.870       194.870    
  52  0.841756     -0.172265     -0.148798E-21  0.148798E-21   194.873       194.873    
  53  0.326329E-01  -3.42243     -0.295621E-20  0.295621E-20   195.002       195.002    
  54  0.179188      -1.71932     -0.148511E-20  0.148511E-20   195.010       195.010    
  55  0.220107      -1.51364     -0.130745E-20  0.130745E-20   195.025       195.025    
  56  0.680959     -0.384253     -0.331908E-21  0.331908E-21   195.128       195.128    
  57  0.767756     -0.264284     -0.228281E-21  0.228281E-21   195.180       195.180    
  58  0.254009      -1.37038     -0.118370E-20  0.118370E-20   195.591       195.591    
  59  0.878847     -0.129145     -0.111552E-21  0.111552E-21   195.809       195.809    
  60  0.820669     -0.197635     -0.170712E-21  0.170712E-21   195.941       195.941    
  61  0.245256      -1.40545     -0.121399E-20  0.121399E-20   185.301       185.301    
loop,thermsimp(1:2)       89  0.190172E-20  0.176243E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    402              196.68          0.80          0.47         20.23
Just calling func    0   0         22.90


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj:    403              188.08          0.77          0.46         20.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3    188.08
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       89
neval is:      402
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.863774E-21           401
loop is:       90
neval is:      402


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.172755E-21           411

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      411
neval,tstepnext:      402     411

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.181477      -1.70663     -0.294828E-21  0.294828E-21   174.233       174.233    
   2  0.957059     -0.438898E-01 -0.758217E-23  0.758217E-23   179.473       179.473    
   3  0.328183E-01  -3.41677     -0.590264E-21  0.590264E-21   180.931       180.931    
   4  0.298547      -1.20883     -0.208831E-21  0.208831E-21   182.289       182.289    
   5  0.249888      -1.38674     -0.239567E-21  0.239567E-21   182.732       182.732    
   6  0.975329     -0.249804E-01 -0.431549E-23  0.431549E-23   183.388       183.388    
   7  0.507074     -0.679098     -0.117317E-21  0.117317E-21   183.761       183.761    
   8  0.712721     -0.338665     -0.585061E-22  0.585061E-22   184.029       184.029    
   9  0.276918E-02  -5.88920     -0.101739E-20  0.101739E-20   184.352       184.352    
  10  0.504960     -0.683276     -0.118039E-21  0.118039E-21   185.232       185.232    
  11  0.490711     -0.711901     -0.122984E-21  0.122984E-21   185.301       185.301    
  12  0.371343     -0.990628     -0.171136E-21  0.171136E-21   186.004       186.004    
  13  0.111652      -2.19237     -0.378742E-21  0.378742E-21   186.680       186.680    
  14  0.169062      -1.77749     -0.307070E-21  0.307070E-21   186.885       186.885    
  15  0.287805      -1.24547     -0.215162E-21  0.215162E-21   186.997       186.997    
  16  0.907481     -0.970828E-01 -0.167715E-22  0.167715E-22   187.579       187.579    
  17  0.278800      -1.27726     -0.220653E-21  0.220653E-21   187.612       187.612    
  18  0.744655     -0.294834     -0.509340E-22  0.509340E-22   187.645       187.645    
  19  0.707862     -0.345506     -0.596879E-22  0.596879E-22   187.676       187.676    
  20  0.907604     -0.969470E-01 -0.167481E-22  0.167481E-22   187.825       187.825    
  21  0.230971      -1.46546     -0.253166E-21  0.253166E-21   187.837       187.837    
  22  0.553667     -0.591192     -0.102131E-21  0.102131E-21   187.995       187.995    
  23  0.460330E-01  -3.07840     -0.531808E-21  0.531808E-21   188.056       188.056    
  24  0.795719     -0.228509     -0.394761E-22  0.394761E-22   188.280       188.280    
  25  0.302444E-01  -3.49844     -0.604373E-21  0.604373E-21   188.569       188.569    
  26  0.379124     -0.969893     -0.167554E-21  0.167554E-21   188.990       188.990    
  27  0.905741     -0.990019E-01 -0.171031E-22  0.171031E-22   190.081       190.081    
  28  0.547238E-01  -2.90546     -0.501932E-21  0.501932E-21   190.441       190.441    
  29  0.536738     -0.622245     -0.107496E-21  0.107496E-21   190.604       190.604    
  30  0.135406      -1.99948     -0.345420E-21  0.345420E-21   190.799       190.799    
  31  0.182627      -1.70031     -0.293737E-21  0.293737E-21   191.278       191.278    
  32  0.705155     -0.349338     -0.603499E-22  0.603499E-22   191.359       191.359    
  33  0.478278     -0.737562     -0.127417E-21  0.127417E-21   191.777       191.777    
  34  0.416933     -0.874829     -0.151131E-21  0.151131E-21   192.054       192.054    
  35  0.491878     -0.709524     -0.122574E-21  0.122574E-21   192.064       192.064    
  36  0.310384      -1.16994     -0.202113E-21  0.202113E-21   192.343       192.343    
  37  0.170578      -1.76856     -0.305527E-21  0.305527E-21   192.782       192.782    
  38  0.827312     -0.189574     -0.327498E-22  0.327498E-22   192.901       192.901    
  39  0.190650E-01  -3.95990     -0.684092E-21  0.684092E-21   193.239       193.239    
  40  0.495650E-01  -3.00447     -0.519037E-21  0.519037E-21   193.343       193.343    
  41  0.763062     -0.270415     -0.467156E-22  0.467156E-22   193.458       193.458    
  42  0.526163     -0.642143     -0.110933E-21  0.110933E-21   193.590       193.590    
  43  0.797575     -0.226179     -0.390736E-22  0.390736E-22   193.773       193.773    
  44  0.890104     -0.116416     -0.201115E-22  0.201115E-22   193.810       193.810    
  45  0.437155     -0.827468     -0.142949E-21  0.142949E-21   194.001       194.001    
  46  0.869976E-01  -2.44187     -0.421846E-21  0.421846E-21   194.001       194.001    
  47  0.250045      -1.38611     -0.239458E-21  0.239458E-21   194.053       194.053    
  48  0.802362     -0.220195     -0.380398E-22  0.380398E-22   194.406       194.406    
  49  0.480565     -0.732793     -0.126594E-21  0.126594E-21   194.449       194.449    
  50  0.904360     -0.100528     -0.173666E-22  0.173666E-22   194.627       194.627    
  51  0.705326     -0.349095     -0.603078E-22  0.603078E-22   194.854       194.854    
  52  0.942019     -0.597303E-01 -0.103187E-22  0.103187E-22   194.870       194.870    
  53  0.272324      -1.30076     -0.224713E-21  0.224713E-21   194.873       194.873    
  54  0.283573      -1.26029     -0.217721E-21  0.217721E-21   195.002       195.002    
  55  0.670684     -0.399457     -0.690081E-22  0.690081E-22   195.010       195.010    
  56  0.332599      -1.10082     -0.190171E-21  0.190171E-21   195.025       195.025    
  57  0.806158     -0.215476     -0.372245E-22  0.372245E-22   195.128       195.128    
  58  0.859550     -0.151346     -0.261457E-22  0.261457E-22   195.180       195.180    
  59  0.854226     -0.157560     -0.272193E-22  0.272193E-22   195.591       195.591    
  60  0.860375     -0.150387     -0.259801E-22  0.259801E-22   195.809       195.809    
  61  0.456865     -0.783367     -0.135331E-21  0.135331E-21   188.080       188.080    
loop,thermsimp(1:2)       90  0.294828E-21  0.758217E-23

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    404              185.41          0.80          0.47         20.32
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    185.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       90
neval is:      403
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       91
neval is:      403


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      411
neval,tstepnext:      403     411

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595942     -0.517612     -0.894199E-22  0.894199E-22   174.233       174.233    
   2  0.292408      -1.22961     -0.212420E-21  0.212420E-21   179.473       179.473    
   3  0.791956     -0.233249     -0.402949E-22  0.402949E-22   180.931       180.931    
   4  0.966289     -0.342921E-01 -0.592413E-23  0.592413E-23   182.289       182.289    
   5  0.823294     -0.194442     -0.335907E-22  0.335907E-22   182.732       182.732    
   6  0.408254     -0.895866     -0.154765E-21  0.154765E-21   183.388       183.388    
   7  0.408937     -0.894195     -0.154477E-21  0.154477E-21   183.761       183.761    
   8  0.600539     -0.509928     -0.880926E-22  0.880926E-22   184.029       184.029    
   9  0.990499     -0.954603E-02 -0.164912E-23  0.164912E-23   184.352       184.352    
  10  0.209123      -1.56483     -0.270333E-21  0.270333E-21   185.232       185.232    
  11  0.481911     -0.729996     -0.126110E-21  0.126110E-21   185.301       185.301    
  12  0.862905     -0.147451     -0.254729E-22  0.254729E-22   186.004       186.004    
  13  0.376155E-01  -3.28034     -0.566694E-21  0.566694E-21   186.680       186.680    
  14  0.146768      -1.91890     -0.331499E-21  0.331499E-21   186.885       186.885    
  15  0.871323     -0.137742     -0.237956E-22  0.237956E-22   186.997       186.997    
  16  0.795062     -0.229336     -0.396189E-22  0.396189E-22   187.579       187.579    
  17  0.897746     -0.107868     -0.186347E-22  0.186347E-22   187.612       187.612    
  18  0.563547     -0.573504     -0.990757E-22  0.990757E-22   187.645       187.645    
  19  0.896550     -0.109201     -0.188650E-22  0.188650E-22   187.676       187.676    
  20  0.431823     -0.839740     -0.145069E-21  0.145069E-21   187.825       187.825    
  21  0.605399     -0.501868     -0.867002E-22  0.867002E-22   187.837       187.837    
  22  0.343227      -1.06936     -0.184738E-21  0.184738E-21   187.995       187.995    
  23  0.561291     -0.577516     -0.997686E-22  0.997686E-22   188.056       188.056    
  24  0.616745     -0.483300     -0.834924E-22  0.834924E-22   188.080       188.080    
  25  0.265639      -1.32562     -0.229007E-21  0.229007E-21   188.280       188.280    
  26  0.776153     -0.253405     -0.437769E-22  0.437769E-22   188.569       188.569    
  27  0.459663E-01  -3.07985     -0.532058E-21  0.532058E-21   188.990       188.990    
  28  0.409786     -0.892120     -0.154118E-21  0.154118E-21   190.081       190.081    
  29  0.905947     -0.987744E-01 -0.170638E-22  0.170638E-22   190.441       190.441    
  30  0.432615     -0.837908     -0.144753E-21  0.144753E-21   190.604       190.604    
  31  0.377960     -0.972967     -0.168085E-21  0.168085E-21   190.799       190.799    
  32  0.128159      -2.05449     -0.354922E-21  0.354922E-21   191.278       191.278    
  33  0.942051     -0.596962E-01 -0.103128E-22  0.103128E-22   191.359       191.359    
  34  0.247486      -1.39640     -0.241235E-21  0.241235E-21   191.777       191.777    
  35  0.138137      -1.97951     -0.341970E-21  0.341970E-21   192.054       192.054    
  36  0.411947     -0.886861     -0.153210E-21  0.153210E-21   192.064       192.064    
  37  0.431122     -0.841365     -0.145350E-21  0.145350E-21   192.343       192.343    
  38  0.421770     -0.863294     -0.149138E-21  0.149138E-21   192.782       192.782    
  39  0.497057     -0.699050     -0.120764E-21  0.120764E-21   192.901       192.901    
  40  0.209932      -1.56097     -0.269665E-21  0.269665E-21   193.239       193.239    
  41  0.518017E-01  -2.96033     -0.511412E-21  0.511412E-21   193.343       193.343    
  42  0.527650     -0.639322     -0.110446E-21  0.110446E-21   193.458       193.458    
  43  0.350969E-01  -3.34964     -0.578667E-21  0.578667E-21   193.590       193.590    
  44  0.302787      -1.19473     -0.206395E-21  0.206395E-21   193.773       193.773    
  45  0.746746     -0.292030     -0.504496E-22  0.504496E-22   193.810       193.810    
  46  0.108806E-01  -4.52078     -0.780986E-21  0.780986E-21   194.001       194.001    
  47  0.862235E-02  -4.75340     -0.821173E-21  0.821173E-21   194.001       194.001    
  48  0.320002      -1.13943     -0.196842E-21  0.196842E-21   194.053       194.053    
  49  0.909566     -0.947876E-01 -0.163750E-22  0.163750E-22   194.406       194.406    
  50  0.939423     -0.624889E-01 -0.107953E-22  0.107953E-22   194.449       194.449    
  51  0.241516E-01  -3.72341     -0.643236E-21  0.643236E-21   194.627       194.627    
  52  0.680825     -0.384450     -0.664156E-22  0.664156E-22   194.854       194.854    
  53  0.461584     -0.773090     -0.133555E-21  0.133555E-21   194.870       194.870    
  54  0.878606     -0.129418     -0.223576E-22  0.223576E-22   194.873       194.873    
  55  0.746824     -0.291925     -0.504315E-22  0.504315E-22   195.002       195.002    
  56  0.628563     -0.464319     -0.802134E-22  0.802134E-22   195.010       195.010    
  57  0.637299     -0.450516     -0.778288E-22  0.778288E-22   195.025       195.025    
  58  0.187131      -1.67594     -0.289527E-21  0.289527E-21   195.128       195.128    
  59  0.628195     -0.464905     -0.803146E-22  0.803146E-22   195.180       195.180    
  60  0.308814      -1.17502     -0.202990E-21  0.202990E-21   195.591       195.591    
  61  0.167670      -1.78576     -0.308498E-21  0.308498E-21   185.413       185.413    
loop,thermsimp(1:2)       91  0.894199E-22  0.212420E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    405              189.18          0.78          0.47         20.31
Just calling func    0   0         23.19


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    189.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       91
neval is:      404
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       92
neval is:      404


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      411
neval,tstepnext:      404     411

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.462704     -0.770667     -0.133136E-21  0.133136E-21   174.233       174.233    
   2  0.130205      -2.03865     -0.352186E-21  0.352186E-21   179.473       179.473    
   3  0.378009     -0.972836     -0.168062E-21  0.168062E-21   180.931       180.931    
   4  0.559840     -0.580104     -0.100216E-21  0.100216E-21   182.289       182.289    
   5  0.527823     -0.638994     -0.110389E-21  0.110389E-21   182.732       182.732    
   6  0.913061     -0.909530E-01 -0.157126E-22  0.157126E-22   183.388       183.388    
   7  0.559435     -0.580829     -0.100341E-21  0.100341E-21   183.761       183.761    
   8  0.599364     -0.511886     -0.884308E-22  0.884308E-22   184.029       184.029    
   9  0.314312      -1.15737     -0.199941E-21  0.199941E-21   184.352       184.352    
  10  0.544575     -0.607749     -0.104992E-21  0.104992E-21   185.232       185.232    
  11  0.556311     -0.586427     -0.101308E-21  0.101308E-21   185.301       185.301    
  12  0.542536     -0.611500     -0.105640E-21  0.105640E-21   185.413       185.413    
  13  0.134785      -2.00408     -0.346214E-21  0.346214E-21   186.004       186.004    
  14  0.407524     -0.897656     -0.155074E-21  0.155074E-21   186.680       186.680    
  15  0.733239     -0.310283     -0.536029E-22  0.536029E-22   186.885       186.885    
  16  0.732167     -0.311747     -0.538558E-22  0.538558E-22   186.997       186.997    
  17  0.712480E-01  -2.64159     -0.456347E-21  0.456347E-21   187.579       187.579    
  18  0.569776     -0.562512     -0.971766E-22  0.971766E-22   187.612       187.612    
  19  0.150345      -1.89482     -0.327339E-21  0.327339E-21   187.645       187.645    
  20  0.819272     -0.199339     -0.344368E-22  0.344368E-22   187.676       187.676    
  21  0.154756      -1.86591     -0.322344E-21  0.322344E-21   187.825       187.825    
  22  0.887378     -0.119484     -0.206414E-22  0.206414E-22   187.837       187.837    
  23  0.590032     -0.527579     -0.911418E-22  0.911418E-22   187.995       187.995    
  24  0.527612     -0.639393     -0.110458E-21  0.110458E-21   188.056       188.056    
  25  0.154870      -1.86517     -0.322217E-21  0.322217E-21   188.080       188.080    
  26  0.353934      -1.03864     -0.179431E-21  0.179431E-21   188.280       188.280    
  27  0.509324     -0.674671     -0.116553E-21  0.116553E-21   188.569       188.569    
  28  0.292668      -1.22872     -0.212267E-21  0.212267E-21   188.990       188.990    
  29  0.942699     -0.590077E-01 -0.101939E-22  0.101939E-22   190.081       190.081    
  30  0.416256     -0.876454     -0.151412E-21  0.151412E-21   190.441       190.441    
  31  0.225799      -1.48811     -0.257078E-21  0.257078E-21   190.604       190.604    
  32  0.913335     -0.906528E-01 -0.156607E-22  0.156607E-22   190.799       190.799    
  33  0.100301      -2.29957     -0.397263E-21  0.397263E-21   191.278       191.278    
  34  0.869433     -0.139915     -0.241709E-22  0.241709E-22   191.359       191.359    
  35  0.894289     -0.111726     -0.193012E-22  0.193012E-22   191.777       191.777    
  36  0.116341      -2.15123     -0.371636E-21  0.371636E-21   192.054       192.054    
  37  0.166859      -1.79060     -0.309336E-21  0.309336E-21   192.064       192.064    
  38  0.227052      -1.48258     -0.256122E-21  0.256122E-21   192.343       192.343    
  39  0.171610      -1.76253     -0.304486E-21  0.304486E-21   192.782       192.782    
  40  0.167873      -1.78455     -0.308289E-21  0.308289E-21   192.901       192.901    
  41  0.235086      -1.44780     -0.250115E-21  0.250115E-21   193.239       193.239    
  42  0.789281     -0.236633     -0.408795E-22  0.408795E-22   193.343       193.343    
  43  0.972303     -0.280877E-01 -0.485229E-23  0.485229E-23   193.458       193.458    
  44  0.862081     -0.148406     -0.256379E-22  0.256379E-22   193.590       193.590    
  45  0.686350E-01  -2.67895     -0.462802E-21  0.462802E-21   193.773       193.773    
  46  0.391918     -0.936704     -0.161820E-21  0.161820E-21   193.810       193.810    
  47  0.324658      -1.12498     -0.194346E-21  0.194346E-21   194.001       194.001    
  48  0.851260     -0.161037     -0.278200E-22  0.278200E-22   194.001       194.001    
  49  0.691976     -0.368204     -0.636090E-22  0.636090E-22   194.053       194.053    
  50  0.891012     -0.115397     -0.199355E-22  0.199355E-22   194.406       194.406    
  51  0.419817     -0.867936     -0.149940E-21  0.149940E-21   194.449       194.449    
  52  0.211240      -1.55476     -0.268593E-21  0.268593E-21   194.627       194.627    
  53  0.329853      -1.10911     -0.191604E-21  0.191604E-21   194.854       194.854    
  54  0.972715     -0.276643E-01 -0.477914E-23  0.477914E-23   194.870       194.870    
  55  0.148657      -1.90611     -0.329290E-21  0.329290E-21   194.873       194.873    
  56  0.350534      -1.04830     -0.181099E-21  0.181099E-21   195.002       195.002    
  57  0.756828     -0.278619     -0.481328E-22  0.481328E-22   195.010       195.010    
  58  0.442116     -0.816183     -0.141000E-21  0.141000E-21   195.025       195.025    
  59  0.837204     -0.177687     -0.306964E-22  0.306964E-22   195.128       195.128    
  60  0.624540     -0.470739     -0.813225E-22  0.813225E-22   195.180       195.180    
  61  0.332625      -1.10074     -0.190158E-21  0.190158E-21   189.183       189.183    
loop,thermsimp(1:2)       92  0.133136E-21  0.352186E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    406              193.05          0.79          0.47         20.34
Just calling func    0   0         23.05


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       92
neval is:      405
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       93
neval is:      405


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      411
neval,tstepnext:      405     411

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307838      -1.17818     -0.203537E-21  0.203537E-21   174.233       174.233    
   2  0.933417     -0.689037E-01 -0.119034E-22  0.119034E-22   179.473       179.473    
   3  0.383437     -0.958579     -0.165599E-21  0.165599E-21   180.931       180.931    
   4  0.867744     -0.141859     -0.245068E-22  0.245068E-22   182.289       182.289    
   5  0.494766     -0.703671     -0.121562E-21  0.121562E-21   182.732       182.732    
   6  0.435815     -0.830538     -0.143479E-21  0.143479E-21   183.388       183.388    
   7  0.733710     -0.309641     -0.534920E-22  0.534920E-22   183.761       183.761    
   8  0.200722      -1.60583     -0.277416E-21  0.277416E-21   184.029       184.029    
   9  0.706217     -0.347833     -0.600898E-22  0.600898E-22   184.352       184.352    
  10  0.748795     -0.289290     -0.499762E-22  0.499762E-22   185.232       185.232    
  11  0.270052      -1.30914     -0.226161E-21  0.226161E-21   185.301       185.301    
  12  0.715639     -0.334579     -0.578002E-22  0.578002E-22   185.413       185.413    
  13  0.266922      -1.32080     -0.228174E-21  0.228174E-21   186.004       186.004    
  14  0.980853     -0.193327E-01 -0.333982E-23  0.333982E-23   186.680       186.680    
  15  0.280614      -1.27077     -0.219532E-21  0.219532E-21   186.885       186.885    
  16  0.272341      -1.30070     -0.224702E-21  0.224702E-21   186.997       186.997    
  17  0.100141E-01  -4.60376     -0.795322E-21  0.795322E-21   187.579       187.579    
  18  0.557279     -0.584690     -0.101008E-21  0.101008E-21   187.612       187.612    
  19  0.527359     -0.639874     -0.110541E-21  0.110541E-21   187.645       187.645    
  20  0.904909     -0.999211E-01 -0.172619E-22  0.172619E-22   187.676       187.676    
  21  0.432558     -0.838038     -0.144775E-21  0.144775E-21   187.825       187.825    
  22  0.123115      -2.09464     -0.361859E-21  0.361859E-21   187.837       187.837    
  23  0.450238     -0.797980     -0.137855E-21  0.137855E-21   187.995       187.995    
  24  0.914116     -0.897979E-01 -0.155130E-22  0.155130E-22   188.056       188.056    
  25  0.696581     -0.361571     -0.624632E-22  0.624632E-22   188.080       188.080    
  26  0.254400      -1.36885     -0.236475E-21  0.236475E-21   188.280       188.280    
  27  0.140099      -1.96540     -0.339533E-21  0.339533E-21   188.569       188.569    
  28  0.387021     -0.949277     -0.163992E-21  0.163992E-21   188.990       188.990    
  29  0.880896     -0.126815     -0.219079E-22  0.219079E-22   189.183       189.183    
  30  0.404709     -0.904588     -0.156272E-21  0.156272E-21   190.081       190.081    
  31  0.282749      -1.26319     -0.218223E-21  0.218223E-21   190.441       190.441    
  32  0.330608E-01  -3.40941     -0.588991E-21  0.588991E-21   190.604       190.604    
  33  0.345079      -1.06398     -0.183808E-21  0.183808E-21   190.799       190.799    
  34  0.753331     -0.283251     -0.489330E-22  0.489330E-22   191.278       191.278    
  35  0.643052     -0.441530     -0.762764E-22  0.762764E-22   191.359       191.359    
  36  0.700997     -0.355251     -0.613713E-22  0.613713E-22   191.777       191.777    
  37  0.366918      -1.00262     -0.173207E-21  0.173207E-21   192.054       192.054    
  38  0.520247     -0.653453     -0.112887E-21  0.112887E-21   192.064       192.064    
  39  0.129902      -2.04098     -0.352589E-21  0.352589E-21   192.343       192.343    
  40  0.233946      -1.45266     -0.250955E-21  0.250955E-21   192.782       192.782    
  41  0.502503     -0.688154     -0.118882E-21  0.118882E-21   192.901       192.901    
  42  0.591435     -0.525204     -0.907316E-22  0.907316E-22   193.239       193.239    
  43  0.303299      -1.19304     -0.206103E-21  0.206103E-21   193.343       193.343    
  44  0.697349     -0.360469     -0.622728E-22  0.622728E-22   193.458       193.458    
  45  0.638501     -0.448633     -0.775035E-22  0.775035E-22   193.590       193.590    
  46  0.851586     -0.160655     -0.277539E-22  0.277539E-22   193.773       193.773    
  47  0.769810     -0.261611     -0.451946E-22  0.451946E-22   193.810       193.810    
  48  0.420654     -0.865944     -0.149596E-21  0.149596E-21   194.001       194.001    
  49  0.763191     -0.270246     -0.466864E-22  0.466864E-22   194.001       194.001    
  50  0.570533     -0.561183     -0.969472E-22  0.969472E-22   194.053       194.053    
  51  0.381402     -0.963902     -0.166519E-21  0.166519E-21   194.406       194.406    
  52  0.826061     -0.191086     -0.330111E-22  0.330111E-22   194.449       194.449    
  53  0.827431     -0.189430     -0.327249E-22  0.327249E-22   194.627       194.627    
  54  0.165266      -1.80020     -0.310993E-21  0.310993E-21   194.854       194.854    
  55  0.455441     -0.786489     -0.135870E-21  0.135870E-21   194.870       194.870    
  56  0.663266     -0.410579     -0.709294E-22  0.709294E-22   194.873       194.873    
  57  0.374252     -0.982826     -0.169788E-21  0.169788E-21   195.002       195.002    
  58  0.944736     -0.568496E-01 -0.982104E-23  0.982104E-23   195.010       195.010    
  59  0.231548E-01  -3.76555     -0.650517E-21  0.650517E-21   195.025       195.025    
  60  0.512350     -0.668747     -0.115529E-21  0.115529E-21   195.128       195.128    
  61  0.225629      -1.48886     -0.257208E-21  0.257208E-21   193.046       193.046    
loop,thermsimp(1:2)       93  0.203537E-21  0.119034E-22

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    407              193.47          0.81          0.46         20.32
Just calling func    0   0         23.20


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    193.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       93
neval is:      406
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       94
neval is:      406


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      411
neval,tstepnext:      406     411

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.906638     -0.980118E-01 -0.169320E-22  0.169320E-22   174.233       174.233    
   2  0.613882E-01  -2.79054     -0.482079E-21  0.482079E-21   179.473       179.473    
   3  0.945299     -0.562540E-01 -0.971814E-23  0.971814E-23   180.931       180.931    
   4  0.407317     -0.898162     -0.155162E-21  0.155162E-21   182.289       182.289    
   5  0.577979     -0.548219     -0.947074E-22  0.947074E-22   182.732       182.732    
   6  0.622966     -0.473263     -0.817586E-22  0.817586E-22   183.388       183.388    
   7  0.116024      -2.15396     -0.372107E-21  0.372107E-21   183.761       183.761    
   8  0.615259     -0.485712     -0.839091E-22  0.839091E-22   184.029       184.029    
   9  0.572833     -0.557160     -0.962522E-22  0.962522E-22   184.352       184.352    
  10  0.936141E-01  -2.36857     -0.409183E-21  0.409183E-21   185.232       185.232    
  11  0.425313E-01  -3.15751     -0.545476E-21  0.545476E-21   185.301       185.301    
  12  0.794486     -0.230060     -0.397440E-22  0.397440E-22   185.413       185.413    
  13  0.421013     -0.865092     -0.149449E-21  0.149449E-21   186.004       186.004    
  14  0.706210     -0.347842     -0.600914E-22  0.600914E-22   186.680       186.680    
  15  0.497293     -0.698576     -0.120682E-21  0.120682E-21   186.885       186.885    
  16  0.837294     -0.177581     -0.306779E-22  0.306779E-22   186.997       186.997    
  17  0.470110E-01  -3.05737     -0.528176E-21  0.528176E-21   187.579       187.579    
  18  0.884779     -0.122418     -0.211483E-22  0.211483E-22   187.612       187.612    
  19  0.636995     -0.450994     -0.779114E-22  0.779114E-22   187.645       187.645    
  20  0.527446     -0.639709     -0.110513E-21  0.110513E-21   187.676       187.676    
  21  0.730178     -0.314467     -0.543258E-22  0.543258E-22   187.825       187.825    
  22  0.966507     -0.340666E-01 -0.588517E-23  0.588517E-23   187.837       187.837    
  23  0.665256     -0.407584     -0.704121E-22  0.704121E-22   187.995       187.995    
  24  0.368849     -0.997369     -0.172300E-21  0.172300E-21   188.056       188.056    
  25  0.676381     -0.390999     -0.675470E-22  0.675470E-22   188.080       188.080    
  26  0.523973     -0.646315     -0.111654E-21  0.111654E-21   188.280       188.280    
  27  0.799675     -0.223550     -0.386194E-22  0.386194E-22   188.569       188.569    
  28  0.980123E-01  -2.32266     -0.401251E-21  0.401251E-21   188.990       188.990    
  29  0.111699      -2.19195     -0.378670E-21  0.378670E-21   189.183       189.183    
  30  0.265518      -1.32607     -0.229085E-21  0.229085E-21   190.081       190.081    
  31  0.950312     -0.509651E-01 -0.880446E-23  0.880446E-23   190.441       190.441    
  32  0.405947     -0.901532     -0.155744E-21  0.155744E-21   190.604       190.604    
  33  0.260699      -1.34439     -0.232250E-21  0.232250E-21   190.799       190.799    
  34  0.736960E-01  -2.60781     -0.450511E-21  0.450511E-21   191.278       191.278    
  35  0.738935     -0.302545     -0.522662E-22  0.522662E-22   191.359       191.359    
  36  0.874430     -0.134183     -0.231807E-22  0.231807E-22   191.777       191.777    
  37  0.544348     -0.608166     -0.105064E-21  0.105064E-21   192.054       192.054    
  38  0.836560     -0.178456     -0.308292E-22  0.308292E-22   192.064       192.064    
  39  0.794046     -0.230614     -0.398397E-22  0.398397E-22   192.343       192.343    
  40  0.403101     -0.908567     -0.156959E-21  0.156959E-21   192.782       192.782    
  41  0.121006      -2.11191     -0.364844E-21  0.364844E-21   192.901       192.901    
  42  0.536509     -0.622671     -0.107569E-21  0.107569E-21   193.046       193.046    
  43  0.705153     -0.349340     -0.603501E-22  0.603501E-22   193.239       193.239    
  44  0.552265     -0.593728     -0.102569E-21  0.102569E-21   193.343       193.343    
  45  0.614889     -0.486313     -0.840130E-22  0.840130E-22   193.458       193.458    
  46  0.164587      -1.80432     -0.311705E-21  0.311705E-21   193.590       193.590    
  47  0.504621     -0.683947     -0.118155E-21  0.118155E-21   193.773       193.773    
  48  0.647211     -0.435083     -0.751627E-22  0.751627E-22   193.810       193.810    
  49  0.300283      -1.20303     -0.207829E-21  0.207829E-21   194.001       194.001    
  50  0.895299     -0.110598     -0.191063E-22  0.191063E-22   194.001       194.001    
  51  0.998700     -0.130124E-02 -0.224796E-24  0.224796E-24   194.053       194.053    
  52  0.792056     -0.233123     -0.402731E-22  0.402731E-22   194.406       194.406    
  53  0.752741     -0.284034     -0.490682E-22  0.490682E-22   194.449       194.449    
  54  0.590551     -0.526700     -0.909900E-22  0.909900E-22   194.627       194.627    
  55  0.714482     -0.336197     -0.580797E-22  0.580797E-22   194.854       194.854    
  56  0.824483     -0.192998     -0.333414E-22  0.333414E-22   194.870       194.870    
  57  0.721126     -0.326942     -0.564808E-22  0.564808E-22   194.873       194.873    
  58  0.952612E-01  -2.35113     -0.406170E-21  0.406170E-21   195.002       195.002    
  59  0.476254     -0.741805     -0.128150E-21  0.128150E-21   195.010       195.010    
  60  0.300313      -1.20293     -0.207812E-21  0.207812E-21   195.025       195.025    
  61  0.345995      -1.06133     -0.183350E-21  0.183350E-21   193.474       193.474    
loop,thermsimp(1:2)       94  0.169320E-22  0.482079E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    408              192.19          0.79          0.47         20.27
Just calling func    0   0         23.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    192.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       94
neval is:      407
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    100.557      0.200000    
T0,tstep,tfreq (these do not change):             10
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       95
neval is:      407


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      411
neval,tstepnext:      407     411

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.696497     -0.361691     -0.624840E-22  0.624840E-22   174.233       174.233    
   2  0.155968      -1.85811     -0.320997E-21  0.320997E-21   179.473       179.473    
   3  0.658746     -0.417417     -0.721108E-22  0.721108E-22   180.931       180.931    
   4  0.456108     -0.785026     -0.135617E-21  0.135617E-21   182.289       182.289    
   5  0.578376     -0.547531     -0.945887E-22  0.945887E-22   182.732       182.732    
   6  0.612802     -0.489713     -0.846003E-22  0.846003E-22   183.388       183.388    
   7  0.790602     -0.234960     -0.405906E-22  0.405906E-22   183.761       183.761    
   8  0.453268     -0.791272     -0.136696E-21  0.136696E-21   184.029       184.029    
   9  0.945996     -0.555168E-01 -0.959079E-23  0.959079E-23   184.352       184.352    
  10  0.788726E-01  -2.53992     -0.438784E-21  0.438784E-21   185.232       185.232    
  11  0.383272     -0.959010     -0.165674E-21  0.165674E-21   185.301       185.301    
  12  0.637877     -0.449610     -0.776723E-22  0.776723E-22   185.413       185.413    
  13  0.789879     -0.235876     -0.407487E-22  0.407487E-22   186.004       186.004    
  14  0.424843     -0.856036     -0.147884E-21  0.147884E-21   186.680       186.680    
  15  0.417610     -0.873208     -0.150851E-21  0.150851E-21   186.885       186.885    
  16  0.751298     -0.285953     -0.493998E-22  0.493998E-22   186.997       186.997    
  17  0.504529     -0.684131     -0.118187E-21  0.118187E-21   187.579       187.579    
  18  0.124745      -2.08148     -0.359586E-21  0.359586E-21   187.612       187.612    
  19  0.364120      -1.01027     -0.174529E-21  0.174529E-21   187.645       187.645    
  20  0.997073     -0.293156E-02 -0.506442E-24  0.506442E-24   187.676       187.676    
  21  0.760130     -0.274266     -0.473807E-22  0.473807E-22   187.825       187.825    
  22  0.391849     -0.936877     -0.161850E-21  0.161850E-21   187.837       187.837    
  23  0.419615     -0.868417     -0.150023E-21  0.150023E-21   187.995       187.995    
  24  0.265107      -1.32762     -0.229353E-21  0.229353E-21   188.056       188.056    
  25  0.377532     -0.974100     -0.168281E-21  0.168281E-21   188.080       188.080    
  26  0.755901     -0.279845     -0.483446E-22  0.483446E-22   188.280       188.280    
  27  0.252153      -1.37772     -0.238008E-21  0.238008E-21   188.569       188.569    
  28  0.933374     -0.689494E-01 -0.119114E-22  0.119114E-22   188.990       188.990    
  29  0.478223     -0.737678     -0.127437E-21  0.127437E-21   189.183       189.183    
  30  0.674746     -0.393419     -0.679651E-22  0.679651E-22   190.081       190.081    
  31  0.693841     -0.365513     -0.631442E-22  0.631442E-22   190.441       190.441    
  32  0.569399     -0.563175     -0.972912E-22  0.972912E-22   190.604       190.604    
  33  0.693068     -0.366627     -0.633365E-22  0.633365E-22   190.799       190.799    
  34  0.383107E-01  -3.26203     -0.563531E-21  0.563531E-21   191.278       191.278    
  35  0.387610     -0.947756     -0.163729E-21  0.163729E-21   191.359       191.359    
  36  0.357170      -1.02954     -0.177859E-21  0.177859E-21   191.777       191.777    
  37  0.156304      -1.85595     -0.320624E-21  0.320624E-21   192.054       192.054    
  38  0.582651     -0.540168     -0.933166E-22  0.933166E-22   192.064       192.064    
  39  0.626248     -0.468009     -0.808508E-22  0.808508E-22   192.343       192.343    
  40  0.813122     -0.206874     -0.357385E-22  0.357385E-22   192.782       192.782    
  41  0.879984     -0.127851     -0.220870E-22  0.220870E-22   192.901       192.901    
  42  0.760070E-01  -2.57693     -0.445177E-21  0.445177E-21   193.046       193.046    
  43  0.773428     -0.256923     -0.443847E-22  0.443847E-22   193.239       193.239    
  44  0.154285      -1.86896     -0.322871E-21  0.322871E-21   193.343       193.343    
  45  0.484463     -0.724715     -0.125198E-21  0.125198E-21   193.458       193.458    
  46  0.713913     -0.336994     -0.582173E-22  0.582173E-22   193.474       193.474    
  47  0.740570     -0.300335     -0.518843E-22  0.518843E-22   193.590       193.590    
  48  0.812421     -0.207737     -0.358875E-22  0.358875E-22   193.773       193.773    
  49  0.497524     -0.698111     -0.120602E-21  0.120602E-21   193.810       193.810    
  50  0.625568     -0.469095     -0.810385E-22  0.810385E-22   194.001       194.001    
  51  0.342539      -1.07137     -0.185084E-21  0.185084E-21   194.001       194.001    
  52  0.569732     -0.562589     -0.971900E-22  0.971900E-22   194.053       194.053    
  53  0.564585     -0.571664     -0.987577E-22  0.987577E-22   194.406       194.406    
  54  0.223876      -1.49666     -0.258556E-21  0.258556E-21   194.449       194.449    
  55  0.164316E-01  -4.10855     -0.709772E-21  0.709772E-21   194.627       194.627    
  56  0.717187     -0.332419     -0.574269E-22  0.574269E-22   194.854       194.854    
  57  0.625669     -0.468934     -0.810106E-22  0.810106E-22   194.870       194.870    
  58  0.762451E-01  -2.57380     -0.444637E-21  0.444637E-21   194.873       194.873    
  59  0.418724     -0.870542     -0.150390E-21  0.150390E-21   195.002       195.002    
  60  0.972220     -0.281735E-01 -0.486710E-23  0.486710E-23   195.010       195.010    
  61  0.245489E-01  -3.70709     -0.640418E-21  0.640418E-21   192.186       192.186    
loop,thermsimp(1:2)       95  0.624840E-22  0.320997E-21

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj:    409              180.14          0.79          0.47         20.34
Just calling func    0   0         22.92


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2    180.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0       0      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.172755E-21           411
loop is:       95
neval is:      408
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   4.57504    

hmean,hstd : ****************************


write best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd : ****************************
h(1),h(best1),h(np1) : ******************************************
htherm(1),htherm(best1),htherm(np1) : ******************************************


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj:    410              184.03          0.79          0.47         20.34

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    2.4583      -1.8869       4.0722      -100.00      0.33732      -1.6475    
    1.1756      -100.00       2.8797      -1.0615      0.19179E-01  -1.8522    
    2.0085       0.0000      0.66000      -1.1173      -20.000       0.0000    
    0.0000      -1.2210      -1.6000       6807.7       9435.8      -554.59    

   -1451.5      -4.2152      -5.8003      -4.5411      -15.334      -5.1680    
   -13.066      -2.6772      -3855.2       0.0000      -1859.4      -450.20    
    5710.5      -141.03       115.02       2346.3      -915.58      0.66746E-01
  -0.58760E-01   0.0000     -0.12971     -0.22170     -0.13410     -0.15176    

  -0.18671     -0.42150E-02 -0.71202      -2.7679       1.3819      0.21707    
   0.50157E-01  0.68746E-01 -0.44759E-01 -0.15066     -0.40848E-01 -0.75234E-01
  -0.71710E-01  0.99304E-01 -0.21893      -3.1075       1.3819      -1.3428    
   -1.7598       3528.1       2291.4       0.0000       0.0000       9.1152    

    8.4304       0.0000      0.10000       1.2689       1.2598       9.1564    
    8.8978      -108.00      0.10000       1.2938       1.2365       9.2675    
    9.1051      -618.45      0.10000      0.97541E-01  0.83300       9.3681    
    9.2315       7952.5      0.10000    
 Function value at centroid =   184.026    

 Minimum found after  409 function evaluations
 Minimum at
   2.45832     -1.88685      4.07217     -100.000     0.337319     -1.64753    
   1.17564     -100.000      2.87974     -1.06146     0.191790E-01 -1.85219    
   2.00854      0.00000     0.660000     -1.11735     -20.0000      0.00000    
   0.00000     -1.22100     -1.60000      6807.72      9435.83     -554.592    

  -1451.47     -4.21516     -5.80028     -4.54108     -15.3337     -5.16796    
  -13.0656     -2.67719     -3855.20      0.00000     -1859.38     -450.195    
   5710.53     -141.033      115.023      2346.33     -915.577     0.667457E-01
 -0.587599E-01  0.00000    -0.129710    -0.221701    -0.134102    -0.151758    

 -0.186711    -0.421497E-02-0.712024     -2.76791      1.38189     0.217069    
  0.501572E-01 0.687463E-01-0.447592E-01-0.150655    -0.408478E-01-0.752344E-01
 -0.717102E-01 0.993044E-01-0.218928     -3.10750      1.38189     -1.34285    
  -1.75977      3528.12      2291.37      0.00000      0.00000      9.11515    

   8.43036      0.00000     0.100000      1.26892      1.25984      9.15638    
   8.89781     -108.004     0.100000      1.29384      1.23648      9.26754    
   9.10510     -618.449     0.100000     0.975407E-01 0.833001      9.36813    
   9.23153      7952.53     0.100000    
 Function value at minimum =   184.026    
