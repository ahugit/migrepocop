nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    14.3199      0.500000    
Tfreq:   69
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    14.3199      0.500000    
Tfreq:   69
 Estimating   69 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2         47.73          4.22          1.10         23.76          0.72          0.04         29.83
iter,obj,time:      3         48.52          0.83          1.12         23.79          0.73          0.04         26.51
iter,obj,time:      4         47.45          0.83          1.13         23.80          0.48          0.04         26.28
iter,obj,time:      5         47.71          0.83          1.12         23.77          0.52          0.04         26.29
iter,obj,time:      6         48.59          0.83          1.11         23.80          0.49          0.04         26.27
iter,obj,time:      7         48.16          0.84          1.12         23.80          0.52          0.04         26.32
iter,obj,time:      8         47.88          0.83          1.11         23.78          0.50          0.04         26.26
iter,obj,time:      9         48.18          0.83          1.12         23.80          0.43          0.04         26.22
iter,obj,time:     10         49.05          0.84          1.12         23.79          0.55          0.04         26.34
iter,obj,time:     11         47.76          0.84          1.12         23.85          0.82          0.04         26.68
iter,obj,time:     12         48.10          0.84          1.12         23.76          0.58          0.04         26.34
iter,obj,time:     13         48.75          0.83          1.11         23.78          0.55          0.03         26.31
iter,obj,time:     14         47.74          0.84          1.12         23.84          0.49          0.04         26.33
iter,obj,time:     15         47.73          0.83          1.12         23.76          0.50          0.04         26.25
iter,obj,time:     16         47.66          0.84          1.12         23.83          0.50          0.04         26.32
iter,obj,time:     17         47.74          0.83          1.12         23.80          0.49          0.04         26.28
iter,obj,time:     18         47.74          0.84          1.12         23.77          0.51          0.04         26.27
iter,obj,time:     19         47.75          0.84          1.12         23.77          0.60          0.04         26.36
iter,obj,time:     20         47.73          0.84          1.12         23.81          0.45          0.04         26.27
iter,obj,time:     21         47.73          0.84          1.11         23.87          0.44          0.04         26.30
iter,obj,time:     22         47.73          0.84          1.12         23.81          0.50          0.04         26.31
iter,obj,time:     23         47.77          0.83          1.13         23.76          0.70          0.04         26.45
iter,obj,time:     24         50.94          0.80          1.11         23.71          0.64          0.04         26.30
iter,obj,time:     25         52.61          0.82          1.11         23.79          0.51          0.04         26.27
iter,obj,time:     26         47.94          0.82          1.12         23.79          0.84          0.04         26.61
iter,obj,time:     27         50.87          0.84          1.12         23.81          0.73          0.04         26.54
iter,obj,time:     28         48.88          0.84          1.11         23.79          0.75          0.04         26.53
iter,obj,time:     29         52.43          0.84          1.12         23.74          0.55          0.04         26.28
iter,obj,time:     30         52.50          0.82          1.12         23.75          0.60          0.04         26.34
iter,obj,time:     31         52.25          0.83          1.11         23.76          0.55          0.04         26.29
iter,obj,time:     32         48.23          0.83          1.11         23.79          0.55          0.04         26.33
iter,obj,time:     33         48.21          0.84          1.11         23.70          0.60          0.04         26.30
iter,obj,time:     34         48.24          0.83          1.11         23.79          0.92          0.04         26.70
iter,obj,time:     35         48.22          0.81          1.11         23.75          0.69          0.04         26.40
iter,obj,time:     36         47.13          0.83          1.11         23.79          0.51          0.04         26.28
iter,obj,time:     37         49.53          0.83          1.12         23.77          0.59          0.04         26.35
iter,obj,time:     38         48.26          0.83          1.11         23.80          0.62          0.04         26.41
iter,obj,time:     39         47.72          0.83          1.11         23.78          0.51          0.04         26.27
iter,obj,time:     40         47.80          0.83          1.12         23.77          0.53          0.04         26.28
iter,obj,time:     41         48.51          0.83          1.11         23.75          0.58          0.04         26.31
iter,obj,time:     42         48.83          0.83          1.11         23.71          0.57          0.04         26.27
iter,obj,time:     43         47.78          0.82          1.11         23.71          0.89          0.04         26.58
iter,obj,time:     44         48.66          0.84          1.12         23.72          0.72          0.04         26.44
iter,obj,time:     45         48.44          0.83          1.12         23.71          0.56          0.04         26.26
iter,obj,time:     46         47.25          0.83          1.12         23.79          0.53          0.04         26.31
iter,obj,time:     47         48.18          0.82          1.11         23.81          0.48          0.04         26.26
iter,obj,time:     48         48.27          0.83          1.12         23.76          0.60          0.04         26.36
iter,obj,time:     49         47.57          0.83          1.12         23.74          0.54          0.04         26.27
iter,obj,time:     50         47.63          0.82          1.11         23.73          0.60          0.04         26.30
iter,obj,time:     51         48.43          0.82          1.11         23.79          0.69          0.04         26.45
iter,obj,time:     52         47.97          0.84          1.12         23.73          0.61          0.04         26.33
iter,obj,time:     53         56.58          0.83          1.12         23.72          0.74          0.04         26.45
iter,obj,time:     54         53.34          0.83          1.12         23.74          0.82          0.04         26.55
iter,obj,time:     55         50.67          0.83          1.12         23.78          0.56          0.04         26.33
iter,obj,time:     56         51.62          0.83          1.12         23.73          0.56          0.04         26.29
iter,obj,time:     57         48.30          0.82          1.12         23.77          0.55          0.04         26.31
iter,obj,time:     58         49.41          0.83          1.12         23.66          0.68          0.04         26.33
iter,obj,time:     59         48.82          0.83          1.12         23.73          0.53          0.04         26.25
iter,obj,time:     60         47.82          0.83          1.12         23.82          0.79          0.04         26.59
iter,obj,time:     61         47.69          0.83          1.11         23.77          0.71          0.04         26.47
iter,obj,time:     62         47.64          0.83          1.11         23.80          0.59          0.04         26.38
iter,obj,time:     63         48.41          0.83          1.11         23.74          0.55          0.04         26.28
iter,obj,time:     64         50.99          0.84          1.10         23.71          0.64          0.04         26.34
iter,obj,time:     65         47.65          0.83          1.10         23.74          0.57          0.04         26.29
iter,obj,time:     66         49.50          0.83          1.11         23.80          0.78          0.04         26.57
iter,obj,time:     67         51.52          0.84          1.12         23.74          0.67          0.04         26.41
iter,obj,time:     68         47.72          0.84          1.11         23.76          0.68          0.04         26.43
iter,obj,time:     69         47.81          0.83          1.11         23.69          0.68          0.04         26.34
iter,obj,time:     70         47.77          0.83          1.12         23.90          0.54          0.04         26.42
iter,obj,time:     71         48.06          0.84          1.12         23.89          0.47          0.04         26.35

    1    47.733        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    2    48.521       0.1627     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    3    47.450        1.163     -2.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    4    47.710        1.163     -1.836      2.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    5    48.592        1.163     -1.836      3.211     -102.6      2.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    6    48.163        1.163     -1.836      3.211     -102.6      1.360    
                       1.322      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    7    47.876        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      2.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    8    48.176        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      2.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    9    49.054        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731     -1.022    

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   10    47.760        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       3.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   11    48.099        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209    -0.8658E-01  1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   12    48.747        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530     0.1382E+05  3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   13    47.743        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      6899.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   14    47.730        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                      0.8217      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   15    47.658        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      9161.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   16    47.738        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.     -1480.    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   17    47.741        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -3.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   18    47.748        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -2.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   19    47.733        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -6.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   20    47.734        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      8.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   21    47.733        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -12.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   22    47.767        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -2.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   23    50.940        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603     0.4286E+05  0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   24    52.613        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.5651E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   25    47.943        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       6858.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   26    50.867        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.5545E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   27    48.877        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05-0.1773E+05 0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   28    52.428        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.5314E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   29    52.496        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05 0.2653E+05

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   30    52.252        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                      0.2559E+05 0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   31    48.229        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.3175     0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   32    48.214        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.4832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   33    48.240        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832     0.3000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   34    48.224        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.4109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   35    47.134        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486     0.2079     0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   36    49.531        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.4799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   37    48.259        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.4094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   38    47.723        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.3570    



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   39    47.799        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                      0.3114E-01-0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   40    48.515        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.2886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   41    48.831        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.3829    -0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   42    47.777        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01 0.2215    

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   43    48.657        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                      0.3000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   44    48.442        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.3996    -0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   45    47.249        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116     0.1478     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   46    48.182        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.3407    

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   47    48.272        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.3452    -0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   48    47.566        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01 0.2700    -0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   49    47.634        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.3685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   50    48.428        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685    -0.9115      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   51    47.975        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211     0.1418E+05



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   52    56.579        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                     -0.6415E-01 -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   53    53.335        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064    -0.2185     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   54    50.673        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -1.759     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   55    51.623        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -1.827    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   56    48.301        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.515      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   57    49.408        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.975    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   58    48.818        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.2908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   59    47.823        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                      0.4109     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   60    47.692        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -1.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   61    47.636        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.593      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   62    48.412        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      9.164    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   63    50.989        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000      1.455    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   64    47.651        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546     0.5244      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   65    49.501        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      9.155      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   66    51.523        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.378    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   67    47.716        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000     0.2180    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   68    47.808        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820     0.2984      9.034    

                       8.767    -0.1908E+05 -7.000    

   69    47.767        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.334    

                       8.767    -0.1908E+05 -7.000    

   70    48.055        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       9.067    -0.1908E+05 -7.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          70          70

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        1
neval is:       70


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       70     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -21.1350       21.1350       47.7330       68.8680    
   2  0.709707     -0.342904      -4.91035       4.91035       48.5211       53.4315    
   3  0.151889      -1.88460      -26.9873       26.9873       47.4504       74.4377    
   4  0.456170E-01  -3.08747      -44.2123       44.2123       47.7096       91.9219    
   5  0.882557     -0.124932      -1.78901       1.78901       48.5919       50.3809    
   6  0.711292     -0.340672      -4.87839       4.87839       48.1631       53.0415    
   7  0.241669      -1.42019      -20.3369       20.3369       47.8763       68.2133    
   8  0.682871     -0.381450      -5.46232       5.46232       48.1762       53.6385    
   9  0.500657     -0.691834      -9.90699       9.90699       49.0544       58.9614    
  10  0.494633     -0.703939      -10.0803       10.0803       47.7601       57.8405    
  11  0.437126     -0.827535      -11.8502       11.8502       48.0987       59.9489    
  12  0.462981     -0.770069      -11.0273       11.0273       48.7468       59.7741    
  13  0.988878     -0.111840E-01 -0.160154      0.160154       47.7426       47.9028    
  14  0.878158     -0.129929      -1.86057       1.86057       47.7297       49.5903    
  15  0.825605     -0.191638      -2.74424       2.74424       47.6585       50.4027    
  16  0.966665     -0.339033E-01 -0.485492      0.485492       47.7378       48.2233    
  17  0.340930      -1.07608      -15.4093       15.4093       47.7414       63.1507    
  18  0.288920      -1.24161      -17.7797       17.7797       47.7477       65.5274    
  19  0.442843     -0.814539      -11.6641       11.6641       47.7330       59.3971    
  20  0.878635     -0.129386      -1.85279       1.85279       47.7345       49.5873    
  21  0.198777E-01  -3.91816      -56.1076       56.1076       47.7330       103.841    
  22  0.315829      -1.15255      -16.5044       16.5044       47.7675       64.2719    
  23  0.208690      -1.56690      -22.4379       22.4379       50.9398       73.3777    
  24  0.849393     -0.163234      -2.33749       2.33749       52.6135       54.9510    
  25  0.945818     -0.557056E-01 -0.797698      0.797698       47.9426       48.7403    
  26  0.567839     -0.565917      -8.10388       8.10388       50.8673       58.9711    
  27  0.718388     -0.330745      -4.73624       4.73624       48.8766       53.6129    
  28  0.115406      -2.15930      -30.9209       30.9209       52.4276       83.3485    
  29  0.659869E-01  -2.71830      -38.9258       38.9258       52.4963       91.4221    
  30  0.171393      -1.76380      -25.2574       25.2574       52.2522       77.5096    
  31  0.161953      -1.82045      -26.0687       26.0687       48.2294       74.2981    
  32  0.455406     -0.786566      -11.2635       11.2635       48.2138       59.4773    
  33  0.788693     -0.237378      -3.39922       3.39922       48.2399       51.6391    
  34  0.157754      -1.84672      -26.4448       26.4448       48.2243       74.6691    
  35  0.126279      -2.06926      -29.6316       29.6316       47.1344       76.7660    
  36  0.646962     -0.435467      -6.23585       6.23585       49.5314       55.7672    
  37  0.730769     -0.313658      -4.49155       4.49155       48.2589       52.7504    
  38  0.443446E-01  -3.11577      -44.6174       44.6174       47.7233       92.3407    
  39  0.219048      -1.51847      -21.7443       21.7443       47.7987       69.5430    
  40  0.311223E-01  -3.46983      -49.6876       49.6876       48.5148       98.2024    
  41  0.864417     -0.145700      -2.08641       2.08641       48.8308       50.9172    
  42  0.372606     -0.987233      -14.1371       14.1371       47.7774       61.9144    
  43  0.599250E-01  -2.81466      -40.3057       40.3057       48.6567       88.9624    
  44  0.250528      -1.38418      -19.8214       19.8214       48.4424       68.2637    
  45  0.404968E-01  -3.20653      -45.9172       45.9172       47.2490       93.1662    
  46  0.792822     -0.232156      -3.32445       3.32445       48.1819       51.5064    
  47  0.826691     -0.190324      -2.72542       2.72542       48.2724       50.9978    
  48  0.258424      -1.35316      -19.3770       19.3770       47.5660       66.9430    
  49  0.713620     -0.337405      -4.83161       4.83161       47.6345       52.4661    
  50  0.936186     -0.659413E-01 -0.944272      0.944272       48.4284       49.3727    
  51  0.655367E-01  -2.72514      -39.0238       39.0238       47.9746       86.9984    
  52  0.178790      -1.72154      -24.6523       24.6523       56.5794       81.2317    
  53  0.110644E-01  -4.50403      -64.4972       64.4972       53.3352       117.832    
  54  0.459577     -0.777448      -11.1330       11.1330       50.6725       61.8055    
  55  0.210706      -1.55729      -22.3003       22.3003       51.6227       73.9230    
  56  0.667378     -0.404399      -5.79095       5.79095       48.3006       54.0916    
  57  0.787749     -0.238575      -3.41637       3.41637       49.4081       52.8245    
  58  0.774339E-01  -2.55833      -36.6350       36.6350       48.8185       85.4535    
  59  0.154999      -1.86434      -26.6971       26.6971       47.8226       74.5198    
  60  0.510712     -0.671950      -9.62226       9.62226       47.6925       57.3147    
  61  0.628107     -0.465044      -6.65939       6.65939       47.6364       54.2958    
  62  0.850273     -0.162197      -2.32265       2.32265       48.4120       50.7346    
  63  0.355976      -1.03289      -14.7909       14.7909       50.9894       65.7803    
  64  0.531318     -0.632394      -9.05581       9.05581       47.6508       56.7067    
  65  0.404575     -0.904917      -12.9583       12.9583       49.5005       62.4589    
  66  0.240103      -1.42669      -20.4300       20.4300       51.5232       71.9532    
  67  0.288602      -1.24271      -17.7955       17.7955       47.7162       65.5117    
  68  0.870493     -0.138695      -1.98610       1.98610       47.8083       49.7944    
  69  0.453038     -0.791780      -11.3382       11.3382       47.7672       59.1054    
  70  0.259221      -1.35008      -19.3329       19.3329       48.0552       67.3882    
loop,thermsimp(1:2)        1   21.1350       4.91035    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     72         48.07          0.83          1.11         23.92          0.35          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     73         48.71          0.84          1.11         23.89          0.39          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        1
neval is:       72
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        2
neval is:       72


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       72     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -14.9220       14.9220       47.7426       62.6646    
   2  0.440787     -0.819193      -11.7308       11.7308       47.7378       59.4685    
   3  0.685789     -0.377185      -5.40125       5.40125       47.9426       53.3438    
   4  0.673104     -0.395856      -5.66862       5.66862       48.4284       54.0971    
   5  0.655536     -0.422301      -6.04731       6.04731       47.7345       53.7818    
   6  0.422838     -0.860766      -12.3261       12.3261       47.7297       60.0558    
   7  0.300870      -1.20108      -17.1993       17.1993       47.8083       65.0076    
   8  0.776987     -0.252331      -3.61336       3.61336       48.5919       52.2052    
   9  0.170551      -1.76872      -25.3279       25.3279       47.6585       72.9864    
  10  0.587497     -0.531884      -7.61653       7.61653       48.4120       56.0285    
  11  0.250425      -1.38459      -19.8273       19.8273       48.8308       68.6581    
  12  0.776362E-01  -2.55572      -36.5977       36.5977       48.2724       84.8701    
  13  0.766647     -0.265729      -3.80521       3.80521       48.1819       51.9872    
  14  0.480193     -0.733568      -10.5046       10.5046       48.2399       58.7445    
  15  0.434643     -0.833231      -11.9318       11.9318       47.6345       59.5662    
  16  0.815924E-01  -2.50602      -35.8859       35.8859       48.2589       84.1448    
  17  0.724257E-01  -2.62519      -37.5925       37.5925       49.4081       87.0006    
  18  0.573795     -0.555483      -7.95446       7.95446       48.1631       56.1175    
  19  0.196096      -1.62915      -23.3293       23.3293       48.5211       71.8504    
  20  0.240673      -1.42432      -20.3960       20.3960       48.8766       69.2727    
  21  0.194228      -1.63872      -23.4664       23.4664       48.1762       71.6426    
  22  0.236387      -1.44229      -20.6534       20.6534       48.3006       68.9540    
  23  0.261662      -1.34070      -19.1987       19.1987       47.6364       66.8351    
  24  0.146321      -1.92195      -27.5222       27.5222       52.6135       80.1357    
  25  0.169637      -1.77410      -25.4049       25.4049       49.5314       74.9363    
  26  0.886717     -0.120229      -1.72167       1.72167       47.6508       49.3725    
  27  0.253412      -1.37274      -19.6575       19.6575       47.6925       67.3500    
  28  0.470820     -0.753279      -10.7869       10.7869       47.7601       58.5470    
  29  0.329871      -1.10905      -15.8816       15.8816       49.0544       64.9359    
  30  0.726784     -0.319126      -4.56985       4.56985       50.8673       55.4371    
  31  0.612351     -0.490450      -7.02320       7.02320       47.7672       54.7904    
  32  0.146573      -1.92023      -27.4975       27.4975       47.7330       75.2305    
  33  0.812633     -0.207476      -2.97103       2.97103       48.2138       51.1848    
  34  0.486789     -0.719925      -10.3093       10.3093       48.7468       59.0561    
  35  0.653508     -0.425400      -6.09169       6.09169       48.0987       54.1904    
  36  0.180127      -1.71409      -24.5457       24.5457       50.6725       75.2182    
  37  0.155218      -1.86292      -26.6769       26.6769       47.7774       74.4543    
  38  0.830615     -0.185589      -2.65761       2.65761       49.5005       52.1581    
  39  0.728345     -0.316980      -4.53912       4.53912       47.7414       52.2805    
  40  0.262318      -1.33820      -19.1629       19.1629       47.7675       66.9303    
  41  0.234222      -1.45148      -20.7851       20.7851       47.7162       68.5013    
  42  0.250201      -1.38549      -19.8401       19.8401       47.7477       67.5878    
  43  0.898433     -0.107103      -1.53371       1.53371       50.9894       52.5231    
  44  0.580277     -0.544250      -7.79361       7.79361       47.5660       55.3596    
  45  0.823617     -0.194050      -2.77877       2.77877       48.0552       50.8340    
  46  0.820676     -0.197627      -2.83000       2.83000       47.8763       50.7063    
  47  0.502494     -0.688171      -9.85454       9.85454       48.4424       58.2969    
  48  0.751016     -0.286329      -4.10020       4.10020       47.7330       51.8332    
  49  0.360461      -1.02037      -14.6116       14.6116       47.7987       62.4103    
  50  0.948712     -0.526497E-01 -0.753939      0.753939       51.5232       52.2771    
  51  0.452918     -0.792045      -11.3420       11.3420       50.9398       62.2818    
  52  0.182886      -1.69889      -24.3280       24.3280       51.6227       75.9507    
  53  0.986780     -0.133085E-01 -0.190577      0.190577       48.2294       48.4200    
  54  0.720276     -0.328121      -4.69866       4.69866       47.4504       52.1491    
  55  0.999574     -0.426396E-03 -0.610595E-02  0.610595E-02   47.8226       47.8287    
  56  0.573447     -0.556089      -7.96314       7.96314       48.2243       56.1874    
  57  0.441160E-01  -3.12093      -44.6915       44.6915       47.1344       91.8259    
  58  0.596470     -0.516726      -7.39946       7.39946       52.2522       59.6517    
  59  0.561679E-01  -2.87941      -41.2329       41.2329       56.5794       97.8123    
  60  0.664610     -0.408554      -5.85046       5.85046       52.4276       58.2781    
  61  0.875363     -0.133117      -1.90622       1.90622       48.8185       50.7247    
  62  0.969943     -0.305184E-01 -0.437020      0.437020       47.9746       48.4116    
  63  0.692714     -0.367138      -5.25738       5.25738       48.6567       53.9141    
  64  0.107969      -2.22591      -31.8748       31.8748       52.4963       84.3711    
  65  0.530030     -0.634822      -9.09059       9.09059       47.7096       56.8002    
  66  0.246082      -1.40209      -20.0778       20.0778       47.7233       67.8010    
  67  0.561065     -0.577919      -8.27574       8.27574       47.2490       55.5247    
  68  0.888085     -0.118688      -1.69960       1.69960       48.5148       50.2144    
  69  0.180192      -1.71373      -24.5405       24.5405       47.7330       72.2735    
  70  0.259121      -1.35046      -19.3384       19.3384       48.0744       67.4128    
loop,thermsimp(1:2)        2   14.9220       11.7308    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     74         49.64          0.84          1.12         23.86          0.41          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     75         51.90          0.84          1.12         23.86          0.44          0.04         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.64
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        2
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        3
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       74     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -25.5524       25.5524       47.8226       73.3751    
   2  0.274399      -1.29317      -18.5181       18.5181       47.9746       66.4927    
   3  0.597410E-01  -2.81774      -40.3497       40.3497       48.2294       88.5791    
   4  0.283115E-01  -3.56449      -51.0431       51.0431       47.6508       98.6939    
   5  0.901069     -0.104174      -1.49176       1.49176       48.5148       50.0065    
   6  0.717939     -0.331371      -4.74520       4.74520       47.8763       52.6215    
   7  0.294866      -1.22123      -17.4879       17.4879       48.8185       66.3064    
   8  0.935651     -0.665127E-01 -0.952456      0.952456       48.0552       49.0077    
   9  0.314362      -1.15721      -16.5711       16.5711       48.2138       64.7849    
  10  0.807729     -0.213529      -3.05772       3.05772       47.7330       50.7907    
  11  0.757191     -0.278140      -3.98293       3.98293       48.1819       52.1649    
  12  0.508654     -0.675987      -9.68007       9.68007       47.4504       57.1305    
  13  0.722060     -0.325647      -4.66323       4.66323       49.5005       54.1638    
  14  0.424032     -0.857947      -12.2857       12.2857       48.5919       60.8776    
  15  0.786154     -0.240602      -3.44540       3.44540       51.5232       54.9686    
  16  0.399894     -0.916557      -13.1250       13.1250       47.7414       60.8664    
  17  0.757416     -0.277843      -3.97869       3.97869       50.9894       54.9681    
  18  0.637270     -0.450563      -6.45201       6.45201       47.9426       54.3946    
  19  0.586055     -0.534342      -7.65172       7.65172       47.7345       55.3862    
  20  0.821724     -0.196351      -2.81173       2.81173       48.6567       51.4685    
  21  0.921558     -0.816897E-01  -1.16979       1.16979       48.4284       49.5982    
  22  0.985596     -0.145083E-01 -0.207758      0.207758       48.0987       48.3065    
  23  0.257194      -1.35793      -19.4454       19.4454       47.7672       67.2125    
  24  0.921438E-01  -2.38440      -34.1444       34.1444       47.5660       81.7104    
  25  0.114653      -2.16584      -31.0147       31.0147       50.8673       81.8819    
  26  0.379827     -0.968040      -13.8622       13.8622       47.2490       61.1112    
  27  0.541451     -0.613503      -8.78530       8.78530       48.4120       57.1973    
  28  0.544274     -0.608302      -8.71083       8.71083       48.1631       56.8739    
  29  0.934365     -0.678883E-01 -0.972154      0.972154       48.2243       49.1964    
  30  0.266419E-01  -3.62527      -51.9135       51.9135       47.7096       99.6231    
  31  0.919572     -0.838466E-01  -1.20067       1.20067       52.4276       53.6283    
  32  0.864639     -0.145444      -2.08274       2.08274       48.4424       50.5251    
  33  0.341156      -1.07542      -15.3999       15.3999       47.7601       63.1600    
  34  0.803175     -0.219182      -3.13867       3.13867       48.2399       51.3785    
  35  0.699424     -0.357498      -5.11934       5.11934       48.7468       53.8661    
  36  0.223868E-01  -3.79928      -54.4054       54.4054       47.7378       102.143    
  37  0.605689     -0.501389      -7.17984       7.17984       47.6345       54.8143    
  38  0.312349      -1.16363      -16.6631       16.6631       52.2522       68.9154    
  39  0.437501     -0.826675      -11.8379       11.8379       47.7297       59.5676    
  40  0.303330      -1.19293      -17.0827       17.0827       50.9398       68.0225    
  41  0.129735      -2.04226      -29.2449       29.2449       47.7987       77.0437    
  42  0.954352     -0.467224E-01 -0.669060      0.669060       47.7426       48.4117    
  43  0.519807     -0.654297      -9.36947       9.36947       49.0544       58.4238    
  44  0.950560     -0.507036E-01 -0.726070      0.726070       47.8083       48.5343    
  45  0.443941     -0.812064      -11.6287       11.6287       47.6364       59.2651    
  46  0.911446     -0.927229E-01  -1.32778       1.32778       47.7675       49.0953    
  47  0.782475     -0.245293      -3.51257       3.51257       47.6925       51.2050    
  48  0.412534     -0.885438      -12.6794       12.6794       48.0744       60.7537    
  49  0.843850     -0.169780      -2.43124       2.43124       47.7477       50.1789    
  50  0.149432      -1.90091      -27.2209       27.2209       47.7233       74.9442    
  51  0.292747      -1.22845      -17.5912       17.5912       47.7162       65.3075    
  52  0.579908E-02  -5.15006      -73.7483       73.7483       48.8308       122.579    
  53  0.164431      -1.80526      -25.8512       25.8512       48.3006       74.1518    
  54  0.963795     -0.368765E-01 -0.528068      0.528068       48.8766       49.4047    
  55  0.536638     -0.622432      -8.91316       8.91316       48.1762       57.0894    
  56  0.231620      -1.46266      -20.9451       20.9451       48.5211       69.4663    
  57  0.452632E-01  -3.09526      -44.3238       44.3238       47.7330       92.0568    
  58  0.241294      -1.42174      -20.3592       20.3592       47.6585       68.0177    
  59  0.757653     -0.277529      -3.97419       3.97419       47.7774       51.7516    
  60  0.504715     -0.683762      -9.79140       9.79140       49.5314       59.3228    
  61  0.878562     -0.129469      -1.85399       1.85399       50.6725       52.5265    
  62  0.874452     -0.134158      -1.92113       1.92113       47.7330       49.6541    
  63  0.370953     -0.991680      -14.2008       14.2008       51.6227       65.8235    
  64  0.757717     -0.277446      -3.97299       3.97299       52.6135       56.5865    
  65  0.642844     -0.441853      -6.32730       6.32730       48.2589       54.5862    
  66  0.616137     -0.484286      -6.93493       6.93493       52.4963       59.4312    
  67  0.551578     -0.594972      -8.51994       8.51994       48.2724       56.7923    
  68  0.483778E-01  -3.02871      -43.3709       43.3709       49.4081       92.7790    
  69  0.839664     -0.174753      -2.50245       2.50245       47.1344       49.6369    
  70  0.334065      -1.09642      -15.7006       15.7006       49.6360       65.3366    
loop,thermsimp(1:2)        3   25.5524       18.5181    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76         47.62          0.84          1.11         23.87          0.46          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77         51.10          0.84          1.11         23.85          0.68          0.04         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        3
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        4
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       76     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -1.77799       1.77799       48.0987       49.8767    
   2  0.114178      -2.16999      -31.0741       31.0741       47.7426       78.8167    
   3  0.217017      -1.52778      -21.8776       21.8776       47.8083       69.6859    
   4  0.138317      -1.97821      -28.3277       28.3277       48.0552       76.3829    
   5  0.832728     -0.183048      -2.62123       2.62123       47.7675       50.3887    
   6  0.390825     -0.939496      -13.4535       13.4535       48.2243       61.6777    
   7  0.283633      -1.26007      -18.0441       18.0441       48.8766       66.9208    
   8  0.725809     -0.320468      -4.58907       4.58907       48.4284       53.0175    
   9  0.506121     -0.680979      -9.75156       9.75156       47.1344       56.8860    
  10  0.216234      -1.53139      -21.9294       21.9294       47.7330       69.6624    
  11  0.637942     -0.449509      -6.43692       6.43692       48.5148       54.9517    
  12  0.536707     -0.622302      -8.91131       8.91131       47.7477       56.6590    
  13  0.231844      -1.46169      -20.9313       20.9313       48.4424       69.3736    
  14  0.491379     -0.710540      -10.1749       10.1749       47.7330       57.9079    
  15  0.825774     -0.191434      -2.74132       2.74132       47.6925       50.4338    
  16  0.671593     -0.398102      -5.70079       5.70079       48.2399       53.9406    
  17  0.549103     -0.599470      -8.58434       8.58434       48.6567       57.2411    
  18  0.659287     -0.416597      -5.96563       5.96563       47.7774       53.7430    
  19  0.205012      -1.58469      -22.6925       22.6925       48.1819       70.8745    
  20  0.400541E-02  -5.52011      -79.0474       79.0474       50.6725       129.720    
  21  0.750831     -0.286575      -4.10372       4.10372       47.8763       51.9801    
  22  0.619921     -0.478162      -6.84724       6.84724       52.4276       59.2748    
  23  0.435226     -0.831889      -11.9126       11.9126       48.7468       60.6594    
  24  0.460974     -0.774414      -11.0895       11.0895       49.5005       60.5901    
  25  0.891582E-01  -2.41734      -34.6161       34.6161       47.9426       82.5587    
  26  0.589618E-01  -2.83087      -40.5377       40.5377       48.2589       88.7966    
  27  0.541391     -0.613613      -8.78688       8.78688       47.6345       56.4213    
  28  0.545108E-01  -2.90936      -41.6617       41.6617       50.9894       92.6511    
  29  0.744722     -0.294744      -4.22071       4.22071       51.5232       55.7439    
  30  0.712477     -0.339008      -4.85456       4.85456       47.7345       52.5891    
  31  0.563836     -0.572992      -8.20518       8.20518       52.6135       60.8187    
  32  0.161455      -1.82353      -26.1127       26.1127       48.2724       74.3851    
  33  0.640738     -0.445135      -6.37429       6.37429       48.1631       54.5374    
  34  0.157494      -1.84837      -26.4684       26.4684       48.1762       74.6446    
  35  0.695323     -0.363378      -5.20354       5.20354       47.4504       52.6539    
  36  0.792798     -0.232186      -3.32489       3.32489       48.4120       51.7368    
  37  0.940634     -0.612017E-01 -0.876402      0.876402       49.0544       49.9308    
  38  0.750008     -0.287672      -4.11943       4.11943       47.6364       51.7559    
  39  0.298939E-01  -3.51010      -50.2643       50.2643       49.5314       99.7957    
  40  0.633510     -0.456480      -6.53674       6.53674       52.4963       59.0331    
  41  0.465723     -0.764164      -10.9428       10.9428       47.7297       58.6725    
  42  0.916259     -0.874560E-01  -1.25236       1.25236       48.0744       49.3267    
  43  0.451376     -0.795456      -11.3908       11.3908       47.7414       59.1322    
  44  0.414090     -0.881672      -12.6255       12.6255       48.5919       61.2173    
  45  0.273092      -1.29795      -18.5865       18.5865       47.2490       65.8354    
  46  0.361379      -1.01783      -14.5752       14.5752       47.7601       62.3353    
  47  0.548848     -0.599934      -8.59099       8.59099       48.2138       56.8047    
  48  0.832309     -0.183552      -2.62845       2.62845       47.7162       50.3447    
  49  0.673017     -0.395985      -5.67046       5.67046       49.6360       55.3064    
  50  0.692516     -0.367425      -5.26148       5.26148       51.6227       56.8842    
  51  0.354468E-01  -3.33972      -47.8245       47.8245       48.8185       96.6430    
  52  0.987850     -0.122240E-01 -0.175046      0.175046       47.9746       48.1497    
  53  0.659676     -0.416007      -5.95718       5.95718       47.7672       53.7244    
  54  0.276145      -1.28683      -18.4273       18.4273       47.6585       66.0858    
  55  0.426927     -0.851141      -12.1883       12.1883       50.9398       63.1280    
  56  0.221817      -1.50590      -21.5643       21.5643       52.2522       73.8166    
  57  0.911956     -0.921634E-01  -1.31977       1.31977       48.5211       49.8409    
  58  0.791973     -0.233228      -3.33980       3.33980       47.8226       51.1624    
  59  0.805447     -0.216358      -3.09822       3.09822       48.3006       51.3988    
  60  0.887840     -0.118963      -1.70354       1.70354       47.7233       49.4268    
  61  0.978176     -0.220657E-01 -0.315978      0.315978       47.7987       48.1147    
  62  0.539899     -0.616372      -8.82639       8.82639       47.5660       56.3924    
  63  0.313742      -1.15918      -16.5994       16.5994       50.8673       67.4667    
  64  0.355768      -1.03348      -14.7993       14.7993       48.2294       63.0287    
  65  0.413366     -0.883423      -12.6505       12.6505       47.7330       60.3835    
  66  0.352288      -1.04331      -14.9400       14.9400       49.4081       64.3481    
  67  0.269512      -1.31114      -18.7754       18.7754       47.6508       66.4263    
  68  0.841976E-01  -2.47459      -35.4359       35.4359       47.7096       83.1455    
  69  0.964450     -0.361976E-01 -0.518345      0.518345       47.7378       48.2561    
  70  0.554883     -0.588998      -8.43439       8.43439       47.6184       56.0528    
loop,thermsimp(1:2)        4   1.77799       31.0741    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78         48.22          0.83          1.11         23.86          0.74          0.04         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     79         49.18          0.83          1.11         23.80          0.46          0.04         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        4
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        5
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       78     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01 -0.462931      0.462931       47.7987       48.2616    
   2  0.384676     -0.955353      -13.6806       13.6806       47.9746       61.6552    
   3  0.472770     -0.749146      -10.7277       10.7277       47.7378       58.4655    
   4  0.131186      -2.03114      -29.0857       29.0857       48.0744       77.1600    
   5  0.387497     -0.948046      -13.5759       13.5759       47.7233       61.2992    
   6  0.474858     -0.744739      -10.6646       10.6646       48.5211       59.1857    
   7  0.654056     -0.424563      -6.07969       6.07969       48.0987       54.1784    
   8  0.375266     -0.980119      -14.0352       14.0352       49.0544       63.0896    
   9  0.605577     -0.501574      -7.18249       7.18249       47.7162       54.8987    
  10  0.485605     -0.722360      -10.3441       10.3441       47.7675       58.1116    
  11  0.503843     -0.685490      -9.81616       9.81616       47.6925       57.5086    
  12  0.374521     -0.982108      -14.0637       14.0637       47.8226       61.8863    
  13  0.955542E-01  -2.34806      -33.6240       33.6240       48.3006       81.9246    
  14  0.902567     -0.102512      -1.46796       1.46796       48.4120       49.8799    
  15  0.347215      -1.05781      -15.1477       15.1477       47.6364       62.7842    
  16  0.893138     -0.113014      -1.61835       1.61835       47.8763       49.4947    
  17  0.561145     -0.577776      -8.27369       8.27369       47.7345       56.0082    
  18  0.667287     -0.404536      -5.79291       5.79291       47.4504       53.2433    
  19  0.601102     -0.508991      -7.28870       7.28870       48.4284       55.7171    
  20  0.569928     -0.562245      -8.05129       8.05129       47.7672       55.8185    
  21  0.655926     -0.421708      -6.03882       6.03882       47.7774       53.8162    
  22  0.355892      -1.03313      -14.7943       14.7943       48.2399       63.0341    
  23  0.208013      -1.57015      -22.4844       22.4844       48.1631       70.6475    
  24  0.879772     -0.128093      -1.83428       1.83428       48.5148       50.3490    
  25  0.114206E-01  -4.47233      -64.0434       64.0434       49.6360       113.679    
  26  0.950245     -0.510357E-01 -0.730826      0.730826       51.5232       52.2540    
  27  0.321268      -1.13548      -16.2600       16.2600       47.6184       63.8784    
  28  0.379005     -0.970207      -13.8933       13.8933       47.5660       61.4592    
  29  0.117960      -2.13741      -30.6075       30.6075       47.6345       78.2420    
  30  0.822558     -0.195337      -2.79720       2.79720       47.7477       50.5449    
  31  0.671085     -0.398860      -5.71164       5.71164       48.2138       53.9254    
  32  0.220279      -1.51286      -21.6640       21.6640       51.6227       73.2867    
  33  0.836335     -0.178727      -2.55935       2.55935       47.1344       49.6938    
  34  0.982442E-01  -2.32030      -33.2265       33.2265       48.6567       81.8832    
  35  0.912526     -0.915389E-01  -1.31083       1.31083       47.7330       49.0438    
  36  0.758802     -0.276015      -3.95250       3.95250       47.7297       51.6822    
  37  0.562651     -0.575096      -8.23531       8.23531       52.4963       60.7316    
  38  0.248142      -1.39375      -19.9584       19.9584       47.7414       67.6998    
  39  0.864881     -0.145163      -2.07872       2.07872       52.4276       54.5063    
  40  0.495151     -0.702893      -10.0654       10.0654       47.7330       57.7984    
  41  0.112352E-01  -4.48870      -64.2777       64.2777       49.5005       113.778    
  42  0.745500     -0.293700      -4.20575       4.20575       48.7468       52.9526    
  43  0.405071     -0.903693      -12.9408       12.9408       52.6135       65.5543    
  44  0.617259     -0.482466      -6.90887       6.90887       48.5919       55.5007    
  45  0.992755     -0.727089E-02 -0.104118      0.104118       48.2243       48.3284    
  46  0.888739     -0.117952      -1.68906       1.68906       47.7601       49.4492    
  47  0.976701     -0.235748E-01 -0.337589      0.337589       48.2294       48.5670    
  48  0.461976     -0.772242      -11.0584       11.0584       50.9398       61.9982    
  49  0.150581      -1.89325      -27.1112       27.1112       49.4081       76.5193    
  50  0.726286E-01  -2.62240      -37.5525       37.5525       47.2490       84.8014    
  51  0.280837      -1.26998      -18.1860       18.1860       47.6585       65.8445    
  52  0.727959     -0.317510      -4.54671       4.54671       47.6508       52.1976    
  53  0.565225     -0.570532      -8.16996       8.16996       48.8766       57.0466    
  54  0.884775     -0.122422      -1.75308       1.75308       50.8673       52.6203    
  55  0.289837      -1.23844      -17.7343       17.7343       48.4424       66.1767    
  56  0.282389      -1.26447      -18.1071       18.1071       47.7330       65.8401    
  57  0.737455     -0.304550      -4.36113       4.36113       47.8083       52.1694    
  58  0.436668E-02  -5.43375      -77.8108       77.8108       48.1819       125.993    
  59  0.809492     -0.211348      -3.02649       3.02649       52.2522       55.2787    
  60  0.957786E-01  -2.34572      -33.5904       33.5904       48.2724       81.8628    
  61  0.335750      -1.09139      -15.6286       15.6286       48.1762       63.8048    
  62  0.687327     -0.374945      -5.36917       5.36917       48.0552       53.4244    
  63  0.340103      -1.07851      -15.4441       15.4441       47.7426       63.1867    
  64  0.902520     -0.102564      -1.46871       1.46871       47.9426       49.4113    
  65  0.872595     -0.136284      -1.95157       1.95157       47.7096       49.6612    
  66  0.773535     -0.256784      -3.67712       3.67712       48.2589       51.9360    
  67  0.627340     -0.466267      -6.67690       6.67690       50.9894       57.6663    
  68  0.918418     -0.851028E-01  -1.21866       1.21866       48.8185       50.0372    
  69  0.347451      -1.05713      -15.1380       15.1380       49.5314       64.6694    
  70  0.962049     -0.386898E-01 -0.554034      0.554034       48.2199       48.7739    
loop,thermsimp(1:2)        5  0.462931       13.6806    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     80         48.27          0.83          1.11         23.85          0.48          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     81         51.80          0.83          1.11         23.86          0.39          0.04         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    51.802        1.098     -1.901      3.146     -102.6      1.425    
                      0.3865      1.368     -99.70      3.666    -0.8742E-01

                       2.274     -1.022      1.530      7359.      3674.    

                     -0.1133      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6306.      390.5    

                       1.433     -5.780     -3.999     -8.381      6.749    

                      -14.76     -3.538     0.1080E+05  0.000     0.1424E+05



                       1728.     0.1397E+05 -4468.     0.1339E+05  6684.    

                       6449.     0.3697E-01 0.2027     0.1950E-01 0.1304    

                     -0.2486    -0.7259E-01 0.1994     0.1289     0.7654E-01



                     -0.4364    -0.7561      0.000     0.6604E-01-0.5900E-01

                      0.1950E-01 0.1191    -0.7116    -0.1327    -0.8572    

                      0.6465E-01-0.1052E-01-0.6490     -1.192      7550.    



                      -1.124     -1.282     -2.285     -2.295    -0.3807    

                     -0.3252      9.234      8.694    -0.1973E+05 -4.000    

                     -0.5241     -2.115      9.313      8.883    -0.1908E+05



                      -4.000     0.5196    -0.4106      8.874      9.097    

                     -0.1908E+05 -7.000    -0.7170    -0.6366      9.053    

                       8.787    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.27
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        5
neval is:       80
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        6
neval is:       80


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       80     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -3.08425       3.08425       47.7987       50.8830    
   2  0.337878      -1.08507      -15.5381       15.5381       48.2243       63.7624    
   3  0.930612     -0.719127E-01  -1.02978       1.02978       48.2294       49.2592    
   4  0.843645     -0.170024      -2.43472       2.43472       48.2199       50.6546    
   5  0.757799     -0.277337      -3.97143       3.97143       47.7330       51.7044    
   6  0.627925     -0.465335      -6.66355       6.66355       47.9426       54.6061    
   7  0.412314     -0.885971      -12.6870       12.6870       47.7601       60.4472    
   8  0.282274      -1.26488      -18.1129       18.1129       47.8763       65.9893    
   9  0.426609E-01  -3.15447      -45.1717       45.1717       47.7096       92.8814    
  10  0.484876     -0.723862      -10.3656       10.3656       47.1344       57.5001    
  11  0.372210     -0.988296      -14.1523       14.1523       48.4120       62.5643    
  12  0.740507     -0.300421      -4.30200       4.30200       48.8185       53.1205    
  13  0.361519      -1.01744      -14.5697       14.5697       48.5148       63.0844    
  14  0.421034     -0.865042      -12.3873       12.3873       47.7477       60.1350    
  15  0.780595     -0.247699      -3.54703       3.54703       47.7297       51.2767    
  16  0.758410     -0.276531      -3.95989       3.95989       48.2589       52.2188    
  17  0.522921E-01  -2.95091      -42.2567       42.2567       47.8083       90.0650    
  18  0.609673     -0.494833      -7.08596       7.08596       47.6508       54.7368    
  19  0.204029      -1.58949      -22.7614       22.7614       51.5232       74.2846    
  20  0.516385     -0.660902      -9.46405       9.46405       50.8673       60.3313    
  21  0.323918      -1.12726      -16.1423       16.1423       48.7468       64.8891    
  22  0.671820     -0.397765      -5.69596       5.69596       47.4504       53.1463    
  23  0.850344     -0.162114      -2.32145       2.32145       48.0552       50.3767    
  24  0.515631     -0.662364      -9.48498       9.48498       47.7774       57.2623    
  25  0.919408     -0.840249E-01  -1.20323       1.20323       48.2138       49.4170    
  26  0.516519     -0.660643      -9.46034       9.46034       48.0987       57.5591    
  27  0.986900     -0.131869E-01 -0.188835      0.188835       52.4276       52.6164    
  28  0.127351      -2.06081      -29.5106       29.5106       47.7162       77.2268    
  29  0.775028E-01  -2.55744      -36.6223       36.6223       52.2522       88.8745    
  30  0.778307     -0.250634      -3.58905       3.58905       48.5919       52.1809    
  31  0.548570     -0.600441      -8.59825       8.59825       48.4284       57.0267    
  32  0.191672      -1.65197      -23.6560       23.6560       47.7672       71.4232    
  33  0.593733     -0.521326      -7.46534       7.46534       47.7345       55.1998    
  34  0.612853     -0.489631      -7.01147       7.01147       48.8766       55.8881    
  35  0.872749     -0.136107      -1.94904       1.94904       47.6925       49.6415    
  36  0.291105E-01  -3.53666      -50.6446       50.6446       50.9894       101.634    
  37  0.310804      -1.16859      -16.7341       16.7341       47.7330       64.4671    
  38  0.238051      -1.43527      -20.5529       20.5529       47.7675       68.3204    
  39  0.600295     -0.510334      -7.30793       7.30793       47.7378       55.0457    
  40  0.856575     -0.154813      -2.21691       2.21691       48.5211       50.7381    
  41  0.127990      -2.05580      -29.4389       29.4389       52.4963       81.9352    
  42  0.390396E-01  -3.24318      -46.4420       46.4420       47.7233       94.1652    
  43  0.469298E-01  -3.05910      -43.8061       43.8061       47.5660       91.3720    
  44  0.170208      -1.77073      -25.3567       25.3567       47.9746       73.3314    
  45  0.457801     -0.781320      -11.1884       11.1884       47.8226       59.0111    
  46  0.451589     -0.794982      -11.3841       11.3841       50.9398       62.3238    
  47  0.601844     -0.507757      -7.27103       7.27103       47.6364       54.9075    
  48  0.923684     -0.793857E-01  -1.13680       1.13680       48.2399       49.3766    
  49  0.113154      -2.17901      -31.2031       31.2031       49.0544       80.2575    
  50  0.652894     -0.426340      -6.10515       6.10515       47.7426       53.8478    
  51  0.600010     -0.510809      -7.31473       7.31473       48.1762       55.4910    
  52  0.768679     -0.263082      -3.76731       3.76731       47.6184       51.3857    
  53  0.999310     -0.690144E-03 -0.988279E-02  0.988279E-02   49.5314       49.5413    
  54  0.798907     -0.224511      -3.21497       3.21497       52.6135       55.8285    
  55  0.246243      -1.40144      -20.0684       20.0684       47.7330       67.8014    
  56  0.798424     -0.225115      -3.22363       3.22363       47.6585       50.8821    
  57  0.120926      -2.11257      -30.2518       30.2518       48.4424       78.6942    
  58  0.771675     -0.259192      -3.71160       3.71160       47.7414       51.4530    
  59  0.670629     -0.399540      -5.72137       5.72137       48.1631       53.8844    
  60  0.127505      -2.05960      -29.4932       29.4932       51.6227       81.1159    
  61  0.375387     -0.979799      -14.0306       14.0306       49.4081       63.4387    
  62  0.572534E-01  -2.86027      -40.9588       40.9588       48.0744       89.0331    
  63  0.358654      -1.02540      -14.6836       14.6836       47.6345       62.3180    
  64  0.903087     -0.101937      -1.45973       1.45973       48.2724       49.7321    
  65  0.112925      -2.18103      -31.2321       31.2321       48.6567       79.8889    
  66  0.727950     -0.317523      -4.54690       4.54690       48.3006       52.8475    
  67  0.703618E-01  -2.65411      -38.0065       38.0065       47.2490       85.2555    
  68  0.461106     -0.774128      -11.0854       11.0854       49.6360       60.7214    
  69  0.546854     -0.603573      -8.64311       8.64311       49.5005       58.1436    
  70  0.264522      -1.32983      -19.0431       19.0431       48.2681       67.3112    
loop,thermsimp(1:2)        6   3.08425       15.5381    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     82         48.39          0.84          1.12         23.81          0.57          0.04         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     83         51.94          0.84          1.14         23.84          0.47          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        6
neval is:       82
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        7
neval is:       82


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       82     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -30.6373       30.6373       48.2294       78.8667    
   2  0.421875     -0.863045      -12.3587       12.3587       48.2399       60.5986    
   3  0.700103     -0.356528      -5.10545       5.10545       48.2138       53.3192    
   4  0.209367      -1.56367      -22.3916       22.3916       49.5314       71.9229    
   5  0.117251      -2.14344      -30.6938       30.6938       47.6925       78.3863    
   6  0.898330     -0.107218      -1.53535       1.53535       48.2724       49.8078    
   7  0.209806      -1.56157      -22.3616       22.3616       48.0552       70.4168    
   8  0.917155     -0.864790E-01  -1.23837       1.23837       48.2199       49.4583    
   9  0.120514E-01  -4.41857      -63.2735       63.2735       48.5211       111.795    
  10  0.189983      -1.66082      -23.7828       23.7828       47.6585       71.4413    
  11  0.257131      -1.35817      -19.4488       19.4488       47.7987       67.2475    
  12  0.913158E-01  -2.39343      -34.2737       34.2737       47.7297       82.0034    
  13  0.336531      -1.08906      -15.5953       15.5953       47.6184       63.2137    
  14  0.318351      -1.14460      -16.3906       16.3906       47.7414       64.1320    
  15  0.919606     -0.838101E-01  -1.20015       1.20015       47.7330       48.9332    
  16  0.719771E-01  -2.63141      -37.6815       37.6815       48.5919       86.2734    
  17  0.788730E-01  -2.53992      -36.3714       36.3714       48.2589       84.6302    
  18  0.905929     -0.987941E-01  -1.41472       1.41472       52.4276       53.8423    
  19  0.665501     -0.407215      -5.83128       5.83128       48.3006       54.1319    
  20  0.812159     -0.208059      -2.97939       2.97939       48.8185       51.7979    
  21  0.412726E-01  -3.18756      -45.6455       45.6455       47.4504       93.0959    
  22  0.256064      -1.36233      -19.5084       19.5084       47.7426       67.2510    
  23  0.277519      -1.28187      -18.3562       18.3562       48.1631       66.5193    
  24  0.279550      -1.27457      -18.2518       18.2518       47.9426       66.1943    
  25  0.857884     -0.153286      -2.19504       2.19504       47.6508       49.8459    
  26  0.205158      -1.58398      -22.6824       22.6824       47.6364       70.3188    
  27  0.482085     -0.729635      -10.4483       10.4483       47.7378       58.1861    
  28  0.494966E-01  -3.00585      -43.0435       43.0435       47.7345       90.7780    
  29  0.338791      -1.08237      -15.4995       15.4995       48.1762       63.6757    
  30  0.249491E-01  -3.69092      -52.8536       52.8536       52.6135       105.467    
  31  0.480710     -0.732491      -10.4892       10.4892       48.8766       59.3658    
  32  0.908951E-01  -2.39805      -34.3398       34.3398       48.4284       82.7683    
  33  0.283223      -1.26152      -18.0649       18.0649       47.7774       65.8422    
  34  0.277734      -1.28109      -18.3451       18.3451       47.1344       65.4795    
  35  0.504407     -0.684372      -9.80015       9.80015       48.0987       57.8989    
  36  0.251881      -1.37880      -19.7443       19.7443       49.5005       69.2448    
  37  0.568193     -0.565294      -8.09495       8.09495       47.8226       55.9176    
  38  0.186135      -1.68128      -24.0758       24.0758       47.7477       71.8234    
  39  0.964582     -0.360604E-01 -0.516382      0.516382       50.8673       51.3837    
  40  0.493045     -0.707155      -10.1264       10.1264       47.7601       57.8865    
  41  0.477950     -0.738248      -10.5716       10.5716       49.6360       60.2076    
  42  0.114879      -2.16388      -30.9865       30.9865       47.6345       78.6209    
  43  0.324003      -1.12700      -16.1385       16.1385       50.9398       67.0783    
  44  0.720573     -0.327708      -4.69275       4.69275       48.4120       53.1047    
  45  0.934913     -0.673019E-01 -0.963757      0.963757       48.5148       49.4785    
  46  0.516467     -0.660745      -9.46180       9.46180       49.4081       58.8699    
  47  0.351513      -1.04551      -14.9716       14.9716       48.2243       63.1958    
  48  0.310221      -1.17047      -16.7610       16.7610       47.7330       64.4940    
  49  0.467571     -0.760204      -10.8860       10.8860       48.7468       59.6328    
  50  0.700644     -0.355756      -5.09438       5.09438       47.8763       52.9707    
  51  0.608579E-01  -2.79921      -40.0845       40.0845       48.2681       88.3526    
  52  0.360106      -1.02136      -14.6257       14.6257       47.7330       62.3587    
  53  0.355744      -1.03354      -14.8003       14.8003       47.7675       62.5677    
  54  0.356778      -1.03064      -14.7587       14.7587       47.7672       62.5259    
  55  0.209214      -1.56440      -22.4020       22.4020       47.9746       70.3767    
  56  0.513034     -0.667413      -9.55729       9.55729       51.5232       61.0805    
  57  0.131750      -2.02685      -29.0243       29.0243       47.7162       76.7405    
  58  0.860948     -0.149721      -2.14399       2.14399       48.4424       50.5863    
  59  0.245301      -1.40527      -20.1233       20.1233       48.6567       68.7800    
  60  0.411604     -0.887695      -12.7117       12.7117       49.0544       61.7661    
  61  0.444838     -0.810046      -11.5998       11.5998       51.6227       63.2225    
  62  0.173997      -1.74872      -25.0415       25.0415       52.4963       77.5378    
  63  0.616177     -0.484222      -6.93401       6.93401       47.2490       54.1830    
  64  0.794601     -0.229915      -3.29236       3.29236       52.2522       55.5446    
  65  0.926158     -0.767101E-01  -1.09848       1.09848       48.0744       49.1728    
  66  0.614053     -0.487673      -6.98343       6.98343       47.8083       54.7917    
  67  0.228742      -1.47516      -21.1241       21.1241       47.5660       68.6901    
  68  0.162916      -1.81452      -25.9838       25.9838       47.7096       73.6934    
  69  0.437909     -0.825744      -11.8246       11.8246       47.7233       59.5478    
  70  0.966188     -0.343970E-01 -0.492562      0.492562       48.3863       48.8788    
loop,thermsimp(1:2)        7   30.6373       12.3587    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     84         47.40          0.84          1.11         23.90          0.50          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     85         47.68          0.84          1.11         23.89          0.42          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        7
neval is:       84
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        8
neval is:       84


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       84     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -10.2913       10.2913       48.3863       58.6775    
   2  0.568497     -0.564760      -8.08731       8.08731       47.7330       55.8203    
   3  0.632037E-01  -2.76139      -39.5429       39.5429       48.0744       87.6172    
   4  0.184325      -1.69105      -24.2157       24.2157       48.2199       72.4356    
   5  0.949772     -0.515332E-01 -0.737950      0.737950       48.5148       49.2527    
   6  0.512179     -0.669081      -9.58118       9.58118       48.2724       57.8536    
   7  0.573767     -0.555532      -7.95516       7.95516       47.6508       55.6060    
   8  0.590189     -0.527312      -7.55106       7.55106       48.4424       55.9934    
   9  0.323917      -1.12727      -16.1424       16.1424       50.8673       67.0096    
  10  0.246420E-01  -3.70330      -53.0309       53.0309       48.8185       101.849    
  11  0.923153E-01  -2.38255      -34.1178       34.1178       47.8763       81.9942    
  12  0.236043      -1.44374      -20.6742       20.6742       48.4120       69.0862    
  13  0.885388     -0.121730      -1.74315       1.74315       48.2138       49.9569    
  14  0.617726     -0.481710      -6.89804       6.89804       52.4276       59.3256    
  15  0.349992      -1.04985      -15.0337       15.0337       48.3006       63.3343    
  16  0.892028     -0.114257      -1.63615       1.63615       47.2490       48.8851    
  17  0.382423     -0.961227      -13.7647       13.7647       47.8083       61.5729    
  18  0.850527     -0.161899      -2.31838       2.31838       52.2522       54.5706    
  19  0.653461     -0.425472      -6.09272       6.09272       47.8226       53.9154    
  20  0.413959     -0.881988      -12.6300       12.6300       47.7601       60.3901    
  21  0.807813     -0.213424      -3.05622       3.05622       48.0987       51.1549    
  22  0.348045      -1.05542      -15.1136       15.1136       47.7378       62.8513    
  23  0.435267     -0.831795      -11.9112       11.9112       49.4081       61.3193    
  24  0.434284     -0.834056      -11.9436       11.9436       48.8766       60.8202    
  25  0.983564     -0.165728E-01 -0.237321      0.237321       47.7233       47.9606    
  26  0.545923     -0.605277      -8.66751       8.66751       48.7468       57.4143    
  27  0.227140      -1.48219      -21.2248       21.2248       49.6360       70.8607    
  28  0.965085     -0.355395E-01 -0.508923      0.508923       48.2399       48.7488    
  29  0.183882      -1.69346      -24.2502       24.2502       51.5232       75.7734    
  30  0.187300E-02  -6.28022      -89.9321       89.9321       49.0544       138.986    
  31  0.428736     -0.846914      -12.1277       12.1277       47.7330       59.8607    
  32  0.459764     -0.777041      -11.1272       11.1272       47.7672       58.8943    
  33  0.914786     -0.890649E-01  -1.27540       1.27540       47.7675       49.0429    
  34  0.872236     -0.136696      -1.95747       1.95747       48.2243       50.1817    
  35  0.789367     -0.236524      -3.38700       3.38700       47.6184       51.0054    
  36  0.619233E-01  -2.78186      -39.8359       39.8359       51.6227       91.4586    
  37  0.138004E-01  -4.28306      -61.3330       61.3330       48.1762       109.509    
  38  0.287035      -1.24815      -17.8734       17.8734       47.7414       65.6148    
  39  0.138758E-01  -4.27761      -61.2549       61.2549       47.7330       108.988    
  40  0.593330     -0.522005      -7.47506       7.47506       47.1344       54.6095    
  41  0.399445     -0.917679      -13.1411       13.1411       47.7774       60.9184    
  42  0.982947     -0.172001E-01 -0.246304      0.246304       47.9426       48.1889    
  43  0.259534      -1.34887      -19.3156       19.3156       48.1631       67.4787    
  44  0.816592E-01  -2.50520      -35.8742       35.8742       50.9398       86.8140    
  45  0.166083      -1.79527      -25.7080       25.7080       47.7987       73.5068    
  46  0.967370     -0.331741E-01 -0.475050      0.475050       47.7426       48.2177    
  47  0.371024     -0.991488      -14.1980       14.1980       47.5660       61.7640    
  48  0.941964     -0.597885E-01 -0.856166      0.856166       48.6567       49.5129    
  49  0.130219      -2.03854      -29.1916       29.1916       49.5005       78.6921    
  50  0.599455     -0.511734      -7.32798       7.32798       47.6364       54.9644    
  51  0.519323     -0.655230      -9.38283       9.38283       47.9746       57.3575    
  52  0.829175     -0.187324      -2.68247       2.68247       48.0552       50.7377    
  53  0.341525      -1.07433      -15.3844       15.3844       47.6585       63.0428    
  54  0.686480     -0.376178      -5.38683       5.38683       47.7477       53.1345    
  55  0.273157      -1.29771      -18.5831       18.5831       49.5314       68.1145    
  56  0.472999     -0.748662      -10.7208       10.7208       47.7096       58.4304    
  57  0.591611     -0.524905      -7.51659       7.51659       47.7162       55.2328    
  58  0.253673      -1.37171      -19.6428       19.6428       52.4963       72.1391    
  59  0.522398     -0.649326      -9.29829       9.29829       47.6925       56.9907    
  60  0.927744     -0.749995E-01  -1.07399       1.07399       47.6345       48.7084    
  61  0.470581     -0.753787      -10.7942       10.7942       48.2294       59.0235    
  62  0.365015      -1.00782      -14.4318       14.4318       47.7297       62.1615    
  63  0.732288     -0.311582      -4.46182       4.46182       48.4284       52.8903    
  64  0.536772E-01  -2.92477      -41.8824       41.8824       48.2589       90.1413    
  65  0.725826     -0.320444      -4.58873       4.58873       48.5919       53.1806    
  66  0.806822     -0.214652      -3.07379       3.07379       48.2681       51.3419    
  67  0.104580E-01  -4.56039      -65.3044       65.3044       47.7345       113.039    
  68  0.818881     -0.199816      -2.86135       2.86135       47.4504       50.3117    
  69  0.330445      -1.10732      -15.8566       15.8566       52.6135       68.4701    
  70  0.316989      -1.14889      -16.4520       16.4520       47.3977       63.8497    
loop,thermsimp(1:2)        8   10.2913       8.08731    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     86         47.05          0.84          1.12         23.88          0.43          0.05         26.32
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     87         47.13          0.82          1.11         23.94          0.40          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        8
neval is:       86
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:        9
neval is:       86


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       86     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -34.8312       34.8312       47.7233       82.5545    
   2  0.192227      -1.64908      -23.6146       23.6146       47.9426       71.5572    
   3  0.872733     -0.136126      -1.94931       1.94931       47.7426       49.6919    
   4  0.444113     -0.811675      -11.6231       11.6231       47.6345       59.2576    
   5  0.194382      -1.63793      -23.4550       23.4550       48.2399       71.6949    
   6  0.358074      -1.02702      -14.7068       14.7068       47.2490       61.9557    
   7  0.461693     -0.772855      -11.0672       11.0672       47.7675       58.8347    
   8  0.180202      -1.71368      -24.5397       24.5397       48.5148       73.0545    
   9  0.944954     -0.566187E-01 -0.810775      0.810775       48.6567       49.4675    
  10  0.738770     -0.302769      -4.33562       4.33562       48.2138       52.5494    
  11  0.822491E-01  -2.49800      -35.7711       35.7711       48.2243       83.9954    
  12  0.313602      -1.15963      -16.6058       16.6058       47.4504       64.0562    
  13  0.978185     -0.220567E-01 -0.315850      0.315850       48.0552       48.3711    
  14  0.540591E-01  -2.91768      -41.7809       41.7809       47.6184       89.3993    
  15  0.872885     -0.135951      -1.94681       1.94681       48.0987       50.0455    
  16  0.209079      -1.56504      -22.4112       22.4112       48.2681       70.6794    
  17  0.789205E-01  -2.53931      -36.3627       36.3627       48.4284       84.7912    
  18  0.746404     -0.292489      -4.18841       4.18841       47.7477       51.9361    
  19  0.110219      -2.20529      -31.5795       31.5795       48.5919       80.1714    
  20  0.656016     -0.421570      -6.03683       6.03683       47.8226       53.8595    
  21  0.665675     -0.406953      -5.82753       5.82753       52.2522       58.0798    
  22  0.563292     -0.573957      -8.21900       8.21900       47.1344       55.3534    
  23  0.615044     -0.486062      -6.96035       6.96035       47.6364       54.5968    
  24  0.128081      -2.05509      -29.4287       29.4287       47.7162       77.1449    
  25  0.459916     -0.776711      -11.1224       11.1224       47.6508       58.7733    
  26  0.433297     -0.836332      -11.9762       11.9762       47.7330       59.7092    
  27  0.225675      -1.48866      -21.3175       21.3175       48.4424       69.7598    
  28  0.808805     -0.212197      -3.03864       3.03864       47.6925       50.7311    
  29  0.578238     -0.547770      -7.84401       7.84401       47.9746       55.8186    
  30  0.569572     -0.562871      -8.06025       8.06025       48.7468       56.8071    
  31  0.291272      -1.23350      -17.6636       17.6636       48.2724       65.9360    
  32  0.144426      -1.93499      -27.7088       27.7088       47.7096       75.4184    
  33  0.908321     -0.961572E-01  -1.37696       1.37696       48.3863       49.7632    
  34  0.593166     -0.522281      -7.47902       7.47902       47.7672       55.2462    
  35  0.327630      -1.11587      -15.9792       15.9792       48.2294       64.2086    
  36  0.823214E-01  -2.49712      -35.7586       35.7586       52.4276       88.1862    
  37  0.742531     -0.297691      -4.26290       4.26290       47.7330       51.9959    
  38  0.476201E-01  -3.04450      -43.5969       43.5969       47.7601       91.3571    
  39  0.183829      -1.69375      -24.2543       24.2543       48.8766       73.1310    
  40  0.417257     -0.874053      -12.5164       12.5164       47.7774       60.2937    
  41  0.647723E-01  -2.73688      -39.1918       39.1918       49.4081       88.5999    
  42  0.123950E-01  -4.39046      -62.8710       62.8710       47.8083       110.679    
  43  0.281372E-01  -3.57066      -51.1316       51.1316       47.5660       98.6975    
  44  0.883044     -0.124380      -1.78111       1.78111       47.7297       49.5108    
  45  0.445413     -0.808754      -11.5813       11.5813       47.7378       59.3191    
  46  0.418101     -0.872031      -12.4874       12.4874       47.6585       60.1459    
  47  0.301534      -1.19887      -17.1677       17.1677       48.3006       65.4684    
  48  0.674500     -0.393783      -5.63894       5.63894       47.3977       53.0367    
  49  0.732783     -0.310905      -4.45213       4.45213       47.7414       52.1935    
  50  0.970355     -0.300929E-01 -0.430928      0.430928       50.8673       51.2982    
  51  0.981589     -0.185824E-01 -0.266098      0.266098       48.1631       48.4292    
  52  0.677253     -0.389711      -5.58062       5.58062       49.5314       55.1120    
  53  0.800731     -0.222230      -3.18231       3.18231       52.6135       55.7958    
  54  0.529544     -0.635738      -9.10371       9.10371       48.4120       57.5157    
  55  0.814619     -0.205035      -2.93607       2.93607       49.6360       52.5720    
  56  0.909218     -0.951702E-01  -1.36283       1.36283       52.4963       53.8591    
  57  0.269472      -1.31129      -18.7776       18.7776       48.2199       66.9975    
  58  0.166504      -1.79274      -25.6718       25.6718       47.7987       73.4705    
  59  0.328775      -1.11238      -15.9292       15.9292       51.5232       67.4524    
  60  0.333602      -1.09781      -15.7205       15.7205       49.5005       65.2210    
  61  0.213893      -1.54228      -22.0853       22.0853       47.8763       69.9616    
  62  0.401720     -0.911999      -13.0597       13.0597       50.9398       63.9995    
  63  0.453769     -0.790168      -11.3151       11.3151       48.0744       59.3895    
  64  0.649690E-01  -2.73384      -39.1484       39.1484       48.2589       87.4073    
  65  0.510128     -0.673093      -9.63863       9.63863       51.6227       61.2613    
  66  0.430053     -0.843847      -12.0838       12.0838       48.8185       60.9023    
  67  0.528469E-01  -2.94036      -42.1056       42.1056       47.7330       89.8386    
  68  0.887506     -0.119339      -1.70893       1.70893       48.1762       49.8852    
  69  0.499442     -0.694264      -9.94179       9.94179       47.7345       57.6763    
  70  0.432451     -0.838287      -12.0042       12.0042       47.0527       59.0569    
loop,thermsimp(1:2)        9   34.8312       23.6146    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     88         47.42          0.84          1.12         23.86          0.49          0.04         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     89         47.61          0.82          1.12         23.86          0.52          0.04         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:        9
neval is:       88
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       10
neval is:       88


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       88     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -7.03593       7.03593       48.0552       55.0912    
   2  0.877337     -0.130865      -1.87397       1.87397       48.1631       50.0370    
   3  0.821280     -0.196891      -2.81947       2.81947       48.6567       51.4762    
   4  0.989636     -0.104181E-01 -0.149186      0.149186       47.7297       47.8789    
   5  0.492813     -0.707625      -10.1331       10.1331       47.7426       57.8758    
   6  0.904083     -0.100835      -1.44394       1.44394       48.3863       49.8302    
   7  0.490620     -0.712086      -10.1970       10.1970       48.1762       58.3732    
   8  0.572439     -0.557850      -7.98835       7.98835       48.0987       56.0871    
   9  0.588753     -0.529749      -7.58596       7.58596       47.6925       55.2784    
  10  0.341799      -1.07353      -15.3729       15.3729       50.8673       66.2401    
  11  0.449605     -0.799385      -11.4471       11.4471       47.7477       59.1948    
  12  0.740720     -0.300132      -4.29786       4.29786       47.7330       52.0309    
  13  0.173164E-01  -4.05610      -58.0830       58.0830       47.7414       105.824    
  14  0.828389     -0.188272      -2.69604       2.69604       48.2138       50.9098    
  15  0.110451      -2.20318      -31.5494       31.5494       49.6360       81.1853    
  16  0.646816     -0.435693      -6.23909       6.23909       47.3977       53.6368    
  17  0.857676     -0.153529      -2.19851       2.19851       52.4963       54.6948    
  18  0.691202E-02  -4.97449      -71.2343       71.2343       47.8226       119.057    
  19  0.530885     -0.633210      -9.06750       9.06750       47.6364       56.7039    
  20  0.742957     -0.297117      -4.25469       4.25469       49.5314       53.7861    
  21  0.883526E-01  -2.42642      -34.7461       34.7461       47.7672       82.5133    
  22  0.599138     -0.512263      -7.33555       7.33555       47.1344       54.4700    
  23  0.476407     -0.741482      -10.6179       10.6179       52.6135       63.2314    
  24  0.509994E-01  -2.97594      -42.6152       42.6152       47.9746       90.5898    
  25  0.669768     -0.400824      -5.73976       5.73976       48.7468       54.4866    
  26  0.874430     -0.134183      -1.92148       1.92148       48.4120       50.3334    
  27  0.830739     -0.185440      -2.65548       2.65548       47.7345       50.3900    
  28  0.166673      -1.79172      -25.6573       25.6573       52.2522       77.9095    
  29  0.578742     -0.546898      -7.83152       7.83152       47.6508       55.4824    
  30  0.433531     -0.835791      -11.9685       11.9685       47.7675       59.7359    
  31  0.979127     -0.210935E-01 -0.302057      0.302057       47.0527       47.3548    
  32  0.310252      -1.17037      -16.7596       16.7596       47.6345       64.3941    
  33  0.686879     -0.375597      -5.37852       5.37852       47.7378       53.1163    
  34  0.243104      -1.41427      -20.2522       20.2522       48.0744       68.3265    
  35  0.459407     -0.777818      -11.1383       11.1383       47.7330       58.8713    
  36  0.332163      -1.10213      -15.7824       15.7824       47.6585       63.4409    
  37  0.512243     -0.668956      -9.57938       9.57938       47.7774       57.3568    
  38  0.323240      -1.12936      -16.1723       16.1723       48.8185       64.9908    
  39  0.667455     -0.404284      -5.78930       5.78930       51.6227       57.4120    
  40  0.460037     -0.776449      -11.1187       11.1187       47.2490       58.3676    
  41  0.227415      -1.48098      -21.2074       21.2074       50.9398       72.1472    
  42  0.636494     -0.451780      -6.46945       6.46945       47.4504       53.9198    
  43  0.432078     -0.839149      -12.0165       12.0165       48.2294       60.2459    
  44  0.609015     -0.495913      -7.10142       7.10142       49.5005       56.6020    
  45  0.427755     -0.849205      -12.1605       12.1605       48.3006       60.4611    
  46  0.496712     -0.699745      -10.0203       10.0203       48.2724       58.2927    
  47  0.295308      -1.21974      -17.4665       17.4665       48.2199       65.6864    
  48  0.928979     -0.736692E-01  -1.05494       1.05494       51.5232       52.5781    
  49  0.245696E-01  -3.70625      -53.0731       53.0731       48.4424       101.515    
  50  0.833617E-01  -2.48457      -35.5787       35.5787       47.8763       83.4551    
  51  0.499690     -0.693767      -9.93468       9.93468       48.2681       58.2028    
  52  0.320552      -1.13771      -16.2919       16.2919       47.9426       64.2345    
  53  0.151030E-01  -4.19286      -60.0413       60.0413       48.2399       108.281    
  54  0.551054     -0.595922      -8.53354       8.53354       48.5148       57.0483    
  55  0.786630     -0.239997      -3.43673       3.43673       48.8766       52.3134    
  56  0.793760E-01  -2.53356      -36.2803       36.2803       47.7987       84.0790    
  57  0.456771     -0.783574      -11.2207       11.2207       47.7096       58.9303    
  58  0.613263     -0.488962      -7.00188       7.00188       47.7162       54.7181    
  59  0.407581     -0.897515      -12.8523       12.8523       48.5919       61.4442    
  60  0.214329      -1.54024      -22.0561       22.0561       47.7233       69.7794    
  61  0.543052     -0.610551      -8.74303       8.74303       48.2243       56.9673    
  62  0.861407     -0.149188      -2.13636       2.13636       48.4284       50.5648    
  63  0.727563     -0.318055      -4.55451       4.55451       48.2589       52.8134    
  64  0.954867     -0.461830E-01 -0.661336      0.661336       52.4276       53.0889    
  65  0.209413      -1.56345      -22.3884       22.3884       49.4081       71.7965    
  66  0.218233E-02  -6.12736      -87.7432       87.7432       47.6184       135.362    
  67  0.990675     -0.936839E-02 -0.134154      0.134154       47.7330       47.8672    
  68  0.874543     -0.134054      -1.91964       1.91964       47.7601       49.6798    
  69  0.276161      -1.28677      -18.4265       18.4265       47.5660       65.9924    
  70  0.319398      -1.14132      -16.3435       16.3435       47.4248       63.7683    
loop,thermsimp(1:2)       10   7.03593       1.87397    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     90         48.62          0.83          1.11         23.87          0.47          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     91         77.16          0.84          1.12         23.85          0.41          0.04         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       10
neval is:       90
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       11
neval is:       90


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       90     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -14.7586       14.7586       47.0527       61.8113    
   2  0.318207      -1.14505      -16.3971       16.3971       47.7330       64.1301    
   3  0.410972E-01  -3.19181      -45.7065       45.7065       47.7297       93.4362    
   4  0.217948      -1.52350      -21.8163       21.8163       47.7601       69.5765    
   5  0.460755     -0.774888      -11.0963       11.0963       48.3863       59.4826    
   6  0.694214     -0.364975      -5.22640       5.22640       48.1631       53.3895    
   7  0.237764      -1.43648      -20.5702       20.5702       48.4120       68.9821    
   8  0.635477     -0.453379      -6.49234       6.49234       47.7345       54.2268    
   9  0.882831E-01  -2.42721      -34.7573       34.7573       48.4284       83.1858    
  10  0.889613     -0.116969      -1.67498       1.67498       48.2138       49.8887    
  11  0.236395      -1.44225      -20.6529       20.6529       48.6567       69.3096    
  12  0.785560     -0.241359      -3.45623       3.45623       47.7330       51.1892    
  13  0.253594      -1.37202      -19.6472       19.6472       48.8766       68.5239    
  14  0.767743     -0.264300      -3.78476       3.78476       51.5232       55.3080    
  15  0.425111     -0.855405      -12.2493       12.2493       48.2589       60.5082    
  16  0.334680E-01  -3.39717      -48.6471       48.6471       52.4276       101.075    
  17  0.737903     -0.303943      -4.35243       4.35243       47.7378       52.0902    
  18  0.530906     -0.633170      -9.06693       9.06693       47.3977       56.4646    
  19  0.811772     -0.208536      -2.98622       2.98622       49.5314       52.5176    
  20  0.781494     -0.246548      -3.53054       3.53054       47.4504       50.9809    
  21  0.668871     -0.402164      -5.75895       5.75895       47.1344       52.8934    
  22  0.609633     -0.494898      -7.08688       7.08688       48.7468       55.8337    
  23  0.732795E-01  -2.61347      -37.4247       37.4247       52.4963       89.9210    
  24  0.999755     -0.244962E-03 -0.350783E-02  0.350783E-02   47.7162       47.7197    
  25  0.556911     -0.585350      -8.38216       8.38216       48.0552       56.4374    
  26  0.381942     -0.962485      -13.7827       13.7827       47.6925       61.4752    
  27  0.230973      -1.46546      -20.9852       20.9852       47.6508       68.6360    
  28  0.791084     -0.234351      -3.35589       3.35589       48.0987       51.4546    
  29  0.122039      -2.10341      -30.1207       30.1207       49.5005       79.6212    
  30  0.411383     -0.888231      -12.7194       12.7194       47.6364       60.3558    
  31  0.753656     -0.282819      -4.04994       4.04994       48.2243       52.2742    
  32  0.846821     -0.166266      -2.38092       2.38092       48.5148       50.8957    
  33  0.577745     -0.548622      -7.85622       7.85622       47.7774       55.6336    
  34  0.859903     -0.150936      -2.16139       2.16139       51.6227       53.7841    
  35  0.915816     -0.879395E-01  -1.25929       1.25929       47.7426       49.0019    
  36  0.220499      -1.51186      -21.6497       21.6497       48.2681       69.9178    
  37  0.539962     -0.616256      -8.82473       8.82473       48.2724       57.0971    
  38  0.810725     -0.209827      -3.00470       3.00470       47.2490       50.2537    
  39  0.901567     -0.103621      -1.48384       1.48384       48.1762       49.6601    
  40  0.196148      -1.62888      -23.3255       23.3255       47.7330       71.0585    
  41  0.413437     -0.883250      -12.6481       12.6481       47.7096       60.3577    
  42  0.192892      -1.64562      -23.5652       23.5652       47.7477       71.3128    
  43  0.194290      -1.63840      -23.4618       23.4618       47.7675       71.2292    
  44  0.988313     -0.117563E-01 -0.168349      0.168349       48.2294       48.3977    
  45  0.917980     -0.855792E-01  -1.22549       1.22549       48.3006       49.5261    
  46  0.136083      -1.99449      -28.5609       28.5609       48.5919       77.1527    
  47  0.847126     -0.165905      -2.37575       2.37575       52.6135       54.9892    
  48  0.513003     -0.667474      -9.55815       9.55815       47.6585       57.2166    
  49  0.562161     -0.575967      -8.24778       8.24778       47.4248       55.6726    
  50  0.926079     -0.767957E-01  -1.09971       1.09971       47.9426       49.0423    
  51  0.890313     -0.116182      -1.66371       1.66371       47.6345       49.2982    
  52  0.857665     -0.153542      -2.19870       2.19870       48.8185       51.0172    
  53  0.599877     -0.511031      -7.31791       7.31791       48.2199       55.5378    
  54  0.835330     -0.179929      -2.57656       2.57656       47.5660       50.1425    
  55  0.323336      -1.12906      -16.1681       16.1681       50.8673       67.0354    
  56  0.305042      -1.18731      -17.0021       17.0021       48.0744       65.0765    
  57  0.980883     -0.193016E-01 -0.276397      0.276397       47.7233       47.9997    
  58  0.129682      -2.04267      -29.2508       29.2508       49.4081       78.6589    
  59  0.738352     -0.303335      -4.34372       4.34372       50.9398       55.2835    
  60  0.383117     -0.959416      -13.7387       13.7387       52.2522       65.9910    
  61  0.524900     -0.644547      -9.22985       9.22985       49.6360       58.8658    
  62  0.594829     -0.519481      -7.43891       7.43891       47.7672       55.2061    
  63  0.596925     -0.515963      -7.38854       7.38854       47.8763       55.2649    
  64  0.462523     -0.771060      -11.0415       11.0415       47.7987       58.8402    
  65  0.837977     -0.176764      -2.53125       2.53125       47.9746       50.5059    
  66  0.380204     -0.967046      -13.8480       13.8480       48.4424       62.2904    
  67  0.135974E-01  -4.29788      -61.5452       61.5452       47.7414       109.287    
  68  0.816466     -0.202771      -2.90365       2.90365       48.2399       51.1435    
  69  0.877970     -0.130143      -1.86363       1.86363       47.8226       49.6863    
  70  0.468378     -0.758480      -10.8614       10.8614       48.6185       59.4799    
loop,thermsimp(1:2)       11   14.7586       16.3971    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     92         47.46          0.84          1.11         23.85          0.42          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     93         47.65          0.84          1.12         23.80          0.58          0.04         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       11
neval is:       92
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       12
neval is:       92


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       92     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -36.9066       36.9066       47.7162       84.6229    
   2  0.804470     -0.217571      -3.11560       3.11560       47.7233       50.8389    
   3  0.984017     -0.161120E-01 -0.230722      0.230722       48.2294       48.4601    
   4  0.587639     -0.531643      -7.61307       7.61307       47.7426       55.3557    
   5  0.523810     -0.646626      -9.25962       9.25962       47.9426       57.2022    
   6  0.930607     -0.719181E-01  -1.02986       1.02986       47.6345       48.6643    
   7  0.360114E-01  -3.32392      -47.5982       47.5982       48.3006       95.8988    
   8  0.963815     -0.368556E-01 -0.527768      0.527768       48.1762       48.7040    
   9  0.201264E-01  -3.90572      -55.9296       55.9296       47.8226       103.752    
  10  0.954897     -0.461522E-01 -0.660895      0.660895       48.2138       48.8746    
  11  0.374160     -0.983071      -14.0775       14.0775       47.5660       61.6434    
  12  0.174967      -1.74316      -24.9618       24.9618       47.2490       72.2108    
  13  0.381618     -0.963335      -13.7949       13.7949       47.9746       61.7695    
  14  0.191097      -1.65498      -23.6991       23.6991       48.5148       72.2139    
  15  0.425287     -0.854991      -12.2434       12.2434       47.4504       59.6938    
  16  0.426180     -0.852893      -12.2133       12.2133       48.8185       61.0318    
  17  0.615671     -0.485042      -6.94576       6.94576       48.2399       55.1856    
  18  0.787264     -0.239192      -3.42520       3.42520       47.7330       51.1582    
  19  0.812636     -0.207472      -2.97098       2.97098       48.0987       51.0697    
  20  0.917241E-01  -2.38897      -34.2098       34.2098       47.7378       81.9476    
  21  0.671310     -0.398525      -5.70683       5.70683       48.2243       53.9311    
  22  0.548174     -0.601162      -8.60858       8.60858       49.5314       58.1400    
  23  0.134851      -2.00359      -28.6911       28.6911       47.1344       75.8256    
  24  0.373236     -0.985545      -14.1129       14.1129       48.1631       62.2760    
  25  0.578774     -0.546843      -7.83074       7.83074       51.6227       59.4534    
  26  0.910021     -0.942872E-01  -1.35018       1.35018       47.7345       49.0847    
  27  0.192323      -1.64858      -23.6075       23.6075       52.6135       76.2210    
  28  0.366342      -1.00419      -14.3799       14.3799       47.7672       62.1471    
  29  0.686994     -0.375430      -5.37612       5.37612       47.8763       53.2525    
  30  0.486551     -0.720414      -10.3163       10.3163       50.9398       61.2560    
  31  0.256801      -1.35945      -19.4672       19.4672       51.5232       70.9904    
  32  0.284977      -1.25535      -17.9765       17.9765       48.2199       66.1963    
  33  0.903072     -0.101953      -1.45995       1.45995       47.7774       49.2373    
  34  0.226450      -1.48523      -21.2684       21.2684       47.4248       68.6931    
  35  0.446078     -0.807261      -11.5599       11.5599       48.7468       60.3067    
  36  0.152634      -1.87971      -26.9173       26.9173       48.0552       74.9725    
  37  0.511955     -0.669518      -9.58744       9.58744       47.3977       56.9852    
  38  0.513138     -0.667210      -9.55438       9.55438       48.2724       57.8268    
  39  0.637309     -0.450501      -6.45113       6.45113       47.6585       54.1096    
  40  0.861477     -0.149107      -2.13520       2.13520       47.7987       49.9339    
  41  0.817364     -0.201671      -2.88791       2.88791       49.6360       52.5239    
  42  0.793820     -0.230898      -3.30644       3.30644       48.6185       51.9250    
  43  0.253309      -1.37315      -19.6633       19.6633       48.3863       68.0496    
  44  0.702532     -0.353065      -5.05585       5.05585       47.6364       52.6923    
  45  0.822324     -0.195620      -2.80126       2.80126       47.7096       50.5109    
  46  0.720485     -0.327831      -4.69451       4.69451       48.2589       52.9534    
  47  0.881589     -0.126029      -1.80473       1.80473       47.6925       49.4972    
  48  0.584479     -0.537035      -7.69029       7.69029       47.0527       54.7430    
  49  0.697197     -0.360688      -5.16501       5.16501       48.4424       53.6074    
  50  0.320931      -1.13653      -16.2750       16.2750       47.7330       64.0080    
  51  0.780071     -0.248371      -3.55664       3.55664       48.0744       51.6310    
  52  0.318322E-01  -3.44728      -49.3647       49.3647       52.2522       101.617    
  53  0.693387     -0.366167      -5.24347       5.24347       50.8673       56.1107    
  54  0.332128      -1.10223      -15.7839       15.7839       48.8766       64.6605    
  55  0.891883E-01  -2.41701      -34.6113       34.6113       47.6508       82.2621    
  56  0.960735     -0.400567E-01 -0.573609      0.573609       48.4120       48.9856    
  57  0.726634     -0.319332      -4.57281       4.57281       48.6567       53.2296    
  58  0.867850     -0.141737      -2.02966       2.02966       47.7601       49.7898    
  59  0.960075     -0.407444E-01 -0.583456      0.583456       48.2681       48.8516    
  60  0.303374E-01  -3.49537      -50.0534       50.0534       47.7330       97.7864    
  61  0.159557      -1.83535      -26.2821       26.2821       47.7675       74.0495    
  62  0.487506     -0.718453      -10.2882       10.2882       47.7477       58.0358    
  63  0.978612E-01  -2.32420      -33.2824       33.2824       48.5919       81.8743    
  64  0.405010     -0.903843      -12.9429       12.9429       49.4081       62.3511    
  65  0.199088      -1.61401      -23.1124       23.1124       49.5005       72.6129    
  66  0.621424     -0.475741      -6.81257       6.81257       48.4284       55.2410    
  67  0.630612     -0.461065      -6.60241       6.60241       52.4963       59.0987    
  68  0.842429     -0.171466      -2.45538       2.45538       47.7297       50.1851    
  69  0.887493     -0.119355      -1.70915       1.70915       52.4276       54.1368    
  70  0.813538     -0.206363      -2.95510       2.95510       47.4618       50.4169    
loop,thermsimp(1:2)       12   36.9066       3.11560    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     94         47.65          0.83          1.12         23.84          0.81          0.04         26.65
Just calling func    0   0         26.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     95         47.85          0.83          1.12         23.80          0.44          0.04         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       12
neval is:       94
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       13
neval is:       94


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       94     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -1.95419       1.95419       48.2294       50.1836    
   2  0.311340      -1.16687      -16.7095       16.7095       47.6345       64.3439    
   3  0.293828      -1.22476      -17.5385       17.5385       48.1762       65.7147    
   4  0.586668     -0.533296      -7.63675       7.63675       48.2681       55.9049    
   5  0.360311      -1.02079      -14.6176       14.6176       48.2138       62.8313    
   6  0.315643      -1.15314      -16.5129       16.5129       48.4120       64.9248    
   7  0.481464     -0.730923      -10.4667       10.4667       47.7345       58.2012    
   8  0.720279     -0.328116      -4.69859       4.69859       47.7774       52.4760    
   9  0.551471     -0.595166      -8.52272       8.52272       47.6925       56.2152    
  10  0.524434     -0.645435      -9.24257       9.24257       47.7601       57.0027    
  11  0.781600     -0.246412      -3.52859       3.52859       47.7987       51.3273    
  12  0.353648      -1.03945      -14.8849       14.8849       47.7297       62.6146    
  13  0.451044     -0.796190      -11.4014       11.4014       47.4618       58.8631    
  14  0.325353      -1.12284      -16.0790       16.0790       47.7096       63.7886    
  15  0.312157      -1.16425      -16.6719       16.6719       47.7233       64.3952    
  16  0.432418     -0.838362      -12.0053       12.0053       48.0987       60.1040    
  17  0.296543      -1.21556      -17.4067       17.4067       47.7330       65.1397    
  18  0.705416     -0.348967      -4.99718       4.99718       48.0744       53.0715    
  19  0.146505      -1.92069      -27.5041       27.5041       48.6185       76.1226    
  20  0.471608     -0.751607      -10.7629       10.7629       49.6360       60.3989    
  21  0.633095     -0.457134      -6.54612       6.54612       47.6364       54.1826    
  22  0.754855     -0.281230      -4.02719       4.02719       48.2589       52.2861    
  23  0.444501E-01  -3.11339      -44.5834       44.5834       48.6567       93.2401    
  24  0.160973      -1.82652      -26.1555       26.1555       47.8763       74.0319    
  25  0.943694     -0.579536E-01 -0.829890      0.829890       48.4424       49.2722    
  26  0.187304      -1.67502      -23.9862       23.9862       48.2243       72.2104    
  27  0.840922     -0.173257      -2.48102       2.48102       47.6585       50.1395    
  28  0.888648     -0.118054      -1.69052       1.69052       52.4276       54.1181    
  29  0.920614E-01  -2.38530      -34.1572       34.1572       47.0527       81.2100    
  30  0.906493     -0.981722E-01  -1.40582       1.40582       48.2399       49.6457    
  31  0.221761      -1.50616      -21.5680       21.5680       48.4284       69.9965    
  32  0.248725      -1.39141      -19.9248       19.9248       47.7426       67.6675    
  33  0.315928      -1.15224      -16.5000       16.5000       50.8673       67.3673    
  34  0.949967     -0.513283E-01 -0.735017      0.735017       47.3977       48.1327    
  35  0.802748     -0.219715      -3.14629       3.14629       47.9426       51.0889    
  36  0.558987     -0.581628      -8.32886       8.32886       48.2724       56.6013    
  37  0.638133     -0.449209      -6.43263       6.43263       47.7477       54.1803    
  38  0.637852     -0.449648      -6.43892       6.43892       49.5314       55.9703    
  39  0.382908     -0.959961      -13.7465       13.7465       52.4963       66.2429    
  40  0.982834     -0.173149E-01 -0.247948      0.247948       51.6227       51.8707    
  41  0.497022     -0.699120      -10.0113       10.0113       47.4504       57.4617    
  42  0.263620      -1.33325      -19.0920       19.0920       48.7468       67.8388    
  43  0.296939      -1.21423      -17.3876       17.3876       48.8185       66.2061    
  44  0.784161     -0.243141      -3.48176       3.48176       50.9398       54.4215    
  45  0.545321     -0.606380      -8.68330       8.68330       47.5660       56.2493    
  46  0.770080     -0.261260      -3.74122       3.74122       47.9746       51.7159    
  47  0.358755      -1.02511      -14.6795       14.6795       47.7672       62.4467    
  48  0.325126      -1.12354      -16.0890       16.0890       48.1631       64.2521    
  49  0.599396     -0.511832      -7.32939       7.32939       49.4081       56.7375    
  50  0.323708      -1.12791      -16.1516       16.1516       47.7330       63.8846    
  51  0.329142      -1.11127      -15.9132       15.9132       48.8766       64.7898    
  52  0.685661     -0.377371      -5.40392       5.40392       48.2199       53.6238    
  53  0.360361      -1.02065      -14.6156       14.6156       48.3863       63.0018    
  54  0.665281     -0.407545      -5.83601       5.83601       47.4248       53.2608    
  55  0.983321     -0.168196E-01 -0.240855      0.240855       51.5232       51.7641    
  56  0.644247     -0.439672      -6.29607       6.29607       47.2490       53.5450    
  57  0.735645     -0.307008      -4.39632       4.39632       48.5148       52.9111    
  58  0.680276     -0.385257      -5.51685       5.51685       49.5005       55.0174    
  59  0.864073     -0.146098      -2.09211       2.09211       47.7675       49.8596    
  60  0.788785     -0.237262      -3.39756       3.39756       48.0552       51.4528    
  61  0.429383     -0.845405      -12.1061       12.1061       47.1344       59.2405    
  62  0.798857     -0.224573      -3.21586       3.21586       52.6135       55.8294    
  63  0.946983     -0.544737E-01 -0.780058      0.780058       48.5919       49.3719    
  64  0.229664      -1.47114      -21.0665       21.0665       47.7378       68.8043    
  65  0.655912     -0.421729      -6.03912       6.03912       47.6508       53.6900    
  66  0.236982      -1.43977      -20.6174       20.6174       47.7162       68.3336    
  67  0.588628     -0.529960      -7.58898       7.58898       48.3006       55.8896    
  68  0.430113     -0.843707      -12.0818       12.0818       47.7330       59.8148    
  69  0.384455     -0.955929      -13.6888       13.6888       52.2522       65.9410    
  70  0.162044E-01  -4.12247      -59.0334       59.0334       47.6545       106.688    
loop,thermsimp(1:2)       13   1.95419       16.7095    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     96         47.82          0.83          1.12         23.85          0.51          0.04         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     97         51.77          0.84          1.09         23.71          0.65          0.04         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       13
neval is:       96
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       14
neval is:       96


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       96     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -15.2561       15.2561       47.3977       62.6538    
   2  0.267720      -1.31781      -18.8710       18.8710       48.4424       67.3133    
   3  0.279825      -1.27359      -18.2377       18.2377       48.5919       66.8296    
   4  0.281095      -1.26906      -18.1729       18.1729       48.2399       66.4127    
   5  0.245867      -1.40297      -20.0903       20.0903       47.7675       67.8578    
   6  0.914239     -0.896636E-01  -1.28397       1.28397       47.6585       48.9425    
   7  0.180116      -1.71415      -24.5465       24.5465       48.2294       72.7759    
   8  0.567917     -0.565780      -8.10192       8.10192       47.9426       56.0445    
   9  0.431941     -0.839465      -12.0211       12.0211       47.7987       59.8198    
  10  0.877920     -0.130199      -1.86444       1.86444       48.0552       49.9197    
  11  0.280355      -1.27170      -18.2106       18.2106       47.9746       66.1852    
  12  0.486947     -0.719601      -10.3046       10.3046       51.5232       61.8278    
  13  0.216546      -1.52995      -21.9087       21.9087       51.6227       73.5315    
  14  0.483718E-02  -5.33142      -76.3455       76.3455       48.2589       124.604    
  15  0.785152E-03  -7.14963      -102.382       102.382       47.7774       150.159    
  16  0.300781      -1.20137      -17.2035       17.2035       48.5148       65.7183    
  17  0.869691     -0.139618      -1.99931       1.99931       48.0744       50.0737    
  18  0.694261E-01  -2.66749      -38.1982       38.1982       47.4248       85.6230    
  19  0.635475     -0.453382      -6.49239       6.49239       47.2490       53.7414    
  20  0.894977     -0.110958      -1.58890       1.58890       48.2199       49.8088    
  21  0.442267     -0.815841      -11.6828       11.6828       47.6508       59.3336    
  22  0.283362      -1.26103      -18.0578       18.0578       52.4276       70.4854    
  23  0.518611     -0.656601      -9.40246       9.40246       47.7477       57.1501    
  24  0.858122E-01  -2.45559      -35.1639       35.1639       47.6364       82.8003    
  25  0.461153     -0.774026      -11.0840       11.0840       50.9398       62.0237    
  26  0.180026      -1.71465      -24.5537       24.5537       49.5005       74.0542    
  27  0.446938E-01  -3.10792      -44.5051       44.5051       52.6135       97.1186    
  28  0.152352      -1.88156      -26.9438       26.9438       48.3006       75.2444    
  29  0.163937E-01  -4.11086      -58.8671       58.8671       48.2681       107.135    
  30  0.721347     -0.326635      -4.67738       4.67738       49.5314       54.2088    
  31  0.813323     -0.206626      -2.95887       2.95887       47.6925       50.6513    
  32  0.569343     -0.563273      -8.06601       8.06601       47.5660       55.6320    
  33  0.275899      -1.28772      -18.4400       18.4400       48.2724       66.7124    
  34  0.933187     -0.691492E-01 -0.990210      0.990210       49.4081       50.3983    
  35  0.716570     -0.333279      -4.77252       4.77252       47.7601       52.5327    
  36  0.405413     -0.902848      -12.9287       12.9287       47.4504       60.3791    
  37  0.907528     -0.970314E-01  -1.38948       1.38948       47.7345       49.1240    
  38  0.554651     -0.589416      -8.44038       8.44038       47.4618       55.9021    
  39  0.419962     -0.867592      -12.4238       12.4238       47.1344       59.5583    
  40  0.824173     -0.193375      -2.76911       2.76911       47.7330       50.5021    
  41  0.865647     -0.144278      -2.06605       2.06605       48.0987       50.1648    
  42  0.300944      -1.20083      -17.1958       17.1958       49.6360       66.8318    
  43  0.339688      -1.07973      -15.4616       15.4616       47.7672       63.2288    
  44  0.217032      -1.52771      -21.8767       21.8767       47.7297       69.6064    
  45  0.792618E-01  -2.53500      -36.3009       36.3009       48.2138       84.5147    
  46  0.997677     -0.232582E-02 -0.333055E-01  0.333055E-01   48.3863       48.4196    
  47  0.174239      -1.74733      -25.0215       25.0215       47.7096       72.7312    
  48  0.834084     -0.181422      -2.59794       2.59794       47.7330       50.3309    
  49  0.324404      -1.12577      -16.1209       16.1209       48.1631       64.2839    
  50  0.927598     -0.751564E-01  -1.07623       1.07623       47.6345       48.7107    
  51  0.981384     -0.187911E-01 -0.269087      0.269087       47.7233       47.9923    
  52  0.849105     -0.163572      -2.34234       2.34234       48.8766       51.2190    
  53  0.148698      -1.90584      -27.2914       27.2914       48.4120       75.7034    
  54  0.389930     -0.941789      -13.4863       13.4863       47.7330       61.2193    
  55  0.183568      -1.69517      -24.2747       24.2747       48.1762       72.4509    
  56  0.661220     -0.413669      -5.92370       5.92370       52.2522       58.1759    
  57  0.242183      -1.41806      -20.3065       20.3065       48.8185       69.1250    
  58  0.182262      -1.70231      -24.3769       24.3769       52.4963       76.8733    
  59  0.299801      -1.20464      -17.2503       17.2503       50.8673       68.1175    
  60  0.950117     -0.511698E-01 -0.732746      0.732746       47.7426       48.4754    
  61  0.184593      -1.68960      -24.1949       24.1949       48.7468       72.9417    
  62  0.730970     -0.313382      -4.48760       4.48760       47.7162       52.2038    
  63  0.753232E-01  -2.58597      -37.0308       37.0308       47.7378       84.7686    
  64  0.501460     -0.690231      -9.88403       9.88403       48.4284       58.3125    
  65  0.513248E-01  -2.96958      -42.5241       42.5241       48.2243       90.7484    
  66  0.931416     -0.710492E-01  -1.01742       1.01742       47.8763       48.8938    
  67  0.637420E-01  -2.75291      -39.4214       39.4214       48.6185       88.0399    
  68  0.322234E-01  -3.43506      -49.1898       49.1898       47.0527       96.2425    
  69  0.791156     -0.234260      -3.35458       3.35458       48.6567       52.0113    
  70  0.606746     -0.499645      -7.15487       7.15487       47.8226       54.9775    
loop,thermsimp(1:2)       14   15.2561       18.8710    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     98         48.43          0.84          1.11         23.87          0.46          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     99         53.49          0.84          1.11         23.84          0.45          0.05         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       14
neval is:       98
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       15
neval is:       98


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       98     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -21.0488       21.0488       47.7233       68.7721    
   2  0.322822      -1.13066      -16.1909       16.1909       48.3863       64.5771    
   3  0.327586      -1.11601      -15.9811       15.9811       47.7426       63.7237    
   4  0.799078     -0.224296      -3.21190       3.21190       47.6345       50.8464    
   5  0.698072     -0.359433      -5.14704       5.14704       47.8763       53.0234    
   6  0.733871     -0.309421      -4.43088       4.43088       47.6585       52.0894    
   7  0.823872     -0.193740      -2.77434       2.77434       47.7345       50.5088    
   8  0.800045     -0.223087      -3.19458       3.19458       48.2199       51.4145    
   9  0.162010      -1.82010      -26.0636       26.0636       48.0552       74.1188    
  10  0.113138      -2.17915      -31.2052       31.2052       48.0744       79.2795    
  11  0.973966     -0.263784E-01 -0.377736      0.377736       48.0987       48.4765    
  12  0.998107     -0.189521E-02 -0.271392E-01  0.271392E-01   47.7330       47.7601    
  13  0.631351     -0.459893      -6.58562       6.58562       49.4081       55.9937    
  14  0.698229     -0.359208      -5.14383       5.14383       47.7330       52.8768    
  15  0.359252      -1.02373      -14.6597       14.6597       47.6925       62.3522    
  16  0.936266     -0.658562E-01 -0.943054      0.943054       48.8766       49.8197    
  17  0.843107     -0.170662      -2.44386       2.44386       48.6567       51.1006    
  18  0.181284      -1.70769      -24.4540       24.4540       47.7162       72.1702    
  19  0.354246      -1.03777      -14.8607       14.8607       47.7601       62.6208    
  20  0.981540     -0.186324E-01 -0.266814      0.266814       47.2490       47.5158    
  21  0.582284E-01  -2.84338      -40.7170       40.7170       49.5314       90.2483    
  22  0.935088     -0.671143E-01 -0.961070      0.961070       47.8226       48.7837    
  23  0.682144     -0.382515      -5.47757       5.47757       47.5660       53.0435    
  24  0.441439     -0.817715      -11.7096       11.7096       47.4618       59.1714    
  25  0.325829      -1.12138      -16.0581       16.0581       47.9426       64.0007    
  26  0.956968E-01  -2.34657      -33.6027       33.6027       47.7477       81.3503    
  27  0.465124E-01  -3.06804      -43.9340       43.9340       52.2522       96.1862    
  28  0.645503     -0.437726      -6.26819       6.26819       48.4284       54.6966    
  29  0.184751      -1.68875      -24.1827       24.1827       47.6508       71.8335    
  30  0.676303     -0.391115      -5.60073       5.60073       47.1344       52.7352    
  31  0.408248     -0.895880      -12.8289       12.8289       47.7987       60.6276    
  32  0.215511      -1.53474      -21.9774       21.9774       47.4504       69.4278    
  33  0.762109     -0.271666      -3.89023       3.89023       47.7330       51.6232    
  34  0.445022     -0.809632      -11.5938       11.5938       51.5232       63.1170    
  35  0.667113     -0.404797      -5.79665       5.79665       50.9398       56.7364    
  36  0.995785     -0.422376E-02 -0.604839E-01  0.604839E-01   47.3977       47.4582    
  37  0.278840      -1.27712      -18.2882       18.2882       47.7672       66.0554    
  38  0.624255     -0.471196      -6.74748       6.74748       48.1631       54.9105    
  39  0.368212     -0.999097      -14.3070       14.3070       48.5148       62.8217    
  40  0.330266      -1.10786      -15.8644       15.8644       47.9746       63.8390    
  41  0.969155     -0.313304E-01 -0.448649      0.448649       48.2399       48.6885    
  42  0.686816     -0.375688      -5.37982       5.37982       48.2724       53.6522    
  43  0.201053      -1.60419      -22.9718       22.9718       48.5919       71.5636    
  44  0.481166     -0.731544      -10.4756       10.4756       49.6360       60.1116    
  45  0.992829     -0.719725E-02 -0.103064      0.103064       48.4424       48.5454    
  46  0.665697     -0.406921      -5.82707       5.82707       47.7675       53.5945    
  47  0.991934E-02  -4.61327      -66.0616       66.0616       50.8673       116.929    
  48  0.211644      -1.55285      -22.2367       22.2367       48.8185       71.0551    
  49  0.908243E-01  -2.39883      -34.3510       34.3510       47.7297       82.0807    
  50  0.643762     -0.440426      -6.30686       6.30686       52.4276       58.7345    
  51  0.568794E-01  -2.86682      -41.0526       41.0526       48.1762       89.2288    
  52  0.159466      -1.83592      -26.2902       26.2902       47.7096       73.9999    
  53  0.918851     -0.846310E-01  -1.21191       1.21191       48.2294       49.4413    
  54  0.865178     -0.144820      -2.07381       2.07381       48.7468       50.8206    
  55  0.826009     -0.191150      -2.73725       2.73725       51.6227       54.3600    
  56  0.665816E-02  -5.01191      -71.7701       71.7701       49.5005       121.271    
  57  0.998155     -0.184716E-02 -0.264511E-01  0.264511E-01   48.3006       48.3271    
  58  0.875957E-01  -2.43502      -34.8693       34.8693       48.4120       83.2812    
  59  0.546955     -0.603388      -8.64045       8.64045       52.4963       61.1368    
  60  0.953933     -0.471617E-01 -0.675351      0.675351       47.6364       48.3118    
  61  0.131488      -2.02884      -29.0528       29.0528       48.2138       77.2665    
  62  0.415197     -0.879003      -12.5872       12.5872       47.7378       60.3250    
  63  0.543800E-02  -5.21434      -74.6689       74.6689       47.4248       122.094    
  64  0.821907     -0.196128      -2.80853       2.80853       48.6185       51.4271    
  65  0.590302     -0.527122      -7.54833       7.54833       48.2243       55.7726    
  66  0.380117     -0.967276      -13.8513       13.8513       47.0527       60.9040    
  67  0.640684     -0.445218      -6.37548       6.37548       52.6135       58.9890    
  68  0.268290      -1.31569      -18.8405       18.8405       48.2681       67.1086    
  69  0.625870     -0.468612      -6.71048       6.71048       48.2589       54.9694    
  70  0.937362     -0.646862E-01 -0.926301      0.926301       48.4295       49.3558    
loop,thermsimp(1:2)       15   21.0488       16.1909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    100         47.87          0.84          1.11         23.80          0.47          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    101         48.08          0.84          1.08         23.68          0.71          0.04         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  100    48.075        1.147     -1.802      3.245     -102.6      1.326    
                      0.2880      1.269     -99.70      3.764    -0.3687E-01

                       2.175     -1.120      1.530      6678.      3334.    

                     -0.2119      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6005.      587.5    

                       1.433     -6.220     -4.196     -8.578      6.552    

                      -14.96     -3.637      7422.      0.000      9786.    



                       1188.      9603.     -3070.      9202.      4593.    

                       4432.     0.7413E-02 0.1731    -0.1006E-01 0.1009    

                     -0.2486    -0.1022     0.1699     0.9933E-01 0.4698E-01



                     -0.4856    -0.8054      0.000     0.1278    -0.1238    

                     -0.1006E-01 0.8950E-01-0.7116    -0.1622     0.4633E-01

                      0.3509E-01-0.4008E-01-0.6785     -1.222      6851.    



                      -1.033     -1.186     -2.249     -2.344    -0.3807    

                     -0.3252      9.205      8.665    -0.1874E+05 -4.000    

                     -0.6226     -2.213      9.283      8.854    -0.1908E+05



                      -4.000     0.4719    -0.5092      8.845      9.068    

                     -0.1908E+05 -7.000    -0.8156      2.283      9.024    

                       8.757    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       15
neval is:      100
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       16
neval is:      100


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      100     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -8.35919       8.35919       47.3977       55.7569    
   2  0.850944     -0.161409      -2.31136       2.31136       47.2490       49.5603    
   3  0.343999      -1.06712      -15.2810       15.2810       47.7330       63.0140    
   4  0.481777E-02  -5.33544      -76.4030       76.4030       47.6364       124.039    
   5  0.146991      -1.91738      -27.4567       27.4567       48.3006       75.7573    
   6  0.545677     -0.605728      -8.67396       8.67396       48.0987       56.7727    
   7  0.761940     -0.271888      -3.89341       3.89341       48.4424       52.3358    
   8  0.944477     -0.571238E-01 -0.818007      0.818007       48.2399       49.0579    
   9  0.965249     -0.353688E-01 -0.506478      0.506478       47.8226       48.3291    
  10  0.634176     -0.455429      -6.52170       6.52170       48.4295       54.9512    
  11  0.793205     -0.231673      -3.31754       3.31754       48.2294       51.5469    
  12  0.743605     -0.296246      -4.24221       4.24221       48.8766       53.1189    
  13  0.983069E-01  -2.31966      -33.2173       33.2173       47.7345       80.9518    
  14  0.618437     -0.480560      -6.88157       6.88157       48.7468       55.6284    
  15  0.429182     -0.845875      -12.1128       12.1128       47.6345       59.7473    
  16  0.771528     -0.259382      -3.71432       3.71432       48.6567       52.3711    
  17  0.218286      -1.52195      -21.7941       21.7941       48.2199       70.0140    
  18  0.556408     -0.586254      -8.39510       8.39510       48.6185       57.0136    
  19  0.526292     -0.641899      -9.19194       9.19194       47.7330       56.9249    
  20  0.665532     -0.407169      -5.83062       5.83062       47.6585       53.4891    
  21  0.261756      -1.34034      -19.1936       19.1936       47.1344       66.3280    
  22  0.975508     -0.247971E-01 -0.355092      0.355092       47.7330       48.0881    
  23  0.257613      -1.35630      -19.4220       19.4220       47.8763       67.2984    
  24  0.981555E-01  -2.32120      -33.2394       33.2394       47.5660       80.8053    
  25  0.955054     -0.459870E-01 -0.658529      0.658529       47.7675       48.4260    
  26  0.887906     -0.118890      -1.70249       1.70249       48.2724       49.9749    
  27  0.407043     -0.898837      -12.8713       12.8713       51.6227       64.4940    
  28  0.876870     -0.131396      -1.88158       1.88158       48.4284       50.3100    
  29  0.957152     -0.437935E-01 -0.627119      0.627119       48.1631       48.7902    
  30  0.827730     -0.189068      -2.70743       2.70743       48.2589       50.9663    
  31  0.289027      -1.24124      -17.7744       17.7744       48.2243       65.9986    
  32  0.125230      -2.07760      -29.7511       29.7511       49.4081       79.1592    
  33  0.242443      -1.41699      -20.2911       20.2911       50.9398       71.2309    
  34  0.654103     -0.424490      -6.07866       6.07866       52.4276       58.5063    
  35  0.811871     -0.208414      -2.98446       2.98446       52.6135       55.5980    
  36  0.145201E-01  -4.23222      -60.6050       60.6050       47.4618       108.067    
  37  0.344449      -1.06581      -15.2623       15.2623       49.6360       64.8982    
  38  0.265532      -1.32602      -18.9885       18.9885       47.7378       66.7262    
  39  0.811851     -0.208438      -2.98481       2.98481       47.7987       50.7835    
  40  0.983290E-01  -2.31944      -33.2141       33.2141       47.0527       80.2668    
  41  0.347314      -1.05753      -15.1437       15.1437       52.4963       67.6400    
  42  0.923773     -0.792888E-01  -1.13541       1.13541       47.6925       48.8279    
  43  0.690375     -0.370520      -5.30581       5.30581       47.7601       53.0660    
  44  0.227523      -1.48051      -21.2007       21.2007       48.5148       69.7155    
  45  0.652275     -0.427289      -6.11873       6.11873       51.5232       57.6419    
  46  0.669640     -0.401014      -5.74249       5.74249       47.7426       53.4851    
  47  0.288804      -1.24201      -17.7854       17.7854       47.9746       65.7600    
  48  0.404648     -0.904738      -12.9558       12.9558       47.9426       60.8983    
  49  0.371042     -0.991440      -14.1973       14.1973       48.3863       62.5836    
  50  0.308424      -1.17628      -16.8442       16.8442       47.7672       64.6114    
  51  0.911221     -0.929703E-01  -1.33133       1.33133       48.2681       49.5994    
  52  0.615436     -0.485425      -6.95124       6.95124       47.7233       54.6745    
  53  0.780328     -0.248041      -3.55192       3.55192       47.4504       51.0023    
  54  0.127539      -2.05933      -29.4894       29.4894       48.8185       78.3079    
  55  0.709081     -0.343786      -4.92298       4.92298       48.5919       53.5149    
  56  0.974925     -0.253942E-01 -0.363643      0.363643       47.6508       48.0145    
  57  0.834943     -0.180392      -2.58319       2.58319       47.7162       50.2994    
  58  0.696274     -0.362013      -5.18398       5.18398       47.7096       52.8936    
  59  0.623965     -0.471660      -6.75413       6.75413       48.0552       54.8094    
  60  0.620467     -0.477282      -6.83463       6.83463       48.2138       55.0484    
  61  0.983840E-01  -2.31888      -33.2061       33.2061       48.0744       81.2804    
  62  0.452904     -0.792074      -11.3424       11.3424       47.7477       59.0901    
  63  0.731276     -0.312965      -4.48163       4.48163       47.7297       52.2113    
  64  0.136630      -1.99048      -28.5034       28.5034       48.4120       76.9154    
  65  0.819737     -0.198772      -2.84639       2.84639       48.1762       51.0226    
  66  0.415452     -0.878387      -12.5784       12.5784       49.5314       62.1098    
  67  0.931580     -0.708731E-01  -1.01490       1.01490       52.2522       53.2671    
  68  0.763119     -0.270341      -3.87126       3.87126       50.8673       54.7385    
  69  0.214680      -1.53861      -22.0327       22.0327       49.5005       71.5332    
  70  0.548736     -0.600138      -8.59392       8.59392       47.8653       56.4593    
loop,thermsimp(1:2)       16   8.35919       2.31136    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    102         47.89          0.83          1.11         23.86          0.41          0.04         26.25
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    103         50.23          0.84          1.11         23.82          0.49          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       16
neval is:      102
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       17
neval is:      102


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      102     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -4.31583       4.31583       47.6508       51.9667    
   2  0.527958     -0.638738      -9.14666       9.14666       47.7330       56.8797    
   3  0.326119      -1.12049      -16.0453       16.0453       47.8226       63.8680    
   4  0.647061     -0.435314      -6.23366       6.23366       47.7675       54.0011    
   5  0.419805     -0.867966      -12.4292       12.4292       48.1631       60.5923    
   6  0.218417      -1.52135      -21.7855       21.7855       47.6925       69.4780    
   7  0.168864      -1.77866      -25.4703       25.4703       48.2399       73.7101    
   8  0.761417     -0.272575      -3.90324       3.90324       47.2490       51.1522    
   9  0.383989     -0.957143      -13.7062       13.7062       48.2681       61.9743    
  10  0.104774      -2.25595      -32.3050       32.3050       48.2724       80.5774    
  11  0.167912      -1.78432      -25.5512       25.5512       47.7162       73.2675    
  12  0.997930     -0.207190E-02 -0.296694E-01  0.296694E-01   48.4284       48.4581    
  13  0.493294     -0.706650      -10.1192       10.1192       47.7987       57.9179    
  14  0.483048     -0.727639      -10.4197       10.4197       48.2589       58.6786    
  15  0.715967     -0.334121      -4.78458       4.78458       47.4504       52.2350    
  16  0.595423E-01  -2.82107      -40.3974       40.3974       48.1762       88.5736    
  17  0.636569     -0.451662      -6.46775       6.46775       48.2294       54.6971    
  18  0.482980     -0.727779      -10.4217       10.4217       47.7297       58.1514    
  19  0.500121     -0.692905      -9.92233       9.92233       48.4424       58.3647    
  20  0.426980     -0.851018      -12.1865       12.1865       48.6567       60.8432    
  21  0.546576     -0.604082      -8.65040       8.65040       47.7096       56.3600    
  22  0.142720      -1.94687      -27.8790       27.8790       47.7601       75.6392    
  23  0.473622     -0.747346      -10.7019       10.7019       48.8766       59.5786    
  24  0.892718E-01  -2.41607      -34.5979       34.5979       52.2522       86.8501    
  25  0.660659     -0.414518      -5.93585       5.93585       47.7426       53.6785    
  26  0.328755      -1.11244      -15.9301       15.9301       47.6585       63.5886    
  27  0.544150     -0.608530      -8.71409       8.71409       48.5919       57.3060    
  28  0.199068      -1.61411      -23.1139       23.1139       47.7233       70.8372    
  29  0.685070     -0.378234      -5.41628       5.41628       50.8673       56.2835    
  30  0.500258     -0.692632      -9.91842       9.91842       48.0552       57.9736    
  31  0.130607      -2.03556      -29.1491       29.1491       48.4295       77.5785    
  32  0.982013E-01  -2.32074      -33.2327       33.2327       48.2138       81.4465    
  33  0.581494E-01  -2.84474      -40.7364       40.7364       52.6135       93.3499    
  34  0.841391     -0.172699      -2.47304       2.47304       48.7468       51.2198    
  35  0.838937E-01  -2.47820      -35.4876       35.4876       47.3977       82.8854    
  36  0.729848     -0.314919      -4.50961       4.50961       47.8653       52.3750    
  37  0.748292     -0.289962      -4.15223       4.15223       48.0987       52.2509    
  38  0.229216      -1.47309      -21.0945       21.0945       47.7330       68.8275    
  39  0.710713     -0.341487      -4.89006       4.89006       48.6185       53.5086    
  40  0.511506     -0.670395      -9.60000       9.60000       51.5232       61.1232    
  41  0.106756      -2.23721      -32.0366       32.0366       52.4276       84.4642    
  42  0.583466     -0.538770      -7.71513       7.71513       47.7477       55.4628    
  43  0.993140E-01  -2.30947      -33.0714       33.0714       47.6345       80.7058    
  44  0.461224     -0.773871      -11.0817       11.0817       47.9426       59.0243    
  45  0.574465     -0.554316      -7.93774       7.93774       49.5314       57.4691    
  46  0.715977     -0.334107      -4.78438       4.78438       48.3863       53.1707    
  47  0.877584     -0.130583      -1.86993       1.86993       47.7330       49.6029    
  48  0.492354     -0.708558      -10.1465       10.1465       51.6227       61.7692    
  49  0.874926     -0.133616      -1.91337       1.91337       47.7672       49.6806    
  50  0.800367     -0.222685      -3.18882       3.18882       49.6360       52.8248    
  51  0.507308     -0.678636      -9.71800       9.71800       47.9746       57.6926    
  52  0.727831     -0.317686      -4.54923       4.54923       48.2243       52.7735    
  53  0.899777E-01  -2.40819      -34.4851       34.4851       47.1344       81.6195    
  54  0.392780     -0.934505      -13.3820       13.3820       47.7378       61.1198    
  55  0.585301     -0.535629      -7.67015       7.67015       47.8763       55.5465    
  56  0.522884     -0.648395      -9.28496       9.28496       52.4963       61.7813    
  57  0.559213     -0.581225      -8.32308       8.32308       48.5148       56.8378    
  58  0.116989      -2.14568      -30.7259       30.7259       48.2199       78.9458    
  59  0.411020     -0.889113      -12.7320       12.7320       50.9398       63.6718    
  60  0.484202     -0.725253      -10.3855       10.3855       49.5005       59.8861    
  61  0.771761     -0.259080      -3.71000       3.71000       48.3006       52.0106    
  62  0.908486     -0.959755E-01  -1.37436       1.37436       48.4120       49.7863    
  63  0.340814      -1.07642      -15.4142       15.4142       48.8185       64.2327    
  64  0.519873     -0.654172      -9.36767       9.36767       49.4081       58.7758    
  65  0.516320     -0.661029      -9.46587       9.46587       47.0527       56.5186    
  66  0.495555     -0.702076      -10.0537       10.0537       47.5660       57.6196    
  67  0.291626      -1.23228      -17.6462       17.6462       47.7345       65.3807    
  68  0.492590     -0.708077      -10.1396       10.1396       48.0744       58.2139    
  69  0.545663E-01  -2.90834      -41.6471       41.6471       47.4618       89.1089    
  70  0.200869      -1.60510      -22.9849       22.9849       47.8887       70.8736    
loop,thermsimp(1:2)       17   4.31583       9.14666    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    104         48.76          0.83          1.11         23.89          0.46          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    105         49.01          0.84          1.11         23.86          0.56          0.04         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       17
neval is:      104
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       18
neval is:      104


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      104     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -13.7483       13.7483       48.4284       62.1768    
   2  0.293468      -1.22599      -17.5560       17.5560       47.7330       65.2890    
   3  0.954036     -0.470539E-01 -0.673807      0.673807       47.7672       48.4410    
   4  0.452934     -0.792010      -11.3415       11.3415       48.4120       59.7535    
   5  0.251692      -1.37955      -19.7550       19.7550       47.2490       67.0040    
   6  0.881081     -0.126605      -1.81298       1.81298       48.7468       50.5598    
   7  0.855311     -0.156290      -2.23805       2.23805       47.6508       49.8889    
   8  0.576474     -0.550824      -7.88775       7.88775       48.3006       56.1884    
   9  0.433835     -0.835090      -11.9584       11.9584       47.4504       59.4088    
  10  0.298626      -1.20856      -17.3065       17.3065       48.0987       65.4052    
  11  0.269991      -1.30937      -18.7500       18.7500       47.8653       66.6153    
  12  0.884826     -0.122364      -1.75224       1.75224       48.2243       49.9765    
  13  0.664124     -0.409287      -5.86094       5.86094       49.6360       55.4969    
  14  0.580836     -0.543287      -7.77982       7.77982       48.3863       56.1661    
  15  0.285501      -1.25351      -17.9501       17.9501       48.6185       66.5686    
  16  0.690757     -0.369967      -5.29790       5.29790       47.7426       53.0405    
  17  0.578320     -0.547628      -7.84198       7.84198       47.7675       55.6095    
  18  0.563230     -0.574067      -8.22058       8.22058       48.2294       56.4500    
  19  0.681565     -0.383363      -5.48972       5.48972       47.7477       53.2374    
  20  0.453362     -0.791065      -11.3280       11.3280       47.8763       59.2043    
  21  0.645457     -0.437797      -6.26921       6.26921       50.8673       57.1365    
  22  0.982222E-01  -2.32052      -33.2297       33.2297       47.7096       80.9393    
  23  0.843064     -0.170712      -2.44459       2.44459       47.0527       49.4973    
  24  0.505683     -0.681845      -9.76396       9.76396       48.5148       58.2787    
  25  0.350376      -1.04875      -15.0180       15.0180       47.7330       62.7510    
  26  0.367167      -1.00194      -14.3477       14.3477       48.5919       62.9396    
  27  0.268175      -1.31611      -18.8466       18.8466       49.5314       68.3780    
  28  0.989085E-01  -2.31356      -33.1299       33.1299       47.5660       80.6959    
  29  0.349392      -1.05156      -15.0583       15.0583       47.9746       63.0329    
  30  0.945468     -0.560755E-01 -0.802995      0.802995       47.7987       48.6017    
  31  0.305400      -1.18613      -16.9853       16.9853       48.0552       65.0405    
  32  0.942706     -0.590006E-01 -0.844883      0.844883       47.7297       48.5746    
  33  0.778346     -0.250584      -3.58834       3.58834       48.0744       51.6627    
  34  0.256449      -1.36083      -19.4869       19.4869       48.4424       67.9292    
  35  0.338120      -1.08436      -15.5279       15.5279       48.2589       63.7867    
  36  0.644609     -0.439112      -6.28804       6.28804       49.4081       55.6962    
  37  0.420837     -0.865509      -12.3940       12.3940       47.9426       60.3366    
  38  0.793406     -0.231421      -3.31392       3.31392       48.8766       52.1906    
  39  0.685561     -0.377517      -5.40601       5.40601       49.5005       54.9065    
  40  0.278740      -1.27748      -18.2933       18.2933       48.1631       66.4564    
  41  0.414078     -0.881700      -12.6259       12.6259       48.6567       61.2826    
  42  0.999720     -0.280334E-03 -0.401435E-02  0.401435E-02   47.7378       47.7418    
  43  0.714259     -0.336509      -4.81878       4.81878       51.5232       56.3420    
  44  0.713371     -0.337753      -4.83660       4.83660       51.6227       56.4593    
  45  0.451360     -0.795490      -11.3913       11.3913       52.4963       63.8877    
  46  0.887280     -0.119595      -1.71259       1.71259       48.2681       49.9807    
  47  0.234319      -1.45107      -20.7792       20.7792       47.6585       68.4377    
  48  0.277567E-01  -3.58428      -51.3265       51.3265       50.9398       102.266    
  49  0.582411     -0.540579      -7.74103       7.74103       47.8226       55.5637    
  50  0.969019     -0.314707E-01 -0.450657      0.450657       48.8185       49.2691    
  51  0.441889     -0.816696      -11.6950       11.6950       47.7345       59.4295    
  52  0.150247      -1.89548      -27.1430       27.1430       47.7330       74.8760    
  53  0.901555E-01  -2.40622      -34.4568       34.4568       47.6925       82.1493    
  54  0.274120      -1.29419      -18.5327       18.5327       47.7233       66.2559    
  55  0.166801      -1.79095      -25.6463       25.6463       47.8887       73.5350    
  56  0.783053     -0.244555      -3.50201       3.50201       47.7162       51.2182    
  57  0.541655     -0.613126      -8.77990       8.77990       48.2399       57.0198    
  58  0.113786      -2.17344      -31.1234       31.1234       47.7601       78.8835    
  59  0.794080     -0.230571      -3.30175       3.30175       48.4295       51.7312    
  60  0.266758      -1.32141      -18.9225       18.9225       48.2199       67.1424    
  61  0.637690     -0.449903      -6.44256       6.44256       48.2724       54.7150    
  62  0.912681     -0.913685E-01  -1.30839       1.30839       47.6345       48.9428    
  63  0.303728      -1.19162      -17.0639       17.0639       48.2138       65.2777    
  64  0.318303      -1.14475      -16.3927       16.3927       47.1344       63.5272    
  65  0.255833      -1.36323      -19.5213       19.5213       47.3977       66.9190    
  66  0.988998     -0.110626E-01 -0.158416      0.158416       52.4276       52.5860    
  67  0.335641      -1.09171      -15.6332       15.6332       52.2522       67.8854    
  68  0.575346     -0.552784      -7.91581       7.91581       48.1762       56.0920    
  69  0.439298E-01  -3.12516      -44.7520       44.7520       47.4618       92.2138    
  70  0.179935      -1.71516      -24.5609       24.5609       48.7631       73.3240    
loop,thermsimp(1:2)       18   13.7483       17.5560    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    106         48.99          0.84          1.12         23.78          0.52          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    107         48.81          0.84          1.12         23.85          0.41          0.04         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       18
neval is:      106
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       19
neval is:      106


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      106     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -14.9115       14.9115       47.7378       62.6492    
   2  0.270835E-01  -3.60883      -51.6781       51.6781       47.7672       99.4453    
   3  0.923755     -0.793087E-01  -1.13569       1.13569       47.7297       48.8654    
   4  0.535520     -0.624517      -8.94302       8.94302       47.7987       56.7417    
   5  0.629344     -0.463078      -6.63123       6.63123       47.6345       54.2657    
   6  0.572648E-01  -2.86007      -40.9559       40.9559       48.8185       89.7744    
   7  0.353113E-01  -3.34355      -47.8794       47.8794       47.0527       94.9321    
   8  0.580838     -0.543283      -7.77975       7.77975       47.6508       55.4306    
   9  0.370403     -0.993164      -14.2220       14.2220       48.2243       62.4463    
  10  0.443010     -0.814162      -11.6587       11.6587       48.2681       59.9268    
  11  0.188704      -1.66757      -23.8795       23.8795       48.7468       72.6263    
  12  0.177608      -1.72818      -24.7474       24.7474       47.7162       72.4636    
  13  0.694998     -0.363847      -5.21025       5.21025       48.0744       53.2846    
  14  0.160742      -1.82796      -26.1761       26.1761       48.4295       74.6056    
  15  0.290050      -1.23770      -17.7238       17.7238       48.8766       66.6004    
  16  0.441138E-01  -3.12098      -44.6921       44.6921       52.4276       97.1198    
  17  0.372461     -0.987622      -14.1427       14.1427       47.7426       61.8853    
  18  0.652779     -0.426517      -6.10768       6.10768       47.7477       53.8553    
  19  0.998108     -0.189387E-02 -0.271201E-01  0.271201E-01   48.2724       48.2995    
  20  0.741140     -0.299566      -4.28976       4.28976       49.5005       53.7903    
  21  0.623042     -0.473141      -6.77534       6.77534       49.6360       56.4113    
  22  0.504617     -0.683955      -9.79417       9.79417       47.8226       57.6168    
  23  0.872499     -0.136394      -1.95315       1.95315       47.7675       49.7206    
  24  0.142620      -1.94757      -27.8890       27.8890       49.4081       77.2971    
  25  0.580285     -0.544236      -7.79341       7.79341       48.1762       55.9696    
  26  0.860063E-01  -2.45334      -35.1315       35.1315       48.3863       83.5178    
  27  0.401846     -0.911687      -13.0553       13.0553       48.3006       61.3559    
  28  0.161242      -1.82485      -26.1317       26.1317       51.5232       77.6549    
  29  0.550753     -0.596469      -8.54138       8.54138       48.2294       56.7708    
  30  0.815012     -0.204553      -2.92917       2.92917       51.6227       54.5519    
  31  0.438663     -0.824024      -11.7999       11.7999       48.2399       60.0398    
  32  0.542283     -0.611968      -8.76332       8.76332       50.8673       59.6306    
  33  0.943132E-01  -2.36113      -33.8112       33.8112       48.5148       82.3260    
  34  0.236587      -1.44144      -20.6413       20.6413       47.8763       68.5176    
  35  0.283068      -1.26207      -18.0727       18.0727       47.4504       65.5231    
  36  0.973178     -0.271886E-01 -0.389338      0.389338       47.7345       48.1238    
  37  0.596723     -0.516302      -7.39339       7.39339       48.4120       55.8053    
  38  0.595114     -0.519003      -7.43207       7.43207       47.9426       55.3746    
  39  0.948736     -0.526250E-01 -0.753585      0.753585       48.6567       49.4103    
  40  0.216072E-01  -3.83473      -54.9129       54.9129       48.4284       103.341    
  41  0.440213     -0.820496      -11.7494       11.7494       47.7330       59.4824    
  42  0.905197     -0.996023E-01  -1.42630       1.42630       48.5919       50.0182    
  43  0.158396      -1.84266      -26.3867       26.3867       47.9746       74.3613    
  44  0.287789      -1.24553      -17.8358       17.8358       47.1344       64.9702    
  45  0.238244      -1.43446      -20.5414       20.5414       48.2589       68.8002    
  46  0.363881      -1.01093      -14.4764       14.4764       52.4963       66.9727    
  47  0.828805     -0.187771      -2.68886       2.68886       48.0552       50.7441    
  48  0.587140     -0.532492      -7.62524       7.62524       48.2138       55.8390    
  49  0.141687      -1.95414      -27.9831       27.9831       47.7330       75.7161    
  50  0.879115     -0.128839      -1.84496       1.84496       48.0987       49.9437    
  51  0.742190     -0.298150      -4.26948       4.26948       47.7233       51.9927    
  52  0.218958      -1.51887      -21.7501       21.7501       48.1631       69.9132    
  53  0.333192      -1.09904      -15.7381       15.7381       48.6185       64.3566    
  54  0.356774      -1.03065      -14.7589       14.7589       47.8653       62.6242    
  55  0.739597     -0.301650      -4.31960       4.31960       47.3977       51.7173    
  56  0.224658E-01  -3.79576      -54.3549       54.3549       47.2490       101.604    
  57  0.338214      -1.08408      -15.5239       15.5239       48.2199       63.7438    
  58  0.227014      -1.48275      -21.2328       21.2328       52.2522       73.4850    
  59  0.289792E-01  -3.54118      -50.7093       50.7093       48.4424       99.1516    
  60  0.871226     -0.137854      -1.97406       1.97406       49.5314       51.5054    
  61  0.159622      -1.83495      -26.2763       26.2763       47.6585       73.9348    
  62  0.581826     -0.541584      -7.75543       7.75543       48.7631       56.5185    
  63  0.733467E-02  -4.91514      -70.3844       70.3844       47.8887       118.273    
  64  0.646078     -0.436835      -6.25544       6.25544       47.7330       53.9884    
  65  0.976710     -0.235653E-01 -0.337452      0.337452       47.7601       48.0976    
  66  0.390127     -0.941284      -13.4791       13.4791       47.5660       61.0451    
  67  0.394291     -0.930666      -13.3270       13.3270       47.7096       61.0367    
  68  0.796004     -0.228151      -3.26710       3.26710       47.6925       50.9596    
  69  0.393786     -0.931948      -13.3454       13.3454       47.4618       60.8072    
  70  0.672353     -0.396971      -5.68459       5.68459       48.8082       54.4928    
loop,thermsimp(1:2)       19   14.9115       51.6781    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    108         47.65          0.84          1.12         23.82          0.50          0.05         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    109         49.22          0.83          1.12         23.75          0.59          0.04         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       19
neval is:      108
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       20
neval is:      108


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      108     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -8.96373       8.96373       47.7601       56.7239    
   2  0.288348      -1.24359      -17.8081       17.8081       47.7345       65.5426    
   3  0.910112E-01  -2.39677      -34.3215       34.3215       48.2724       82.5940    
   4  0.213812      -1.54266      -22.0907       22.0907       47.7297       69.8204    
   5  0.575222     -0.552999      -7.91889       7.91889       48.6567       56.5756    
   6  0.855707     -0.155827      -2.23143       2.23143       47.7675       49.9989    
   7  0.818692     -0.200047      -2.86466       2.86466       48.0987       50.9634    
   8  0.309911      -1.17147      -16.7753       16.7753       48.5919       65.3672    
   9  0.773438     -0.256910      -3.67892       3.67892       48.0552       51.7341    
  10  0.440502E-01  -3.12243      -44.7128       44.7128       47.6925       92.4053    
  11  0.211655      -1.55280      -22.2359       22.2359       49.5314       71.7673    
  12  0.713577     -0.337465      -4.83247       4.83247       47.3977       52.2302    
  13  0.927405     -0.753650E-01  -1.07922       1.07922       47.7233       48.8025    
  14  0.360229      -1.02101      -14.6208       14.6208       48.0744       62.6952    
  15  0.911872     -0.922553E-01  -1.32109       1.32109       49.5005       50.8216    
  16  0.800691     -0.222280      -3.18303       3.18303       47.7477       50.9307    
  17  0.169830      -1.77296      -25.3886       25.3886       47.7330       73.1216    
  18  0.581014     -0.542980      -7.77543       7.77543       47.6345       55.4099    
  19  0.869395     -0.139958      -2.00418       2.00418       48.8082       50.8124    
  20  0.773880     -0.256338      -3.67074       3.67074       51.6227       55.2934    
  21  0.496085     -0.701008      -10.0384       10.0384       47.9426       57.9809    
  22  0.530037     -0.634809      -9.09040       9.09040       47.6508       56.7412    
  23  0.239414      -1.42956      -20.4712       20.4712       48.4120       68.8832    
  24  0.595728     -0.517972      -7.41731       7.41731       48.2138       55.6311    
  25  0.170793      -1.76730      -25.3076       25.3076       48.1762       73.4839    
  26  0.983027     -0.171183E-01 -0.245132      0.245132       49.6360       49.8811    
  27  0.608714     -0.496407      -7.10849       7.10849       48.7631       55.8716    
  28  0.518727     -0.656378      -9.39927       9.39927       47.7987       57.1980    
  29  0.887918     -0.118876      -1.70229       1.70229       48.2294       49.9317    
  30  0.140498      -1.96256      -28.1037       28.1037       47.8226       75.9263    
  31  0.256308      -1.36138      -19.4948       19.4948       47.7330       67.2278    
  32  0.887238     -0.119642      -1.71326       1.71326       50.8673       52.5805    
  33  0.306042      -1.18403      -16.9552       16.9552       48.2681       65.2234    
  34  0.993873     -0.614632E-02 -0.880146E-01  0.880146E-01   48.2399       48.3279    
  35  0.275412E-01  -3.59207      -51.4381       51.4381       47.4618       98.8999    
  36  0.698960     -0.358161      -5.12883       5.12883       47.7096       52.8385    
  37  0.268424      -1.31519      -18.8333       18.8333       47.5660       66.3993    
  38  0.580935E-01  -2.84570      -40.7502       40.7502       48.3006       89.0508    
  39  0.242705      -1.41591      -20.2757       20.2757       47.7426       68.0183    
  40  0.443517     -0.813019      -11.6424       11.6424       48.2243       59.8666    
  41  0.904179     -0.100728      -1.44241       1.44241       47.8653       49.3078    
  42  0.454025     -0.789603      -11.3070       11.3070       47.7378       59.0448    
  43  0.592994     -0.522572      -7.48317       7.48317       48.2199       55.7031    
  44  0.401796     -0.911812      -13.0571       13.0571       48.6185       61.6756    
  45  0.130776      -2.03427      -29.1305       29.1305       47.1344       76.2650    
  46  0.709753     -0.342839      -4.90942       4.90942       47.4504       52.3598    
  47  0.388071     -0.946568      -13.5548       13.5548       48.8766       62.4314    
  48  0.362521      -1.01467      -14.5300       14.5300       52.4963       67.0263    
  49  0.285379      -1.25394      -17.9563       17.9563       47.8763       65.8326    
  50  0.286508      -1.24999      -17.8997       17.8997       48.2589       66.1586    
  51  0.951542     -0.496714E-01 -0.711290      0.711290       48.1631       48.8744    
  52  0.122933      -2.09612      -30.0162       30.0162       47.7162       77.7324    
  53  0.210928      -1.55624      -22.2852       22.2852       48.7468       71.0320    
  54  0.860093     -0.150715      -2.15822       2.15822       52.2522       54.4105    
  55  0.997563     -0.243951E-02 -0.349336E-01  0.349336E-01   47.6585       47.6934    
  56  0.750720     -0.286722      -4.10583       4.10583       47.9746       52.0805    
  57  0.667101     -0.404814      -5.79689       5.79689       48.4295       54.2264    
  58  0.508750E-01  -2.97838      -42.6501       42.6501       47.7330       90.3832    
  59  0.552474     -0.593349      -8.49670       8.49670       49.4081       57.9048    
  60  0.514478     -0.664602      -9.51704       9.51704       51.5232       61.0402    
  61  0.539834     -0.616494      -8.82813       8.82813       48.5148       57.3429    
  62  0.610888     -0.492841      -7.05744       7.05744       48.3863       55.4437    
  63  0.328075      -1.11451      -15.9597       15.9597       48.8185       64.7782    
  64  0.894692     -0.111276      -1.59346       1.59346       47.0527       48.6462    
  65  0.810283     -0.210372      -3.01250       3.01250       52.4276       55.4401    
  66  0.691642     -0.368687      -5.27956       5.27956       48.4424       53.7219    
  67  0.896896     -0.108815      -1.55822       1.55822       47.7672       49.3254    
  68  0.742287     -0.298020      -4.26762       4.26762       47.2490       51.5166    
  69  0.974450     -0.258821E-01 -0.370629      0.370629       48.4284       48.7991    
  70  0.339669      -1.07978      -15.4624       15.4624       47.6468       63.1092    
loop,thermsimp(1:2)       20   8.96373       17.8081    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    110         47.79          0.83          1.12         23.85          0.78          0.04         26.62
Just calling func    0   0         26.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    111         48.61          0.82          1.12         23.83          0.43          0.04         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       20
neval is:      110
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       21
neval is:      110


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      110     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -17.3644       17.3644       47.6585       65.0229    
   2  0.663536     -0.410173      -5.87363       5.87363       48.2399       54.1135    
   3  0.263982      -1.33188      -19.0723       19.0723       47.0527       66.1250    
   4  0.792402     -0.232686      -3.33204       3.33204       48.4284       51.7605    
   5  0.624731     -0.470434      -6.73657       6.73657       47.7233       54.4598    
   6  0.170977      -1.76622      -25.2922       25.2922       48.1631       73.4552    
   7  0.362487      -1.01477      -14.5314       14.5314       47.8653       62.3967    
   8  0.659245     -0.416659      -5.96652       5.96652       47.7672       53.7337    
   9  0.746481E-03  -7.20014      -103.105       103.105       49.6360       152.741    
  10  0.690046     -0.370998      -5.31265       5.31265       48.2294       53.5420    
  11  0.905636     -0.991173E-01  -1.41935       1.41935       47.7675       49.1868    
  12  0.317643      -1.14683      -16.4225       16.4225       48.8082       65.2306    
  13  0.321948      -1.13336      -16.2297       16.2297       49.5005       65.7302    
  14  0.293974      -1.22426      -17.5314       17.5314       47.7477       65.2790    
  15  0.679275     -0.386729      -5.53792       5.53792       48.0987       53.6366    
  16  0.180340      -1.71291      -24.5287       24.5287       47.2490       71.7777    
  17  0.539600     -0.616927      -8.83434       8.83434       48.0552       56.8896    
  18  0.260315      -1.34586      -19.2726       19.2726       47.9746       67.2472    
  19  0.256777      -1.35955      -19.4686       19.4686       47.3977       66.8663    
  20  0.518851     -0.656138      -9.39583       9.39583       47.4504       56.8462    
  21  0.485887     -0.721780      -10.3358       10.3358       50.8673       61.2031    
  22  0.562814     -0.574805      -8.23115       8.23115       47.7096       55.9408    
  23  0.906369     -0.983082E-01  -1.40776       1.40776       48.4424       49.8501    
  24  0.332143      -1.10219      -15.7832       15.7832       48.4295       64.2127    
  25  0.912001E-01  -2.39470      -34.2919       34.2919       52.2522       86.5441    
  26  0.302569      -1.19545      -17.1187       17.1187       51.6227       68.7414    
  27  0.362040      -1.01600      -14.5490       14.5490       47.6345       62.1835    
  28  0.630870     -0.460656      -6.59655       6.59655       52.4276       59.0242    
  29  0.685312     -0.377881      -5.41122       5.41122       48.3863       53.7975    
  30  0.329910      -1.10894      -15.8799       15.8799       48.2138       64.0936    
  31  0.906630E-01  -2.40061      -34.3764       34.3764       48.2199       82.5963    
  32  0.339749      -1.07955      -15.4590       15.4590       48.7631       64.2222    
  33  0.783039     -0.244573      -3.50226       3.50226       48.6567       52.1590    
  34  0.322673      -1.13112      -16.1975       16.1975       47.7601       63.9576    
  35  0.255311      -1.36527      -19.5505       19.5505       47.6508       67.2014    
  36  0.645921     -0.437078      -6.25891       6.25891       47.7987       54.0576    
  37  0.240122      -1.42661      -20.4289       20.4289       48.5148       68.9436    
  38  0.224638      -1.49326      -21.3834       21.3834       49.4081       70.7915    
  39  0.682659     -0.381760      -5.46676       5.46676       47.9426       53.4093    
  40  0.533856     -0.627629      -8.98758       8.98758       47.7378       56.7254    
  41  0.439620E-02  -5.42701      -77.7143       77.7143       48.2243       125.939    
  42  0.409891     -0.891863      -12.7714       12.7714       51.5232       64.2946    
  43  0.379406     -0.969149      -13.8781       13.8781       48.6185       62.4966    
  44  0.982111     -0.180514E-01 -0.258494      0.258494       48.8766       49.1351    
  45  0.243530      -1.41251      -20.2271       20.2271       48.0744       68.3014    
  46  0.709323     -0.343445      -4.91809       4.91809       47.6468       52.5649    
  47  0.212014      -1.55110      -22.2116       22.2116       48.8185       71.0301    
  48  0.530919     -0.633146      -9.06659       9.06659       48.2681       57.3347    
  49  0.439600     -0.821890      -11.7694       11.7694       48.5919       60.3613    
  50  0.304385      -1.18946      -17.0330       17.0330       47.7345       64.7675    
  51  0.850253     -0.162221      -2.32299       2.32299       47.8763       50.1993    
  52  0.686564     -0.376055      -5.38507       5.38507       48.2589       53.6440    
  53  0.894299     -0.111715      -1.59974       1.59974       47.5660       49.1657    
  54  0.724097E-02  -4.92800      -70.5685       70.5685       52.4963       123.065    
  55  0.666382     -0.405892      -5.81233       5.81233       47.7330       53.5453    
  56  0.216072      -1.53214      -21.9402       21.9402       47.7426       69.6828    
  57  0.481454     -0.730944      -10.4670       10.4670       48.4120       58.8790    
  58  0.107413      -2.23107      -31.9487       31.9487       47.7297       79.6784    
  59  0.943557     -0.580990E-01 -0.831972      0.831972       48.7468       49.5788    
  60  0.259811      -1.34780      -19.3004       19.3004       49.5314       68.8317    
  61  0.526852     -0.640836      -9.17671       9.17671       47.7330       56.9097    
  62  0.306319E-01  -3.48571      -49.9151       49.9151       48.1762       98.0913    
  63  0.180513      -1.71195      -24.5150       24.5150       47.8226       72.3376    
  64  0.901495     -0.103701      -1.48499       1.48499       47.1344       48.6194    
  65  0.274530      -1.29269      -18.5113       18.5113       47.7162       66.2275    
  66  0.773836     -0.256395      -3.67155       3.67155       48.2724       51.9440    
  67  0.158774      -1.84027      -26.3525       26.3525       48.3006       74.6531    
  68  0.514226     -0.665093      -9.52406       9.52406       47.7330       57.2571    
  69  0.312978      -1.16162      -16.6343       16.6343       47.6925       64.3268    
  70  0.917534     -0.860656E-01  -1.23245       1.23245       47.7893       49.0217    
loop,thermsimp(1:2)       21   17.3644       5.87363    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    112         57.02          0.84          1.12         23.84          0.53          0.04         26.36
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     57.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       21
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       22
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      111     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -13.7180       13.7180       47.1344       60.8524    
   2  0.741480     -0.299107      -4.28318       4.28318       47.7893       52.0724    
   3  0.138898      -1.97401      -28.2677       28.2677       48.8766       77.1443    
   4  0.751974E-01  -2.58764      -37.0547       37.0547       47.5660       84.6207    
   5  0.824485     -0.192996      -2.76368       2.76368       47.7675       50.5312    
   6  0.982900     -0.172482E-01 -0.246993      0.246993       48.7468       48.9938    
   7  0.693409     -0.366136      -5.24303       5.24303       48.4424       53.6854    
   8  0.941572     -0.602045E-01 -0.862122      0.862122       47.8763       48.7385    
   9  0.812713     -0.207378      -2.96963       2.96963       48.4284       51.3981    
  10  0.879507     -0.128393      -1.83858       1.83858       48.2724       50.1110    
  11  0.418958     -0.869984      -12.4581       12.4581       48.6567       61.1148    
  12  0.314952      -1.15533      -16.5443       16.5443       47.6468       64.1911    
  13  0.812426     -0.207731      -2.97469       2.97469       47.9426       50.9173    
  14  0.213788      -1.54277      -22.0923       22.0923       48.2294       70.3217    
  15  0.521629     -0.650798      -9.31936       9.31936       47.7330       57.0524    
  16  0.287143      -1.24777      -17.8680       17.8680       48.0987       65.9667    
  17  0.518340     -0.657125      -9.40996       9.40996       48.2589       57.6688    
  18  0.712802E-02  -4.94372      -70.7936       70.7936       47.7672       118.561    
  19  0.579935     -0.544838      -7.80203       7.80203       48.3863       56.1883    
  20  0.508101E-02  -5.28224      -75.6412       75.6412       47.7987       123.440    
  21  0.984466     -0.156557E-01 -0.224189      0.224189       48.2399       48.4640    
  22  0.394325     -0.930579      -13.3258       13.3258       47.7233       61.0491    
  23  0.837309     -0.177562      -2.54267       2.54267       47.7096       50.2523    
  24  0.683519     -0.380501      -5.44874       5.44874       47.7378       53.1865    
  25  0.892337     -0.113912      -1.63121       1.63121       47.4504       49.0816    
  26  0.297675      -1.21175      -17.3522       17.3522       48.0552       65.4074    
  27  0.566054     -0.569065      -8.14896       8.14896       47.7330       55.8820    
  28  0.325499E-01  -3.42498      -49.0454       49.0454       47.7330       96.7784    
  29  0.721169     -0.326882      -4.68092       4.68092       48.2681       52.9490    
  30  0.370449     -0.993040      -14.2202       14.2202       48.4120       62.6322    
  31  0.398952     -0.918913      -13.1587       13.1587       52.4276       65.5864    
  32  0.942469     -0.592518E-01 -0.848480      0.848480       48.5919       49.4404    
  33  0.379045     -0.970101      -13.8918       13.8918       50.8673       64.7590    
  34  0.218373      -1.52155      -21.7884       21.7884       47.6345       69.4229    
  35  0.413944     -0.882024      -12.6305       12.6305       47.8653       60.4958    
  36  0.452532     -0.792896      -11.3542       11.3542       48.6185       59.9727    
  37  0.938896     -0.630505E-01 -0.902876      0.902876       47.7601       48.6630    
  38  0.389299     -0.943409      -13.5095       13.5095       48.2138       61.7233    
  39  0.943794     -0.578471E-01 -0.828365      0.828365       48.4295       49.2578    
  40  0.706887     -0.346884      -4.96735       4.96735       48.7631       53.7305    
  41  0.274873      -1.29145      -18.4934       18.4934       51.5232       70.0166    
  42  0.343864      -1.06751      -15.2866       15.2866       47.6925       62.9791    
  43  0.869527E-01  -2.44239      -34.9748       34.9748       47.7345       82.7093    
  44  0.859615     -0.151271      -2.16618       2.16618       47.6585       49.8247    
  45  0.264079      -1.33151      -19.0670       19.0670       48.8082       67.8752    
  46  0.494871     -0.703457      -10.0734       10.0734       47.7477       57.8211    
  47  0.112943      -2.18087      -31.2299       31.2299       49.5005       80.7304    
  48  0.358273      -1.02646      -14.6988       14.6988       47.0527       61.7515    
  49  0.215257      -1.53592      -21.9942       21.9942       47.7162       69.7105    
  50  0.441681     -0.817166      -11.7017       11.7017       47.3977       59.0995    
  51  0.888276     -0.118473      -1.69652       1.69652       47.6508       49.3474    
  52  0.780286     -0.248095      -3.55270       3.55270       47.9746       51.5273    
  53  0.488747     -0.715911      -10.2518       10.2518       48.0744       58.3261    
  54  0.683795     -0.380097      -5.44296       5.44296       51.6227       57.0657    
  55  0.466986     -0.761456      -10.9040       10.9040       49.5314       60.4353    
  56  0.900497     -0.104809      -1.50085       1.50085       48.5148       50.0156    
  57  0.876058     -0.132323      -1.89485       1.89485       47.7426       49.6375    
  58  0.413808     -0.882354      -12.6352       12.6352       49.4081       62.0433    
  59  0.268165      -1.31615      -18.8472       18.8472       48.8185       67.6657    
  60  0.637465     -0.450255      -6.44761       6.44761       47.2490       53.6966    
  61  0.476344     -0.741616      -10.6199       10.6199       47.8226       58.4425    
  62  0.878474     -0.129569      -1.85542       1.85542       48.1631       50.0185    
  63  0.185973      -1.68216      -24.0883       24.0883       48.3006       72.3889    
  64  0.802667E-03  -7.12757      -102.066       102.066       47.7297       149.796    
  65  0.480758     -0.732390      -10.4878       10.4878       48.2199       58.7077    
  66  0.789279     -0.236635      -3.38859       3.38859       52.2522       55.6408    
  67  0.174217      -1.74745      -25.0234       25.0234       48.1762       73.1996    
  68  0.825561     -0.191692      -2.74501       2.74501       52.4963       55.2413    
  69  0.532291     -0.630566      -9.02964       9.02964       48.2243       57.2539    
  70  0.118632E-01  -4.43431      -63.4989       63.4989       57.0215       120.520    
loop,thermsimp(1:2)       22   13.7180       4.28318    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113         47.99          0.84          1.12         23.84          0.41          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114         51.52          0.84          1.11         23.84          0.46          0.04         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       22
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       23
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      113     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -15.9780       15.9780       48.2399       64.2179    
   2  0.736029     -0.306486      -4.38884       4.38884       47.7601       52.1490    
   3  0.608436     -0.496864      -7.11504       7.11504       47.8763       54.9914    
   4  0.584882     -0.536346      -7.68042       7.68042       48.7468       56.4272    
   5  0.617514     -0.482053      -6.90295       6.90295       47.4504       54.3533    
   6  0.376473     -0.976909      -13.9892       13.9892       48.4295       62.4187    
   7  0.535145     -0.625218      -8.95306       8.95306       47.6508       56.6039    
   8  0.341783      -1.07358      -15.3735       15.3735       48.5919       63.9654    
   9  0.804208E-01  -2.52048      -36.0931       36.0931       47.7426       83.8357    
  10  0.660499     -0.414760      -5.93932       5.93932       47.6585       53.5978    
  11  0.739860E-01  -2.60388      -37.2873       37.2873       48.5148       85.8020    
  12  0.203251      -1.59331      -22.8161       22.8161       48.1631       70.9791    
  13  0.637025     -0.450946      -6.45750       6.45750       48.2724       54.7299    
  14  0.687460     -0.374752      -5.36640       5.36640       47.7096       53.0760    
  15  0.663581     -0.410105      -5.87266       5.87266       47.7675       53.6401    
  16  0.579690     -0.545263      -7.80811       7.80811       47.9426       55.7507    
  17  0.775653     -0.254050      -3.63798       3.63798       48.4284       52.0664    
  18  0.284124      -1.25834      -18.0194       18.0194       47.9746       65.9940    
  19  0.317710      -1.14662      -16.4194       16.4194       47.7893       64.2087    
  20  0.958871     -0.419990E-01 -0.601422      0.601422       48.2681       48.8695    
  21  0.582932     -0.539685      -7.72824       7.72824       47.7378       55.4660    
  22  0.905476     -0.992942E-01  -1.42188       1.42188       48.4424       49.8642    
  23  0.225214      -1.49070      -21.3467       21.3467       47.2490       68.5957    
  24  0.618260     -0.480846      -6.88566       6.88566       48.7631       55.6488    
  25  0.608706     -0.496420      -7.10869       7.10869       52.4963       59.6050    
  26  0.651052     -0.429165      -6.14560       6.14560       52.2522       58.3978    
  27  0.138439E-02  -6.58249      -94.2607       94.2607       47.7330       141.994    
  28  0.157375      -1.84913      -26.4793       26.4793       48.3863       74.8656    
  29  0.168063      -1.78342      -25.5384       25.5384       47.7330       73.2714    
  30  0.924354     -0.786598E-01  -1.12640       1.12640       51.6227       52.7491    
  31  0.985585     -0.145204E-01 -0.207931      0.207931       48.2243       48.4322    
  32  0.540844E-01  -2.91721      -41.7741       41.7741       48.2589       90.0330    
  33  0.535345     -0.624843      -8.94769       8.94769       47.7477       56.6954    
  34  0.736351     -0.306048      -4.38258       4.38258       48.0744       52.4569    
  35  0.283062E-01  -3.56467      -51.0458       51.0458       47.8226       98.8684    
  36  0.690743     -0.369987      -5.29818       5.29818       48.2199       53.5181    
  37  0.260994      -1.34326      -19.2353       19.2353       47.3977       66.6330    
  38  0.243637      -1.41208      -20.2208       20.2208       48.6185       68.8393    
  39  0.850226     -0.162253      -2.32345       2.32345       49.5314       51.8548    
  40  0.589307     -0.528809      -7.57249       7.57249       47.8653       55.4378    
  41  0.515087     -0.663420      -9.50011       9.50011       47.1344       56.6345    
  42  0.348855      -1.05310      -15.0803       15.0803       47.7233       62.8035    
  43  0.791407     -0.233943      -3.35004       3.35004       48.6567       52.0068    
  44  0.370775     -0.992160      -14.2076       14.2076       48.2138       62.4214    
  45  0.676021     -0.391531      -5.60669       5.60669       47.0527       52.6594    
  46  0.125601      -2.07465      -29.7087       29.7087       49.4081       79.1168    
  47  0.582904     -0.539733      -7.72892       7.72892       48.4120       56.1409    
  48  0.818994     -0.199679      -2.85938       2.85938       47.6925       50.5518    
  49  0.291406      -1.23304      -17.6570       17.6570       47.6468       65.3038    
  50  0.887104     -0.119794      -1.71543       1.71543       50.8673       52.5827    
  51  0.666242     -0.406102      -5.81534       5.81534       48.0552       53.8706    
  52  0.931047     -0.714460E-01  -1.02310       1.02310       52.4276       53.4507    
  53  0.169651      -1.77401      -25.4037       25.4037       48.0987       73.5024    
  54  0.228429      -1.47653      -21.1438       21.1438       48.8185       69.9622    
  55  0.453181     -0.791463      -11.3337       11.3337       48.8082       60.1419    
  56  0.376518     -0.976789      -13.9875       13.9875       47.6345       61.6220    
  57  0.551543     -0.595035      -8.52084       8.52084       47.7162       56.2371    
  58  0.837469     -0.177371      -2.53994       2.53994       51.5232       54.0631    
  59  0.436148     -0.829773      -11.8823       11.8823       48.2294       60.1117    
  60  0.245765      -1.40338      -20.0962       20.0962       48.3006       68.3969    
  61  0.727782     -0.317754      -4.55020       4.55020       48.1762       52.7264    
  62  0.677441     -0.389433      -5.57664       5.57664       48.8766       54.4533    
  63  0.835222     -0.180057      -2.57840       2.57840       49.5005       52.0789    
  64  0.964839     -0.357941E-01 -0.512568      0.512568       47.7345       48.2471    
  65  0.799790     -0.223406      -3.19915       3.19915       47.5660       50.7651    
  66  0.274169      -1.29401      -18.5301       18.5301       47.7330       66.2631    
  67  0.342685      -1.07094      -15.3358       15.3358       47.7672       63.1030    
  68  0.688325     -0.373494      -5.34840       5.34840       57.0215       62.3699    
  69  0.683936     -0.379890      -5.43999       5.43999       47.7987       53.2387    
  70  0.779136     -0.249570      -3.57382       3.57382       47.9931       51.5669    
loop,thermsimp(1:2)       23   15.9780       4.38884    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115         47.75          0.84          1.12         23.81          0.46          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    116         48.40          0.84          1.12         23.78          0.47          0.05         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       23
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       24
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      115     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -17.6523       17.6523       47.7345       65.3867    
   2  0.991852     -0.818183E-02 -0.117163      0.117163       48.2243       48.3414    
   3  0.317368      -1.14769      -16.4349       16.4349       48.2681       64.7030    
   4  0.737330     -0.304720      -4.36356       4.36356       48.4424       52.8059    
   5  0.834641     -0.180753      -2.58837       2.58837       47.6925       50.2808    
   6  0.464401     -0.767007      -10.9835       10.9835       47.5660       58.5494    
   7  0.592116     -0.524053      -7.50439       7.50439       47.9931       55.4975    
   8  0.464372     -0.767069      -10.9843       10.9843       49.5314       60.5157    
   9  0.636055E-01  -2.75505      -39.4521       39.4521       48.6567       88.1089    
  10  0.712927     -0.338376      -4.84551       4.84551       48.4284       53.2740    
  11  0.265597      -1.32578      -18.9850       18.9850       49.5005       68.4855    
  12  0.152318      -1.88178      -26.9470       26.9470       47.7601       74.7071    
  13  0.629580     -0.462703      -6.62586       6.62586       48.0744       54.7002    
  14  0.849464     -0.163150      -2.33629       2.33629       50.8673       53.2036    
  15  0.487816     -0.717817      -10.2791       10.2791       47.0527       57.3318    
  16  0.374667     -0.981718      -14.0581       14.0581       48.1762       62.2343    
  17  0.657383     -0.419488      -6.00702       6.00702       51.6227       57.6297    
  18  0.846901     -0.166172      -2.37956       2.37956       47.7096       50.0892    
  19  0.201185      -1.60353      -22.9624       22.9624       47.7987       70.7611    
  20  0.771980     -0.258797      -3.70595       3.70595       52.4276       56.1336    
  21  0.507739     -0.677788      -9.70586       9.70586       48.2199       57.9258    
  22  0.280262      -1.27203      -18.2154       18.2154       47.6585       65.8739    
  23  0.285359      -1.25401      -17.9573       17.9573       47.7675       65.7247    
  24  0.246191      -1.40165      -20.0714       20.0714       48.0552       68.1267    
  25  0.559989E-01  -2.88242      -41.2760       41.2760       51.5232       92.7992    
  26  0.330462      -1.10726      -15.8559       15.8559       47.4504       63.3063    
  27  0.899405     -0.106022      -1.51823       1.51823       48.8766       50.3949    
  28  0.637003     -0.450981      -6.45800       6.45800       48.2724       54.7304    
  29  0.699726E-01  -2.65965      -38.0859       38.0859       47.8763       85.9623    
  30  0.677191     -0.389802      -5.58193       5.58193       47.8653       53.4473    
  31  0.649507     -0.431542      -6.17964       6.17964       47.7378       53.9174    
  32  0.527986     -0.638685      -9.14591       9.14591       48.7631       57.9090    
  33  0.374870E-01  -3.28376      -47.0231       47.0231       47.9426       94.9657    
  34  0.448697     -0.801407      -11.4761       11.4761       48.4120       59.8880    
  35  0.809612     -0.211200      -3.02436       3.02436       47.7162       50.7406    
  36  0.836235     -0.178846      -2.56105       2.56105       48.7468       51.3079    
  37  0.198161      -1.61867      -23.1792       23.1792       47.6508       70.8301    
  38  0.222702      -1.50192      -21.5073       21.5073       47.1344       68.6418    
  39  0.888863     -0.117812      -1.68705       1.68705       47.7477       49.4347    
  40  0.868267     -0.141256      -2.02277       2.02277       52.2522       54.2750    
  41  0.164066      -1.80749      -25.8830       25.8830       52.4963       78.3793    
  42  0.163797      -1.80912      -25.9065       25.9065       48.2294       74.1359    
  43  0.883498     -0.123867      -1.77376       1.77376       48.8082       50.5819    
  44  0.749983     -0.287705      -4.11991       4.11991       47.6345       51.7544    
  45  0.666691     -0.405428      -5.80569       5.80569       57.0215       62.8272    
  46  0.978530     -0.217038E-01 -0.310796      0.310796       48.4295       48.7403    
  47  0.442024     -0.816391      -11.6906       11.6906       48.2138       59.9044    
  48  0.228080      -1.47806      -21.1657       21.1657       47.7233       68.8889    
  49  0.226174      -1.48645      -21.2858       21.2858       47.7672       69.0530    
  50  0.388394     -0.945736      -13.5428       13.5428       48.5919       62.1347    
  51  0.257425      -1.35703      -19.4325       19.4325       47.7893       67.2217    
  52  0.707288     -0.346317      -4.95923       4.95923       48.2399       53.1991    
  53  0.518387     -0.657032      -9.40864       9.40864       47.6468       57.0554    
  54  0.628700     -0.464102      -6.64589       6.64589       47.9746       54.6205    
  55  0.981249     -0.189295E-01 -0.271069      0.271069       47.7330       48.0041    
  56  0.928260     -0.744431E-01  -1.06602       1.06602       47.3977       48.4637    
  57  0.752004E-02  -4.89018      -70.0269       70.0269       48.3006       118.328    
  58  0.930611     -0.719140E-01  -1.02980       1.02980       47.2490       48.2788    
  59  0.552686     -0.592965      -8.49120       8.49120       48.6185       57.1097    
  60  0.695877     -0.362583      -5.19215       5.19215       48.8185       54.0106    
  61  0.432533     -0.838096      -12.0014       12.0014       48.1631       60.1645    
  62  0.127859      -2.05683      -29.4536       29.4536       47.7330       77.1866    
  63  0.304427      -1.18932      -17.0310       17.0310       48.0987       65.1297    
  64  0.938376     -0.636043E-01 -0.910807      0.910807       48.3863       49.2971    
  65  0.958131     -0.427711E-01 -0.612477      0.612477       49.4081       50.0206    
  66  0.177025      -1.73147      -24.7944       24.7944       47.7426       72.5371    
  67  0.352264      -1.04338      -14.9410       14.9410       48.5148       63.4558    
  68  0.915612     -0.881621E-01  -1.26247       1.26247       48.2589       49.5214    
  69  0.891986     -0.114305      -1.63683       1.63683       47.8226       49.4595    
  70  0.754865     -0.281216      -4.02699       4.02699       47.7450       51.7720    
loop,thermsimp(1:2)       24   17.6523      0.117163    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117         48.84          0.85          1.12         23.80          0.53          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118         55.57          0.84          1.12         23.80          0.46          0.04         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       24
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       25
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      117     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -27.5633       27.5633       47.7330       75.2963    
   2  0.438196     -0.825090      -11.8152       11.8152       47.2490       59.0642    
   3  0.637359     -0.450422      -6.45001       6.45001       48.2243       54.6743    
   4  0.122813      -2.09709      -30.0301       30.0301       47.3977       77.4279    
   5  0.926899     -0.759107E-01  -1.08703       1.08703       48.4295       49.5165    
   6  0.456580     -0.783992      -11.2267       11.2267       48.3863       59.6130    
   7  0.988763     -0.113008E-01 -0.161827      0.161827       47.7477       47.9095    
   8  0.499609     -0.693930      -9.93701       9.93701       47.8226       57.7596    
   9  0.432617     -0.837902      -11.9987       11.9987       48.2589       60.2576    
  10  0.403570     -0.907406      -12.9940       12.9940       49.4081       62.4021    
  11  0.435824     -0.830517      -11.8929       11.8929       47.7096       59.6025    
  12  0.504807     -0.683579      -9.78878       9.78878       47.6925       57.4812    
  13  0.778763     -0.250048      -3.58067       3.58067       48.8766       52.4573    
  14  0.429140     -0.845972      -12.1142       12.1142       48.8082       60.9224    
  15  0.597763     -0.514562      -7.36847       7.36847       47.7162       55.0847    
  16  0.425932     -0.853476      -12.2217       12.2217       48.7468       60.9685    
  17  0.825778     -0.191430      -2.74126       2.74126       47.6345       50.3757    
  18  0.448772     -0.801241      -11.4737       11.4737       47.7450       59.2187    
  19  0.701335     -0.354770      -5.08027       5.08027       48.4424       53.5226    
  20  0.425857     -0.853651      -12.2242       12.2242       48.2399       60.4641    
  21  0.800815     -0.222126      -3.18082       3.18082       50.8673       54.0481    
  22  0.724239     -0.322634      -4.62009       4.62009       48.4284       53.0485    
  23  0.312194      -1.16413      -16.6702       16.6702       47.8653       64.5356    
  24  0.796592     -0.227412      -3.25652       3.25652       47.7378       50.9943    
  25  0.164146      -1.80700      -25.8761       25.8761       48.8185       74.6946    
  26  0.503041     -0.687083      -9.83896       9.83896       52.2522       62.0912    
  27  0.640838     -0.444978      -6.37204       6.37204       47.9746       54.3467    
  28  0.327752      -1.11550      -15.9738       15.9738       48.0744       64.0482    
  29  0.720325     -0.328053      -4.69769       4.69769       48.2724       52.9701    
  30  0.447570     -0.803922      -11.5121       11.5121       47.9931       59.5052    
  31  0.377461     -0.974289      -13.9517       13.9517       52.4276       66.3793    
  32  0.951264     -0.499633E-01 -0.715470      0.715470       47.6468       48.3623    
  33  0.610405     -0.493632      -7.06877       7.06877       48.6185       55.6873    
  34  0.564697     -0.571466      -8.18334       8.18334       47.0527       55.2360    
  35  0.993998     -0.601974E-02 -0.862021E-01  0.862021E-01   51.6227       51.7089    
  36  0.908032     -0.964757E-01  -1.38152       1.38152       48.7631       50.1446    
  37  0.731210     -0.313055      -4.48292       4.48292       48.2199       52.7028    
  38  0.818812     -0.199901      -2.86256       2.86256       47.5660       50.4285    
  39  0.423172     -0.859976      -12.3148       12.3148       48.4120       60.7267    
  40  0.554414     -0.589843      -8.44650       8.44650       48.2138       56.6603    
  41  0.244903E-01  -3.70948      -53.1193       53.1193       48.1631       101.282    
  42  0.337898      -1.08501      -15.5372       15.5372       49.5314       65.0686    
  43  0.634521E-01  -2.75747      -39.4867       39.4867       48.5919       88.0786    
  44  0.824978     -0.192398      -2.75512       2.75512       48.1762       50.9314    
  45  0.954123     -0.469622E-01 -0.672494      0.672494       57.0215       57.6940    
  46  0.807852     -0.213376      -3.05552       3.05552       47.4504       50.5059    
  47  0.335430      -1.09234      -15.6422       15.6422       48.5148       64.1570    
  48  0.266194      -1.32353      -18.9528       18.9528       48.2681       67.2210    
  49  0.797818     -0.225874      -3.23450       3.23450       48.0987       51.3332    
  50  0.710601     -0.341644      -4.89230       4.89230       47.7345       52.6268    
  51  0.469059     -0.757026      -10.8405       10.8405       47.7675       58.6080    
  52  0.256457E-01  -3.66338      -52.4592       52.4592       47.6585       100.118    
  53  0.620630     -0.477020      -6.83088       6.83088       47.7893       54.6202    
  54  0.600237     -0.510431      -7.30932       7.30932       48.0552       55.3645    
  55  0.959467     -0.413769E-01 -0.592513      0.592513       49.5005       50.0930    
  56  0.541492     -0.613428      -8.78423       8.78423       47.1344       55.9187    
  57  0.577789     -0.548547      -7.85514       7.85514       47.7233       55.5784    
  58  0.701570     -0.354435      -5.07547       5.07547       47.7672       52.8426    
  59  0.274557E-01  -3.59518      -51.4826       51.4826       47.7987       99.2814    
  60  0.584746     -0.536578      -7.68374       7.68374       47.6508       55.3346    
  61  0.131184      -2.03115      -29.0859       29.0859       47.7426       76.8285    
  62  0.986883     -0.132037E-01 -0.189076      0.189076       48.2294       48.4185    
  63  0.257198      -1.35791      -19.4451       19.4451       47.7601       67.2052    
  64  0.831173     -0.184917      -2.64800       2.64800       47.7330       50.3810    
  65  0.332503      -1.10111      -15.7677       15.7677       52.4963       68.2640    
  66  0.123451      -2.09191      -29.9559       29.9559       47.8763       77.8323    
  67  0.545729     -0.605633      -8.67261       8.67261       48.6567       57.3294    
  68  0.194995      -1.63478      -23.4099       23.4099       51.5232       74.9331    
  69  0.811658     -0.208676      -2.98822       2.98822       47.9426       50.9308    
  70  0.610911     -0.492804      -7.05690       7.05690       48.8434       55.9003    
loop,thermsimp(1:2)       25   27.5633       11.8152    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119         48.79          0.83          1.12         23.89          0.61          0.05         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120         51.19          0.84          1.12         23.82          0.68          0.04         26.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       25
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       26
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      119     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -3.53882       3.53882       47.7477       51.2865    
   2  0.928800     -0.738619E-01  -1.05770       1.05770       47.6468       48.7045    
   3  0.727994     -0.317462      -4.54603       4.54603       48.2294       52.7754    
   4  0.109723E-01  -4.51238      -64.6169       64.6169       48.4295       113.046    
   5  0.160096      -1.83198      -26.2338       26.2338       49.5005       75.7343    
   6  0.497079     -0.699006      -10.0097       10.0097       48.7631       58.7728    
   7  0.789473     -0.236389      -3.38507       3.38507       47.6345       51.0195    
   8  0.763780     -0.269476      -3.85886       3.85886       47.7330       51.5919    
   9  0.217288      -1.52653      -21.8598       21.8598       47.5660       69.4258    
  10  0.867642     -0.141976      -2.03309       2.03309       47.4504       49.4835    
  11  0.740966     -0.299800      -4.29311       4.29311       47.9426       52.2357    
  12  0.999757     -0.242662E-03 -0.347490E-02  0.347490E-02   48.1762       48.1797    
  13  0.587476     -0.531920      -7.61704       7.61704       47.7378       55.3548    
  14  0.703619     -0.351518      -5.03371       5.03371       48.0987       53.1324    
  15  0.740946     -0.299828      -4.29351       4.29351       51.6227       55.9162    
  16  0.335927      -1.09086      -15.6210       15.6210       48.8766       64.4977    
  17  0.736553     -0.305774      -4.37865       4.37865       47.7345       52.1131    
  18  0.597397     -0.515174      -7.37724       7.37724       48.2199       55.5971    
  19  0.126601      -2.06672      -29.5952       29.5952       47.7672       77.3624    
  20  0.990194     -0.985477E-02 -0.141119      0.141119       48.2724       48.4135    
  21  0.716453     -0.333443      -4.77488       4.77488       48.4284       53.2033    
  22  0.279233E-01  -3.57829      -51.2408       51.2408       48.4424       99.6832    
  23  0.413932     -0.882054      -12.6309       12.6309       50.8673       63.4982    
  24  0.109516      -2.21168      -31.6711       31.6711       47.9746       79.6457    
  25  0.440749     -0.819279      -11.7320       11.7320       47.7893       59.5213    
  26  0.412115     -0.886453      -12.6939       12.6939       48.2243       60.9182    
  27  0.146963      -1.91758      -27.4595       27.4595       47.7162       75.1757    
  28  0.345919      -1.06155      -15.2013       15.2013       47.0527       62.2540    
  29  0.343614      -1.06824      -15.2970       15.2970       47.6508       62.9479    
  30  0.600334E-01  -2.81285      -40.2798       40.2798       48.0552       88.3350    
  31  0.751538     -0.285634      -4.09025       4.09025       47.7233       51.8135    
  32  0.878119     -0.129973      -1.86121       1.86121       48.6185       50.4797    
  33  0.544046     -0.608721      -8.71683       8.71683       48.8434       57.5602    
  34  0.931023     -0.714714E-01  -1.02346       1.02346       47.1344       48.1579    
  35  0.131968      -2.02520      -29.0006       29.0006       48.2138       77.2144    
  36  0.826694E-01  -2.49291      -35.6982       35.6982       48.6567       84.3549    
  37  0.174702E-02  -6.34984      -90.9291       90.9291       47.6925       138.622    
  38  0.233470      -1.45470      -20.8312       20.8312       57.0215       77.8527    
  39  0.232927      -1.45703      -20.8645       20.8645       47.8226       68.6871    
  40  0.958279     -0.426163E-01 -0.610262      0.610262       47.7675       48.3777    
  41  0.820100     -0.198330      -2.84006       2.84006       47.2490       50.0890    
  42  0.305797      -1.18483      -16.9667       16.9667       47.7450       64.7118    
  43  0.260853      -1.34380      -19.2431       19.2431       47.9931       67.2362    
  44  0.960408     -0.403967E-01 -0.578477      0.578477       47.7096       48.2881    
  45  0.318957      -1.14270      -16.3633       16.3633       48.3863       64.7496    
  46  0.146887      -1.91809      -27.4669       27.4669       48.2589       75.7258    
  47  0.787623     -0.238735      -3.41867       3.41867       48.2399       51.6585    
  48  0.452412     -0.793163      -11.3580       11.3580       48.4120       59.7700    
  49  0.218339      -1.52170      -21.7907       21.7907       48.8082       70.5988    
  50  0.177672      -1.72782      -24.7422       24.7422       48.7468       73.4890    
  51  0.928922     -0.737304E-01  -1.05581       1.05581       52.2522       53.3081    
  52  0.341447      -1.07456      -15.3876       15.3876       49.4081       64.7957    
  53  0.462674     -0.770732      -11.0368       11.0368       48.0744       59.1112    
  54  0.125513      -2.07534      -29.7187       29.7187       48.5148       78.2335    
  55  0.354899      -1.03592      -14.8343       14.8343       47.8653       62.6996    
  56  0.341830      -1.07344      -15.3716       15.3716       49.5314       64.9030    
  57  0.604983     -0.502555      -7.19654       7.19654       52.4276       59.6241    
  58  0.223932      -1.49641      -21.4285       21.4285       47.7601       69.1886    
  59  0.146473      -1.92091      -27.5073       27.5073       48.2681       75.7754    
  60  0.997224     -0.277992E-02 -0.398081E-01  0.398081E-01   52.4963       52.5361    
  61  0.430465     -0.842888      -12.0701       12.0701       48.8185       60.8886    
  62  0.712472     -0.339015      -4.85466       4.85466       51.5232       56.3779    
  63  0.303370      -1.19280      -17.0808       17.0808       47.7330       64.8138    
  64  0.676458E-01  -2.69347      -38.5702       38.5702       47.7426       86.3129    
  65  0.226497      -1.48502      -21.2654       21.2654       47.3977       68.6631    
  66  0.590955     -0.526015      -7.53249       7.53249       47.8763       55.4088    
  67  0.914813     -0.890359E-01  -1.27499       1.27499       48.5919       49.8669    
  68  0.157483      -1.84844      -26.4694       26.4694       47.7987       74.2681    
  69  0.117954E-01  -4.44005      -63.5811       63.5811       47.6585       111.240    
  70  0.589104     -0.529153      -7.57742       7.57742       48.7895       56.3669    
loop,thermsimp(1:2)       26   3.53882       1.05770    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121         47.77          0.84          1.11         23.83          0.48          0.05         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122         48.55          0.84          1.12         23.78          0.50          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    47.769        1.200     -1.881      3.167     -102.6      1.404    
                      0.3075      1.348     -99.70      3.686     0.1217E-01

                       2.254     -1.042      1.530      7219.      3604.    

                     -0.1976      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6244.      430.9    

                       1.433     -5.843     -4.040     -8.546      6.709    

                      -14.80     -3.558      5181.      0.000      9891.    



                       1617.     0.1308E+05 -4181.     0.1253E+05  6255.    

                       6035.     0.3091E-01 0.1966     0.1343E-01 0.1244    

                     -0.2486    -0.7866E-01 0.1934     0.1228     0.7048E-01



                     -0.4465    -0.7662      0.000     0.9327E-01-0.8864E-01

                      0.1343E-01 0.1130    -0.7116    -0.1387     0.2820E-01

                      0.5859E-01-0.1658E-01-0.6550     -1.198      7407.    



                      -1.041     -1.262     -2.281     -2.305    -0.3807    

                     -0.3252      9.210      8.688    -0.1952E+05 -4.000    

                     -0.5443     -3.164      9.305      8.877    -0.1908E+05



                      -4.000     0.4154    -0.4309      8.868      9.091    

                     -0.1908E+05 -7.000    -0.7373    -0.6598      9.047    

                       8.781    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.77
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       26
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       27
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      121     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -2.86786       2.86786       47.1344       50.0023    
   2  0.309452      -1.17295      -16.7966       16.7966       48.1762       64.9728    
   3  0.303638      -1.19192      -17.0682       17.0682       47.7096       64.7778    
   4  0.754457     -0.281757      -4.03473       4.03473       47.7675       51.8022    
   5  0.623133     -0.472996      -6.77326       6.77326       48.2724       55.0457    
   6  0.989422E-01  -2.31322      -33.1251       33.1251       47.6468       80.7719    
   7  0.695126     -0.363662      -5.20760       5.20760       47.4504       52.6580    
   8  0.832210E-01  -2.48626      -35.6029       35.6029       48.5919       84.1948    
   9  0.869521     -0.139813      -2.00211       2.00211       47.2490       49.2511    
  10  0.488136     -0.717160      -10.2697       10.2697       48.6185       58.8882    
  11  0.579877     -0.544940      -7.80349       7.80349       47.6345       55.4379    
  12  0.480435     -0.733064      -10.4974       10.4974       47.7477       58.2451    
  13  0.792626     -0.232404      -3.32800       3.32800       47.7330       51.0610    
  14  0.870230     -0.138998      -1.99043       1.99043       48.2399       50.2303    
  15  0.886361     -0.120631      -1.72742       1.72742       47.7233       49.4507    
  16  0.358181      -1.02672      -14.7025       14.7025       47.7345       62.4370    
  17  0.560125     -0.579594      -8.29974       8.29974       47.9426       56.2423    
  18  0.546151     -0.604859      -8.66152       8.66152       52.4963       61.1578    
  19  0.732086     -0.311858      -4.46577       4.46577       48.2294       52.6952    
  20  0.590102     -0.527460      -7.55317       7.55317       48.0987       55.6519    
  21  0.867355     -0.142307      -2.03783       2.03783       48.4284       50.4663    
  22  0.749758     -0.288005      -4.12421       4.12421       52.2522       56.3764    
  23  0.721970     -0.325772      -4.66502       4.66502       47.7378       52.4028    
  24  0.596865     -0.516065      -7.39000       7.39000       47.8763       55.2663    
  25  0.878161     -0.129925      -1.86051       1.86051       48.2199       50.0804    
  26  0.558752E-01  -2.88463      -41.3077       41.3077       51.6227       92.9304    
  27  0.555543     -0.587810      -8.41738       8.41738       48.7895       57.2069    
  28  0.597562     -0.514897      -7.37327       7.37327       51.5232       58.8965    
  29  0.995329     -0.468202E-02 -0.670461E-01  0.670461E-01   48.8434       48.9104    
  30  0.206787      -1.57606      -22.5691       22.5691       48.7631       71.3322    
  31  0.645457     -0.437797      -6.26921       6.26921       48.0744       54.3436    
  32  0.871352     -0.137710      -1.97199       1.97199       47.7893       49.7613    
  33  0.701360     -0.354733      -5.07975       5.07975       52.4276       57.5074    
  34  0.936151     -0.659784E-01 -0.944804      0.944804       48.4120       49.3568    
  35  0.590091     -0.527478      -7.55343       7.55343       48.8185       56.3719    
  36  0.750433     -0.287105      -4.11131       4.11131       48.2243       52.3356    
  37  0.326255      -1.12007      -16.0394       16.0394       47.0527       63.0921    
  38  0.873133     -0.135668      -1.94275       1.94275       47.8653       49.8081    
  39  0.621627     -0.475415      -6.80789       6.80789       47.6508       54.4587    
  40  0.153041      -1.87705      -26.8792       26.8792       50.8673       77.7464    
  41  0.196696      -1.62610      -23.2855       23.2855       48.8766       72.1622    
  42  0.365028      -1.00778      -14.4313       14.4313       47.7450       62.1764    
  43  0.398429     -0.920226      -13.1775       13.1775       48.3863       61.5638    
  44  0.549691     -0.598399      -8.56902       8.56902       49.4081       57.9771    
  45  0.994179     -0.583795E-02 -0.835989E-01  0.835989E-01   47.7330       47.8166    
  46  0.147335E-01  -4.21763      -60.3961       60.3961       49.5314       109.927    
  47  0.224737      -1.49282      -21.3771       21.3771       47.9931       69.3702    
  48  0.182172      -1.70281      -24.3840       24.3840       47.3977       71.7817    
  49  0.230919      -1.46569      -20.9885       20.9885       47.8226       68.8112    
  50  0.491818     -0.709647      -10.1621       10.1621       47.7601       57.9222    
  51  0.370754     -0.992217      -14.2084       14.2084       47.5660       61.7744    
  52  0.785622     -0.241279      -3.45509       3.45509       48.8082       52.2633    
  53  0.476284     -0.741742      -10.6217       10.6217       48.7468       59.3685    
  54  0.958799     -0.420736E-01 -0.602489      0.602489       47.7987       48.4012    
  55  0.305133      -1.18701      -16.9978       16.9978       47.7162       64.7141    
  56  0.270329      -1.30812      -18.7321       18.7321       48.2589       66.9910    
  57  0.130426      -2.03695      -29.1689       29.1689       49.5005       78.6694    
  58  0.222171      -1.50431      -21.5415       21.5415       48.2681       69.8097    
  59  0.233872      -1.45298      -20.8065       20.8065       48.2138       69.0203    
  60  0.916355E-02  -4.69252      -67.1964       67.1964       47.7672       114.964    
  61  0.400634     -0.914708      -13.0985       13.0985       57.0215       70.1200    
  62  0.354647E-01  -3.33922      -47.8173       47.8173       48.5148       96.3320    
  63  0.453450     -0.790870      -11.3252       11.3252       47.9746       59.2998    
  64  0.411527     -0.887880      -12.7144       12.7144       48.6567       61.3711    
  65  0.607753     -0.497987      -7.13112       7.13112       47.7426       54.8738    
  66  0.157481      -1.84845      -26.4696       26.4696       48.0552       74.5249    
  67  0.260711E-01  -3.64693      -52.2237       52.2237       48.4424       100.666    
  68  0.183987      -1.69289      -24.2420       24.2420       47.6585       71.9005    
  69  0.704951     -0.349627      -5.00663       5.00663       48.4295       53.4361    
  70  0.337767      -1.08540      -15.5428       15.5428       47.7694       63.3122    
loop,thermsimp(1:2)       27   2.86786       16.7966    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123         47.85          0.83          1.12         23.77          0.51          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124         49.66          0.84          1.12         23.76          0.64          0.04         26.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       27
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       28
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      123     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380      -3.04127       3.04127       47.7330       50.7743    
   2  0.162004E-01  -4.12272      -59.0370       59.0370       47.7987       106.836    
   3  0.446841E-01  -3.10814      -44.5082       44.5082       48.8434       93.3516    
   4  0.757954     -0.277132      -3.96851       3.96851       47.2490       51.2175    
   5  0.525315     -0.643757      -9.21854       9.21854       48.4120       57.6305    
   6  0.229940      -1.46994      -21.0494       21.0494       47.7233       68.7726    
   7  0.273310E-01  -3.59973      -51.5478       51.5478       47.7893       99.3371    
   8  0.228047      -1.47820      -21.1677       21.1677       47.8653       69.0331    
   9  0.963384E-01  -2.33989      -33.5070       33.5070       47.1344       80.6414    
  10  0.495504     -0.702179      -10.0551       10.0551       48.2199       58.2750    
  11  0.930436     -0.721018E-01  -1.03249       1.03249       48.2399       49.2723    
  12  0.138744      -1.97513      -28.2836       28.2836       48.4284       76.7121    
  13  0.676381     -0.390999      -5.59907       5.59907       47.7330       53.3321    
  14  0.763696     -0.269586      -3.86044       3.86044       47.7675       51.6279    
  15  0.282468      -1.26419      -18.1031       18.1031       48.8082       66.9113    
  16  0.359172      -1.02395      -14.6629       14.6629       48.2243       62.8872    
  17  0.392258     -0.935834      -13.4011       13.4011       47.7378       61.1388    
  18  0.524686     -0.644955      -9.23568       9.23568       47.4504       56.6861    
  19  0.850465     -0.161972      -2.31942       2.31942       48.2294       50.5488    
  20  0.227056      -1.48256      -21.2301       21.2301       48.4295       69.6595    
  21  0.942039     -0.597082E-01 -0.855015      0.855015       48.0744       48.9294    
  22  0.807336     -0.214016      -3.06469       3.06469       47.6508       50.7155    
  23  0.345853      -1.06174      -15.2040       15.2040       47.7426       62.9467    
  24  0.762940     -0.270575      -3.87461       3.87461       48.2724       52.1470    
  25  0.589959     -0.527702      -7.55663       7.55663       47.8763       55.4330    
  26  0.563539     -0.573518      -8.21272       8.21272       47.6345       55.8472    
  27  0.812044     -0.208201      -2.98142       2.98142       48.0987       51.0801    
  28  0.735850     -0.306729      -4.39233       4.39233       47.9426       52.3349    
  29  0.396292     -0.925605      -13.2546       13.2546       48.8185       62.0731    
  30  0.623568     -0.472298      -6.76326       6.76326       52.2522       59.0155    
  31  0.925937     -0.769486E-01  -1.10190       1.10190       48.7895       49.8914    
  32  0.880074     -0.127749      -1.82936       1.82936       52.4276       54.2570    
  33  0.379958     -0.967693      -13.8573       13.8573       47.7601       61.6174    
  34  0.842940E-01  -2.47344      -35.4195       35.4195       49.4081       84.8276    
  35  0.199092      -1.61399      -23.1122       23.1122       47.7477       70.8598    
  36  0.625899     -0.468566      -6.70981       6.70981       48.6185       55.3283    
  37  0.888337     -0.118405      -1.69554       1.69554       51.5232       53.2187    
  38  0.959633     -0.412048E-01 -0.590049      0.590049       47.9746       48.5647    
  39  0.289813      -1.23852      -17.7355       17.7355       48.7468       66.4823    
  40  0.889440     -0.117163      -1.67777       1.67777       52.4963       54.1741    
  41  0.797260     -0.226575      -3.24452       3.24452       48.6567       51.9013    
  42  0.451097     -0.796073      -11.3997       11.3997       48.3863       59.7860    
  43  0.609578     -0.494989      -7.08819       7.08819       47.5660       54.6542    
  44  0.910850     -0.933770E-01  -1.33715       1.33715       47.7450       49.0822    
  45  0.448191     -0.802536      -11.4922       11.4922       47.7345       59.2267    
  46  0.831229     -0.184850      -2.64703       2.64703       47.0527       49.6997    
  47  0.246260      -1.40137      -20.0675       20.0675       47.7694       67.8369    
  48  0.280480      -1.27125      -18.2042       18.2042       47.7162       65.9204    
  49  0.161513      -1.82317      -26.1076       26.1076       47.7096       73.8172    
  50  0.337020      -1.08761      -15.5745       15.5745       48.1762       63.7507    
  51  0.160136      -1.83173      -26.2302       26.2302       48.2589       74.4891    
  52  0.268039      -1.31662      -18.8539       18.8539       47.8226       66.6766    
  53  0.907744     -0.967928E-01  -1.38606       1.38606       48.2138       49.5998    
  54  0.237998      -1.43549      -20.5561       20.5561       47.9931       68.5492    
  55  0.932063     -0.703547E-01  -1.00747       1.00747       48.2681       49.2756    
  56  0.304233      -1.18996      -17.0402       17.0402       57.0215       74.0617    
  57  0.471578     -0.751672      -10.7639       10.7639       48.7631       59.5270    
  58  0.985625     -0.144798E-01 -0.207349      0.207349       47.3977       47.6051    
  59  0.576194     -0.551311      -7.89472       7.89472       47.6585       55.5532    
  60  0.561463     -0.577209      -8.26558       8.26558       48.8766       57.1422    
  61  0.762775     -0.270792      -3.87772       3.87772       48.0552       51.9329    
  62  0.728042     -0.317397      -4.54509       4.54509       50.8673       55.4124    
  63  0.246589      -1.40003      -20.0483       20.0483       49.5005       69.5488    
  64  0.128678      -2.05044      -29.3621       29.3621       47.6468       77.0089    
  65  0.646131     -0.436753      -6.25426       6.25426       48.5919       54.8461    
  66  0.520849E-01  -2.95488      -42.3136       42.3136       51.6227       93.9363    
  67  0.103665      -2.26659      -32.4573       32.4573       48.5148       80.9721    
  68  0.209683      -1.56216      -22.3700       22.3700       48.4424       70.8123    
  69  0.401865     -0.911640      -13.0546       13.0546       49.5314       62.5860    
  70  0.111589      -2.19294      -31.4026       31.4026       47.8510       79.2537    
loop,thermsimp(1:2)       28   3.04127       59.0370    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125         47.81          0.83          1.12         23.79          0.45          0.04         26.23
Just calling func    0   0         26.23


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    126         48.91          0.84          1.12         23.84          0.49          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       28
neval is:      125
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       29
neval is:      125


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      125     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -30.8616       30.8616       47.3977       78.2593    
   2  0.685048     -0.378267      -5.41674       5.41674       47.9746       53.3914    
   3  0.739526     -0.301746      -4.32097       4.32097       48.0744       52.3953    
   4  0.161448      -1.82357      -26.1134       26.1134       47.7450       73.8584    
   5  0.819608     -0.198929      -2.84865       2.84865       48.2399       51.0885    
   6  0.750679     -0.286777      -4.10661       4.10661       48.2681       52.3747    
   7  0.797409     -0.226388      -3.24185       3.24185       48.2138       51.4556    
   8  0.193123      -1.64443      -23.5481       23.5481       47.0527       70.6008    
   9  0.189346E-01  -3.96676      -56.8037       56.8037       48.7895       105.593    
  10  0.715264     -0.335103      -4.79864       4.79864       48.2294       53.0280    
  11  0.384856     -0.954886      -13.6739       13.6739       47.6508       61.3247    
  12  0.268023      -1.31668      -18.8548       18.8548       47.7330       66.5878    
  13  0.777164     -0.252104      -3.61010       3.61010       48.0987       51.7088    
  14  0.707495E-01  -2.64861      -37.9278       37.9278       47.2490       85.1768    
  15  0.233610      -1.45410      -20.8226       20.8226       47.7675       68.5901    
  16  0.193057      -1.64477      -23.5530       23.5530       48.6567       72.2097    
  17  0.486879     -0.719739      -10.3066       10.3066       48.0552       58.3618    
  18  0.735370     -0.307381      -4.40167       4.40167       48.2724       52.6741    
  19  0.147509      -1.91387      -27.4064       27.4064       47.9426       75.3490    
  20  0.739111     -0.302308      -4.32901       4.32901       51.5232       55.8522    
  21  0.886241     -0.120766      -1.72936       1.72936       47.7330       49.4624    
  22  0.158672      -1.84092      -26.3617       26.3617       52.4963       78.8580    
  23  0.143658      -1.94032      -27.7852       27.7852       52.4276       80.2128    
  24  0.637431E-02  -5.05548      -72.3940       72.3940       47.5660       119.960    
  25  0.753372     -0.283196      -4.05534       4.05534       48.5919       52.6472    
  26  0.555831     -0.587292      -8.40996       8.40996       48.6185       57.0285    
  27  0.280013      -1.27292      -18.2281       18.2281       50.8673       69.0953    
  28  0.811304     -0.209112      -2.99447       2.99447       47.8763       50.8708    
  29  0.972296E-02  -4.63327      -66.3479       66.3479       47.6585       114.006    
  30  0.713459     -0.337631      -4.83484       4.83484       47.6345       52.4693    
  31  0.194621      -1.63670      -23.4374       23.4374       47.4504       70.8878    
  32  0.492587     -0.708083      -10.1397       10.1397       48.8766       59.0163    
  33  0.759094E-01  -2.57821      -36.9198       36.9198       48.4120       85.3317    
  34  0.494544     -0.704119      -10.0829       10.0829       48.2199       58.3028    
  35  0.297023      -1.21395      -17.3836       17.3836       52.2522       69.6358    
  36  0.429878E-01  -3.14684      -45.0624       45.0624       47.7345       92.7969    
  37  0.490931     -0.711452      -10.1879       10.1879       48.7631       58.9510    
  38  0.534417     -0.626578      -8.97254       8.97254       48.3863       57.3588    
  39  0.254967      -1.36662      -19.5699       19.5699       47.7378       67.3076    
  40  0.995945     -0.406335E-02 -0.581868E-01  0.581868E-01   47.7601       47.8183    
  41  0.428814E-01  -3.14932      -45.0979       45.0979       48.8185       93.9164    
  42  0.332915      -1.09987      -15.7500       15.7500       49.5314       65.2814    
  43  0.657266     -0.419666      -6.00957       6.00957       48.2243       54.2338    
  44  0.301071      -1.20041      -17.1897       17.1897       47.7426       64.9324    
  45  0.998178     -0.182349E-02 -0.261123E-01  0.261123E-01   48.1762       48.2023    
  46  0.533372     -0.628536      -9.00057       9.00057       47.7162       56.7168    
  47  0.244746      -1.40753      -20.1557       20.1557       48.7468       68.9025    
  48  0.345321      -1.06328      -15.2261       15.2261       47.8226       63.0487    
  49  0.339541      -1.08016      -15.4678       15.4678       48.8082       64.2760    
  50  0.456434     -0.784311      -11.2313       11.2313       47.7694       59.0007    
  51  0.510210     -0.672933      -9.63633       9.63633       47.9931       57.6294    
  52  0.678441     -0.387958      -5.55553       5.55553       47.7233       53.2788    
  53  0.802552     -0.219958      -3.14978       3.14978       47.8653       51.0151    
  54  0.542503     -0.611562      -8.75751       8.75751       49.5005       58.2580    
  55  0.887113     -0.119783      -1.71528       1.71528       48.4295       50.1448    
  56  0.631934     -0.458971      -6.57242       6.57242       48.4424       55.0148    
  57  0.776760     -0.252624      -3.61756       3.61756       47.7477       51.3652    
  58  0.764990     -0.267893      -3.83620       3.83620       47.7096       51.5458    
  59  0.329328      -1.11070      -15.9051       15.9051       57.0215       72.9266    
  60  0.304425      -1.18933      -17.0311       17.0311       48.2589       65.2900    
  61  0.992863     -0.716266E-02 -0.102569      0.102569       48.4284       48.5310    
  62  0.545111     -0.606767      -8.68884       8.68884       47.6468       56.3356    
  63  0.215175      -1.53630      -21.9997       21.9997       47.8510       69.8507    
  64  0.486479     -0.720562      -10.3184       10.3184       47.1344       57.4528    
  65  0.323711      -1.12790      -16.1515       16.1515       48.5148       64.6662    
  66  0.339000      -1.08176      -15.4906       15.4906       49.4081       64.8988    
  67  0.494013     -0.705193      -10.0983       10.0983       48.8434       58.9417    
  68  0.496084     -0.701011      -10.0384       10.0384       51.6227       61.6611    
  69  0.736144     -0.306329      -4.38660       4.38660       47.7893       52.1759    
  70  0.106083E-01  -4.54612      -65.1000       65.1000       47.8079       112.908    
loop,thermsimp(1:2)       29   30.8616       5.41674    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    127         48.67          0.84          1.12         23.84          0.47          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    128         53.46          0.84          1.12         23.89          0.83          0.05         26.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       29
neval is:      127
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       30
neval is:      127


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      127     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -46.2239       46.2239       47.7601       93.9840    
   2  0.712690     -0.338709      -4.85028       4.85028       48.1762       53.0265    
   3  0.284498      -1.25703      -18.0005       18.0005       48.4284       66.4290    
   4  0.132414      -2.02182      -28.9523       28.9523       47.7330       76.6853    
   5  0.868558     -0.140920      -2.01797       2.01797       48.4295       50.4475    
   6  0.695240     -0.363498      -5.20525       5.20525       47.8763       53.0816    
   7  0.777362     -0.251849      -3.60645       3.60645       47.8653       51.4718    
   8  0.302494      -1.19569      -17.1222       17.1222       48.2399       65.3621    
   9  0.710188     -0.342225      -4.90063       4.90063       47.7477       52.6483    
  10  0.884530     -0.122698      -1.75703       1.75703       48.2138       49.9708    
  11  0.146421E-01  -4.22386      -60.4852       60.4852       47.7096       108.195    
  12  0.834801     -0.180562      -2.58563       2.58563       48.0987       50.6843    
  13  0.414011     -0.881863      -12.6282       12.6282       47.7893       60.4175    
  14  0.655777     -0.421935      -6.04207       6.04207       48.2681       54.3102    
  15  0.530106     -0.634679      -9.08854       9.08854       48.0744       57.1629    
  16  0.325231      -1.12322      -16.0844       16.0844       47.6345       63.7189    
  17  0.293550      -1.22571      -17.5520       17.5520       48.5919       66.1439    
  18  0.194161      -1.63907      -23.4713       23.4713       48.2724       71.7437    
  19  0.589029E-01  -2.83186      -40.5520       40.5520       48.2294       88.7814    
  20  0.385142     -0.954143      -13.6632       13.6632       47.7233       61.3865    
  21  0.287461      -1.24667      -17.8522       17.8522       47.9746       65.8268    
  22  0.528518     -0.637678      -9.13149       9.13149       48.2243       57.3557    
  23  0.517042     -0.659630      -9.44584       9.44584       48.4424       57.8882    
  24  0.453375     -0.791035      -11.3275       11.3275       51.5232       62.8507    
  25  0.695596     -0.362986      -5.19792       5.19792       47.6468       52.8447    
  26  0.645178     -0.438228      -6.27539       6.27539       47.7162       53.9916    
  27  0.696076     -0.362297      -5.18806       5.18806       48.6185       53.8066    
  28  0.483522     -0.726659      -10.4057       10.4057       48.3863       58.7919    
  29  0.155396E-01  -4.16436      -59.6332       59.6332       47.1344       106.768    
  30  0.883154     -0.124256      -1.77933       1.77933       47.9931       49.7724    
  31  0.525944     -0.642561      -9.20142       9.20142       49.5005       58.7019    
  32  0.746799     -0.291959      -4.18082       4.18082       48.2199       52.4007    
  33  0.458658     -0.779449      -11.1616       11.1616       48.0552       59.2169    
  34  0.614284     -0.487298      -6.97806       6.97806       48.8434       55.8214    
  35  0.581412     -0.542295      -7.76562       7.76562       48.7631       56.5287    
  36  0.820935     -0.197312      -2.82549       2.82549       47.7694       50.5949    
  37  0.852366     -0.159739      -2.28745       2.28745       48.8766       51.1641    
  38  0.527059     -0.640443      -9.17107       9.17107       47.6508       56.8219    
  39  0.376404     -0.977092      -13.9919       13.9919       51.6227       65.6146    
  40  0.729525E-01  -2.61795      -37.4887       37.4887       47.8226       85.3114    
  41  0.342258      -1.07219      -15.3537       15.3537       48.8082       64.1618    
  42  0.955065     -0.459761E-01 -0.658373      0.658373       48.5148       49.1731    
  43  0.508654E-01  -2.97857      -42.6529       42.6529       49.4081       92.0610    
  44  0.471716     -0.751379      -10.7597       10.7597       47.7426       58.5023    
  45  0.137118      -1.98691      -28.4524       28.4524       49.5314       77.9838    
  46  0.844826     -0.168625      -2.41469       2.41469       48.2589       50.6736    
  47  0.841708     -0.172322      -2.46763       2.46763       47.7330       50.2006    
  48  0.360396E-01  -3.32314      -47.5870       47.5870       47.7378       95.3248    
  49  0.953282     -0.478444E-01 -0.685127      0.685127       47.7675       48.4526    
  50  0.503408     -0.686355      -9.82853       9.82853       48.7468       58.5753    
  51  0.593854     -0.521122      -7.46242       7.46242       50.8673       58.3297    
  52  0.524910     -0.644528      -9.22957       9.22957       52.2522       61.4818    
  53  0.730244     -0.314377      -4.50184       4.50184       47.8510       52.3529    
  54  0.828919     -0.187632      -2.68688       2.68688       47.0527       49.7396    
  55  0.151629      -1.88632      -27.0119       27.0119       47.4504       74.4622    
  56  0.431672     -0.840089      -12.0300       12.0300       48.6567       60.6867    
  57  0.449333     -0.799990      -11.4558       11.4558       57.0215       68.4773    
  58  0.116759      -2.14764      -30.7540       30.7540       47.7450       78.4991    
  59  0.578588     -0.547165      -7.83535       7.83535       47.9426       55.7779    
  60  0.119282      -2.12627      -30.4480       30.4480       47.3977       77.8457    
  61  0.643272E-01  -2.74377      -39.2906       39.2906       52.4963       91.7869    
  62  0.906211     -0.984834E-01  -1.41027       1.41027       52.4276       53.8379    
  63  0.811859     -0.208429      -2.98468       2.98468       47.2490       50.2336    
  64  0.119821      -2.12175      -30.3833       30.3833       48.4120       78.7953    
  65  0.827508     -0.189336      -2.71127       2.71127       47.7345       50.4458    
  66  0.597713     -0.514645      -7.36966       7.36966       48.8185       56.1882    
  67  0.408976     -0.894099      -12.8034       12.8034       48.7895       61.5929    
  68  0.889044     -0.117608      -1.68414       1.68414       47.8079       49.4920    
  69  0.623536     -0.472349      -6.76399       6.76399       47.6585       54.4225    
  70  0.477389     -0.739423      -10.5885       10.5885       48.6695       59.2580    
loop,thermsimp(1:2)       30   46.2239       4.85028    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    129         47.84          0.84          1.11         23.80          0.52          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    130         48.84          0.83          1.12         23.79          0.57          0.04         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       30
neval is:      129
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       31
neval is:      129


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      129     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -19.9331       19.9331       47.7675       67.7006    
   2  0.247647      -1.39575      -19.9870       19.9870       48.5148       68.5018    
   3  0.396263     -0.925678      -13.2556       13.2556       47.8079       61.0635    
   4  0.386461     -0.950723      -13.6143       13.6143       47.0527       60.6670    
   5  0.729285     -0.315691      -4.52066       4.52066       47.9931       52.5138    
   6  0.665866     -0.406667      -5.82344       5.82344       48.2138       54.0372    
   7  0.385122     -0.954194      -13.6640       13.6640       47.7330       61.3970    
   8  0.625701     -0.468883      -6.71435       6.71435       47.2490       53.9633    
   9  0.392668     -0.934792      -13.3861       13.3861       47.7345       61.1206    
  10  0.698356     -0.359026      -5.14122       5.14122       48.4295       53.5707    
  11  0.537534E-01  -2.92335      -41.8621       41.8621       47.7694       89.6315    
  12  0.289307      -1.24027      -17.7605       17.7605       48.2589       66.0194    
  13  0.138460E-01  -4.27976      -61.2857       61.2857       48.0987       109.384    
  14  0.824110     -0.193451      -2.77019       2.77019       48.8766       51.6468    
  15  0.560983     -0.578065      -8.27783       8.27783       47.8653       56.1432    
  16  0.116087E-01  -4.45600      -63.8095       63.8095       47.8510       111.661    
  17  0.218033      -1.52311      -21.8108       21.8108       48.2199       70.0307    
  18  0.893705E-01  -2.41497      -34.5821       34.5821       47.7477       82.3297    
  19  0.304886      -1.18782      -17.0094       17.0094       47.6468       64.6562    
  20  0.179833      -1.71573      -24.5691       24.5691       48.1762       72.7453    
  21  0.867378     -0.142281      -2.03745       2.03745       47.8763       49.9138    
  22  0.243287      -1.41351      -20.2414       20.2414       48.6185       68.8599    
  23  0.772489     -0.258138      -3.69650       3.69650       52.4276       56.1241    
  24  0.321011      -1.13628      -16.2714       16.2714       47.7162       63.9877    
  25  0.499417     -0.694314      -9.94250       9.94250       48.2681       58.2106    
  26  0.396806     -0.924307      -13.2360       13.2360       47.6585       60.8945    
  27  0.580203E-01  -2.84696      -40.7682       40.7682       47.9426       88.7108    
  28  0.854206     -0.157583      -2.25657       2.25657       48.8434       51.0999    
  29  0.914649     -0.892145E-01  -1.27754       1.27754       48.8185       50.0960    
  30  0.167601      -1.78617      -25.5778       25.5778       48.7631       74.3409    
  31  0.350137      -1.04943      -15.0277       15.0277       47.6508       62.6786    
  32  0.522932     -0.648304      -9.28364       9.28364       48.0744       57.3580    
  33  0.538779     -0.618450      -8.85614       8.85614       48.2243       57.0804    
  34  0.693066     -0.366629      -5.25010       5.25010       48.4424       53.6924    
  35  0.361961      -1.01622      -14.5521       14.5521       50.8673       65.4194    
  36  0.310665      -1.16904      -16.7405       16.7405       47.7426       64.4832    
  37  0.818669     -0.200076      -2.86507       2.86507       48.7468       51.6119    
  38  0.582861     -0.539807      -7.72998       7.72998       49.5005       57.2305    
  39  0.401728     -0.911979      -13.0595       13.0595       48.3863       61.4457    
  40  0.171089      -1.76557      -25.2828       25.2828       48.0552       73.3381    
  41  0.980174     -0.200248E-01 -0.286753      0.286753       48.6695       48.9563    
  42  0.495496     -0.702196      -10.0554       10.0554       47.7893       57.8447    
  43  0.436683     -0.828549      -11.8647       11.8647       48.6567       60.5215    
  44  0.910411     -0.938588E-01  -1.34405       1.34405       47.7233       49.0673    
  45  0.649932     -0.430887      -6.17026       6.17026       52.2522       58.4225    
  46  0.755226     -0.280738      -4.02014       4.02014       48.7895       52.8097    
  47  0.927352     -0.754221E-01  -1.08004       1.08004       51.5232       52.6032    
  48  0.848028     -0.164842      -2.36052       2.36052       47.6345       49.9950    
  49  0.146193      -1.92283      -27.5347       27.5347       48.8082       76.3429    
  50  0.571278     -0.559879      -8.01742       8.01742       48.2399       56.2573    
  51  0.244418      -1.40888      -20.1750       20.1750       51.6227       71.7977    
  52  0.979014     -0.212091E-01 -0.303712      0.303712       47.9746       48.2783    
  53  0.235747      -1.44500      -20.6922       20.6922       48.5919       69.2841    
  54  0.486927     -0.719642      -10.3052       10.3052       48.4284       58.7336    
  55  0.694010     -0.365269      -5.23062       5.23062       57.0215       62.2521    
  56  0.392305     -0.935716      -13.3994       13.3994       48.2724       61.6718    
  57  0.334373      -1.09550      -15.6874       15.6874       47.4504       63.1378    
  58  0.526166     -0.642138      -9.19535       9.19535       47.7330       56.9284    
  59  0.701539     -0.354479      -5.07610       5.07610       47.3977       52.4738    
  60  0.447845     -0.803307      -11.5033       11.5033       49.5314       61.0347    
  61  0.927856     -0.748784E-01  -1.07225       1.07225       47.7450       48.8173    
  62  0.453274     -0.791258      -11.3307       11.3307       48.4120       59.7427    
  63  0.291736      -1.23190      -17.6408       17.6408       47.8226       65.4634    
  64  0.497643E-02  -5.30304      -75.9390       75.9390       48.2294       124.168    
  65  0.972200E-01  -2.33078      -33.3765       33.3765       52.4963       85.8728    
  66  0.821987     -0.196031      -2.80714       2.80714       49.4081       52.2153    
  67  0.652134     -0.427506      -6.12184       6.12184       47.7601       53.8820    
  68  0.774447     -0.255606      -3.66026       3.66026       47.7378       51.3980    
  69  0.103131      -2.27176      -32.5314       32.5314       47.1344       79.6658    
  70  0.767617E-01  -2.56705      -36.7599       36.7599       47.8400       84.5999    
loop,thermsimp(1:2)       31   19.9331       19.9870    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    131         48.28          0.84          1.12         23.79          0.50          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    132         52.40          0.84          1.11         23.80          0.48          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       31
neval is:      131
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       32
neval is:      131


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      131     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.563860E-01  0.563860E-01   47.9746       48.0310    
   2  0.758684E-02  -4.88134      -69.9003       69.9003       47.7450       117.645    
   3  0.404439     -0.905254      -12.9631       12.9631       48.6695       61.6327    
   4  0.947917E-01  -2.35607      -33.7387       33.7387       47.7233       81.4620    
   5  0.834417     -0.181022      -2.59222       2.59222       47.8763       50.4686    
   6  0.891274     -0.115104      -1.64827       1.64827       47.6345       49.2827    
   7  0.744451     -0.295108      -4.22592       4.22592       48.8185       53.0444    
   8  0.559638     -0.580466      -8.31221       8.31221       48.8434       57.1556    
   9  0.821724     -0.196351      -2.81172       2.81172       47.7378       50.5495    
  10  0.847292     -0.165710      -2.37294       2.37294       48.7468       51.1197    
  11  0.661676     -0.412979      -5.91382       5.91382       48.8766       54.7905    
  12  0.993427     -0.659478E-02 -0.944366E-01  0.944366E-01   49.4081       49.5026    
  13  0.425996     -0.853326      -12.2195       12.2195       47.3977       59.6173    
  14  0.673132     -0.395813      -5.66800       5.66800       47.9931       53.6611    
  15  0.234810      -1.44898      -20.7492       20.7492       51.5232       72.2724    
  16  0.122926      -2.09617      -30.0170       30.0170       48.7895       78.8065    
  17  0.523553     -0.647118      -9.26666       9.26666       48.4295       57.6961    
  18  0.959317     -0.415333E-01 -0.594753      0.594753       48.4424       49.0371    
  19  0.321726      -1.13406      -16.2396       16.2396       47.7601       63.9997    
  20  0.493112     -0.707018      -10.1244       10.1244       47.2490       57.3734    
  21  0.416134     -0.876748      -12.5549       12.5549       48.2138       60.7687    
  22  0.409432     -0.892985      -12.7875       12.7875       52.4276       65.2151    
  23  0.657956     -0.418617      -5.99456       5.99456       47.8653       53.8599    
  24  0.904324     -0.100567      -1.44012       1.44012       48.2399       49.6800    
  25  0.714426     -0.336276      -4.81544       4.81544       47.7330       52.5484    
  26  0.150521      -1.89365      -27.1169       27.1169       48.2243       75.3411    
  27  0.758740     -0.276096      -3.95367       3.95367       49.5005       53.4542    
  28  0.359105      -1.02414      -14.6656       14.6656       48.0744       62.7399    
  29  0.666937     -0.405060      -5.80041       5.80041       47.7893       53.5897    
  30  0.343213      -1.06940      -15.3138       15.3138       48.2681       63.5819    
  31  0.484849     -0.723918      -10.3664       10.3664       52.2522       62.6187    
  32  0.874661     -0.133919      -1.91771       1.91771       48.4284       50.3461    
  33  0.994710     -0.530415E-02 -0.759549E-01  0.759549E-01   48.4120       48.4879    
  34  0.821923     -0.196109      -2.80826       2.80826       48.6567       51.4650    
  35  0.954096E-02  -4.65216      -66.6185       66.6185       47.0527       113.671    
  36  0.240030      -1.42699      -20.4343       20.4343       47.6585       68.0928    
  37  0.279003      -1.27653      -18.2798       18.2798       49.5314       67.8112    
  38  0.553830     -0.590898      -8.46160       8.46160       47.8079       56.2695    
  39  0.400809     -0.914271      -13.0923       13.0923       47.7345       60.8268    
  40  0.146125      -1.92330      -27.5414       27.5414       47.7330       75.2744    
  41  0.811879     -0.208403      -2.98432       2.98432       48.3863       51.3706    
  42  0.349149      -1.05226      -15.0682       15.0682       48.2724       63.3406    
  43  0.897422     -0.108229      -1.54983       1.54983       57.0215       58.5713    
  44  0.114492      -2.16725      -31.0348       31.0348       47.6508       78.6857    
  45  0.831901E-01  -2.48663      -35.6083       35.6083       47.4504       83.0586    
  46  0.721169     -0.326882      -4.68092       4.68092       47.7162       52.3971    
  47  0.801724     -0.220991      -3.16457       3.16457       47.7426       50.9072    
  48  0.466569     -0.762349      -10.9168       10.9168       47.6468       58.5636    
  49  0.103404      -2.26911      -32.4935       32.4935       50.8673       83.3607    
  50  0.417206     -0.874175      -12.5181       12.5181       47.8226       60.3407    
  51  0.267666      -1.31802      -18.8738       18.8738       48.2589       67.1327    
  52  0.670232     -0.400131      -5.72984       5.72984       47.7675       53.4973    
  53  0.161265      -1.82470      -26.1296       26.1296       48.5148       74.6443    
  54  0.414706     -0.880185      -12.6042       12.6042       48.6185       61.2227    
  55  0.501015     -0.691119      -9.89676       9.89676       48.5919       58.4886    
  56  0.516090     -0.661474      -9.47225       9.47225       48.2199       57.6921    
  57  0.424740     -0.856278      -12.2618       12.2618       51.6227       63.8845    
  58  0.303796      -1.19140      -17.0607       17.0607       48.1762       65.2369    
  59  0.803455     -0.218834      -3.13368       3.13368       48.0552       51.1889    
  60  0.416256     -0.876456      -12.5508       12.5508       48.7631       61.3139    
  61  0.760689     -0.273531      -3.91693       3.91693       48.8082       52.7251    
  62  0.995587     -0.442238E-02 -0.633281E-01  0.633281E-01   47.1344       47.1978    
  63  0.961804     -0.389449E-01 -0.557687      0.557687       47.7477       48.3054    
  64  0.321618      -1.13439      -16.2444       16.2444       47.8400       64.0844    
  65  0.850055     -0.162454      -2.32633       2.32633       52.4963       54.8226    
  66  0.408700     -0.894773      -12.8131       12.8131       47.9426       60.7556    
  67  0.204039E-01  -3.89203      -55.7335       55.7335       47.7694       103.503    
  68  0.195538      -1.63200      -23.3701       23.3701       48.0987       71.4688    
  69  0.577737     -0.548636      -7.85641       7.85641       47.8510       55.7075    
  70  0.958394     -0.424960E-01 -0.608538      0.608538       48.2784       48.8869    
loop,thermsimp(1:2)       32  0.563860E-01   69.9003    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    133         47.71          0.83          1.11         23.83          0.44          0.05         26.27
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    134         48.13          0.84          1.11         23.78          0.56          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.71
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       32
neval is:      133
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       33
neval is:      133


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      133     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -11.2577       11.2577       47.1344       58.3922    
   2  0.588265E-01  -2.83316      -40.5706       40.5706       47.9746       88.5452    
   3  0.787103E-01  -2.54198      -36.4009       36.4009       47.7477       84.1486    
   4  0.597713     -0.514644      -7.36965       7.36965       48.4120       55.7816    
   5  0.110741      -2.20056      -31.5118       31.5118       48.2784       79.7902    
   6  0.677861     -0.388813      -5.56776       5.56776       48.4424       54.0101    
   7  0.307724      -1.17855      -16.8767       16.8767       47.6345       64.5112    
   8  0.550587     -0.596770      -8.54569       8.54569       49.4081       57.9538    
   9  0.601295     -0.508669      -7.28409       7.28409       48.2399       55.5239    
  10  0.487121     -0.719243      -10.2995       10.2995       48.4284       58.7279    
  11  0.146295      -1.92213      -27.5247       27.5247       47.8763       75.4010    
  12  0.714050     -0.336802      -4.82297       4.82297       47.7378       52.5607    
  13  0.723089     -0.324223      -4.64285       4.64285       47.7426       52.3855    
  14  0.805432     -0.216376      -3.09849       3.09849       48.7468       51.8453    
  15  0.123280      -2.09329      -29.9758       29.9758       48.0552       78.0310    
  16  0.853039     -0.158950      -2.27615       2.27615       48.3863       50.6624    
  17  0.288289      -1.24379      -17.8110       17.8110       48.6567       66.4677    
  18  0.705126     -0.349379      -5.00308       5.00308       47.7162       52.7193    
  19  0.772420     -0.258227      -3.69778       3.69778       47.7330       51.4308    
  20  0.962845     -0.378631E-01 -0.542196      0.542196       48.8082       49.3504    
  21  0.245802      -1.40323      -20.0941       20.0941       48.8185       68.9126    
  22  0.752702     -0.284087      -4.06809       4.06809       49.5005       53.5686    
  23  0.729896     -0.314853      -4.50866       4.50866       47.7675       52.2761    
  24  0.869278     -0.140092      -2.00611       2.00611       47.7893       49.7954    
  25  0.597817E-01  -2.81706      -40.3400       40.3400       47.9931       88.3331    
  26  0.984108     -0.160195E-01 -0.229398      0.229398       47.8653       48.0947    
  27  0.278288      -1.27910      -18.3166       18.3166       48.8766       67.1932    
  28  0.588278     -0.530555      -7.59750       7.59750       52.4963       60.0938    
  29  0.807614     -0.213671      -3.05975       3.05975       47.8510       50.9108    
  30  0.428679     -0.847047      -12.1296       12.1296       47.8079       59.9375    
  31  0.452991     -0.791883      -11.3397       11.3397       48.8434       60.1831    
  32  0.678742     -0.387514      -5.54917       5.54917       47.2490       52.7981    
  33  0.504500     -0.684188      -9.79750       9.79750       48.2199       58.0174    
  34  0.894800     -0.111155      -1.59173       1.59173       48.4295       50.0212    
  35  0.854311     -0.157461      -2.25482       2.25482       48.5919       50.8467    
  36  0.756230     -0.279410      -4.00112       4.00112       47.6468       51.6479    
  37  0.744369     -0.295219      -4.22751       4.22751       57.0215       61.2490    
  38  0.435758     -0.830668      -11.8951       11.8951       47.3977       59.2928    
  39  0.677387     -0.389513      -5.57779       5.57779       47.8226       53.4004    
  40  0.504989     -0.683219      -9.78363       9.78363       47.9426       57.7262    
  41  0.325676      -1.12185      -16.0648       16.0648       48.2138       64.2786    
  42  0.147207      -1.91591      -27.4357       27.4357       47.7345       75.1702    
  43  0.432041     -0.839234      -12.0178       12.0178       48.6185       60.6363    
  44  0.615972     -0.484555      -6.93877       6.93877       48.7631       55.7019    
  45  0.150867      -1.89136      -27.0841       27.0841       48.6695       75.7536    
  46  0.464307     -0.767210      -10.9864       10.9864       52.2522       63.2386    
  47  0.379753     -0.968234      -13.8650       13.8650       48.0744       61.9394    
  48  0.886192     -0.120822      -1.73016       1.73016       48.2724       50.0026    
  49  0.231751E-01  -3.76468      -53.9098       53.9098       48.2681       102.178    
  50  0.257662      -1.35611      -19.4193       19.4193       51.6227       71.0420    
  51  0.470381E-01  -3.05680      -43.7730       43.7730       47.7601       91.5332    
  52  0.972366     -0.280233E-01 -0.401291      0.401291       47.8400       48.2413    
  53  0.242054      -1.41860      -20.3141       20.3141       52.4276       72.7418    
  54  0.660577     -0.414642      -5.93764       5.93764       48.1762       54.1139    
  55  0.234396      -1.45074      -20.7745       20.7745       48.2589       69.0334    
  56  0.891547     -0.114797      -1.64388       1.64388       49.5314       51.1753    
  57  0.408879E-01  -3.19692      -45.7796       45.7796       47.6585       93.4381    
  58  0.577007     -0.549901      -7.87452       7.87452       48.0987       55.9732    
  59  0.851462     -0.160801      -2.30265       2.30265       51.5232       53.8258    
  60  0.733240     -0.310283      -4.44322       4.44322       48.5148       52.9580    
  61  0.219002E-01  -3.82126      -54.7200       54.7200       47.7330       102.453    
  62  0.293643      -1.22539      -17.5475       17.5475       48.2243       65.7717    
  63  0.552105     -0.594017      -8.50626       8.50626       47.6508       56.1571    
  64  0.638007E-01  -2.75199      -39.4082       39.4082       48.7895       88.1977    
  65  0.332554      -1.10095      -15.7655       15.7655       47.7233       63.4888    
  66  0.365239      -1.00720      -14.4231       14.4231       47.4504       61.8735    
  67  0.160984      -1.82645      -26.1546       26.1546       50.8673       77.0218    
  68  0.149423      -1.90098      -27.2218       27.2218       47.7694       74.9912    
  69  0.142989      -1.94499      -27.8521       27.8521       47.0527       74.9048    
  70  0.516056     -0.661540      -9.47318       9.47318       47.7100       57.1832    
loop,thermsimp(1:2)       33   11.2577       40.5706    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    135         47.90          0.84          1.12         23.80          0.54          0.04         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    136         48.85          0.83          1.12         23.84          0.46          0.04         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       33
neval is:      135
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       34
neval is:      135


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      135     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -33.5336       33.5336       47.8653       81.3989    
   2  0.298819      -1.20792      -17.2973       17.2973       47.8400       65.1373    
   3  0.706385     -0.347595      -4.97753       4.97753       48.8082       53.7857    
   4  0.958764     -0.421100E-01 -0.603010      0.603010       47.7893       48.3923    
   5  0.306496      -1.18255      -16.9340       16.9340       48.2724       65.2064    
   6  0.905447     -0.993270E-01  -1.42235       1.42235       48.4295       49.8518    
   7  0.234113      -1.45195      -20.7918       20.7918       48.3863       69.1780    
   8  0.704141     -0.350777      -5.02309       5.02309       48.5919       53.6150    
   9  0.908200     -0.962902E-01  -1.37887       1.37887       47.8510       49.2299    
  10  0.656383     -0.421011      -6.02884       6.02884       49.5314       55.5602    
  11  0.967894     -0.326327E-01 -0.467297      0.467297       47.7330       48.2003    
  12  0.754670     -0.281475      -4.03069       4.03069       47.6468       51.6775    
  13  0.488960     -0.715475      -10.2455       10.2455       48.7468       58.9923    
  14  0.451577     -0.795009      -11.3844       11.3844       47.7675       59.1519    
  15  0.387599E-01  -3.25037      -46.5449       46.5449       47.7426       94.2876    
  16  0.210942E-02  -6.16134      -88.2298       88.2298       47.7378       135.968    
  17  0.656530     -0.420787      -6.02562       6.02562       47.7162       53.7419    
  18  0.181246      -1.70790      -24.4570       24.4570       47.2490       71.7059    
  19  0.758879     -0.275913      -3.95105       3.95105       48.5148       52.4658    
  20  0.392052     -0.936362      -13.4086       13.4086       47.8226       61.2312    
  21  0.406710     -0.899654      -12.8830       12.8830       49.5005       62.3835    
  22  0.830107     -0.186201      -2.66637       2.66637       51.5232       54.1896    
  23  0.311833      -1.16529      -16.6868       16.6868       48.4424       65.1292    
  24  0.945407     -0.561396E-01 -0.803914      0.803914       48.1762       48.9801    
  25  0.303319      -1.19297      -17.0832       17.0832       48.2399       65.3231    
  26  0.284230      -1.25797      -18.0140       18.0140       48.7631       66.7771    
  27  0.292492      -1.22932      -17.6037       17.6037       48.4120       66.0157    
  28  0.401496     -0.912557      -13.0677       13.0677       48.0987       61.1664    
  29  0.379648     -0.968510      -13.8690       13.8690       47.6508       61.5198    
  30  0.723496E-01  -2.62625      -37.6076       37.6076       47.7100       85.3176    
  31  0.940338     -0.615157E-01 -0.880899      0.880899       47.9426       48.8235    
  32  0.766237     -0.266264      -3.81287       3.81287       49.4081       53.2210    
  33  0.984920     -0.151946E-01 -0.217585      0.217585       48.2199       48.4375    
  34  0.552546     -0.593218      -8.49483       8.49483       47.1344       55.6293    
  35  0.735557     -0.307128      -4.39804       4.39804       48.4284       52.8265    
  36  0.142195      -1.95056      -27.9318       27.9318       47.3977       75.3295    
  37  0.304783      -1.18816      -17.0143       17.0143       47.8079       64.8222    
  38  0.868582     -0.140894      -2.01759       2.01759       52.4963       54.5139    
  39  0.382741     -0.960397      -13.7528       13.7528       48.8434       62.5962    
  40  0.273812      -1.29531      -18.5488       18.5488       48.6185       67.1673    
  41  0.601920     -0.507631      -7.26923       7.26923       57.0215       64.2907    
  42  0.827744     -0.189051      -2.70720       2.70720       47.4504       50.1576    
  43  0.881186E-01  -2.42907      -34.7841       34.7841       48.0744       82.8584    
  44  0.386744     -0.949994      -13.6038       13.6038       52.2522       65.8561    
  45  0.852312     -0.159803      -2.28836       2.28836       47.7233       50.0116    
  46  0.830189     -0.186102      -2.66497       2.66497       48.2138       50.8787    
  47  0.216531      -1.53002      -21.9098       21.9098       47.6345       69.5442    
  48  0.835540     -0.179677      -2.57296       2.57296       48.2243       50.7972    
  49  0.962152     -0.385824E-01 -0.552497      0.552497       48.6567       49.2092    
  50  0.866477     -0.143320      -2.05232       2.05232       48.8766       50.9290    
  51  0.640111     -0.446114      -6.38830       6.38830       48.8185       55.2068    
  52  0.103467      -2.26850      -32.4847       32.4847       48.2589       80.7436    
  53  0.746080     -0.292923      -4.19463       4.19463       51.6227       55.8173    
  54  0.154266      -1.86908      -26.7650       26.7650       52.4276       79.1926    
  55  0.479981     -0.734008      -10.5109       10.5109       47.0527       57.5636    
  56  0.641740     -0.443572      -6.35191       6.35191       47.7694       54.1213    
  57  0.282342      -1.26463      -18.1094       18.1094       47.7345       65.8439    
  58  0.691857     -0.368376      -5.27511       5.27511       47.8763       53.1515    
  59  0.774818     -0.255127      -3.65340       3.65340       48.6695       52.3229    
  60  0.950647     -0.506124E-01 -0.724765      0.724765       50.8673       51.5920    
  61  0.946272E-01  -2.35781      -33.7636       33.7636       48.0552       81.8188    
  62  0.936976     -0.650979E-01 -0.932195      0.932195       48.2784       49.2106    
  63  0.339755      -1.07953      -15.4588       15.4588       47.7477       63.2065    
  64  0.781991     -0.245913      -3.52144       3.52144       48.7895       52.3110    
  65  0.524538     -0.645237      -9.23973       9.23973       47.9931       57.2328    
  66  0.740186     -0.300853      -4.30819       4.30819       47.9746       52.2828    
  67  0.713516     -0.337550      -4.83368       4.83368       47.7601       52.5938    
  68  0.760009     -0.274425      -3.92974       3.92974       47.6585       51.5882    
  69  0.813040     -0.206975      -2.96386       2.96386       48.2681       51.2320    
  70  0.177817E-01  -4.02959      -57.7033       57.7033       47.9044       105.608    
loop,thermsimp(1:2)       34   33.5336       17.2973    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    137         47.87          0.84          1.12         23.81          0.52          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    138         48.51          0.84          1.12         23.81          0.47          0.04         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       34
neval is:      137
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       35
neval is:      137


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      137     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -15.1115       15.1115       47.7330       62.8445    
   2  0.175000      -1.74297      -24.9592       24.9592       47.7893       72.7485    
   3  0.131587      -2.02809      -29.0421       29.0421       48.2199       77.2620    
   4  0.301717      -1.19826      -17.1590       17.1590       47.9426       65.1016    
   5  0.166877      -1.79050      -25.6398       25.6398       48.1762       73.8160    
   6  0.481073     -0.731736      -10.4784       10.4784       48.6567       59.1351    
   7  0.706381     -0.347600      -4.97760       4.97760       48.2784       53.2560    
   8  0.702617     -0.352943      -5.05411       5.05411       47.8510       52.9052    
   9  0.552795     -0.592767      -8.48837       8.48837       48.4295       56.9179    
  10  0.495420     -0.702349      -10.0576       10.0576       47.7233       57.7808    
  11  0.479343     -0.735339      -10.5300       10.5300       47.4504       57.9804    
  12  0.462659     -0.770765      -11.0373       11.0373       48.2243       59.2615    
  13  0.631315E-01  -2.76253      -39.5592       39.5592       48.2138       87.7730    
  14  0.785681     -0.241205      -3.45403       3.45403       48.8766       52.3307    
  15  0.767932     -0.264055      -3.78124       3.78124       48.2681       52.0494    
  16  0.262689E-01  -3.63937      -52.1154       52.1154       47.6585       99.7739    
  17  0.871353     -0.137708      -1.97197       1.97197       50.8673       52.8392    
  18  0.618350     -0.480701      -6.88359       6.88359       47.6468       54.5304    
  19  0.196090      -1.62918      -23.3297       23.3297       47.9746       71.3044    
  20  0.925050     -0.779078E-01  -1.11563       1.11563       48.7895       49.9052    
  21  0.903269     -0.101735      -1.45684       1.45684       48.6695       50.1263    
  22  0.958828     -0.420436E-01 -0.602060      0.602060       48.5148       49.1168    
  23  0.969274     -0.312081E-01 -0.446897      0.446897       47.7601       48.2070    
  24  0.313932      -1.15858      -16.5907       16.5907       48.4284       65.0192    
  25  0.106324      -2.24126      -32.0947       32.0947       47.8763       79.9710    
  26  0.718705     -0.330304      -4.72992       4.72992       49.4081       54.1380    
  27  0.751116     -0.286195      -4.09828       4.09828       48.5919       52.6902    
  28  0.996391     -0.361592E-02 -0.517796E-01  0.517796E-01   47.7162       47.7680    
  29  0.313387      -1.16032      -16.6156       16.6156       48.8082       65.4238    
  30  0.305057      -1.18726      -17.0014       17.0014       47.7694       64.7708    
  31  0.408833     -0.894447      -12.8084       12.8084       51.5232       64.3316    
  32  0.589856     -0.527877      -7.55915       7.55915       52.4963       60.0555    
  33  0.808683     -0.212349      -3.04081       3.04081       48.8185       51.8593    
  34  0.481635     -0.730569      -10.4617       10.4617       49.5314       59.9930    
  35  0.677481     -0.389374      -5.57579       5.57579       47.1344       52.7102    
  36  0.673605     -0.395111      -5.65795       5.65795       51.6227       57.2807    
  37  0.409374E-01  -3.19571      -45.7623       45.7623       47.9931       93.7554    
  38  0.362144      -1.01571      -14.5449       14.5449       47.0527       61.5976    
  39  0.364718E-01  -3.31122      -47.4163       47.4163       48.7468       96.1631    
  40  0.280272      -1.27199      -18.2148       18.2148       47.7675       65.9823    
  41  0.532528     -0.630120      -9.02326       9.02326       48.0987       57.1220    
  42  0.901591     -0.103595      -1.48347       1.48347       47.8226       49.3061    
  43  0.262858      -1.33614      -19.1334       19.1334       47.6508       66.7842    
  44  0.168755      -1.77931      -25.4795       25.4795       49.5005       74.9801    
  45  0.504619     -0.683952      -9.79412       9.79412       48.8434       58.6375    
  46  0.900650     -0.104639      -1.49842       1.49842       47.7477       49.2461    
  47  0.438495     -0.824406      -11.8054       11.8054       57.0215       68.8269    
  48  0.984597     -0.155233E-01 -0.222293      0.222293       47.8079       48.0302    
  49  0.469739     -0.755579      -10.8198       10.8198       48.4424       59.2622    
  50  0.252111      -1.37789      -19.7312       19.7312       47.8400       67.5712    
  51  0.764692     -0.268282      -3.84178       3.84178       48.2724       52.1142    
  52  0.848445     -0.164351      -2.35348       2.35348       48.2399       50.5933    
  53  0.705739     -0.348509      -4.99062       4.99062       47.7345       52.7251    
  54  0.449895     -0.798741      -11.4379       11.4379       52.2522       63.6901    
  55  0.742135     -0.298224      -4.27054       4.27054       48.4120       52.6825    
  56  0.305311      -1.18642      -16.9895       16.9895       48.7631       65.7526    
  57  0.798408     -0.225136      -3.22392       3.22392       48.6185       51.8424    
  58  0.807590     -0.213700      -3.06017       3.06017       48.3863       51.4464    
  59  0.768432     -0.263404      -3.77191       3.77191       47.6345       51.4064    
  60  0.895397     -0.110488      -1.58218       1.58218       47.2490       48.8311    
  61  0.585964     -0.534497      -7.65395       7.65395       47.3977       55.0517    
  62  0.785258     -0.241743      -3.46173       3.46173       52.4276       55.8893    
  63  0.311021      -1.16790      -16.7241       16.7241       48.2589       64.9830    
  64  0.803571     -0.218690      -3.13162       3.13162       47.8653       50.9970    
  65  0.879509     -0.128391      -1.83855       1.83855       48.0552       49.8938    
  66  0.605375     -0.501907      -7.18726       7.18726       48.0744       55.2616    
  67  0.774979     -0.254920      -3.65043       3.65043       47.7100       51.3604    
  68  0.621445     -0.475708      -6.81209       6.81209       47.7426       54.5547    
  69  0.755932     -0.279804      -4.00676       4.00676       47.9044       51.9112    
  70  0.211323E-01  -3.85695      -55.2312       55.2312       47.8674       103.099    
loop,thermsimp(1:2)       35   15.1115       24.9592    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    139         47.74          0.84          1.11         23.80          0.48          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    140         48.42          0.84          1.11         23.71          0.61          0.04         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       35
neval is:      139
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       36
neval is:      139


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:      139     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -36.9422       36.9422       47.7162       84.6585    
   2  0.962370     -0.383559E-01 -0.549252      0.549252       47.8079       48.3572    
   3  0.356737      -1.03076      -14.7603       14.7603       47.7601       62.5205    
   4  0.884319     -0.122937      -1.76045       1.76045       47.2490       49.0094    
   5  0.919725E-01  -2.38627      -34.1711       34.1711       48.5148       82.6858    
   6  0.900184     -0.105156      -1.50582       1.50582       47.7477       49.2535    
   7  0.390055     -0.941468      -13.4817       13.4817       47.8226       61.3044    
   8  0.263976      -1.33190      -19.0726       19.0726       48.0552       67.1279    
   9  0.898455     -0.107078      -1.53335       1.53335       48.7895       50.3229    
  10  0.697674E-01  -2.66259      -38.1280       38.1280       48.6695       86.7975    
  11  0.888938     -0.117727      -1.68584       1.68584       48.2399       49.9257    
  12  0.824147     -0.193406      -2.76955       2.76955       47.8653       50.6349    
  13  0.941109     -0.606968E-01 -0.869172      0.869172       47.7100       48.5792    
  14  0.885654     -0.121429      -1.73885       1.73885       47.6345       49.3733    
  15  0.798208     -0.225386      -3.22750       3.22750       48.3863       51.6138    
  16  0.365331      -1.00695      -14.4195       14.4195       48.6185       63.0380    
  17  0.519490     -0.654907      -9.37820       9.37820       48.8185       58.1967    
  18  0.922741     -0.804065E-01  -1.15141       1.15141       47.9044       49.0558    
  19  0.877443     -0.130744      -1.87224       1.87224       48.2681       50.1404    
  20  0.584844     -0.536410      -7.68134       7.68134       48.2724       55.9538    
  21  0.671390     -0.398406      -5.70513       5.70513       48.8766       54.5818    
  22  0.203335      -1.59290      -22.8102       22.8102       48.4120       71.2221    
  23  0.330236E-01  -3.41053      -48.8385       48.8385       48.5919       97.4304    
  24  0.879725     -0.128146      -1.83504       1.83504       47.1344       48.9695    
  25  0.833976     -0.181550      -2.59979       2.59979       47.7345       50.3343    
  26  0.901698     -0.103475      -1.48175       1.48175       50.8673       52.3490    
  27  0.692847     -0.366946      -5.25463       5.25463       47.8510       53.1057    
  28  0.550572     -0.596797      -8.54607       8.54607       48.2784       56.8244    
  29  0.158383E-01  -4.14532      -59.3606       59.3606       49.4081       108.769    
  30  0.503246     -0.686677      -9.83315       9.83315       47.6468       57.4800    
  31  0.648812     -0.432612      -6.19496       6.19496       47.7426       53.9376    
  32  0.306980      -1.18097      -16.9114       16.9114       47.3977       64.3091    
  33  0.205188      -1.58383      -22.6803       22.6803       48.0744       70.7547    
  34  0.265146      -1.32748      -19.0093       19.0093       52.4276       71.4369    
  35  0.272730E-01  -3.60186      -51.5783       51.5783       48.4295       100.008    
  36  0.262990E-01  -3.63823      -52.0990       52.0990       48.0987       100.198    
  37  0.492753     -0.707748      -10.1349       10.1349       51.6227       61.7576    
  38  0.255065      -1.36624      -19.5643       19.5643       47.7233       67.2876    
  39  0.623259     -0.472794      -6.77036       6.77036       47.4504       54.2207    
  40  0.949296     -0.520343E-01 -0.745126      0.745126       48.8434       49.5885    
  41  0.982394     -0.177630E-01 -0.254364      0.254364       48.6567       48.9111    
  42  0.566450     -0.568366      -8.13894       8.13894       48.2243       56.3632    
  43  0.557613     -0.584090      -8.36411       8.36411       48.4424       56.8065    
  44  0.900731     -0.104549      -1.49713       1.49713       49.5314       51.0285    
  45  0.671339     -0.398481      -5.70620       5.70620       52.4963       58.2025    
  46  0.650454     -0.430084      -6.15876       6.15876       47.0527       53.2115    
  47  0.749315     -0.288595      -4.13266       4.13266       47.7330       51.8657    
  48  0.667497     -0.404220      -5.78839       5.78839       52.2522       58.0406    
  49  0.132870      -2.01838      -28.9031       28.9031       51.5232       80.4263    
  50  0.964787     -0.358480E-01 -0.513340      0.513340       47.7694       48.2827    
  51  0.835780     -0.179390      -2.56884       2.56884       48.2589       50.8277    
  52  0.601609     -0.508148      -7.27662       7.27662       48.4284       55.7051    
  53  0.937321     -0.647298E-01 -0.926924      0.926924       47.9426       48.8695    
  54  0.467877     -0.759550      -10.8767       10.8767       48.8082       59.6849    
  55  0.953249     -0.478789E-01 -0.685621      0.685621       48.7631       49.4487    
  56  0.827724     -0.189076      -2.70755       2.70755       47.7675       50.4750    
  57  0.624780     -0.470355      -6.73544       6.73544       47.6508       54.3863    
  58  0.821535     -0.196581      -2.81501       2.81501       47.8400       50.6550    
  59  0.625285     -0.469548      -6.72388       6.72388       57.0215       63.7454    
  60  0.581213     -0.542638      -7.77052       7.77052       47.9746       55.7452    
  61  0.855886E-01  -2.45820      -35.2012       35.2012       47.7893       82.9905    
  62  0.262334      -1.33814      -19.1620       19.1620       48.1762       67.3382    
  63  0.978265     -0.219749E-01 -0.314679      0.314679       49.5005       49.8152    
  64  0.600842     -0.509423      -7.29489       7.29489       48.2199       55.5148    
  65  0.476413     -0.741470      -10.6178       10.6178       47.8763       58.4941    
  66  0.922813     -0.803282E-01  -1.15029       1.15029       48.2138       49.3640    
  67  0.468949     -0.757261      -10.8439       10.8439       47.9931       58.8370    
  68  0.832153E-01  -2.48632      -35.6039       35.6039       48.7468       84.3507    
  69  0.927485     -0.752786E-01  -1.07798       1.07798       47.6585       48.7365    
  70  0.487372     -0.718728      -10.2921       10.2921       47.7378       58.0299    
loop,thermsimp(1:2)       36   36.9422      0.549252    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    141         48.62          0.84          1.12         23.81          0.43          0.04         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    142         55.74          0.85          1.12         23.72          0.59          0.04         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    48.618        1.207     -1.890      3.222     -102.6      1.413    
                      0.3014      1.357     -99.70      3.677     0.1914E-01

                       2.263     -1.033      1.530      7281.      3635.    

                     -0.2015      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6271.      412.9    

                       1.433     -5.829     -4.021     -8.435      6.727    

                      -14.90     -3.549      4498.      0.000      9607.    



                       1667.     0.1348E+05 -4309.     0.1291E+05  6447.    

                       6220.     0.1493E-01 0.1993     0.1613E-01 0.1271    

                     -0.2486    -0.7596E-01 0.1961     0.1255     0.7318E-01



                     -0.4759    -0.7617      0.000     0.9536E-01-0.9068E-01

                      0.1613E-01 0.1157    -0.7116    -0.1360     0.2568E-01

                      0.6129E-01-0.3366E-01-0.6523     -1.195      7471.    



                      -1.036     -1.271     -2.285     -2.300    -0.3807    

                     -0.3252      9.208      8.382    -0.1961E+05 -4.000    

                     -0.5353     -2.198      9.307      8.880    -0.1908E+05



                      -4.000     0.4074    -0.4218      8.871      9.094    

                     -0.1908E+05 -7.000    -0.7283    -0.6513      9.029    

                       8.783    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    14.3199               139
loop is:       36
neval is:      141
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    14.3199               139
loop is:       37
neval is:      141


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    7.15995               208

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      141     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01 -0.449391      0.449391       47.7694       48.2188    
   2  0.112532E-01  -4.48710      -32.1274       32.1274       47.8079       79.9353    
   3  0.907929     -0.965891E-01 -0.691573      0.691573       47.7100       48.4016    
   4  0.478640     -0.736807      -5.27550       5.27550       47.6585       52.9340    
   5  0.737686     -0.304237      -2.17832       2.17832       47.9426       50.1209    
   6  0.114880      -2.16387      -15.4932       15.4932       48.6567       64.1499    
   7  0.309837      -1.17171      -8.38938       8.38938       47.1344       55.5238    
   8  0.469091     -0.756958      -5.41978       5.41978       47.2490       52.6687    
   9  0.721151     -0.326907      -2.34064       2.34064       47.9044       50.2450    
  10  0.557251     -0.584740      -4.18671       4.18671       47.7477       51.9344    
  11  0.581534     -0.542085      -3.88130       3.88130       48.2138       52.0951    
  12  0.501412     -0.690326      -4.94270       4.94270       47.6345       52.5772    
  13  0.783062     -0.244543      -1.75092       1.75092       48.7631       50.5140    
  14  0.571322     -0.559803      -4.00816       4.00816       48.8434       52.8515    
  15  0.902729E-01  -2.40492      -17.2191       17.2191       49.5005       66.7196    
  16  0.695403E-01  -2.66585      -19.0873       19.0873       48.2399       67.3272    
  17  0.128872      -2.04894      -14.6703       14.6703       48.2681       62.9384    
  18  0.940828E-01  -2.36358      -16.9231       16.9231       48.7895       65.7126    
  19  0.326350      -1.11979      -8.01761       8.01761       47.7345       55.7521    
  20  0.102915      -2.27385      -16.2807       16.2807       47.7675       64.0482    
  21  0.324524      -1.12540      -8.05778       8.05778       47.8653       55.9231    
  22  0.259454      -1.34918      -9.66004       9.66004       47.8400       57.5000    
  23  0.782812     -0.244863      -1.75321       1.75321       48.2589       50.0121    
  24  0.383591     -0.958178      -6.86051       6.86051       49.5314       56.3919    
  25  0.626880     -0.466999      -3.34369       3.34369       48.3863       51.7300    
  26  0.292269      -1.23008      -8.80731       8.80731       47.7330       56.5403    
  27  0.448852     -0.801062      -5.73557       5.73557       50.8673       56.6028    
  28  0.685432     -0.377706      -2.70436       2.70436       47.8510       50.5554    
  29  0.995399     -0.461118E-02 -0.330158E-01  0.330158E-01   47.0527       47.0857    
  30  0.163323      -1.81203      -12.9740       12.9740       47.7426       60.7167    
  31  0.952940     -0.482038E-01 -0.345137      0.345137       47.4504       47.7955    
  32  0.861306     -0.149306      -1.06902       1.06902       47.6508       48.7199    
  33  0.587276     -0.532261      -3.81096       3.81096       48.8766       52.6876    
  34  0.908704     -0.957357E-01 -0.685463      0.685463       48.2199       48.9054    
  35  0.585935     -0.534546      -3.82732       3.82732       48.4284       52.2558    
  36  0.429836     -0.844352      -6.04552       6.04552       47.9746       54.0201    
  37  0.726203     -0.319926      -2.29066       2.29066       48.2724       50.5631    
  38  0.151145E-01  -4.19210      -30.0152       30.0152       48.2243       78.2395    
  39  0.927869     -0.748646E-01 -0.536027      0.536027       48.4424       48.9784    
  40  0.961645     -0.391099E-01 -0.280025      0.280025       48.2784       48.5584    
  41  0.253977      -1.37051      -9.81278       9.81278       47.6468       57.4596    
  42  0.768038     -0.263917      -1.88963       1.88963       47.7378       49.6274    
  43  0.569441E-01  -2.86569      -20.5182       20.5182       52.2522       72.7704    
  44  0.103919      -2.26415      -16.2112       16.2112       48.8185       65.0297    
  45  0.312226      -1.16403      -8.33438       8.33438       52.4963       60.8307    
  46  0.473636E-02  -5.35249      -38.3235       38.3235       47.8763       86.1999    
  47  0.192099      -1.64975      -11.8121       11.8121       47.9931       59.8052    
  48  0.799429     -0.223858      -1.60281       1.60281       48.8082       50.4110    
  49  0.164379      -1.80558      -12.9279       12.9279       47.8226       60.7505    
  50  0.421896     -0.862996      -6.17901       6.17901       51.6227       57.8017    
  51  0.361660      -1.01705      -7.28203       7.28203       47.7601       55.0422    
  52  0.346541      -1.05975      -7.58779       7.58779       48.6185       56.2063    
  53  0.728715     -0.316473      -2.26593       2.26593       57.0215       59.2874    
  54  0.305329      -1.18637      -8.49432       8.49432       47.3977       55.8920    
  55  0.547244     -0.602861      -4.31645       4.31645       48.0552       52.3717    
  56  0.942790     -0.589122E-01 -0.421808      0.421808       47.7233       48.1451    
  57  0.846801     -0.166290      -1.19063       1.19063       48.1762       49.3669    
  58  0.961806     -0.389424E-01 -0.278826      0.278826       48.0744       48.3532    
  59  0.101104      -2.29161      -16.4078       16.4078       48.4120       64.8198    
  60  0.181736      -1.70520      -12.2092       12.2092       52.4276       64.6368    
  61  0.298004      -1.21065      -8.66819       8.66819       51.5232       60.1914    
  62  0.840699E-01  -2.47611      -17.7288       17.7288       48.5148       66.2436    
  63  0.796444     -0.227598      -1.62959       1.62959       47.7893       49.4189    
  64  0.294043      -1.22403      -8.76399       8.76399       48.7468       57.5108    
  65  0.156591      -1.85412      -13.2754       13.2754       47.7162       60.9916    
  66  0.973381     -0.269794E-01 -0.193171      0.193171       48.6695       48.8627    
  67  0.515799     -0.662038      -4.74016       4.74016       48.5919       53.3320    
  68  0.211924      -1.55153      -11.1089       11.1089       48.4295       59.5384    
  69  0.830172     -0.186122      -1.33263       1.33263       48.0987       49.4313    
  70  0.666225     -0.406128      -2.90786       2.90786       48.6182       51.5261    
loop,thermsimp(1:2)       37  0.449391       32.1274    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    143         48.33          0.85          1.12         23.85          0.50          0.04         26.36
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    144         53.27          0.84          1.12         23.87          0.77          0.04         26.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       37
neval is:      143
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       38
neval is:      143


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      143     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -7.08495       7.08495       47.0527       54.1377    
   2  0.687927     -0.374072      -2.67834       2.67834       47.4504       50.1287    
   3  0.288957      -1.24148      -8.88892       8.88892       47.7233       56.6122    
   4  0.192838      -1.64590      -11.7846       11.7846       47.7694       59.5540    
   5  0.369869     -0.994607      -7.12134       7.12134       48.0744       55.1957    
   6  0.735973     -0.306562      -2.19497       2.19497       47.7100       49.9050    
   7  0.637144     -0.450760      -3.22742       3.22742       48.2784       51.5058    
   8  0.703934     -0.351071      -2.51365       2.51365       47.6508       50.1645    
   9  0.864279     -0.145859      -1.04434       1.04434       48.6695       49.7138    
  10  0.473452     -0.747705      -5.35353       5.35353       48.2199       53.5734    
  11  0.242010      -1.41877      -10.1584       10.1584       48.4424       58.6007    
  12  0.510769     -0.671838      -4.81033       4.81033       48.1762       52.9866    
  13  0.829624     -0.186782      -1.33735       1.33735       47.7893       49.1266    
  14  0.228911      -1.47442      -10.5568       10.5568       48.0987       58.6555    
  15  0.310006      -1.17116      -8.38548       8.38548       47.7378       56.1233    
  16  0.248341      -1.39295      -9.97348       9.97348       48.2589       58.2324    
  17  0.723214     -0.324050      -2.32018       2.32018       47.9426       50.2628    
  18  0.420900     -0.865360      -6.19594       6.19594       47.9044       54.1003    
  19  0.133903      -2.01064      -14.3961       14.3961       48.8082       63.2042    
  20  0.571916     -0.558763      -4.00072       4.00072       48.7631       52.7638    
  21  0.609104     -0.495766      -3.54966       3.54966       47.8510       51.4007    
  22  0.582057     -0.541186      -3.87487       3.87487       48.2724       52.1473    
  23  0.440731     -0.819321      -5.86630       5.86630       48.6182       54.4845    
  24  0.211006      -1.55587      -11.1400       11.1400       48.3863       59.5262    
  25  0.665769     -0.406813      -2.91276       2.91276       47.7477       50.6604    
  26  0.766062     -0.266493      -1.90807       1.90807       48.2138       50.1218    
  27  0.321416E-01  -3.43760      -24.6131       24.6131       48.4284       73.0415    
  28  0.165897E-01  -4.09897      -29.3484       29.3484       48.0552       77.4037    
  29  0.634553     -0.454835      -3.25660       3.25660       47.6345       50.8911    
  30  0.981834     -0.183335E-01 -0.131267      0.131267       47.2490       47.3802    
  31  0.511720     -0.669978      -4.79701       4.79701       48.8766       53.6737    
  32  0.426358     -0.852477      -6.10369       6.10369       48.8434       54.9471    
  33  0.500527     -0.692094      -4.95536       4.95536       47.6585       52.6139    
  34  0.100483      -2.29777      -16.4519       16.4519       48.5919       65.0438    
  35  0.837324     -0.177545      -1.27121       1.27121       47.9746       49.2458    
  36  0.257741      -1.35580      -9.70746       9.70746       47.7601       57.4676    
  37  0.437184     -0.827401      -5.92415       5.92415       47.1344       53.0586    
  38  0.707529     -0.345976      -2.47717       2.47717       47.7345       50.2117    
  39  0.538379     -0.619193      -4.43339       4.43339       47.3977       51.8311    
  40  0.611820     -0.491317      -3.51780       3.51780       47.8653       51.3831    
  41  0.404533     -0.905022      -6.47991       6.47991       48.6185       55.0984    
  42  0.902499     -0.102588     -0.734526      0.734526       49.5314       50.2659    
  43  0.704299     -0.350552      -2.50994       2.50994       47.7330       50.2429    
  44  0.511818     -0.669786      -4.79563       4.79563       50.8673       55.6629    
  45  0.748131     -0.290178      -2.07766       2.07766       47.6468       49.7245    
  46  0.296598      -1.21538      -8.70205       8.70205       47.8400       56.5420    
  47  0.805122     -0.216762      -1.55200       1.55200       48.7468       50.2988    
  48  0.525063     -0.644236      -4.61270       4.61270       51.6227       56.2354    
  49  0.192567      -1.64731      -11.7947       11.7947       57.0215       68.8162    
  50  0.991898     -0.813527E-02 -0.582482E-01  0.582482E-01   48.4295       48.4877    
  51  0.238175      -1.43475      -10.2727       10.2727       47.9931       58.2658    
  52  0.627675     -0.465733      -3.33462       3.33462       51.5232       54.8578    
  53  0.328849      -1.11216      -7.96298       7.96298       47.7426       55.7056    
  54  0.697651     -0.360037      -2.57785       2.57785       47.8226       50.4005    
  55  0.154345      -1.86857      -13.3789       13.3789       52.4963       65.8752    
  56  0.196838      -1.62537      -11.6376       11.6376       47.7162       59.3538    
  57  0.397903     -0.921546      -6.59823       6.59823       48.2681       54.8663    
  58  0.746135E-01  -2.59543      -18.5832       18.5832       47.7675       66.3507    
  59  0.283843      -1.25934      -9.01678       9.01678       48.6567       57.6735    
  60  0.540853E-02  -5.21978      -37.3734       37.3734       52.4276       89.8010    
  61  0.534720     -0.626011      -4.48221       4.48221       48.4120       52.8942    
  62  0.909816     -0.945126E-01 -0.676705      0.676705       48.8185       49.4952    
  63  0.190142      -1.65998      -11.8854       11.8854       48.7895       60.6749    
  64  0.150854      -1.89144      -13.5426       13.5426       48.5148       62.0574    
  65  0.385455     -0.953330      -6.82580       6.82580       49.5005       56.3263    
  66  0.655101     -0.422966      -3.02842       3.02842       48.2399       51.2683    
  67  0.527025     -0.640508      -4.58600       4.58600       52.2522       56.8382    
  68  0.110501      -2.20273      -15.7714       15.7714       48.2243       63.9957    
  69  0.206094      -1.57942      -11.3086       11.3086       47.8079       59.1165    
  70  0.961998     -0.387429E-01 -0.277397      0.277397       48.3329       48.6103    
loop,thermsimp(1:2)       38   7.08495       2.67834    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    145         48.32          0.84          1.12         23.83          0.66          0.04         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    146         49.60          0.84          1.12         23.83          0.50          0.04         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       38
neval is:      145
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       39
neval is:      145


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      145     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -2.30980       2.30980       47.2490       49.5588    
   2  0.309663      -1.17227      -8.39340       8.39340       48.4295       56.8229    
   3  0.688114     -0.373801      -2.67639       2.67639       48.3329       51.0093    
   4  0.677876     -0.388791      -2.78372       2.78372       47.7893       50.5730    
   5  0.283701      -1.25984      -9.02036       9.02036       47.9746       56.9950    
   6  0.183733      -1.69427      -12.1309       12.1309       48.8185       60.9494    
   7  0.243414      -1.41299      -10.1170       10.1170       48.6695       58.7865    
   8  0.785389     -0.241576      -1.72967       1.72967       47.6468       49.3765    
   9  0.258033      -1.35467      -9.69936       9.69936       47.7100       57.4094    
  10  0.137887      -1.98132      -14.1862       14.1862       48.2138       62.3999    
  11  0.386520     -0.950573      -6.80605       6.80605       47.4504       54.2564    
  12  0.882934     -0.124505     -0.891452      0.891452       47.6508       48.5423    
  13  0.395106     -0.928602      -6.64874       6.64874       47.7345       54.3832    
  14  0.107633      -2.22903      -15.9598       15.9598       47.7330       63.6928    
  15  0.434094     -0.834495      -5.97494       5.97494       47.9426       53.9175    
  16  0.558484     -0.582529      -4.17088       4.17088       49.5314       53.7023    
  17  0.102706      -2.27589      -16.2952       16.2952       48.7468       65.0420    
  18  0.325804      -1.12146      -8.02958       8.02958       47.8226       55.8522    
  19  0.693871     -0.365469      -2.61674       2.61674       47.7477       50.3644    
  20  0.832622     -0.183176      -1.31153       1.31153       47.6345       48.9460    
  21  0.691207     -0.369316      -2.64428       2.64428       48.2399       50.8841    
  22  0.903946     -0.100985     -0.723049      0.723049       47.8653       48.5884    
  23  0.258785E-01  -3.65434      -26.1649       26.1649       47.8510       74.0159    
  24  0.247338      -1.39700      -10.0024       10.0024       48.2784       58.2808    
  25  0.861464     -0.149122      -1.06771       1.06771       47.3977       48.4654    
  26  0.954919     -0.461290E-01 -0.330281      0.330281       48.2724       48.6027    
  27  0.579638     -0.545352      -3.90469       3.90469       47.6585       51.5632    
  28  0.537182     -0.621418      -4.44932       4.44932       48.7631       53.2124    
  29  0.407710     -0.897199      -6.42390       6.42390       48.4120       54.8359    
  30  0.958466     -0.424211E-01 -0.303733      0.303733       48.1762       48.4800    
  31  0.884674     -0.122536     -0.877352      0.877352       47.1344       48.0118    
  32  0.395055     -0.928731      -6.64967       6.64967       48.2199       54.8696    
  33  0.325425      -1.12262      -8.03792       8.03792       48.8766       56.9146    
  34  0.679842     -0.385895      -2.76299       2.76299       47.9044       50.6674    
  35  0.765292     -0.267498      -1.91527       1.91527       47.0527       48.9680    
  36  0.217460      -1.52574      -10.9242       10.9242       48.6182       59.5425    
  37  0.181189      -1.70822      -12.2307       12.2307       51.5232       63.7539    
  38  0.518456     -0.656899      -4.70337       4.70337       48.2681       52.9715    
  39  0.249864E-01  -3.68942      -26.4161       26.4161       48.8434       75.2595    
  40  0.336654      -1.08870      -7.79504       7.79504       48.6185       56.4136    
  41  0.873801     -0.134903     -0.965898      0.965898       48.0744       49.0402    
  42  0.478904     -0.736255      -5.27155       5.27155       50.8673       56.1388    
  43  0.819950     -0.198512      -1.42134       1.42134       47.7426       49.1640    
  44  0.966813     -0.337500E-01 -0.241648      0.241648       47.7378       47.9794    
  45  0.514109     -0.665319      -4.76365       4.76365       51.6227       56.3864    
  46  0.483734     -0.726221      -5.19970       5.19970       49.5005       54.7002    
  47  0.227743E-01  -3.78212      -27.0798       27.0798       47.8400       74.9198    
  48  0.409495     -0.892830      -6.39262       6.39262       47.7233       54.1159    
  49  0.198361      -1.61767      -11.5824       11.5824       52.2522       63.8347    
  50  0.925767     -0.771331E-01 -0.552269      0.552269       47.7601       48.3124    
  51  0.842113     -0.171842      -1.23038       1.23038       48.6567       49.8871    
  52  0.347114E-01  -3.36069      -24.0623       24.0623       48.2589       72.3212    
  53  0.215814      -1.53334      -10.9786       10.9786       47.9931       58.9717    
  54  0.219309      -1.51727      -10.8636       10.8636       48.4424       59.3060    
  55  0.940126     -0.617416E-01 -0.442066      0.442066       48.0987       48.5408    
  56  0.663408     -0.410365      -2.93820       2.93820       47.8079       50.7461    
  57  0.630947     -0.460533      -3.29739       3.29739       47.7162       51.0136    
  58  0.719671     -0.328961      -2.35534       2.35534       48.3863       50.7416    
  59  0.939094     -0.628392E-01 -0.449925      0.449925       47.7694       48.2193    
  60  0.901520     -0.103673     -0.742295      0.742295       48.7895       49.5318    
  61  0.771028     -0.260031      -1.86181       1.86181       48.5148       50.3766    
  62  0.320616      -1.13751      -8.14452       8.14452       48.8082       56.9527    
  63  0.893890     -0.112173     -0.803151      0.803151       48.2243       49.0274    
  64  0.874332     -0.134295     -0.961545      0.961545       48.5919       49.5534    
  65  0.363931      -1.01079      -7.23722       7.23722       52.4963       59.7335    
  66  0.140534      -1.96231      -14.0500       14.0500       47.7675       61.8175    
  67  0.432559     -0.838038      -6.00031       6.00031       57.0215       63.0218    
  68  0.446579     -0.806139      -5.77192       5.77192       48.4284       54.2004    
  69  0.830196     -0.186093      -1.33242       1.33242       48.0552       49.3876    
  70  0.324418      -1.12572      -8.06012       8.06012       48.3164       56.3765    
loop,thermsimp(1:2)       39   2.30980       8.39340    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    147         48.05          0.84          1.11         23.81          0.46          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    148         53.98          0.84          1.12         23.80          0.48          0.04         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       39
neval is:      147
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       40
neval is:      147


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      147     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01 -0.332434      0.332434       47.7378       48.0702    
   2  0.450411     -0.797594      -5.71074       5.71074       47.1344       52.8452    
   3  0.691912E-01  -2.67088      -19.1234       19.1234       47.7694       66.8928    
   4  0.740935     -0.299842      -2.14685       2.14685       47.7601       49.9070    
   5  0.452531     -0.792898      -5.67711       5.67711       47.3977       53.0748    
   6  0.461330     -0.773642      -5.53924       5.53924       48.1762       53.7155    
   7  0.102999      -2.27303      -16.2748       16.2748       48.0987       64.3735    
   8  0.475106     -0.744217      -5.32856       5.32856       47.6508       52.9794    
   9  0.240275      -1.42597      -10.2099       10.2099       47.8653       58.0752    
  10  0.276707E-01  -3.58738      -25.6855       25.6855       48.2724       73.9579    
  11  0.132701E-01  -4.32224      -30.9470       30.9470       47.6345       78.5815    
  12  0.997219     -0.278509E-02 -0.199411E-01  0.199411E-01   47.0527       47.0726    
  13  0.563305     -0.573934      -4.10934       4.10934       48.2243       52.3336    
  14  0.347949      -1.05570      -7.55876       7.55876       48.0744       55.6331    
  15  0.546018     -0.605103      -4.33251       4.33251       47.7426       52.0751    
  16  0.343968      -1.06721      -7.64114       7.64114       47.6468       55.2880    
  17  0.945234     -0.563230E-01 -0.403270      0.403270       48.0552       48.4585    
  18  0.346208      -1.06072      -7.59467       7.59467       48.7895       56.3842    
  19  0.406433     -0.900337      -6.44637       6.44637       48.5919       55.0382    
  20  0.632259     -0.458455      -3.28252       3.28252       47.2490       50.5315    
  21  0.983930     -0.162002E-01 -0.115993      0.115993       48.6567       48.7727    
  22  0.200798      -1.60546      -11.4950       11.4950       47.7477       59.2427    
  23  0.223962      -1.49628      -10.7133       10.7133       48.5148       59.2280    
  24  0.594322     -0.520335      -3.72557       3.72557       47.7893       51.5148    
  25  0.875298     -0.133191     -0.953640      0.953640       47.9044       48.8581    
  26  0.327822      -1.11529      -7.98539       7.98539       48.3863       56.3717    
  27  0.215105      -1.53663      -11.0022       11.0022       47.8079       58.8101    
  28  0.905181     -0.996198E-01 -0.713273      0.713273       48.2399       48.9531    
  29  0.699086     -0.357981      -2.56313       2.56313       48.3329       50.8960    
  30  0.747401     -0.291154      -2.08465       2.08465       47.7162       49.8009    
  31  0.699189     -0.357834      -2.56207       2.56207       47.6585       50.2206    
  32  0.563488     -0.573610      -4.10702       4.10702       48.2681       52.3751    
  33  0.155576      -1.86062      -13.3220       13.3220       48.7631       62.0851    
  34  0.380593     -0.966025      -6.91669       6.91669       49.5314       56.4481    
  35  0.626112     -0.468226      -3.35247       3.35247       47.9426       51.2950    
  36  0.372369     -0.987870      -7.07310       7.07310       47.7233       54.7964    
  37  0.517531     -0.658686      -4.71616       4.71616       48.4284       53.1446    
  38  0.673247     -0.395643      -2.83278       2.83278       47.4504       50.2832    
  39  0.741527     -0.299044      -2.14114       2.14114       47.7345       49.8756    
  40  0.280982      -1.26947      -9.08931       9.08931       49.5005       58.5898    
  41  0.331745      -1.10339      -7.90021       7.90021       48.4120       56.3122    
  42  0.712030     -0.339635      -2.43177       2.43177       48.2199       50.6517    
  43  0.200581      -1.60654      -11.5027       11.5027       47.8226       59.3254    
  44  0.989915     -0.101357E-01 -0.725711E-01  0.725711E-01   50.8673       50.9398    
  45  0.808031     -0.213155      -1.52618       1.52618       48.3164       49.8426    
  46  0.893446     -0.112670     -0.806711      0.806711       51.6227       52.4294    
  47  0.364885      -1.00817      -7.21846       7.21846       48.6185       55.8370    
  48  0.923731     -0.793347E-01 -0.568033      0.568033       48.4295       48.9975    
  49  0.504880     -0.683434      -4.89335       4.89335       48.8766       53.7700    
  50  0.724988     -0.321600      -2.30264       2.30264       48.8082       51.1108    
  51  0.927322     -0.754540E-01 -0.540247      0.540247       47.9746       48.5149    
  52  0.857721     -0.153476      -1.09888       1.09888       47.7100       48.8089    
  53  0.943333     -0.583361E-01 -0.417684      0.417684       48.2784       48.6961    
  54  0.794551     -0.229978      -1.64663       1.64663       48.6695       50.3161    
  55  0.732400     -0.311429      -2.22982       2.22982       47.9931       50.2229    
  56  0.143434      -1.94188      -13.9038       13.9038       48.4424       62.3461    
  57  0.859384     -0.151540      -1.08502       1.08502       48.6182       49.7033    
  58  0.677471     -0.389389      -2.78800       2.78800       52.4963       55.2843    
  59  0.258745      -1.35191      -9.67961       9.67961       48.8185       58.4981    
  60  0.380926E-01  -3.26773      -23.3968       23.3968       47.7675       71.1643    
  61  0.563373     -0.573814      -4.10848       4.10848       48.2138       52.3222    
  62  0.985538     -0.145678E-01 -0.104304      0.104304       57.0215       57.1258    
  63  0.647297     -0.434951      -3.11422       3.11422       47.7330       50.8472    
  64  0.608092     -0.497430      -3.56157       3.56157       51.5232       55.0848    
  65  0.944821     -0.567601E-01 -0.406399      0.406399       52.2522       52.6586    
  66  0.458402E-01  -3.08259      -22.0712       22.0712       48.7468       70.8180    
  67  0.573743E-01  -2.85816      -20.4643       20.4643       48.2589       68.7232    
  68  0.755011     -0.281022      -2.01211       2.01211       47.8510       49.8631    
  69  0.199134      -1.61378      -11.5546       11.5546       47.8400       59.3946    
  70  0.364851      -1.00827      -7.21913       7.21913       48.0524       55.2715    
loop,thermsimp(1:2)       40  0.332434       5.71074    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    149         47.80          0.84          1.12         23.79          0.50          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    150         48.80          0.84          1.11         23.81          0.51          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       40
neval is:      149
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       41
neval is:      149


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      149     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -7.35556       7.35556       47.0527       54.4083    
   2  0.414955     -0.879585      -6.29779       6.29779       47.7378       54.0356    
   3  0.407443     -0.897854      -6.42859       6.42859       48.0552       54.4838    
   4  0.883897     -0.123414     -0.883641      0.883641       47.9746       48.8583    
   5  0.520045     -0.653840      -4.68147       4.68147       48.2784       52.9598    
   6  0.634521     -0.454885      -3.25695       3.25695       48.6567       51.9137    
   7  0.344406      -1.06594      -7.63204       7.63204       47.7100       55.3421    
   8  0.545595     -0.605879      -4.33806       4.33806       47.9044       52.2425    
   9  0.766876     -0.265430      -1.90046       1.90046       48.2399       50.1403    
  10  0.639043     -0.447783      -3.20611       3.20611       48.4295       51.6356    
  11  0.850701     -0.161694      -1.15772       1.15772       48.6182       49.7760    
  12  0.832060     -0.183851      -1.31636       1.31636       47.7162       49.0326    
  13  0.728209     -0.317167      -2.27090       2.27090       48.3164       50.5873    
  14  0.531327     -0.632378      -4.52779       4.52779       47.8510       52.3788    
  15  0.188974E-01  -3.96873      -28.4159       28.4159       47.7345       76.1504    
  16  0.246817      -1.39911      -10.0175       10.0175       47.7601       57.7777    
  17  0.935336     -0.668496E-01 -0.478640      0.478640       47.6585       48.1371    
  18  0.730823     -0.313585      -2.24525       2.24525       47.9931       50.2383    
  19  0.482288     -0.729213      -5.22113       5.22113       47.4504       52.6715    
  20  0.782974E-04  -9.45500      -67.6973       67.6973       48.6695       116.367    
  21  0.258744      -1.35192      -9.67966       9.67966       47.2490       56.9286    
  22  0.389044     -0.944063      -6.75944       6.75944       48.2199       54.9793    
  23  0.611459E-01  -2.79449      -20.0084       20.0084       47.7330       67.7414    
  24  0.124922      -2.08006      -14.8932       14.8932       48.3329       63.2260    
  25  0.253683      -1.37167      -9.82109       9.82109       50.8673       60.6884    
  26  0.781437     -0.246621      -1.76579       1.76579       48.8082       50.5740    
  27  0.835634     -0.179565      -1.28568       1.28568       47.9426       49.2283    
  28  0.542030     -0.612434      -4.38500       4.38500       47.7893       52.1743    
  29  0.463443     -0.769071      -5.50651       5.50651       47.7426       53.2491    
  30  0.120587      -2.11538      -15.1460       15.1460       48.2138       63.3598    
  31  0.733316     -0.310178      -2.22086       2.22086       48.2243       50.4451    
  32  0.955530     -0.454889E-01 -0.325698      0.325698       48.2681       48.5938    
  33  0.419735     -0.868132      -6.21578       6.21578       51.6227       57.8385    
  34  0.284829      -1.25587      -8.99194       8.99194       52.2522       61.2442    
  35  0.924079     -0.789582E-01 -0.565337      0.565337       47.1344       47.6998    
  36  0.432674     -0.837770      -5.99839       5.99839       47.6508       53.6492    
  37  0.155293      -1.86244      -13.3350       13.3350       47.3977       60.7327    
  38  0.634342     -0.455168      -3.25898       3.25898       48.4284       51.6874    
  39  0.935635     -0.665293E-01 -0.476347      0.476347       48.1762       48.6526    
  40  0.931832     -0.706024E-01 -0.505510      0.505510       48.8766       49.3822    
  41  0.875970     -0.132424     -0.948148      0.948148       47.7233       48.6714    
  42  0.273544      -1.29629      -9.28139       9.28139       48.5919       57.8733    
  43  0.799596     -0.223649      -1.60132       1.60132       51.5232       53.1245    
  44  0.772883     -0.257628      -1.84460       1.84460       48.0524       49.8970    
  45  0.274276      -1.29362      -9.26227       9.26227       52.4963       61.7586    
  46  0.116034      -2.15387      -15.4216       15.4216       47.6468       63.0684    
  47  0.700214     -0.356369      -2.55159       2.55159       48.0744       50.6259    
  48  0.704184E-01  -2.65330      -18.9975       18.9975       48.6185       67.6160    
  49  0.699980E-01  -2.65929      -19.0404       19.0404       48.4120       67.4523    
  50  0.186964      -1.67684      -12.0061       12.0061       48.3863       60.3924    
  51  0.342641      -1.07107      -7.66882       7.66882       48.7895       56.4583    
  52  0.989806     -0.102462E-01 -0.733620E-01  0.733620E-01   49.5314       49.6047    
  53  0.216227      -1.53143      -10.9649       10.9649       57.0215       67.9864    
  54  0.233793      -1.45332      -10.4057       10.4057       47.8653       58.2710    
  55  0.404477     -0.905159      -6.48090       6.48090       48.8185       55.2994    
  56  0.164502      -1.80483      -12.9225       12.9225       49.5005       62.4230    
  57  0.561765E-01  -2.87926      -20.6153       20.6153       47.8079       68.4232    
  58  0.169196E-01  -4.07928      -29.2074       29.2074       48.5148       77.7222    
  59  0.486948     -0.719597      -5.15228       5.15228       47.7477       52.8999    
  60  0.640730     -0.445148      -3.18724       3.18724       47.8226       51.0099    
  61  0.940004     -0.618708E-01 -0.442992      0.442992       47.8400       48.2830    
  62  0.216981      -1.52795      -10.9400       10.9400       48.7631       59.7031    
  63  0.131817      -2.02634      -14.5085       14.5085       48.4424       62.9509    
  64  0.996981     -0.302401E-02 -0.216517E-01  0.216517E-01   48.0987       48.1204    
  65  0.534925     -0.625629      -4.47947       4.47947       47.7694       52.2489    
  66  0.151104      -1.88978      -13.5308       13.5308       48.2589       61.7896    
  67  0.228761      -1.47508      -10.5615       10.5615       48.7468       59.3083    
  68  0.187751      -1.67264      -11.9760       11.9760       47.7675       59.7435    
  69  0.417030     -0.874597      -6.26207       6.26207       48.2724       54.5345    
  70  0.239615      -1.42872      -10.2296       10.2296       47.7983       58.0278    
loop,thermsimp(1:2)       41   7.35556       6.29779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    151         47.21          0.84          1.11         23.79          0.56          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    152         54.41          0.83          1.11         23.73          0.59          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       41
neval is:      151
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       42
neval is:      151


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      151     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -20.6454       20.6454       47.1344       67.7798    
   2  0.688513     -0.373221      -2.67225       2.67225       48.0987       50.7710    
   3  0.530653     -0.633647      -4.53688       4.53688       47.6585       52.1954    
   4  0.542886     -0.610856      -4.37370       4.37370       47.8400       52.2137    
   5  0.603382     -0.505205      -3.61724       3.61724       48.2681       51.8854    
   6  0.478412     -0.737283      -5.27891       5.27891       48.1762       53.4551    
   7  0.809657     -0.211144      -1.51178       1.51178       47.7233       49.2350    
   8  0.764585     -0.268422      -1.92189       1.92189       47.9746       49.8965    
   9  0.228600      -1.47578      -10.5665       10.5665       47.7162       58.2827    
  10  0.495526     -0.702136      -5.02726       5.02726       47.9426       52.9698    
  11  0.368264     -0.998954      -7.15246       7.15246       48.8766       56.0291    
  12  0.407647     -0.897355      -6.42501       6.42501       49.5314       55.9564    
  13  0.316165      -1.15149      -8.24462       8.24462       48.6182       56.8629    
  14  0.458518     -0.779756      -5.58302       5.58302       48.0524       53.6354    
  15  0.643610     -0.440663      -3.15512       3.15512       48.2399       51.3950    
  16  0.316553E-01  -3.45285      -24.7222       24.7222       47.9931       72.7153    
  17  0.570171     -0.561819      -4.02260       4.02260       48.2243       52.2469    
  18  0.448642E-01  -3.10412      -22.2253       22.2253       48.8082       71.0335    
  19  0.128957      -2.04828      -14.6656       14.6656       48.3164       62.9820    
  20  0.159422      -1.83620      -13.1471       13.1471       48.0744       61.2215    
  21  0.154083      -1.87026      -13.3910       13.3910       47.8226       61.2136    
  22  0.696997     -0.360974      -2.58456       2.58456       48.4295       51.0140    
  23  0.579421     -0.545727      -3.90738       3.90738       48.4284       52.3358    
  24  0.528206     -0.638269      -4.56998       4.56998       48.6567       53.2267    
  25  0.322914      -1.13037      -8.09338       8.09338       47.7893       55.8826    
  26  0.369562     -0.995437      -7.12728       7.12728       47.9044       55.0317    
  27  0.134248      -2.00806      -14.3776       14.3776       47.7694       62.1470    
  28  0.950150     -0.511358E-01 -0.366130      0.366130       47.8510       48.2172    
  29  0.138040      -1.98021      -14.1782       14.1782       47.4504       61.6286    
  30  0.316838      -1.14936      -8.22939       8.22939       47.7477       55.9771    
  31  0.151783      -1.88530      -13.4987       13.4987       48.2784       61.7771    
  32  0.338674      -1.08272      -7.75221       7.75221       51.5232       59.2754    
  33  0.814165     -0.205592      -1.47203       1.47203       47.7426       49.2147    
  34  0.578183     -0.547865      -3.92268       3.92268       47.6508       51.5735    
  35  0.208707      -1.56682      -11.2184       11.2184       47.7378       58.9562    
  36  0.540561     -0.615147      -4.40442       4.40442       47.0527       51.4571    
  37  0.910129     -0.941686E-01 -0.674243      0.674243       48.0552       48.7295    
  38  0.907740     -0.967972E-01 -0.693063      0.693063       48.2724       48.9655    
  39  0.549661     -0.598453      -4.28490       4.28490       48.2199       52.5048    
  40  0.193889      -1.64047      -11.7457       11.7457       48.8185       60.5642    
  41  0.807651     -0.213625      -1.52955       1.52955       47.7100       49.2396    
  42  0.613777     -0.488124      -3.49494       3.49494       48.7895       52.2845    
  43  0.664452     -0.408793      -2.92694       2.92694       47.2490       50.1759    
  44  0.584630     -0.536776      -3.84329       3.84329       47.7601       51.6034    
  45  0.618915     -0.479787      -3.43525       3.43525       51.6227       55.0580    
  46  0.542097     -0.612311      -4.38412       4.38412       48.5919       52.9760    
  47  0.133641      -2.01260      -14.4101       14.4101       47.7983       62.2084    
  48  0.479627     -0.734747      -5.26075       5.26075       47.8653       53.1261    
  49  0.225939      -1.48749      -10.6504       10.6504       48.7468       59.3972    
  50  0.324869      -1.12433      -8.05016       8.05016       48.7631       56.8133    
  51  0.669051     -0.401895      -2.87755       2.87755       47.7675       50.6450    
  52  0.602039     -0.507434      -3.63320       3.63320       48.3863       52.0195    
  53  0.143076      -1.94438      -13.9217       13.9217       50.8673       64.7889    
  54  0.897604     -0.108026     -0.773463      0.773463       47.3977       48.1712    
  55  0.165810      -1.79691      -12.8658       12.8658       52.2522       65.1181    
  56  0.468567     -0.758077      -5.42780       5.42780       52.4963       57.9241    
  57  0.641740     -0.443572      -3.17596       3.17596       48.2589       51.4348    
  58  0.904980     -0.998426E-01 -0.714868      0.714868       49.5005       50.2154    
  59  0.674132     -0.394330      -2.82338       2.82338       48.4424       51.2657    
  60  0.756363     -0.279234      -1.99930       1.99930       47.6468       49.6461    
  61  0.113892      -2.17251      -15.5550       15.5550       48.3329       63.8879    
  62  0.835916     -0.179227      -1.28326       1.28326       48.2138       49.4970    
  63  0.284183      -1.25814      -9.00819       9.00819       48.4120       57.4202    
  64  0.276674      -1.28492      -9.19993       9.19993       48.6185       57.8185    
  65  0.686678     -0.375890      -2.69135       2.69135       47.7330       50.4244    
  66  0.567044     -0.567318      -4.06197       4.06197       57.0215       61.0835    
  67  0.416554     -0.875738      -6.27024       6.27024       47.8079       54.0781    
  68  0.810149     -0.210537      -1.50743       1.50743       47.7345       49.2419    
  69  0.979175     -0.210445E-01 -0.150678      0.150678       48.5148       48.6654    
  70  0.334686      -1.09456      -7.83701       7.83701       47.2142       55.0512    
loop,thermsimp(1:2)       42   20.6454       2.67225    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    153         47.48          0.84          1.11         23.75          0.55          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    154         47.18          0.84          1.11         23.74          0.73          0.04         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       42
neval is:      153
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       43
neval is:      153


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      153     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -1.70045       1.70045       47.3977       49.0982    
   2  0.796559     -0.227454      -1.62856       1.62856       47.8510       49.4796    
   3  0.784232     -0.243051      -1.74023       1.74023       48.5148       50.2550    
   4  0.503549     -0.686074      -4.91226       4.91226       48.0552       52.9675    
   5  0.468337     -0.758566      -5.43130       5.43130       48.2724       53.7037    
   6  0.198518      -1.61688      -11.5768       11.5768       47.7426       59.3194    
   7  0.857529     -0.153700      -1.10048       1.10048       47.7233       48.8237    
   8  0.845427     -0.167913      -1.20225       1.20225       47.7100       48.9123    
   9  0.710919     -0.341197      -2.44295       2.44295       47.7345       50.1774    
  10  0.934107     -0.681640E-01 -0.488051      0.488051       48.2138       48.7018    
  11  0.565087     -0.570775      -4.08672       4.08672       47.6468       51.7335    
  12  0.147377      -1.91476      -13.7096       13.7096       47.9746       61.6842    
  13  0.471965     -0.750851      -5.37606       5.37606       47.2490       52.6250    
  14  0.287319      -1.24716      -8.92961       8.92961       49.5005       58.4301    
  15  0.526906     -0.640733      -4.58762       4.58762       47.7330       52.3206    
  16  0.176999      -1.73161      -12.3983       12.3983       47.7675       60.1657    
  17  0.868579     -0.140897      -1.00881       1.00881       48.0987       49.1075    
  18  0.621282     -0.475971      -3.40793       3.40793       48.4295       51.8374    
  19  0.181881      -1.70440      -12.2035       12.2035       48.4424       60.6458    
  20  0.565209     -0.570560      -4.08518       4.08518       48.2399       52.3250    
  21  0.927617     -0.751364E-01 -0.537973      0.537973       48.2589       48.7969    
  22  0.296120      -1.21699      -8.71359       8.71359       47.0527       55.7663    
  23  0.152389      -1.88132      -13.4701       13.4701       47.6508       61.1210    
  24  0.508731     -0.675835      -4.83895       4.83895       47.7601       52.5991    
  25  0.389654     -0.942496      -6.74822       6.74822       48.2681       55.0163    
  26  0.770754     -0.260386      -1.86435       1.86435       48.3863       50.2506    
  27  0.144347      -1.93554      -13.8583       13.8583       47.6585       61.5168    
  28  0.690124     -0.370884      -2.65551       2.65551       47.8400       50.4955    
  29  0.882429     -0.125077     -0.895546      0.895546       48.2243       49.1198    
  30  0.781105     -0.247045      -1.76883       1.76883       48.7895       50.5584    
  31  0.331946      -1.10278      -7.89586       7.89586       48.4284       56.3243    
  32  0.157011      -1.85144      -13.2562       13.2562       48.2199       61.4761    
  33  0.734200     -0.308973      -2.21223       2.21223       47.9426       50.1548    
  34  0.563390     -0.573784      -4.10826       4.10826       48.5919       52.7001    
  35  0.349498      -1.05126      -7.52695       7.52695       47.8653       55.3923    
  36  0.256822      -1.35937      -9.73302       9.73302       48.6567       58.3898    
  37  0.563556     -0.573488      -4.10615       4.10615       48.1762       52.2824    
  38  0.945419E-01  -2.35871      -16.8883       16.8883       48.0524       64.9407    
  39  0.571450     -0.559577      -4.00655       4.00655       47.8079       51.8145    
  40  0.583029E-01  -2.84210      -20.3493       20.3493       47.9044       68.2537    
  41  0.428808     -0.846746      -6.06266       6.06266       47.2142       53.2768    
  42  0.628450     -0.464499      -3.32579       3.32579       51.6227       54.9485    
  43  0.152789      -1.87869      -13.4514       13.4514       47.7893       61.2406    
  44  0.787004E-01  -2.54211      -18.2014       18.2014       49.5314       67.7327    
  45  0.170927E-01  -4.06911      -29.1346       29.1346       47.7477       76.8823    
  46  0.531078     -0.632847      -4.53115       4.53115       48.8766       53.4078    
  47  0.206082E-01  -3.88206      -27.7954       27.7954       48.7631       76.5585    
  48  0.909565     -0.947891E-01 -0.678685      0.678685       48.6182       49.2969    
  49  0.456291     -0.784625      -5.61787       5.61787       48.4120       54.0298    
  50  0.997425E-02  -4.60775      -32.9912       32.9912       48.6185       81.6098    
  51  0.251070      -1.38202      -9.89521       9.89521       52.4963       62.3915    
  52  0.548517     -0.600536      -4.29981       4.29981       47.7162       52.0160    
  53  0.210242      -1.55950      -11.1659       11.1659       47.7378       58.9037    
  54  0.848361     -0.164449      -1.17745       1.17745       51.5232       52.7006    
  55  0.160491E-01  -4.13210      -29.5857       29.5857       48.7468       78.3325    
  56  0.407967     -0.896570      -6.41940       6.41940       48.8185       55.2379    
  57  0.859929     -0.150905      -1.08048       1.08048       57.0215       58.1020    
  58  0.406052     -0.901274      -6.45308       6.45308       47.8226       54.2757    
  59  0.743169     -0.296832      -2.12530       2.12530       48.0744       50.1997    
  60  0.434823     -0.832817      -5.96293       5.96293       47.4504       53.4133    
  61  0.559897     -0.580003      -4.15279       4.15279       48.2784       52.4312    
  62  0.277128      -1.28328      -9.18819       9.18819       47.7694       56.9576    
  63  0.839691     -0.174721      -1.25100       1.25100       47.7983       49.0493    
  64  0.641867     -0.443375      -3.17454       3.17454       48.3164       51.4909    
  65  0.309074      -1.17417      -8.40703       8.40703       48.3329       56.7399    
  66  0.552351     -0.593572      -4.24994       4.24994       50.8673       55.1172    
  67  0.764824     -0.268109      -1.91965       1.91965       52.2522       54.1719    
  68  0.857070     -0.154235      -1.10432       1.10432       47.1344       48.2387    
  69  0.650112     -0.430610      -3.08315       3.08315       48.8082       51.8913    
  70  0.128926      -2.04851      -14.6673       14.6673       47.1804       61.8476    
loop,thermsimp(1:2)       43   1.70045       1.62856    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    155         47.89          0.84          1.12         23.81          0.54          0.04         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    156         51.63          0.84          1.11         23.77          0.82          0.04         26.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       43
neval is:      155
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       44
neval is:      155


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      155     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -16.1380       16.1380       47.1344       63.2724    
   2  0.780131E-01  -2.55088      -18.2642       18.2642       48.2138       66.4779    
   3  0.723689     -0.323394      -2.31549       2.31549       48.2589       50.5744    
   4  0.439896     -0.821218      -5.87988       5.87988       47.7233       53.6031    
   5  0.967364     -0.331803E-01 -0.237569      0.237569       47.7100       47.9476    
   6  0.235884      -1.44441      -10.3419       10.3419       47.7983       58.1402    
   7  0.311956      -1.16489      -8.34059       8.34059       47.3977       55.7383    
   8  0.600573     -0.509870      -3.65065       3.65065       48.0987       51.7494    
   9  0.781739     -0.246234      -1.76302       1.76302       48.2243       49.9873    
  10  0.505036     -0.683126      -4.89114       4.89114       48.6182       53.5094    
  11  0.896130     -0.109670     -0.785233      0.785233       47.8510       48.6363    
  12  0.545040     -0.606897      -4.34535       4.34535       47.9426       52.2879    
  13  0.338019      -1.08465      -7.76607       7.76607       47.7345       55.5006    
  14  0.200467      -1.60711      -11.5068       11.5068       48.0744       59.5812    
  15  0.548763     -0.600089      -4.29661       4.29661       48.3863       52.6829    
  16  0.897241     -0.108431     -0.776359      0.776359       48.5148       49.2911    
  17  0.229905      -1.47009      -10.5258       10.5258       47.8400       58.3658    
  18  0.387828     -0.947193      -6.78186       6.78186       48.7895       55.5714    
  19  0.789400     -0.236482      -1.69320       1.69320       48.3164       50.0096    
  20  0.495667     -0.701851      -5.02522       5.02522       47.6468       52.6720    
  21  0.818926     -0.199761      -1.43028       1.43028       47.8079       49.2382    
  22  0.181319      -1.70750      -12.2256       12.2256       48.4295       60.6551    
  23  0.901986     -0.103156     -0.738595      0.738595       48.8082       49.5468    
  24  0.933790E-01  -2.37109      -16.9769       16.9769       47.7162       64.6931    
  25  0.171523      -1.76304      -12.6233       12.6233       48.1762       60.7995    
  26  0.648450     -0.433170      -3.10147       3.10147       47.7330       50.8345    
  27  0.777448     -0.251739      -1.80244       1.80244       48.2399       50.0423    
  28  0.777670     -0.251453      -1.80039       1.80039       48.2784       50.0788    
  29  0.972420     -0.279672E-01 -0.200244      0.200244       47.7601       47.9604    
  30  0.825305     -0.192002      -1.37472       1.37472       47.2490       48.6237    
  31  0.470649     -0.753642      -5.39604       5.39604       48.5919       53.9879    
  32  0.263953      -1.33198      -9.53693       9.53693       51.5232       61.0601    
  33  0.857551     -0.153675      -1.10031       1.10031       48.0552       49.1555    
  34  0.950157     -0.511279E-01 -0.366073      0.366073       47.2142       47.5802    
  35  0.866482     -0.143314      -1.02612       1.02612       48.8766       49.9028    
  36  0.904889     -0.999433E-01 -0.715589      0.715589       47.4504       48.1660    
  37  0.297565      -1.21212      -8.67873       8.67873       48.2724       56.9511    
  38  0.902696     -0.102369     -0.732959      0.732959       48.4120       49.1449    
  39  0.800054     -0.223076      -1.59721       1.59721       52.2522       53.8495    
  40  0.534162     -0.627057      -4.48970       4.48970       47.8226       52.3123    
  41  0.593018     -0.522530      -3.74129       3.74129       51.6227       55.3640    
  42  0.682417E-01  -2.68470      -19.2223       19.2223       48.2681       67.4904    
  43  0.336048      -1.09050      -7.80793       7.80793       50.8673       58.6752    
  44  0.576540     -0.550710      -3.94306       3.94306       48.8185       52.7615    
  45  0.217955      -1.52347      -10.9079       10.9079       47.8653       58.7733    
  46  0.281607      -1.26724      -9.07338       9.07338       47.0527       56.1261    
  47  0.306631      -1.18211      -8.46384       8.46384       48.4284       56.8923    
  48  0.676335E-01  -2.69365      -19.2864       19.2864       48.3329       67.6193    
  49  0.145631      -1.92668      -13.7949       13.7949       47.7694       61.5643    
  50  0.820952     -0.197291      -1.41259       1.41259       57.0215       58.4341    
  51  0.224137      -1.49550      -10.7077       10.7077       48.6567       59.3644    
  52  0.738282     -0.303430      -2.17254       2.17254       49.5005       51.6731    
  53  0.364089      -1.01036      -7.23410       7.23410       47.7378       54.9719    
  54  0.321068      -1.13610      -8.13443       8.13443       47.7426       55.8771    
  55  0.179504      -1.71756      -12.2976       12.2976       47.7675       60.0651    
  56  0.808596     -0.212456      -1.52118       1.52118       48.4424       49.9635    
  57  0.974692     -0.256343E-01 -0.183540      0.183540       47.6508       47.8344    
  58  0.559434     -0.580830      -4.15871       4.15871       47.7893       51.9480    
  59  0.443035E-01  -3.11669      -22.3153       22.3153       48.2199       70.5352    
  60  0.711672     -0.340139      -2.43538       2.43538       47.6585       50.0939    
  61  0.578255     -0.547741      -3.92180       3.92180       47.9746       51.8964    
  62  0.102770      -2.27527      -16.2908       16.2908       47.1804       63.4711    
  63  0.813100     -0.206901      -1.48140       1.48140       52.4963       53.9777    
  64  0.612419     -0.490339      -3.51081       3.51081       48.0524       51.5632    
  65  0.406120     -0.901107      -6.45188       6.45188       49.5314       55.9833    
  66  0.255858      -1.36313      -9.75996       9.75996       47.9044       57.6644    
  67  0.622680     -0.473723      -3.39183       3.39183       48.7631       52.1550    
  68  0.428339     -0.847839      -6.07049       6.07049       47.7477       53.8182    
  69  0.594560     -0.519934      -3.72270       3.72270       48.7468       52.4695    
  70  0.921341     -0.819246E-01 -0.586576      0.586576       47.8937       48.4802    
loop,thermsimp(1:2)       44   16.1380       18.2642    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    157         49.04          0.84          1.12         23.81          0.45          0.05         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    158         63.05          0.84          1.12         23.77          0.57          0.04         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       44
neval is:      157
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       45
neval is:      157


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      157     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261     -0.975625      0.975625       47.2142       48.1898    
   2  0.990306     -0.974175E-02 -0.697505E-01  0.697505E-01   47.6508       47.7206    
   3  0.488656     -0.716096      -5.12721       5.12721       47.7100       52.8372    
   4  0.865115E-01  -2.44748      -17.5238       17.5238       47.7601       65.2840    
   5  0.234262      -1.45132      -10.3914       10.3914       47.4504       57.8417    
   6  0.906541     -0.981186E-01 -0.702524      0.702524       47.8937       48.5962    
   7  0.680454     -0.384995      -2.75654       2.75654       47.2490       50.0055    
   8  0.575574     -0.552388      -3.95507       3.95507       47.8510       51.8061    
   9  0.537443E-02  -5.22610      -37.4186       37.4186       48.4120       85.8306    
  10  0.421676     -0.863518      -6.18275       6.18275       48.0552       54.2380    
  11  0.297588      -1.21204      -8.67818       8.67818       47.8079       56.4861    
  12  0.119337      -2.12581      -15.2207       15.2207       48.5148       63.7354    
  13  0.958276     -0.426192E-01 -0.305151      0.305151       48.8082       49.1133    
  14  0.115549      -2.15806      -15.4516       15.4516       48.8766       64.3282    
  15  0.104220      -2.26125      -16.1905       16.1905       48.4424       64.6328    
  16  0.719503     -0.329194      -2.35701       2.35701       48.2243       50.5813    
  17  0.875656     -0.132782     -0.950710      0.950710       48.3164       49.2671    
  18  0.578760     -0.546868      -3.91555       3.91555       48.2399       52.1554    
  19  0.923704     -0.793639E-01 -0.568242      0.568242       48.2784       48.8466    
  20  0.457980     -0.780930      -5.59142       5.59142       47.6585       53.2499    
  21  0.783173     -0.244401      -1.74990       1.74990       48.2589       50.0088    
  22  0.764479     -0.268561      -1.92288       1.92288       47.7330       49.6559    
  23  0.496891     -0.699384      -5.00756       5.00756       48.0524       53.0600    
  24  0.554859     -0.589041      -4.21751       4.21751       49.5005       53.7180    
  25  0.734503E-02  -4.91373      -35.1821       35.1821       48.0987       83.2808    
  26  0.117643      -2.14010      -15.3230       15.3230       47.9746       63.2977    
  27  0.145440      -1.92799      -13.8043       13.8043       47.7893       61.5936    
  28  0.375449     -0.979633      -7.01412       7.01412       48.7631       55.7772    
  29  0.954324E-01  -2.34934      -16.8211       16.8211       47.9426       64.7637    
  30  0.449085     -0.800543      -5.73185       5.73185       47.8226       53.5545    
  31  0.354483      -1.03709      -7.42554       7.42554       48.7468       56.1723    
  32  0.153971      -1.87099      -13.3962       13.3962       47.6468       61.0430    
  33  0.871598     -0.137427     -0.983968      0.983968       48.3863       49.3702    
  34  0.633061     -0.457188      -3.27344       3.27344       48.8185       52.0919    
  35  0.947022E-01  -2.35702      -16.8761       16.8761       48.6182       65.4944    
  36  0.793812     -0.230909      -1.65330       1.65330       47.7233       49.3766    
  37  0.760585     -0.273667      -1.95944       1.95944       47.7477       49.7071    
  38  0.124312      -2.08496      -14.9282       14.9282       52.2522       67.1805    
  39  0.961605E-03  -6.94691      -49.7395       49.7395       52.4963       102.236    
  40  0.672529     -0.396710      -2.84042       2.84042       48.5919       51.4323    
  41  0.749847E-01  -2.59047      -18.5476       18.5476       47.7378       66.2854    
  42  0.982441     -0.177147E-01 -0.126837      0.126837       51.6227       51.7495    
  43  0.340727      -1.07667      -7.70892       7.70892       47.7345       55.4434    
  44  0.915043     -0.887846E-01 -0.635694      0.635694       48.7895       49.4252    
  45  0.150614      -1.89303      -13.5540       13.5540       47.3977       60.9517    
  46  0.892785     -0.113409     -0.812003      0.812003       47.7426       48.5546    
  47  0.844073     -0.169516      -1.21372       1.21372       49.5314       50.7451    
  48  0.469949     -0.755131      -5.40670       5.40670       47.0527       52.4594    
  49  0.389072     -0.943991      -6.75893       6.75893       48.4284       55.1874    
  50  0.738049     -0.303745      -2.17480       2.17480       48.2724       50.4472    
  51  0.250173      -1.38560      -9.92085       9.92085       47.9044       57.8253    
  52  0.383245     -0.959081      -6.86697       6.86697       47.7983       54.6652    
  53  0.384434     -0.955983      -6.84479       6.84479       47.8400       54.6848    
  54  0.479018E-01  -3.03860      -21.7562       21.7562       57.0215       78.7777    
  55  0.819285     -0.199323      -1.42715       1.42715       50.8673       52.2944    
  56  0.568165     -0.565344      -4.04783       4.04783       47.8653       51.9132    
  57  0.918732     -0.847606E-01 -0.606881      0.606881       48.6567       49.2636    
  58  0.374258     -0.982809      -7.03687       7.03687       48.0744       55.1112    
  59  0.966524     -0.340496E-01 -0.243794      0.243794       47.7675       48.0113    
  60  0.505261     -0.682680      -4.88795       4.88795       48.4295       53.3174    
  61  0.283819      -1.25942      -9.01737       9.01737       48.1762       57.1936    
  62  0.448920     -0.800911      -5.73448       5.73448       51.5232       57.2577    
  63  0.398648     -0.919676      -6.58483       6.58483       47.7694       54.3542    
  64  0.625742     -0.468817      -3.35671       3.35671       47.1344       50.4911    
  65  0.924606     -0.783881E-01 -0.561255      0.561255       47.1804       47.7416    
  66  0.546966     -0.603368      -4.32009       4.32009       47.7162       52.0363    
  67  0.372518     -0.987471      -7.07024       7.07024       48.2138       55.2840    
  68  0.167437      -1.78715      -12.7959       12.7959       48.2681       61.0640    
  69  0.142610      -1.94764      -13.9450       13.9450       48.3329       62.2779    
  70  0.935319     -0.668675E-01 -0.478768      0.478768       49.0408       49.5195    
loop,thermsimp(1:2)       45  0.975625      0.697505E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    159         48.25          0.84          1.12         23.82          0.48          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    160         50.21          0.84          1.11         23.80          0.51          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       45
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       46
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      159     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -17.3971       17.3971       47.6508       65.0480    
   2  0.312747      -1.16236      -8.32245       8.32245       47.1804       55.5028    
   3  0.317683      -1.14670      -8.21032       8.21032       47.7675       55.9778    
   4  0.693053     -0.366649      -2.62519       2.62519       47.2142       49.8394    
   5  0.361881      -1.01644      -7.27765       7.27765       47.7426       55.0203    
   6  0.127478      -2.05981      -14.7481       14.7481       47.8937       62.6418    
   7  0.718706     -0.330302      -2.36495       2.36495       48.2784       50.6433    
   8  0.609419E-01  -2.79783      -20.0324       20.0324       48.8082       68.8405    
   9  0.320798      -1.13695      -8.14047       8.14047       48.6567       56.7972    
  10  0.343503      -1.06856      -7.65083       7.65083       48.3164       55.9672    
  11  0.671828     -0.397753      -2.84789       2.84789       48.3863       51.2342    
  12  0.616702     -0.483369      -3.46090       3.46090       47.7233       51.1842    
  13  0.806358E-01  -2.51781      -18.0274       18.0274       48.7895       66.8169    
  14  0.997284     -0.271972E-02 -0.194731E-01  0.194731E-01   49.0408       49.0603    
  15  0.554344     -0.589969      -4.22415       4.22415       47.7330       51.9572    
  16  0.411057     -0.889023      -6.36536       6.36536       47.7477       54.1130    
  17  0.846258E-01  -2.46952      -17.6816       17.6816       47.2490       64.9306    
  18  0.737439     -0.304571      -2.18072       2.18072       48.2589       50.4396    
  19  0.393790     -0.931939      -6.67263       6.67263       48.2724       54.9450    
  20  0.965947     -0.346467E-01 -0.248069      0.248069       47.1344       47.3825    
  21  0.150166      -1.89601      -13.5754       13.5754       48.2243       61.7996    
  22  0.212005      -1.55114      -11.1061       11.1061       49.5314       60.6375    
  23  0.615060     -0.486036      -3.47999       3.47999       48.5919       52.0719    
  24  0.382142     -0.961962      -6.88760       6.88760       51.6227       58.5103    
  25  0.249044      -1.39013      -9.95324       9.95324       47.8510       57.8043    
  26  0.245943      -1.40266      -10.0430       10.0430       47.8653       57.9083    
  27  0.108882      -2.21749      -15.8771       15.8771       47.7162       63.5934    
  28  0.199835      -1.61026      -11.5294       11.5294       48.8185       60.3479    
  29  0.863954     -0.146235      -1.04704       1.04704       48.2399       49.2869    
  30  0.392842     -0.934347      -6.68988       6.68988       50.8673       57.5571    
  31  0.770596     -0.260592      -1.86582       1.86582       47.0527       48.9185    
  32  0.149868      -1.89800      -13.5896       13.5896       47.7100       61.2996    
  33  0.234154      -1.45178      -10.3946       10.3946       48.0524       58.4470    
  34  0.611512     -0.491821      -3.52141       3.52141       47.6585       51.1799    
  35  0.518093E-01  -2.96019      -21.1948       21.1948       48.4295       69.6243    
  36  0.567953     -0.565716      -4.05050       4.05050       47.8226       51.8731    
  37  0.190847      -1.65628      -11.8589       11.8589       49.5005       61.3594    
  38  0.104561      -2.25798      -16.1670       16.1670       48.0552       64.2223    
  39  0.135276      -2.00044      -14.3230       14.3230       47.7694       62.0924    
  40  0.262364      -1.33802      -9.58018       9.58018       47.7983       57.3784    
  41  0.463951     -0.767976      -5.49867       5.49867       47.8400       53.3387    
  42  0.419672     -0.868282      -6.21685       6.21685       48.0744       54.2912    
  43  0.897011     -0.108687     -0.778192      0.778192       48.4284       49.2066    
  44  0.818933     -0.199754      -1.43023       1.43023       48.2138       49.6440    
  45  0.136906      -1.98846      -14.2373       14.2373       47.7345       61.9718    
  46  0.561722     -0.576748      -4.12949       4.12949       48.7631       52.8926    
  47  0.991681     -0.835368E-02 -0.598120E-01  0.598120E-01   48.7468       48.8066    
  48  0.653388     -0.425585      -3.04717       3.04717       47.8079       50.8551    
  49  0.578557     -0.547219      -3.91806       3.91806       48.1762       52.0943    
  50  0.784121     -0.243191      -1.74124       1.74124       51.5232       53.2644    
  51  0.827307     -0.189579      -1.35738       1.35738       47.9044       49.2618    
  52  0.994261     -0.575522E-02 -0.412071E-01  0.412071E-01   47.4504       47.4916    
  53  0.274030      -1.29452      -9.26868       9.26868       47.3977       56.6664    
  54  0.879777     -0.128087     -0.917093      0.917093       47.6468       48.5639    
  55  0.694576E-01  -2.66704      -19.0959       19.0959       48.2681       67.3640    
  56  0.431517E-01  -3.14303      -22.5040       22.5040       47.7893       70.2932    
  57  0.620633     -0.477015      -3.41541       3.41541       48.3329       51.7483    
  58  0.166702      -1.79155      -12.8274       12.8274       47.9746       60.8020    
  59  0.785136E-01  -2.54448      -18.2184       18.2184       48.5148       66.7331    
  60  0.440162     -0.820613      -5.87555       5.87555       48.8766       54.7522    
  61  0.924092     -0.789432E-01 -0.565229      0.565229       48.4424       49.0076    
  62  0.957397     -0.435372E-01 -0.311725      0.311725       47.9426       48.2543    
  63  0.817312     -0.201734      -1.44440       1.44440       47.7601       49.2045    
  64  0.345978      -1.06138      -7.59942       7.59942       48.6182       56.2177    
  65  0.814305E-02  -4.81059      -34.4436       34.4436       47.7378       82.1814    
  66  0.961102     -0.396751E-01 -0.284072      0.284072       52.2522       52.5363    
  67  0.918841E-01  -2.38723      -17.0924       17.0924       57.0215       74.1139    
  68  0.875898     -0.132506     -0.948734      0.948734       48.0987       49.0474    
  69  0.884301     -0.122958     -0.880374      0.880374       48.4120       49.2923    
  70  0.822040E-01  -2.49855      -17.8895       17.8895       48.2507       66.1402    
loop,thermsimp(1:2)       46   17.3971       8.32245    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161         47.38          0.84          1.12         23.83          0.45          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    162         47.89          0.82          1.11         23.84          0.67          0.04         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    47.384        1.212     -1.896      3.239     -102.6      1.420    
                      0.2846      1.287     -99.70      3.671     0.2410E-01

                       2.269     -1.027      1.530      7323.      3656.    

                     -0.8287E-01  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6290.      2459.    

                       1.433     -5.821     -4.009     -8.417      6.739    

                      -14.93     -3.543      3788.      0.000      9241.    



                       1700.     0.1375E+05 -4395.     0.1003E+05  5327.    

                       6344.     0.9870E-02 0.2012     0.1795E-01 0.1289    

                     -0.2486    -0.7414E-01 0.1979     0.1274     0.7500E-01



                     -0.4834    -0.7587      0.000     0.7921E-01-0.9326E-01

                      0.1795E-01 0.1175    -0.7116    -0.1342     0.2389E-01

                      0.6311E-01-0.1820E-01-0.6714     -1.194      7514.    



                      -1.030     -1.277     -2.257     -2.297    -0.3807    

                     -0.3252      9.225      8.669    -0.1967E+05 -4.000    

                     -0.5292     -2.214      9.309      8.882    -0.1908E+05



                      -4.000     0.4018    -0.4158      8.873      9.096    

                     -0.1908E+05 -7.000    -0.7222    -0.6422      9.024    

                       8.785    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       46
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       47
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      161     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -22.7133       22.7133       47.1344       69.8477    
   2  0.581082     -0.542864      -3.88688       3.88688       47.4504       51.3373    
   3  0.690143     -0.370857      -2.65532       2.65532       47.9426       50.5979    
   4  0.958690     -0.421877E-01 -0.302062      0.302062       47.6468       47.9489    
   5  0.947492     -0.539367E-01 -0.386184      0.386184       48.7468       49.1330    
   6  0.253816E-01  -3.67373      -26.3037       26.3037       47.0527       73.3564    
   7  0.811950     -0.208316      -1.49153       1.49153       48.4424       49.9339    
   8  0.448512     -0.801821      -5.74100       5.74100       48.0987       53.8397    
   9  0.625244     -0.469613      -3.36241       3.36241       49.0408       52.4032    
  10  0.557627     -0.584065      -4.18188       4.18188       47.7601       51.9420    
  11  0.762657     -0.270947      -1.93997       1.93997       48.4284       50.3684    
  12  0.579328     -0.545887      -3.90852       3.90852       47.9044       51.8129    
  13  0.168395      -1.78144      -12.7551       12.7551       48.2399       60.9949    
  14  0.993282     -0.674111E-02 -0.482660E-01  0.482660E-01   48.4120       48.4602    
  15  0.573458     -0.556070      -3.98144       3.98144       48.2138       52.1952    
  16  0.900456     -0.104854     -0.750746      0.750746       47.2142       47.9649    
  17  0.961937     -0.388068E-01 -0.277855      0.277855       48.2589       48.5367    
  18  0.685702     -0.377312      -2.70154       2.70154       48.2784       50.9799    
  19  0.335644      -1.09171      -7.81656       7.81656       47.8079       55.6245    
  20  0.726392     -0.319666      -2.28879       2.28879       47.6585       49.9473    
  21  0.523515     -0.647189      -4.63384       4.63384       47.7233       52.3571    
  22  0.877914     -0.130206     -0.932272      0.932272       48.3863       49.3185    
  23  0.893563     -0.112539     -0.805773      0.805773       48.3329       49.1387    
  24  0.829449     -0.186994      -1.33887       1.33887       47.8226       49.1615    
  25  0.454457     -0.788653      -5.64672       5.64672       47.7330       53.3797    
  26  0.261407      -1.34168      -9.60633       9.60633       48.5919       58.1982    
  27  0.144225      -1.93638      -13.8644       13.8644       48.1762       62.0406    
  28  0.963744     -0.369299E-01 -0.264416      0.264416       52.2522       52.5167    
  29  0.267843      -1.31735      -9.43220       9.43220       48.7631       58.1953    
  30  0.251943E-01  -3.68114      -26.3568       26.3568       51.5232       77.8800    
  31  0.321532      -1.13466      -8.12410       8.12410       47.8400       55.9641    
  32  0.440903     -0.818930      -5.86350       5.86350       47.7477       53.6112    
  33  0.214416      -1.53984      -11.0252       11.0252       48.0744       59.0995    
  34  0.212185      -1.55030      -11.1001       11.1001       48.8766       59.9767    
  35  0.948253E-01  -2.35572      -16.8668       16.8668       48.2724       65.1392    
  36  0.507627     -0.678008      -4.85450       4.85450       47.7426       52.5971    
  37  0.415074     -0.879299      -6.29574       6.29574       47.1804       53.4761    
  38  0.768069     -0.263876      -1.88934       1.88934       48.3164       50.2057    
  39  0.462999E-01  -3.07261      -21.9998       21.9998       47.7675       69.7672    
  40  0.835390     -0.179856      -1.28776       1.28776       48.6182       49.9060    
  41  0.678734     -0.387526      -2.77467       2.77467       47.3977       50.1724    
  42  0.363569      -1.01179      -7.24433       7.24433       48.6567       55.9011    
  43  0.677161     -0.389846      -2.79128       2.79128       47.7983       50.5895    
  44  0.506668     -0.679899      -4.86804       4.86804       50.8673       55.7353    
  45  0.875658     -0.132779     -0.950692      0.950692       47.8510       48.8017    
  46  0.924863     -0.781102E-01 -0.559265      0.559265       47.8653       48.4246    
  47  0.794570E-01  -2.53254      -18.1329       18.1329       48.0524       66.1853    
  48  0.449212     -0.800261      -5.72983       5.72983       51.6227       57.3525    
  49  0.658987     -0.417051      -2.98607       2.98607       48.8185       51.8046    
  50  0.674357     -0.393995      -2.82099       2.82099       49.5314       52.3524    
  51  0.436334     -0.829348      -5.93809       5.93809       47.9746       53.9127    
  52  0.331871      -1.10301      -7.89748       7.89748       47.7100       55.6075    
  53  0.233029      -1.45659      -10.4291       10.4291       49.5005       59.9297    
  54  0.207666      -1.57183      -11.2542       11.2542       48.2243       59.4784    
  55  0.801765     -0.220940      -1.58192       1.58192       47.7345       49.3164    
  56  0.614336E-01  -2.78980      -19.9748       19.9748       47.7694       67.7442    
  57  0.167288      -1.78804      -12.8023       12.8023       47.8937       60.6959    
  58  0.718808     -0.330162      -2.36394       2.36394       47.7162       50.0802    
  59  0.981938     -0.182272E-01 -0.130506      0.130506       48.0552       48.1857    
  60  0.759328     -0.275322      -1.97129       1.97129       47.2490       49.2203    
  61  0.290749      -1.23530      -8.84466       8.84466       47.6508       56.4955    
  62  0.887200     -0.119685     -0.856939      0.856939       48.2507       49.1076    
  63  0.186280      -1.68051      -12.0323       12.0323       48.5148       60.5471    
  64  0.427708     -0.849315      -6.08105       6.08105       48.7895       54.8706    
  65  0.252777      -1.37525      -9.84671       9.84671       48.2681       58.1148    
  66  0.648648     -0.432865      -3.09929       3.09929       48.8082       51.9075    
  67  0.823358     -0.194364      -1.39164       1.39164       48.4295       49.8211    
  68  0.352572      -1.04250      -7.46425       7.46425       47.7893       55.2535    
  69  0.217910      -1.52367      -10.9094       10.9094       57.0215       67.9309    
  70  0.297394      -1.21270      -8.68286       8.68286       47.3838       56.0667    
loop,thermsimp(1:2)       47   22.7133       3.88688    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163         49.96          0.84          1.12         23.82          0.79          0.04         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       47
neval is:      162
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       48
neval is:      162


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      162     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -4.06485       4.06485       47.6468       51.7117    
   2  0.216137      -1.53184      -10.9679       10.9679       47.2142       58.1821    
   3  0.476425     -0.741444      -5.30870       5.30870       48.0552       53.3639    
   4  0.184047      -1.69256      -12.1187       12.1187       47.8653       59.9840    
   5  0.722630     -0.324858      -2.32597       2.32597       48.4120       50.7379    
   6  0.887750     -0.119065     -0.852499      0.852499       48.2589       49.1114    
   7  0.236344      -1.44247      -10.3280       10.3280       47.8510       58.1790    
   8  0.798055     -0.225578      -1.61512       1.61512       48.2507       49.8658    
   9  0.425454     -0.854597      -6.11888       6.11888       48.7468       54.8657    
  10  0.605701     -0.501368      -3.58977       3.58977       48.3329       51.9226    
  11  0.742456     -0.297792      -2.13218       2.13218       47.8226       49.9548    
  12  0.378462E-01  -3.27423      -23.4433       23.4433       47.2490       70.6923    
  13  0.341910      -1.07321      -7.68411       7.68411       47.7345       55.4186    
  14  0.794971E-01  -2.53203      -18.1292       18.1292       48.3863       66.5155    
  15  0.586423     -0.533715      -3.82137       3.82137       48.4295       52.2509    
  16  0.990523     -0.952170E-02 -0.681749E-01  0.681749E-01   48.6182       48.6864    
  17  0.348475      -1.05419      -7.54793       7.54793       48.4424       55.9903    
  18  0.998034     -0.196755E-02 -0.140875E-01  0.140875E-01   47.6585       47.6726    
  19  0.616072     -0.484391      -3.46822       3.46822       47.7162       51.1844    
  20  0.427239     -0.850411      -6.08890       6.08890       47.3977       53.4866    
  21  0.598160     -0.513898      -3.67948       3.67948       48.3164       51.9959    
  22  0.642831     -0.441873      -3.16379       3.16379       48.4284       51.5922    
  23  0.392766     -0.934541      -6.69126       6.69126       47.7983       54.4895    
  24  0.738407     -0.303260      -2.17133       2.17133       47.9426       50.1139    
  25  0.334341      -1.09559      -7.84440       7.84440       48.2784       56.1228    
  26  0.997912     -0.208996E-02 -0.149640E-01  0.149640E-01   47.4504       47.4654    
  27  0.492305E-01  -3.01124      -21.5603       21.5603       48.8185       70.3788    
  28  0.304734      -1.18832      -8.50828       8.50828       47.9044       56.4127    
  29  0.159886      -1.83330      -13.1263       13.1263       48.8082       61.9345    
  30  0.991331     -0.870666E-02 -0.623392E-01  0.623392E-01   47.7601       47.8225    
  31  0.735164     -0.307662      -2.20285       2.20285       48.2138       50.4166    
  32  0.279948      -1.27315      -9.11569       9.11569       49.5314       58.6471    
  33  0.457260     -0.782502      -5.60268       5.60268       47.7233       53.3259    
  34  0.678170     -0.388358      -2.78062       2.78062       49.0408       51.8214    
  35  0.689603     -0.371639      -2.66092       2.66092       52.2522       54.9132    
  36  0.468470     -0.758283      -5.42927       5.42927       47.7426       53.1719    
  37  0.937429     -0.646141E-01 -0.462634      0.462634       47.7330       48.1956    
  38  0.115915      -2.15490      -15.4290       15.4290       47.1804       62.6093    
  39  0.125789      -2.07315      -14.8436       14.8436       47.7477       62.5913    
  40  0.137562      -1.98368      -14.2031       14.2031       48.0987       62.3018    
  41  0.273901      -1.29499      -9.27204       9.27204       47.9746       57.2467    
  42  0.934963     -0.672484E-01 -0.481495      0.481495       48.7895       49.2710    
  43  0.450296     -0.797850      -5.71256       5.71256       47.7893       53.5018    
  44  0.681645     -0.383246      -2.74402       2.74402       47.7100       50.4540    
  45  0.282914E-01  -3.56520      -25.5266       25.5266       47.8079       73.3345    
  46  0.962226     -0.385062E-01 -0.275702      0.275702       50.8673       51.1430    
  47  0.771412     -0.259533      -1.85824       1.85824       48.6567       50.5150    
  48  0.778208     -0.250761      -1.79544       1.79544       47.8400       49.6354    
  49  0.945686     -0.558450E-01 -0.399847      0.399847       47.3838       47.7837    
  50  0.648669     -0.432833      -3.09906       3.09906       47.6508       50.7499    
  51  0.214283      -1.54046      -11.0296       11.0296       51.6227       62.6523    
  52  0.692999     -0.366726      -2.62574       2.62574       48.2681       50.8939    
  53  0.966323     -0.342573E-01 -0.245280      0.245280       48.7631       49.0084    
  54  0.975007     -0.253104E-01 -0.181221      0.181221       48.5919       48.7731    
  55  0.947991E-01  -2.35600      -16.8688       16.8688       48.0744       64.9432    
  56  0.195092      -1.63429      -11.7014       11.7014       48.2243       59.9257    
  57  0.459282     -0.778091      -5.57109       5.57109       49.5005       55.0716    
  58  0.563954     -0.572782      -4.10109       4.10109       48.8766       52.9777    
  59  0.482884     -0.727978      -5.21229       5.21229       48.5148       53.7270    
  60  0.270357      -1.30801      -9.36531       9.36531       47.8937       57.2590    
  61  0.184282      -1.69129      -12.1095       12.1095       48.2399       60.3494    
  62  0.486455     -0.720611      -5.15954       5.15954       48.1762       53.3358    
  63  0.348603      -1.05382      -7.54532       7.54532       48.2724       55.8177    
  64  0.556175     -0.586673      -4.20055       4.20055       48.0524       52.2530    
  65  0.125277      -2.07723      -14.8729       14.8729       47.7694       62.6423    
  66  0.473622     -0.747346      -5.35096       5.35096       57.0215       62.3725    
  67  0.762738     -0.270841      -1.93921       1.93921       47.7675       49.7067    
  68  0.898920     -0.106561     -0.762973      0.762973       47.1344       47.8974    
  69  0.646772E-01  -2.73835      -19.6064       19.6064       47.0527       66.6591    
  70  0.303985      -1.19078      -8.52590       8.52590       49.9618       58.4877    
loop,thermsimp(1:2)       48   4.06485       10.9679    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    164         47.23          0.84          1.11         23.82          0.51          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    165         47.72          0.84          1.12         23.82          0.47          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       48
neval is:      164
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       49
neval is:      164


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      164     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -12.2394       12.2394       47.4504       59.6898    
   2  0.335083      -1.09338      -7.82853       7.82853       47.6585       55.4870    
   3  0.585160     -0.535871      -3.83681       3.83681       47.3838       51.2206    
   4  0.445729     -0.808044      -5.78555       5.78555       47.7601       53.5457    
   5  0.963605     -0.370741E-01 -0.265448      0.265448       47.1344       47.3999    
   6  0.538074     -0.619758      -4.43744       4.43744       47.7330       52.1704    
   7  0.971443     -0.289729E-01 -0.207445      0.207445       48.6182       48.8257    
   8  0.817136     -0.201950      -1.44595       1.44595       48.5919       50.0378    
   9  0.216943      -1.52812      -10.9413       10.9413       48.7631       59.7044    
  10  0.572311     -0.558074      -3.99578       3.99578       48.2589       52.2547    
  11  0.511761     -0.669897      -4.79643       4.79643       48.7895       53.5859    
  12  0.331920E-01  -3.40545      -24.3828       24.3828       47.8400       72.2228    
  13  0.662680     -0.411462      -2.94605       2.94605       47.7675       50.7135    
  14  0.578679     -0.547007      -3.91654       3.91654       48.2507       52.1672    
  15  0.473979     -0.746592      -5.34556       5.34556       47.8226       53.1682    
  16  0.243750      -1.41161      -10.1071       10.1071       47.9426       58.0497    
  17  0.784227     -0.243057      -1.74028       1.74028       48.2138       49.9540    
  18  0.215065      -1.53682      -11.0035       11.0035       47.7100       58.7135    
  19  0.813272     -0.206689      -1.47989       1.47989       48.6567       50.1366    
  20  0.877336     -0.130865     -0.936988      0.936988       48.4120       49.3489    
  21  0.911070     -0.931357E-01 -0.666847      0.666847       47.6508       48.3177    
  22  0.424500     -0.856844      -6.13496       6.13496       48.2681       54.4031    
  23  0.122508      -2.09958      -15.0329       15.0329       50.8673       65.9002    
  24  0.173199      -1.75331      -12.5536       12.5536       47.7162       60.2699    
  25  0.243010      -1.41465      -10.1288       10.1288       48.4284       58.5573    
  26  0.618804     -0.479966      -3.43653       3.43653       47.6468       51.0833    
  27  0.365303      -1.00703      -7.21027       7.21027       49.0408       56.2511    
  28  0.178054      -1.72567      -12.3557       12.3557       48.3329       60.6886    
  29  0.416122     -0.876776      -6.27767       6.27767       48.3164       54.5940    
  30  0.789287     -0.236625      -1.69423       1.69423       48.4295       50.1237    
  31  0.786736     -0.239863      -1.71741       1.71741       48.0524       49.7698    
  32  0.295880      -1.21780      -8.71939       8.71939       48.8766       57.5960    
  33  0.418649     -0.870722      -6.23432       6.23432       47.7426       53.9770    
  34  0.706992     -0.346736      -2.48261       2.48261       47.7233       50.2059    
  35  0.281863      -1.26633      -9.06688       9.06688       48.1762       57.2431    
  36  0.357290      -1.02921      -7.36908       7.36908       48.0552       55.4243    
  37  0.174180      -1.74767      -12.5132       12.5132       47.3977       59.9109    
  38  0.190924      -1.65588      -11.8560       11.8560       47.7893       59.6453    
  39  0.630369     -0.461449      -3.30395       3.30395       48.5148       51.8187    
  40  0.252261      -1.37729      -9.86134       9.86134       47.7983       57.6596    
  41  0.359213      -1.02384      -7.33065       7.33065       48.7468       56.0775    
  42  0.740344     -0.300640      -2.15257       2.15257       52.2522       54.4048    
  43  0.283211      -1.26156      -9.03273       9.03273       49.5005       58.5333    
  44  0.965119     -0.355039E-01 -0.254206      0.254206       47.7345       47.9887    
  45  0.389600     -0.942634      -6.74921       6.74921       48.2724       55.0216    
  46  0.598383     -0.513525      -3.67681       3.67681       48.4424       52.1192    
  47  0.631795     -0.459190      -3.28778       3.28778       48.2784       51.5662    
  48  0.997460     -0.254363E-02 -0.182123E-01  0.182123E-01   47.9044       47.9226    
  49  0.192532      -1.64749      -11.7960       11.7960       47.9746       59.7706    
  50  0.769348     -0.262212      -1.87742       1.87742       47.8937       49.7711    
  51  0.740745     -0.300099      -2.14869       2.14869       47.8510       49.9997    
  52  0.590587     -0.526639      -3.77071       3.77071       47.2142       50.9849    
  53  0.628310E-01  -2.76731      -19.8138       19.8138       49.9618       69.7756    
  54  0.515529     -0.662562      -4.74391       4.74391       49.5314       54.2753    
  55  0.306025      -1.18409      -8.47802       8.47802       48.2243       56.7023    
  56  0.686790     -0.375726      -2.69018       2.69018       47.8653       50.5555    
  57  0.357910      -1.02747      -7.35667       7.35667       48.2399       55.5965    
  58  0.267469      -1.31875      -9.44219       9.44219       48.8082       58.2504    
  59  0.410193     -0.891128      -6.38043       6.38043       48.0987       54.4791    
  60  0.490314     -0.712709      -5.10296       5.10296       57.0215       62.1245    
  61  0.395217     -0.928320      -6.64672       6.64672       47.7477       54.3944    
  62  0.641491E-01  -2.74655      -19.6651       19.6651       47.1804       66.8455    
  63  0.610173     -0.494012      -3.53710       3.53710       47.7694       51.3065    
  64  0.657523     -0.419276      -3.00199       3.00199       51.6227       54.6247    
  65  0.172961      -1.75469      -12.5635       12.5635       48.0744       60.6378    
  66  0.166793      -1.79100      -12.8235       12.8235       48.3863       61.2097    
  67  0.184181      -1.69184      -12.1135       12.1135       47.0527       59.1662    
  68  0.728490     -0.316781      -2.26814       2.26814       48.8185       51.0866    
  69  0.307541      -1.17915      -8.44263       8.44263       47.2490       55.6916    
  70  0.929000     -0.736468E-01 -0.527308      0.527308       47.2329       47.7602    
loop,thermsimp(1:2)       49   12.2394       7.82853    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166         47.20          0.84          1.11         23.79          0.47          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    167         48.74          0.84          1.11         23.74          0.56          0.04         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       49
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       50
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      166     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -24.7070       24.7070       47.1344       71.8414    
   2  0.601445     -0.508421      -3.64027       3.64027       47.2329       50.8731    
   3  0.651191     -0.428952      -3.07127       3.07127       47.9044       50.9757    
   4  0.187303      -1.67503      -11.9931       11.9931       47.7345       59.7276    
   5  0.664603     -0.408566      -2.92531       2.92531       47.6508       50.5762    
   6  0.945236     -0.563208E-01 -0.403254      0.403254       48.6182       49.0215    
   7  0.865870     -0.144020      -1.03118       1.03118       48.4120       49.4431    
   8  0.674117     -0.394351      -2.82354       2.82354       48.0524       50.8759    
   9  0.959689E-01  -2.34373      -16.7810       16.7810       47.8937       64.6747    
  10  0.663337     -0.410472      -2.93896       2.93896       48.2138       51.1527    
  11  0.384854     -0.954891      -6.83697       6.83697       47.8510       54.6880    
  12  0.892338     -0.113910     -0.815593      0.815593       48.5919       49.4075    
  13  0.470837     -0.753243      -5.39318       5.39318       48.4295       53.8227    
  14  0.262618      -1.33706      -9.57325       9.57325       48.6567       58.2300    
  15  0.877143     -0.131085     -0.938560      0.938560       47.7233       48.6618    
  16  0.262102      -1.33902      -9.58733       9.58733       47.8653       57.4527    
  17  0.306130      -1.18375      -8.47557       8.47557       47.7675       56.2430    
  18  0.251844      -1.37895      -9.87319       9.87319       47.2142       57.0874    
  19  0.371147     -0.991157      -7.09664       7.09664       47.6468       54.7434    
  20  0.244393E-01  -3.71156      -26.5746       26.5746       48.8185       75.3931    
  21  0.550903     -0.596197      -4.26874       4.26874       47.3838       51.6526    
  22  0.509078     -0.675154      -4.83407       4.83407       47.7694       52.6035    
  23  0.741178     -0.299515      -2.14451       2.14451       48.2784       50.4229    
  24  0.585965     -0.534496      -3.82696       3.82696       48.5148       52.3417    
  25  0.602491     -0.506683      -3.62783       3.62783       48.4424       52.0702    
  26  0.532366     -0.630423      -4.51380       4.51380       48.2507       52.7645    
  27  0.264247      -1.33087      -9.52896       9.52896       47.7330       57.2620    
  28  0.468512     -0.758194      -5.42863       5.42863       48.2589       53.6875    
  29  0.338122      -1.08435      -7.76389       7.76389       47.8226       55.5865    
  30  0.815455     -0.204008      -1.46069       1.46069       47.7601       49.2208    
  31  0.126007      -2.07142      -14.8313       14.8313       48.7895       63.6208    
  32  0.391435     -0.937937      -6.71558       6.71558       47.7426       54.4582    
  33  0.477179     -0.739864      -5.29739       5.29739       49.5314       54.8288    
  34  0.926058     -0.768180E-01 -0.550013      0.550013       47.7477       48.2977    
  35  0.305992E-01  -3.48678      -24.9652       24.9652       48.2681       73.2333    
  36  0.142122      -1.95107      -13.9696       13.9696       52.2522       66.2218    
  37  0.934627E-01  -2.37019      -16.9705       16.9705       48.0987       65.0692    
  38  0.933240     -0.690924E-01 -0.494698      0.494698       48.3164       48.8111    
  39  0.551354     -0.595378      -4.26288       4.26288       51.6227       55.8856    
  40  0.167646      -1.78590      -12.7870       12.7870       48.2724       61.0594    
  41  0.657770     -0.418900      -2.99931       2.99931       48.0552       51.0545    
  42  0.937012     -0.650587E-01 -0.465817      0.465817       47.6585       48.1243    
  43  0.435130     -0.832109      -5.95786       5.95786       48.2399       54.1977    
  44  0.346278E-01  -3.36310      -24.0796       24.0796       47.2490       71.3286    
  45  0.529273     -0.636251      -4.55553       4.55553       48.7468       53.3023    
  46  0.543808     -0.609159      -4.36155       4.36155       49.0408       53.4023    
  47  0.476993     -0.740254      -5.30018       5.30018       48.2243       53.5244    
  48  0.602365     -0.506891      -3.62931       3.62931       48.1762       51.8055    
  49  0.429141     -0.845970      -6.05710       6.05710       48.8766       54.9337    
  50  0.161300E-01  -4.12707      -29.5496       29.5496       47.7983       77.3479    
  51  0.806405     -0.215169      -1.54060       1.54060       47.9426       49.4832    
  52  0.577848E-01  -2.85103      -20.4132       20.4132       48.8082       69.2214    
  53  0.992308     -0.772154E-02 -0.552858E-01  0.552858E-01   49.5005       49.5558    
  54  0.130687      -2.03495      -14.5702       14.5702       48.4284       62.9986    
  55  0.844072     -0.169518      -1.21374       1.21374       47.7100       48.9237    
  56  0.900890     -0.104372     -0.747301      0.747301       47.0527       47.8000    
  57  0.886923E-01  -2.42258      -17.3456       17.3456       47.7893       65.1348    
  58  0.675479     -0.392334      -2.80909       2.80909       47.4504       50.2595    
  59  0.486368     -0.720791      -5.16083       5.16083       48.7631       53.9239    
  60  0.868319E-01  -2.44378      -17.4973       17.4973       47.9746       65.4720    
  61  0.536051     -0.623527      -4.46442       4.46442       47.3977       51.8621    
  62  0.916344     -0.873636E-01 -0.625519      0.625519       47.7162       48.3417    
  63  0.264660E-01  -3.63190      -26.0042       26.0042       48.0744       74.0785    
  64  0.765006     -0.267871      -1.91794       1.91794       48.3329       50.2508    
  65  0.755495     -0.280383      -2.00753       2.00753       48.3863       50.3938    
  66  0.149819      -1.89833      -13.5919       13.5919       57.0215       70.6134    
  67  0.514409     -0.664736      -4.75948       4.75948       50.8673       55.6267    
  68  0.902494E-01  -2.40518      -17.2210       17.2210       47.1804       64.4013    
  69  0.837965     -0.176779      -1.26573       1.26573       49.9618       51.2276    
  70  0.833448     -0.182184      -1.30443       1.30443       47.1953       48.4997    
loop,thermsimp(1:2)       50   24.7070       3.64027    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168         47.48          0.83          1.11         23.80          0.62          0.04         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    169         48.93          0.84          1.11         23.72          0.62          0.04         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       50
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       51
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      168     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01 -0.525030      0.525030       47.0527       47.5777    
   2  0.669511     -0.401208      -2.87263       2.87263       47.6585       50.5311    
   3  0.863337E-01  -2.44954      -17.5386       17.5386       47.7477       65.2862    
   4  0.279945      -1.27316      -9.11578       9.11578       47.7162       56.8320    
   5  0.832640     -0.183154      -1.31137       1.31137       47.1953       48.5067    
   6  0.848933     -0.163775      -1.17262       1.17262       47.7233       48.8959    
   7  0.141794      -1.95338      -13.9861       13.9861       48.3164       62.3025    
   8  0.208764      -1.56655      -11.2164       11.2164       47.7100       58.9265    
   9  0.755787     -0.279996      -2.00476       2.00476       48.6182       50.6230    
  10  0.177416      -1.72926      -12.3814       12.3814       47.7601       60.1416    
  11  0.405148     -0.903503      -6.46904       6.46904       48.5919       55.0609    
  12  0.640380     -0.445693      -3.19114       3.19114       48.4120       51.6031    
  13  0.548060     -0.601370      -4.30578       4.30578       47.9426       52.2484    
  14  0.773287     -0.257105      -1.84086       1.84086       49.5005       51.3414    
  15  0.180768      -1.71054      -12.2474       12.2474       48.3329       60.5803    
  16  0.135846      -1.99624      -14.2929       14.2929       47.4504       61.7433    
  17  0.601016     -0.509133      -3.64537       3.64537       48.3863       52.0316    
  18  0.302263      -1.19646      -8.56658       8.56658       48.2784       56.8450    
  19  0.189428      -1.66374      -11.9123       11.9123       47.6508       59.5632    
  20  0.737158     -0.304953      -2.18345       2.18345       47.2329       49.4163    
  21  0.790680     -0.234862      -1.68160       1.68160       48.0524       49.7340    
  22  0.177192E-01  -4.03310      -28.8768       28.8768       47.9044       76.7812    
  23  0.236042      -1.44375      -10.3371       10.3371       48.0552       58.3924    
  24  0.459229     -0.778206      -5.57191       5.57191       48.2138       53.7857    
  25  0.586479E-01  -2.83620      -20.3071       20.3071       49.9618       70.2689    
  26  0.263766      -1.33269      -9.54201       9.54201       47.3838       56.9258    
  27  0.942550     -0.591663E-01 -0.423628      0.423628       48.1762       48.5999    
  28  0.106855      -2.23628      -16.0116       16.0116       47.3977       63.4094    
  29  0.710700     -0.341505      -2.44516       2.44516       48.4424       50.8875    
  30  0.207109E-01  -3.87709      -27.7598       27.7598       48.5148       76.2746    
  31  0.901203     -0.104025     -0.744814      0.744814       47.7694       48.5142    
  32  0.949751     -0.515555E-01 -0.369135      0.369135       48.2507       48.6198    
  33  0.343487      -1.06861      -7.65118       7.65118       48.7468       56.3980    
  34  0.875043     -0.133483     -0.955730      0.955730       49.0408       49.9965    
  35  0.122447E-01  -4.40266      -31.5228       31.5228       48.2243       79.7471    
  36  0.820650     -0.197659      -1.41523       1.41523       48.2589       49.6741    
  37  0.748866     -0.289195      -2.07062       2.07062       48.4295       50.5001    
  38  0.594525     -0.519992      -3.72312       3.72312       48.7631       52.4862    
  39  0.927863E-01  -2.37746      -17.0225       17.0225       48.2399       65.2623    
  40  0.631335     -0.459918      -3.29299       3.29299       47.7426       51.0356    
  41  0.282620      -1.26365      -9.04769       9.04769       47.8510       56.8987    
  42  0.707811     -0.345578      -2.47432       2.47432       47.6468       50.1211    
  43  0.930463     -0.720730E-01 -0.516039      0.516039       49.5314       50.0474    
  44  0.988563     -0.115032E-01 -0.823626E-01  0.823626E-01   48.8766       48.9590    
  45  0.869439     -0.139907      -1.00173       1.00173       47.8226       48.8244    
  46  0.693921     -0.365397      -2.61622       2.61622       50.8673       53.4835    
  47  0.731753     -0.312312      -2.23614       2.23614       51.6227       53.8588    
  48  0.848712     -0.164035      -1.17448       1.17448       47.7675       48.9420    
  49  0.174447      -1.74613      -12.5022       12.5022       47.2142       59.7164    
  50  0.313212      -1.16087      -8.31180       8.31180       47.7330       56.0448    
  51  0.880789     -0.126937     -0.908862      0.908862       47.8653       48.7742    
  52  0.441967     -0.816520      -5.84624       5.84624       48.6567       54.5030    
  53  0.624106     -0.471435      -3.37545       3.37545       47.7345       51.1099    
  54  0.447426     -0.804244      -5.75834       5.75834       48.2724       54.0308    
  55  0.681696     -0.383171      -2.74349       2.74349       48.4284       51.1719    
  56  0.336384      -1.08950      -7.80079       7.80079       48.7895       56.5903    
  57  0.197044      -1.62433      -11.6301       11.6301       47.1804       58.8105    
  58  0.186834E-01  -3.98012      -28.4974       28.4974       47.8937       76.3911    
  59  0.467980     -0.759329      -5.43676       5.43676       48.0987       53.5355    
  60  0.607270     -0.498782      -3.57125       3.57125       47.7893       51.3605    
  61  0.299128      -1.20689      -8.64124       8.64124       47.9746       56.6159    
  62  0.166354      -1.79364      -12.8423       12.8423       52.2522       65.0946    
  63  0.542834     -0.610952      -4.37438       4.37438       48.8082       53.1826    
  64  0.811476     -0.208901      -1.49572       1.49572       57.0215       58.5172    
  65  0.520065     -0.653802      -4.68119       4.68119       47.2490       51.9302    
  66  0.955839     -0.451662E-01 -0.323388      0.323388       47.1344       47.4578    
  67  0.729602     -0.315256      -2.25721       2.25721       48.2681       50.5253    
  68  0.792398     -0.232691      -1.66606       1.66606       48.0744       49.7404    
  69  0.803787     -0.218421      -1.56388       1.56388       48.8185       50.3824    
  70  0.812756     -0.207324      -1.48443       1.48443       47.4819       48.9663    
loop,thermsimp(1:2)       51  0.525030       2.87263    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170         48.26          0.84          1.12         23.78          0.47          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.26
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       51
neval is:      169
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       52
neval is:      169


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      169     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -2.99646       2.99646       47.1344       50.1309    
   2  0.385391     -0.953496      -6.82699       6.82699       47.0527       53.8797    
   3  0.323679      -1.12800      -8.07643       8.07643       47.1953       55.2717    
   4  0.402516E-01  -3.21260      -23.0021       23.0021       47.7694       70.7715    
   5  0.866022     -0.143846      -1.02993       1.02993       48.1762       49.2062    
   6  0.560147     -0.579555      -4.14959       4.14959       48.2507       52.4002    
   7  0.389098     -0.943925      -6.75845       6.75845       47.8653       54.6238    
   8  0.470755     -0.753417      -5.39443       5.39443       47.8226       53.2171    
   9  0.794299     -0.230295      -1.64890       1.64890       47.7233       49.3722    
  10  0.897132     -0.108553     -0.777233      0.777233       47.7675       48.5447    
  11  0.359474      -1.02311      -7.32545       7.32545       48.8766       56.2021    
  12  0.604694     -0.503032      -3.60169       3.60169       47.4819       51.0836    
  13  0.101554      -2.28717      -16.3760       16.3760       47.2329       63.6089    
  14  0.274480      -1.29288      -9.25692       9.25692       48.2589       57.5158    
  15  0.916086     -0.876445E-01 -0.627530      0.627530       48.0524       48.6799    
  16  0.820070E-01  -2.50095      -17.9067       17.9067       48.0744       65.9810    
  17  0.975902     -0.243929E-01 -0.174652      0.174652       49.0408       49.2154    
  18  0.131665      -2.02750      -14.5168       14.5168       49.5314       64.0482    
  19  0.751313     -0.285933      -2.04727       2.04727       47.6468       49.6941    
  20  0.775324     -0.254475      -1.82203       1.82203       48.8185       50.6405    
  21  0.237000      -1.43969      -10.3081       10.3081       48.4295       58.7376    
  22  0.113641      -2.17471      -15.5708       15.5708       48.2681       63.8389    
  23  0.762281     -0.271440      -1.94350       1.94350       47.6585       49.6020    
  24  0.783730     -0.243690      -1.74481       1.74481       48.6182       50.3631    
  25  0.492891     -0.707468      -5.06544       5.06544       48.4424       53.5078    
  26  0.471904     -0.750980      -5.37698       5.37698       47.7426       53.1196    
  27  0.855781     -0.155740      -1.11509       1.11509       47.7345       48.8496    
  28  0.636473     -0.451814      -3.23496       3.23496       48.4284       51.6634    
  29  0.433340     -0.836232      -5.98738       5.98738       49.5005       55.4879    
  30  0.482236     -0.729321      -5.22190       5.22190       47.7893       53.0112    
  31  0.855143E-01  -2.45907      -17.6068       17.6068       48.4120       66.0188    
  32  0.916579     -0.871071E-01 -0.623682      0.623682       47.2490       47.8726    
  33  0.232519      -1.45878      -10.4448       10.4448       48.3863       58.8311    
  34  0.283977      -1.25886      -9.01339       9.01339       47.9426       56.9560    
  35  0.401228E-01  -3.21581      -23.0251       23.0251       48.7631       71.7882    
  36  0.235231      -1.44719      -10.3618       10.3618       48.8082       59.1700    
  37  0.233426      -1.45489      -10.4169       10.4169       50.8673       61.2842    
  38  0.903594     -0.101376     -0.725844      0.725844       48.0987       48.8246    
  39  0.857571     -0.153651      -1.10013       1.10013       48.2138       49.3139    
  40  0.444085     -0.811739      -5.81201       5.81201       51.6227       57.4347    
  41  0.151055      -1.89011      -13.5331       13.5331       48.2724       61.8055    
  42  0.745694     -0.293440      -2.10101       2.10101       48.6567       50.7578    
  43  0.470647E-01  -3.05623      -21.8825       21.8825       48.5919       70.4743    
  44  0.344459      -1.06578      -7.63094       7.63094       47.7330       55.3639    
  45  0.592738     -0.523004      -3.74468       3.74468       48.7468       52.4915    
  46  0.754292     -0.281975      -2.01893       2.01893       48.7895       50.8084    
  47  0.162950      -1.81431      -12.9904       12.9904       47.9746       60.9650    
  48  0.939100     -0.628333E-01 -0.449884      0.449884       47.7162       48.1661    
  49  0.966845     -0.337175E-01 -0.241416      0.241416       48.2784       48.5198    
  50  0.287323      -1.24715      -8.92951       8.92951       47.8510       56.7806    
  51  0.835081     -0.180227      -1.29041       1.29041       47.3838       48.6742    
  52  0.836052     -0.179064      -1.28209       1.28209       48.0552       49.3373    
  53  0.382321     -0.961495      -6.88426       6.88426       57.0215       63.9058    
  54  0.873869     -0.134824     -0.965335      0.965335       47.1804       48.1457    
  55  0.169635      -1.77411      -12.7025       12.7025       47.7100       60.4125    
  56  0.511680     -0.670055      -4.79756       4.79756       47.6508       52.4484    
  57  0.687848     -0.374188      -2.67916       2.67916       47.2142       49.8933    
  58  0.659885     -0.415689      -2.97631       2.97631       47.7601       50.7365    
  59  0.615967     -0.484562      -3.46944       3.46944       48.3329       51.8023    
  60  0.600029     -0.510778      -3.65714       3.65714       47.4504       51.1075    
  61  0.166513      -1.79268      -12.8355       12.8355       48.3164       61.1519    
  62  0.730640     -0.313835      -2.24704       2.24704       47.3977       49.6448    
  63  0.168194      -1.78264      -12.7636       12.7636       52.2522       65.0159    
  64  0.562652E-01  -2.87768      -20.6040       20.6040       48.2399       68.8439    
  65  0.787921     -0.238357      -1.70662       1.70662       47.7477       49.4543    
  66  0.937052     -0.650163E-01 -0.465513      0.465513       49.9618       50.4273    
  67  0.548780     -0.600057      -4.29638       4.29638       48.5148       52.8111    
  68  0.893892     -0.112170     -0.803132      0.803132       47.8937       48.6968    
  69  0.192558E-01  -3.94994      -28.2814       28.2814       47.9044       76.1858    
  70  0.818438     -0.200358      -1.43455       1.43455       48.2592       49.6938    
loop,thermsimp(1:2)       52   2.99646       6.82699    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    171         47.25          0.84          1.11         23.75          0.56          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    172         48.15          0.83          1.11         23.73          0.60          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       52
neval is:      171
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       53
neval is:      171


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      171     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -3.87867       3.87867       47.2490       51.1276    
   2  0.307993      -1.17768      -8.43211       8.43211       47.1804       55.6125    
   3  0.551684     -0.594779      -4.25859       4.25859       47.7162       51.9748    
   4  0.969976     -0.304835E-01 -0.218260      0.218260       48.2784       48.4966    
   5  0.401714     -0.912015      -6.52998       6.52998       47.7675       54.2975    
   6  0.336211      -1.09002      -7.80446       7.80446       47.3838       55.1883    
   7  0.649191     -0.432028      -3.09330       3.09330       48.0524       51.1457    
   8  0.426986     -0.851005      -6.09315       6.09315       47.8937       53.9868    
   9  0.479997     -0.733976      -5.25523       5.25523       48.0987       53.3539    
  10  0.441527     -0.817516      -5.85337       5.85337       47.7345       53.5879    
  11  0.218988      -1.51874      -10.8741       10.8741       48.1762       59.0503    
  12  0.935549     -0.666221E-01 -0.477011      0.477011       49.0408       49.5178    
  13  0.159996      -1.83261      -13.1214       13.1214       48.2138       61.3351    
  14  0.486870     -0.719759      -5.15344       5.15344       48.0552       53.2087    
  15  0.835520     -0.179701      -1.28665       1.28665       47.7233       49.0099    
  16  0.643759     -0.440431      -3.15346       3.15346       47.7477       50.9011    
  17  0.177188      -1.73054      -12.3906       12.3906       47.6585       60.0491    
  18  0.408356     -0.895617      -6.41257       6.41257       47.3977       53.8103    
  19  0.463768     -0.768371      -5.50150       5.50150       48.2592       53.7607    
  20  0.616820     -0.483178      -3.45953       3.45953       47.6468       51.1063    
  21  0.377083     -0.975289      -6.98302       6.98302       47.2142       54.1972    
  22  0.278016      -1.28008      -9.16529       9.16529       47.1344       56.2997    
  23  0.746435     -0.292446      -2.09390       2.09390       48.6182       50.7121    
  24  0.872234     -0.136697     -0.978744      0.978744       49.9618       50.9406    
  25  0.887073E-01  -2.42241      -17.3444       17.3444       48.8185       66.1628    
  26  0.124913      -2.08014      -14.8937       14.8937       47.7601       62.6538    
  27  0.918160     -0.853835E-01 -0.611342      0.611342       48.6567       49.2681    
  28  0.924603     -0.783912E-01 -0.561277      0.561277       48.7895       49.3508    
  29  0.863214     -0.147092      -1.05317       1.05317       47.4819       48.5351    
  30  0.823499E-02  -4.79936      -34.3632       34.3632       47.4504       81.8136    
  31  0.548113     -0.601275      -4.30510       4.30510       48.4284       52.7335    
  32  0.800553     -0.222452      -1.59275       1.59275       48.3329       49.9256    
  33  0.180829      -1.71020      -12.2450       12.2450       48.2507       60.4956    
  34  0.968975E-01  -2.33410      -16.7120       16.7120       47.6508       64.3629    
  35  0.749847     -0.287886      -2.06125       2.06125       48.7468       50.8081    
  36  0.902028     -0.103110     -0.738262      0.738262       48.5148       49.2530    
  37  0.312083      -1.16449      -8.33766       8.33766       47.7893       56.1269    
  38  0.472691     -0.749313      -5.36504       5.36504       47.7426       53.1077    
  39  0.970346     -0.301026E-01 -0.215533      0.215533       47.8226       48.0382    
  40  0.485853     -0.721850      -5.16841       5.16841       48.4424       53.6108    
  41  0.604658     -0.503092      -3.60211       3.60211       47.0527       50.6548    
  42  0.172238      -1.75888      -12.5935       12.5935       47.8653       60.4588    
  43  0.359079E-01  -3.32680      -23.8197       23.8197       47.1953       71.0150    
  44  0.464923     -0.765884      -5.48369       5.48369       47.7330       53.2167    
  45  0.293512      -1.22584      -8.77693       8.77693       49.5005       58.2775    
  46  0.572788     -0.557239      -3.98980       3.98980       48.8766       52.8664    
  47  0.931713     -0.707300E-01 -0.506423      0.506423       47.8510       48.3575    
  48  0.983012     -0.171340E-01 -0.122679      0.122679       47.9426       48.0653    
  49  0.572194     -0.558278      -3.99724       3.99724       51.6227       55.6199    
  50  0.272189      -1.30126      -9.31695       9.31695       48.2589       57.5758    
  51  0.521081     -0.651849      -4.66721       4.66721       48.4295       53.0967    
  52  0.560075     -0.579685      -4.15052       4.15052       48.3863       52.5368    
  53  0.442251     -0.815877      -5.84164       5.84164       48.8082       54.6498    
  54  0.541873     -0.612723      -4.38707       4.38707       47.7100       52.0971    
  55  0.619019     -0.479619      -3.43404       3.43404       47.9746       51.4087    
  56  0.554460     -0.589760      -4.22265       4.22265       48.3164       52.5390    
  57  0.942853     -0.588454E-01 -0.421330      0.421330       50.8673       51.2886    
  58  0.289656E-01  -3.54165      -25.3580       25.3580       48.2724       73.6304    
  59  0.420166     -0.867105      -6.20843       6.20843       47.2329       53.4413    
  60  0.304886      -1.18782      -8.50471       8.50471       48.2681       56.7728    
  61  0.799970     -0.223182      -1.59797       1.59797       57.0215       58.6195    
  62  0.330194      -1.10808      -7.93377       7.93377       49.5314       57.4651    
  63  0.193095      -1.64457      -11.7750       11.7750       52.2522       64.0273    
  64  0.151812      -1.88511      -13.4973       13.4973       48.0744       61.5717    
  65  0.463265     -0.769456      -5.50927       5.50927       48.4120       53.9212    
  66  0.468691     -0.757811      -5.42589       5.42589       48.2399       53.6657    
  67  0.442877     -0.814463      -5.83152       5.83152       48.5919       54.4234    
  68  0.652140     -0.427496      -3.06085       3.06085       47.7694       50.8303    
  69  0.258134      -1.35428      -9.69657       9.69657       48.7631       58.4597    
  70  0.530519E-01  -2.93648      -21.0251       21.0251       47.2545       68.2796    
loop,thermsimp(1:2)       53   3.87867       8.43211    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    173         48.31          0.84          1.11         23.73          0.51          0.04         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    174         61.98          0.84          1.12         23.77          0.57          0.04         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       53
neval is:      173
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       54
neval is:      173


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      173     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -4.07557       4.07557       47.8226       51.8982    
   2  0.698829     -0.358349      -2.56576       2.56576       47.9426       50.5083    
   3  0.550231     -0.597418      -4.27748       4.27748       47.8510       52.1285    
   4  0.844966     -0.168459      -1.20616       1.20616       48.2784       49.4845    
   5  0.139804      -1.96751      -14.0873       14.0873       47.4819       61.5692    
   6  0.119451      -2.12485      -15.2138       15.2138       47.7233       62.9371    
   7  0.474112     -0.746312      -5.34356       5.34356       48.5148       53.8583    
   8  0.293024      -1.22750      -8.78883       8.78883       48.6567       57.4456    
   9  0.760137     -0.274256      -1.96366       1.96366       48.7895       50.7532    
  10  0.216376      -1.53074      -10.9600       10.9600       49.0408       60.0008    
  11  0.837069     -0.177849      -1.27339       1.27339       48.3329       49.6063    
  12  0.969258     -0.312245E-01 -0.223566      0.223566       47.0527       47.2763    
  13  0.335918      -1.09089      -7.81071       7.81071       48.6182       56.4290    
  14  0.966643     -0.339265E-01 -0.242912      0.242912       48.7468       48.9897    
  15  0.723887     -0.323119      -2.31352       2.31352       47.7694       50.0829    
  16  0.459929E-01  -3.07927      -22.0474       22.0474       47.7477       69.7951    
  17  0.536724     -0.622271      -4.45543       4.45543       49.9618       54.4173    
  18  0.432574     -0.838001      -6.00005       6.00005       47.6468       53.6469    
  19  0.160308      -1.83066      -13.1074       13.1074       47.2490       60.3564    
  20  0.885158     -0.121989     -0.873435      0.873435       48.0524       48.9258    
  21  0.753783     -0.282650      -2.02376       2.02376       50.8673       52.8910    
  22  0.135562      -1.99832      -14.3079       14.3079       47.9746       62.2825    
  23  0.817964     -0.200937      -1.43870       1.43870       47.7162       49.1549    
  24  0.286617      -1.24961      -8.94714       8.94714       47.7100       56.6572    
  25  0.319126      -1.14217      -8.17788       8.17788       48.3863       56.5641    
  26  0.104479E-01  -4.56135      -32.6591       32.6591       48.3164       80.9754    
  27  0.671407     -0.398379      -2.85238       2.85238       48.4284       51.2808    
  28  0.782955     -0.244680      -1.75190       1.75190       48.8766       50.6285    
  29  0.186689      -1.67831      -12.0166       12.0166       48.4295       60.4461    
  30  0.462519     -0.771067      -5.52080       5.52080       47.7426       53.2634    
  31  0.203171      -1.59371      -11.4109       11.4109       48.0552       59.4661    
  32  0.851762E-01  -2.46303      -17.6352       17.6352       47.7330       65.3682    
  33  0.702824     -0.352649      -2.52495       2.52495       48.0987       50.6237    
  34  0.747923     -0.290456      -2.07965       2.07965       47.2329       49.3125    
  35  0.224450      -1.49410      -10.6977       10.6977       47.7345       58.4322    
  36  0.243563E-02  -6.01755      -43.0854       43.0854       48.4424       91.5277    
  37  0.160790      -1.82766      -13.0859       13.0859       48.2399       61.3258    
  38  0.880431     -0.127343     -0.911771      0.911771       48.2592       49.1710    
  39  0.507306     -0.678640      -4.85903       4.85903       47.3977       52.2567    
  40  0.266019      -1.32419      -9.48112       9.48112       48.4120       57.8931    
  41  0.310751      -1.16876      -8.36829       8.36829       47.8937       56.2619    
  42  0.945006     -0.565640E-01 -0.404996      0.404996       47.2142       47.6192    
  43  0.265699E-01  -3.62797      -25.9761       25.9761       47.7675       73.7436    
  44  0.652842     -0.426420      -3.05314       3.05314       48.5919       51.6450    
  45  0.799409     -0.223882      -1.60299       1.60299       48.8082       50.4112    
  46  0.543529     -0.609672      -4.36522       4.36522       47.3838       51.7490    
  47  0.361947      -1.01626      -7.27635       7.27635       47.1804       54.4567    
  48  0.398721     -0.919492      -6.58352       6.58352       51.6227       58.2062    
  49  0.349489      -1.05128      -7.52713       7.52713       47.7893       55.3164    
  50  0.948739     -0.526212E-01 -0.376765      0.376765       47.1344       47.5112    
  51  0.346176      -1.06081      -7.59533       7.59533       48.2681       55.8635    
  52  0.678244     -0.388248      -2.77984       2.77984       49.5314       52.3112    
  53  0.858518     -0.152547      -1.09223       1.09223       48.2589       49.3511    
  54  0.835860E-01  -2.48188      -17.7701       17.7701       49.5005       67.2707    
  55  0.762568     -0.271063      -1.94080       1.94080       48.7631       50.7039    
  56  0.273927      -1.29489      -9.27137       9.27137       57.0215       66.2929    
  57  0.729557     -0.315318      -2.25766       2.25766       48.1762       50.4339    
  58  0.320381      -1.13825      -8.14978       8.14978       47.6585       55.8083    
  59  0.818134     -0.200729      -1.43721       1.43721       47.8653       49.3026    
  60  0.639548     -0.446993      -3.20045       3.20045       48.2507       51.4511    
  61  0.976107     -0.241828E-01 -0.173148      0.173148       48.2138       48.3869    
  62  0.232128      -1.46046      -10.4569       10.4569       48.0744       58.5312    
  63  0.215412      -1.53520      -10.9920       10.9920       47.7601       58.7521    
  64  0.770868     -0.260238      -1.86329       1.86329       52.2522       54.1155    
  65  0.147419E-01  -4.21706      -30.1939       30.1939       47.6508       77.8448    
  66  0.102273      -2.28010      -16.3254       16.3254       48.8185       65.1439    
  67  0.625951     -0.468483      -3.35432       3.35432       47.2545       50.6088    
  68  0.176925      -1.73203      -12.4012       12.4012       47.1953       59.5965    
  69  0.638162E-02  -5.05433      -36.1888       36.1888       48.2724       84.4612    
  70  0.301443      -1.19917      -8.58602       8.58602       48.3105       56.8966    
loop,thermsimp(1:2)       54   4.07557       2.56576    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    175         48.23          0.84          1.12         23.82          0.48          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    176         55.21          0.84          1.12         23.87          0.82          0.04         26.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       54
neval is:      175
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       55
neval is:      175


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      175     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -11.7283       11.7283       47.0527       58.7810    
   2  0.875287     -0.133204     -0.953731      0.953731       47.1344       48.0882    
   3  0.103612      -2.26710      -16.2323       16.2323       47.2142       63.4465    
   4  0.159072      -1.83840      -13.1629       13.1629       48.2138       61.3766    
   5  0.118738      -2.13084      -15.2567       15.2567       48.0524       63.3091    
   6  0.294105      -1.22382      -8.76247       8.76247       48.7468       57.5093    
   7  0.967643     -0.328919E-01 -0.235505      0.235505       47.7162       47.9517    
   8  0.675183     -0.392772      -2.81223       2.81223       48.2592       51.0714    
   9  0.170112      -1.77130      -12.6824       12.6824       47.8653       60.5478    
  10  0.990992     -0.904902E-02 -0.647905E-01  0.647905E-01   47.2329       47.2977    
  11  0.198513      -1.61690      -11.5769       11.5769       48.2589       59.8358    
  12  0.404817E-01  -3.20690      -22.9613       22.9613       48.2784       71.2397    
  13  0.834933E-01  -2.48299      -17.7781       17.7781       48.3329       66.1110    
  14  0.458935     -0.778848      -5.57651       5.57651       47.7694       53.3459    
  15  0.929311     -0.733118E-01 -0.524909      0.524909       48.8082       49.3331    
  16  0.593071     -0.522440      -3.74065       3.74065       48.1762       51.9169    
  17  0.963359E-01  -2.33991      -16.7537       16.7537       47.9426       64.6962    
  18  0.383119E-01  -3.26200      -23.3557       23.3557       47.2545       70.6102    
  19  0.841843     -0.172161      -1.23267       1.23267       48.0987       49.3314    
  20  0.874261     -0.134376     -0.962129      0.962129       48.8766       49.8388    
  21  0.706443     -0.347513      -2.48818       2.48818       48.7631       51.2513    
  22  0.423649E-01  -3.16143      -22.6357       22.6357       48.7895       71.4252    
  23  0.904835     -0.100003     -0.716016      0.716016       48.4284       49.1445    
  24  0.728800     -0.316356      -2.26509       2.26509       48.2507       50.5158    
  25  0.764304     -0.268790      -1.92452       1.92452       48.5919       50.5164    
  26  0.578519     -0.547284      -3.91852       3.91852       47.3838       51.3023    
  27  0.321737      -1.13402      -8.11953       8.11953       47.8226       55.9422    
  28  0.592944     -0.522656      -3.74219       3.74219       47.8510       51.5932    
  29  0.159596      -1.83511      -13.1393       13.1393       47.3977       60.5370    
  30  0.797332     -0.226484      -1.62161       1.62161       49.5314       51.1530    
  31  0.263979      -1.33189      -9.53624       9.53624       50.8673       60.4035    
  32  0.449355     -0.799942      -5.72755       5.72755       47.7426       53.4702    
  33  0.859901     -0.150938      -1.08071       1.08071       47.6468       48.7275    
  34  0.730093     -0.314584      -2.25240       2.25240       48.5148       50.7672    
  35  0.484666     -0.724295      -5.18592       5.18592       52.2522       57.4382    
  36  0.180217      -1.71359      -12.2692       12.2692       49.9618       62.2311    
  37  0.857397     -0.153854      -1.10159       1.10159       47.1804       48.2819    
  38  0.502370     -0.688418      -4.92904       4.92904       47.7893       52.7183    
  39  0.245408      -1.40484      -10.0585       10.0585       47.6585       57.7170    
  40  0.134540      -2.00590      -14.3621       14.3621       48.2681       62.6302    
  41  0.468137     -0.758995      -5.43437       5.43437       47.8937       53.3280    
  42  0.864548E-01  -2.44813      -17.5285       17.5285       48.6182       66.1468    
  43  0.178791      -1.72154      -12.3261       12.3261       48.3863       60.7124    
  44  0.690351     -0.370555      -2.65315       2.65315       47.7100       50.3632    
  45  0.731648     -0.312455      -2.23716       2.23716       48.3105       50.5477    
  46  0.857623     -0.153591      -1.09970       1.09970       48.6567       49.7564    
  47  0.754956     -0.281095      -2.01263       2.01263       48.4120       50.4246    
  48  0.355557      -1.03407      -7.40390       7.40390       51.6227       59.0266    
  49  0.200964      -1.60463      -11.4891       11.4891       47.7345       59.2236    
  50  0.243499      -1.41264      -10.1145       10.1145       48.0744       58.1888    
  51  0.796288     -0.227794      -1.63100       1.63100       47.7601       49.3911    
  52  0.256937      -1.35892      -9.72983       9.72983       48.0552       57.7851    
  53  0.591760     -0.524655      -3.75650       3.75650       47.1953       50.9518    
  54  0.799227     -0.224110      -1.60461       1.60461       49.0408       50.6454    
  55  0.115295E-01  -4.46285      -31.9538       31.9538       47.2490       79.2027    
  56  0.559205     -0.581239      -4.16164       4.16164       48.4295       52.5911    
  57  0.742198     -0.298139      -2.13466       2.13466       48.2399       50.3745    
  58  0.543157     -0.610356      -4.37012       4.37012       47.4819       51.8520    
  59  0.100933      -2.29330      -16.4199       16.4199       47.9746       64.3945    
  60  0.201228      -1.60332      -11.4797       11.4797       47.7233       59.2029    
  61  0.602159E-01  -2.80982      -20.1182       20.1182       48.8185       68.9366    
  62  0.107777      -2.22769      -15.9502       15.9502       47.7330       63.6832    
  63  0.131787E-01  -4.32915      -30.9965       30.9965       57.0215       88.0180    
  64  0.756826     -0.278622      -1.99492       1.99492       49.5005       51.4954    
  65  0.617120     -0.482691      -3.45605       3.45605       47.7477       51.2037    
  66  0.885328     -0.121797     -0.872060      0.872060       47.7675       48.6395    
  67  0.617093     -0.482736      -3.45636       3.45636       47.6508       51.1072    
  68  0.654899     -0.423274      -3.03062       3.03062       48.3164       51.3470    
  69  0.847740     -0.165181      -1.18269       1.18269       48.2724       49.4551    
  70  0.121451E-01  -4.41083      -31.5813       31.5813       48.2255       79.8068    
loop,thermsimp(1:2)       55   11.7283      0.953731    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    177         49.16          0.84          1.12         23.80          0.59          0.04         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    178         52.30          0.82          1.11         23.87          0.53          0.04         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       55
neval is:      177
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       56
neval is:      177


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      177     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -14.0112       14.0112       47.2329       61.2440    
   2  0.197548      -1.62177      -11.6118       11.6118       47.7162       59.3281    
   3  0.774000     -0.256183      -1.83426       1.83426       47.1344       48.9687    
   4  0.170284      -1.77029      -12.6752       12.6752       47.1804       59.8555    
   5  0.250636      -1.38376      -9.90762       9.90762       47.7675       57.6751    
   6  0.907951     -0.965652E-01 -0.691402      0.691402       47.6468       48.3382    
   7  0.611678     -0.491549      -3.51947       3.51947       48.4284       51.9479    
   8  0.735945E-02  -4.91177      -35.1680       35.1680       48.0987       83.2667    
   9  0.309131      -1.17399      -8.40571       8.40571       48.8082       57.2139    
  10  0.577854     -0.548434      -3.92676       3.92676       47.7601       51.6869    
  11  0.931529     -0.709274E-01 -0.507837      0.507837       48.2724       48.7802    
  12  0.665703     -0.406912      -2.91347       2.91347       48.6567       51.5702    
  13  0.585695     -0.534955      -3.83025       3.83025       48.8766       52.7069    
  14  0.295001      -1.22078      -8.74070       8.74070       47.7100       56.4507    
  15  0.317712E-01  -3.44920      -24.6961       24.6961       48.2399       72.9359    
  16  0.222963      -1.50075      -10.7453       10.7453       48.4120       59.1573    
  17  0.325931      -1.12107      -8.02681       8.02681       48.2507       56.2775    
  18  0.785098     -0.241947      -1.73233       1.73233       48.5919       50.3242    
  19  0.550467     -0.596988      -4.27441       4.27441       48.3105       52.5849    
  20  0.780222     -0.248176      -1.77693       1.77693       49.0408       50.8177    
  21  0.130712      -2.03476      -14.5688       14.5688       48.5148       63.0835    
  22  0.873397     -0.135365     -0.969205      0.969205       47.1953       48.1645    
  23  0.366975      -1.00246      -7.17757       7.17757       48.2592       55.4368    
  24  0.813244     -0.206724      -1.48013       1.48013       47.6508       49.1310    
  25  0.782660E-01  -2.54764      -18.2410       18.2410       49.5314       67.7724    
  26  0.700327     -0.356208      -2.55043       2.55043       47.7477       50.2981    
  27  0.437766     -0.826071      -5.91462       5.91462       48.7631       54.6777    
  28  0.508966E-01  -2.97796      -21.3220       21.3220       47.3838       68.7059    
  29  0.276850      -1.28428      -9.19536       9.19536       48.3164       57.5117    
  30  0.792031     -0.233154      -1.66937       1.66937       49.5005       51.1699    
  31  0.174747      -1.74441      -12.4899       12.4899       47.8510       60.3410    
  32  0.469718     -0.755623      -5.41022       5.41022       47.4819       52.8921    
  33  0.252316      -1.37707      -9.85976       9.85976       48.1762       58.0360    
  34  0.980061     -0.201409E-01 -0.144207      0.144207       48.4295       48.5737    
  35  0.838300     -0.176379      -1.26287       1.26287       47.7893       49.0521    
  36  0.369385     -0.995915      -7.13070       7.13070       47.8937       55.0244    
  37  0.923139     -0.799751E-01 -0.572618      0.572618       47.7694       48.3420    
  38  0.592446     -0.523496      -3.74821       3.74821       47.7426       51.4908    
  39  0.348787      -1.05329      -7.54152       7.54152       47.8226       55.3642    
  40  0.569584     -0.562850      -4.02998       4.02998       52.2522       56.2822    
  41  0.543034E-01  -2.91317      -20.8581       20.8581       48.7468       69.6049    
  42  0.582662     -0.540148      -3.86743       3.86743       47.6585       51.5259    
  43  0.702825     -0.352648      -2.52494       2.52494       48.0552       50.5802    
  44  0.941375     -0.604140E-01 -0.432561      0.432561       48.0744       48.5069    
  45  0.258857      -1.35148      -9.67652       9.67652       47.0527       56.7292    
  46  0.116535      -2.14956      -15.3908       15.3908       51.6227       67.0135    
  47  0.102671      -2.27622      -16.2976       16.2976       47.7233       64.0209    
  48  0.172023      -1.76013      -12.6024       12.6024       47.7345       60.3369    
  49  0.434982E-01  -3.13504      -22.4467       22.4467       48.2589       70.7056    
  50  0.852122     -0.160026      -1.14578       1.14578       50.8673       52.0131    
  51  0.583521     -0.538675      -3.85688       3.85688       47.3977       51.2546    
  52  0.843374     -0.170345      -1.21966       1.21966       47.8653       49.0850    
  53  0.194743      -1.63607      -11.7142       11.7142       48.3863       60.1005    
  54  0.191808      -1.65126      -11.8229       11.8229       48.2138       60.0367    
  55  0.656555     -0.420749      -3.01254       3.01254       49.9618       52.9744    
  56  0.468384E-01  -3.06105      -21.9170       21.9170       48.2681       70.1851    
  57  0.812217     -0.207988      -1.48918       1.48918       48.0524       49.5416    
  58  0.852265     -0.159858      -1.14457       1.14457       47.2142       48.3587    
  59  0.340213      -1.07818      -7.71974       7.71974       47.7330       55.4527    
  60  0.655911     -0.421730      -3.01956       3.01956       47.9746       50.9942    
  61  0.329724      -1.10950      -7.94396       7.94396       47.9426       55.8865    
  62  0.362242      -1.01544      -7.27051       7.27051       48.3329       55.6034    
  63  0.273539      -1.29631      -9.28152       9.28152       48.6182       57.8998    
  64  0.524351     -0.645594      -4.62242       4.62242       48.8185       53.4409    
  65  0.817273     -0.201783      -1.44475       1.44475       47.2545       48.6993    
  66  0.642237     -0.442797      -3.17041       3.17041       48.2784       51.4488    
  67  0.276178      -1.28671      -9.21278       9.21278       48.7895       58.0023    
  68  0.721954     -0.325793      -2.33266       2.33266       47.2490       49.5816    
  69  0.676913     -0.390212      -2.79390       2.79390       48.2255       51.0194    
  70  0.148059      -1.91014      -13.6765       13.6765       49.1624       62.8389    
loop,thermsimp(1:2)       56   14.0112       11.6118    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    179         47.56          0.84          1.11         23.84          0.45          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    180         49.35          0.83          1.11         23.91          0.44          0.04         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       56
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       57
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      179     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -2.95049       2.95049       47.1953       50.1458    
   2  0.724212     -0.322671      -2.31031       2.31031       47.6468       49.9571    
   3  0.633711     -0.456163      -3.26610       3.26610       47.7694       51.0355    
   4  0.448566     -0.801700      -5.74013       5.74013       47.2142       52.9543    
   5  0.964228     -0.364273E-01 -0.260818      0.260818       48.0744       48.3352    
   6  0.714306     -0.336444      -2.40892       2.40892       48.4295       50.8384    
   7  0.528330     -0.638035      -4.56830       4.56830       47.2545       51.8228    
   8  0.654127     -0.424453      -3.03906       3.03906       48.2724       51.3115    
   9  0.368899     -0.997232      -7.14013       7.14013       47.1344       54.2746    
  10  0.227697      -1.47974      -10.5949       10.5949       47.7893       58.3841    
  11  0.612266     -0.490588      -3.51258       3.51258       47.8653       51.3779    
  12  0.313777      -1.15907      -8.29891       8.29891       47.6508       55.9498    
  13  0.258526      -1.35276      -9.68570       9.68570       48.0524       57.7381    
  14  0.119298      -2.12613      -15.2230       15.2230       47.2490       62.4720    
  15  0.213331      -1.54491      -11.0615       11.0615       47.7477       58.8091    
  16  0.294218      -1.22343      -8.75973       8.75973       48.5919       57.3516    
  17  0.352988      -1.04132      -7.45581       7.45581       48.0552       55.5110    
  18  0.348706      -1.05353      -7.54319       7.54319       49.0408       56.5840    
  19  0.449249     -0.800179      -5.72924       5.72924       47.9746       53.7039    
  20  0.879121     -0.128833     -0.922437      0.922437       48.2255       49.1479    
  21  0.464081     -0.767695      -5.49666       5.49666       49.5005       54.9972    
  22  0.497582     -0.697995      -4.99761       4.99761       47.3977       52.3953    
  23  0.920207     -0.831566E-01 -0.595397      0.595397       48.2784       48.8738    
  24  0.811773     -0.208535      -1.49310       1.49310       47.7426       49.2357    
  25  0.190651      -1.65731      -11.8663       11.8663       47.6585       59.5247    
  26  0.645174     -0.438235      -3.13774       3.13774       48.6567       51.7945    
  27  0.668343     -0.402954      -2.88513       2.88513       47.7601       50.6453    
  28  0.765111     -0.267735      -1.91697       1.91697       48.4284       50.3454    
  29  0.991779     -0.825499E-02 -0.591053E-01  0.591053E-01   50.8673       50.9264    
  30  0.136888      -1.98859      -14.2382       14.2382       48.3105       62.5488    
  31  0.645145E-01  -2.74086      -19.6245       19.6245       48.8766       68.5011    
  32  0.408515E-01  -3.19781      -22.8962       22.8962       47.4819       70.3781    
  33  0.264109      -1.33140      -9.53272       9.53272       49.9618       59.4945    
  34  0.382737     -0.960407      -6.87646       6.87646       48.8185       55.6950    
  35  0.402738E-02  -5.51464      -39.4845       39.4845       48.7631       88.2477    
  36  0.318074      -1.14547      -8.20151       8.20151       47.8937       56.0952    
  37  0.245237      -1.40553      -10.0635       10.0635       47.8226       57.8862    
  38  0.519766     -0.654377      -4.68531       4.68531       48.2592       52.9445    
  39  0.255147      -1.36592      -9.77990       9.77990       47.7330       57.5129    
  40  0.833841     -0.181712      -1.30105       1.30105       48.3329       49.6339    
  41  0.696242E-01  -2.66464      -19.0787       19.0787       47.9426       67.0213    
  42  0.487295     -0.718886      -5.14719       5.14719       48.2507       53.3978    
  43  0.276229E-01  -3.58911      -25.6979       25.6979       52.2522       77.9501    
  44  0.638327     -0.448905      -3.21414       3.21414       47.7100       50.9241    
  45  0.206684      -1.57657      -11.2881       11.2881       47.0527       58.3408    
  46  0.736003     -0.306521      -2.19468       2.19468       48.8082       51.0029    
  47  0.217444E-01  -3.82840      -27.4111       27.4111       48.3164       75.7275    
  48  0.956929     -0.440260E-01 -0.315224      0.315224       47.7675       48.0827    
  49  0.883561     -0.123795     -0.886363      0.886363       48.6182       49.5046    
  50  0.700901     -0.355388      -2.54456       2.54456       48.7895       51.3341    
  51  0.201997      -1.59950      -11.4523       11.4523       48.1762       59.6286    
  52  0.412152     -0.886362      -6.34631       6.34631       48.4120       54.7583    
  53  0.890450     -0.116029     -0.830761      0.830761       47.7162       48.5470    
  54  0.417423     -0.873654      -6.25532       6.25532       47.1804       53.4357    
  55  0.426501     -0.852140      -6.10128       6.10128       48.2138       54.3150    
  56  0.983871     -0.162605E-01 -0.116424      0.116424       48.3863       48.5027    
  57  0.384350     -0.956201      -6.84635       6.84635       47.7345       54.5808    
  58  0.155937      -1.85830      -13.3054       13.3054       47.8510       61.1564    
  59  0.361264      -1.01815      -7.28989       7.28989       47.2329       54.5227    
  60  0.538177     -0.619568      -4.43608       4.43608       49.1624       53.5985    
  61  0.514362E-01  -2.96741      -21.2465       21.2465       48.5148       69.7613    
  62  0.994100     -0.591759E-02 -0.423697E-01  0.423697E-01   47.7233       47.7656    
  63  0.622557     -0.473920      -3.39325       3.39325       51.6227       55.0160    
  64  0.703606     -0.351537      -2.51699       2.51699       49.5314       52.0484    
  65  0.151986      -1.88396      -13.4891       13.4891       47.3838       60.8729    
  66  0.105360      -2.25037      -16.1125       16.1125       48.7468       64.8593    
  67  0.572995     -0.556878      -3.98722       3.98722       48.2681       52.2553    
  68  0.201032      -1.60429      -11.4867       11.4867       48.2589       59.7455    
  69  0.786519     -0.240139      -1.71938       1.71938       48.2399       49.9592    
  70  0.251709E-01  -3.68207      -26.3634       26.3634       47.5648       73.9282    
loop,thermsimp(1:2)       57   2.95049       2.31031    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181         52.60          0.84          1.12         23.82          0.43          0.04         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    182         53.10          0.84          1.12         23.85          0.62          0.04         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    52.595        1.185     -1.798      3.222     -102.6      1.386    
                      0.2355      1.230     -99.70      3.704    -0.1594E-02

                       2.236     -1.119      1.530      7093.      3541.    

                     -0.8206E-01  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6189.      623.7    

                       1.433     -5.759     -4.076     -8.469      6.672    

                      -14.91     -3.576      1988.      0.000     0.5515E+05



                       1518.     0.1227E+05 -3924.      7640.      4161.    

                       5664.    -0.6880E-02 0.1912     0.7985E-02 0.9858E-01

                     -0.2486    -0.8411E-01 0.1879     0.1174     0.6503E-01



                     -0.4713    -0.7753      0.000     0.6506E-01-0.8716E-01

                      0.7985E-02 0.8886E-01-0.7116    -0.1442     0.3318E-01

                      0.5314E-01-0.2635E-01-0.6676     -1.203      7278.    



                      -1.048     -1.244     -2.229     -2.314    -0.3807    

                     -0.3252      9.217      8.652    -0.1934E+05 -4.000    

                     -0.5624     -2.263      9.317      8.872    -0.1908E+05



                      -4.000     0.4310    -0.4490      8.863      9.063    

                     -0.1908E+05 -7.000    -0.7554    -0.6687      9.010    

                       8.775    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       57
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       58
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      181     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -20.3268       20.3268       47.7233       68.0501    
   2  0.104884      -2.25490      -16.1450       16.1450       47.7675       63.9125    
   3  0.784254     -0.243023      -1.74003       1.74003       48.0744       49.8144    
   4  0.813133     -0.206861      -1.48111       1.48111       48.3863       49.8674    
   5  0.490778     -0.711764      -5.09620       5.09620       47.7162       52.8124    
   6  0.168573      -1.78039      -12.7475       12.7475       48.2784       61.0258    
   7  0.450161     -0.798149      -5.71471       5.71471       48.2255       53.9402    
   8  0.828233     -0.188461      -1.34937       1.34937       47.7426       49.0920    
   9  0.994731     -0.528342E-02 -0.378290E-01  0.378290E-01   48.6182       48.6561    
  10  0.813340     -0.206606      -1.47929       1.47929       48.3329       49.8122    
  11  0.776133     -0.253432      -1.81456       1.81456       47.6468       49.4614    
  12  0.729556     -0.315319      -2.25767       2.25767       48.2399       50.4975    
  13  0.530451     -0.634028      -4.53961       4.53961       47.1953       51.7349    
  14  0.752564E-01  -2.58685      -18.5217       18.5217       48.4284       66.9502    
  15  0.918457     -0.850597E-01 -0.609024      0.609024       47.7601       48.3692    
  16  0.162642      -1.81621      -13.0039       13.0039       48.4295       61.4334    
  17  0.725851     -0.320411      -2.29412       2.29412       47.7100       50.0041    
  18  0.322292      -1.13230      -8.10719       8.10719       50.8673       58.9745    
  19  0.838064     -0.176661      -1.26488       1.26488       48.8082       50.0731    
  20  0.346062E-01  -3.36372      -24.0841       24.0841       47.7694       71.8535    
  21  0.442915     -0.814377      -5.83090       5.83090       48.2724       54.1033    
  22  0.143708      -1.93997      -13.8901       13.8901       48.7895       62.6796    
  23  0.940845     -0.609769E-01 -0.436592      0.436592       47.8653       48.3019    
  24  0.972503     -0.278816E-01 -0.199631      0.199631       48.6567       48.8564    
  25  0.291831      -1.23158      -8.81806       8.81806       47.2545       56.0726    
  26  0.211976      -1.55128      -11.1071       11.1071       49.5314       60.6385    
  27  0.695427     -0.363229      -2.60071       2.60071       48.2681       50.8688    
  28  0.982540E-01  -2.32020      -16.6125       16.6125       47.3977       64.0102    
  29  0.730742     -0.313695      -2.24604       2.24604       48.2592       50.5052    
  30  0.417794     -0.872766      -6.24896       6.24896       47.2142       53.4631    
  31  0.868385     -0.141121      -1.01042       1.01042       48.2507       49.2611    
  32  0.300897      -1.20099      -8.59900       8.59900       47.1804       55.7794    
  33  0.917219     -0.864093E-01 -0.618686      0.618686       49.1624       49.7811    
  34  0.304394      -1.18943      -8.51628       8.51628       47.9746       56.4909    
  35  0.856500     -0.154901      -1.10909       1.10909       47.1344       48.2435    
  36  0.310652      -1.16908      -8.37057       8.37057       48.2138       56.5843    
  37  0.846275     -0.166911      -1.19508       1.19508       47.2329       48.4279    
  38  0.206825      -1.57588      -11.2832       11.2832       47.7345       59.0177    
  39  0.606376     -0.500256      -3.58181       3.58181       48.4120       51.9938    
  40  0.840015     -0.174336      -1.24823       1.24823       49.5005       50.7488    
  41  0.348835      -1.05315      -7.54054       7.54054       51.6227       59.1632    
  42  0.857325     -0.153939      -1.10219       1.10219       48.0552       49.1574    
  43  0.308035E-01  -3.48013      -24.9175       24.9175       48.8185       73.7360    
  44  0.400632     -0.914711      -6.54929       6.54929       47.6508       54.2001    
  45  0.242237      -1.41784      -10.1516       10.1516       47.8937       58.0453    
  46  0.407771     -0.897050      -6.42284       6.42284       49.0408       55.4636    
  47  0.430691     -0.842364      -6.03128       6.03128       48.5919       54.6232    
  48  0.415503     -0.878266      -6.28834       6.28834       47.7330       54.0213    
  49  0.593575     -0.521591      -3.73457       3.73457       48.0524       51.7870    
  50  0.973620     -0.267342E-01 -0.191415      0.191415       47.8226       48.0141    
  51  0.510257     -0.672840      -4.81750       4.81750       47.0527       51.8702    
  52  0.796475     -0.227560      -1.62932       1.62932       47.7893       49.4186    
  53  0.213576      -1.54376      -11.0533       11.0533       47.7477       58.8009    
  54  0.865534     -0.144409      -1.03396       1.03396       49.9618       50.9958    
  55  0.920053     -0.833240E-01 -0.596596      0.596596       47.6585       48.2551    
  56  0.534624     -0.626192      -4.48351       4.48351       48.1762       52.6597    
  57  0.963687     -0.369888E-01 -0.264838      0.264838       48.2589       48.5237    
  58  0.498139     -0.696877      -4.98961       4.98961       47.3838       52.3734    
  59  0.987058     -0.130264E-01 -0.932685E-01  0.932685E-01   47.8510       47.9443    
  60  0.488276E-01  -3.01946      -21.6192       21.6192       47.2490       68.8681    
  61  0.597381E-01  -2.81779      -20.1752       20.1752       48.3105       68.4857    
  62  0.589016     -0.529301      -3.78977       3.78977       48.7468       52.5366    
  63  0.680503     -0.384923      -2.75603       2.75603       47.9426       50.6986    
  64  0.793494     -0.231310      -1.65617       1.65617       48.8766       50.5328    
  65  0.269936E-01  -3.61216      -25.8629       25.8629       48.5148       74.3776    
  66  0.392490     -0.935245      -6.69630       6.69630       47.4819       54.1782    
  67  0.150218      -1.89567      -13.5729       13.5729       47.5648       61.1377    
  68  0.959939     -0.408856E-01 -0.292739      0.292739       48.3164       48.6091    
  69  0.559076     -0.581471      -4.16330       4.16330       52.2522       56.4155    
  70  0.820359     -0.198013      -1.41776       1.41776       52.5955       54.0132    
loop,thermsimp(1:2)       58   20.3268       16.1450    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183         48.31          0.84          1.12         23.86          0.80          0.04         26.66
Just calling func    0   0         26.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184         52.34          0.84          1.11         23.88          0.73          0.04         26.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       58
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       59
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      183     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -7.93728       7.93728       47.8510       55.7883    
   2  0.939148     -0.627826E-01 -0.449520      0.449520       47.8226       48.2722    
   3  0.130906      -2.03328      -14.5582       14.5582       47.1344       61.6926    
   4  0.664370     -0.408916      -2.92782       2.92782       47.6585       50.5863    
   5  0.490908     -0.711498      -5.09429       5.09429       47.8653       52.9596    
   6  0.711731     -0.340055      -2.43478       2.43478       47.7601       50.1949    
   7  0.676080     -0.391444      -2.80272       2.80272       47.2329       50.0356    
   8  0.611139     -0.492432      -3.52579       3.52579       48.2589       51.7847    
   9  0.614246     -0.487359      -3.48947       3.48947       48.3164       51.8058    
  10  0.988045     -0.120275E-01 -0.861166E-01  0.861166E-01   48.6182       48.7044    
  11  0.232883      -1.45722      -10.4336       10.4336       48.6567       59.0903    
  12  0.450825     -0.796675      -5.70415       5.70415       47.7426       53.4468    
  13  0.493319     -0.706599      -5.05921       5.05921       48.0552       53.1144    
  14  0.191184      -1.65452      -11.8463       11.8463       48.2507       60.0969    
  15  0.894136     -0.111897     -0.801180      0.801180       47.7893       48.5904    
  16  0.391751     -0.937128      -6.70979       6.70979       47.6468       54.3566    
  17  0.236278      -1.44275      -10.3300       10.3300       49.1624       59.4924    
  18  0.496874E-01  -3.00200      -21.4942       21.4942       48.3329       69.8271    
  19  0.784524     -0.242678      -1.73757       1.73757       48.0744       49.8119    
  20  0.292328      -1.22988      -8.80588       8.80588       48.3863       57.1921    
  21  0.832247E-01  -2.48621      -17.8011       17.8011       47.7100       65.5112    
  22  0.423133     -0.860069      -6.15805       6.15805       48.8082       54.9662    
  23  0.234472      -1.45042      -10.3849       10.3849       48.2399       58.6248    
  24  0.868463     -0.141031      -1.00977       1.00977       48.2592       49.2690    
  25  0.122969      -2.09582      -15.0060       15.0060       48.8766       63.8826    
  26  0.811771     -0.208537      -1.49311       1.49311       47.9426       49.4357    
  27  0.786834     -0.239738      -1.71651       1.71651       49.5005       51.2170    
  28  0.163144      -1.81312      -12.9818       12.9818       48.2681       61.2500    
  29  0.571103     -0.560186      -4.01090       4.01090       49.9618       53.9727    
  30  0.769982     -0.261388      -1.87152       1.87152       47.1953       49.0668    
  31  0.471769     -0.751265      -5.37902       5.37902       48.0524       53.4314    
  32  0.584935     -0.536254      -3.83955       3.83955       47.0527       50.8923    
  33  0.416140     -0.876734      -6.27737       6.27737       48.4120       54.6893    
  34  0.106525E-01  -4.54196      -32.5202       32.5202       47.3838       79.9040    
  35  0.595424     -0.518482      -3.71230       3.71230       48.7468       52.4591    
  36  0.302400      -1.19600      -8.56333       8.56333       48.1762       56.7396    
  37  0.629701     -0.462510      -3.31155       3.31155       47.7162       51.0278    
  38  0.939026E-01  -2.36550      -16.9368       16.9368       47.2142       64.1510    
  39  0.911727     -0.924151E-01 -0.661687      0.661687       48.2255       48.8872    
  40  0.289502      -1.23959      -8.87543       8.87543       52.5955       61.4709    
  41  0.326571      -1.11911      -8.01275       8.01275       47.7330       55.7458    
  42  0.972366     -0.280231E-01 -0.200644      0.200644       48.2724       48.4731    
  43  0.823413     -0.194297      -1.39116       1.39116       47.4819       48.8731    
  44  0.790717     -0.234815      -1.68126       1.68126       47.6508       49.3321    
  45  0.167922      -1.78426      -12.7752       12.7752       48.5919       61.3671    
  46  0.804665     -0.217329      -1.55607       1.55607       49.0408       50.5968    
  47  0.154714      -1.86617      -13.3617       13.3617       47.1804       60.5421    
  48  0.240456      -1.42522      -10.2045       10.2045       47.2545       57.4590    
  49  0.351787      -1.04473      -7.48022       7.48022       52.2522       59.7325    
  50  0.666429E-01  -2.70841      -19.3921       19.3921       47.9746       67.3667    
  51  0.484113     -0.725437      -5.19409       5.19409       48.2138       53.4078    
  52  0.298509      -1.20896      -8.65606       8.65606       47.8937       56.5497    
  53  0.982136     -0.180253E-01 -0.129060      0.129060       47.7477       47.8767    
  54  0.799723     -0.223490      -1.60018       1.60018       50.8673       52.4675    
  55  0.559799     -0.580177      -4.15404       4.15404       47.7345       51.8885    
  56  0.492929     -0.707390      -5.06488       5.06488       51.6227       56.6876    
  57  0.655290     -0.422678      -3.02635       3.02635       49.5314       52.5577    
  58  0.426949     -0.851091      -6.09377       6.09377       48.2784       54.3721    
  59  0.575269     -0.552918      -3.95886       3.95886       47.5648       51.5237    
  60  0.252283      -1.37721      -9.86072       9.86072       48.4295       58.2902    
  61  0.628464     -0.464477      -3.32563       3.32563       48.7895       52.1152    
  62  0.847342E-01  -2.46824      -17.6724       17.6724       47.7675       65.4399    
  63  0.701567     -0.354439      -2.53777       2.53777       47.3977       49.9355    
  64  0.171664      -1.76222      -12.6174       12.6174       48.4284       61.0458    
  65  0.395346     -0.927995      -6.64440       6.64440       47.7233       54.3677    
  66  0.397662     -0.922153      -6.60257       6.60257       48.3105       54.9131    
  67  0.166798      -1.79097      -12.8233       12.8233       47.2490       60.0722    
  68  0.100957      -2.29306      -16.4182       16.4182       47.7694       64.1876    
  69  0.725220     -0.321280      -2.30035       2.30035       48.8185       51.1188    
  70  0.856561     -0.154829      -1.10857       1.10857       48.3066       49.4152    
loop,thermsimp(1:2)       59   7.93728      0.449520    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185         48.01          0.84          1.11         23.86          0.68          0.04         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186         52.42          0.84          1.12         23.85          0.82          0.04         26.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       59
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       60
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      185     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -8.52235       8.52235       47.7477       56.2700    
   2  0.843344     -0.170380      -1.21991       1.21991       47.8226       49.0425    
   3  0.457815     -0.781289      -5.59399       5.59399       48.2724       53.8664    
   4  0.933709     -0.685899E-01 -0.491101      0.491101       47.7893       48.2804    
   5  0.887159     -0.119731     -0.857265      0.857265       48.6182       49.4755    
   6  0.786211     -0.240530      -1.72218       1.72218       47.4819       49.2041    
   7  0.794803     -0.229661      -1.64436       1.64436       48.2255       49.8699    
   8  0.573435E-01  -2.85870      -20.4681       20.4681       47.1953       67.6634    
   9  0.647106     -0.435245      -3.11633       3.11633       48.2592       51.3755    
  10  0.110118      -2.20620      -15.7963       15.7963       47.6508       63.4472    
  11  0.339548      -1.08014      -7.73374       7.73374       48.3066       56.0403    
  12  0.635246     -0.453742      -3.24877       3.24877       47.9426       51.1913    
  13  0.488392     -0.716638      -5.13109       5.13109       48.0744       53.2054    
  14  0.602571     -0.506549      -3.62687       3.62687       47.3977       51.0246    
  15  0.710041     -0.342433      -2.45181       2.45181       47.2329       49.6847    
  16  0.585763     -0.534840      -3.82943       3.82943       47.7601       51.5896    
  17  0.288010      -1.24476      -8.91241       8.91241       47.6585       56.5709    
  18  0.455238     -0.786934      -5.63441       5.63441       49.0408       54.6752    
  19  0.723984     -0.322986      -2.31256       2.31256       47.0527       49.3653    
  20  0.554067     -0.590470      -4.22774       4.22774       47.7162       51.9440    
  21  0.646516     -0.436157      -3.12286       3.12286       48.8185       51.9413    
  22  0.271985      -1.30201      -9.32231       9.32231       49.5005       58.8228    
  23  0.901636E-02  -4.70871      -33.7142       33.7142       47.5648       81.2790    
  24  0.383616     -0.958114      -6.86005       6.86005       48.2589       55.1189    
  25  0.443516     -0.813022      -5.82120       5.82120       48.3164       54.1376    
  26  0.223023      -1.50048      -10.7434       10.7434       47.7345       58.4779    
  27  0.123255      -2.09350      -14.9893       14.9893       48.7895       63.7789    
  28  0.817485     -0.201523      -1.44289       1.44289       48.7468       50.1897    
  29  0.333893      -1.09693      -7.85399       7.85399       50.8673       58.7213    
  30  0.867877     -0.141706      -1.01461       1.01461       49.5314       50.5460    
  31  0.365747      -1.00581      -7.20158       7.20158       47.8653       55.0669    
  32  0.429445     -0.845262      -6.05203       6.05203       48.0552       54.1073    
  33  0.856620     -0.154761      -1.10808       1.10808       48.2138       49.3218    
  34  0.729532     -0.315352      -2.25791       2.25791       48.0524       50.3103    
  35  0.315845      -1.15251      -8.25188       8.25188       47.7426       55.9945    
  36  0.547596     -0.602217      -4.31184       4.31184       49.9618       54.2737    
  37  0.752130     -0.284846      -2.03949       2.03949       47.6468       49.6863    
  38  0.806451     -0.215112      -1.54019       1.54019       47.7233       49.2634    
  39  0.618613     -0.480275      -3.43875       3.43875       48.2784       51.7171    
  40  0.630350     -0.461480      -3.30417       3.30417       48.4120       51.7161    
  41  0.251741      -1.37935      -9.87611       9.87611       48.3105       58.1866    
  42  0.846504     -0.166640      -1.19313       1.19313       48.8082       50.0013    
  43  0.830791     -0.185377      -1.32729       1.32729       47.7330       49.0603    
  44  0.566838     -0.567681      -4.06457       4.06457       47.8510       51.9156    
  45  0.499450E-01  -2.99683      -21.4572       21.4572       47.8937       69.3508    
  46  0.976301     -0.239838E-01 -0.171723      0.171723       51.6227       51.7944    
  47  0.401049     -0.913672      -6.54185       6.54185       48.1762       54.7181    
  48  0.709931E-01  -2.64517      -18.9393       18.9393       48.3863       67.3256    
  49  0.920370E-02  -4.68815      -33.5669       33.5669       47.2545       80.8214    
  50  0.379723     -0.968314      -6.93308       6.93308       48.4295       55.3626    
  51  0.207569      -1.57229      -11.2575       11.2575       48.2399       59.4974    
  52  0.745673     -0.293468      -2.10121       2.10121       48.6567       50.7580    
  53  0.915877     -0.878737E-01 -0.629171      0.629171       49.1624       49.7916    
  54  0.836769     -0.178207      -1.27596       1.27596       52.2522       53.5282    
  55  0.769684E-01  -2.56436      -18.3607       18.3607       47.2490       65.6097    
  56  0.797754     -0.225955      -1.61783       1.61783       48.2507       49.8685    
  57  0.555189     -0.588446      -4.21325       4.21325       47.1804       51.3936    
  58  0.134224      -2.00825      -14.3790       14.3790       48.4284       62.8074    
  59  0.796234     -0.227862      -1.63148       1.63148       48.2681       49.8996    
  60  0.628721     -0.464068      -3.32270       3.32270       48.5919       51.9146    
  61  0.460391     -0.775679      -5.55382       5.55382       52.5955       58.1493    
  62  0.137302      -1.98558      -14.2166       14.2166       47.1344       61.3510    
  63  0.504249     -0.684686      -4.90232       4.90232       48.8766       53.7790    
  64  0.548486     -0.600594      -4.30023       4.30023       47.2142       51.5144    
  65  0.479259     -0.735514      -5.26624       5.26624       47.7694       53.0356    
  66  0.763784     -0.269471      -1.92940       1.92940       47.7675       49.6969    
  67  0.896024     -0.109788     -0.786076      0.786076       47.7100       48.4961    
  68  0.873307     -0.135468     -0.969943      0.969943       47.9746       48.9446    
  69  0.469885     -0.755268      -5.40768       5.40768       48.3329       53.7406    
  70  0.705401     -0.348988      -2.49874       2.49874       48.0121       50.5109    
loop,thermsimp(1:2)       60   8.52235       1.21991    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187         48.29          0.84          1.12         23.85          0.70          0.04         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    188         52.56          0.84          1.11         23.81          0.71          0.04         26.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.29
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       60
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       61
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      187     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713      -1.33685       1.33685       47.7893       49.1261    
   2  0.735850     -0.306729      -2.19617       2.19617       47.7100       49.9062    
   3  0.828786     -0.187793      -1.34459       1.34459       47.9746       49.3192    
   4  0.592078     -0.524118      -3.75266       3.75266       47.8226       51.5753    
   5  0.691797E-01  -2.67105      -19.1246       19.1246       47.7330       66.8576    
   6  0.772335     -0.258337      -1.84968       1.84968       47.4819       49.3316    
   7  0.504563     -0.684063      -4.89786       4.89786       47.7233       52.6211    
   8  0.700615     -0.355797      -2.54749       2.54749       48.2138       50.7612    
   9  0.764596     -0.268408      -1.92179       1.92179       47.0527       48.9745    
  10  0.459614     -0.777368      -5.56592       5.56592       48.6182       54.1842    
  11  0.931193     -0.712882E-01 -0.510420      0.510420       47.2329       47.7433    
  12  0.502482E-01  -2.99078      -21.4138       21.4138       47.6468       69.0606    
  13  0.498197     -0.696760      -4.98876       4.98876       47.7675       52.7562    
  14  0.551534E-01  -2.89764      -20.7469       20.7469       49.1624       69.9093    
  15  0.172209      -1.75905      -12.5947       12.5947       48.2507       60.8454    
  16  0.238868E-01  -3.73443      -26.7383       26.7383       48.2255       74.9638    
  17  0.699366     -0.357581      -2.56026       2.56026       48.2681       50.8284    
  18  0.764093     -0.269066      -1.92650       1.92650       48.8082       50.7347    
  19  0.465633     -0.764357      -5.47276       5.47276       48.7468       54.2196    
  20  0.209906      -1.56110      -11.1774       11.1774       48.0524       59.2298    
  21  0.216891      -1.52836      -10.9430       10.9430       48.0121       58.9551    
  22  0.795854E-01  -2.53092      -18.1213       18.1213       49.5314       67.6527    
  23  0.701683     -0.354273      -2.53658       2.53658       48.6567       51.1933    
  24  0.574425     -0.554385      -3.96937       3.96937       47.3977       51.3671    
  25  0.674968     -0.393090      -2.81450       2.81450       47.9426       50.7571    
  26  0.684189     -0.379521      -2.71735       2.71735       48.2592       50.9766    
  27  0.541862     -0.612745      -4.38722       4.38722       47.1804       51.5676    
  28  0.668027     -0.403426      -2.88851       2.88851       47.2142       50.1027    
  29  0.353251      -1.04058      -7.45047       7.45047       47.7601       55.2106    
  30  0.778708     -0.250119      -1.79084       1.79084       48.4120       50.2028    
  31  0.829283     -0.187194      -1.34030       1.34030       48.2784       49.6187    
  32  0.679297     -0.386697      -2.76873       2.76873       51.6227       54.3914    
  33  0.536301     -0.623060      -4.46108       4.46108       48.5919       53.0530    
  34  0.247738      -1.39538      -9.99087       9.99087       47.8510       57.8419    
  35  0.271399      -1.30416      -9.33775       9.33775       48.8185       58.1562    
  36  0.284124      -1.25835      -9.00970       9.00970       47.7162       56.7259    
  37  0.664442     -0.408808      -2.92704       2.92704       47.7694       50.6964    
  38  0.874508     -0.134094     -0.960103      0.960103       48.0744       49.0345    
  39  0.916444     -0.872538E-01 -0.624733      0.624733       52.2522       52.8770    
  40  0.295165      -1.22022      -8.73672       8.73672       48.3329       57.0696    
  41  0.242592      -1.41637      -10.1412       10.1412       48.8766       59.0178    
  42  0.396124     -0.926028      -6.63032       6.63032       48.2724       54.9027    
  43  0.509193E-01  -2.97751      -21.3188       21.3188       48.0552       69.3741    
  44  0.778911     -0.249858      -1.78897       1.78897       48.3164       50.1053    
  45  0.351009      -1.04694      -7.49606       7.49606       49.9618       57.4579    
  46  0.480934     -0.732025      -5.24127       5.24127       49.0408       54.2820    
  47  0.908579     -0.958731E-01 -0.686447      0.686447       48.1762       48.8627    
  48  0.898885     -0.106600     -0.763250      0.763250       47.8653       48.6286    
  49  0.561121     -0.577819      -4.13715       4.13715       48.2589       52.3960    
  50  0.851109     -0.161215      -1.15429       1.15429       48.4295       49.5838    
  51  0.975854     -0.244425E-01 -0.175007      0.175007       47.7426       47.9176    
  52  0.187829      -1.67223      -11.9731       11.9731       48.3066       60.2796    
  53  0.962131     -0.386049E-01 -0.276409      0.276409       47.7477       48.0241    
  54  0.823812     -0.193813      -1.38769       1.38769       47.6585       49.0462    
  55  0.765207     -0.267609      -1.91607       1.91607       52.5955       54.5115    
  56  0.207984      -1.57030      -11.2432       11.2432       48.3105       59.5538    
  57  0.675792     -0.391869      -2.80576       2.80576       47.7345       50.5403    
  58  0.641275     -0.444296      -3.18114       3.18114       50.8673       54.0484    
  59  0.621346E-01  -2.77845      -19.8936       19.8936       49.5005       69.3941    
  60  0.911977E-01  -2.39473      -17.1461       17.1461       48.2399       65.3860    
  61  0.697078     -0.360859      -2.58373       2.58373       47.1344       49.7182    
  62  0.760976     -0.273154      -1.95577       1.95577       48.4284       50.3842    
  63  0.812117     -0.208111      -1.49006       1.49006       47.6508       49.1409    
  64  0.654868     -0.423322      -3.03097       3.03097       48.7895       51.8205    
  65  0.263345E-02  -5.93946      -42.5262       42.5262       47.2490       89.7752    
  66  0.180895      -1.70984      -12.2423       12.2423       48.3863       60.6286    
  67  0.830100     -0.186209      -1.33325       1.33325       47.1953       48.5285    
  68  0.396842E-01  -3.22680      -23.1037       23.1037       47.8937       70.9974    
  69  0.862274     -0.148182      -1.06097       1.06097       47.2545       48.3155    
  70  0.362095      -1.01585      -7.27342       7.27342       48.2931       55.5665    
loop,thermsimp(1:2)       61   1.33685       2.19617    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189         49.02          0.84          1.12         23.84          0.45          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    190         54.24          0.84          1.12         23.82          0.45          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       61
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       62
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      189     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01 -0.617307      0.617307       47.2329       47.8502    
   2  0.899579E-01  -2.40841      -17.2441       17.2441       47.7426       64.9868    
   3  0.997625     -0.237830E-02 -0.170285E-01  0.170285E-01   47.7477       47.7647    
   4  0.224083      -1.49574      -10.7094       10.7094       47.2545       57.9639    
   5  0.120769      -2.11388      -15.1353       15.1353       47.1953       62.3306    
   6  0.302676E-01  -3.49768      -25.0432       25.0432       47.8653       72.9085    
   7  0.315161      -1.15467      -8.26739       8.26739       48.1762       56.4436    
   8  0.155895      -1.85857      -13.3073       13.3073       47.0527       60.3600    
   9  0.467639     -0.760060      -5.44199       5.44199       48.0744       53.5163    
  10  0.277823      -1.28077      -9.17024       9.17024       47.6585       56.8287    
  11  0.712282     -0.339281      -2.42923       2.42923       47.7893       50.2185    
  12  0.929560     -0.730437E-01 -0.522989      0.522989       47.6508       48.1738    
  13  0.499024     -0.695101      -4.97689       4.97689       47.9746       52.9515    
  14  0.940347     -0.615066E-01 -0.440384      0.440384       47.4819       47.9223    
  15  0.714006     -0.336864      -2.41193       2.41193       48.4295       50.8414    
  16  0.162603      -1.81644      -13.0056       13.0056       48.2784       61.2840    
  17  0.663729     -0.409881      -2.93473       2.93473       47.1344       50.0692    
  18  0.314148      -1.15789      -8.29045       8.29045       47.7100       56.0005    
  19  0.497386     -0.698388      -5.00043       5.00043       47.2142       52.2146    
  20  0.368387     -0.998622      -7.15009       7.15009       48.3164       55.4665    
  21  0.326342      -1.11981      -8.01777       8.01777       48.4120       56.4297    
  22  0.442952     -0.814294      -5.83030       5.83030       48.4284       54.2587    
  23  0.929694     -0.729000E-01 -0.521961      0.521961       47.7345       48.2565    
  24  0.945450E-01  -2.35868      -16.8880       16.8880       47.7694       64.6574    
  25  0.407158     -0.898555      -6.43361       6.43361       48.8082       55.2418    
  26  0.706679     -0.347179      -2.48579       2.48579       47.9426       50.4284    
  27  0.657848     -0.418781      -2.99845       2.99845       48.2138       51.2122    
  28  0.968040     -0.324817E-01 -0.232568      0.232568       48.2681       48.5007    
  29  0.330387      -1.10749      -7.92957       7.92957       48.2592       56.1888    
  30  0.756161     -0.279501      -2.00121       2.00121       48.6567       50.6580    
  31  0.307772      -1.17840      -8.43726       8.43726       47.3977       55.8350    
  32  0.759008E-01  -2.57833      -18.4607       18.4607       47.1804       65.6411    
  33  0.615618E-01  -2.78771      -19.9599       19.9599       47.8226       67.7825    
  34  0.545984     -0.605166      -4.33296       4.33296       48.7895       53.1225    
  35  0.339865      -1.07921      -7.72706       7.72706       48.2589       55.9859    
  36  0.816477     -0.202757      -1.45173       1.45173       47.7233       49.1750    
  37  0.932889     -0.694691E-01 -0.497395      0.497395       47.7675       48.2649    
  38  0.667042     -0.404902      -2.89908       2.89908       52.2522       55.1513    
  39  0.583049     -0.539484      -3.86268       3.86268       48.5919       52.4546    
  40  0.210192      -1.55973      -11.1676       11.1676       50.8673       62.0349    
  41  0.158846      -1.83982      -13.1730       13.1730       48.6182       61.7913    
  42  0.360401      -1.02054      -7.30700       7.30700       48.7468       56.0538    
  43  0.508154     -0.676971      -4.84708       4.84708       49.0408       53.8879    
  44  0.873303     -0.135473     -0.969980      0.969980       51.6227       52.5927    
  45  0.650524     -0.429977      -3.07862       3.07862       52.5955       55.6741    
  46  0.805601     -0.216166      -1.54774       1.54774       48.2724       49.8201    
  47  0.312590E-03  -8.07062      -57.7852       57.7852       47.7601       105.545    
  48  0.892261     -0.113997     -0.816211      0.816211       48.2931       49.1093    
  49  0.504672     -0.683846      -4.89630       4.89630       47.7162       52.6125    
  50  0.269834      -1.30995      -9.37915       9.37915       48.3329       57.7120    
  51  0.752889     -0.283838      -2.03226       2.03226       49.9618       51.9941    
  52  0.952800     -0.483498E-01 -0.346182      0.346182       47.8510       48.1972    
  53  0.147189E-01  -4.21863      -30.2051       30.2051       48.8185       79.0236    
  54  0.213392      -1.54462      -11.0594       11.0594       48.0121       59.0715    
  55  0.278061      -1.27992      -9.16414       9.16414       48.8766       58.0408    
  56  0.668800     -0.402271      -2.88024       2.88024       48.0524       50.9326    
  57  0.674989     -0.393058      -2.81428       2.81428       48.3105       51.1248    
  58  0.186370      -1.68002      -12.0289       12.0289       48.3066       60.3355    
  59  0.133078      -2.01682      -14.4403       14.4403       48.3863       62.8266    
  60  0.519821     -0.654270      -4.68454       4.68454       48.2507       52.9352    
  61  0.136847      -1.98889      -14.2404       14.2404       48.2399       62.4802    
  62  0.604880     -0.502725      -3.59949       3.59949       47.7330       51.3325    
  63  0.301519      -1.19892      -8.58422       8.58422       49.5314       58.1156    
  64  0.531506     -0.632040      -4.52538       4.52538       47.6468       52.1722    
  65  0.554963     -0.588854      -4.21616       4.21616       48.0552       52.2714    
  66  0.264726      -1.32906      -9.51601       9.51601       49.5005       59.0165    
  67  0.520437     -0.653087      -4.67607       4.67607       49.1624       53.8385    
  68  0.457095     -0.782865      -5.60527       5.60527       47.8937       53.4989    
  69  0.349515      -1.05121      -7.52661       7.52661       48.2255       55.7521    
  70  0.624446E-01  -2.77348      -19.8580       19.8580       49.0191       68.8771    
loop,thermsimp(1:2)       62  0.617307       17.2441    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191         47.88          0.83          1.12         23.84          0.44          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    192         50.39          0.84          1.12         23.82          0.52          0.04         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.88
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       62
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       63
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      191     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -3.45517       3.45517       47.7477       51.2028    
   2  0.828850     -0.187716      -1.34403       1.34403       47.2329       48.5769    
   3  0.138898      -1.97402      -14.1339       14.1339       47.4819       61.6158    
   4  0.174947      -1.74327      -12.4818       12.4818       47.6508       60.1326    
   5  0.452367E-01  -3.09585      -22.1661       22.1661       47.8510       70.0172    
   6  0.982229     -0.179305E-01 -0.128381      0.128381       47.7345       47.8629    
   7  0.855728     -0.155803      -1.11554       1.11554       47.7675       48.8830    
   8  0.350750      -1.04768      -7.50135       7.50135       48.2681       55.7695    
   9  0.880054     -0.127772     -0.914842      0.914842       48.2931       49.2080    
  10  0.106511      -2.23950      -16.0347       16.0347       47.7233       63.7580    
  11  0.336060      -1.09047      -7.80769       7.80769       48.2724       56.0801    
  12  0.904819     -0.100020     -0.716139      0.716139       47.1344       47.8506    
  13  0.765597     -0.267099      -1.91241       1.91241       47.7893       49.7017    
  14  0.551789     -0.594589      -4.25723       4.25723       47.9426       52.1998    
  15  0.832435     -0.183400      -1.31313       1.31313       48.6567       49.9699    
  16  0.353494      -1.03989      -7.44556       7.44556       48.4295       55.8750    
  17  0.510104     -0.673140      -4.81965       4.81965       48.0524       52.8721    
  18  0.523162     -0.647863      -4.63867       4.63867       48.3105       52.9492    
  19  0.953043     -0.480957E-01 -0.344363      0.344363       48.2138       48.5581    
  20  0.267001E-01  -3.62309      -25.9411       25.9411       47.7330       73.6741    
  21  0.280924      -1.26967      -9.09078       9.09078       49.9618       59.0526    
  22  0.956868     -0.440901E-01 -0.315683      0.315683       47.6468       47.9625    
  23  0.779725     -0.248814      -1.78149       1.78149       47.2142       48.9957    
  24  0.901061     -0.104183     -0.745944      0.745944       48.0552       48.8012    
  25  0.533391     -0.628501      -4.50004       4.50004       48.5919       53.0919    
  26  0.642536     -0.442333      -3.16708       3.16708       51.6227       54.7898    
  27  0.520565E-01  -2.95543      -21.1607       21.1607       47.7162       68.8769    
  28  0.330080      -1.10842      -7.93623       7.93623       48.2507       56.1869    
  29  0.280801      -1.27011      -9.09392       9.09392       47.9746       57.0686    
  30  0.144013      -1.93785      -13.8749       13.8749       48.7895       62.6644    
  31  0.201537      -1.60178      -11.4687       11.4687       47.8937       59.3623    
  32  0.920188     -0.831777E-01 -0.595548      0.595548       48.0744       48.6699    
  33  0.747222     -0.291393      -2.08636       2.08636       49.1624       51.2488    
  34  0.697959     -0.359595      -2.57468       2.57468       49.0408       51.6155    
  35  0.492949     -0.707349      -5.06458       5.06458       48.4284       53.4930    
  36  0.378001     -0.972857      -6.96561       6.96561       52.2522       59.2179    
  37  0.936484     -0.656225E-01 -0.469854      0.469854       48.8082       49.2780    
  38  0.458232     -0.780381      -5.58749       5.58749       48.3164       53.9039    
  39  0.286796      -1.24898      -8.94267       8.94267       52.5955       61.5381    
  40  0.524458     -0.645389      -4.62096       4.62096       48.2255       52.8465    
  41  0.126679      -2.06610      -14.7932       14.7932       47.3977       62.1909    
  42  0.645270     -0.438086      -3.13667       3.13667       48.2589       51.3956    
  43  0.996049     -0.395919E-02 -0.283476E-01  0.283476E-01   47.7100       47.7384    
  44  0.470695     -0.753545      -5.39534       5.39534       48.7468       54.1421    
  45  0.783048     -0.244561      -1.75104       1.75104       48.2592       50.0102    
  46  0.682425     -0.382103      -2.73584       2.73584       48.4120       51.1478    
  47  0.623779     -0.471960      -3.37921       3.37921       48.1762       51.5554    
  48  0.138146      -1.97945      -14.1727       14.1727       47.6585       61.8312    
  49  0.317697      -1.14666      -8.21000       8.21000       48.3329       56.5429    
  50  0.215616      -1.53426      -10.9852       10.9852       47.2545       58.2397    
  51  0.392653     -0.934829      -6.69333       6.69333       48.8766       55.5700    
  52  0.311957      -1.16489      -8.34056       8.34056       49.5314       57.8719    
  53  0.665567     -0.407116      -2.91493       2.91493       49.5005       52.4155    
  54  0.124333      -2.08479      -14.9270       14.9270       48.0121       62.9391    
  55  0.175373      -1.74084      -12.4643       12.4643       48.3066       60.7709    
  56  0.712195E-01  -2.64199      -18.9165       18.9165       47.0527       65.9692    
  57  0.626551E-01  -2.77011      -19.8339       19.8339       48.2784       68.1122    
  58  0.869671     -0.139640     -0.999816      0.999816       48.6182       49.6181    
  59  0.112950      -2.18081      -15.6145       15.6145       50.8673       66.4817    
  60  0.837299     -0.177574      -1.27142       1.27142       47.1953       48.4667    
  61  0.380546     -0.966149      -6.91758       6.91758       48.2399       55.1574    
  62  0.225371      -1.49001      -10.6684       10.6684       48.3863       59.0547    
  63  0.556139     -0.586737      -4.20101       4.20101       47.7694       51.9704    
  64  0.909618     -0.947309E-01 -0.678269      0.678269       47.7426       48.4209    
  65  0.432012     -0.839301      -6.00936       6.00936       47.1804       53.1897    
  66  0.554192     -0.590244      -4.22612       4.22612       47.8226       52.0488    
  67  0.264884      -1.32846      -9.51173       9.51173       49.0191       58.5309    
  68  0.667330     -0.404471      -2.89599       2.89599       47.8653       50.7613    
  69  0.445504     -0.808549      -5.78917       5.78917       48.8185       54.6077    
  70  0.194275      -1.63848      -11.7315       11.7315       47.8839       59.6154    
loop,thermsimp(1:2)       63   3.45517       1.34403    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193         47.84          0.83          1.11         23.82          0.44          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    194         48.68          0.84          1.12         23.86          0.45          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       63
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       64
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      193     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670      -1.45110       1.45110       47.7100       49.1611    
   2  0.209930      -1.56098      -11.1766       11.1766       47.1344       58.3110    
   3  0.710991     -0.341096      -2.44223       2.44223       47.7345       50.1767    
   4  0.967365     -0.331789E-01 -0.237559      0.237559       47.6468       47.8844    
   5  0.650635E-01  -2.73239      -19.5638       19.5638       47.7426       67.3064    
   6  0.578340     -0.547593      -3.92074       3.92074       47.1953       51.1160    
   7  0.928890E-01  -2.37635      -17.0146       17.0146       48.2138       65.2283    
   8  0.486974     -0.719546      -5.15191       5.15191       47.2329       52.3848    
   9  0.560625     -0.578703      -4.14348       4.14348       48.0744       52.2178    
  10  0.552834     -0.592698      -4.24369       4.24369       48.0552       52.2989    
  11  0.744529E-01  -2.59759      -18.5986       18.5986       47.7675       66.3661    
  12  0.937600     -0.644318E-01 -0.461329      0.461329       47.2142       47.6755    
  13  0.154459      -1.86783      -13.3736       13.3736       48.2931       61.6667    
  14  0.186893E-02  -6.28239      -44.9816       44.9816       48.8082       93.7898    
  15  0.250797      -1.38311      -9.90301       9.90301       48.6182       58.5213    
  16  0.924847E-01  -2.38071      -17.0458       17.0458       47.7893       64.8351    
  17  0.476680     -0.740911      -5.30488       5.30488       48.6567       53.9616    
  18  0.266527      -1.32228      -9.46744       9.46744       48.2592       57.7266    
  19  0.369755     -0.994916      -7.12355       7.12355       47.8653       54.9889    
  20  0.595561     -0.518252      -3.71066       3.71066       48.4120       52.1226    
  21  0.636070     -0.452447      -3.23950       3.23950       47.7477       50.9872    
  22  0.447294     -0.804540      -5.76047       5.76047       49.1624       54.9229    
  23  0.964945     -0.356839E-01 -0.255495      0.255495       48.2589       48.5144    
  24  0.752421     -0.284460      -2.03672       2.03672       48.1762       50.2129    
  25  0.705556     -0.348769      -2.49717       2.49717       49.0408       51.5380    
  26  0.943467     -0.581939E-01 -0.416665      0.416665       47.7694       48.1861    
  27  0.272564      -1.29988      -9.30708       9.30708       47.8226       57.1297    
  28  0.215815      -1.53333      -10.9786       10.9786       47.9426       58.9212    
  29  0.756955     -0.278452      -1.99370       1.99370       49.5005       51.4942    
  30  0.538381     -0.619189      -4.43336       4.43336       48.2255       52.6589    
  31  0.182967      -1.69845      -12.1608       12.1608       48.0524       60.2132    
  32  0.644758     -0.438881      -3.14236       3.14236       48.3105       51.4529    
  33  0.939477     -0.624320E-01 -0.447010      0.447010       48.5919       49.0389    
  34  0.663186     -0.410699      -2.94059       2.94059       47.1804       50.1209    
  35  0.795014     -0.229396      -1.64246       1.64246       48.4284       50.0709    
  36  0.630792     -0.460779      -3.29916       3.29916       48.3164       51.6155    
  37  0.151039      -1.89022      -13.5339       13.5339       48.7468       62.2807    
  38  0.668306     -0.403009      -2.88552       2.88552       48.8185       51.7040    
  39  0.683820     -0.380061      -2.72122       2.72122       51.6227       54.3439    
  40  0.122229      -2.10186      -15.0492       15.0492       48.2399       63.2890    
  41  0.664453     -0.408791      -2.92692       2.92692       48.8766       51.8036    
  42  0.548687     -0.600228      -4.29760       4.29760       48.2681       52.5657    
  43  0.931535     -0.709210E-01 -0.507791      0.507791       48.4295       48.9373    
  44  0.139742      -1.96796      -14.0905       14.0905       48.2724       62.3629    
  45  0.429142     -0.845967      -6.05708       6.05708       48.2507       54.3077    
  46  0.531147     -0.632717      -4.53022       4.53022       48.3329       52.8631    
  47  0.575558     -0.552416      -3.95527       3.95527       47.9746       51.9299    
  48  0.336537      -1.08905      -7.79752       7.79752       49.5314       57.3289    
  49  0.324486      -1.12551      -8.05862       8.05862       47.2545       55.3131    
  50  0.652768     -0.426534      -3.05396       3.05396       49.0191       52.0731    
  51  0.537860     -0.620158      -4.44030       4.44030       49.9618       54.4021    
  52  0.415288     -0.878782      -6.29204       6.29204       48.3863       54.6783    
  53  0.771827     -0.258995      -1.85439       1.85439       52.2522       54.1066    
  54  0.537995     -0.619906      -4.43850       4.43850       47.8937       52.3322    
  55  0.438537     -0.824310      -5.90202       5.90202       47.8839       53.7859    
  56  0.872114     -0.136835     -0.979730      0.979730       47.6508       48.6306    
  57  0.974519E-01  -2.32840      -16.6712       16.6712       48.3066       64.9778    
  58  0.245035      -1.40635      -10.0694       10.0694       52.5955       62.6649    
  59  0.285418      -1.25380      -8.97715       8.97715       47.4819       56.4591    
  60  0.598735     -0.512936      -3.67260       3.67260       47.6585       51.3311    
  61  0.440039     -0.820892      -5.87755       5.87755       47.3977       53.2753    
  62  0.115587      -2.15774      -15.4493       15.4493       48.7895       64.2388    
  63  0.479716     -0.734560      -5.25941       5.25941       48.0121       53.2715    
  64  0.423297     -0.859681      -6.15528       6.15528       47.7233       53.8785    
  65  0.385689E-01  -3.25531      -23.3079       23.3079       47.0527       70.3606    
  66  0.504564     -0.684061      -4.89784       4.89784       50.8673       55.7651    
  67  0.406483     -0.900213      -6.44548       6.44548       48.2784       54.7239    
  68  0.362573E-01  -3.31712      -23.7504       23.7504       47.7162       71.4666    
  69  0.666448E-03  -7.31355      -52.3646       52.3646       47.8510       100.216    
  70  0.428061     -0.848489      -6.07514       6.07514       47.8405       53.9156    
loop,thermsimp(1:2)       64   1.45110       11.1766    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195         47.46          0.83          1.12         23.81          0.45          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    196         51.30          0.84          1.11         23.81          0.61          0.04         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       64
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       65
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      195     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -7.16691       7.16691       47.2142       54.3811    
   2  0.298218      -1.20993      -8.66304       8.66304       47.6468       56.3098    
   3  0.374092     -0.983254      -7.04005       7.04005       47.7694       54.8094    
   4  0.417366     -0.873791      -6.25630       6.25630       48.2589       54.5152    
   5  0.299382      -1.20604      -8.63516       8.63516       47.6508       56.2860    
   6  0.373029     -0.986099      -7.06042       7.06042       48.4295       55.4899    
   7  0.628224     -0.464858      -3.32836       3.32836       48.5919       51.9202    
   8  0.111397      -2.19465      -15.7136       15.7136       47.7100       63.4236    
   9  0.983555     -0.165818E-01 -0.118725      0.118725       48.4284       48.5472    
  10  0.394578     -0.929938      -6.65831       6.65831       47.1804       53.8387    
  11  0.410639     -0.890042      -6.37266       6.37266       47.7345       54.1072    
  12  0.700680     -0.355705      -2.54683       2.54683       48.1762       50.7231    
  13  0.223946      -1.49635      -10.7138       10.7138       47.7477       58.4615    
  14  0.651113E-01  -2.73166      -19.5585       19.5585       47.1953       66.7538    
  15  0.704010     -0.350963      -2.51288       2.51288       47.6585       50.1714    
  16  0.172411      -1.75787      -12.5863       12.5863       48.3105       60.8968    
  17  0.567412     -0.566670      -4.05733       4.05733       49.5005       53.5579    
  18  0.186334      -1.68021      -12.0302       12.0302       49.0408       61.0710    
  19  0.677524     -0.389310      -2.78744       2.78744       48.3164       51.1038    
  20  0.362270      -1.01537      -7.26996       7.26996       48.8185       56.0885    
  21  0.603880     -0.504381      -3.61134       3.61134       48.8766       52.4880    
  22  0.782208     -0.245635      -1.75873       1.75873       47.9746       49.7334    
  23  0.129808      -2.04170      -14.6185       14.6185       49.0191       63.6376    
  24  0.284816      -1.25591      -8.99227       8.99227       48.4120       57.4042    
  25  0.246930      -1.39865      -10.0143       10.0143       48.0744       58.0886    
  26  0.256917      -1.35900      -9.73039       9.73039       48.0552       57.7856    
  27  0.240545      -1.42485      -10.2018       10.2018       47.8937       58.0955    
  28  0.218018      -1.52318      -10.9059       10.9059       47.2329       58.1387    
  29  0.235583E-01  -3.74828      -26.8375       26.8375       48.2681       75.1056    
  30  0.114660      -2.16578      -15.5069       15.5069       48.2255       63.7324    
  31  0.119129      -2.12755      -15.2332       15.2332       48.3329       63.5660    
  32  0.471707     -0.751398      -5.37997       5.37997       48.0121       53.3921    
  33  0.607413     -0.498546      -3.56956       3.56956       47.3977       50.9673    
  34  0.568731     -0.564347      -4.04070       4.04070       47.8839       51.9246    
  35  0.587492     -0.531893      -3.80833       3.80833       47.7233       51.5316    
  36  0.411259     -0.888533      -6.36185       6.36185       47.8405       54.2024    
  37  0.836192     -0.178897      -1.28089       1.28089       48.6567       49.9376    
  38  0.152977      -1.87747      -13.4426       13.4426       52.2522       65.6948    
  39  0.941831     -0.599291E-01 -0.429089      0.429089       48.2507       48.6797    
  40  0.936595     -0.655045E-01 -0.469009      0.469009       51.6227       52.0917    
  41  0.856621     -0.154759      -1.10807       1.10807       49.9618       51.0699    
  42  0.484786     -0.724047      -5.18414       5.18414       48.3863       53.5704    
  43  0.188261      -1.66993      -11.9566       11.9566       48.2784       60.2350    
  44  0.957606     -0.433189E-01 -0.310161      0.310161       49.1624       49.4726    
  45  0.234891      -1.44863      -10.3721       10.3721       47.8653       58.2375    
  46  0.758920     -0.275858      -1.97513       1.97513       47.2545       49.2296    
  47  0.135340      -1.99997      -14.3197       14.3197       50.8673       65.1869    
  48  0.779121E-01  -2.55217      -18.2734       18.2734       47.4819       65.7553    
  49  0.573767     -0.555531      -3.97758       3.97758       47.8226       51.8002    
  50  0.982512     -0.176424E-01 -0.126319      0.126319       49.5314       49.6577    
  51  0.109579      -2.21111      -15.8314       15.8314       48.2592       64.0906    
  52  0.714543     -0.336113      -2.40655       2.40655       47.1344       49.5410    
  53  0.573216     -0.556492      -3.98445       3.98445       48.6182       52.6027    
  54  0.389116     -0.943877      -6.75811       6.75811       47.9426       54.7007    
  55  0.149817      -1.89834      -13.5920       13.5920       48.0524       61.6445    
  56  0.623269     -0.472778      -3.38507       3.38507       48.2931       51.6782    
  57  0.682320E-02  -4.98743      -35.7097       35.7097       48.7468       84.4565    
  58  0.641698     -0.443637      -3.17642       3.17642       48.2724       51.4488    
  59  0.233363      -1.45516      -10.4189       10.4189       52.5955       63.0144    
  60  0.881483     -0.126150     -0.903228      0.903228       48.2399       49.1431    
  61  0.264921      -1.32832      -9.51072       9.51072       48.7895       58.3002    
  62  0.941652     -0.601200E-01 -0.430456      0.430456       47.7893       48.2197    
  63  0.179971      -1.71496      -12.2790       12.2790       48.3066       60.5856    
  64  0.381207E-01  -3.26700      -23.3915       23.3915       48.2138       71.6053    
  65  0.998657     -0.134405E-02 -0.962334E-02  0.962334E-02   47.7675       47.7771    
  66  0.553871     -0.590823      -4.23026       4.23026       47.7426       51.9729    
  67  0.599651     -0.511408      -3.66166       3.66166       47.0527       50.7144    
  68  0.834589     -0.180815      -1.29463       1.29463       47.7162       49.0109    
  69  0.622560     -0.473915      -3.39320       3.39320       48.8082       52.2014    
  70  0.437672E-03  -7.73404      -55.3753       55.3753       47.4597       102.835    
loop,thermsimp(1:2)       65   7.16691       8.66304    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197         47.85          0.84          1.12         23.81          0.45          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198         52.22          0.84          1.12         23.86          0.64          0.04         26.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       65
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       66
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      197     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -9.77105       9.77105       47.7675       57.5385    
   2  0.513427E-01  -2.96923      -21.2596       21.2596       47.7893       69.0488    
   3  0.288453      -1.24322      -8.90143       8.90143       48.4284       57.3299    
   4  0.107044      -2.23452      -15.9990       15.9990       48.2507       64.2497    
   5  0.756779     -0.278684      -1.99536       1.99536       47.7162       49.7116    
   6  0.333762      -1.09733      -7.85682       7.85682       48.2399       56.0967    
   7  0.270335      -1.30809      -9.36589       9.36589       47.2545       56.6204    
   8  0.666278E-01  -2.70863      -19.3937       19.3937       49.1624       68.5561    
   9  0.517510     -0.658727      -4.71645       4.71645       47.1344       51.8509    
  10  0.719680     -0.328949      -2.35526       2.35526       49.5314       51.8866    
  11  0.401542     -0.912442      -6.53304       6.53304       47.9746       54.5077    
  12  0.408125     -0.896181      -6.41661       6.41661       48.6567       55.0734    
  13  0.481086     -0.731710      -5.23900       5.23900       47.6585       52.8975    
  14  0.166952E-01  -4.09263      -29.3030       29.3030       47.0527       76.3557    
  15  0.913266     -0.907286E-01 -0.649612      0.649612       48.1762       48.8258    
  16  0.972084     -0.283134E-01 -0.202723      0.202723       47.3977       47.6004    
  17  0.889421     -0.117184     -0.839034      0.839034       49.9618       50.8009    
  18  0.171754      -1.76169      -12.6136       12.6136       48.3164       60.9300    
  19  0.925876     -0.770155E-01 -0.551427      0.551427       48.2724       48.8238    
  20  0.992897     -0.712866E-02 -0.510408E-01  0.510408E-01   47.7233       47.7743    
  21  0.118575E-01  -4.43479      -31.7529       31.7529       48.2931       80.0460    
  22  0.492413     -0.708438      -5.07238       5.07238       47.8226       52.8950    
  23  0.952433     -0.487360E-01 -0.348947      0.348947       48.5919       48.9408    
  24  0.591826     -0.524543      -3.75570       3.75570       47.8839       51.6396    
  25  0.762199     -0.271548      -1.94427       1.94427       47.7426       49.6869    
  26  0.613492     -0.488588      -3.49827       3.49827       51.6227       55.1210    
  27  0.134863      -2.00350      -14.3450       14.3450       48.8082       63.1531    
  28  0.633670     -0.456227      -3.26656       3.26656       48.8766       52.1432    
  29  0.829625     -0.186782      -1.33735       1.33735       48.6182       49.9556    
  30  0.148219      -1.90906      -13.6688       13.6688       48.0121       61.6809    
  31  0.198093      -1.61902      -11.5921       11.5921       49.5005       61.0926    
  32  0.321318      -1.13532      -8.12886       8.12886       48.3863       56.5151    
  33  0.475408     -0.743582      -5.32401       5.32401       47.1804       52.5044    
  34  0.196520      -1.62699      -11.6492       11.6492       47.7345       59.3837    
  35  0.637413     -0.450337      -3.22439       3.22439       47.8405       51.0649    
  36  0.596751     -0.516255      -3.69636       3.69636       47.2142       50.9105    
  37  0.351361      -1.04594      -7.48889       7.48889       48.2589       55.7478    
  38  0.111764      -2.19136      -15.6900       15.6900       47.9426       63.6326    
  39  0.213579      -1.54375      -11.0532       11.0532       47.7694       58.8226    
  40  0.799647     -0.223585      -1.60086       1.60086       48.4295       50.0303    
  41  0.670682     -0.399460      -2.86012       2.86012       48.8185       51.6786    
  42  0.104235      -2.26111      -16.1894       16.1894       47.6508       63.8403    
  43  0.607160E-01  -2.80155      -20.0590       20.0590       47.6468       67.7058    
  44  0.462312     -0.771516      -5.52402       5.52402       48.4120       53.9360    
  45  0.269658      -1.31060      -9.38383       9.38383       48.0552       57.4391    
  46  0.678606     -0.387714      -2.77601       2.77601       48.0744       50.8504    
  47  0.669051     -0.401895      -2.87755       2.87755       47.8937       50.7712    
  48  0.551912     -0.594367      -4.25564       4.25564       47.2329       51.4885    
  49  0.116070E-01  -4.45614      -31.9058       31.9058       47.8653       79.7711    
  50  0.911337     -0.928428E-01 -0.664750      0.664750       48.7895       49.4543    
  51  0.302404      -1.19599      -8.56323       8.56323       47.7477       56.3109    
  52  0.527926     -0.638800      -4.57377       4.57377       48.2784       52.8521    
  53  0.204835      -1.58555      -11.3525       11.3525       48.3066       59.6590    
  54  0.761388     -0.272612      -1.95189       1.95189       48.3105       50.2624    
  55  0.189928      -1.66111      -11.8935       11.8935       49.0408       60.9343    
  56  0.423830     -0.858422      -6.14626       6.14626       48.0524       54.1987    
  57  0.895148     -0.110767     -0.793084      0.793084       52.5955       53.3885    
  58  0.109823      -2.20889      -15.8155       15.8155       47.7100       63.5255    
  59  0.960076     -0.407431E-01 -0.291719      0.291719       48.3329       48.6246    
  60  0.694180     -0.365024      -2.61355       2.61355       49.0191       51.6327    
  61  0.302866      -1.19446      -8.55230       8.55230       48.2255       56.7778    
  62  0.213503      -1.54410      -11.0557       11.0557       48.2592       59.3149    
  63  0.949162     -0.521754E-01 -0.373573      0.373573       50.8673       51.2408    
  64  0.912779     -0.912617E-01 -0.653429      0.653429       52.2522       52.9057    
  65  0.393978     -0.931461      -6.66922       6.66922       47.4819       54.1511    
  66  0.957683     -0.432380E-01 -0.309582      0.309582       47.1953       47.5049    
  67  0.785605     -0.241301      -1.72770       1.72770       48.2138       49.9415    
  68  0.670559     -0.399644      -2.86143       2.86143       48.2681       51.1296    
  69  0.793392     -0.231438      -1.65708       1.65708       48.7468       50.4039    
  70  0.594443     -0.520131      -3.72411       3.72411       47.8510       51.5752    
loop,thermsimp(1:2)       66   9.77105       21.2596    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199         47.74          0.83          1.11         23.85          0.77          0.04         26.61
Just calling func    0   0         26.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    200         49.62          0.83          1.11         23.83          0.45          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.74
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       66
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       67
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      199     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -8.67037       8.67037       47.1953       55.8657    
   2  0.840396     -0.173882      -1.24498       1.24498       47.3977       48.6427    
   3  0.165782      -1.79708      -12.8670       12.8670       47.7233       60.5903    
   4  0.516202E-01  -2.96384      -21.2210       21.2210       48.3329       69.5538    
   5  0.163201      -1.81278      -12.9794       12.9794       48.2724       61.2518    
   6  0.201529      -1.60182      -11.4690       11.4690       48.1762       59.6452    
   7  0.791805     -0.233441      -1.67142       1.67142       48.5919       50.2633    
   8  0.306466      -1.18265      -8.46769       8.46769       48.7895       57.2572    
   9  0.625963     -0.468465      -3.35418       3.35418       47.7426       51.0968    
  10  0.255827      -1.36325      -9.76084       9.76084       47.7162       57.4771    
  11  0.275269      -1.29001      -9.23639       9.23639       48.2138       57.4501    
  12  0.546374     -0.604451      -4.32784       4.32784       48.6182       52.9461    
  13  0.738275E-01  -2.60602      -18.6590       18.6590       48.4295       67.0885    
  14  0.459460     -0.777704      -5.56832       5.56832       48.3105       53.8789    
  15  0.245891      -1.40287      -10.0445       10.0445       48.7468       58.7913    
  16  0.818144E-01  -2.50330      -17.9235       17.9235       47.8937       65.8172    
  17  0.791963     -0.233241      -1.67000       1.67000       49.9618       51.6318    
  18  0.652560     -0.426852      -3.05624       3.05624       48.0744       51.1306    
  19  0.743237     -0.296740      -2.12464       2.12464       47.2142       49.3388    
  20  0.146095      -1.92350      -13.7722       13.7722       47.8405       61.6127    
  21  0.747148     -0.291492      -2.08707       2.08707       48.2681       50.3552    
  22  0.935024E-01  -2.36977      -16.9674       16.9674       50.8673       67.8347    
  23  0.924202     -0.788243E-01 -0.564378      0.564378       47.2329       47.7972    
  24  0.193934      -1.64024      -11.7440       11.7440       47.8510       59.5951    
  25  0.112499      -2.18481      -15.6431       15.6431       49.0191       64.6622    
  26  0.609079     -0.495807      -3.54996       3.54996       47.8839       51.4339    
  27  0.387822     -0.947210      -6.78197       6.78197       48.8185       55.6005    
  28  0.151976      -1.88403      -13.4896       13.4896       47.1344       60.6240    
  29  0.820125     -0.198299      -1.41981       1.41981       49.5314       50.9512    
  30  0.100865      -2.29397      -16.4247       16.4247       48.8766       65.3014    
  31  0.246930      -1.39865      -10.0143       10.0143       47.1804       57.1946    
  32  0.101973      -2.28305      -16.3465       16.3465       48.2784       64.6249    
  33  0.389401     -0.943145      -6.75287       6.75287       47.8226       54.5755    
  34  0.573635     -0.555762      -3.97923       3.97923       47.6585       51.6377    
  35  0.730896E-01  -2.61607      -18.7309       18.7309       52.2522       70.9832    
  36  0.260104      -1.34667      -9.64210       9.64210       52.5955       62.2376    
  37  0.562102     -0.576073      -4.12465       4.12465       48.4120       52.5366    
  38  0.159056      -1.83850      -13.1636       13.1636       47.4819       60.6455    
  39  0.779134E-02  -4.85474      -34.7597       34.7597       48.0524       82.8121    
  40  0.693208     -0.366425      -2.62359       2.62359       47.9746       50.5982    
  41  0.600279     -0.510361      -3.65416       3.65416       48.6567       52.3109    
  42  0.419387     -0.868962      -6.22173       6.22173       51.6227       57.8444    
  43  0.952036     -0.491524E-01 -0.351929      0.351929       48.2589       48.6108    
  44  0.613955     -0.487834      -3.49286       3.49286       48.2399       51.7327    
  45  0.842752     -0.171082      -1.22494       1.22494       47.7477       48.9726    
  46  0.733219     -0.310311      -2.22181       2.22181       48.3863       50.6081    
  47  0.776088     -0.253489      -1.81497       1.81497       47.2545       49.0695    
  48  0.965215     -0.354047E-01 -0.253496      0.253496       48.2255       48.4790    
  49  0.487812     -0.717826      -5.13960       5.13960       48.4284       53.5680    
  50  0.864492     -0.145613      -1.04258       1.04258       48.0552       49.0978    
  51  0.334607      -1.09480      -7.83871       7.83871       47.7675       55.6062    
  52  0.267438      -1.31887      -9.44302       9.44302       47.7694       57.2124    
  53  0.333561      -1.09793      -7.86112       7.86112       48.2592       56.1203    
  54  0.593184     -0.522250      -3.73929       3.73929       47.7345       51.4738    
  55  0.832475     -0.183352      -1.31279       1.31279       48.3066       49.6194    
  56  0.642050     -0.443089      -3.17250       3.17250       48.3164       51.4889    
  57  0.799223     -0.224116      -1.60466       1.60466       49.0408       50.6454    
  58  0.184219      -1.69163      -12.1120       12.1120       49.5005       61.6125    
  59  0.478229     -0.737666      -5.28165       5.28165       48.0121       53.2938    
  60  0.604888     -0.502712      -3.59939       3.59939       48.8082       52.4076    
  61  0.575395     -0.552698      -3.95729       3.95729       47.7100       51.6673    
  62  0.325892E-01  -3.42377      -24.5140       24.5140       47.9426       72.4566    
  63  0.759877     -0.274599      -1.96612       1.96612       47.6508       49.6170    
  64  0.214378      -1.54002      -11.0264       11.0264       48.2507       59.2771    
  65  0.668091     -0.403331      -2.88783       2.88783       47.6468       50.5346    
  66  0.601122     -0.508958      -3.64411       3.64411       49.1624       52.8065    
  67  0.378138     -0.972496      -6.96302       6.96302       47.7893       54.7523    
  68  0.849119     -0.163556      -1.17105       1.17105       47.0527       48.2238    
  69  0.426509     -0.852121      -6.10115       6.10115       47.8653       53.9665    
  70  0.558114E-01  -2.88578      -20.6620       20.6620       47.7384       68.4004    
loop,thermsimp(1:2)       67   8.67037       1.24498    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201         49.12          0.84          1.12         23.85          0.46          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202         56.54          0.84          1.12         23.92          0.35          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    49.119        1.207     -1.817      3.121     -102.6      1.417    
                      0.3341      1.309     -99.70      3.673     0.1874E-01

                       2.204     -1.094      1.530      7305.      3647.    

                     -0.1844E-01  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6282.      459.3    

                       1.433     -5.817     -4.015     -8.497      6.734    

                      -14.72     -3.546      3781.      0.000     0.1235E+05



                       1686.     0.1363E+05 -4358.     0.1094E+05  4571.    

                       6291.     0.1883E-01 0.2004     0.1717E-01 0.1039    

                     -0.2486    -0.7492E-01 0.1971     0.1266     0.7422E-01



                     -0.4181    -0.7931      0.000     0.6888E-01-0.9237E-01

                      0.1717E-01 0.9455E-01-0.7116    -0.1542     0.2571E-01

                      0.6233E-01 0.4598E-02-0.6584     -1.194      7495.    



                      -1.097     -1.274     -2.237     -2.299    -0.3807    

                     -0.3252      8.924      8.676    -0.1965E+05 -4.000    

                     -0.5318     -2.166      9.309      8.881    -0.1908E+05



                      -4.000     0.4077    -0.4184      8.872      9.068    

                     -0.1908E+05 -7.000    -0.7248    -0.6423      9.038    

                       8.784    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       67
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       68
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      201     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -33.3832       33.3832       47.2329       80.6160    
   2  0.714357     -0.336373      -2.40841       2.40841       47.0527       49.4611    
   3  0.997096     -0.290808E-02 -0.208217E-01  0.208217E-01   48.2255       48.2463    
   4  0.905437     -0.993373E-01 -0.711250      0.711250       48.2589       48.9701    
   5  0.307060      -1.18071      -8.45384       8.45384       47.3977       55.8516    
   6  0.179061      -1.72003      -12.3153       12.3153       47.7477       60.0630    
   7  0.384312     -0.956301      -6.84707       6.84707       47.2545       54.1016    
   8  0.901101     -0.104138     -0.745626      0.745626       48.0552       48.8009    
   9  0.606170     -0.500594      -3.58423       3.58423       47.2142       50.7984    
  10  0.515234     -0.663133      -4.74800       4.74800       47.6508       52.3988    
  11  0.639447     -0.447152      -3.20158       3.20158       48.3066       51.5082    
  12  0.820429     -0.197928      -1.41715       1.41715       48.5919       50.0090    
  13  0.521739     -0.650587      -4.65817       4.65817       48.2681       52.9263    
  14  0.767979     -0.263993      -1.89018       1.89018       47.6468       49.5370    
  15  0.530366     -0.634187      -4.54075       4.54075       47.9746       52.5154    
  16  0.732471     -0.311332      -2.22912       2.22912       48.3863       50.6154    
  17  0.440461     -0.819933      -5.87068       5.87068       49.0408       54.9115    
  18  0.595715     -0.517993      -3.70880       3.70880       49.5314       53.2402    
  19  0.407958     -0.896592      -6.41955       6.41955       47.7426       54.1622    
  20  0.544683     -0.607550      -4.35003       4.35003       48.0744       52.4244    
  21  0.611386E-01  -2.79461      -20.0093       20.0093       47.8839       67.8932    
  22  0.135041      -2.00218      -14.3355       14.3355       47.7345       62.0700    
  23  0.547242     -0.602864      -4.31648       4.31648       48.3164       52.6329    
  24  0.214436      -1.53975      -11.0245       11.0245       49.9618       60.9863    
  25  0.340220      -1.07816      -7.71959       7.71959       47.6585       55.3781    
  26  0.270394      -1.30787      -9.36431       9.36431       47.7100       57.0743    
  27  0.605229     -0.502149      -3.59536       3.59536       48.2399       51.8352    
  28  0.630206     -0.461709      -3.30581       3.30581       48.6567       51.9626    
  29  0.942476     -0.592449E-01 -0.424190      0.424190       48.8082       49.2324    
  30  0.293125      -1.22716      -8.78639       8.78639       48.4120       57.1983    
  31  0.526210     -0.642056      -4.59709       4.59709       49.1624       53.7595    
  32  0.972201     -0.281927E-01 -0.201858      0.201858       48.6182       48.8201    
  33  0.570000     -0.562119      -4.02474       4.02474       48.0121       52.0369    
  34  0.752945     -0.283763      -2.03173       2.03173       48.4284       50.4602    
  35  0.333005      -1.09960      -7.87307       7.87307       48.3105       56.1836    
  36  0.430444     -0.842939      -6.03540       6.03540       47.8653       53.9007    
  37  0.106505      -2.23957      -16.0352       16.0352       47.8226       63.8578    
  38  0.327953      -1.11488      -7.98252       7.98252       47.7893       55.7718    
  39  0.586631     -0.533359      -3.81883       3.81883       48.8185       52.6373    
  40  0.563274     -0.573989      -4.10973       4.10973       47.7675       51.8772    
  41  0.802100     -0.220522      -1.57892       1.57892       47.1953       48.7742    
  42  0.594871     -0.519411      -3.71895       3.71895       48.2592       51.9782    
  43  0.816066     -0.203261      -1.45534       1.45534       47.1804       48.6357    
  44  0.170795E-01  -4.06987      -29.1401       29.1401       47.7694       76.9095    
  45  0.554958     -0.588864      -4.21623       4.21623       48.7895       53.0058    
  46  0.674023     -0.394492      -2.82454       2.82454       48.2138       51.0383    
  47  0.371758     -0.989512      -7.08486       7.08486       47.7162       54.8011    
  48  0.309440      -1.17299      -8.39856       8.39856       51.6227       60.0213    
  49  0.182337      -1.70190      -12.1855       12.1855       48.7468       60.9323    
  50  0.443504     -0.813049      -5.82139       5.82139       48.2507       54.0720    
  51  0.407824     -0.896918      -6.42189       6.42189       47.8510       54.2729    
  52  0.140254      -1.96430      -14.0643       14.0643       48.1762       62.2405    
  53  0.801043     -0.221840      -1.58836       1.58836       47.7233       49.3116    
  54  0.922923     -0.802099E-01 -0.574299      0.574299       47.1344       47.7087    
  55  0.982391     -0.177663E-01 -0.127206      0.127206       47.4819       47.6091    
  56  0.830509     -0.185717      -1.32972       1.32972       48.2724       49.6021    
  57  0.459056     -0.778583      -5.57462       5.57462       49.5005       55.0751    
  58  0.918078     -0.854734E-01 -0.611985      0.611985       47.8405       48.4525    
  59  0.858811E-01  -2.45479      -17.5762       17.5762       52.5955       70.1717    
  60  0.642813E-01  -2.74449      -19.6504       19.6504       48.2784       67.9288    
  61  0.328642      -1.11279      -7.96750       7.96750       49.0191       56.9866    
  62  0.238578      -1.43306      -10.2606       10.2606       48.8766       59.1373    
  63  0.183249      -1.69691      -12.1498       12.1498       47.8937       60.0434    
  64  0.575307     -0.552852      -3.95839       3.95839       48.4295       52.3879    
  65  0.509614     -0.674103      -4.82654       4.82654       50.8673       55.6938    
  66  0.528199     -0.638283      -4.57007       4.57007       47.7384       52.3084    
  67  0.114575      -2.16652      -15.5122       15.5122       48.3329       63.8451    
  68  0.227493      -1.48064      -10.6013       10.6013       52.2522       62.8535    
  69  0.451305     -0.795613      -5.69655       5.69655       47.9426       53.6391    
  70  0.873604     -0.135128     -0.967507      0.967507       49.1186       50.0861    
loop,thermsimp(1:2)       68   33.3832       2.40841    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203         48.13          0.84          1.12         23.82          0.48          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    204         49.26          0.84          1.12         23.84          0.44          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       68
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       69
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      203     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -4.66767       4.66767       47.4819       52.1496    
   2  0.554375     -0.589913      -4.22375       4.22375       47.1344       51.3582    
   3  0.404373     -0.905418      -6.48275       6.48275       48.2255       54.7082    
   4  0.632877     -0.457478      -3.27552       3.27552       47.8405       51.1160    
   5  0.395261     -0.928209      -6.64593       6.64593       47.1804       53.8263    
   6  0.715068     -0.335378      -2.40129       2.40129       47.1953       49.5966    
   7  0.918313     -0.852174E-01 -0.610152      0.610152       48.0552       48.6654    
   8  0.529514E-01  -2.93838      -21.0387       21.0387       48.6182       69.6569    
   9  0.284219      -1.25801      -9.00729       9.00729       48.2589       57.2662    
  10  0.809402     -0.211460      -1.51404       1.51404       48.8082       50.3222    
  11  0.604758     -0.502928      -3.60094       3.60094       47.7233       51.3242    
  12  0.624772     -0.470369      -3.36782       3.36782       47.0527       50.4205    
  13  0.622683     -0.473718      -3.39180       3.39180       47.6468       51.0386    
  14  0.491656     -0.709976      -5.08339       5.08339       48.2724       53.3558    
  15  0.823484     -0.194211      -1.39054       1.39054       48.5919       49.9824    
  16  0.185629E-01  -3.98659      -28.5438       28.5438       49.1186       77.6624    
  17  0.911253     -0.929346E-01 -0.665407      0.665407       48.4284       49.0938    
  18  0.825116     -0.192231      -1.37637       1.37637       48.3863       49.7626    
  19  0.902913     -0.102129     -0.731242      0.731242       47.2142       47.9454    
  20  0.869925     -0.139348     -0.997727      0.997727       48.2138       49.2115    
  21  0.135445      -1.99919      -14.3141       14.3141       48.3066       62.6207    
  22  0.516840     -0.660022      -4.72573       4.72573       48.2399       52.9656    
  23  0.127583      -2.05899      -14.7423       14.7423       47.7675       62.5097    
  24  0.237062E-01  -3.74202      -26.7927       26.7927       48.6567       75.4494    
  25  0.456233     -0.784753      -5.61879       5.61879       48.2592       53.8780    
  26  0.547397     -0.602581      -4.31445       4.31445       48.0121       52.3266    
  27  0.231746E-02  -6.06728      -43.4414       43.4414       47.7384       91.1798    
  28  0.467213     -0.760969      -5.44850       5.44850       48.4295       53.8780    
  29  0.397333     -0.922981      -6.60850       6.60850       47.6508       54.2593    
  30  0.291343      -1.23325      -8.83003       8.83003       48.0744       56.9044    
  31  0.964262     -0.363922E-01 -0.260566      0.260566       47.9746       48.2352    
  32  0.260485      -1.34521      -9.63163       9.63163       48.3164       57.9480    
  33  0.868574     -0.140902      -1.00885       1.00885       48.8185       49.8273    
  34  0.832573     -0.183235      -1.31195       1.31195       48.2681       49.5801    
  35  0.240383      -1.42552      -10.2067       10.2067       48.7895       58.9962    
  36  0.878342     -0.129719     -0.928781      0.928781       49.5314       50.4602    
  37  0.168707      -1.77959      -12.7418       12.7418       47.9426       60.6844    
  38  0.348015      -1.05551      -7.55740       7.55740       49.1624       56.7198    
  39  0.846224     -0.166971      -1.19551       1.19551       47.8653       49.0609    
  40  0.842580     -0.171286      -1.22640       1.22640       48.2507       49.4771    
  41  0.230401      -1.46794      -10.5103       10.5103       47.2545       57.7649    
  42  0.441962     -0.816531      -5.84632       5.84632       47.7426       53.5890    
  43  0.772036     -0.258724      -1.85245       1.85245       47.8510       49.7035    
  44  0.970063     -0.303946E-01 -0.217624      0.217624       47.7162       47.9339    
  45  0.610535     -0.493419      -3.53286       3.53286       49.0408       52.5736    
  46  0.548201     -0.601114      -4.30395       4.30395       49.5005       53.8045    
  47  0.322533      -1.13155      -8.10184       8.10184       47.6585       55.7603    
  48  0.194318E-01  -3.94084      -28.2162       28.2162       50.8673       79.0835    
  49  0.219930      -1.51445      -10.8434       10.8434       47.7893       58.6326    
  50  0.538995E-01  -2.92063      -20.9116       20.9116       47.3977       68.3093    
  51  0.189941      -1.66104      -11.8930       11.8930       48.3105       60.2035    
  52  0.339787      -1.07944      -7.72872       7.72872       49.0191       56.7479    
  53  0.783417     -0.244091      -1.74768       1.74768       47.7100       49.4577    
  54  0.347888      -1.05587      -7.56000       7.56000       48.4120       55.9720    
  55  0.511342     -0.670716      -4.80230       4.80230       48.8766       53.6789    
  56  0.656791     -0.420389      -3.00997       3.00997       51.6227       54.6327    
  57  0.433072E-01  -3.13944      -22.4782       22.4782       47.8937       70.3719    
  58  0.940019     -0.618557E-01 -0.442884      0.442884       47.7477       48.1905    
  59  0.560131     -0.579584      -4.14979       4.14979       48.7468       52.8966    
  60  0.335604      -1.09182      -7.81741       7.81741       49.9618       57.7792    
  61  0.677192     -0.389801      -2.79096       2.79096       47.7345       50.5255    
  62  0.166447      -1.79308      -12.8383       12.8383       48.1762       61.0146    
  63  0.966787     -0.337766E-01 -0.241839      0.241839       52.2522       52.4941    
  64  0.501486     -0.690179      -4.94165       4.94165       48.3329       53.2745    
  65  0.339741      -1.07957      -7.72968       7.72968       47.8226       55.5523    
  66  0.920721     -0.825986E-01 -0.591402      0.591402       47.8839       48.4753    
  67  0.215901      -1.53293      -10.9757       10.9757       48.2784       59.2541    
  68  0.259645      -1.34844      -9.65478       9.65478       52.5955       62.2502    
  69  0.927059     -0.757381E-01 -0.542281      0.542281       47.7694       48.3117    
  70  0.766870E-02  -4.87061      -34.8733       34.8733       48.1302       83.0035    
loop,thermsimp(1:2)       69   4.66767       4.22375    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205         48.38          0.84          1.12         23.85          0.48          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    206         52.82          0.83          1.12         23.82          0.52          0.04         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.38
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       69
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       70
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      205     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -10.1534       10.1534       47.7162       57.8697    
   2  0.384023     -0.957054      -6.85246       6.85246       47.2142       54.0666    
   3  0.672379     -0.396933      -2.84202       2.84202       47.7477       50.5897    
   4  0.204591      -1.58674      -11.3610       11.3610       47.9746       59.3356    
   5  0.145151      -1.92998      -13.8186       13.8186       47.7694       61.5880    
   6  0.235757      -1.44495      -10.3458       10.3458       47.8839       58.2297    
   7  0.882595     -0.124889     -0.894199      0.894199       48.0552       48.9494    
   8  0.215562      -1.53451      -10.9870       10.9870       47.8653       58.8523    
   9  0.248905      -1.39068      -9.95722       9.95722       48.4284       58.3857    
  10  0.695481     -0.363152      -2.60015       2.60015       48.2138       50.8139    
  11  0.515786     -0.662063      -4.74034       4.74034       47.7100       52.4504    
  12  0.956817     -0.441428E-01 -0.316060      0.316060       48.2507       48.5667    
  13  0.256477      -1.36072      -9.74265       9.74265       48.2681       58.0108    
  14  0.870409     -0.138792     -0.993744      0.993744       47.1953       48.1890    
  15  0.296335      -1.21627      -8.70840       8.70840       47.8510       56.5594    
  16  0.563087     -0.574322      -4.11212       4.11212       48.3863       52.4984    
  17  0.860973     -0.149692      -1.07179       1.07179       48.8185       49.8903    
  18  0.336353      -1.08959      -7.80143       7.80143       48.5919       56.3933    
  19  0.432238     -0.838780      -6.00562       6.00562       48.8082       54.8138    
  20  0.411587     -0.887734      -6.35613       6.35613       47.0527       53.4088    
  21  0.685679     -0.377346      -2.70178       2.70178       49.5314       52.2332    
  22  0.178038E-01  -4.02835      -28.8428       28.8428       47.7345       76.5773    
  23  0.330516      -1.10710      -7.92679       7.92679       47.6468       55.5736    
  24  0.987115     -0.129685E-01 -0.928536E-01  0.928536E-01   47.8405       47.9334    
  25  0.702947     -0.352474      -2.52370       2.52370       47.7233       50.2470    
  26  0.159040      -1.83860      -13.1643       13.1643       47.1344       60.2987    
  27  0.329714      -1.10953      -7.94419       7.94419       47.4819       55.4261    
  28  0.542452     -0.611656      -4.37943       4.37943       48.0121       52.3915    
  29  0.484074     -0.725518      -5.19468       5.19468       52.2522       57.4469    
  30  0.574330     -0.554551      -3.97056       3.97056       49.0408       53.0113    
  31  0.987944     -0.121288E-01 -0.868419E-01  0.868419E-01   48.7468       48.8336    
  32  0.565195E-01  -2.87317      -20.5718       20.5718       48.2399       68.8116    
  33  0.662626     -0.411545      -2.94664       2.94664       48.3329       51.2795    
  34  0.462195     -0.771769      -5.52583       5.52583       48.2724       53.7982    
  35  0.413957     -0.881994      -6.31503       6.31503       47.7426       54.0577    
  36  0.627825     -0.465493      -3.33291       3.33291       48.8766       52.2096    
  37  0.373783E-01  -3.28667      -23.5324       23.5324       49.5005       73.0329    
  38  0.318481      -1.14419      -8.19236       8.19236       47.1804       55.3727    
  39  0.193037      -1.64487      -11.7772       11.7772       48.4295       60.2067    
  40  0.246573      -1.40010      -10.0246       10.0246       48.2592       58.2838    
  41  0.913643     -0.903152E-01 -0.646652      0.646652       47.6508       48.2975    
  42  0.593287     -0.522077      -3.73804       3.73804       51.6227       55.3607    
  43  0.323913      -1.12728      -8.07126       8.07126       48.2255       56.2968    
  44  0.270579E-01  -3.60978      -25.8458       25.8458       47.8226       73.6684    
  45  0.684823     -0.378595      -2.71072       2.71072       47.6585       50.3692    
  46  0.279340      -1.27532      -9.13126       9.13126       48.4120       57.5432    
  47  0.285511      -1.25348      -8.97483       8.97483       49.1624       58.1372    
  48  0.361874      -1.01646      -7.27779       7.27779       49.0191       56.2969    
  49  0.779291     -0.249370      -1.78548       1.78548       48.0744       49.8598    
  50  0.590933     -0.526053      -3.76652       3.76652       48.2589       52.0254    
  51  0.493821E-01  -3.00817      -21.5383       21.5383       47.2545       68.7928    
  52  0.736348     -0.306053      -2.19132       2.19132       49.9618       52.1531    
  53  0.300670      -1.20174      -8.60440       8.60440       48.3164       56.9208    
  54  0.329072      -1.11148      -7.95812       7.95812       47.7893       55.7474    
  55  0.238483      -1.43346      -10.2635       10.2635       48.7895       59.0530    
  56  0.296796      -1.21471      -8.69726       8.69726       48.2784       56.9756    
  57  0.878745     -0.129261     -0.925502      0.925502       48.3105       49.2360    
  58  0.493874     -0.705475      -5.05117       5.05117       47.9426       52.9937    
  59  0.112522      -2.18461      -15.6417       15.6417       48.1762       63.8179    
  60  0.642649     -0.442156      -3.16582       3.16582       52.5955       55.7613    
  61  0.688378     -0.373417      -2.67365       2.67365       47.7675       50.4411    
  62  0.879214     -0.128727     -0.921680      0.921680       48.3066       49.2283    
  63  0.621151E-01  -2.77877      -19.8958       19.8958       47.3977       67.2935    
  64  0.270748      -1.30657      -9.35495       9.35495       48.6182       57.9732    
  65  0.871636     -0.137384     -0.983661      0.983661       47.8937       48.8773    
  66  0.188105      -1.67075      -11.9625       11.9625       48.6567       60.6193    
  67  0.394507     -0.930118      -6.65960       6.65960       49.1186       55.7782    
  68  0.532895     -0.629431      -4.50670       4.50670       50.8673       55.3740    
  69  0.925318     -0.776179E-01 -0.555740      0.555740       48.1302       48.6859    
  70  0.306237      -1.18340      -8.47305       8.47305       48.3828       56.8558    
loop,thermsimp(1:2)       70   10.1534       6.85246    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207         47.91          0.84          1.12         23.84          0.43          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    208         49.58          0.82          1.11         23.82          0.58          0.04         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       70
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       71
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      207     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344      -1.50605       1.50605       47.8405       49.3466    
   2  0.601567     -0.508218      -3.63881       3.63881       47.1953       50.8341    
   3  0.190401      -1.65862      -11.8757       11.8757       47.6508       59.5265    
   4  0.827263     -0.189632      -1.35776       1.35776       48.2507       49.6084    
   5  0.581677     -0.541840      -3.87955       3.87955       48.1302       52.0097    
   6  0.680336     -0.385169      -2.75779       2.75779       48.7468       51.5046    
   7  0.641383     -0.444128      -3.17994       3.17994       47.8937       51.0736    
   8  0.593931     -0.520992      -3.73028       3.73028       48.0552       51.7855    
   9  0.326400      -1.11963      -8.01651       8.01651       48.3066       56.3231    
  10  0.964323     -0.363286E-01 -0.260111      0.260111       48.3105       48.5706    
  11  0.481751     -0.730328      -5.22911       5.22911       48.0744       53.3035    
  12  0.230624E-01  -3.76955      -26.9898       26.9898       48.8185       75.8083    
  13  0.214859      -1.53777      -11.0104       11.0104       47.7233       58.7336    
  14  0.325804      -1.12146      -8.02959       8.02959       47.6585       55.6881    
  15  0.668745     -0.402353      -2.88083       2.88083       47.7675       50.6483    
  16  0.803263     -0.219073      -1.56855       1.56855       47.7477       49.3162    
  17  0.465531     -0.764577      -5.47433       5.47433       48.2138       53.6881    
  18  0.589796     -0.527978      -3.78030       3.78030       48.3329       52.1132    
  19  0.783335     -0.244195      -1.74843       1.74843       48.2589       50.0073    
  20  0.937099     -0.649659E-01 -0.465153      0.465153       49.9618       50.4270    
  21  0.504081     -0.685019      -4.90470       4.90470       48.8766       53.7813    
  22  0.368431E-01  -3.30109      -23.6356       23.6356       49.5314       73.1670    
  23  0.462712     -0.770651      -5.51782       5.51782       48.0121       53.5299    
  24  0.172447      -1.75767      -12.5848       12.5848       47.7100       60.2948    
  25  0.361979      -1.01617      -7.27573       7.27573       48.3863       55.6620    
  26  0.616189     -0.484202      -3.46686       3.46686       47.9426       51.4094    
  27  0.495582     -0.702023      -5.02645       5.02645       49.0408       54.0672    
  28  0.492859     -0.707532      -5.06590       5.06590       47.0527       52.1186    
  29  0.189027      -1.66586      -11.9275       11.9275       48.2724       60.1999    
  30  0.336237      -1.08994      -7.80391       7.80391       47.7426       55.5465    
  31  0.997382     -0.262184E-02 -0.187722E-01  0.187722E-01   47.2142       47.2329    
  32  0.629287     -0.463168      -3.31626       3.31626       48.8082       52.1244    
  33  0.226178      -1.48644      -10.6428       10.6428       51.6227       62.2655    
  34  0.522315     -0.649483      -4.65027       4.65027       47.1804       51.8306    
  35  0.238835E-02  -6.03715      -43.2257       43.2257       50.8673       94.0930    
  36  0.123092E-01  -4.39741      -31.4852       31.4852       47.4819       78.9671    
  37  0.488141     -0.717152      -5.13477       5.13477       47.6468       52.7816    
  38  0.925188     -0.777584E-01 -0.556746      0.556746       47.7893       48.3460    
  39  0.676413     -0.390952      -2.79919       2.79919       52.5955       55.3947    
  40  0.638827     -0.448121      -3.20853       3.20853       49.1186       52.3271    
  41  0.789998     -0.235725      -1.68778       1.68778       48.2255       49.9133    
  42  0.453703E-01  -3.09290      -22.1450       22.1450       49.0191       71.1641    
  43  0.866893     -0.142840      -1.02273       1.02273       48.5919       49.6146    
  44  0.122493E-01  -4.40228      -31.5201       31.5201       47.8510       79.3712    
  45  0.172311      -1.75846      -12.5905       12.5905       48.3828       60.9732    
  46  0.899580     -0.105827     -0.757714      0.757714       48.3164       49.0741    
  47  0.857845     -0.153332      -1.09785       1.09785       48.2784       49.3762    
  48  0.176813      -1.73266      -12.4058       12.4058       52.2522       64.6580    
  49  0.795271E-01  -2.53166      -18.1265       18.1265       48.4120       66.5385    
  50  0.461368     -0.773559      -5.53865       5.53865       47.7162       53.2549    
  51  0.727625     -0.317970      -2.27665       2.27665       48.6182       50.8949    
  52  0.106879      -2.23606      -16.0101       16.0101       48.2681       64.2782    
  53  0.169411      -1.77543      -12.7120       12.7120       49.1624       61.8744    
  54  0.150923      -1.89099      -13.5394       13.5394       47.8839       61.4233    
  55  0.970144     -0.303104E-01 -0.217021      0.217021       48.2592       48.4762    
  56  0.819386     -0.199200      -1.42626       1.42626       48.4284       49.8547    
  57  0.855509     -0.156059      -1.11738       1.11738       47.8653       48.9827    
  58  0.248182      -1.39359      -9.97805       9.97805       48.7895       58.7676    
  59  0.632181     -0.458580      -3.28341       3.28341       47.9746       51.2580    
  60  0.626090     -0.468262      -3.35273       3.35273       48.4295       51.7822    
  61  0.122722      -2.09783      -15.0204       15.0204       47.1344       62.1548    
  62  0.656077     -0.421477      -3.01775       3.01775       48.6567       51.6745    
  63  0.811645     -0.208692      -1.49423       1.49423       47.7694       49.2636    
  64  0.241419E-05  -12.9341      -92.6079       92.6079       48.1762       140.784    
  65  0.450747     -0.796849      -5.70540       5.70540       47.3977       53.1031    
  66  0.299124      -1.20690      -8.64133       8.64133       47.2545       55.8958    
  67  0.156254      -1.85627      -13.2908       13.2908       48.2399       61.5307    
  68  0.323711      -1.12790      -8.07573       8.07573       49.5005       57.5763    
  69  0.447335     -0.804447      -5.75980       5.75980       47.8226       53.5824    
  70  0.457702     -0.781538      -5.59577       5.59577       47.9061       53.5019    
loop,thermsimp(1:2)       71   1.50605       3.63881    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209         47.73          0.84          1.12         23.84          0.43          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    210         48.44          0.83          1.11         23.79          0.68          0.04         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    7.15995               208
loop is:       71
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    7.15995               208
loop is:       72
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    3.57998               277

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      209     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883     -0.497197      0.497197       47.2142       47.7114    
   2  0.470451     -0.754063      -2.69953       2.69953       47.7893       50.4888    
   3  0.615627     -0.485114      -1.73670       1.73670       48.2592       49.9959    
   4  0.291899      -1.23135      -4.40819       4.40819       48.3105       52.7187    
   5  0.584822     -0.536448      -1.92047       1.92047       47.8653       49.7858    
   6  0.681731     -0.383120      -1.37156       1.37156       48.3164       49.6879    
   7  0.680149     -0.385444      -1.37988       1.37988       47.7694       49.1493    
   8  0.560478     -0.578966      -2.07268       2.07268       47.7477       49.8204    
   9  0.392299     -0.935730      -3.34989       3.34989       47.8405       51.1904    
  10  0.586793     -0.533083      -1.90842       1.90842       48.2784       50.1868    
  11  0.461418     -0.773452      -2.76894       2.76894       48.2507       51.0196    
  12  0.142886      -1.94571      -6.96560       6.96560       48.5919       55.5575    
  13  0.960325     -0.404831E-01 -0.144928      0.144928       48.4284       48.5734    
  14  0.547176     -0.602984      -2.15867       2.15867       48.2255       50.3842    
  15  0.817596     -0.201386     -0.720958      0.720958       48.2589       48.9798    
  16  0.184065      -1.69247      -6.05899       6.05899       49.9618       56.0208    
  17  0.763954     -0.269247     -0.963898      0.963898       47.7675       48.7314    
  18  0.740640     -0.300240      -1.07485       1.07485       47.1953       48.2701    
  19  0.257299      -1.35751      -4.85987       4.85987       48.6182       53.4781    
  20  0.274950      -1.29117      -4.62235       4.62235       47.8937       52.5160    
  21  0.850599     -0.161814     -0.579291      0.579291       47.9746       48.5539    
  22  0.265651      -1.32557      -4.74552       4.74552       47.9426       52.6881    
  23  0.388810     -0.944665      -3.38188       3.38188       48.7468       52.1287    
  24  0.921262     -0.820106E-01 -0.293596      0.293596       48.6567       48.9503    
  25  0.622168     -0.474545      -1.69886       1.69886       48.4295       50.1283    
  26  0.831499     -0.184526     -0.660597      0.660597       48.0552       48.7158    
  27  0.777776     -0.251317     -0.899708      0.899708       47.1804       48.0801    
  28  0.519638     -0.654624      -2.34354       2.34354       48.1302       50.4737    
  29  0.343480      -1.06863      -3.82566       3.82566       48.3329       52.1585    
  30  0.379182     -0.969738      -3.47164       3.47164       47.0527       50.5243    
  31  0.509964     -0.673415      -2.41081       2.41081       48.8082       51.2190    
  32  0.457294E-01  -3.08501      -11.0443       11.0443       49.1186       60.1629    
  33  0.952238     -0.489400E-01 -0.175204      0.175204       47.6468       47.8220    
  34  0.198116      -1.61890      -5.79563       5.79563       47.3977       53.1933    
  35  0.863922     -0.146273     -0.523655      0.523655       47.7162       48.2399    
  36  0.765944     -0.266646     -0.954587      0.954587       48.0744       49.0289    
  37  0.849389     -0.163238     -0.584389      0.584389       47.9061       48.4905    
  38  0.488339     -0.716745      -2.56593       2.56593       48.0121       50.5780    
  39  0.969632     -0.308388E-01 -0.110402      0.110402       47.8226       47.9330    
  40  0.971690     -0.287184E-01 -0.102811      0.102811       48.2138       48.3166    
  41  0.690522     -0.370307      -1.32569       1.32569       48.8766       50.2023    
  42  0.266028      -1.32415      -4.74044       4.74044       49.0408       53.7812    
  43  0.581296     -0.542495      -1.94212       1.94212       52.5955       54.5376    
  44  0.636654     -0.451529      -1.61646       1.61646       47.7426       49.3591    
  45  0.947680     -0.537383E-01 -0.192382      0.192382       48.3863       48.5786    
  46  0.792806     -0.232176     -0.831185      0.831185       47.6585       48.4897    
  47  0.420588     -0.866101      -3.10062       3.10062       47.2545       50.3551    
  48  0.780043     -0.248407     -0.889290      0.889290       48.3066       49.1959    
  49  0.834700E-01  -2.48327      -8.89004       8.89004       49.5005       58.3906    
  50  0.707823     -0.345562      -1.23710       1.23710       47.7233       48.9604    
  51  0.836500     -0.178529     -0.639130      0.639130       48.7895       49.4287    
  52  0.111614      -2.19271      -7.84983       7.84983       47.6508       55.5007    
  53  0.690314     -0.370608      -1.32677       1.32677       48.2724       49.5992    
  54  0.200139      -1.60874      -5.75926       5.75926       47.7100       53.4693    
  55  0.182543E-01  -4.00336      -14.3319       14.3319       48.3828       62.7147    
  56  0.248611      -1.39187      -4.98285       4.98285       47.8839       52.8668    
  57  0.951106     -0.501293E-01 -0.179462      0.179462       48.2399       48.4193    
  58  0.576942     -0.550013      -1.96903       1.96903       49.1624       51.1314    
  59  0.335384      -1.09248      -3.91105       3.91105       47.1344       51.0455    
  60  0.137719E-01  -4.28512      -15.3406       15.3406       51.6227       66.9633    
  61  0.839758     -0.174642     -0.625214      0.625214       48.2681       48.8933    
  62  0.324640      -1.12504      -4.02761       4.02761       52.2522       56.2799    
  63  0.758550     -0.276346     -0.989312      0.989312       48.4120       49.4013    
  64  0.704737     -0.349931      -1.25274       1.25274       49.0191       50.2719    
  65  0.848812     -0.163918     -0.586822      0.586822       49.5314       50.1182    
  66  0.881053     -0.126637     -0.453357      0.453357       48.8185       49.2718    
  67  0.191937      -1.65059      -5.90907       5.90907       47.4819       53.3910    
  68  0.646624     -0.435990      -1.56083       1.56083       47.8510       49.4119    
  69  0.424145     -0.857680      -3.07047       3.07047       50.8673       53.9377    
  70  0.760934     -0.273209     -0.978082      0.978082       47.7303       48.7084    
loop,thermsimp(1:2)       72  0.497197       2.69953    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211         48.35          0.84          1.12         23.78          0.47          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212         50.05          0.84          1.11         23.81          0.50          0.04         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       72
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       73
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      211     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528      -1.06872       1.06872       47.2142       48.2829    
   2  0.823468     -0.194230     -0.695340      0.695340       47.6468       48.3421    
   3  0.352913      -1.04153      -3.72867       3.72867       47.8226       51.5513    
   4  0.268511      -1.31486      -4.70718       4.70718       47.1804       51.8875    
   5  0.137541      -1.98383      -7.10208       7.10208       47.7162       54.8183    
   6  0.953738     -0.473661E-01 -0.169570      0.169570       47.1953       47.3649    
   7  0.366602      -1.00348      -3.59243       3.59243       48.2138       51.8062    
   8  0.861530     -0.149046     -0.533580      0.533580       48.2399       48.7734    
   9  0.190086      -1.66028      -5.94375       5.94375       47.6585       53.6022    
  10  0.931621     -0.708293E-01 -0.253567      0.253567       47.9061       48.1597    
  11  0.135562      -1.99833      -7.15397       7.15397       47.9746       55.1286    
  12  0.577052     -0.549824      -1.96836       1.96836       48.4284       50.3968    
  13  0.937511     -0.645266E-01 -0.231004      0.231004       48.3863       48.6173    
  14  0.836727     -0.178258     -0.638158      0.638158       47.7303       48.3685    
  15  0.124731      -2.08159      -7.45205       7.45205       48.0552       55.5073    
  16  0.830758     -0.185417     -0.663789      0.663789       47.7675       48.4313    
  17  0.925849     -0.770442E-01 -0.275816      0.275816       48.2681       48.5439    
  18  0.945668     -0.558633E-01 -0.199989      0.199989       48.6567       48.8567    
  19  0.700762     -0.355587      -1.27299       1.27299       47.7233       48.9962    
  20  0.585168E-01  -2.83844      -10.1615       10.1615       48.2589       58.4204    
  21  0.241985      -1.41888      -5.07956       5.07956       48.0744       53.1539    
  22  0.426115     -0.853047      -3.05389       3.05389       47.7694       50.8233    
  23  0.730656     -0.313813      -1.12344       1.12344       48.3066       49.4300    
  24  0.227460      -1.48078      -5.30116       5.30116       48.8185       54.1197    
  25  0.824070     -0.193500     -0.692724      0.692724       47.7426       48.4354    
  26  0.912829     -0.912064E-01 -0.326517      0.326517       48.4120       48.7385    
  27  0.130860      -2.03363      -7.28034       7.28034       47.8510       55.1314    
  28  0.126999      -2.06358      -7.38755       7.38755       48.7895       56.1771    
  29  0.394828E-01  -3.23189      -11.5701       11.5701       48.2724       59.8425    
  30  0.927793     -0.749466E-01 -0.268307      0.268307       48.3164       48.5847    
  31  0.161762      -1.82163      -6.52139       6.52139       47.8653       54.3867    
  32  0.510374     -0.672611      -2.40793       2.40793       47.7477       50.1556    
  33  0.930607     -0.719186E-01 -0.257467      0.257467       48.2592       48.5167    
  34  0.825283E-01  -2.49461      -8.93065       8.93065       49.5314       58.4620    
  35  0.569143     -0.563624      -2.01776       2.01776       48.4295       50.4472    
  36  0.732951     -0.310676      -1.11221       1.11221       48.2784       49.3906    
  37  0.554950     -0.588877      -2.10817       2.10817       48.8766       50.9848    
  38  0.614368     -0.487160      -1.74402       1.74402       49.0191       50.7632    
  39  0.127889      -2.05659      -7.36256       7.36256       47.2545       54.6171    
  40  0.510007     -0.673330      -2.41050       2.41050       48.2255       50.6360    
  41  0.206107      -1.57936      -5.65407       5.65407       48.1302       53.7842    
  42  0.812962E-01  -2.50966      -8.98451       8.98451       47.7893       56.7738    
  43  0.711913     -0.339799      -1.21647       1.21647       47.0527       48.2692    
  44  0.649899     -0.430939      -1.54275       1.54275       48.0121       49.5549    
  45  0.102708      -2.27587      -8.14755       8.14755       48.2507       56.3982    
  46  0.152702      -1.87927      -6.72773       6.72773       47.1344       53.8622    
  47  0.827734     -0.189064     -0.676844      0.676844       49.1624       49.8392    
  48  0.558329     -0.582808      -2.08644       2.08644       47.8405       49.9269    
  49  0.174746      -1.74442      -6.24499       6.24499       48.8082       55.0532    
  50  0.107247      -2.23262      -7.99274       7.99274       48.7468       56.7395    
  51  0.988891     -0.111711E-01 -0.399922E-01  0.399922E-01   48.3329       48.3729    
  52  0.388651     -0.945075      -3.38334       3.38334       47.8937       51.2770    
  53  0.580190     -0.544399      -1.94893       1.94893       47.9426       49.8915    
  54  0.519409E-01  -2.95765      -10.5883       10.5883       48.3105       58.8988    
  55  0.418368     -0.871393      -3.11957       3.11957       47.8839       51.0035    
  56  0.435950     -0.830228      -2.97220       2.97220       47.3977       50.3699    
  57  0.226091      -1.48682      -5.32277       5.32277       47.4819       52.8047    
  58  0.371316     -0.990702      -3.54669       3.54669       47.7100       51.2567    
  59  0.113770      -2.17358      -7.78136       7.78136       48.6182       56.3996    
  60  0.335886      -1.09098      -3.90570       3.90570       49.0408       52.9465    
  61  0.733883     -0.309406      -1.10767       1.10767       50.8673       51.9749    
  62  0.127704      -2.05804      -7.36775       7.36775       52.5955       59.9632    
  63  0.205687      -1.58140      -5.66138       5.66138       47.6508       53.3122    
  64  0.315213      -1.15451      -4.13311       4.13311       48.5919       52.7250    
  65  0.329345      -1.11065      -3.97610       3.97610       49.9618       53.9379    
  66  0.193213      -1.64396      -5.88534       5.88534       52.2522       58.1376    
  67  0.593921     -0.521008      -1.86520       1.86520       49.5005       51.3657    
  68  0.128520      -2.05167      -7.34493       7.34493       49.1186       56.4635    
  69  0.201122      -1.60384      -5.74172       5.74172       48.3828       54.1245    
  70  0.699786E-01  -2.65957      -9.52118       9.52118       48.3547       57.8759    
loop,thermsimp(1:2)       73   1.06872      0.695340    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213         48.37          0.84          1.11         23.82          0.48          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    214         50.33          0.83          1.11         23.81          0.55          0.04         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.37
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       73
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       74
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      213     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175     -0.641442      0.641442       47.1953       47.8367    
   2  0.439366     -0.822423      -2.94425       2.94425       47.9061       50.8504    
   3  0.603094     -0.505682      -1.81033       1.81033       47.0527       48.8630    
   4  0.695854E-01  -2.66520      -9.54135       9.54135       47.2142       56.7555    
   5  0.273021      -1.29821      -4.64755       4.64755       47.6468       52.2944    
   6  0.418319     -0.871511      -3.11999       3.11999       47.7303       50.8503    
   7  0.688437     -0.373331      -1.33652       1.33652       48.3329       49.6694    
   8  0.400930     -0.913969      -3.27199       3.27199       47.7675       51.0395    
   9  0.569492     -0.563010      -2.01556       2.01556       47.7426       49.7582    
  10  0.812441     -0.207712     -0.743603      0.743603       48.2592       49.0028    
  11  0.222094      -1.50465      -5.38662       5.38662       48.2681       53.6547    
  12  0.695761     -0.362749      -1.29863       1.29863       48.3164       49.6150    
  13  0.909536E-01  -2.39741      -8.58265       8.58265       48.3863       56.9689    
  14  0.297191      -1.21338      -4.34387       4.34387       48.4120       52.7558    
  15  0.806729     -0.214767     -0.768862      0.768862       48.2399       49.0087    
  16  0.407021     -0.898891      -3.21801       3.21801       48.6567       51.8747    
  17  0.520426     -0.653107      -2.33811       2.33811       47.7233       50.0614    
  18  0.826852     -0.190129     -0.680658      0.680658       48.2784       48.9590    
  19  0.729268     -0.315714      -1.13025       1.13025       48.3066       49.4368    
  20  0.344086      -1.06687      -3.81935       3.81935       48.0121       51.8315    
  21  0.280849      -1.26994      -4.54635       4.54635       49.1624       53.7087    
  22  0.301244E-01  -3.50242      -12.5386       12.5386       47.9426       60.4812    
  23  0.503253     -0.686663      -2.45824       2.45824       47.8405       50.2987    
  24  0.549007     -0.599644      -2.14671       2.14671       47.7477       49.8944    
  25  0.814230     -0.205513     -0.735730      0.735730       47.3977       48.1334    
  26  0.641489     -0.443963      -1.58938       1.58938       48.4284       50.0178    
  27  0.248696      -1.39152      -4.98162       4.98162       48.4295       53.4111    
  28  0.684472     -0.379107      -1.35719       1.35719       48.2255       49.5827    
  29  0.815126     -0.204413     -0.731792      0.731792       49.0191       49.7509    
  30  0.388210     -0.946208      -3.38740       3.38740       47.7694       51.1568    
  31  0.670538     -0.399675      -1.43083       1.43083       48.8766       50.3075    
  32  0.851104     -0.161221     -0.577167      0.577167       47.8839       48.4611    
  33  0.381078     -0.964752      -3.45379       3.45379       47.7100       51.1638    
  34  0.776256     -0.253273     -0.906711      0.906711       47.8937       48.8004    
  35  0.168040      -1.78355      -6.38507       6.38507       49.5005       55.8856    
  36  0.229069      -1.47373      -5.27592       5.27592       47.8226       53.0986    
  37  0.917563     -0.860337E-01 -0.307998      0.307998       48.2138       48.5217    
  38  0.161815      -1.82130      -6.52022       6.52022       47.1804       53.7006    
  39  0.355170      -1.03516      -3.70584       3.70584       50.8673       54.5731    
  40  0.221709      -1.50639      -5.39283       5.39283       48.5919       53.9847    
  41  0.424436     -0.856993      -3.06801       3.06801       47.4819       50.5499    
  42  0.337698      -1.08560      -3.88643       3.88643       49.0408       52.9272    
  43  0.574481     -0.554289      -1.98434       1.98434       48.0744       50.0587    
  44  0.614536     -0.486888      -1.74305       1.74305       47.6508       49.3939    
  45  0.345602      -1.06247      -3.80361       3.80361       47.6585       51.4621    
  46  0.330006      -1.10864      -3.96892       3.96892       48.1302       52.0991    
  47  0.934389     -0.678626E-01 -0.242946      0.242946       47.1344       47.3774    
  48  0.884466     -0.122771     -0.439518      0.439518       49.9618       50.4013    
  49  0.928979     -0.736686E-01 -0.263732      0.263732       48.8185       49.0822    
  50  0.788461     -0.237672     -0.850859      0.850859       48.3828       49.2336    
  51  0.963462     -0.372219E-01 -0.133253      0.133253       47.8653       47.9986    
  52  0.630201     -0.461716      -1.65293       1.65293       47.2545       48.9074    
  53  0.797085     -0.226794     -0.811917      0.811917       47.7162       48.5281    
  54  0.389249     -0.943537      -3.37784       3.37784       48.8082       52.1860    
  55  0.660522     -0.414724      -1.48470       1.48470       47.9746       49.4593    
  56  0.520011     -0.653905      -2.34096       2.34096       47.8510       50.1920    
  57  0.270094      -1.30899      -4.68614       4.68614       48.0552       52.7414    
  58  0.218485      -1.52104      -5.44527       5.44527       48.7895       54.2348    
  59  0.391194     -0.938551      -3.35999       3.35999       48.2507       51.6106    
  60  0.740024     -0.301073      -1.07783       1.07783       48.6182       49.6961    
  61  0.184403      -1.69063      -6.05243       6.05243       49.1186       55.1710    
  62  0.309007E-01  -3.47698      -12.4475       12.4475       48.7468       61.1943    
  63  0.916682     -0.869952E-01 -0.311441      0.311441       47.7893       48.1007    
  64  0.268894      -1.31344      -4.70208       4.70208       48.3547       53.0568    
  65  0.705018     -0.349532      -1.25132       1.25132       52.2522       53.5036    
  66  0.748256     -0.290010      -1.03823       1.03823       48.2589       49.2971    
  67  0.828532     -0.188099     -0.673391      0.673391       49.5314       50.2048    
  68  0.336848      -1.08812      -3.89545       3.89545       48.3105       52.2060    
  69  0.686319     -0.376413      -1.34755       1.34755       48.2724       49.6200    
  70  0.731123     -0.313173      -1.12115       1.12115       48.3671       49.4883    
loop,thermsimp(1:2)       74  0.641442       2.94425    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215         48.67          0.84          1.12         23.91          0.71          0.04         26.62
Just calling func    0   0         26.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    216         52.22          0.84          1.11         23.84          0.43          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       74
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       75
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      215     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -3.51348       3.51348       47.1344       50.6479    
   2  0.269095      -1.31269      -4.69940       4.69940       47.1953       51.8947    
   3  0.301960      -1.19746      -4.28688       4.28688       47.8653       52.1522    
   4  0.927593     -0.751619E-01 -0.269078      0.269078       47.7893       48.0583    
   5  0.783450     -0.244048     -0.873685      0.873685       47.3977       48.2714    
   6  0.716705     -0.333091      -1.19246       1.19246       47.8839       49.0764    
   7  0.728578     -0.316661      -1.13364       1.13364       48.2138       49.3474    
   8  0.752541     -0.284300      -1.01779       1.01779       47.7162       48.7340    
   9  0.111710      -2.19185      -7.84676       7.84676       47.8937       55.7404    
  10  0.202752E-01  -3.89836      -13.9560       13.9560       47.0527       61.0087    
  11  0.967738     -0.327937E-01 -0.117401      0.117401       47.2545       47.3719    
  12  0.530869     -0.633240      -2.26698       2.26698       48.2784       50.5454    
  13  0.752699E-01  -2.58668      -9.26023       9.26023       48.2592       57.5194    
  14  0.658334     -0.418043      -1.49658       1.49658       48.2399       49.7364    
  15  0.383542     -0.958305      -3.43071       3.43071       48.8185       52.2492    
  16  0.280803      -1.27010      -4.54694       4.54694       48.3828       52.9297    
  17  0.976909     -0.233616E-01 -0.836338E-01  0.836338E-01   48.2589       48.3425    
  18  0.611898     -0.491189      -1.75845       1.75845       47.6508       49.4093    
  19  0.860469     -0.150278     -0.537992      0.537992       48.3066       48.8446    
  20  0.375446     -0.979641      -3.50709       3.50709       47.9746       51.4817    
  21  0.964573     -0.360702E-01 -0.129130      0.129130       48.3671       48.4963    
  22  0.865663     -0.144259     -0.516444      0.516444       48.2255       48.7419    
  23  0.498009     -0.697137      -2.49573       2.49573       48.3164       50.8121    
  24  0.732547     -0.311228      -1.11419       1.11419       48.2724       49.3866    
  25  0.293766      -1.22497      -4.38536       4.38536       48.3329       52.7182    
  26  0.805097     -0.216793     -0.776114      0.776114       48.6182       49.3944    
  27  0.236791      -1.44058      -5.15723       5.15723       49.0191       54.1764    
  28  0.759809     -0.274688     -0.983377      0.983377       47.7426       48.7260    
  29  0.279804      -1.27367      -4.55969       4.55969       47.7477       52.3074    
  30  0.862550     -0.147862     -0.529344      0.529344       48.4284       48.9578    
  31  0.784800     -0.242327     -0.867523      0.867523       48.0744       48.9419    
  32  0.231425      -1.46350      -5.23929       5.23929       47.7233       52.9625    
  33  0.839725     -0.174681     -0.625354      0.625354       47.8510       48.4764    
  34  0.204862      -1.58542      -5.67576       5.67576       49.5314       55.2071    
  35  0.741170     -0.299525      -1.07229       1.07229       47.8405       48.9128    
  36  0.838703     -0.175898     -0.629711      0.629711       48.8766       49.5064    
  37  0.287711      -1.24580      -4.45992       4.45992       49.9618       54.4217    
  38  0.937479     -0.645611E-01 -0.231127      0.231127       47.4819       47.7130    
  39  0.188655      -1.66783      -5.97080       5.97080       47.7303       53.7011    
  40  0.818317     -0.200505     -0.717804      0.717804       47.9061       48.6239    
  41  0.903487     -0.101493     -0.363343      0.363343       47.7675       48.1308    
  42  0.148828      -1.90496      -6.81973       6.81973       47.7694       54.5891    
  43  0.573616E-01  -2.85838      -10.2329       10.2329       47.7100       57.9429    
  44  0.792726E-01  -2.53486      -9.07474       9.07474       47.6585       56.7332    
  45  0.150401      -1.89445      -6.78209       6.78209       48.2507       55.0328    
  46  0.511444     -0.670518      -2.40044       2.40044       48.0121       50.4126    
  47  0.179810      -1.71585      -6.14271       6.14271       48.6567       54.7995    
  48  0.167282      -1.78808      -6.40127       6.40127       48.1302       54.5314    
  49  0.589016     -0.529302      -1.89489       1.89489       48.8082       50.7031    
  50  0.974997     -0.253206E-01 -0.906473E-01  0.906473E-01   48.3105       48.4012    
  51  0.750240     -0.287363      -1.02875       1.02875       47.6468       48.6756    
  52  0.695153     -0.363624      -1.30176       1.30176       48.0552       49.3570    
  53  0.166976      -1.78991      -6.40782       6.40782       48.4120       54.8198    
  54  0.228686      -1.47540      -5.28191       5.28191       49.0408       54.3227    
  55  0.728220     -0.317152      -1.13540       1.13540       48.3547       49.4901    
  56  0.321968      -1.13330      -4.05720       4.05720       47.8226       51.8798    
  57  0.494283     -0.704647      -2.52262       2.52262       48.4295       50.9521    
  58  0.398916     -0.919004      -3.29001       3.29001       52.2522       55.5423    
  59  0.130321      -2.03776      -7.29512       7.29512       48.2681       55.5632    
  60  0.131470E-01  -4.33156      -15.5069       15.5069       47.1804       62.6872    
  61  0.868361E-03  -7.04890      -25.2349       25.2349       49.1624       74.3973    
  62  0.572113     -0.558419      -1.99913       1.99913       48.5919       50.5910    
  63  0.201897      -1.60000      -5.72795       5.72795       48.7895       54.5175    
  64  0.795960     -0.228206     -0.816973      0.816973       50.8673       51.6842    
  65  0.904277E-01  -2.40321      -8.60341       8.60341       49.1186       57.7220    
  66  0.976775E-01  -2.32608      -8.32732       8.32732       49.5005       57.8279    
  67  0.231524      -1.46307      -5.23776       5.23776       47.2142       52.4519    
  68  0.542363     -0.611819      -2.19030       2.19030       48.3863       50.5766    
  69  0.332318      -1.10166      -3.94393       3.94393       47.9426       51.8865    
  70  0.840822     -0.173375     -0.620679      0.620679       48.6655       49.2862    
loop,thermsimp(1:2)       75   3.51348       4.69940    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217         55.72          0.84          1.12         23.81          0.52          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     55.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       75
neval is:      216
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       76
neval is:      216


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      216     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -10.7441       10.7441       47.2545       57.9986    
   2  0.604222     -0.503814      -1.80364       1.80364       47.4819       49.2856    
   3  0.106168      -2.24273      -8.02891       8.02891       47.7893       55.8182    
   4  0.342113      -1.07261      -3.83993       3.83993       47.7675       51.6074    
   5  0.473442     -0.747725      -2.67684       2.67684       47.3977       50.0746    
   6  0.100866E-01  -4.59655      -16.4555       16.4555       48.2589       64.7144    
   7  0.911848     -0.922817E-01 -0.330366      0.330366       48.3105       48.6409    
   8  0.633547     -0.456421      -1.63397       1.63397       47.8510       49.4850    
   9  0.729024     -0.316048      -1.13144       1.13144       48.3671       49.4986    
  10  0.620163     -0.477772      -1.71041       1.71041       47.9061       49.6165    
  11  0.867018     -0.142695     -0.510845      0.510845       47.6468       48.1577    
  12  0.969344E-01  -2.33372      -8.35466       8.35466       47.7426       56.0973    
  13  0.358466      -1.02592      -3.67277       3.67277       47.7162       51.3890    
  14  0.953168     -0.479638E-01 -0.171709      0.171709       48.2255       48.3972    
  15  0.684510     -0.379052      -1.35700       1.35700       48.3066       49.6636    
  16  0.482047     -0.729713      -2.61235       2.61235       47.8405       50.4529    
  17  0.974791     -0.255318E-01 -0.914034E-01  0.914034E-01   48.0744       48.1658    
  18  0.978669     -0.215619E-01 -0.771912E-01  0.771912E-01   48.4284       48.5056    
  19  0.929785     -0.728022E-01 -0.260630      0.260630       47.8839       48.1446    
  20  0.715020     -0.335444      -1.20088       1.20088       48.6655       49.8664    
  21  0.598247     -0.513752      -1.83922       1.83922       48.2138       50.0530    
  22  0.107080      -2.23418      -7.99831       7.99831       48.0552       56.0535    
  23  0.559093     -0.581439      -2.08154       2.08154       48.2724       50.3539    
  24  0.933094     -0.692491E-01 -0.247910      0.247910       48.6182       48.8662    
  25  0.470169E-01  -3.05725      -10.9449       10.9449       47.6508       58.5957    
  26  0.166768      -1.79115      -6.41228       6.41228       48.3547       54.7670    
  27  0.331277      -1.10480      -3.95516       3.95516       48.8766       52.8318    
  28  0.961755     -0.389952E-01 -0.139602      0.139602       48.2399       48.3795    
  29  0.464366E-01  -3.06967      -10.9893       10.9893       48.0121       59.0015    
  30  0.966136E-03  -6.94221      -24.8529       24.8529       48.2784       73.1313    
  31  0.941012     -0.607999E-01 -0.217662      0.217662       48.3863       48.6039    
  32  0.201947E-01  -3.90233      -13.9703       13.9703       48.5919       62.5621    
  33  0.679249     -0.386768      -1.38462       1.38462       47.1344       48.5190    
  34  0.318772      -1.14328      -4.09291       4.09291       48.8082       52.9011    
  35  0.388100     -0.946493      -3.38842       3.38842       48.3164       51.7048    
  36  0.658606     -0.417629      -1.49510       1.49510       48.4295       49.9246    
  37  0.774362     -0.255715     -0.915455      0.915455       47.9746       48.8901    
  38  0.704871     -0.349740      -1.25206       1.25206       50.8673       52.1193    
  39  0.274189      -1.29394      -4.63226       4.63226       47.8226       52.4549    
  40  0.881806     -0.125783     -0.450299      0.450299       47.9426       48.3929    
  41  0.198448      -1.61723      -5.78963       5.78963       47.1953       52.9849    
  42  0.342590      -1.07122      -3.83495       3.83495       47.8653       51.7003    
  43  0.603787     -0.504534      -1.80622       1.80622       48.8185       50.6247    
  44  0.667409     -0.404353      -1.44757       1.44757       47.7477       49.1952    
  45  0.317014      -1.14881      -4.11271       4.11271       47.2142       51.3269    
  46  0.368458     -0.998429      -3.57435       3.57435       48.3329       51.9072    
  47  0.139912      -1.96674      -7.04089       7.04089       48.3828       55.4236    
  48  0.537645     -0.620557      -2.22158       2.22158       47.7233       49.9448    
  49  0.159021      -1.83872      -6.58258       6.58258       47.7303       54.3129    
  50  0.729011     -0.316067      -1.13151       1.13151       49.0191       50.1506    
  51  0.802486     -0.220041     -0.787743      0.787743       49.0408       49.8285    
  52  0.249203      -1.38949      -4.97433       4.97433       49.9618       54.9362    
  53  0.282362      -1.26456      -4.52711       4.52711       48.7895       53.3166    
  54  0.803878     -0.218308     -0.781536      0.781536       48.1302       48.9117    
  55  0.183401      -1.69608      -6.07192       6.07192       47.7694       53.8413    
  56  0.144999      -1.93103      -6.91304       6.91304       48.6567       55.5698    
  57  0.821026     -0.197200     -0.705972      0.705972       48.4120       49.1179    
  58  0.391750     -0.937132      -3.35491       3.35491       48.2507       51.6056    
  59  0.605745     -0.501297      -1.79463       1.79463       49.5314       51.3260    
  60  0.759982E-01  -2.57705      -9.22576       9.22576       52.2522       61.4780    
  61  0.856619     -0.154762     -0.554043      0.554043       48.2681       48.8222    
  62  0.200085      -1.60901      -5.76023       5.76023       47.8937       53.6539    
  63  0.623969     -0.471654      -1.68851       1.68851       47.6585       49.3470    
  64  0.668527     -0.402679      -1.44158       1.44158       48.2592       49.7008    
  65  0.926898     -0.759121E-01 -0.271763      0.271763       49.1186       49.3904    
  66  0.972428     -0.279590E-01 -0.100093      0.100093       49.5005       49.6006    
  67  0.230218      -1.46873      -5.25801       5.25801       47.7100       52.9680    
  68  0.756442E-01  -2.58171      -9.24247       9.24247       47.0527       56.2952    
  69  0.209346      -1.56377      -5.59824       5.59824       47.1804       52.7786    
  70  0.198646      -1.61623      -5.78607       5.78607       55.7179       61.5040    
loop,thermsimp(1:2)       76   10.7441       1.80364    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    218         47.73          0.84          1.11         23.82          0.48          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    219         59.10          0.84          1.11         23.86          0.52          0.04         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       76
neval is:      218
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       77
neval is:      218


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      218     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -1.84812       1.84812       47.8839       49.7320    
   2  0.476930     -0.740385      -2.65056       2.65056       47.6468       50.2974    
   3  0.845382     -0.167966     -0.601314      0.601314       48.0744       48.6757    
   4  0.397814     -0.921770      -3.29991       3.29991       48.2399       51.5398    
   5  0.249923      -1.38660      -4.96401       4.96401       47.9426       52.9066    
   6  0.591552     -0.525005      -1.87951       1.87951       48.2255       50.1050    
   7  0.143111      -1.94414      -6.95996       6.95996       48.4284       55.3884    
   8  0.306099      -1.18385      -4.23814       4.23814       47.1344       51.3726    
   9  0.441827     -0.816836      -2.92425       2.92425       48.3863       51.3105    
  10  0.504521     -0.684146      -2.44923       2.44923       48.3105       50.7598    
  11  0.127660      -2.05839      -7.36897       7.36897       48.2681       55.6371    
  12  0.333524      -1.09804      -3.93096       3.93096       48.6182       52.5492    
  13  0.130890      -2.03340      -7.27951       7.27951       47.9746       55.2541    
  14  0.307732      -1.17853      -4.21909       4.21909       48.1302       52.3493    
  15  0.154434E-01  -4.17057      -14.9305       14.9305       48.4120       63.3425    
  16  0.357863      -1.02761      -3.67880       3.67880       47.7477       51.4265    
  17  0.271898      -1.30233      -4.66230       4.66230       47.4819       52.1442    
  18  0.906228E-01  -2.40105      -8.59570       8.59570       47.6585       56.2542    
  19  0.344142      -1.06670      -3.81876       3.81876       49.1186       52.9374    
  20  0.392886     -0.934237      -3.34454       3.34454       47.8510       51.1956    
  21  0.454318     -0.788958      -2.82445       2.82445       48.3671       51.1916    
  22  0.384129     -0.956778      -3.42524       3.42524       49.5005       52.9258    
  23  0.354037      -1.03835      -3.71728       3.71728       47.9061       51.6234    
  24  0.154212      -1.86943      -6.69251       6.69251       48.3066       54.9991    
  25  0.816320     -0.202949     -0.726553      0.726553       48.2592       48.9858    
  26  0.994970     -0.504291E-02 -0.180535E-01  0.180535E-01   49.0408       49.0588    
  27  0.374719E-01  -3.28416      -11.7572       11.7572       48.6655       60.4227    
  28  0.227113      -1.48231      -5.30662       5.30662       48.4295       53.7361    
  29  0.410587     -0.890167      -3.18678       3.18678       47.7233       50.9100    
  30  0.104540E-01  -4.56077      -16.3274       16.3274       48.2138       64.5412    
  31  0.994826     -0.518730E-02 -0.185704E-01  0.185704E-01   47.3977       47.4163    
  32  0.738930     -0.302553      -1.08313       1.08313       49.0191       50.1023    
  33  0.715904     -0.334209      -1.19646       1.19646       48.2724       49.4689    
  34  0.128324      -2.05320      -7.35040       7.35040       47.8405       55.1909    
  35  0.856095     -0.155374     -0.556233      0.556233       48.8185       49.3747    
  36  0.423967     -0.858099      -3.07197       3.07197       49.5314       52.6034    
  37  0.504650     -0.683890      -2.44831       2.44831       47.2142       49.6625    
  38  0.347036      -1.05833      -3.78879       3.78879       47.7162       51.5050    
  39  0.906779     -0.978566E-01 -0.350324      0.350324       48.2507       48.6010    
  40  0.616911     -0.483030      -1.72924       1.72924       47.7675       49.4967    
  41  0.540209     -0.615800      -2.20455       2.20455       47.8653       50.0699    
  42  0.772932     -0.257564     -0.922072      0.922072       48.3164       49.2384    
  43  0.544989     -0.606989      -2.17301       2.17301       48.3329       50.5059    
  44  0.951523     -0.496917E-01 -0.177895      0.177895       50.8673       51.0452    
  45  0.172505      -1.75733      -6.29120       6.29120       47.8226       54.1138    
  46  0.871391     -0.137665     -0.492836      0.492836       47.1804       47.6732    
  47  0.127604      -2.05882      -7.37053       7.37053       48.8766       56.2472    
  48  0.785934     -0.240882     -0.862353      0.862353       48.8082       49.6705    
  49  0.815977     -0.203369     -0.728057      0.728057       47.7100       48.4381    
  50  0.350587      -1.04815      -3.75234       3.75234       47.1953       50.9476    
  51  0.739645     -0.301584      -1.07966       1.07966       48.7895       49.8692    
  52  0.996274     -0.373345E-02 -0.133656E-01  0.133656E-01   47.8937       47.9070    
  53  0.303822      -1.19131      -4.26488       4.26488       47.7694       52.0343    
  54  0.708260     -0.344944      -1.23489       1.23489       47.7303       48.9652    
  55  0.646268     -0.436541      -1.56280       1.56280       48.3547       49.9175    
  56  0.696585     -0.361566      -1.29440       1.29440       49.9618       51.2562    
  57  0.439732     -0.821591      -2.94127       2.94127       48.3828       51.3240    
  58  0.791452     -0.233886     -0.837305      0.837305       48.6567       49.4940    
  59  0.202743      -1.59581      -5.71298       5.71298       47.7893       53.5022    
  60  0.547790E-01  -2.90445      -10.3979       10.3979       48.0552       58.4531    
  61  0.663631     -0.410029      -1.46789       1.46789       47.7426       49.2105    
  62  0.838292     -0.176388     -0.631466      0.631466       47.0527       47.6842    
  63  0.450238     -0.797979      -2.85675       2.85675       47.2545       50.1113    
  64  0.209610      -1.56251      -5.59374       5.59374       47.6508       53.2446    
  65  0.502241     -0.688676      -2.46544       2.46544       48.0121       50.4776    
  66  0.837306     -0.177566     -0.635682      0.635682       52.2522       52.8879    
  67  0.345973      -1.06139      -3.79976       3.79976       55.7179       59.5177    
  68  0.558861     -0.581855      -2.08303       2.08303       48.5919       50.6749    
  69  0.293365      -1.22634      -4.39026       4.39026       48.2589       52.6491    
  70  0.234701      -1.44944      -5.18897       5.18897       47.7332       52.9222    
loop,thermsimp(1:2)       77   1.84812       2.65056    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    220         48.00          0.84          1.11         23.86          0.47          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       77
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       78
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      219     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01 -0.214346      0.214346       47.3977       47.6121    
   2  0.368209     -0.999105      -3.57677       3.57677       47.1804       50.7571    
   3  0.508630     -0.676034      -2.42018       2.42018       47.0527       49.4729    
   4  0.744324     -0.295279      -1.05709       1.05709       47.8937       48.9508    
   5  0.401586     -0.912333      -3.26613       3.26613       47.7100       50.9761    
   6  0.712794     -0.338563      -1.21205       1.21205       48.2507       49.4627    
   7  0.186976      -1.67678      -6.00281       6.00281       48.0744       54.0772    
   8  0.688451     -0.373311      -1.33645       1.33645       47.7303       49.0668    
   9  0.668652     -0.402492      -1.44091       1.44091       48.2592       49.7001    
  10  0.656767     -0.420426      -1.50512       1.50512       49.0408       50.5459    
  11  0.853336     -0.158602     -0.567792      0.567792       47.7426       48.3104    
  12  0.556440     -0.586195      -2.09856       2.09856       48.3164       50.4149    
  13  0.258558E-01  -3.65522      -13.0856       13.0856       48.8185       61.9041    
  14  0.121003E-01  -4.41452      -15.8039       15.8039       48.2724       64.0763    
  15  0.150890      -1.89120      -6.77045       6.77045       48.6567       55.4272    
  16  0.820074     -0.198360     -0.710125      0.710125       47.7675       48.4776    
  17  0.151452      -1.88748      -6.75715       6.75715       47.2142       53.9713    
  18  0.305465      -1.18592      -4.24557       4.24557       48.8082       53.0538    
  19  0.533202     -0.628854      -2.25128       2.25128       47.8839       50.1352    
  20  0.143416      -1.94201      -6.95234       6.95234       48.7895       55.7419    
  21  0.687081     -0.375303      -1.34357       1.34357       48.3547       49.6983    
  22  0.546247     -0.604685      -2.16476       2.16476       47.8653       50.0301    
  23  0.356987      -1.03006      -3.68758       3.68758       49.0191       52.7067    
  24  0.545718     -0.605653      -2.16822       2.16822       48.2255       50.3937    
  25  0.789688     -0.236117     -0.845292      0.845292       47.2545       48.0998    
  26  0.752086     -0.284904      -1.01995       1.01995       47.6468       48.6668    
  27  0.388816     -0.944650      -3.38182       3.38182       48.0121       51.3939    
  28  0.988428     -0.116395E-01 -0.416693E-01  0.416693E-01   48.3329       48.3745    
  29  0.124991      -2.07952      -7.44462       7.44462       48.5919       56.0365    
  30  0.568214     -0.565257      -2.02361       2.02361       48.3105       50.3341    
  31  0.551032     -0.595962      -2.13353       2.13353       47.7233       49.8568    
  32  0.423622     -0.858913      -3.07489       3.07489       47.1953       50.2702    
  33  0.647554     -0.434553      -1.55569       1.55569       50.8673       52.4230    
  34  0.686255     -0.376506      -1.34788       1.34788       48.3671       49.7150    
  35  0.548072     -0.601349      -2.15282       2.15282       47.8510       50.0039    
  36  0.880777     -0.126951     -0.454482      0.454482       49.9618       50.4163    
  37  0.894918     -0.111023     -0.397459      0.397459       48.3863       48.7837    
  38  0.241077      -1.42264      -5.09301       5.09301       48.3828       53.4758    
  39  0.546141     -0.604877      -2.16545       2.16545       47.1344       49.2999    
  40  0.266590      -1.32204      -4.73288       4.73288       47.7477       52.4805    
  41  0.575085     -0.553238      -1.98058       1.98058       47.7162       49.6968    
  42  0.907139     -0.974596E-01 -0.348903      0.348903       48.2399       48.5888    
  43  0.469109     -0.756920      -2.70976       2.70976       47.9061       50.6159    
  44  0.738008     -0.303801      -1.08760       1.08760       47.7694       48.8570    
  45  0.557598     -0.584116      -2.09112       2.09112       47.4819       49.5730    
  46  0.305677      -1.18523      -4.24308       4.24308       48.1302       52.3732    
  47  0.392927     -0.934131      -3.34416       3.34416       48.6182       51.9624    
  48  0.121997      -2.10376      -7.53139       7.53139       49.5314       57.0628    
  49  0.712082     -0.339563      -1.21563       1.21563       48.2589       49.4745    
  50  0.342132      -1.07256      -3.83973       3.83973       52.2522       56.0920    
  51  0.288307      -1.24373      -4.45252       4.45252       47.9426       52.3951    
  52  0.554777     -0.589188      -2.10928       2.10928       47.7332       49.8425    
  53  0.116597E-01  -4.45161      -15.9367       15.9367       49.5005       65.4372    
  54  0.844148     -0.169427     -0.606544      0.606544       49.1186       49.7252    
  55  0.910896     -0.933267E-01 -0.334107      0.334107       47.6508       47.9850    
  56  0.257100      -1.35829      -4.86265       4.86265       47.7893       52.6519    
  57  0.340199      -1.07823      -3.86002       3.86002       48.4295       52.2895    
  58  0.656010     -0.421580      -1.50925       1.50925       47.8226       49.3319    
  59  0.894739     -0.111224     -0.398178      0.398178       48.3066       48.7048    
  60  0.226933      -1.48310      -5.30946       5.30946       47.8405       53.1500    
  61  0.478182     -0.737763      -2.64117       2.64117       47.9746       50.6158    
  62  0.361863      -1.01649      -3.63901       3.63901       48.4284       52.0675    
  63  0.415757     -0.877654      -3.14198       3.14198       48.2681       51.4101    
  64  0.540919     -0.614487      -2.19985       2.19985       48.8766       51.0765    
  65  0.489341     -0.714697      -2.55860       2.55860       47.6585       50.2171    
  66  0.963632     -0.370456E-01 -0.132622      0.132622       48.0552       48.1878    
  67  0.312700      -1.16251      -4.16176       4.16176       55.7179       59.8797    
  68  0.145861      -1.92510      -6.89181       6.89181       48.6655       55.5573    
  69  0.960223     -0.405895E-01 -0.145309      0.145309       48.4120       48.5573    
  70  0.490262     -0.712815      -2.55186       2.55186       48.0046       50.5565    
loop,thermsimp(1:2)       78  0.214346       3.57677    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221         50.01          0.84          1.12         23.86          0.45          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    222         64.92          0.84          1.12         23.82          0.50          0.04         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    50.010        1.231     -1.829      3.156     -102.6      1.444    
                      0.2670      1.263     -99.70      3.717     0.4167E-01

                       2.212     -1.011      1.530      7047.      3739.    

                     -0.4745E-03  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6363.      385.5    

                       1.433     -5.783     -3.961     -8.364      6.643    

                      -14.79     -3.519      1744.      0.000      9494.    



                       1832.     0.1481E+05 -4736.      9059.      4865.    

                       6837.     0.2122E-01 0.1907     0.2517E-01 0.1072    

                     -0.2486    -0.6692E-01 0.2051     0.1346     0.8222E-01



                     -0.4774    -0.7918      0.000     0.7117E-01-0.9930E-01

                      0.2517E-01 0.9816E-01-0.7116    -0.1519     0.1750E-01

                      0.7033E-01-0.7168E-02-0.6499     -1.186      7684.    



                      -1.039     -1.300     -2.244     -2.319    -0.3807    

                     -0.3252      9.210      8.661    -0.1992E+05 -4.000    

                     -0.5052     -2.231      9.315      8.889    -0.1908E+05



                      -4.000     0.3818    -0.3917      8.571      9.072    

                     -0.1908E+05 -7.000    -0.6981    -0.6168      9.020    

                       8.792    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       78
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       79
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      221     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -9.47523       9.47523       47.3977       56.8729    
   2  0.952063     -0.491245E-01 -0.175864      0.175864       47.6508       47.8267    
   3  0.207928      -1.57057      -5.62258       5.62258       47.2545       52.8771    
   4  0.564009     -0.572686      -2.05020       2.05020       48.0552       50.1054    
   5  0.461636     -0.772979      -2.76724       2.76724       47.7426       50.5099    
   6  0.683812     -0.380072      -1.36065       1.36065       48.3329       49.6935    
   7  0.153569      -1.87360      -6.70745       6.70745       47.7675       54.4749    
   8  0.605650     -0.501453      -1.79519       1.79519       48.4120       50.2072    
   9  0.257296      -1.35753      -4.85992       4.85992       48.2399       53.0998    
  10  0.517987     -0.657805      -2.35492       2.35492       47.6468       50.0017    
  11  0.571129     -0.560140      -2.00529       2.00529       48.3066       50.3119    
  12  0.735134     -0.307703      -1.10157       1.10157       48.3863       49.4878    
  13  0.766340E-02  -4.87130      -17.4391       17.4391       47.7694       65.2085    
  14  0.435932     -0.830269      -2.97234       2.97234       47.8937       50.8660    
  15  0.513945     -0.665639      -2.38297       2.38297       47.7303       50.1133    
  16  0.447046     -0.805095      -2.88222       2.88222       47.1344       50.0166    
  17  0.244813      -1.40726      -5.03795       5.03795       47.8226       52.8606    
  18  0.183933      -1.69318      -6.06155       6.06155       48.2507       54.3122    
  19  0.413164     -0.883910      -3.16438       3.16438       47.0527       50.2171    
  20  0.869613     -0.139707     -0.500149      0.500149       48.2589       48.7590    
  21  0.853260     -0.158691     -0.568109      0.568109       47.4819       48.0500    
  22  0.138067      -1.98001      -7.08840       7.08840       47.7162       54.8046    
  23  0.940528     -0.613134E-01 -0.219500      0.219500       48.3547       48.5742    
  24  0.694939     -0.363931      -1.30286       1.30286       48.2592       49.5621    
  25  0.962776     -0.379346E-01 -0.135805      0.135805       48.3671       48.5029    
  26  0.378266     -0.972158      -3.48030       3.48030       49.1186       52.5989    
  27  0.855922     -0.155576     -0.556958      0.556958       47.7332       48.2902    
  28  0.393452     -0.932797      -3.33939       3.33939       47.7233       51.0626    
  29  0.253590      -1.37204      -4.91186       4.91186       47.8510       52.7629    
  30  0.777948     -0.251096     -0.898917      0.898917       47.8653       48.7643    
  31  0.654890     -0.423288      -1.51536       1.51536       47.8839       49.3993    
  32  0.690016E-01  -2.67363      -9.57151       9.57151       47.6585       57.2300    
  33  0.101034      -2.29229      -8.20635       8.20635       47.1953       55.4016    
  34  0.684533     -0.379019      -1.35688       1.35688       48.3105       49.6674    
  35  0.592603     -0.523230      -1.87315       1.87315       48.2255       50.0987    
  36  0.904830     -0.100009     -0.358028      0.358028       48.3164       48.6744    
  37  0.400244     -0.915681      -3.27811       3.27811       49.9618       53.2399    
  38  0.698191     -0.359263      -1.28615       1.28615       49.0408       50.3269    
  39  0.551449E-01  -2.89779      -10.3740       10.3740       48.0046       58.3786    
  40  0.500493     -0.692161      -2.47792       2.47792       47.9746       50.4525    
  41  0.289592      -1.23928      -4.43660       4.43660       47.9061       52.3427    
  42  0.447163     -0.804833      -2.88128       2.88128       47.1804       50.0616    
  43  0.690940     -0.369702      -1.32352       1.32352       47.7100       49.0335    
  44  0.631068     -0.460341      -1.64801       1.64801       48.8766       50.5247    
  45  0.926041     -0.768363E-01 -0.275072      0.275072       48.0121       48.2872    
  46  0.436187     -0.829684      -2.97025       2.97025       48.2681       51.2384    
  47  0.314139      -1.15792      -4.14532       4.14532       48.6182       52.7636    
  48  0.363110      -1.01305      -3.62669       3.62669       48.4284       52.0551    
  49  0.446982     -0.805238      -2.88273       2.88273       48.4295       51.3122    
  50  0.541529     -0.613360      -2.19581       2.19581       48.1302       50.3260    
  51  0.415529     -0.878202      -3.14394       3.14394       47.9426       51.0865    
  52  0.559792     -0.580190      -2.07707       2.07707       50.8673       52.9443    
  53  0.931332     -0.711389E-01 -0.254676      0.254676       47.7477       48.0023    
  54  0.653342     -0.425655      -1.52383       1.52383       47.7893       49.3131    
  55  0.254324E-01  -3.67173      -13.1447       13.1447       49.0191       62.1638    
  56  0.365877      -1.00546      -3.59951       3.59951       48.8082       52.4077    
  57  0.187661      -1.67312      -5.98972       5.98972       47.8405       53.8302    
  58  0.592744     -0.522993      -1.87230       1.87230       48.3828       50.2551    
  59  0.211036      -1.55573      -5.56947       5.56947       47.2142       52.7836    
  60  0.718956     -0.329955      -1.18123       1.18123       48.0744       49.2556    
  61  0.170082      -1.77147      -6.34184       6.34184       48.6567       54.9986    
  62  0.190051      -1.66046      -5.94442       5.94442       48.6655       54.6099    
  63  0.275889      -1.28776      -4.61013       4.61013       48.7895       53.3997    
  64  0.670664     -0.399487      -1.43015       1.43015       48.5919       50.0220    
  65  0.294211      -1.22346      -4.37994       4.37994       52.2522       56.6322    
  66  0.710312     -0.342050      -1.22453       1.22453       49.5314       50.7559    
  67  0.432365     -0.838485      -3.00175       3.00175       55.7179       58.7197    
  68  0.488453     -0.716511      -2.56509       2.56509       48.8185       51.3836    
  69  0.250523      -1.38421      -4.95542       4.95542       48.2724       53.2278    
  70  0.842097     -0.171860     -0.615253      0.615253       50.0105       50.6257    
loop,thermsimp(1:2)       79   9.47523      0.175864    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223         47.52          0.84          1.12         23.82          0.43          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    224         48.79          0.84          1.10         23.88          0.59          0.04         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       79
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       80
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      223     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832      -1.44213       1.44213       47.6508       49.0930    
   2  0.238500      -1.43339      -5.13149       5.13149       47.7477       52.8792    
   3  0.689211     -0.372208      -1.33250       1.33250       47.4819       48.8144    
   4  0.540774     -0.614753      -2.20080       2.20080       48.0121       50.2129    
   5  0.178857      -1.72117      -6.16175       6.16175       47.7332       53.8949    
   6  0.884253     -0.123012     -0.440381      0.440381       48.3671       48.8075    
   7  0.755546     -0.280314      -1.00352       1.00352       48.3547       49.3582    
   8  0.654086E-01  -2.72710      -9.76295       9.76295       48.3164       58.0793    
   9  0.802958     -0.219452     -0.785634      0.785634       48.2589       49.0445    
  10  0.840665     -0.173562     -0.621346      0.621346       47.8653       48.4867    
  11  0.864930     -0.145107     -0.519478      0.519478       47.7100       48.2295    
  12  0.728243     -0.317120      -1.13528       1.13528       48.0744       49.2096    
  13  0.453086     -0.791672      -2.83417       2.83417       47.7893       50.6234    
  14  0.702549E-01  -2.65563      -9.50707       9.50707       47.8839       57.3910    
  15  0.610595     -0.493321      -1.76608       1.76608       48.3863       50.1523    
  16  0.728410E-02  -4.92206      -17.6209       17.6209       48.2592       65.8801    
  17  0.913763     -0.901841E-01 -0.322857      0.322857       48.3105       48.6334    
  18  0.165001      -1.80180      -6.45041       6.45041       48.3329       54.7833    
  19  0.917747E-01  -2.38842      -8.55048       8.55048       47.6468       56.1973    
  20  0.338507      -1.08321      -3.87787       3.87787       47.1344       51.0123    
  21  0.357666      -1.02815      -3.68077       3.68077       48.5919       52.2726    
  22  0.389441     -0.943044      -3.37607       3.37607       47.1804       50.5564    
  23  0.879897     -0.127950     -0.458058      0.458058       48.2255       48.6836    
  24  0.418897     -0.870129      -3.11504       3.11504       48.0552       51.1703    
  25  0.838426     -0.176230     -0.630897      0.630897       47.7303       48.3612    
  26  0.185169      -1.68649      -6.03758       6.03758       48.4120       54.4495    
  27  0.200952      -1.60469      -5.74474       5.74474       47.0527       52.7974    
  28  0.877256     -0.130957     -0.468821      0.468821       48.3828       48.8516    
  29  0.386592     -0.950385      -3.40236       3.40236       48.3066       51.7089    
  30  0.888706     -0.117988     -0.422395      0.422395       48.1302       48.5526    
  31  0.105408      -2.24991      -8.05464       8.05464       49.0408       57.0954    
  32  0.994268     -0.574873E-02 -0.205803E-01  0.205803E-01   47.9746       47.9952    
  33  0.764077     -0.269087     -0.963324      0.963324       47.7426       48.7060    
  34  0.812108     -0.208121     -0.745070      0.745070       48.8766       49.6217    
  35  0.121669      -2.10645      -7.54105       7.54105       50.0105       57.5515    
  36  0.637909     -0.449559      -1.60941       1.60941       49.5314       51.1408    
  37  0.316007E-02  -5.75716      -20.6105       20.6105       47.8937       68.5042    
  38  0.229677      -1.47108      -5.26644       5.26644       47.7233       52.9897    
  39  0.521374     -0.651288      -2.33159       2.33159       47.9426       50.2742    
  40  0.391402     -0.938019      -3.35809       3.35809       48.2681       51.6262    
  41  0.327357      -1.11670      -3.99777       3.99777       48.4295       52.4273    
  42  0.963139     -0.375576E-01 -0.134455      0.134455       48.8185       48.9529    
  43  0.174261      -1.74720      -6.25493       6.25493       48.4284       54.6834    
  44  0.331602      -1.10382      -3.95165       3.95165       47.9061       51.8578    
  45  0.526338     -0.641812      -2.29767       2.29767       48.8082       51.1059    
  46  0.413265     -0.883667      -3.16351       3.16351       49.1186       52.2821    
  47  0.541510E-02  -5.21856      -18.6823       18.6823       47.8510       66.5334    
  48  0.781613     -0.246396     -0.882090      0.882090       48.6182       49.5003    
  49  0.656825     -0.420337      -1.50480       1.50480       47.2142       48.7190    
  50  0.584791     -0.536501      -1.92066       1.92066       47.8226       49.7433    
  51  0.811204     -0.209236     -0.749059      0.749059       47.2545       48.0036    
  52  0.421027     -0.865059      -3.09689       3.09689       50.8673       53.9642    
  53  0.663739     -0.409866      -1.46731       1.46731       48.2399       49.7072    
  54  0.164765      -1.80323      -6.45553       6.45553       48.2724       54.7279    
  55  0.883187E-01  -2.42680      -8.68790       8.68790       49.9618       58.6497    
  56  0.825424     -0.191858     -0.686846      0.686846       48.7895       49.4764    
  57  0.201966E-01  -3.90224      -13.9699       13.9699       47.8405       61.8104    
  58  0.174898      -1.74355      -6.24187       6.24187       48.2507       54.4925    
  59  0.477008     -0.740222      -2.64998       2.64998       47.7675       50.4175    
  60  0.162167E-01  -4.12171      -14.7556       14.7556       48.6655       63.4211    
  61  0.378219     -0.972282      -3.48075       3.48075       47.7162       51.1970    
  62  0.980713     -0.194752E-01 -0.697208E-01  0.697208E-01   48.6567       48.7265    
  63  0.232487      -1.45892      -5.22290       5.22290       47.1953       52.4182    
  64  0.962055     -0.386832E-01 -0.138485      0.138485       52.2522       52.3907    
  65  0.761875     -0.271973     -0.973656      0.973656       47.3977       48.3714    
  66  0.673649     -0.395046      -1.41425       1.41425       47.6585       49.0727    
  67  0.979237     -0.209814E-01 -0.751129E-01  0.751129E-01   48.0046       48.0797    
  68  0.361942      -1.01627      -3.63823       3.63823       55.7179       59.3561    
  69  0.191552      -1.65259      -5.91624       5.91624       49.0191       54.9354    
  70  0.708040     -0.345254      -1.23600       1.23600       47.5190       48.7550    
loop,thermsimp(1:2)       80   1.44213       5.13149    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225         48.21          0.84          1.12         23.81          0.45          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    226         66.92          0.84          1.12         23.89          0.51          0.04         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       80
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       81
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      225     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -4.68708       4.68708       47.9746       52.6617    
   2  0.879265     -0.128669     -0.460631      0.460631       47.2545       47.7151    
   3  0.684902     -0.378479      -1.35495       1.35495       48.0046       49.3595    
   4  0.893896     -0.112166     -0.401550      0.401550       47.7100       48.1116    
   5  0.476761     -0.740739      -2.65183       2.65183       47.7303       50.3822    
   6  0.755167     -0.280817      -1.00532       1.00532       47.3977       48.4030    
   7  0.452407     -0.793173      -2.83954       2.83954       47.8653       50.7049    
   8  0.723906     -0.323093      -1.15667       1.15667       48.1302       49.2868    
   9  0.451260     -0.795711      -2.84863       2.84863       48.3105       51.1592    
  10  0.668265     -0.403071      -1.44298       1.44298       48.2255       49.6685    
  11  0.777249     -0.251995     -0.902136      0.902136       47.7426       48.6448    
  12  0.342240      -1.07224      -3.83861       3.83861       47.2142       51.0528    
  13  0.639156     -0.447606      -1.60242       1.60242       48.6567       50.2592    
  14  0.166924      -1.79022      -6.40894       6.40894       47.5190       53.9279    
  15  0.375260     -0.980137      -3.50887       3.50887       48.3671       51.8760    
  16  0.299730      -1.20487      -4.31342       4.31342       47.4819       51.7953    
  17  0.407119     -0.898650      -3.21715       3.21715       48.3828       51.5999    
  18  0.762992E-01  -2.57309      -9.21161       9.21161       48.8185       58.0301    
  19  0.281066      -1.26917      -4.54358       4.54358       48.2589       52.8025    
  20  0.220512      -1.51180      -5.41221       5.41221       47.6585       53.0707    
  21  0.389846     -0.942004      -3.37235       3.37235       47.6508       51.0232    
  22  0.660048     -0.415443      -1.48728       1.48728       48.0744       49.5616    
  23  0.150026      -1.89695      -6.79103       6.79103       48.3547       55.1457    
  24  0.113767      -2.17360      -7.78143       7.78143       48.7895       56.5710    
  25  0.810589     -0.209994     -0.751773      0.751773       48.6182       49.3700    
  26  0.247911      -1.39468      -4.99294       4.99294       48.8766       53.8696    
  27  0.408875     -0.894345      -3.20173       3.20173       48.2399       51.4416    
  28  0.310528      -1.16948      -4.18672       4.18672       47.8226       52.0094    
  29  0.663027     -0.410939      -1.47115       1.47115       48.3863       49.8574    
  30  0.798362     -0.225193     -0.806184      0.806184       48.0121       48.8183    
  31  0.564885     -0.571133      -2.04464       2.04464       47.9426       49.9872    
  32  0.473510E-02  -5.35275      -19.1627       19.1627       47.7675       66.9302    
  33  0.933475E-01  -2.37143      -8.48965       8.48965       47.1804       55.6700    
  34  0.931702     -0.707423E-01 -0.253256      0.253256       47.7893       48.0425    
  35  0.341741      -1.07370      -3.84383       3.84383       47.1344       50.9783    
  36  0.171330      -1.76417      -6.31567       6.31567       48.8082       55.1238    
  37  0.355860      -1.03322      -3.69889       3.69889       49.5314       53.2303    
  38  0.469639     -0.755790      -2.70571       2.70571       48.0552       50.7609    
  39  0.805376     -0.216446     -0.774870      0.774870       47.7162       48.4911    
  40  0.651615     -0.428301      -1.53331       1.53331       48.2681       49.8014    
  41  0.126831      -2.06490      -7.39228       7.39228       48.3066       55.6989    
  42  0.715737     -0.334442      -1.19729       1.19729       47.9061       49.1034    
  43  0.444007     -0.811915      -2.90663       2.90663       48.5919       51.4985    
  44  0.887105     -0.119791     -0.428850      0.428850       49.1186       49.5475    
  45  0.492139     -0.708993      -2.53818       2.53818       52.2522       54.7904    
  46  0.590315     -0.527098      -1.88700       1.88700       47.1953       49.0823    
  47  0.313130      -1.16114      -4.15684       4.15684       48.4295       52.5863    
  48  0.824070     -0.193500     -0.692725      0.692725       47.0527       47.7454    
  49  0.785026     -0.242039     -0.866494      0.866494       47.7477       48.6142    
  50  0.105781      -2.24638      -8.04199       8.04199       47.7233       55.7652    
  51  0.644933     -0.438608      -1.57021       1.57021       47.7332       49.3034    
  52  0.656932     -0.420175      -1.50422       1.50422       50.8673       52.3715    
  53  0.418239     -0.871703      -3.12068       3.12068       48.4120       51.5326    
  54  0.191132      -1.65479      -5.92410       5.92410       48.2507       54.1748    
  55  0.493587     -0.706055      -2.52766       2.52766       48.4284       50.9561    
  56  0.490289     -0.712761      -2.55167       2.55167       48.2724       50.8241    
  57  0.703124     -0.352222      -1.26095       1.26095       48.3329       49.5938    
  58  0.514219E-01  -2.96769      -10.6243       10.6243       49.0191       59.6434    
  59  0.967122     -0.334307E-01 -0.119681      0.119681       47.6468       47.7665    
  60  0.164565      -1.80445      -6.45988       6.45988       49.0408       55.5007    
  61  0.787129     -0.239363     -0.856914      0.856914       47.8839       48.7408    
  62  0.877224     -0.130993     -0.468952      0.468952       50.0105       50.4794    
  63  0.826666     -0.190355     -0.681465      0.681465       48.3164       48.9978    
  64  0.478850     -0.736368      -2.63618       2.63618       49.9618       52.5980    
  65  0.850214E-01  -2.46485      -8.82411       8.82411       55.7179       64.5420    
  66  0.752587     -0.284239      -1.01757       1.01757       47.8405       48.8581    
  67  0.286540      -1.24988      -4.47453       4.47453       48.6655       53.1400    
  68  0.581717     -0.541771      -1.93953       1.93953       48.2592       50.1987    
  69  0.907599     -0.969526E-01 -0.347088      0.347088       47.8510       48.1981    
  70  0.159227      -1.83743      -6.57794       6.57794       48.2116       54.7895    
loop,thermsimp(1:2)       81   4.68708      0.460631    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227         47.78          0.83          1.11         23.82          0.45          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    228         49.67          0.84          1.12         23.82          0.51          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.78
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       81
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       82
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      227     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -15.5468       15.5468       47.2545       62.8013    
   2  0.906957E-01  -2.40025      -8.59282       8.59282       47.0527       55.6455    
   3  0.973677     -0.266758E-01 -0.954989E-01  0.954989E-01   47.6468       47.7423    
   4  0.764409     -0.268653     -0.961770      0.961770       47.7893       48.7510    
   5  0.647718     -0.434300      -1.55478       1.55478       47.7100       49.2648    
   6  0.450945     -0.796410      -2.85113       2.85113       47.8510       50.7022    
   7  0.342138      -1.07254      -3.83967       3.83967       47.3977       51.2374    
   8  0.491560     -0.710170      -2.54239       2.54239       47.7162       50.2586    
   9  0.728901     -0.316218      -1.13205       1.13205       47.7477       48.8797    
  10  0.361124      -1.01853      -3.64633       3.64633       47.7426       51.3890    
  11  0.187026      -1.67651      -6.00186       6.00186       47.8839       53.8858    
  12  0.560514     -0.578901      -2.07245       2.07245       48.0121       50.0846    
  13  0.218776      -1.51971      -5.44051       5.44051       47.8405       53.2810    
  14  0.109271      -2.21392      -7.92578       7.92578       48.3164       56.2422    
  15  0.263420E-01  -3.63659      -13.0189       13.0189       47.1953       60.2142    
  16  0.654642     -0.423667      -1.51672       1.51672       47.9061       49.4228    
  17  0.975959     -0.243343E-01 -0.871161E-01  0.871161E-01   48.1302       48.2173    
  18  0.107212      -2.23295      -7.99390       7.99390       47.7332       55.7271    
  19  0.972340     -0.280494E-01 -0.100416      0.100416       48.0046       48.1050    
  20  0.259158      -1.35032      -4.83410       4.83410       48.6182       53.4523    
  21  0.889970     -0.116568     -0.417309      0.417309       49.1186       49.5359    
  22  0.956672     -0.442943E-01 -0.158572      0.158572       48.0744       48.2329    
  23  0.299261      -1.20644      -4.31902       4.31902       48.3329       52.6519    
  24  0.114836      -2.16425      -7.74796       7.74796       48.2255       55.9735    
  25  0.728848     -0.316291      -1.13231       1.13231       48.2681       49.4004    
  26  0.650336     -0.430267      -1.54034       1.54034       48.3863       49.9266    
  27  0.816983     -0.202137     -0.723647      0.723647       47.9426       48.6662    
  28  0.507860     -0.677550      -2.42561       2.42561       48.2592       50.6848    
  29  0.920661     -0.826634E-01 -0.295933      0.295933       48.6567       48.9527    
  30  0.253772      -1.37132      -4.90929       4.90929       47.7303       52.6396    
  31  0.667512     -0.404198      -1.44702       1.44702       50.0105       51.4575    
  32  0.772715     -0.257844     -0.923077      0.923077       47.8653       48.7884    
  33  0.757620     -0.277573     -0.993705      0.993705       48.0552       49.0489    
  34  0.776421     -0.253060     -0.905950      0.905950       48.2724       49.1784    
  35  0.886642     -0.120314     -0.430722      0.430722       48.4284       48.8592    
  36  0.238693E-01  -3.73516      -13.3718       13.3718       47.1344       60.5062    
  37  0.303957      -1.19087      -4.26329       4.26329       47.6508       51.9141    
  38  0.875267     -0.133226     -0.476947      0.476947       47.2142       47.6911    
  39  0.144246      -1.93624      -6.93168       6.93168       48.3105       55.2422    
  40  0.993963     -0.605564E-02 -0.216790E-01  0.216790E-01   48.2399       48.2615    
  41  0.172168      -1.75928      -6.29819       6.29819       48.5919       54.8901    
  42  0.979713     -0.204952E-01 -0.733724E-01  0.733724E-01   48.4120       48.4853    
  43  0.938694     -0.632658E-01 -0.226490      0.226490       48.3828       48.6092    
  44  0.716061     -0.333990      -1.19568       1.19568       47.4819       48.6776    
  45  0.764601     -0.268402     -0.960872      0.960872       48.3671       49.3280    
  46  0.546951     -0.603396      -2.16014       2.16014       47.8226       49.9828    
  47  0.104442      -2.25912      -8.08759       8.08759       50.8673       58.9549    
  48  0.669980     -0.400508      -1.43381       1.43381       48.4295       49.8633    
  49  0.255048      -1.36630      -4.89133       4.89133       49.9618       54.8532    
  50  0.761153     -0.272921     -0.977050      0.977050       47.9746       48.9517    
  51  0.273269      -1.29730      -4.64430       4.64430       48.2589       52.9032    
  52  0.789047E-01  -2.53951      -9.09140       9.09140       47.6585       56.7499    
  53  0.723703     -0.323374      -1.15767       1.15767       48.6655       49.8231    
  54  0.535422     -0.624699      -2.23641       2.23641       49.5314       51.7678    
  55  0.394266     -0.930730      -3.33199       3.33199       48.8766       52.2086    
  56  0.334209      -1.09599      -3.92361       3.92361       47.5190       51.4426    
  57  0.713084     -0.338156      -1.21059       1.21059       48.2507       49.4612    
  58  0.335811      -1.09121      -3.90649       3.90649       48.2116       52.1181    
  59  0.877329     -0.130873     -0.468523      0.468523       52.2522       52.7208    
  60  0.804760     -0.217212     -0.777613      0.777613       48.8082       49.5858    
  61  0.676806     -0.390371      -1.39752       1.39752       48.3547       49.7522    
  62  0.139025      -1.97310      -7.06366       7.06366       49.0408       56.1044    
  63  0.453238     -0.791339      -2.83297       2.83297       47.1804       50.0133    
  64  0.174629      -1.74509      -6.24739       6.24739       48.3066       54.5540    
  65  0.770625     -0.260553     -0.932773      0.932773       47.7233       48.6560    
  66  0.636484     -0.451797      -1.61742       1.61742       48.7895       50.4069    
  67  0.336462      -1.08927      -3.89956       3.89956       48.8185       52.7181    
  68  0.534955     -0.625573      -2.23953       2.23953       49.0191       51.2587    
  69  0.847446E-01  -2.46811      -8.83578       8.83578       55.7179       64.5537    
  70  0.917274     -0.863490E-01 -0.309127      0.309127       47.7850       48.0941    
loop,thermsimp(1:2)       82   15.5468       8.59282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229         49.55          0.84          1.11         23.82          0.41          0.04         26.23
Just calling func    0   0         26.22


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230         52.85          0.84          1.11         23.82          0.68          0.05         26.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       82
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       83
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      229     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -1.77465       1.77465       47.2142       48.9888    
   2  0.266275      -1.32323      -4.73711       4.73711       47.6468       52.3839    
   3  0.545538     -0.605984      -2.16941       2.16941       47.7850       49.9544    
   4  0.196234      -1.62845      -5.82979       5.82979       48.0046       53.8344    
   5  0.786411     -0.240275     -0.860180      0.860180       48.1302       48.9903    
   6  0.453912     -0.789853      -2.82765       2.82765       48.0744       50.9020    
   7  0.900549     -0.104751     -0.375005      0.375005       48.2399       48.6149    
   8  0.339919      -1.07905      -3.86296       3.86296       48.4120       52.2749    
   9  0.511643     -0.670128      -2.39904       2.39904       48.3828       50.7818    
  10  0.628202     -0.464894      -1.66431       1.66431       47.7233       49.3876    
  11  0.672886E-01  -2.69876      -9.66151       9.66151       47.9426       57.6041    
  12  0.518493     -0.656829      -2.35143       2.35143       47.4819       49.8333    
  13  0.994926     -0.508642E-02 -0.182092E-01  0.182092E-01   47.7893       47.8075    
  14  0.733191     -0.310349      -1.11104       1.11104       47.8653       48.9764    
  15  0.952818     -0.483318E-01 -0.173027      0.173027       48.4284       48.6015    
  16  0.735955     -0.306586      -1.09757       1.09757       47.7477       48.8452    
  17  0.743149     -0.296859      -1.06275       1.06275       47.9746       49.0374    
  18  0.549375     -0.598975      -2.14431       2.14431       48.6567       50.8011    
  19  0.355140      -1.03524      -3.70615       3.70615       48.0552       51.7614    
  20  0.482165     -0.729469      -2.61148       2.61148       48.2724       50.8839    
  21  0.577197     -0.549571      -1.96745       1.96745       47.7100       49.6775    
  22  0.107316E-01  -4.53456      -16.2336       16.2336       48.3671       64.6008    
  23  0.923969     -0.790764E-01 -0.283091      0.283091       48.2681       48.5512    
  24  0.810451     -0.210164     -0.752382      0.752382       47.9061       48.6585    
  25  0.143346      -1.94249      -6.95407       6.95407       48.2507       55.2047    
  26  0.994184     -0.583318E-02 -0.208827E-01  0.208827E-01   49.1186       49.1395    
  27  0.870737     -0.138415     -0.495523      0.495523       48.8082       49.3037    
  28  0.970691     -0.297469E-01 -0.106493      0.106493       48.3547       48.4612    
  29  0.351269      -1.04620      -3.74538       3.74538       48.6655       52.4109    
  30  0.464982     -0.765756      -2.74139       2.74139       48.4295       51.1709    
  31  0.921785     -0.814432E-01 -0.291565      0.291565       48.3863       48.6778    
  32  0.110512      -2.20263      -7.88536       7.88536       47.8226       55.7080    
  33  0.261408      -1.34167      -4.80315       4.80315       47.1804       51.9835    
  34  0.908908     -0.955118E-01 -0.341930      0.341930       48.0121       48.3540    
  35  0.819412     -0.199168     -0.713016      0.713016       47.7162       48.4292    
  36  0.466482     -0.762536      -2.72986       2.72986       48.7895       51.5194    
  37  0.717237     -0.332349      -1.18980       1.18980       48.2592       49.4490    
  38  0.802331     -0.220234     -0.788431      0.788431       47.8510       48.6395    
  39  0.949390     -0.519355E-01 -0.185928      0.185928       47.3977       47.5836    
  40  0.258511      -1.35282      -4.84305       4.84305       49.0191       53.8622    
  41  0.270423      -1.30777      -4.68178       4.68178       47.7426       52.4244    
  42  0.366439      -1.00392      -3.59402       3.59402       47.5190       51.1130    
  43  0.934403     -0.678476E-01 -0.242893      0.242893       50.0105       50.2534    
  44  0.956654     -0.443133E-01 -0.158640      0.158640       49.5314       49.6900    
  45  0.377790     -0.973417      -3.48481       3.48481       47.6508       51.1357    
  46  0.203667      -1.59127      -5.69671       5.69671       48.2116       53.9083    
  47  0.673892     -0.394685      -1.41296       1.41296       48.8766       50.2896    
  48  0.347380      -1.05734      -3.78523       3.78523       47.7303       51.5156    
  49  0.144339      -1.93559      -6.92937       6.92937       48.3329       55.2622    
  50  0.728571     -0.316670      -1.13367       1.13367       48.8185       49.9522    
  51  0.243065      -1.41443      -5.06361       5.06361       52.2522       57.3159    
  52  0.686711     -0.375841      -1.34550       1.34550       48.2589       49.6044    
  53  0.159440      -1.83609      -6.57315       6.57315       47.8405       54.4137    
  54  0.426258     -0.852711      -3.05268       3.05268       48.6182       51.6709    
  55  0.929286     -0.733386E-01 -0.262550      0.262550       47.8839       48.1465    
  56  0.335987E-01  -3.39327      -12.1478       12.1478       48.3066       60.4544    
  57  0.539383     -0.617330      -2.21003       2.21003       49.9618       52.1718    
  58  0.384768     -0.955116      -3.41929       3.41929       48.5919       52.0112    
  59  0.267956      -1.31693      -4.71458       4.71458       48.3105       53.0251    
  60  0.116616      -2.14887      -7.69290       7.69290       47.0527       54.7456    
  61  0.852032     -0.160131     -0.573266      0.573266       47.7332       48.3065    
  62  0.456598     -0.783952      -2.80653       2.80653       48.2255       51.0320    
  63  0.157616      -1.84759      -6.61433       6.61433       49.0408       55.6551    
  64  0.928361     -0.743348E-01 -0.266117      0.266117       48.3164       48.5825    
  65  0.200440      -1.60724      -5.75388       5.75388       47.6585       53.4124    
  66  0.106743      -2.23733      -8.00958       8.00958       50.8673       58.8769    
  67  0.786346     -0.240359     -0.860478      0.860478       47.1953       48.0558    
  68  0.481815     -0.730195      -2.61408       2.61408       47.1344       49.7485    
  69  0.410111     -0.891327      -3.19093       3.19093       47.2545       50.4454    
  70  0.768538     -0.263265     -0.942481      0.942481       49.5451       50.4876    
loop,thermsimp(1:2)       83   1.77465       4.73711    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231         52.76          0.84          1.12         23.86          0.62          0.04         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       83
neval is:      230
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       84
neval is:      230


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      230     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -1.99591       1.99591       47.3977       49.3936    
   2  0.468879     -0.757411      -2.71151       2.71151       47.7893       50.5008    
   3  0.886741E-01  -2.42279      -8.67352       8.67352       47.1953       55.8688    
   4  0.211783      -1.55219      -5.55681       5.55681       47.8839       53.4407    
   5  0.573306     -0.556336      -1.99167       1.99167       47.7332       49.7249    
   6  0.401711     -0.912021      -3.26501       3.26501       48.0121       51.2771    
   7  0.505706     -0.681800      -2.44083       2.44083       47.7162       50.1571    
   8  0.603045     -0.505763      -1.81062       1.81062       48.3547       50.1653    
   9  0.696575     -0.361580      -1.29445       1.29445       48.2681       49.5626    
  10  0.294614      -1.22209      -4.37505       4.37505       48.3164       52.6914    
  11  0.527550     -0.639511      -2.28944       2.28944       48.4284       50.7179    
  12  0.657157     -0.419832      -1.50299       1.50299       48.2399       49.7428    
  13  0.627866     -0.465428      -1.66622       1.66622       47.8510       49.5173    
  14  0.993353E-02  -4.61184      -16.5103       16.5103       47.9061       64.4164    
  15  0.885166E-01  -2.42456      -8.67988       8.67988       48.3863       57.0661    
  16  0.265764      -1.32515      -4.74400       4.74400       47.7477       52.4917    
  17  0.446403     -0.806534      -2.88737       2.88737       47.8653       50.7527    
  18  0.287864      -1.24527      -4.45803       4.45803       47.2142       51.6722    
  19  0.926928E-01  -2.37846      -8.51485       8.51485       48.1302       56.6450    
  20  0.394849     -0.929252      -3.32670       3.32670       47.9746       51.3013    
  21  0.540746     -0.614805      -2.20099       2.20099       49.1186       51.3196    
  22  0.846435     -0.166721     -0.596859      0.596859       48.8082       49.4050    
  23  0.417037     -0.874580      -3.13097       3.13097       47.7233       50.8542    
  24  0.210713      -1.55726      -5.57494       5.57494       48.2592       53.8341    
  25  0.764669     -0.268312     -0.960550      0.960550       48.2589       49.2194    
  26  0.219471E-01  -3.81912      -13.6724       13.6724       47.7100       61.3824    
  27  0.200728      -1.60581      -5.74875       5.74875       49.5314       55.2801    
  28  0.572660     -0.557463      -1.99570       1.99570       47.1344       49.1301    
  29  0.599083E-01  -2.81494      -10.0774       10.0774       47.4819       57.5593    
  30  0.214614      -1.53891      -5.50927       5.50927       48.8185       54.3278    
  31  0.489389     -0.714598      -2.55824       2.55824       47.7850       50.3432    
  32  0.162616      -1.81636      -6.50254       6.50254       50.0105       56.5130    
  33  0.710022     -0.342459      -1.22599       1.22599       48.8766       50.1026    
  34  0.753583     -0.282916      -1.01283       1.01283       47.2545       48.2673    
  35  0.743317     -0.296633      -1.06194       1.06194       49.5451       50.6071    
  36  0.155416      -1.86165      -6.66466       6.66466       48.3828       55.0474    
  37  0.643355     -0.441059      -1.57898       1.57898       48.6567       50.2357    
  38  0.656098     -0.421444      -1.50876       1.50876       48.2724       49.7812    
  39  0.327550      -1.11611      -3.99566       3.99566       48.0744       52.0700    
  40  0.192244      -1.64899      -5.90335       5.90335       48.2255       54.1289    
  41  0.433590     -0.835657      -2.99163       2.99163       47.5190       50.5106    
  42  0.788561     -0.237545     -0.850407      0.850407       47.6508       48.5013    
  43  0.978028     -0.222173E-01 -0.795374E-01  0.795374E-01   48.4295       48.5090    
  44  0.110322      -2.20435      -7.89153       7.89153       47.7303       55.6219    
  45  0.795332     -0.228995     -0.819798      0.819798       48.7895       49.6093    
  46  0.497518E-01  -3.00071      -10.7425       10.7425       48.6182       59.3607    
  47  0.852459     -0.159631     -0.571474      0.571474       48.0552       48.6267    
  48  0.133240      -2.01560      -7.21580       7.21580       47.1804       54.3962    
  49  0.671163     -0.398743      -1.42749       1.42749       48.5919       50.0194    
  50  0.245122      -1.40600      -5.03344       5.03344       49.9618       54.9953    
  51  0.820498     -0.197843     -0.708274      0.708274       48.4120       49.1202    
  52  0.422422     -0.861751      -3.08505       3.08505       47.6468       50.7319    
  53  0.946612E-01  -2.35745      -8.43962       8.43962       48.6655       57.1051    
  54  0.902486     -0.102603     -0.367315      0.367315       47.7426       48.1099    
  55  0.858585     -0.152469     -0.545835      0.545835       48.3105       48.8564    
  56  0.713346     -0.337789      -1.20927       1.20927       47.6585       48.8678    
  57  0.497785     -0.697587      -2.49735       2.49735       48.0046       50.5019    
  58  0.971461     -0.289536E-01 -0.103653      0.103653       49.0191       49.1228    
  59  0.714587     -0.336051      -1.20305       1.20305       48.2116       49.4146    
  60  0.194565E-01  -3.93958      -14.1036       14.1036       47.8405       61.9441    
  61  0.675786E-01  -2.69446      -9.64611       9.64611       47.0527       56.6988    
  62  0.924162     -0.788681E-01 -0.282346      0.282346       48.2507       48.5330    
  63  0.988536     -0.115299E-01 -0.412766E-01  0.412766E-01   48.3329       48.3742    
  64  0.136917      -1.98838      -7.11835       7.11835       49.0408       56.1591    
  65  0.529964     -0.634945      -2.27309       2.27309       47.8226       50.0957    
  66  0.369278     -0.996204      -3.56639       3.56639       52.2522       55.8186    
  67  0.186364      -1.68006      -6.01456       6.01456       47.9426       53.9571    
  68  0.314345      -1.15726      -4.14298       4.14298       50.8673       55.0103    
  69  0.451257     -0.795718      -2.84865       2.84865       48.3066       51.1552    
  70  0.194510      -1.63727      -5.86140       5.86140       52.7556       58.6170    
loop,thermsimp(1:2)       84   1.99591       2.71151    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    232         47.46          0.84          1.12         23.84          0.45          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    233         48.14          0.84          1.12         23.85          0.52          0.04         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       84
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       85
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      232     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -5.80680       5.80680       47.7426       53.5494    
   2  0.793097     -0.231809     -0.829872      0.829872       47.2545       48.0844    
   3  0.261081      -1.34293      -4.80764       4.80764       48.3329       53.1405    
   4  0.912198     -0.918984E-01 -0.328994      0.328994       47.6508       47.9798    
   5  0.493539     -0.706153      -2.52801       2.52801       48.4295       50.9575    
   6  0.721001     -0.327115      -1.17106       1.17106       48.2507       49.4217    
   7  0.578790     -0.546816      -1.95759       1.95759       48.0552       50.0128    
   8  0.684127     -0.379612      -1.35900       1.35900       48.3105       49.6695    
   9  0.627712     -0.465674      -1.66710       1.66710       47.6585       49.3256    
  10  0.858540     -0.152522     -0.546025      0.546025       48.4120       48.9580    
  11  0.712254E-01  -2.64191      -9.45796       9.45796       49.0191       58.4771    
  12  0.927250     -0.755316E-01 -0.270401      0.270401       47.1344       47.4048    
  13  0.458073     -0.780727      -2.79498       2.79498       48.2589       51.0539    
  14  0.940004     -0.618714E-01 -0.221498      0.221498       47.3977       47.6192    
  15  0.322549      -1.13150      -4.05074       4.05074       48.8082       52.8589    
  16  0.939473     -0.624358E-01 -0.223519      0.223519       48.2116       48.4351    
  17  0.726080     -0.320095      -1.14593       1.14593       47.8510       48.9970    
  18  0.602088E-02  -5.11252      -18.3027       18.3027       48.2681       66.5708    
  19  0.735289     -0.307492      -1.10081       1.10081       48.7895       49.8903    
  20  0.847617     -0.165326     -0.591865      0.591865       47.7332       48.3251    
  21  0.747190E-01  -2.59402      -9.28653       9.28653       48.2399       57.5264    
  22  0.248374      -1.39282      -4.98625       4.98625       48.2724       53.2587    
  23  0.350184      -1.04930      -3.75645       3.75645       48.5919       52.3483    
  24  0.327739E-03  -8.02329      -28.7232       28.7232       47.8226       76.5458    
  25  0.130012      -2.04013      -7.30361       7.30361       48.8766       56.1803    
  26  0.609791     -0.494639      -1.77080       1.77080       47.7162       49.4870    
  27  0.793414     -0.231410     -0.828443      0.828443       48.3547       49.1831    
  28  0.962567     -0.381519E-01 -0.136583      0.136583       48.6567       48.7933    
  29  0.499469     -0.694211      -2.48526       2.48526       47.7850       50.2702    
  30  0.887491     -0.119357     -0.427296      0.427296       47.7893       48.2166    
  31  0.136374      -1.99236      -7.13258       7.13258       48.0046       55.1372    
  32  0.292356      -1.22978      -4.40259       4.40259       47.5190       51.9216    
  33  0.301564      -1.19877      -4.29158       4.29158       49.5451       53.8367    
  34  0.352543      -1.04258      -3.73242       3.73242       48.4284       52.1609    
  35  0.483726     -0.726236      -2.59991       2.59991       47.6468       50.2467    
  36  0.410499     -0.890381      -3.18754       3.18754       47.8653       51.0529    
  37  0.458111     -0.780644      -2.79469       2.79469       47.7233       50.5179    
  38  0.670071     -0.400372      -1.43332       1.43332       48.3066       49.7399    
  39  0.175486      -1.74020      -6.22986       6.22986       48.0121       54.2420    
  40  0.798907     -0.224511     -0.803743      0.803743       47.9746       48.7784    
  41  0.270487      -1.30753      -4.68094       4.68094       49.1186       53.7996    
  42  0.480368     -0.733202      -2.62484       2.62484       47.2142       49.8390    
  43  0.658406     -0.417933      -1.49619       1.49619       48.0744       49.5705    
  44  0.937976     -0.640304E-01 -0.229227      0.229227       47.7477       47.9769    
  45  0.710083     -0.342373      -1.22569       1.22569       48.3164       49.5421    
  46  0.567340     -0.566797      -2.02912       2.02912       47.8839       49.9130    
  47  0.201426      -1.60233      -5.73631       5.73631       48.2592       53.9955    
  48  0.660313     -0.415042      -1.48584       1.48584       47.9426       49.4284    
  49  0.524008     -0.646249      -2.31356       2.31356       48.2255       50.5391    
  50  0.513616     -0.666280      -2.38527       2.38527       48.8185       51.2038    
  51  0.951218     -0.500122E-01 -0.179043      0.179043       47.1804       47.3594    
  52  0.703465     -0.351737      -1.25921       1.25921       49.9618       51.2210    
  53  0.702859     -0.352600      -1.26230       1.26230       50.8673       52.1296    
  54  0.453067     -0.791715      -2.83432       2.83432       48.3828       51.2171    
  55  0.202116      -1.59891      -5.72407       5.72407       49.5314       55.2554    
  56  0.491988     -0.709301      -2.53928       2.53928       47.7303       50.2696    
  57  0.632131     -0.458659      -1.64199       1.64199       52.2522       53.8942    
  58  0.911086     -0.931178E-01 -0.333359      0.333359       47.1953       47.5286    
  59  0.888750     -0.117939     -0.422220      0.422220       49.0408       49.4630    
  60  0.468235     -0.758785      -2.71643       2.71643       50.0105       52.7269    
  61  0.971366     -0.290520E-01 -0.104006      0.104006       48.1302       48.2342    
  62  0.622947     -0.473294      -1.69438       1.69438       47.0527       48.7471    
  63  0.837000     -0.177932     -0.636991      0.636991       48.3863       49.0233    
  64  0.495636     -0.701913      -2.51283       2.51283       48.6655       51.1783    
  65  0.251386      -1.38077      -4.94311       4.94311       47.4819       52.4250    
  66  0.580065E-01  -2.84720      -10.1929       10.1929       52.7556       62.9485    
  67  0.601569     -0.508214      -1.81939       1.81939       48.6182       50.4376    
  68  0.249260      -1.38926      -4.97351       4.97351       47.7100       52.6835    
  69  0.309647E-01  -3.47491      -12.4401       12.4401       47.8405       60.2806    
  70  0.653539     -0.425353      -1.52275       1.52275       47.4622       48.9850    
loop,thermsimp(1:2)       85   5.80680      0.829872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    234         48.46          0.84          1.12         23.81          0.48          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    235         50.28          0.84          1.12         23.82          0.46          0.04         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       85
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       86
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      234     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -2.74217       2.74217       47.1804       49.9225    
   2  0.948887     -0.524654E-01 -0.187825      0.187825       47.1344       47.3223    
   3  0.532332     -0.630488      -2.25713       2.25713       47.1953       49.4524    
   4  0.374267     -0.982785      -3.51835       3.51835       47.3977       50.9161    
   5  0.694531     -0.364519      -1.30497       1.30497       47.7477       49.0526    
   6  0.414371     -0.880994      -3.15394       3.15394       47.6508       50.8048    
   7  0.208827E-01  -3.86883      -13.8503       13.8503       47.2545       61.1048    
   8  0.627187     -0.466511      -1.67010       1.67010       47.7893       49.4594    
   9  0.148799E-01  -4.20774      -15.0636       15.0636       48.1302       63.1938    
  10  0.809008     -0.211946     -0.758762      0.758762       47.7332       48.4920    
  11  0.647680     -0.434359      -1.55499       1.55499       48.2116       49.7666    
  12  0.289351      -1.24012      -4.43959       4.43959       47.0527       51.4923    
  13  0.222457      -1.50302      -5.38078       5.38078       47.9746       53.3554    
  14  0.374268     -0.982782      -3.51834       3.51834       48.6567       52.1751    
  15  0.785765     -0.241097     -0.863122      0.863122       48.4120       49.2751    
  16  0.298051      -1.21049      -4.33353       4.33353       47.4622       51.7958    
  17  0.725075     -0.321480      -1.15089       1.15089       47.8510       49.0019    
  18  0.386364     -0.950976      -3.40447       3.40447       48.3863       51.7907    
  19  0.631686     -0.459363      -1.64451       1.64451       48.3547       49.9992    
  20  0.688282     -0.373557      -1.33733       1.33733       47.6585       48.9958    
  21  0.373817     -0.983990      -3.52266       3.52266       48.2507       51.7733    
  22  0.219845      -1.51483      -5.42307       5.42307       47.9426       53.3656    
  23  0.926271     -0.765889E-01 -0.274186      0.274186       49.0408       49.3150    
  24  0.618127     -0.481061      -1.72219       1.72219       47.7162       49.4384    
  25  0.176216      -1.73604      -6.21499       6.21499       48.3164       54.5314    
  26  0.742943     -0.297136      -1.06374       1.06374       48.0744       49.1381    
  27  0.357690      -1.02809      -3.68053       3.68053       48.3105       51.9911    
  28  0.478359     -0.737394      -2.63985       2.63985       48.3066       50.9464    
  29  0.395976     -0.926401      -3.31649       3.31649       47.2142       50.5307    
  30  0.803186     -0.219169     -0.784620      0.784620       48.7895       49.5741    
  31  0.231845      -1.46168      -5.23279       5.23279       47.8839       53.1167    
  32  0.808968     -0.211996     -0.758941      0.758941       48.0552       48.8142    
  33  0.579217     -0.546078      -1.95494       1.95494       47.6468       49.6018    
  34  0.384357     -0.956183      -3.42311       3.42311       47.7303       51.1535    
  35  0.856367     -0.155057     -0.555099      0.555099       47.7850       48.3401    
  36  0.265661      -1.32553      -4.74537       4.74537       48.6182       53.3636    
  37  0.288915      -1.24162      -4.44498       4.44498       47.7233       52.1682    
  38  0.224915      -1.49203      -5.34144       5.34144       48.2255       53.5669    
  39  0.685944     -0.376959      -1.34951       1.34951       48.4295       49.7790    
  40  0.265936      -1.32450      -4.74167       4.74167       47.8653       52.6070    
  41  0.412966     -0.884389      -3.16609       3.16609       48.2589       51.4250    
  42  0.440796     -0.819173      -2.93262       2.93262       48.6655       51.5981    
  43  0.572522     -0.557705      -1.99657       1.99657       48.8185       50.8151    
  44  0.798412     -0.225131     -0.805964      0.805964       48.3828       49.1887    
  45  0.127097      -2.06281      -7.38479       7.38479       49.9618       57.3466    
  46  0.243397      -1.41306      -5.05873       5.05873       47.5190       52.5777    
  47  0.322195      -1.13260      -4.05467       4.05467       50.8673       54.9219    
  48  0.512728     -0.668011      -2.39146       2.39146       48.4284       50.8199    
  49  0.786191     -0.240556     -0.861184      0.861184       48.5919       49.4531    
  50  0.733079     -0.310501      -1.11159       1.11159       47.4819       48.5935    
  51  0.601364     -0.508554      -1.82061       1.82061       47.7100       49.5306    
  52  0.348529      -1.05403      -3.77341       3.77341       50.0105       53.7839    
  53  0.923986     -0.790584E-01 -0.283027      0.283027       48.8082       49.0912    
  54  0.843742     -0.169908     -0.608267      0.608267       48.3329       48.9411    
  55  0.723581     -0.323543      -1.15828       1.15828       48.2724       49.4307    
  56  0.378158     -0.972444      -3.48132       3.48132       47.7426       51.2240    
  57  0.463644     -0.768638      -2.75171       2.75171       49.1186       51.8703    
  58  0.427569     -0.849641      -3.04169       3.04169       49.5451       52.5868    
  59  0.235852      -1.44455      -5.17145       5.17145       52.2522       57.4237    
  60  0.203797      -1.59063      -5.69441       5.69441       48.2592       53.9536    
  61  0.146982E-02  -6.52261      -23.3508       23.3508       48.0121       71.3629    
  62  0.681525     -0.383422      -1.37264       1.37264       48.0046       49.3772    
  63  0.931276     -0.711992E-01 -0.254891      0.254891       49.5314       49.7863    
  64  0.581849     -0.541545      -1.93872       1.93872       48.8766       50.8154    
  65  0.652684     -0.426663      -1.52744       1.52744       48.2399       49.7673    
  66  0.388365     -0.945809      -3.38597       3.38597       49.0191       52.4051    
  67  0.216086      -1.53208      -5.48480       5.48480       47.8405       53.3253    
  68  0.409967     -0.891679      -3.19219       3.19219       52.7556       55.9478    
  69  0.440345     -0.820196      -2.93628       2.93628       48.2681       51.2044    
  70  0.507524E-01  -2.98080      -10.6712       10.6712       48.4558       59.1270    
loop,thermsimp(1:2)       86   2.74217      0.187825    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236         47.56          0.83          1.12         23.87          0.50          0.05         26.36
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    237         48.84          0.84          1.12         23.90          0.82          0.05         26.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       86
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       87
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      236     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -6.08035       6.08035       47.1344       53.2148    
   2  0.721345     -0.326637      -1.16935       1.16935       47.7850       48.9543    
   3  0.842493     -0.171390     -0.613570      0.613570       47.7332       48.3468    
   4  0.260540      -1.34500      -4.81506       4.81506       47.4819       52.2970    
   5  0.782605     -0.245127     -0.877549      0.877549       48.0552       48.9328    
   6  0.208492      -1.56785      -5.61288       5.61288       48.3329       53.9458    
   7  0.290568E-01  -3.53850      -12.6677       12.6677       47.6585       60.3262    
   8  0.673682     -0.394997      -1.41408       1.41408       47.8510       49.2651    
   9  0.399393     -0.917808      -3.28573       3.28573       47.7477       51.0334    
  10  0.966971     -0.335863E-01 -0.120238      0.120238       48.8082       48.9284    
  11  0.390645     -0.939956      -3.36502       3.36502       48.0744       51.4394    
  12  0.259548      -1.34881      -4.82872       4.82872       48.3828       53.2115    
  13  0.260765      -1.34413      -4.81197       4.81197       48.4120       53.2239    
  14  0.110601E-01  -4.50441      -16.1257       16.1257       49.0408       65.1665    
  15  0.727710     -0.317852      -1.13790       1.13790       48.0046       49.1425    
  16  0.717076     -0.332574      -1.19061       1.19061       48.2724       49.4630    
  17  0.612129     -0.490811      -1.75709       1.75709       47.7162       49.4733    
  18  0.589376     -0.528691      -1.89270       1.89270       47.1953       49.0880    
  19  0.541615     -0.613199      -2.19524       2.19524       48.5919       50.7871    
  20  0.330403      -1.10744      -3.96461       3.96461       47.7893       51.7539    
  21  0.229530      -1.47172      -5.26872       5.26872       47.7100       52.9787    
  22  0.564010     -0.572684      -2.05019       2.05019       48.7895       50.8397    
  23  0.454226     -0.789161      -2.82518       2.82518       47.6468       50.4720    
  24  0.579528     -0.545541      -1.95302       1.95302       48.2116       50.1646    
  25  0.245500      -1.40446      -5.02793       5.02793       48.2399       53.2678    
  26  0.708019     -0.345284      -1.23611       1.23611       48.4295       49.6656    
  27  0.300215      -1.20326      -4.30763       4.30763       49.5314       53.8390    
  28  0.721461     -0.326478      -1.16878       1.16878       47.1804       48.3491    
  29  0.326772      -1.11849      -4.00418       4.00418       48.3547       52.3589    
  30  0.580879     -0.543212      -1.94469       1.94469       47.2142       49.1589    
  31  0.963075     -0.376241E-01 -0.134693      0.134693       47.6508       47.7855    
  32  0.656935     -0.420170      -1.50420       1.50420       48.8185       50.3227    
  33  0.908335     -0.961416E-01 -0.344184      0.344184       48.8766       49.2208    
  34  0.765938     -0.266654     -0.954616      0.954616       48.4284       49.3831    
  35  0.497301     -0.698561      -2.50083       2.50083       47.3977       49.8985    
  36  0.833603     -0.181997     -0.651546      0.651546       48.3066       48.9581    
  37  0.433057     -0.836886      -2.99603       2.99603       47.7303       50.7264    
  38  0.349547      -1.05112      -3.76297       3.76297       48.2681       52.0311    
  39  0.142838      -1.94604      -6.96679       6.96679       47.7426       54.7094    
  40  0.326780      -1.11847      -4.00409       4.00409       48.2589       52.2630    
  41  0.707709     -0.345723      -1.23768       1.23768       47.0527       48.2904    
  42  0.914339     -0.895538E-01 -0.320600      0.320600       48.6655       48.9861    
  43  0.392800     -0.934454      -3.34532       3.34532       48.2507       51.5960    
  44  0.434772     -0.832933      -2.98188       2.98188       48.3863       51.3681    
  45  0.229545      -1.47165      -5.26849       5.26849       47.4622       52.7307    
  46  0.661281     -0.413577      -1.48060       1.48060       49.1186       50.5992    
  47  0.459966     -0.776602      -2.78022       2.78022       48.3105       51.0907    
  48  0.352439      -1.04288      -3.73347       3.73347       47.7233       51.4567    
  49  0.490345     -0.712647      -2.55126       2.55126       48.6567       51.2080    
  50  0.837788     -0.176990     -0.633620      0.633620       49.0191       49.6528    
  51  0.247493      -1.39637      -4.99898       4.99898       47.5190       52.5180    
  52  0.221382      -1.50787      -5.39813       5.39813       49.5451       54.9433    
  53  0.374412     -0.982399      -3.51696       3.51696       47.8653       51.3823    
  54  0.170580      -1.76855      -6.33136       6.33136       47.8839       54.2153    
  55  0.464054     -0.767755      -2.74854       2.74854       47.8405       50.5891    
  56  0.936961     -0.651140E-01 -0.233107      0.233107       47.9746       48.2077    
  57  0.302357      -1.19615      -4.28217       4.28217       48.6182       52.9004    
  58  0.572748E-01  -2.85990      -10.2384       10.2384       47.9426       58.1809    
  59  0.495156     -0.702883      -2.51630       2.51630       48.2255       50.7418    
  60  0.101162      -2.29104      -8.20186       8.20186       50.0105       58.2123    
  61  0.786435E-02  -4.84542      -17.3465       17.3465       48.2592       65.6057    
  62  0.960492     -0.403100E-01 -0.144309      0.144309       48.3164       48.4607    
  63  0.902616     -0.102458     -0.366798      0.366798       50.8673       51.2341    
  64  0.646986     -0.435430      -1.55883       1.55883       52.7556       54.3145    
  65  0.218936      -1.51897      -5.43789       5.43789       49.9618       55.3997    
  66  0.491829     -0.709625      -2.54044       2.54044       52.2522       54.7927    
  67  0.873324     -0.135448     -0.484902      0.484902       48.4558       48.9407    
  68  0.419066     -0.869727      -3.11360       3.11360       47.2545       50.3681    
  69  0.390022     -0.941553      -3.37074       3.37074       48.1302       51.5009    
  70  0.843189     -0.170564     -0.610614      0.610614       47.5631       48.1737    
loop,thermsimp(1:2)       87   6.08035       1.16935    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238         48.58          0.84          1.12         23.82          0.47          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    239         57.66          0.84          1.12         23.82          0.46          0.04         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       87
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       88
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      238     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -5.41761       5.41761       47.6508       53.0685    
   2  0.246752E-01  -3.70196      -13.2529       13.2529       47.5631       60.8160    
   3  0.679039     -0.387076      -1.38572       1.38572       47.9746       49.3604    
   4  0.709027     -0.343862      -1.23102       1.23102       47.0527       48.2837    
   5  0.577754     -0.548608      -1.96400       1.96400       47.7332       49.6972    
   6  0.738694     -0.302871      -1.08427       1.08427       47.1804       48.2646    
   7  0.181723      -1.70527      -6.10483       6.10483       48.3164       54.4212    
   8  0.103748      -2.26579      -8.11147       8.11147       48.8082       56.9196    
   9  0.456811E-02  -5.38866      -19.2913       19.2913       48.0552       67.3465    
  10  0.303247      -1.19321      -4.27165       4.27165       48.4558       52.7274    
  11  0.284736      -1.25619      -4.49714       4.49714       47.7850       52.2821    
  12  0.900494     -0.104812     -0.375224      0.375224       48.3066       48.6818    
  13  0.691792     -0.368470      -1.31911       1.31911       48.6655       49.9846    
  14  0.502714     -0.687735      -2.46207       2.46207       47.1953       49.6574    
  15  0.305219      -1.18673      -4.24845       4.24845       48.0046       52.2531    
  16  0.412005     -0.886720      -3.17444       3.17444       47.2142       50.3886    
  17  0.412225     -0.886186      -3.17252       3.17252       48.8766       52.0492    
  18  0.121697      -2.10622      -7.54023       7.54023       47.8510       55.3913    
  19  0.465374     -0.764915      -2.73838       2.73838       48.4284       51.1668    
  20  0.273016      -1.29823      -4.64761       4.64761       48.2724       52.9200    
  21  0.502763     -0.687636      -2.46172       2.46172       47.7162       50.1779    
  22  0.516442     -0.660793      -2.36562       2.36562       49.0191       51.3848    
  23  0.554333     -0.589990      -2.11215       2.11215       48.4295       50.5416    
  24  0.192397E-01  -3.95078      -14.1437       14.1437       47.3977       61.5414    
  25  0.451279E-01  -3.09825      -11.0917       11.0917       48.2116       59.3032    
  26  0.457340     -0.782327      -2.80071       2.80071       48.8185       51.6192    
  27  0.325184      -1.12336      -4.02161       4.02161       47.2545       51.2761    
  28  0.700952     -0.355315      -1.27202       1.27202       47.6468       48.9188    
  29  0.961087     -0.396906E-01 -0.142091      0.142091       47.8405       47.9826    
  30  0.195966E-02  -6.23498      -22.3211       22.3211       49.1186       71.4397    
  31  0.766376     -0.266082     -0.952569      0.952569       47.7303       48.6829    
  32  0.398846     -0.919180      -3.29064       3.29064       48.2255       51.5161    
  33  0.675249     -0.392674      -1.40576       1.40576       48.5919       49.9976    
  34  0.189468      -1.66354      -5.95542       5.95542       48.7895       54.7449    
  35  0.444608     -0.810562      -2.90179       2.90179       47.7477       50.6495    
  36  0.514006     -0.665520      -2.38254       2.38254       48.3105       50.6931    
  37  0.575199     -0.553039      -1.97987       1.97987       48.6567       50.6366    
  38  0.121449      -2.10826      -7.54753       7.54753       50.8673       58.4148    
  39  0.209130      -1.56480      -5.60194       5.60194       48.3863       53.9882    
  40  0.466284E-01  -3.06555      -10.9746       10.9746       47.8653       58.8399    
  41  0.386630E-01  -3.25287      -11.6452       11.6452       48.0744       59.7196    
  42  0.335751E-01  -3.39397      -12.1503       12.1503       47.7233       59.8736    
  43  0.878126     -0.129965     -0.465272      0.465272       48.1302       48.5954    
  44  0.652938     -0.426273      -1.52605       1.52605       48.2507       49.7767    
  45  0.932456E-01  -2.37252      -8.49356       8.49356       47.7893       56.2828    
  46  0.662683     -0.411458      -1.47301       1.47301       48.2681       49.7411    
  47  0.204704      -1.58619      -5.67853       5.67853       48.2589       53.9374    
  48  0.985446     -0.146609E-01 -0.524857E-01  0.524857E-01   47.4819       47.5344    
  49  0.105847      -2.24576      -8.03976       8.03976       48.3547       56.3945    
  50  0.843201     -0.170550     -0.610564      0.610564       47.5190       48.1295    
  51  0.364087      -1.01036      -3.61707       3.61707       47.4622       51.0793    
  52  0.650651E-01  -2.73237      -9.78181       9.78181       48.6182       58.4001    
  53  0.968103     -0.324171E-01 -0.116052      0.116052       47.7100       47.8261    
  54  0.131933      -2.02546      -7.25109       7.25109       48.3828       55.6338    
  55  0.906847     -0.977815E-01 -0.350055      0.350055       47.1344       47.4845    
  56  0.443328E-01  -3.11603      -11.1553       11.1553       48.4120       59.5673    
  57  0.507045     -0.679156      -2.43136       2.43136       48.2399       50.6712    
  58  0.287709      -1.24581      -4.45996       4.45996       49.5314       53.9913    
  59  0.900299     -0.105028     -0.375999      0.375999       48.3329       48.7089    
  60  0.689829E-01  -2.67390      -9.57248       9.57248       47.8839       57.4564    
  61  0.876407     -0.131925     -0.472288      0.472288       52.7556       53.2279    
  62  0.718081     -0.331173      -1.18559       1.18559       47.7426       48.9282    
  63  0.177063      -1.73125      -6.19784       6.19784       52.2522       58.4501    
  64  0.749425E-01  -2.59103      -9.27584       9.27584       49.5451       58.8210    
  65  0.136072      -1.99457      -7.14051       7.14051       49.9618       57.1023    
  66  0.662610     -0.411569      -1.47341       1.47341       47.9426       49.4160    
  67  0.612646     -0.489969      -1.75408       1.75408       50.0105       51.7646    
  68  0.258380      -1.35332      -4.84487       4.84487       47.6585       52.5034    
  69  0.406590     -0.899949      -3.22180       3.22180       49.0408       52.2626    
  70  0.889463     -0.117137     -0.419349      0.419349       48.5836       49.0029    
loop,thermsimp(1:2)       88   5.41761       13.2529    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240         47.61          0.84          1.12         23.84          0.48          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    241         53.84          0.84          1.12         23.84          0.46          0.04         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    53.837        1.177     -1.857      3.372     -102.6      1.366    
                      0.1540      1.178     -99.70      3.893    -0.8308E-02

                       2.218    -0.9019      1.530      5831.      3472.    

                     -0.2561      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6127.      677.8    

                       1.433     -5.904     -4.116     -8.215      6.548    

                      -15.19     -3.736      8326.      0.000      9750.    



                       1407.     0.1138E+05 -3637.      5455.      6082.    

                       5250.     0.2452E-01 0.1382     0.1925E-02 0.1538    

                     -0.2486    -0.9017E-01 0.1819     0.1113     0.5897E-01



                     -0.6494    -0.7854      0.000     0.1372    -0.7941E-01

                      0.1925E-02 0.1057    -0.7116    -0.1493     0.3592E-01

                      0.4708E-01-0.8630E-01-0.6600     -1.210      7135.    



                      -1.027     -1.225     -2.283     -2.406    -0.3807    

                     -0.3252      10.09      8.636    -0.1914E+05 -4.000    

                     -0.7072     -2.199      9.295      8.866    -0.1908E+05



                      -4.000     0.4393    -0.4692      8.811      9.090    

                     -0.1908E+05 -7.000    -0.7756    -0.7062      8.984    

                       8.769    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       88
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       89
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      240     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521     -0.470843      0.470843       47.1344       47.6053    
   2  0.765270     -0.267527     -0.957740      0.957740       47.4819       48.4396    
   3  0.215687      -1.53393      -5.49143       5.49143       47.7100       53.2014    
   4  0.999601E-01  -2.30298      -8.24462       8.24462       47.8405       56.0851    
   5  0.706519     -0.347405      -1.24370       1.24370       47.5190       48.7627    
   6  0.201358      -1.60267      -5.73753       5.73753       47.1804       52.9179    
   7  0.450677     -0.797005      -2.85326       2.85326       47.0527       49.9060    
   8  0.897557     -0.108078     -0.386918      0.386918       48.1302       48.5171    
   9  0.161166      -1.82532      -6.53459       6.53459       48.3066       54.8412    
  10  0.972556E-01  -2.33041      -8.34282       8.34282       47.7303       56.0732    
  11  0.742112     -0.298255      -1.06774       1.06774       48.3329       49.4006    
  12  0.172377      -1.75807      -6.29385       6.29385       47.6468       53.9407    
  13  0.658751     -0.417410      -1.49432       1.49432       47.7426       49.2369    
  14  0.725340     -0.321114      -1.14958       1.14958       48.5836       49.7332    
  15  0.501488     -0.690175      -2.47081       2.47081       47.9746       50.4454    
  16  0.845372     -0.167978     -0.601359      0.601359       47.9426       48.5439    
  17  0.132369      -2.02216      -7.23928       7.23928       47.1953       54.4346    
  18  0.734515E-01  -2.61113      -9.34778       9.34778       47.7332       57.0810    
  19  0.391205     -0.938523      -3.35989       3.35989       48.2681       51.6280    
  20  0.376983     -0.975555      -3.49246       3.49246       48.2507       51.7431    
  21  0.315463      -1.15371      -4.13026       4.13026       48.6655       52.7957    
  22  0.267113      -1.32008      -4.72587       4.72587       48.5919       53.3177    
  23  0.965292     -0.353243E-01 -0.126460      0.126460       47.7162       47.8427    
  24  0.954592     -0.464714E-01 -0.166367      0.166367       47.2142       47.3805    
  25  0.992414     -0.761515E-02 -0.272621E-01  0.272621E-01   48.4295       48.4567    
  26  0.867953E-02  -4.74679      -16.9934       16.9934       48.6567       65.6501    
  27  0.829585     -0.186829     -0.668844      0.668844       47.7477       48.4165    
  28  0.349695      -1.05069      -3.76146       3.76146       48.2399       52.0013    
  29  0.673511     -0.395251      -1.41499       1.41499       48.3105       49.7255    
  30  0.340696      -1.07676      -3.85479       3.85479       47.4622       51.3170    
  31  0.558731     -0.582087      -2.08386       2.08386       48.4284       50.5123    
  32  0.747295     -0.291295      -1.04283       1.04283       47.2545       48.2973    
  33  0.123287      -2.09324      -7.49376       7.49376       49.0191       56.5129    
  34  0.355051      -1.03549      -3.70704       3.70704       48.2255       51.9325    
  35  0.511895     -0.669636      -2.39728       2.39728       48.8185       51.2158    
  36  0.571856E-01  -2.86145      -10.2439       10.2439       50.0105       60.2544    
  37  0.507517     -0.678226      -2.42803       2.42803       48.8766       51.3047    
  38  0.326770      -1.11850      -4.00419       4.00419       48.0046       52.0088    
  39  0.736001     -0.306523      -1.09735       1.09735       49.0408       50.1381    
  40  0.970046     -0.304120E-01 -0.108874      0.108874       47.7850       47.8938    
  41  0.673510     -0.395253      -1.41499       1.41499       47.6585       49.0735    
  42  0.335032      -1.09353      -3.91481       3.91481       48.4558       52.3706    
  43  0.872321E-01  -2.43918      -8.73221       8.73221       48.2724       57.0046    
  44  0.749956     -0.287741      -1.03010       1.03010       47.6508       48.6809    
  45  0.159001      -1.83884      -6.58302       6.58302       52.7556       59.3387    
  46  0.529687     -0.635468      -2.27496       2.27496       48.2589       50.5338    
  47  0.142415      -1.94901      -6.97740       6.97740       48.3863       55.3637    
  48  0.803387     -0.218919     -0.783723      0.783723       49.5314       50.3151    
  49  0.709133     -0.343713      -1.23048       1.23048       48.3164       49.5469    
  50  0.261172      -1.34258      -4.80639       4.80639       48.7895       53.5959    
  51  0.106599      -2.23868      -8.01443       8.01443       47.8510       55.8655    
  52  0.955666     -0.453468E-01 -0.162340      0.162340       48.3828       48.5451    
  53  0.376236     -0.977539      -3.49956       3.49956       47.7893       51.2888    
  54  0.890774     -0.115665     -0.414078      0.414078       48.3547       48.7688    
  55  0.554077     -0.590452      -2.11380       2.11380       48.8082       50.9220    
  56  0.892825E-01  -2.41595      -8.64904       8.64904       49.9618       58.6109    
  57  0.941033     -0.607774E-01 -0.217582      0.217582       47.8839       48.1015    
  58  0.209380E-01  -3.86619      -13.8409       13.8409       48.6182       62.4591    
  59  0.427794     -0.849113      -3.03980       3.03980       50.8673       53.9071    
  60  0.194887      -1.63533      -5.85446       5.85446       52.2522       58.1067    
  61  0.840289     -0.174009     -0.622948      0.622948       49.5451       50.1681    
  62  0.634527     -0.454875      -1.62844       1.62844       47.8653       49.4938    
  63  0.159135      -1.83800      -6.57999       6.57999       48.2116       54.7916    
  64  0.182987      -1.69834      -6.08001       6.08001       48.4120       54.4920    
  65  0.520726     -0.652532      -2.33605       2.33605       48.0744       50.4104    
  66  0.249623      -1.38781      -4.96831       4.96831       47.7233       52.6916    
  67  0.801631     -0.221107     -0.791557      0.791557       47.5631       48.3546    
  68  0.329011      -1.11166      -3.97973       3.97973       47.3977       51.3774    
  69  0.995152     -0.485930E-02 -0.173962E-01  0.173962E-01   48.0552       48.0726    
  70  0.187107      -1.67607      -6.00030       6.00030       47.6108       53.6111    
loop,thermsimp(1:2)       89  0.470843      0.957740    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242         49.05          0.84          1.12         23.84          0.57          0.04         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.05
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       89
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       90
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      241     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -6.61990       6.61990       47.2142       53.8341    
   2  0.894146     -0.111886     -0.400548      0.400548       47.1344       47.5350    
   3  0.721270     -0.326741      -1.16973       1.16973       47.7162       48.8860    
   4  0.536866     -0.622006      -2.22677       2.22677       47.7850       50.0117    
   5  0.418107     -0.872017      -3.12180       3.12180       48.0552       51.1770    
   6  0.391189     -0.938564      -3.36004       3.36004       47.8839       51.2440    
   7  0.799669     -0.223558     -0.800331      0.800331       47.2545       48.0548    
   8  0.595070     -0.519076      -1.85828       1.85828       47.5631       49.4214    
   9  0.384356E-03  -7.86394      -28.1527       28.1527       47.7477       75.9004    
  10  0.654302     -0.424187      -1.51858       1.51858       47.4819       49.0005    
  11  0.873355     -0.135413     -0.484776      0.484776       48.4295       48.9143    
  12  0.303212      -1.19332      -4.27206       4.27206       48.1302       52.4022    
  13  0.434159     -0.834344      -2.98693       2.98693       47.9426       50.9295    
  14  0.970825     -0.296089E-01 -0.105999      0.105999       48.3828       48.4888    
  15  0.405896     -0.901659      -3.22792       3.22792       47.6508       50.8788    
  16  0.250423      -1.38461      -4.95685       4.95685       47.5190       52.4758    
  17  0.517030     -0.659654      -2.36154       2.36154       48.3547       50.7162    
  18  0.165468      -1.79897      -6.44028       6.44028       47.6585       54.0988    
  19  0.679403     -0.386541      -1.38381       1.38381       47.7426       49.1264    
  20  0.554013     -0.590567      -2.11421       2.11421       48.3329       50.4471    
  21  0.211764E-01  -3.85487      -13.8003       13.8003       47.8653       61.6657    
  22  0.453828     -0.790038      -2.82831       2.82831       48.3164       51.1447    
  23  0.377409     -0.974426      -3.48842       3.48842       48.3105       51.7990    
  24  0.496879     -0.699408      -2.50386       2.50386       48.5836       51.0874    
  25  0.214619      -1.53889      -5.50918       5.50918       47.0527       52.5619    
  26  0.724154     -0.322751      -1.15544       1.15544       49.0408       50.1962    
  27  0.385609     -0.952932      -3.41147       3.41147       49.5451       52.9566    
  28  0.777864     -0.251204     -0.899302      0.899302       49.5314       50.4307    
  29  0.709283     -0.343500      -1.22972       1.22972       48.0744       49.3041    
  30  0.191760      -1.65151      -5.91237       5.91237       47.9746       53.8870    
  31  0.347616      -1.05666      -3.78280       3.78280       48.4284       52.2112    
  32  0.191581      -1.65244      -5.91571       5.91571       48.2589       54.1746    
  33  0.770989     -0.260081     -0.931085      0.931085       48.8082       49.7393    
  34  0.788566E-01  -2.54012      -9.09358       9.09358       48.8185       57.9121    
  35  0.229474      -1.47197      -5.26961       5.26961       47.7893       53.0589    
  36  0.339326      -1.08079      -3.86922       3.86922       48.8766       52.7459    
  37  0.220886      -1.51011      -5.40614       5.40614       47.4622       52.8684    
  38  0.223644      -1.49770      -5.36173       5.36173       47.3977       52.7594    
  39  0.138287      -1.97842      -7.08270       7.08270       48.2681       55.3508    
  40  0.796402     -0.227651     -0.814986      0.814986       48.2507       49.0656    
  41  0.104384      -2.25968      -8.08960       8.08960       48.2255       56.3151    
  42  0.919642     -0.837713E-01 -0.299899      0.299899       48.2399       48.5398    
  43  0.360767      -1.01952      -3.64987       3.64987       48.0046       51.6545    
  44  0.924300     -0.787181E-01 -0.281809      0.281809       48.4558       48.7376    
  45  0.561139     -0.577786      -2.06846       2.06846       47.7233       49.7917    
  46  0.509073E-01  -2.97775      -10.6603       10.6603       48.6655       59.3257    
  47  0.715469     -0.334817      -1.19864       1.19864       47.1804       48.3790    
  48  0.294040E-01  -3.52662      -12.6252       12.6252       47.7100       60.3352    
  49  0.264026E-02  -5.93688      -21.2539       21.2539       48.5919       69.8457    
  50  0.634029     -0.455661      -1.63125       1.63125       48.7895       50.4208    
  51  0.319148      -1.14210      -4.08869       4.08869       47.6108       51.6995    
  52  0.495674     -0.701836      -2.51256       2.51256       50.8673       53.3798    
  53  0.838343     -0.176328     -0.631252      0.631252       47.6468       48.2781    
  54  0.240556      -1.42480      -5.10075       5.10075       47.1953       52.2960    
  55  0.919800     -0.835990E-01 -0.299282      0.299282       48.4120       48.7112    
  56  0.652899     -0.426332      -1.52626       1.52626       48.2116       49.7378    
  57  0.777375     -0.251832     -0.901553      0.901553       48.3066       49.2081    
  58  0.988137     -0.119340E-01 -0.427234E-01  0.427234E-01   48.3863       48.4290    
  59  0.771111     -0.259922     -0.930516      0.930516       47.8510       48.7816    
  60  0.980963     -0.192203E-01 -0.688082E-01  0.688082E-01   47.7303       47.7991    
  61  0.358823      -1.02493      -3.66921       3.66921       47.8405       51.5097    
  62  0.398479     -0.920100      -3.29393       3.29393       49.0191       52.3131    
  63  0.524779     -0.644778      -2.30829       2.30829       48.2724       50.5807    
  64  0.391693E-01  -3.23986      -11.5986       11.5986       47.7332       59.3318    
  65  0.494448     -0.704313      -2.52142       2.52142       52.2522       54.7737    
  66  0.224697      -1.49300      -5.34491       5.34491       49.9618       55.3067    
  67  0.585684     -0.534974      -1.91520       1.91520       52.7556       54.6708    
  68  0.558887     -0.581807      -2.08286       2.08286       50.0105       52.0933    
  69  0.540529     -0.615206      -2.20242       2.20242       48.6182       50.8207    
  70  0.314620      -1.15639      -4.13985       4.13985       49.0487       53.1886    
loop,thermsimp(1:2)       90   6.61990      0.400548    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243         48.12          0.84          1.12         23.84          0.53          0.04         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    244         49.71          0.82          1.11         23.82          0.53          0.04         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       90
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       91
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      243     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -8.14140       8.14140       47.1344       55.2758    
   2  0.846291     -0.166892     -0.597469      0.597469       47.7303       48.3278    
   3  0.167054      -1.78944      -6.40613       6.40613       47.2545       53.6606    
   4  0.786038     -0.240750     -0.861880      0.861880       47.6468       48.5087    
   5  0.680218     -0.385341      -1.37951       1.37951       47.1804       48.5599    
   6  0.843894     -0.169729     -0.607625      0.607625       48.3863       48.9939    
   7  0.295559      -1.21889      -4.36359       4.36359       48.3828       52.7463    
   8  0.383493     -0.958433      -3.43116       3.43116       48.2399       51.6710    
   9  0.867247     -0.142431     -0.509899      0.509899       48.4120       48.9219    
  10  0.241960      -1.41898      -5.07992       5.07992       48.4558       53.5357    
  11  0.486925     -0.719645      -2.57631       2.57631       47.8510       50.4274    
  12  0.750166     -0.287460      -1.02910       1.02910       47.7162       48.7453    
  13  0.507045     -0.679156      -2.43136       2.43136       48.4295       50.8608    
  14  0.237743      -1.43656      -5.14286       5.14286       47.4819       52.6248    
  15  0.256837E-01  -3.66190      -13.1095       13.1095       48.2507       61.3602    
  16  0.776460     -0.253010     -0.905768      0.905768       47.7426       48.6484    
  17  0.316300      -1.15106      -4.12078       4.12078       48.3066       52.4274    
  18  0.493161     -0.706919      -2.53075       2.53075       48.0744       50.6051    
  19  0.807271     -0.214096     -0.766459      0.766459       47.5631       48.3295    
  20  0.338915      -1.08201      -3.87355       3.87355       48.2116       52.0851    
  21  0.132986      -2.01751      -7.22263       7.22263       48.8082       56.0308    
  22  0.409975     -0.891659      -3.19212       3.19212       47.7233       50.9154    
  23  0.525021     -0.644317      -2.30664       2.30664       47.7850       50.0916    
  24  0.393064     -0.933783      -3.34292       3.34292       49.0408       52.3837    
  25  0.176068      -1.73689      -6.21801       6.21801       48.7895       55.0075    
  26  0.965490     -0.351191E-01 -0.125726      0.125726       49.5314       49.6571    
  27  0.387767     -0.947350      -3.39149       3.39149       48.3329       51.7244    
  28  0.936248     -0.658753E-01 -0.235832      0.235832       48.2724       48.5082    
  29  0.914720     -0.891370E-01 -0.319108      0.319108       48.3547       48.6738    
  30  0.332171      -1.10211      -3.94551       3.94551       48.6182       52.5638    
  31  0.845314E-01  -2.47063      -8.84480       8.84480       47.6508       56.4956    
  32  0.687741     -0.374343      -1.34014       1.34014       47.9426       49.2827    
  33  0.899776     -0.105610     -0.378080      0.378080       48.5836       48.9617    
  34  0.558791     -0.581980      -2.08347       2.08347       48.3164       50.3999    
  35  0.882799     -0.124658     -0.446272      0.446272       48.0552       48.5015    
  36  0.235569      -1.44575      -5.17575       5.17575       47.8839       53.0597    
  37  0.533400     -0.628484      -2.24996       2.24996       47.8405       50.0905    
  38  0.147169      -1.91617      -6.85984       6.85984       48.0046       54.8644    
  39  0.966208E-01  -2.33696      -8.36626       8.36626       47.6108       55.9770    
  40  0.952887     -0.482588E-01 -0.172765      0.172765       48.3105       48.4833    
  41  0.155551      -1.86078      -6.66154       6.66154       50.0105       56.6720    
  42  0.645067     -0.438401      -1.56947       1.56947       48.4284       49.9979    
  43  0.394254     -0.930759      -3.33209       3.33209       47.1953       50.5274    
  44  0.546893     -0.603501      -2.16052       2.16052       49.0191       51.1797    
  45  0.390314     -0.940803      -3.36805       3.36805       48.1302       51.4982    
  46  0.311561      -1.16616      -4.17483       4.17483       47.5190       51.6938    
  47  0.752427E-01  -2.58704      -9.26153       9.26153       47.0527       56.3142    
  48  0.144673      -1.93328      -6.92110       6.92110       48.8766       55.7977    
  49  0.297567      -1.21212      -4.33935       4.33935       47.3977       51.7371    
  50  0.544131     -0.608565      -2.17865       2.17865       47.4622       49.6409    
  51  0.750603E-01  -2.58946      -9.27021       9.27021       49.5451       58.8154    
  52  0.127547      -2.05927      -7.37214       7.37214       47.7893       55.1614    
  53  0.839209     -0.175296     -0.627554      0.627554       49.0487       49.6763    
  54  0.718305     -0.330861      -1.18447       1.18447       50.8673       52.0517    
  55  0.246952      -1.39856      -5.00682       5.00682       47.2142       52.2210    
  56  0.550710     -0.596548      -2.13563       2.13563       47.9746       50.1103    
  57  0.588510     -0.530162      -1.89797       1.89797       47.6585       49.5565    
  58  0.361548      -1.01736      -3.64212       3.64212       48.2589       51.9010    
  59  0.962524     -0.381965E-01 -0.136743      0.136743       52.7556       52.8924    
  60  0.510442     -0.672478      -2.40745       2.40745       52.2522       54.6597    
  61  0.177498      -1.72880      -6.18905       6.18905       49.9618       56.1509    
  62  0.775349     -0.254441     -0.910894      0.910894       48.2681       49.1790    
  63  0.313518E-01  -3.46248      -12.3956       12.3956       48.2255       60.6211    
  64  0.136553      -1.99105      -7.12789       7.12789       48.8185       55.9464    
  65  0.694627E-01  -2.66696      -9.54767       9.54767       48.6655       58.2131    
  66  0.784048     -0.243285     -0.870953      0.870953       47.7332       48.6042    
  67  0.561706     -0.576776      -2.06485       2.06485       47.7100       49.7749    
  68  0.992642E-01  -2.30997      -8.26964       8.26964       47.8653       56.1350    
  69  0.111580      -2.19301      -7.85094       7.85094       48.5919       56.4428    
  70  0.655988     -0.421613      -1.50936       1.50936       48.1205       49.6299    
loop,thermsimp(1:2)       91   8.14140      0.597469    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245         52.67          0.84          1.12         23.85          0.42          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.67
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       91
neval is:      244
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       92
neval is:      244


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      244     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -5.44299       5.44299       47.7303       53.1733    
   2  0.389473     -0.942961      -3.37578       3.37578       47.5631       50.9389    
   3  0.919121     -0.843378E-01 -0.301927      0.301927       48.3105       48.6125    
   4  0.970518     -0.299250E-01 -0.107131      0.107131       48.0552       48.1624    
   5  0.713317     -0.337830      -1.20942       1.20942       48.2724       49.4818    
   6  0.639607     -0.446902      -1.59990       1.59990       47.6468       49.2467    
   7  0.712661     -0.338749      -1.21271       1.21271       47.1804       48.3931    
   8  0.212311      -1.54970      -5.54790       5.54790       47.7332       53.2811    
   9  0.831769     -0.184200     -0.659432      0.659432       47.7426       48.4021    
  10  0.794875     -0.229571     -0.821857      0.821857       48.3547       49.1765    
  11  0.909815     -0.945137E-01 -0.338357      0.338357       47.7162       48.0546    
  12  0.753651E-01  -2.58541      -9.25571       9.25571       48.4120       57.6677    
  13  0.676081     -0.391442      -1.40135       1.40135       48.5836       49.9849    
  14  0.597437     -0.515107      -1.84407       1.84407       48.3863       50.2303    
  15  0.146947      -1.91768      -6.86525       6.86525       48.2681       55.1334    
  16  0.854910     -0.156760     -0.561195      0.561195       47.9426       48.5038    
  17  0.984999     -0.151146E-01 -0.541098E-01  0.541098E-01   47.6585       47.7126    
  18  0.533419     -0.628448      -2.24983       2.24983       48.1205       50.3704    
  19  0.383774     -0.957703      -3.42855       3.42855       47.4622       50.8908    
  20  0.691729     -0.368561      -1.31944       1.31944       49.5314       50.8508    
  21  0.313732E-01  -3.46180      -12.3932       12.3932       49.0487       61.4419    
  22  0.415635     -0.877947      -3.14303       3.14303       47.7100       50.8530    
  23  0.288746      -1.24221      -4.44707       4.44707       48.4284       52.8755    
  24  0.176464      -1.73464      -6.20996       6.20996       47.8405       54.0505    
  25  0.881312     -0.126344     -0.452308      0.452308       47.7850       48.2373    
  26  0.962783     -0.379267E-01 -0.135777      0.135777       47.9746       48.1104    
  27  0.415450     -0.878393      -3.14463       3.14463       48.3164       51.4610    
  28  0.271836      -1.30256      -4.66312       4.66312       47.8510       52.5142    
  29  0.926655     -0.761736E-01 -0.272699      0.272699       47.1953       47.4680    
  30  0.277790      -1.28089      -4.58556       4.58556       48.0744       52.6599    
  31  0.189974      -1.66087      -5.94587       5.94587       48.4295       54.3754    
  32  0.410540     -0.890281      -3.18718       3.18718       47.7233       50.9104    
  33  0.952387     -0.487839E-01 -0.174645      0.174645       49.0191       49.1938    
  34  0.896015     -0.109798     -0.393074      0.393074       48.1302       48.5232    
  35  0.121549E-01  -4.41002      -15.7878       15.7878       48.2399       64.0276    
  36  0.723911     -0.323087      -1.15664       1.15664       47.5190       48.6756    
  37  0.759053     -0.275683     -0.986939      0.986939       48.3329       49.3198    
  38  0.969929     -0.305320E-01 -0.109304      0.109304       47.3977       47.5070    
  39  0.852636     -0.159422     -0.570727      0.570727       48.2589       48.8296    
  40  0.730471     -0.314065      -1.12435       1.12435       50.8673       51.9916    
  41  0.528358     -0.637981      -2.28395       2.28395       48.2116       50.4955    
  42  0.404403     -0.905344      -3.24111       3.24111       47.2142       50.4553    
  43  0.232822      -1.45748      -5.21774       5.21774       49.0408       54.2585    
  44  0.847643     -0.165296     -0.591754      0.591754       48.3066       48.8983    
  45  0.429393E-01  -3.14797      -11.2696       11.2696       48.6182       59.8879    
  46  0.673157     -0.395777      -1.41687       1.41687       47.4819       48.8988    
  47  0.806068E-01  -2.51817      -9.01499       9.01499       48.3828       57.3977    
  48  0.926018     -0.768619E-01 -0.275164      0.275164       52.7556       53.0308    
  49  0.167973      -1.78395      -6.38650       6.38650       47.8839       54.2704    
  50  0.780773     -0.247471     -0.885940      0.885940       48.4558       49.3417    
  51  0.565702E-01  -2.87227      -10.2827       10.2827       47.2545       57.5372    
  52  0.646011     -0.436939      -1.56423       1.56423       52.2522       53.8165    
  53  0.455316     -0.786763      -2.81659       2.81659       48.0046       50.8212    
  54  0.410066     -0.891437      -3.19132       3.19132       48.7895       51.9808    
  55  0.934064     -0.682104E-01 -0.244192      0.244192       47.7893       48.0335    
  56  0.511079     -0.671231      -2.40299       2.40299       47.1344       49.5374    
  57  0.578130     -0.547957      -1.96167       1.96167       48.8766       50.8383    
  58  0.458047     -0.780783      -2.79518       2.79518       48.8185       51.6137    
  59  0.223630      -1.49776      -5.36196       5.36196       47.6108       52.9727    
  60  0.952824E-01  -2.35091      -8.41620       8.41620       48.8082       57.2244    
  61  0.995385     -0.462583E-02 -0.165604E-01  0.165604E-01   47.8653       47.8819    
  62  0.675298     -0.392602      -1.40550       1.40550       49.9618       51.3673    
  63  0.728172     -0.317218      -1.13563       1.13563       47.0527       48.1883    
  64  0.240868      -1.42350      -5.09611       5.09611       48.5919       53.6880    
  65  0.188028      -1.67116      -5.98273       5.98273       47.6508       53.6336    
  66  0.645358     -0.437951      -1.56785       1.56785       50.0105       51.5783    
  67  0.170606      -1.76840      -6.33082       6.33082       48.6655       54.9963    
  68  0.827167     -0.189749     -0.679297      0.679297       49.5451       50.2244    
  69  0.457642     -0.781668      -2.79835       2.79835       48.2255       51.0239    
  70  0.819756E-01  -2.50133      -8.95471       8.95471       52.6737       61.6284    
loop,thermsimp(1:2)       92   5.44299       3.37578    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    246         48.80          0.83          1.12         23.82          0.48          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    247         54.84          0.84          1.12         23.81          0.47          0.04         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       92
neval is:      246
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       93
neval is:      246


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      246     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -6.82534       6.82534       47.1953       54.0206    
   2  0.695074     -0.363738      -1.30217       1.30217       47.3977       48.6999    
   3  0.541180     -0.614003      -2.19812       2.19812       47.6585       49.8566    
   4  0.189791      -1.66183      -5.94931       5.94931       47.8653       53.8147    
   5  0.245553      -1.40424      -5.02715       5.02715       47.7893       52.8164    
   6  0.641474     -0.443986      -1.58946       1.58946       47.7162       49.3057    
   7  0.308462      -1.17616      -4.21061       4.21061       47.9746       52.1852    
   8  0.478005     -0.738133      -2.64250       2.64250       48.0552       50.6977    
   9  0.395759     -0.926951      -3.31846       3.31846       47.0527       50.3712    
  10  0.438776E-01  -3.12635      -11.1923       11.1923       47.7850       58.9772    
  11  0.294628E-01  -3.52463      -12.6181       12.6181       47.1804       59.7984    
  12  0.331052E-01  -3.40806      -12.2008       12.2008       47.7426       59.9434    
  13  0.916325E-01  -2.38997      -8.55603       8.55603       47.9426       56.4986    
  14  0.985908     -0.141919E-01 -0.508065E-01  0.508065E-01   48.1302       48.1810    
  15  0.511724     -0.669970      -2.39847       2.39847       48.3105       50.7090    
  16  0.185695      -1.68365      -6.02742       6.02742       47.5190       53.5464    
  17  0.830711     -0.185474     -0.663991      0.663991       48.2589       48.9229    
  18  0.765179E-04  -9.47799      -33.9310       33.9310       48.3066       82.2375    
  19  0.129365      -2.04512      -7.32148       7.32148       47.4819       54.8034    
  20  0.796363     -0.227700     -0.815159      0.815159       48.3547       49.1698    
  21  0.589256     -0.528895      -1.89343       1.89343       49.0191       50.9126    
  22  0.770995     -0.260073     -0.931055      0.931055       47.6468       48.5779    
  23  0.685430     -0.377709      -1.35219       1.35219       48.3329       49.6851    
  24  0.487688     -0.718080      -2.57071       2.57071       48.4558       51.0265    
  25  0.114898      -2.16371      -7.74604       7.74604       48.2724       56.0184    
  26  0.165093      -1.80124      -6.44841       6.44841       47.1344       53.5828    
  27  0.302275      -1.19642      -4.28315       4.28315       48.5836       52.8667    
  28  0.123669      -2.09014      -7.48266       7.48266       49.5451       57.0278    
  29  0.960526     -0.402739E-01 -0.144179      0.144179       48.3863       48.5304    
  30  0.744557     -0.294966      -1.05597       1.05597       48.1205       49.1765    
  31  0.418436     -0.871232      -3.11899       3.11899       47.2142       50.3332    
  32  0.624411     -0.470947      -1.68598       1.68598       48.2116       49.8975    
  33  0.920055     -0.833222E-01 -0.298291      0.298291       48.0046       48.3029    
  34  0.330507      -1.10713      -3.96349       3.96349       48.8766       52.8401    
  35  0.889566     -0.117022     -0.418935      0.418935       49.5314       49.9503    
  36  0.269410      -1.31152      -4.69521       4.69521       47.7100       52.4052    
  37  0.458780     -0.779184      -2.78946       2.78946       47.4622       50.2517    
  38  0.952588     -0.485730E-01 -0.173890      0.173890       47.7233       47.8971    
  39  0.213836      -1.54254      -5.52227       5.52227       47.5631       53.0854    
  40  0.460697     -0.775015      -2.77454       2.77454       48.2255       51.0000    
  41  0.571693     -0.559153      -2.00176       2.00176       49.9618       51.9636    
  42  0.201363      -1.60265      -5.73744       5.73744       48.3164       54.0538    
  43  0.707817     -0.345570      -1.23713       1.23713       50.0105       51.2476    
  44  0.927118     -0.756745E-01 -0.270913      0.270913       48.8185       49.0894    
  45  0.288916      -1.24162      -4.44497       4.44497       48.7895       53.2345    
  46  0.702737     -0.352773      -1.26292       1.26292       50.8673       52.1302    
  47  0.253190      -1.37362      -4.91751       4.91751       47.8510       52.7686    
  48  0.709086     -0.343779      -1.23072       1.23072       48.0744       49.3051    
  49  0.399421     -0.917738      -3.28548       3.28548       48.4284       51.7139    
  50  0.837301     -0.177572     -0.635704      0.635704       47.6108       48.2465    
  51  0.906694     -0.979507E-01 -0.350661      0.350661       52.7556       53.1063    
  52  0.479547     -0.734913      -2.63097       2.63097       47.7303       50.3613    
  53  0.573668     -0.555704      -1.98941       1.98941       47.7332       49.7226    
  54  0.616113     -0.484325      -1.73387       1.73387       47.6508       49.3847    
  55  0.899004     -0.106467     -0.381150      0.381150       48.5919       48.9730    
  56  0.668105     -0.403310      -1.44384       1.44384       52.2522       53.6961    
  57  0.464354     -0.767107      -2.74623       2.74623       47.8405       50.5867    
  58  0.298472E-01  -3.51166      -12.5717       12.5717       49.0408       61.6124    
  59  0.458507     -0.779779      -2.79159       2.79159       47.8839       50.6755    
  60  0.372295E-01  -3.29065      -11.7805       11.7805       48.4295       60.2099    
  61  0.349332      -1.05173      -3.76518       3.76518       48.6655       52.4307    
  62  0.396867     -0.924153      -3.30845       3.30845       48.2681       51.5766    
  63  0.599776     -0.511199      -1.83008       1.83008       48.8082       50.6383    
  64  0.175124      -1.74226      -6.23724       6.23724       48.3828       54.6200    
  65  0.723227     -0.324033      -1.16003       1.16003       47.2545       48.4145    
  66  0.738639     -0.302946      -1.08454       1.08454       48.4120       49.4965    
  67  0.691263     -0.369235      -1.32185       1.32185       48.6182       49.9401    
  68  0.575263     -0.552928      -1.97947       1.97947       49.0487       51.0282    
  69  0.312385      -1.16352      -4.16537       4.16537       52.6737       56.8391    
  70  0.708595     -0.344472      -1.23320       1.23320       48.8013       50.0345    
loop,thermsimp(1:2)       93   6.82534       1.30217    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    248         48.26          0.84          1.12         23.79          0.49          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    249         55.66          0.84          1.12         23.88          0.55          0.04         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       93
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       94
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      248     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638     -0.614458      0.614458       47.7233       48.3377    
   2  0.478368     -0.737375      -2.63979       2.63979       48.1302       50.7699    
   3  0.283498      -1.26055      -4.51274       4.51274       47.6108       52.1235    
   4  0.520516     -0.652935      -2.33749       2.33749       48.0046       50.3421    
   5  0.703282E-01  -2.65458      -9.50334       9.50334       47.2545       56.7578    
   6  0.914137     -0.897748E-01 -0.321392      0.321392       48.3863       48.7077    
   7  0.479535     -0.734938      -2.63106       2.63106       47.6468       50.2779    
   8  0.921875     -0.813456E-01 -0.291215      0.291215       47.3977       47.6889    
   9  0.739547     -0.301718      -1.08014       1.08014       48.2589       49.3390    
  10  0.790753     -0.234770     -0.840471      0.840471       48.5919       49.4323    
  11  0.212247E-01  -3.85259      -13.7922       13.7922       48.8185       62.6107    
  12  0.286971      -1.24837      -4.46915       4.46915       48.3547       52.8238    
  13  0.695666     -0.362886      -1.29912       1.29912       48.1205       49.4197    
  14  0.534590     -0.626255      -2.24198       2.24198       48.0744       50.3163    
  15  0.945577     -0.559603E-01 -0.200337      0.200337       47.7162       47.9166    
  16  0.619446     -0.478930      -1.71456       1.71456       47.6508       49.3654    
  17  0.291083E-01  -3.53673      -12.6614       12.6614       48.4120       61.0734    
  18  0.372584E-01  -3.28988      -11.7777       11.7777       48.3329       60.1106    
  19  0.713241     -0.337936      -1.20980       1.20980       47.7332       48.9430    
  20  0.280281      -1.27196      -4.55359       4.55359       47.6585       52.2121    
  21  0.254796      -1.36729      -4.89487       4.89487       48.2116       53.1064    
  22  0.498598     -0.695955      -2.49150       2.49150       48.6182       51.1097    
  23  0.515261E-01  -2.96567      -10.6170       10.6170       49.5314       60.1484    
  24  0.347627      -1.05662      -3.78269       3.78269       48.8013       52.5840    
  25  0.696212     -0.362102      -1.29632       1.29632       47.4622       48.7586    
  26  0.707749E-01  -2.64825      -9.48067       9.48067       47.2142       56.6948    
  27  0.364523E-01  -3.31175      -11.8560       11.8560       47.7303       59.5863    
  28  0.895087E-02  -4.71600      -16.8832       16.8832       47.0527       63.9359    
  29  0.333194      -1.09903      -3.93450       3.93450       47.8405       51.7750    
  30  0.451375     -0.795457      -2.84772       2.84772       48.8082       51.6559    
  31  0.849961E-01  -2.46515      -8.82518       8.82518       47.8839       56.7091    
  32  0.524791     -0.644756      -2.30821       2.30821       48.0552       50.3634    
  33  0.641068     -0.444619      -1.59173       1.59173       48.3105       49.9023    
  34  0.757376     -0.277895     -0.994858      0.994858       49.0191       50.0140    
  35  0.760597     -0.273651     -0.979665      0.979665       48.2255       49.2052    
  36  0.709070     -0.343801      -1.23080       1.23080       48.4558       49.6866    
  37  0.794718     -0.229768     -0.822563      0.822563       49.0487       49.8713    
  38  0.869679     -0.139632     -0.499877      0.499877       50.0105       50.5104    
  39  0.229100E-01  -3.77618      -13.5186       13.5186       48.2681       61.7868    
  40  0.935590     -0.665776E-01 -0.238346      0.238346       48.4284       48.6668    
  41  0.889453     -0.117149     -0.419390      0.419390       49.9618       50.3812    
  42  0.529054     -0.636665      -2.27925       2.27925       50.8673       53.1465    
  43  0.907902     -0.966186E-01 -0.345892      0.345892       47.9746       48.3205    
  44  0.693802     -0.365568      -1.30872       1.30872       47.7100       49.0187    
  45  0.883803     -0.123521     -0.442203      0.442203       48.6655       49.1077    
  46  0.275134E-01  -3.59308      -12.8631       12.8631       47.8510       60.7142    
  47  0.324767      -1.12465      -4.02621       4.02621       47.7893       51.8155    
  48  0.853326     -0.158614     -0.567834      0.567834       48.8766       49.4445    
  49  0.325639      -1.12197      -4.01661       4.01661       48.5836       52.6002    
  50  0.773280     -0.257115     -0.920464      0.920464       47.5631       48.4835    
  51  0.108890      -2.21741      -7.93829       7.93829       52.7556       60.6939    
  52  0.188532E-01  -3.97107      -14.2163       14.2163       48.7895       63.0059    
  53  0.970927     -0.295045E-01 -0.105625      0.105625       47.5190       47.6246    
  54  0.549714     -0.598357      -2.14210       2.14210       47.1344       49.2765    
  55  0.937888E-01  -2.36671      -8.47276       8.47276       52.2522       60.7250    
  56  0.293516      -1.22582      -4.38841       4.38841       47.8653       52.2538    
  57  0.598789     -0.512846      -1.83597       1.83597       47.1953       49.0313    
  58  0.173412      -1.75209      -6.27243       6.27243       48.3164       54.5888    
  59  0.552776     -0.592802      -2.12222       2.12222       48.3828       50.5050    
  60  0.586717     -0.533213      -1.90889       1.90889       47.4819       49.3908    
  61  0.902886     -0.102159     -0.365727      0.365727       48.2724       48.6381    
  62  0.423679     -0.858778      -3.07440       3.07440       47.9426       51.0170    
  63  0.796344E-01  -2.53031      -9.05844       9.05844       52.6737       61.7322    
  64  0.894023     -0.112024     -0.401043      0.401043       49.5451       49.9462    
  65  0.840662     -0.173566     -0.621362      0.621362       47.7850       48.4063    
  66  0.730459     -0.314083      -1.12441       1.12441       47.1804       48.3048    
  67  0.652850     -0.426409      -1.52653       1.52653       47.7426       49.2692    
  68  0.856696     -0.154672     -0.553723      0.553723       48.4295       48.9832    
  69  0.562214     -0.575873      -2.06161       2.06161       49.0408       51.1024    
  70  0.680885     -0.384362      -1.37601       1.37601       48.2631       49.6391    
loop,thermsimp(1:2)       94  0.614458       2.63979    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250         49.46          0.84          1.12         23.89          0.70          0.04         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       94
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       95
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      249     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841      -1.05552       1.05552       47.5190       48.5745    
   2  0.739179     -0.302215      -1.08192       1.08192       47.3977       48.4796    
   3  0.131167      -2.03128      -7.27193       7.27193       47.7162       54.9882    
   4  0.523356     -0.647493      -2.31801       2.31801       47.1804       49.4984    
   5  0.660412     -0.414891      -1.48530       1.48530       47.9746       49.4599    
   6  0.433074E-01  -3.13943      -11.2391       11.2391       47.7233       58.9623    
   7  0.480352     -0.733236      -2.62497       2.62497       47.7850       50.4099    
   8  0.808114     -0.213053     -0.762723      0.762723       47.5631       48.3258    
   9  0.723804     -0.323235      -1.15717       1.15717       48.2724       49.4296    
  10  0.322682      -1.13109      -4.04926       4.04926       48.4284       52.4777    
  11  0.898907     -0.106576     -0.381540      0.381540       48.3863       48.7678    
  12  0.359972      -1.02173      -3.65776       3.65776       47.4622       51.1200    
  13  0.879118     -0.128836     -0.461230      0.461230       47.7332       48.1944    
  14  0.963559     -0.371220E-01 -0.132896      0.132896       48.4295       48.5624    
  15  0.662848     -0.411210      -1.47212       1.47212       47.7100       49.1821    
  16  0.648402     -0.433244      -1.55100       1.55100       47.1953       48.7463    
  17  0.375343     -0.979916      -3.50808       3.50808       48.6655       52.1736    
  18  0.812441     -0.207712     -0.743605      0.743605       48.2255       48.9691    
  19  0.248177E-01  -3.69620      -13.2323       13.2323       47.7426       60.9749    
  20  0.653530     -0.425366      -1.52280       1.52280       47.1344       48.6572    
  21  0.712244     -0.339334      -1.21481       1.21481       48.2589       49.4737    
  22  0.358229      -1.02658      -3.67514       3.67514       47.6508       51.3260    
  23  0.325518      -1.12234      -4.01794       4.01794       47.4819       51.4998    
  24  0.770349     -0.260912     -0.934057      0.934057       48.1205       49.0546    
  25  0.633518E-01  -2.75905      -9.87734       9.87734       48.5919       58.4692    
  26  0.168796      -1.77907      -6.36901       6.36901       48.8766       55.2457    
  27  0.562007     -0.576241      -2.06293       2.06293       48.2631       50.3260    
  28  0.156316      -1.85588      -6.64399       6.64399       48.4558       55.0998    
  29  0.967732     -0.328002E-01 -0.117424      0.117424       49.0487       49.1661    
  30  0.538071     -0.619766      -2.21875       2.21875       48.3105       50.5293    
  31  0.967495     -0.330453E-01 -0.118301      0.118301       49.5451       49.6635    
  32  0.771619     -0.259265     -0.928161      0.928161       49.0191       49.9473    
  33  0.246044      -1.40225      -5.02001       5.02001       47.6468       52.6668    
  34  0.700731     -0.355631      -1.27315       1.27315       48.0744       49.3475    
  35  0.382714     -0.960468      -3.43845       3.43845       48.0046       51.4430    
  36  0.580395     -0.544047      -1.94767       1.94767       48.0552       50.0029    
  37  0.305131      -1.18701      -4.24948       4.24948       49.9618       54.2113    
  38  0.624250     -0.471204      -1.68690       1.68690       48.3828       50.0696    
  39  0.575432     -0.552634      -1.97842       1.97842       50.0105       51.9889    
  40  0.701335     -0.354770      -1.27007       1.27007       48.1302       49.4002    
  41  0.290211      -1.23715      -4.42895       4.42895       47.9426       52.3715    
  42  0.140976      -1.95916      -7.01375       7.01375       49.0408       56.0545    
  43  0.275714      -1.28839      -4.61241       4.61241       48.6182       53.2307    
  44  0.856479     -0.154925     -0.554629      0.554629       48.8082       49.3628    
  45  0.994286     -0.573084E-02 -0.205163E-01  0.205163E-01   47.8405       47.8610    
  46  0.913008     -0.910102E-01 -0.325814      0.325814       47.7893       48.1151    
  47  0.204063      -1.58933      -5.68976       5.68976       47.6108       53.3005    
  48  0.388833     -0.944605      -3.38166       3.38166       47.6585       51.0402    
  49  0.781619     -0.246387     -0.882061      0.882061       47.8653       48.7474    
  50  0.373421     -0.985049      -3.52645       3.52645       48.8013       52.3278    
  51  0.834918     -0.180422     -0.645906      0.645906       48.5836       49.2295    
  52  0.174969      -1.74315      -6.24042       6.24042       48.3547       54.5951    
  53  0.531353     -0.632329      -2.26372       2.26372       48.2116       50.4753    
  54  0.339530      -1.08019      -3.86706       3.86706       50.8673       54.7343    
  55  0.929760     -0.728288E-01 -0.260725      0.260725       48.3164       48.5771    
  56  0.223523      -1.49824      -5.36366       5.36366       47.2142       52.5778    
  57  0.557869     -0.583631      -2.08938       2.08938       47.8839       49.9733    
  58  0.521577     -0.650898      -2.33020       2.33020       47.2545       49.5847    
  59  0.856336     -0.155092     -0.555226      0.555226       47.7303       48.2856    
  60  0.645536     -0.437674      -1.56686       1.56686       48.3329       49.8997    
  61  0.438677     -0.823992      -2.94987       2.94987       49.5314       52.4812    
  62  0.346732      -1.05920      -3.79192       3.79192       52.7556       56.5476    
  63  0.902848     -0.102201     -0.365876      0.365876       47.8510       48.2169    
  64  0.578219     -0.547803      -1.96112       1.96112       52.2522       54.2134    
  65  0.602211     -0.507147      -1.81557       1.81557       48.4120       50.2275    
  66  0.432652     -0.837821      -2.99938       2.99938       52.6737       55.6731    
  67  0.123601      -2.09070      -7.48464       7.48464       48.2681       55.7528    
  68  0.840915     -0.173264     -0.620282      0.620282       48.8185       49.4388    
  69  0.638713     -0.448300      -1.60490       1.60490       48.7895       50.3944    
  70  0.127935      -2.05623      -7.36125       7.36125       49.4574       56.8186    
loop,thermsimp(1:2)       95   1.05552       1.08192    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251         48.34          0.83          1.12         23.87          0.44          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    252         50.39          0.84          1.11         23.84          0.42          0.04         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       95
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   1.12240    

hmean,hstd :    48.4324       1.12240    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    48.4324       1.12240    
h(1),h(best1),h(np1) :    47.8405       47.1344       48.3430    
htherm(1),htherm(best1),htherm(np1) :    47.8610       48.6572       60.9749    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    253         47.54          0.83          1.12         23.80          0.52          0.04         26.32

 EVIDENCE OF CONVERGENCE

 Centroid of last simplex =
    1.2035      -1.8222       3.1796      -102.61       1.4089      0.28271    

    1.2701      -99.703       3.7339     -0.13115E-01   2.2022      -1.0392    

    1.5304       6901.5       3519.3     -0.64971E-01   0.0000       0.0000    

    0.0000      -1.2210     -0.50000       0.0000       0.0000       6257.4    


    518.51       1.4328      -5.8318      -4.0975      -8.4158       6.6913    

   -14.832      -3.5971       4409.8       0.0000       11784.       1641.5    

    13273.      -4243.8       9331.2       5534.2       6126.0      0.21228E-01

   0.18342      0.52837E-02  0.11698     -0.24859     -0.77333E-01  0.19471    


   0.12415      0.71804E-01 -0.47909     -0.77842       0.0000      0.87619E-01

  -0.90791E-01  0.44358E-02  0.95986E-01 -0.71156     -0.15466      0.26867E-01

   0.59912E-01 -0.17056E-01 -0.65726      -1.1967       7438.0      -1.0818    

   -1.2664      -2.2460      -2.3282     -0.38066     -0.32524       9.2203    


    8.6640      -19568.      -4.0000     -0.57845      -2.1718       9.3068    

    8.8784      -19076.      -4.0000      0.41118     -0.42643       8.8555    

    9.0720      -19076.      -7.0000     -0.73284     -0.65395       9.0227    

    8.7821      -19076.      -7.0000    
 Function value at centroid =   47.5372    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        1
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      252     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -13.9248       13.9248       47.8405       61.7653    
   2  0.977100     -0.231667E-01 -0.829361E-01  0.829361E-01   47.7893       47.8722    
   3  0.491467     -0.710361      -2.54307       2.54307       47.7332       50.2763    
   4  0.802113E-01  -2.52309      -9.03260       9.03260       47.8510       56.8836    
   5  0.891044     -0.115361     -0.412991      0.412991       47.7303       48.1433    
   6  0.397551     -0.922433      -3.30229       3.30229       47.5631       50.8654    
   7  0.121203      -2.11029      -7.55479       7.55479       47.3977       54.9525    
   8  0.789985E-01  -2.53833      -9.08714       9.08714       48.4295       57.5166    
   9  0.921855     -0.813679E-01 -0.291295      0.291295       47.5190       47.8103    
  10  0.252671      -1.37567      -4.92485       4.92485       48.3164       53.2412    
  11  0.787271     -0.239182     -0.856266      0.856266       47.1344       47.9907    
  12  0.634653     -0.454676      -1.62773       1.62773       47.1953       48.8230    
  13  0.706648     -0.347222      -1.24305       1.24305       47.8653       49.1084    
  14  0.349740E-01  -3.35315      -12.0042       12.0042       48.3863       60.3905    
  15  0.686787     -0.375731      -1.34511       1.34511       48.2255       49.5706    
  16  0.309348      -1.17329      -4.20034       4.20034       48.1205       52.3209    
  17  0.703748     -0.351336      -1.25777       1.25777       49.0487       50.3065    
  18  0.985092     -0.150207E-01 -0.537739E-01  0.537739E-01   47.7100       47.7638    
  19  0.440741     -0.819298      -2.93307       2.93307       48.5836       51.5166    
  20  0.796112     -0.228015     -0.816289      0.816289       48.0744       48.8906    
  21  0.451938     -0.794210      -2.84325       2.84325       48.8082       51.6514    
  22  0.230902      -1.46576      -5.24739       5.24739       48.1302       53.3776    
  23  0.760212     -0.274159     -0.981481      0.981481       48.2724       49.2539    
  24  0.250434E-02  -5.98973      -21.4431       21.4431       48.8185       70.2616    
  25  0.627913E-01  -2.76794      -9.90915       9.90915       47.9746       57.8838    
  26  0.263128      -1.33511      -4.77968       4.77968       48.2589       53.0386    
  27  0.177986      -1.72605      -6.17922       6.17922       47.1804       53.3596    
  28  0.919776     -0.836247E-01 -0.299374      0.299374       47.2545       47.5539    
  29  0.854272     -0.157506     -0.563868      0.563868       49.5451       50.1090    
  30  0.648187     -0.433576      -1.55219       1.55219       48.3329       49.8851    
  31  0.853797     -0.158061     -0.565856      0.565856       49.0191       49.5850    
  32  0.484551     -0.724533      -2.59381       2.59381       47.8839       50.4777    
  33  0.423817     -0.858454      -3.07324       3.07324       48.0552       51.1285    
  34  0.932015     -0.704065E-01 -0.252053      0.252053       48.3828       48.6348    
  35  0.161906      -1.82074      -6.51821       6.51821       48.4120       54.9302    
  36  0.812519     -0.207617     -0.743262      0.743262       48.2631       49.0064    
  37  0.346838      -1.05890      -3.79083       3.79083       48.7895       52.5804    
  38  0.477141     -0.739943      -2.64898       2.64898       47.7850       50.4339    
  39  0.931946     -0.704808E-01 -0.252320      0.252320       48.2116       48.4639    
  40  0.189794      -1.66182      -5.94926       5.94926       48.3105       54.2598    
  41  0.361902      -1.01638      -3.63863       3.63863       47.6585       51.2971    
  42  0.775630E-02  -4.85925      -17.3960       17.3960       47.4622       64.8582    
  43  0.292497      -1.22930      -4.40086       4.40086       47.6508       52.0517    
  44  0.264300      -1.33067      -4.76377       4.76377       48.0046       52.7684    
  45  0.529597     -0.635638      -2.27557       2.27557       47.4819       49.7575    
  46  0.163272      -1.81234      -6.48812       6.48812       50.0105       56.4986    
  47  0.212593      -1.54838      -5.54315       5.54315       48.6655       54.2086    
  48  0.359173      -1.02395      -3.66572       3.66572       48.8013       52.4670    
  49  0.993707     -0.631295E-02 -0.226002E-01  0.226002E-01   47.9426       47.9652    
  50  0.261479      -1.34140      -4.80218       4.80218       48.4284       53.2306    
  51  0.441392     -0.817822      -2.92778       2.92778       49.5314       52.4592    
  52  0.624656     -0.470554      -1.68457       1.68457       47.2142       48.8987    
  53  0.646784     -0.435743      -1.55995       1.55995       47.6468       49.2068    
  54  0.343734      -1.06789      -3.82301       3.82301       48.6182       52.4413    
  55  0.438651     -0.824052      -2.95008       2.95008       47.6108       50.5609    
  56  0.476250     -0.741811      -2.65567       2.65567       49.9618       52.6175    
  57  0.665451     -0.407291      -1.45809       1.45809       52.2522       53.7103    
  58  0.903561E-01  -2.40400      -8.60625       8.60625       48.3547       56.9609    
  59  0.899286     -0.106155     -0.380031      0.380031       50.8673       51.2473    
  60  0.822477     -0.195434     -0.699650      0.699650       47.7162       48.4159    
  61  0.824462E-01  -2.49561      -8.93422       8.93422       48.4558       57.3900    
  62  0.689460     -0.371846      -1.33120       1.33120       48.8766       50.2078    
  63  0.124471      -2.08368      -7.45953       7.45953       52.6737       60.1332    
  64  0.215598      -1.53434      -5.49289       5.49289       48.2681       53.7610    
  65  0.671537     -0.398187      -1.42550       1.42550       49.0408       50.4663    
  66  0.330886      -1.10598      -3.95939       3.95939       52.7556       56.7150    
  67  0.198204      -1.61846      -5.79405       5.79405       49.4574       55.2514    
  68  0.774065     -0.256099     -0.916829      0.916829       48.5919       49.5087    
  69  0.787755     -0.238568     -0.854069      0.854069       47.7233       48.5773    
  70  0.613901     -0.487921      -1.74675       1.74675       48.3430       50.0897    
loop,thermsimp(1:2)        1   13.9248      0.829361E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254         49.22          0.84          1.12         23.81          0.47          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        1
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        2
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      253     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -5.32941       5.32941       47.2545       52.5839    
   2  0.726663     -0.319292      -1.14306       1.14306       47.7100       48.8531    
   3  0.929061     -0.735808E-01 -0.263417      0.263417       47.5190       47.7824    
   4  0.764703     -0.268268     -0.960393      0.960393       47.7893       48.7497    
   5  0.119617      -2.12346      -7.60194       7.60194       47.9426       55.5445    
   6  0.369672     -0.995138      -3.56257       3.56257       47.1344       50.6970    
   7  0.875806     -0.132611     -0.474744      0.474744       47.7303       48.2051    
   8  0.657886     -0.418723      -1.49902       1.49902       47.7162       49.2152    
   9  0.387095E-01  -3.25167      -11.6409       11.6409       48.2116       59.8525    
  10  0.454078     -0.789485      -2.82634       2.82634       47.7233       50.5496    
  11  0.890470     -0.116006     -0.415297      0.415297       48.3828       48.7980    
  12  0.118445      -2.13331      -7.63718       7.63718       47.1953       54.8325    
  13  0.190238      -1.65948      -5.94090       5.94090       48.0744       54.0153    
  14  0.435624     -0.830976      -2.97487       2.97487       47.2142       50.1890    
  15  0.768655     -0.263114     -0.941940      0.941940       48.2631       49.2050    
  16  0.870896E-01  -2.44082      -8.73807       8.73807       47.8653       56.6034    
  17  0.936453     -0.656556E-01 -0.235045      0.235045       47.6468       47.8819    
  18  0.159312      -1.83689      -6.57602       6.57602       48.2724       54.8484    
  19  0.988165     -0.119051E-01 -0.426200E-01  0.426200E-01   48.5919       48.6345    
  20  0.713347     -0.337787      -1.20927       1.20927       48.2255       49.4348    
  21  0.417075     -0.874489      -3.13065       3.13065       49.0191       52.1498    
  22  0.719048     -0.329827      -1.18077       1.18077       47.4819       48.6627    
  23  0.785519     -0.241411     -0.864246      0.864246       48.3329       49.1971    
  24  0.356994      -1.03004      -3.68750       3.68750       48.3430       52.0305    
  25  0.357951      -1.02736      -3.67792       3.67792       49.5451       53.2231    
  26  0.154816      -1.86552      -6.67851       6.67851       48.8766       55.5552    
  27  0.246912      -1.39872      -5.00739       5.00739       47.7332       52.7406    
  28  0.553458     -0.591570      -2.11780       2.11780       49.0487       51.1665    
  29  0.729602     -0.315256      -1.12861       1.12861       47.7850       48.9136    
  30  0.605470     -0.501750      -1.79625       1.79625       49.0408       50.8370    
  31  0.278987E-01  -3.57918      -12.8134       12.8134       47.8839       60.6973    
  32  0.187991      -1.67136      -5.98344       5.98344       47.6108       53.5942    
  33  0.543158     -0.610355      -2.18506       2.18506       47.5631       49.7481    
  34  0.996749     -0.325625E-02 -0.116573E-01  0.116573E-01   48.0552       48.0669    
  35  0.540727     -0.614841      -2.20112       2.20112       50.8673       53.0684    
  36  0.833271E-01  -2.48498      -8.89617       8.89617       47.6585       56.5547    
  37  0.404538     -0.905011      -3.23992       3.23992       48.5836       51.8235    
  38  0.147302      -1.91527      -6.85662       6.85662       48.8082       55.6648    
  39  0.364226E-01  -3.31257      -11.8589       11.8589       47.6508       59.5098    
  40  0.381304     -0.964158      -3.45166       3.45166       48.1205       51.5722    
  41  0.737758     -0.304140      -1.08881       1.08881       48.6182       49.7071    
  42  0.179374      -1.71828      -6.15140       6.15140       49.5314       55.6828    
  43  0.281757      -1.26671      -4.53479       4.53479       48.8013       53.3361    
  44  0.192633      -1.64697      -5.89610       5.89610       48.7895       54.6856    
  45  0.954983     -0.460617E-01 -0.164900      0.164900       49.9618       50.1267    
  46  0.710258     -0.342127      -1.22481       1.22481       48.0046       49.2294    
  47  0.831769     -0.184201     -0.659435      0.659435       48.2589       48.9183    
  48  0.912541     -0.915218E-01 -0.327646      0.327646       48.4284       48.7561    
  49  0.221543      -1.50714      -5.39553       5.39553       48.3164       53.7119    
  50  0.690803E-02  -4.97507      -17.8106       17.8106       47.1804       64.9910    
  51  0.162616      -1.81637      -6.50254       6.50254       48.1302       54.6327    
  52  0.869433     -0.139913     -0.500887      0.500887       52.2522       52.7531    
  53  0.541563     -0.613295      -2.19558       2.19558       48.2681       50.4637    
  54  0.310811      -1.16857      -4.18346       4.18346       48.6655       52.8489    
  55  0.879573     -0.128319     -0.459379      0.459379       48.3105       48.7699    
  56  0.262339      -1.33812      -4.79043       4.79043       48.4120       53.2024    
  57  0.651476     -0.428515      -1.53407       1.53407       47.3977       48.9318    
  58  0.498193     -0.696767      -2.49441       2.49441       49.4574       51.9518    
  59  0.251241      -1.38134      -4.94517       4.94517       50.0105       54.9557    
  60  0.704518     -0.350242      -1.25386       1.25386       52.7556       54.0095    
  61  0.387431     -0.948219      -3.39460       3.39460       47.8510       51.2456    
  62  0.447312     -0.804500      -2.88009       2.88009       48.3547       51.2348    
  63  0.842599     -0.171264     -0.613119      0.613119       48.4558       49.0689    
  64  0.754683     -0.281457      -1.00761       1.00761       48.4295       49.4371    
  65  0.160341      -1.83045      -6.55297       6.55297       47.9746       54.5276    
  66  0.388561     -0.945304      -3.38417       3.38417       52.6737       56.0579    
  67  0.504240     -0.684704      -2.45122       2.45122       48.3863       50.8375    
  68  0.340326      -1.07785      -3.85868       3.85868       47.8405       51.6992    
  69  0.995948     -0.406008E-02 -0.145350E-01  0.145350E-01   47.4622       47.4768    
  70  0.822310     -0.195638     -0.700378      0.700378       49.2175       49.9179    
loop,thermsimp(1:2)        2   5.32941       1.14306    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255         52.75          0.83          1.12         23.88          0.41          0.04         26.27
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        2
neval is:      254
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        3
neval is:      254


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      254     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194      -3.14391       3.14391       47.4622       50.6062    
   2  0.117190E-02  -6.74913      -24.1617       24.1617       47.5190       71.6807    
   3  0.432199     -0.838870      -3.00313       3.00313       47.6468       50.6499    
   4  0.466381     -0.762753      -2.73064       2.73064       48.0552       50.7859    
   5  0.696685     -0.361422      -1.29388       1.29388       47.7303       49.0242    
   6  0.193714      -1.64137      -5.87607       5.87607       48.5919       54.4679    
   7  0.535145     -0.625217      -2.23826       2.23826       47.4819       49.7202    
   8  0.812984     -0.207044     -0.741214      0.741214       47.7893       48.5305    
   9  0.956789     -0.441723E-01 -0.158136      0.158136       48.4284       48.5866    
  10  0.496711E-01  -3.00233      -10.7483       10.7483       48.3105       59.0588    
  11  0.206308E-01  -3.88097      -13.8938       13.8938       48.3828       62.2765    
  12  0.423434     -0.859358      -3.07648       3.07648       47.7100       50.7865    
  13  0.216826      -1.52866      -5.47257       5.47257       47.7850       53.2575    
  14  0.792422     -0.232661     -0.832922      0.832922       48.2589       49.0918    
  15  0.265940      -1.32449      -4.74163       4.74163       47.3977       52.1393    
  16  0.993400     -0.662201E-02 -0.237066E-01  0.237066E-01   48.4558       48.4795    
  17  0.645200E-01  -2.74078      -9.81192       9.81192       48.3329       58.1448    
  18  0.651527     -0.428436      -1.53379       1.53379       48.2631       49.7969    
  19  0.858875     -0.152131     -0.544627      0.544627       47.7162       48.2609    
  20  0.126056      -2.07103      -7.41422       7.41422       48.0046       55.4188    
  21  0.772661E-01  -2.56050      -9.16653       9.16653       48.2255       57.3920    
  22  0.441429     -0.817737      -2.92748       2.92748       48.4295       51.3570    
  23  0.166586      -1.79224      -6.41618       6.41618       48.6182       55.0344    
  24  0.217490      -1.52560      -5.46163       5.46163       47.5631       53.0247    
  25  0.632871     -0.457488      -1.63780       1.63780       49.2175       50.8553    
  26  0.201694      -1.60100      -5.73156       5.73156       49.9618       55.6934    
  27  0.282690      -1.26341      -4.52296       4.52296       47.2142       51.7371    
  28  0.255086E-01  -3.66874      -13.1340       13.1340       48.2681       61.4021    
  29  0.562308     -0.575706      -2.06101       2.06101       47.7233       49.7843    
  30  0.283366E-01  -3.56360      -12.7576       12.7576       47.1344       59.8920    
  31  0.404254E-01  -3.20830      -11.4856       11.4856       49.0408       60.5264    
  32  0.170475      -1.76917      -6.33358       6.33358       48.3863       54.7198    
  33  0.141712      -1.95396      -6.99511       6.99511       49.0487       56.0438    
  34  0.773173     -0.257253     -0.920958      0.920958       48.3547       49.2756    
  35  0.255978      -1.36266      -4.87830       4.87830       47.8510       52.7293    
  36  0.823739     -0.193902     -0.694163      0.694163       48.1205       48.8147    
  37  0.166307      -1.79392      -6.42219       6.42219       47.8405       54.2627    
  38  0.676319     -0.391090      -1.40009       1.40009       48.5836       49.9837    
  39  0.144546      -1.93416      -6.92424       6.92424       49.4574       56.3816    
  40  0.593436     -0.521826      -1.86813       1.86813       48.3430       50.2111    
  41  0.762921     -0.270600     -0.968742      0.968742       49.0191       49.9879    
  42  0.855796     -0.155724     -0.557487      0.557487       47.2545       47.8120    
  43  0.433555     -0.835737      -2.99192       2.99192       47.7332       50.7251    
  44  0.252891      -1.37480      -4.92173       4.92173       52.2522       57.1740    
  45  0.942909     -0.587850E-01 -0.210449      0.210449       48.6655       48.8759    
  46  0.432313     -0.838605      -3.00219       3.00219       50.8673       53.8695    
  47  0.975713     -0.245869E-01 -0.880205E-01  0.880205E-01   48.4120       48.5000    
  48  0.541226     -0.613919      -2.19782       2.19782       49.5451       51.7430    
  49  0.255057      -1.36627      -4.89121       4.89121       48.8013       53.6925    
  50  0.202141      -1.59879      -5.72362       5.72362       47.6108       53.3344    
  51  0.949562     -0.517549E-01 -0.185281      0.185281       48.3164       48.5017    
  52  0.255660E-01  -3.66649      -13.1260       13.1260       52.7556       65.8816    
  53  0.306802      -1.18155      -4.22993       4.22993       48.0744       52.3043    
  54  0.243277E-01  -3.71614      -13.3037       13.3037       47.9746       61.2783    
  55  0.466793     -0.761870      -2.72748       2.72748       48.1302       50.8576    
  56  0.200407      -1.60740      -5.75446       5.75446       48.7895       54.5440    
  57  0.282970      -1.26241      -4.51941       4.51941       47.1953       51.7147    
  58  0.214232      -1.54069      -5.51565       5.51565       48.2724       53.7881    
  59  0.326606      -1.11900      -4.00600       4.00600       50.0105       54.0165    
  60  0.997507     -0.249621E-02 -0.893636E-02  0.893636E-02   47.9426       47.9515    
  61  0.426725     -0.851615      -3.04876       3.04876       48.8766       51.9254    
  62  0.862854     -0.147510     -0.528083      0.528083       48.8082       49.3363    
  63  0.737079     -0.305061      -1.09211       1.09211       49.5314       50.6235    
  64  0.976691     -0.235846E-01 -0.844322E-01  0.844322E-01   52.6737       52.7581    
  65  0.191821      -1.65119      -5.91122       5.91122       47.6585       53.5697    
  66  0.743386     -0.296540      -1.06161       1.06161       47.8653       48.9270    
  67  0.683162     -0.381024      -1.36406       1.36406       47.6508       49.0149    
  68  0.789040     -0.236939     -0.848234      0.848234       48.2116       49.0598    
  69  0.908546     -0.959094E-01 -0.343353      0.343353       47.8839       48.2273    
  70  0.562283     -0.575750      -2.06117       2.06117       52.7507       54.8119    
loop,thermsimp(1:2)        3   3.14391       24.1617    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    256         48.08          0.84          1.12         23.83          0.48          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    257         49.63          0.84          1.12         23.74          0.53          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        3
neval is:      256
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        4
neval is:      256


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      256     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640      -1.50588       1.50588       47.2545       48.7604    
   2  0.880966     -0.126736     -0.453711      0.453711       47.9426       48.3963    
   3  0.854972     -0.156687     -0.560935      0.560935       47.8839       48.4449    
   4  0.797101     -0.226774     -0.811845      0.811845       47.7162       48.5281    
   5  0.158477      -1.84214      -6.59483       6.59483       48.4558       55.0506    
   6  0.593839     -0.521148      -1.86570       1.86570       48.4120       50.2777    
   7  0.817101     -0.201993     -0.723129      0.723129       48.3164       49.0395    
   8  0.997190     -0.281377E-02 -0.100732E-01  0.100732E-01   47.7893       47.7993    
   9  0.402857     -0.909174      -3.25482       3.25482       48.4284       51.6833    
  10  0.690455     -0.370405      -1.32604       1.32604       48.1205       49.4466    
  11  0.609635     -0.494895      -1.77171       1.77171       48.6655       50.4372    
  12  0.491117     -0.711073      -2.54562       2.54562       47.8653       50.4110    
  13  0.990676     -0.936814E-02 -0.335377E-01  0.335377E-01   47.6508       47.6844    
  14  0.976919     -0.233519E-01 -0.835992E-01  0.835992E-01   47.7303       47.8139    
  15  0.692556     -0.367366      -1.31516       1.31516       48.2116       49.5267    
  16  0.549694     -0.598394      -2.14224       2.14224       48.2589       50.4011    
  17  0.538267E-01  -2.92199      -10.4606       10.4606       48.3547       58.8153    
  18  0.602193     -0.507178      -1.81568       1.81568       48.8082       50.6239    
  19  0.537276     -0.621243      -2.22403       2.22403       47.4819       49.7059    
  20  0.338220      -1.08406      -3.88090       3.88090       47.7233       51.6042    
  21  0.306772      -1.18165      -4.23028       4.23028       48.2631       52.4934    
  22  0.895389     -0.110497     -0.395578      0.395578       48.5836       48.9791    
  23  0.120096      -2.11946      -7.58762       7.58762       49.0191       56.6067    
  24  0.680166     -0.385418      -1.37979       1.37979       48.3430       49.7228    
  25  0.369434     -0.995782      -3.56487       3.56487       47.4622       51.0271    
  26  0.235484      -1.44611      -5.17705       5.17705       49.5314       54.7084    
  27  0.260836      -1.34386      -4.81100       4.81100       47.6468       52.4578    
  28  0.720259     -0.328144      -1.17475       1.17475       47.7332       48.9079    
  29  0.695069     -0.363744      -1.30219       1.30219       48.0552       49.3574    
  30  0.105076      -2.25307      -8.06595       8.06595       47.7100       55.7760    
  31  0.968349     -0.321628E-01 -0.115142      0.115142       49.2175       49.3327    
  32  0.974131     -0.262091E-01 -0.938280E-01  0.938280E-01   48.1302       48.2240    
  33  0.647785E-01  -2.73678      -9.79761       9.79761       48.4295       58.2271    
  34  0.910402     -0.938690E-01 -0.336049      0.336049       47.1953       47.5313    
  35  0.488733     -0.715939      -2.56304       2.56304       47.2142       49.7772    
  36  0.377436E-01  -3.27694      -11.7314       11.7314       49.5451       61.2765    
  37  0.154608      -1.86686      -6.68332       6.68332       48.8766       55.5600    
  38  0.277804      -1.28084      -4.58537       4.58537       47.3977       51.9831    
  39  0.969547     -0.309263E-01 -0.110715      0.110715       48.0744       48.1851    
  40  0.380083     -0.967367      -3.46315       3.46315       47.8510       51.3142    
  41  0.751822     -0.285256      -1.02121       1.02121       52.6737       53.6949    
  42  0.137692      -1.98274      -7.09815       7.09815       47.5631       54.6612    
  43  0.293470      -1.22598      -4.38898       4.38898       47.7850       52.1739    
  44  0.433705     -0.835390      -2.99067       2.99067       47.6108       50.6015    
  45  0.418034     -0.872194      -3.12243       3.12243       47.6585       50.7809    
  46  0.166728      -1.79139      -6.41315       6.41315       48.8013       55.2145    
  47  0.921960     -0.812537E-01 -0.290886      0.290886       48.2724       48.5633    
  48  0.412601     -0.885275      -3.16926       3.16926       50.8673       54.0365    
  49  0.925181     -0.777655E-01 -0.278399      0.278399       50.0105       50.2889    
  50  0.687711     -0.374386      -1.34029       1.34029       47.8405       49.1808    
  51  0.729890     -0.314862      -1.12720       1.12720       48.5919       49.7191    
  52  0.355028      -1.03556      -3.70728       3.70728       48.7895       52.4968    
  53  0.123338      -2.09283      -7.49228       7.49228       48.3863       55.8785    
  54  0.638370E-01  -2.75142      -9.85002       9.85002       52.7507       62.6008    
  55  0.379414     -0.969128      -3.46945       3.46945       48.6182       52.0877    
  56  0.643705     -0.440515      -1.57703       1.57703       48.0046       49.5816    
  57  0.172292      -1.75856      -6.29561       6.29561       49.9618       56.2574    
  58  0.996763     -0.324212E-02 -0.116067E-01  0.116067E-01   49.0487       49.0603    
  59  0.606366     -0.500272      -1.79096       1.79096       49.4574       51.2484    
  60  0.299698      -1.20498      -4.31380       4.31380       52.2522       56.5660    
  61  0.723907E-02  -4.92826      -17.6431       17.6431       48.2255       65.8686    
  62  0.197118      -1.62395      -5.81370       5.81370       48.3329       54.1466    
  63  0.316130      -1.15160      -4.12271       4.12271       48.3105       52.4332    
  64  0.115913      -2.15492      -7.71456       7.71456       47.1344       54.8490    
  65  0.661756     -0.412859      -1.47802       1.47802       49.0408       50.5188    
  66  0.838437     -0.176215     -0.630846      0.630846       47.9746       48.6055    
  67  0.929092     -0.735473E-01 -0.263297      0.263297       48.2681       48.5314    
  68  0.167251      -1.78826      -6.40193       6.40193       48.3828       54.7847    
  69  0.174207      -1.74751      -6.25605       6.25605       52.7556       59.0117    
  70  0.506799     -0.679641      -2.43310       2.43310       48.0842       50.5173    
loop,thermsimp(1:2)        4   1.50588      0.453711    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    258         48.90          0.83          1.12         23.85          0.50          0.04         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    259         59.87          0.84          1.12         23.81          0.44          0.04         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        4
neval is:      258
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        5
neval is:      258


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      258     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672      -1.65278       1.65278       47.1953       48.8481    
   2  0.876370     -0.131967     -0.472438      0.472438       47.6508       48.1233    
   3  0.840080     -0.174259     -0.623842      0.623842       47.7893       48.4131    
   4  0.608986E-01  -2.79854      -10.0187       10.0187       47.7303       57.7491    
   5  0.311901      -1.16507      -4.17092       4.17092       48.0744       52.2453    
   6  0.937552E-01  -2.36707      -8.47405       8.47405       48.1302       56.6042    
   7  0.608418     -0.496893      -1.77887       1.77887       47.9426       49.7214    
   8  0.297707      -1.21164      -4.33766       4.33766       47.8839       52.2216    
   9  0.365777      -1.00573      -3.60049       3.60049       47.7162       51.3167    
  10  0.194673      -1.63643      -5.85838       5.85838       48.2681       54.1265    
  11  0.941388     -0.604003E-01 -0.216232      0.216232       48.2724       48.4886    
  12  0.984881     -0.152343E-01 -0.545384E-01  0.545384E-01   47.9746       48.0292    
  13  0.750245     -0.287355      -1.02872       1.02872       47.2545       48.2832    
  14  0.437446     -0.826803      -2.95993       2.95993       47.7332       50.6931    
  15  0.174754      -1.74437      -6.24482       6.24482       48.5836       54.8284    
  16  0.300465E-01  -3.50501      -12.5478       12.5478       48.3164       60.8642    
  17  0.372924     -0.986380      -3.53122       3.53122       49.0487       52.5799    
  18  0.803506     -0.218771     -0.783194      0.783194       47.8405       48.6237    
  19  0.232583      -1.45851      -5.22143       5.22143       49.2175       54.4390    
  20  0.383368     -0.958759      -3.43233       3.43233       48.0552       51.4876    
  21  0.622786     -0.473552      -1.69530       1.69530       48.1205       49.8158    
  22  0.356422      -1.03164      -3.69324       3.69324       48.2116       51.9048    
  23  0.919964     -0.834212E-01 -0.298646      0.298646       48.0046       48.3032    
  24  0.550740     -0.596492      -2.13543       2.13543       47.4819       49.6173    
  25  0.402627     -0.909745      -3.25686       3.25686       48.5919       51.8487    
  26  0.256265      -1.36154      -4.87429       4.87429       48.3430       53.2173    
  27  0.763510     -0.269828     -0.965979      0.965979       47.2142       48.1802    
  28  0.388963     -0.944271      -3.38047       3.38047       48.4120       51.7924    
  29  0.981923     -0.182423E-01 -0.653070E-01  0.653070E-01   50.0105       50.0758    
  30  0.656629     -0.420635      -1.50586       1.50586       48.2589       49.7647    
  31  0.932472     -0.699161E-01 -0.250298      0.250298       47.8653       48.1156    
  32  0.336775      -1.08834      -3.89623       3.89623       48.6655       52.5617    
  33  0.810758     -0.209786     -0.751028      0.751028       48.0842       48.8353    
  34  0.557014     -0.585166      -2.09488       2.09488       49.0408       51.1357    
  35  0.652747     -0.426565      -1.52709       1.52709       47.6108       49.1379    
  36  0.890774     -0.115665     -0.414077      0.414077       48.8082       49.2223    
  37  0.703035     -0.352349      -1.26140       1.26140       47.6585       48.9199    
  38  0.534296     -0.626805      -2.24395       2.24395       47.4622       49.7062    
  39  0.604162     -0.503914      -1.80400       1.80400       49.4574       51.2614    
  40  0.545557     -0.605948      -2.16928       2.16928       47.8510       50.0203    
  41  0.371346     -0.990620      -3.54639       3.54639       47.7233       51.2696    
  42  0.491801     -0.709680      -2.54064       2.54064       48.4284       50.9691    
  43  0.879731     -0.128139     -0.458735      0.458735       47.3977       47.8564    
  44  0.995113     -0.489866E-02 -0.175371E-01  0.175371E-01   48.6182       48.6358    
  45  0.467927     -0.759444      -2.71879       2.71879       47.7850       50.5037    
  46  0.355083      -1.03540      -3.70672       3.70672       48.3105       52.0172    
  47  0.216960      -1.52804      -5.47035       5.47035       47.6468       53.1172    
  48  0.276988      -1.28378      -4.59590       4.59590       48.2631       52.8590    
  49  0.905458     -0.993144E-01 -0.355543      0.355543       48.7895       49.1451    
  50  0.704241     -0.350635      -1.25526       1.25526       52.6737       53.9290    
  51  0.784564     -0.242627     -0.868600      0.868600       50.8673       51.7359    
  52  0.329376      -1.11055      -3.97576       3.97576       48.3329       52.3086    
  53  0.845894     -0.167361     -0.599148      0.599148       47.5631       48.1622    
  54  0.645172     -0.438238      -1.56888       1.56888       49.5314       51.1003    
  55  0.279949      -1.27315      -4.55783       4.55783       48.3828       52.9406    
  56  0.149089      -1.90321      -6.81346       6.81346       47.1344       53.9479    
  57  0.887681     -0.119143     -0.426528      0.426528       48.4558       48.8823    
  58  0.582426     -0.540553      -1.93517       1.93517       48.8013       50.7365    
  59  0.221293      -1.50827      -5.39956       5.39956       48.8766       54.2762    
  60  0.839449     -0.175010     -0.626531      0.626531       47.7100       48.3365    
  61  0.383721     -0.957840      -3.42904       3.42904       48.3863       51.8153    
  62  0.933136     -0.692040E-01 -0.247748      0.247748       49.9618       50.2096    
  63  0.148663      -1.90607      -6.82370       6.82370       52.2522       59.0759    
  64  0.788780     -0.237267     -0.849411      0.849411       49.0191       49.8685    
  65  0.948785     -0.525734E-01 -0.188212      0.188212       48.4295       48.6177    
  66  0.246696      -1.39960      -5.01053       5.01053       48.3547       53.3652    
  67  0.297902      -1.21099      -4.33532       4.33532       52.7556       57.0910    
  68  0.402979     -0.908870      -3.25373       3.25373       49.5451       52.7989    
  69  0.946008     -0.555038E-01 -0.198702      0.198702       52.7507       52.9494    
  70  0.182802      -1.69935      -6.08364       6.08364       48.9001       54.9838    
loop,thermsimp(1:2)        5   1.65278      0.472438    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    260         53.17          0.83          1.12         23.91          0.41          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        5
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        6
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      259     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -5.48662       5.48662       47.3977       52.8843    
   2  0.942431     -0.592928E-01 -0.212267      0.212267       47.9746       48.1869    
   3  0.193824      -1.64081      -5.87404       5.87404       47.8653       53.7394    
   4  0.162512      -1.81700      -6.50483       6.50483       47.6508       54.1557    
   5  0.625243     -0.469616      -1.68121       1.68121       47.5631       49.2443    
   6  0.499178     -0.694793      -2.48734       2.48734       47.2142       49.7015    
   7  0.706095     -0.348006      -1.24585       1.24585       47.2545       48.5004    
   8  0.527414     -0.639770      -2.29036       2.29036       48.0046       50.2950    
   9  0.575748     -0.552085      -1.97645       1.97645       47.7100       49.6865    
  10  0.490522     -0.712286      -2.54997       2.54997       47.7893       50.3392    
  11  0.306517      -1.18248      -4.23326       4.23326       48.2724       52.5057    
  12  0.798470     -0.225057     -0.805700      0.805700       48.4295       49.2352    
  13  0.333550      -1.09796      -3.93068       3.93068       47.8405       51.7712    
  14  0.166731      -1.79138      -6.41308       6.41308       48.6182       55.0313    
  15  0.443580     -0.812878      -2.91008       2.91008       48.0842       50.9943    
  16  0.669985     -0.400500      -1.43378       1.43378       47.1953       48.6291    
  17  0.339921      -1.07904      -3.86294       3.86294       48.4558       52.3187    
  18  0.201260      -1.60316      -5.73927       5.73927       47.6585       53.3978    
  19  0.772250     -0.258447     -0.925233      0.925233       47.6108       48.5360    
  20  0.401372E-01  -3.21545      -11.5112       11.5112       48.7895       60.3008    
  21  0.940962     -0.608526E-01 -0.217851      0.217851       48.8082       49.0260    
  22  0.115324      -2.16001      -7.73279       7.73279       47.4819       55.2147    
  23  0.939991E-01  -2.36447      -8.46475       8.46475       47.4622       55.9270    
  24  0.412221     -0.886196      -3.17256       3.17256       47.9426       51.1151    
  25  0.136462      -1.99171      -7.13027       7.13027       48.2589       55.3892    
  26  0.310095      -1.17088      -4.19171       4.19171       48.1205       52.3122    
  27  0.985727     -0.143755E-01 -0.514639E-01  0.514639E-01   49.0191       49.0706    
  28  0.900161     -0.105182     -0.376548      0.376548       47.8510       48.2276    
  29  0.250220      -1.38542      -4.95976       4.95976       50.0105       54.9702    
  30  0.780405     -0.247942     -0.887626      0.887626       49.9618       50.8495    
  31  0.228719      -1.47526      -5.28139       5.28139       47.7850       53.0663    
  32  0.407088     -0.898727      -3.21742       3.21742       47.7332       50.9506    
  33  0.975627     -0.246749E-01 -0.883356E-01  0.883356E-01   48.8013       48.8896    
  34  0.885140     -0.122009     -0.436791      0.436791       48.4284       48.8652    
  35  0.896135     -0.109664     -0.392595      0.392595       49.5314       49.9240    
  36  0.856661     -0.154713     -0.553869      0.553869       49.0408       49.5947    
  37  0.258643      -1.35231      -4.84123       4.84123       49.4574       54.2986    
  38  0.336283      -1.08980      -3.90146       3.90146       47.7233       51.6247    
  39  0.868205     -0.141327     -0.505947      0.505947       47.7162       48.2222    
  40  0.937935     -0.640747E-01 -0.229386      0.229386       48.0552       48.2846    
  41  0.418906     -0.870109      -3.11497       3.11497       50.8673       53.9822    
  42  0.351040      -1.04685      -3.74771       3.74771       48.4120       52.1597    
  43  0.611628E-01  -2.79422      -10.0032       10.0032       48.3863       58.3895    
  44  0.153518      -1.87394      -6.70865       6.70865       48.5919       55.3005    
  45  0.938341     -0.636423E-01 -0.227838      0.227838       48.2116       48.4394    
  46  0.598133     -0.513942      -1.83990       1.83990       48.3105       50.1504    
  47  0.795771     -0.228444     -0.817825      0.817825       47.8839       48.7018    
  48  0.295375      -1.21951      -4.36582       4.36582       48.0744       52.4402    
  49  0.804738     -0.217239     -0.777711      0.777711       48.3329       49.1106    
  50  0.260094      -1.34671      -4.82120       4.82120       48.6655       53.4867    
  51  0.640517     -0.445479      -1.59480       1.59480       49.0487       50.6435    
  52  0.221872      -1.50566      -5.39021       5.39021       49.5451       54.9354    
  53  0.837141     -0.177762     -0.636385      0.636385       48.2631       48.8995    
  54  0.212745      -1.54766      -5.54059       5.54059       48.3828       53.9233    
  55  0.162033      -1.81996      -6.51540       6.51540       52.7507       59.2661    
  56  0.631631     -0.459450      -1.64482       1.64482       47.6468       49.2916    
  57  0.816014E-01  -2.50591      -8.97109       8.97109       48.3430       57.3141    
  58  0.754954     -0.281099      -1.00633       1.00633       48.3547       49.3610    
  59  0.568761E-01  -2.86688      -10.2634       10.2634       52.6737       62.9371    
  60  0.610521     -0.493442      -1.76651       1.76651       47.1344       48.9009    
  61  0.691718     -0.368577      -1.31949       1.31949       48.2681       49.5876    
  62  0.330677      -1.10661      -3.96164       3.96164       48.8766       52.8383    
  63  0.669260     -0.401583      -1.43766       1.43766       49.2175       50.6552    
  64  0.677208     -0.389776      -1.39539       1.39539       48.5836       49.9790    
  65  0.440183     -0.820565      -2.93760       2.93760       48.9001       51.8378    
  66  0.258089      -1.35445      -4.84890       4.84890       48.1302       52.9791    
  67  0.109764      -2.20942      -7.90967       7.90967       52.7556       60.6653    
  68  0.440932     -0.818865      -2.93152       2.93152       47.7303       50.6619    
  69  0.361307      -1.01803      -3.64451       3.64451       52.2522       55.8968    
  70  0.304201      -1.19007      -4.26041       4.26041       53.1660       57.4264    
loop,thermsimp(1:2)        6   5.48662      0.212267    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261         49.12          0.84          1.12         23.84          0.55          0.04         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    262         52.16          0.85          1.11         23.85          0.85          0.04         26.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    49.122        1.221     -1.885      3.217     -102.6      1.429    
                      0.2833      1.286     -99.70      3.685    -0.3573E-01

                       2.254     -1.014      1.530      7233.      3455.    

                     -0.2443      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6319.      413.1    

                       1.433     -5.806     -4.026     -8.399      6.753    

                      -14.89     -3.557      2700.      0.000      9699.    



                       1752.     0.1417E+05 -4531.     0.1244E+05-0.1516E+05

                       6540.     0.1664E-01 0.1974    -0.1349E-02 0.1313    

                     -0.2486    -0.7126E-01 0.2008     0.1302     0.7787E-01



                     -0.4837    -0.7301      0.000     0.8403E-01-0.9675E-01

                      0.1535E-01 0.1321    -0.7116    -0.1389     0.2101E-01

                      0.6598E-01-0.1356E-01-0.6663     -1.191      7581.    



                      -1.041     -1.286     -2.252     -2.304    -0.3807    

                     -0.3252      9.227      8.669    -0.1911E+05 -4.000    

                     -0.5401     -2.254      9.311      8.884    -0.1908E+05



                      -4.000     0.3928    -0.4062      8.869      9.092    

                     -0.1908E+05 -7.000    -0.7126    -0.6335      9.025    

                       8.788    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        6
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        7
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      261     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -4.76492       4.76492       47.9746       52.7396    
   2  0.401807     -0.911784      -3.26416       3.26416       47.7162       50.9804    
   3  0.418885     -0.870159      -3.11515       3.11515       47.8510       50.9662    
   4  0.753378     -0.283189      -1.01381       1.01381       48.0552       49.0690    
   5  0.792066     -0.233111     -0.834532      0.834532       48.2116       49.0461    
   6  0.868474     -0.141017     -0.504838      0.504838       47.2545       47.7593    
   7  0.318670      -1.14360      -4.09405       4.09405       47.6108       51.7048    
   8  0.863267     -0.147031     -0.526367      0.526367       47.1953       47.7216    
   9  0.589255     -0.528896      -1.89343       1.89343       47.8839       49.7774    
  10  0.632079E-01  -2.76133      -9.88548       9.88548       48.4284       58.3139    
  11  0.992270     -0.775975E-02 -0.277797E-01  0.277797E-01   48.8013       48.8291    
  12  0.466140     -0.763269      -2.73248       2.73248       48.2631       50.9956    
  13  0.177509      -1.72873      -6.18882       6.18882       47.1344       53.3232    
  14  0.933326     -0.690005E-01 -0.247020      0.247020       48.8082       49.0552    
  15  0.876357     -0.131982     -0.472491      0.472491       49.0191       49.4916    
  16  0.673496     -0.395274      -1.41507       1.41507       48.3329       49.7479    
  17  0.648708     -0.432773      -1.54932       1.54932       48.4295       49.9788    
  18  0.400813     -0.914259      -3.27303       3.27303       47.5631       50.8361    
  19  0.763164     -0.270282     -0.967603      0.967603       47.6468       48.6144    
  20  0.196240      -1.62842      -5.82969       5.82969       48.3547       54.1844    
  21  0.923666     -0.794046E-01 -0.284266      0.284266       48.2681       48.5524    
  22  0.999600     -0.400298E-03 -0.143306E-02  0.143306E-02   49.0408       49.0422    
  23  0.379715     -0.968335      -3.46662       3.46662       47.7100       51.1766    
  24  0.197375      -1.62265      -5.80904       5.80904       47.2142       53.0232    
  25  0.760736     -0.273468     -0.979010      0.979010       49.5314       50.5104    
  26  0.392182     -0.936030      -3.35096       3.35096       48.5836       51.9345    
  27  0.256208      -1.36177      -4.87509       4.87509       48.3105       53.1856    
  28  0.251796      -1.37914      -4.93727       4.93727       48.0046       52.9419    
  29  0.332089E-01  -3.40494      -12.1896       12.1896       47.7893       59.9789    
  30  0.970457     -0.299883E-01 -0.107357      0.107357       49.0487       49.1561    
  31  0.467370E-01  -3.06322      -10.9662       10.9662       49.2175       60.1838    
  32  0.716125     -0.333901      -1.19536       1.19536       47.7303       48.9257    
  33  0.757897     -0.277208     -0.992397      0.992397       49.9618       50.9542    
  34  0.765628     -0.267059     -0.956065      0.956065       47.7332       48.6893    
  35  0.323816      -1.12758      -4.03671       4.03671       48.0842       52.1209    
  36  0.909845     -0.944807E-01 -0.338239      0.338239       47.9426       48.2808    
  37  0.515782     -0.662071      -2.37020       2.37020       47.7233       50.0935    
  38  0.464370     -0.767074      -2.74610       2.74610       47.8405       50.5866    
  39  0.445707     -0.808094      -2.89296       2.89296       48.9001       51.7931    
  40  0.786320     -0.240391     -0.860596      0.860596       48.4120       49.2726    
  41  0.631860     -0.459087      -1.64352       1.64352       48.1205       49.7640    
  42  0.672488     -0.396772      -1.42043       1.42043       48.4558       49.8762    
  43  0.251717E-02  -5.98462      -21.4248       21.4248       48.0744       69.4991    
  44  0.245023      -1.40640      -5.03489       5.03489       48.2724       53.3073    
  45  0.252688      -1.37560      -4.92461       4.92461       48.8766       53.8013    
  46  0.268946      -1.31324      -4.70138       4.70138       47.3977       52.0991    
  47  0.550357     -0.597189      -2.13792       2.13792       48.1302       50.2681    
  48  0.826205     -0.190912     -0.683461      0.683461       47.7850       48.4684    
  49  0.964276     -0.363780E-01 -0.130232      0.130232       47.6585       47.7887    
  50  0.415479     -0.878324      -3.14438       3.14438       48.6655       51.8099    
  51  0.599143E-01  -2.81484      -10.0771       10.0771       47.8653       57.9424    
  52  0.348555      -1.05396      -3.77315       3.77315       48.3828       52.1559    
  53  0.243819      -1.41133      -5.05253       5.05253       50.8673       55.9198    
  54  0.233297      -1.45544      -5.21045       5.21045       47.6508       52.8613    
  55  0.705284     -0.349155      -1.24997       1.24997       49.4574       50.7074    
  56  0.258436      -1.35311      -4.84409       4.84409       49.5451       54.3892    
  57  0.328631      -1.11282      -3.98387       3.98387       50.0105       53.9944    
  58  0.676481     -0.390852      -1.39924       1.39924       48.6182       50.0175    
  59  0.784590     -0.242594     -0.868480      0.868480       47.4819       48.3504    
  60  0.546419E-01  -2.90695      -10.4068       10.4068       48.5919       58.9987    
  61  0.507256     -0.678740      -2.42987       2.42987       48.2589       50.6888    
  62  0.980797     -0.193899E-01 -0.694154E-01  0.694154E-01   52.2522       52.3217    
  63  0.193856      -1.64064      -5.87345       5.87345       47.4622       53.3357    
  64  0.101492      -2.28777      -8.19017       8.19017       48.3430       56.5332    
  65  0.245844E-01  -3.70564      -13.2661       13.2661       53.1660       66.4321    
  66  0.610050     -0.494214      -1.76927       1.76927       48.3863       50.1555    
  67  0.373100E-01  -3.28849      -11.7727       11.7727       52.7507       64.5235    
  68  0.476763     -0.740736      -2.65182       2.65182       48.7895       51.4413    
  69  0.412657     -0.885139      -3.16878       3.16878       52.7556       55.9244    
  70  0.580580     -0.543727      -1.94653       1.94653       49.1221       51.0686    
loop,thermsimp(1:2)        7   4.76492       3.26416    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263         51.00          0.84          1.12         23.82          0.46          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        7
neval is:      262
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        8
neval is:      262


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      262     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -8.04092       8.04092       47.1953       55.2362    
   2  0.476819     -0.740619      -2.65140       2.65140       47.2545       49.9059    
   3  0.564430     -0.571938      -2.04753       2.04753       47.6585       49.7060    
   4  0.211741      -1.55239      -5.55753       5.55753       47.9426       53.5001    
   5  0.154226E-01  -4.17192      -14.9354       14.9354       47.4819       62.4173    
   6  0.489577     -0.714213      -2.55686       2.55686       47.7850       50.3418    
   7  0.583965     -0.537914      -1.92572       1.92572       48.2681       50.1938    
   8  0.430258     -0.843370      -3.01924       3.01924       47.6468       50.6661    
   9  0.280982      -1.26946      -4.54465       4.54465       47.7332       52.2779    
  10  0.535183     -0.625146      -2.23801       2.23801       48.8013       51.0393    
  11  0.306750      -1.18172      -4.23054       4.23054       47.7303       51.9609    
  12  0.924930     -0.780370E-01 -0.279370      0.279370       49.0408       49.3202    
  13  0.829670E-01  -2.48931      -8.91168       8.91168       48.2116       57.1232    
  14  0.330275      -1.10783      -3.96600       3.96600       48.8082       52.7742    
  15  0.229751      -1.47076      -5.26528       5.26528       48.0552       53.3205    
  16  0.455737     -0.785839      -2.81328       2.81328       49.0487       51.8620    
  17  0.830949     -0.185187     -0.662966      0.662966       48.4120       49.0749    
  18  0.148624      -1.90634      -6.82465       6.82465       49.0191       55.8438    
  19  0.883001     -0.124429     -0.445454      0.445454       48.3329       48.7783    
  20  0.668001     -0.403466      -1.44440       1.44440       48.1205       49.5649    
  21  0.610583     -0.493341      -1.76615       1.76615       47.8839       49.6501    
  22  0.689050     -0.372441      -1.33333       1.33333       48.4558       49.7891    
  23  0.124417      -2.08412      -7.46109       7.46109       48.4295       55.8906    
  24  0.785584E-01  -2.54391      -9.10715       9.10715       48.6182       57.7254    
  25  0.936565     -0.655366E-01 -0.234619      0.234619       47.7233       47.9579    
  26  0.483719     -0.726252      -2.59996       2.59996       48.3863       50.9862    
  27  0.715685     -0.334515      -1.19756       1.19756       48.1302       49.3277    
  28  0.786437     -0.240243     -0.860063      0.860063       49.5314       50.3914    
  29  0.361023      -1.01881      -3.64733       3.64733       47.8405       51.4878    
  30  0.325559      -1.12221      -4.01748       4.01748       48.2589       52.2764    
  31  0.850460     -0.161978     -0.579877      0.579877       49.4574       50.0373    
  32  0.301358      -1.19946      -4.29403       4.29403       47.5631       51.8571    
  33  0.304725      -1.18834      -4.25424       4.25424       49.9618       54.2161    
  34  0.887065     -0.119838     -0.429015      0.429015       47.8510       48.2801    
  35  0.762822     -0.270730     -0.969208      0.969208       47.7162       48.6854    
  36  0.364130      -1.01024      -3.61665       3.61665       48.2631       51.8797    
  37  0.762041     -0.271754     -0.972874      0.972874       49.1221       50.0950    
  38  0.941180     -0.606207E-01 -0.217021      0.217021       47.7100       47.9270    
  39  0.449403     -0.799835      -2.86339       2.86339       48.7895       51.6529    
  40  0.743855     -0.295910      -1.05935       1.05935       47.6108       48.6701    
  41  0.743104     -0.296920      -1.06297       1.06297       48.9001       49.9631    
  42  0.350527      -1.04832      -3.75295       3.75295       48.6655       52.4184    
  43  0.607240     -0.498831      -1.78580       1.78580       48.5836       50.3694    
  44  0.557347     -0.584567      -2.09273       2.09273       47.3977       49.4904    
  45  0.217970      -1.52340      -5.45372       5.45372       48.0842       53.5380    
  46  0.364570      -1.00904      -3.61232       3.61232       48.3828       51.9951    
  47  0.330900      -1.10594      -3.95923       3.95923       52.2522       56.2115    
  48  0.861127     -0.149514     -0.535255      0.535255       47.9746       48.5099    
  49  0.710764E-01  -2.64400      -9.46545       9.46545       47.6508       57.1163    
  50  0.264543      -1.32975      -4.76048       4.76048       48.0046       52.7651    
  51  0.985836     -0.142654E-01 -0.510699E-01  0.510699E-01   47.2142       47.2652    
  52  0.296563      -1.21550      -4.35144       4.35144       48.3105       52.6620    
  53  0.875112     -0.133403     -0.477580      0.477580       48.2724       48.7500    
  54  0.808637     -0.212405     -0.760405      0.760405       47.1344       47.8948    
  55  0.394372     -0.930461      -3.33103       3.33103       47.4622       50.7933    
  56  0.209815      -1.56153      -5.59024       5.59024       48.8766       54.4669    
  57  0.154667      -1.86648      -6.68194       6.68194       50.0105       56.6924    
  58  0.741232     -0.299442      -1.07199       1.07199       48.3547       49.4267    
  59  0.386718E-01  -3.25265      -11.6444       11.6444       49.5451       61.1895    
  60  0.372867     -0.986533      -3.53177       3.53177       50.8673       54.3990    
  61  0.910828E-01  -2.39599      -8.57757       8.57757       52.7556       61.3332    
  62  0.660999     -0.414003      -1.48212       1.48212       48.3430       49.8251    
  63  0.631205E-01  -2.76271      -9.89043       9.89043       47.8653       57.7558    
  64  0.959104     -0.417554E-01 -0.149483      0.149483       48.4284       48.5779    
  65  0.132829      -2.01869      -7.22687       7.22687       48.5919       55.8187    
  66  0.162229      -1.81875      -6.51107       6.51107       47.7893       54.3003    
  67  0.155176      -1.86319      -6.67019       6.67019       49.2175       55.8877    
  68  0.950416E-01  -2.35344      -8.42526       8.42526       52.7507       61.1760    
  69  0.591456     -0.525169      -1.88009       1.88009       53.1660       55.0461    
  70  0.297427      -1.21259      -4.34103       4.34103       50.9974       55.3384    
loop,thermsimp(1:2)        8   8.04092       2.65140    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    264         48.35          0.82          1.12         23.84          0.44          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    265         50.28          0.84          1.12         23.81          0.56          0.04         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        8
neval is:      264
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:        9
neval is:      264


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      264     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068      -1.58975       1.58975       47.2142       48.8039    
   2  0.805197     -0.216668     -0.775666      0.775666       47.1344       47.9101    
   3  0.976428     -0.238543E-01 -0.853978E-01  0.853978E-01   47.7100       47.7954    
   4  0.599028     -0.512447      -1.83455       1.83455       47.7233       49.5578    
   5  0.591081     -0.525802      -1.88236       1.88236       47.8510       49.7334    
   6  0.151500      -1.88717      -6.75601       6.75601       47.9746       54.7306    
   7  0.565682     -0.569723      -2.03959       2.03959       48.4284       50.4680    
   8  0.345258      -1.06346      -3.80717       3.80717       47.6108       51.4180    
   9  0.658101     -0.418397      -1.49785       1.49785       47.7162       49.2141    
  10  0.691977E-01  -2.67079      -9.56135       9.56135       48.2724       57.8338    
  11  0.289062      -1.24111      -4.44315       4.44315       48.3329       52.7760    
  12  0.949819     -0.514835E-01 -0.184310      0.184310       48.4120       48.5963    
  13  0.791632     -0.233658     -0.836491      0.836491       49.0408       49.8773    
  14  0.400532     -0.914962      -3.27554       3.27554       48.1302       51.4057    
  15  0.241886      -1.41929      -5.08102       5.08102       48.3547       53.4357    
  16  0.383016     -0.959678      -3.43562       3.43562       47.3977       50.8333    
  17  0.993978     -0.604041E-02 -0.216245E-01  0.216245E-01   48.1205       48.1422    
  18  0.807089     -0.214322     -0.767267      0.767267       47.8839       48.6512    
  19  0.732161     -0.311755      -1.11607       1.11607       47.6585       48.7746    
  20  0.176507      -1.73440      -6.20910       6.20910       48.4558       54.6649    
  21  0.628098     -0.465059      -1.66490       1.66490       48.3430       50.0079    
  22  0.383392     -0.958697      -3.43211       3.43211       47.2545       50.6866    
  23  0.906421     -0.982517E-01 -0.351739      0.351739       48.9001       49.2519    
  24  0.329288      -1.11082      -3.97672       3.97672       49.4574       53.4341    
  25  0.869436     -0.139911     -0.500877      0.500877       49.1221       49.6230    
  26  0.354994      -1.03565      -3.70761       3.70761       48.2681       51.9757    
  27  0.127935      -2.05623      -7.36127       7.36127       47.7850       55.1462    
  28  0.840123     -0.174207     -0.623656      0.623656       48.5836       49.2072    
  29  0.625861     -0.468627      -1.67767       1.67767       49.5314       51.2090    
  30  0.488384     -0.716653      -2.56560       2.56560       47.6468       50.2124    
  31  0.888226E-01  -2.42111      -8.66753       8.66753       47.4622       56.1298    
  32  0.262955      -1.33577      -4.78203       4.78203       48.3863       53.1683    
  33  0.153205E-01  -4.17856      -14.9592       14.9592       48.8013       63.7605    
  34  0.432355     -0.838509      -3.00184       3.00184       47.8405       50.8424    
  35  0.225273      -1.49044      -5.33575       5.33575       48.7895       54.1253    
  36  0.812147     -0.208074     -0.744901      0.744901       47.5631       48.3080    
  37  0.832805E-01  -2.48554      -8.89817       8.89817       49.0487       57.9469    
  38  0.442280     -0.815813      -2.92059       2.92059       48.2631       51.1837    
  39  0.106639      -2.23831      -8.01309       8.01309       47.7303       55.7434    
  40  0.143053      -1.94454      -6.96139       6.96139       48.3828       55.3441    
  41  0.871774     -0.137225     -0.491263      0.491263       48.2589       48.7501    
  42  0.137692      -1.98273      -7.09814       7.09814       47.7332       54.8313    
  43  0.366512      -1.00372      -3.59331       3.59331       48.6655       52.2588    
  44  0.617157     -0.482633      -1.72781       1.72781       48.3105       50.0383    
  45  0.420337     -0.866700      -3.10276       3.10276       48.0046       51.1074    
  46  0.935846     -0.663044E-01 -0.237368      0.237368       48.8082       49.0455    
  47  0.979912     -0.202925E-01 -0.726465E-01  0.726465E-01   48.0552       48.1279    
  48  0.692793     -0.367024      -1.31394       1.31394       47.9426       49.2565    
  49  0.155424      -1.86160      -6.66449       6.66449       48.0842       54.7487    
  50  0.703218     -0.352088      -1.26047       1.26047       49.9618       51.2223    
  51  0.396734     -0.924489      -3.30965       3.30965       47.7893       51.0989    
  52  0.247863      -1.39488      -4.99364       4.99364       50.8673       55.8609    
  53  0.176690      -1.73336      -6.20539       6.20539       48.8766       55.0820    
  54  0.832421     -0.183417     -0.656627      0.656627       53.1660       53.8226    
  55  0.598900     -0.512660      -1.83531       1.83531       47.1953       49.0306    
  56  0.940005     -0.618702E-01 -0.221494      0.221494       50.9974       51.2189    
  57  0.556954     -0.585272      -2.09526       2.09526       48.5919       50.6871    
  58  0.920495     -0.828436E-01 -0.296578      0.296578       49.0191       49.3157    
  59  0.896932     -0.108775     -0.389413      0.389413       49.2175       49.6069    
  60  0.200022      -1.60933      -5.76135       5.76135       48.4295       54.1908    
  61  0.667904E-01  -2.70620      -9.68812       9.68812       52.2522       61.9404    
  62  0.146707      -1.91932      -6.87111       6.87111       50.0105       56.8816    
  63  0.305705      -1.18513      -4.24275       4.24275       47.6508       51.8936    
  64  0.975058     -0.252587E-01 -0.904256E-01  0.904256E-01   48.2116       48.3020    
  65  0.229625      -1.47131      -5.26724       5.26724       48.6182       53.8855    
  66  0.477708     -0.738756      -2.64473       2.64473       47.8653       50.5101    
  67  0.443063     -0.814043      -2.91425       2.91425       52.7507       55.6650    
  68  0.988727     -0.113371E-01 -0.405866E-01  0.405866E-01   49.5451       49.5857    
  69  0.338863      -1.08216      -3.87410       3.87410       52.7556       56.6297    
  70  0.929830     -0.727534E-01 -0.260456      0.260456       48.3493       48.6097    
loop,thermsimp(1:2)        9   1.58975      0.775666    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    266         48.80          0.84          1.11         23.81          0.48          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:        9
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       10
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      265     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525     -0.653436      0.653436       47.7100       48.3634    
   2  0.367543      -1.00091      -3.58325       3.58325       47.1344       50.7177    
   3  0.528755     -0.637231      -2.28127       2.28127       48.0552       50.3365    
   4  0.776829     -0.252535     -0.904070      0.904070       48.1205       49.0246    
   5  0.149594E-01  -4.20242      -15.0445       15.0445       48.2116       63.2561    
   6  0.892228     -0.114033     -0.408235      0.408235       47.5631       47.9713    
   7  0.191037      -1.65529      -5.92588       5.92588       48.4120       54.3378    
   8  0.516533     -0.660616      -2.36499       2.36499       48.3493       50.7143    
   9  0.273230      -1.29744      -4.64481       4.64481       47.8839       52.5287    
  10  0.822225     -0.195741     -0.700749      0.700749       48.2589       48.9596    
  11  0.359850      -1.02207      -3.65898       3.65898       47.6585       51.3175    
  12  0.611658     -0.491581      -1.75985       1.75985       47.2142       48.9740    
  13  0.249481      -1.38837      -4.97033       4.97033       47.1953       52.1656    
  14  0.441252     -0.818139      -2.92892       2.92892       48.8082       51.7371    
  15  0.910514E-01  -2.39633      -8.57881       8.57881       48.5836       57.1624    
  16  0.745146     -0.294175      -1.05314       1.05314       47.7162       48.7694    
  17  0.758301     -0.276675     -0.990491      0.990491       48.9001       49.8906    
  18  0.638521     -0.448601      -1.60598       1.60598       47.9426       49.5486    
  19  0.150180      -1.89592      -6.78735       6.78735       49.0191       55.8065    
  20  0.144147      -1.93692      -6.93413       6.93413       47.7233       54.6574    
  21  0.104928      -2.25448      -8.07098       8.07098       49.5451       57.6161    
  22  0.398120     -0.921002      -3.29717       3.29717       49.2175       52.5147    
  23  0.802258     -0.220325     -0.788759      0.788759       49.1221       49.9109    
  24  0.399299     -0.918044      -3.28657       3.28657       47.8510       51.1376    
  25  0.493060     -0.707124      -2.53149       2.53149       49.0408       51.5723    
  26  0.504407     -0.684372      -2.45003       2.45003       48.3430       50.7930    
  27  0.762058     -0.271733     -0.972797      0.972797       48.3105       49.2833    
  28  0.430267     -0.843350      -3.01917       3.01917       47.6468       50.6660    
  29  0.993832     -0.618725E-02 -0.221502E-01  0.221502E-01   48.4284       48.4506    
  30  0.705390     -0.349005      -1.24943       1.24943       47.8653       49.1148    
  31  0.969760     -0.307069E-01 -0.109930      0.109930       47.2545       47.3644    
  32  0.245618      -1.40398      -5.02621       5.02621       48.5919       53.6181    
  33  0.685790     -0.377184      -1.35031       1.35031       47.3977       48.7480    
  34  0.905089     -0.997222E-01 -0.357003      0.357003       47.8405       48.1975    
  35  0.414065     -0.881732      -3.15658       3.15658       47.7893       50.9458    
  36  0.714747E-01  -2.63841      -9.44545       9.44545       48.0046       57.4500    
  37  0.694510     -0.364548      -1.30507       1.30507       48.2631       49.5682    
  38  0.770213E-01  -2.56367      -9.17789       9.17789       49.5314       58.7093    
  39  0.846173     -0.167031     -0.597967      0.597967       50.9974       51.5954    
  40  0.485012     -0.723582      -2.59041       2.59041       49.9618       52.5522    
  41  0.345787      -1.06193      -3.80169       3.80169       48.1302       51.9319    
  42  0.851861     -0.160332     -0.573984      0.573984       47.6108       48.1848    
  43  0.774151     -0.255989     -0.916434      0.916434       47.6508       48.5673    
  44  0.512382     -0.668685      -2.39387       2.39387       48.2681       50.6620    
  45  0.839798     -0.174594     -0.625044      0.625044       48.6655       49.2905    
  46  0.430550     -0.842692      -3.01681       3.01681       48.3329       51.3497    
  47  0.988263     -0.118067E-01 -0.422677E-01  0.422677E-01   48.3863       48.4285    
  48  0.349495      -1.05127      -3.76350       3.76350       49.4574       53.2209    
  49  0.290701      -1.23546      -4.42292       4.42292       48.3547       52.7776    
  50  0.210466      -1.55843      -5.57915       5.57915       53.1660       58.7451    
  51  0.361038      -1.01877      -3.64718       3.64718       48.6182       52.2654    
  52  0.168890      -1.77851      -6.36702       6.36702       48.7895       55.1565    
  53  0.176000      -1.73727      -6.21939       6.21939       48.4295       54.6489    
  54  0.494423     -0.704364      -2.52161       2.52161       48.4558       50.9774    
  55  0.887313     -0.119558     -0.428014      0.428014       47.9746       48.4026    
  56  0.318781      -1.14325      -4.09281       4.09281       48.0842       52.1770    
  57  0.385435     -0.953382      -3.41308       3.41308       47.7332       51.1463    
  58  0.557906     -0.583564      -2.08915       2.08915       48.8766       50.9658    
  59  0.262507      -1.33748      -4.78814       4.78814       47.7850       52.5731    
  60  0.573408     -0.556157      -1.99103       1.99103       48.3828       50.3738    
  61  0.334195      -1.09603      -3.92377       3.92377       52.7507       56.6745    
  62  0.365463      -1.00659      -3.60356       3.60356       47.7303       51.3339    
  63  0.182452      -1.70127      -6.09049       6.09049       50.8673       56.9578    
  64  0.224434      -1.49418      -5.34911       5.34911       47.4622       52.8114    
  65  0.599163     -0.512222      -1.83374       1.83374       52.7556       54.5894    
  66  0.549089     -0.599495      -2.14618       2.14618       50.0105       52.1567    
  67  0.830082     -0.186231     -0.666701      0.666701       48.2724       48.9391    
  68  0.824393     -0.193108     -0.691323      0.691323       49.0487       49.7400    
  69  0.814179     -0.205575     -0.735954      0.735954       52.2522       52.9882    
  70  0.731713E-01  -2.61495      -9.36146       9.36146       48.7951       58.1566    
loop,thermsimp(1:2)       10  0.653436       3.58325    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267         48.50          0.83          1.12         23.81          0.48          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    268         52.02          0.84          1.11         23.87          0.45          0.04         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       10
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       11
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      267     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01 -0.300852      0.300852       47.2545       47.5554    
   2  0.309089      -1.17413      -4.20335       4.20335       47.5631       51.7664    
   3  0.237901      -1.43590      -5.14049       5.14049       47.6108       52.7513    
   4  0.542467     -0.611627      -2.18961       2.18961       47.8405       50.0301    
   5  0.523672     -0.646889      -2.31585       2.31585       47.7100       50.0259    
   6  0.850058     -0.162450     -0.581567      0.581567       47.9746       48.5562    
   7  0.589343     -0.528746      -1.89290       1.89290       48.3863       50.2792    
   8  0.979269     -0.209490E-01 -0.749967E-01  0.749967E-01   48.4284       48.5034    
   9  0.110419      -2.20347      -7.88838       7.88838       47.6508       55.5392    
  10  0.557914     -0.583550      -2.08909       2.08909       47.3977       49.4868    
  11  0.474464     -0.745569      -2.66912       2.66912       47.7162       50.3853    
  12  0.312482      -1.16321      -4.16425       4.16425       48.2724       52.4367    
  13  0.297011      -1.21399      -4.34604       4.34604       48.2589       52.6049    
  14  0.857571     -0.153651     -0.550068      0.550068       47.2142       47.7642    
  15  0.792567     -0.232479     -0.832268      0.832268       48.1205       48.9528    
  16  0.963006     -0.376958E-01 -0.134950      0.134950       47.8653       48.0003    
  17  0.294103      -1.22382      -4.38126       4.38126       48.3105       52.6918    
  18  0.403484     -0.907618      -3.24925       3.24925       48.6655       51.9147    
  19  0.449313     -0.800035      -2.86411       2.86411       47.9426       50.8067    
  20  0.721912     -0.325852      -1.16654       1.16654       48.2631       49.4296    
  21  0.512488     -0.668479      -2.39314       2.39314       49.0487       51.4419    
  22  0.885190     -0.121953     -0.436588      0.436588       48.9001       49.3367    
  23  0.694751E-01  -2.66679      -9.54703       9.54703       49.1221       58.6691    
  24  0.820879     -0.197380     -0.706615      0.706615       48.0552       48.7618    
  25  0.211527      -1.55340      -5.56115       5.56115       48.3828       53.9439    
  26  0.937420     -0.646236E-01 -0.231351      0.231351       48.2681       48.4995    
  27  0.515756E-01  -2.96471      -10.6136       10.6136       47.6468       58.2604    
  28  0.695222     -0.363525      -1.30141       1.30141       48.3493       49.6507    
  29  0.718776     -0.330205      -1.18213       1.18213       47.1344       48.3166    
  30  0.536080     -0.623471      -2.23201       2.23201       48.3430       50.5750    
  31  0.585855     -0.534682      -1.91415       1.91415       47.7893       49.7034    
  32  0.693572     -0.365900      -1.30991       1.30991       48.8766       50.1866    
  33  0.700823     -0.355500      -1.27268       1.27268       48.4558       49.7285    
  34  0.250985      -1.38236      -4.94882       4.94882       47.8510       52.7999    
  35  0.290600      -1.23581      -4.42416       4.42416       47.7332       52.1574    
  36  0.828609     -0.188007     -0.673062      0.673062       47.6585       48.3316    
  37  0.225820      -1.48802      -5.32707       5.32707       47.7303       53.0574    
  38  0.999674     -0.326354E-03 -0.116834E-02  0.116834E-02   48.3329       48.3340    
  39  0.878216     -0.129862     -0.464904      0.464904       49.0408       49.5057    
  40  0.685898E-01  -2.67961      -9.59294       9.59294       50.9974       60.5903    
  41  0.273860      -1.29514      -4.63656       4.63656       48.8082       53.4447    
  42  0.697655     -0.360030      -1.28890       1.28890       48.1302       49.4191    
  43  0.293168      -1.22701      -4.39266       4.39266       50.0105       54.4031    
  44  0.319476      -1.14107      -4.08501       4.08501       47.1953       51.2803    
  45  0.874681     -0.133896     -0.479345      0.479345       48.0842       48.5636    
  46  0.408697     -0.894781      -3.20329       3.20329       48.6182       51.8215    
  47  0.142130E-01  -4.25360      -15.2278       15.2278       49.2175       64.4453    
  48  0.164528      -1.80468      -6.46069       6.46069       47.8839       54.3446    
  49  0.652669     -0.426685      -1.52752       1.52752       49.9618       51.4893    
  50  0.492107     -0.709060      -2.53842       2.53842       47.7850       50.3234    
  51  0.542705     -0.611189      -2.18804       2.18804       48.3547       50.5427    
  52  0.798603     -0.224891     -0.805105      0.805105       47.4622       48.2674    
  53  0.474092E-01  -3.04894      -10.9151       10.9151       52.2522       63.1674    
  54  0.425084     -0.855468      -3.06256       3.06256       49.4574       52.5200    
  55  0.349722      -1.05062      -3.76119       3.76119       48.5919       52.3531    
  56  0.499235     -0.694678      -2.48693       2.48693       48.4120       50.8989    
  57  0.193091      -1.64459      -5.88761       5.88761       52.7556       58.6432    
  58  0.876894     -0.131369     -0.470297      0.470297       48.4295       48.8998    
  59  0.634591     -0.454774      -1.62808       1.62808       47.7233       49.3513    
  60  0.571394     -0.559676      -2.00363       2.00363       48.7895       50.7931    
  61  0.749680     -0.288108      -1.03142       1.03142       49.0191       50.0506    
  62  0.111050      -2.19777      -7.86798       7.86798       52.7507       60.6187    
  63  0.456811     -0.783485      -2.80486       2.80486       50.8673       53.6721    
  64  0.686362     -0.376350      -1.34733       1.34733       48.5836       49.9309    
  65  0.160608      -1.82879      -6.54702       6.54702       48.0046       54.5516    
  66  0.557454     -0.584375      -2.09205       2.09205       49.5451       51.6372    
  67  0.914976     -0.888571E-01 -0.318106      0.318106       48.7951       49.1133    
  68  0.203755      -1.59084      -5.69516       5.69516       49.5314       55.2265    
  69  0.851702     -0.160519     -0.574655      0.574655       53.1660       53.7406    
  70  0.770841     -0.260273     -0.931772      0.931772       48.5005       49.4322    
loop,thermsimp(1:2)       11  0.300852       4.20335    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269         50.04          0.84          1.12         23.88          0.46          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    270         57.97          0.84          1.11         23.72          0.55          0.04         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       11
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       12
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      269     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671     -0.968994      0.968994       47.2545       48.2235    
   2  0.482922E-01  -3.03048      -10.8491       10.8491       47.2142       58.0632    
   3  0.612960     -0.489456      -1.75224       1.75224       47.8653       49.6176    
   4  0.910127     -0.941714E-01 -0.337131      0.337131       47.4622       47.7994    
   5  0.362433      -1.01492      -3.63338       3.63338       47.1344       50.7678    
   6  0.476779     -0.740702      -2.65170       2.65170       47.6585       50.3102    
   7  0.179006E-01  -4.02292      -14.4020       14.4020       48.3329       62.7348    
   8  0.589646     -0.528233      -1.89106       1.89106       48.2681       50.1592    
   9  0.926206     -0.766581E-01 -0.274434      0.274434       48.4284       48.7029    
  10  0.492629     -0.707999      -2.53462       2.53462       47.9746       50.5092    
  11  0.661123     -0.413815      -1.48145       1.48145       48.0842       49.5657    
  12  0.542248     -0.612032      -2.19106       2.19106       48.0552       50.2463    
  13  0.216527      -1.53004      -5.47750       5.47750       48.4295       53.9070    
  14  0.549832     -0.598143      -2.14134       2.14134       48.1205       50.2619    
  15  0.429556     -0.845003      -3.02509       3.02509       48.7951       51.8202    
  16  0.264838      -1.32864      -4.75649       4.75649       48.9001       53.6566    
  17  0.251706      -1.37949      -4.93855       4.93855       47.7233       52.6618    
  18  0.701724     -0.354215      -1.26808       1.26808       48.1302       49.3982    
  19  0.324289      -1.12612      -4.03148       4.03148       48.2631       52.2946    
  20  0.160749E-02  -6.43308      -23.0303       23.0303       48.5005       71.5307    
  21  0.533627     -0.628058      -2.24843       2.24843       47.3977       49.6461    
  22  0.883065     -0.124357     -0.445194      0.445194       49.0408       49.4860    
  23  0.484824     -0.723969      -2.59179       2.59179       48.3493       50.9411    
  24  0.724157     -0.322747      -1.15543       1.15543       47.7893       48.9447    
  25  0.847375     -0.165612     -0.592888      0.592888       48.4558       49.0487    
  26  0.167586      -1.78626      -6.39476       6.39476       48.5836       54.9783    
  27  0.890079     -0.116445     -0.416869      0.416869       47.7100       48.1269    
  28  0.235223      -1.44722      -5.18102       5.18102       47.8405       53.0215    
  29  0.206112      -1.57934      -5.65398       5.65398       49.0191       54.6731    
  30  0.463385     -0.769198      -2.75371       2.75371       48.8766       51.6304    
  31  0.487880E-01  -3.02027      -10.8125       10.8125       48.3863       59.1988    
  32  0.244157      -1.40994      -5.04756       5.04756       47.7850       52.8325    
  33  0.770602     -0.260583     -0.932880      0.932880       47.7162       48.6491    
  34  0.264159      -1.33120      -4.76567       4.76567       48.3547       53.1204    
  35  0.189030E-01  -3.96843      -14.2069       14.2069       48.3430       62.5499    
  36  0.635342     -0.453592      -1.62385       1.62385       48.7895       50.4134    
  37  0.139550      -1.96933      -7.05016       7.05016       47.9426       54.9927    
  38  0.561566     -0.577026      -2.06574       2.06574       48.4120       50.4777    
  39  0.951789     -0.494118E-01 -0.176893      0.176893       47.1953       47.3722    
  40  0.527693     -0.639242      -2.28847       2.28847       49.0487       51.3372    
  41  0.925337     -0.775972E-01 -0.277796      0.277796       49.9618       50.2396    
  42  0.795352     -0.228971     -0.819711      0.819711       49.5451       50.3649    
  43  0.530799     -0.633371      -2.26745       2.26745       47.5631       49.8305    
  44  0.642763     -0.441979      -1.58227       1.58227       48.6182       50.2005    
  45  0.485146     -0.723305      -2.58941       2.58941       48.6655       51.2549    
  46  0.795896     -0.228287     -0.817262      0.817262       47.7332       48.5505    
  47  0.519140     -0.655581      -2.34696       2.34696       48.5919       50.9388    
  48  0.694073E-01  -2.66776      -9.55052       9.55052       48.2724       57.8229    
  49  0.401486     -0.912583      -3.26703       3.26703       49.4574       52.7244    
  50  0.587982E-01  -2.83364      -10.1444       10.1444       48.2589       58.4033    
  51  0.752652     -0.284152      -1.01726       1.01726       48.3105       49.3278    
  52  0.139929      -1.96662      -7.04046       7.04046       47.6108       54.6512    
  53  0.136759      -1.98953      -7.12248       7.12248       47.8510       54.9735    
  54  0.690728     -0.370009      -1.32462       1.32462       47.7303       49.0550    
  55  0.409546     -0.892705      -3.19586       3.19586       48.8082       52.0040    
  56  0.422285     -0.862075      -3.08621       3.08621       50.8673       53.9535    
  57  0.160439      -1.82984      -6.55079       6.55079       53.1660       59.7168    
  58  0.230463      -1.46767      -5.25421       5.25421       48.3828       53.6370    
  59  0.836860     -0.178099     -0.637589      0.637589       47.8839       48.5215    
  60  0.635813     -0.452850      -1.62119       1.62119       50.0105       51.6317    
  61  0.464135     -0.767580      -2.74792       2.74792       48.0046       50.7525    
  62  0.999501     -0.498826E-03 -0.178578E-02  0.178578E-02   49.5314       49.5332    
  63  0.472031     -0.750710      -2.68752       2.68752       47.6508       50.3384    
  64  0.926290     -0.765681E-01 -0.274112      0.274112       47.6468       47.9209    
  65  0.825201E-01  -2.49471      -8.93101       8.93101       52.7556       61.6866    
  66  0.987125     -0.129587E-01 -0.463919E-01  0.463919E-01   49.1221       49.1685    
  67  0.902936     -0.102104     -0.365529      0.365529       50.9974       51.3629    
  68  0.269140E-01  -3.61511      -12.9420       12.9420       52.7507       65.6927    
  69  0.343181      -1.06950      -3.82877       3.82877       52.2522       56.0810    
  70  0.364015      -1.01056      -3.61778       3.61778       50.0400       53.6577    
loop,thermsimp(1:2)       12  0.968994       10.8491    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271         48.23          0.84          1.12         23.81          0.52          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272         70.16          0.84          1.12         23.81          0.55          0.04         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       12
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       13
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      271     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884      -1.87191       1.87191       47.1953       49.0672    
   2  0.691791     -0.368472      -1.31912       1.31912       47.4622       48.7814    
   3  0.688173     -0.373715      -1.33789       1.33789       47.6468       48.9847    
   4  0.439966     -0.821058      -2.93937       2.93937       47.7100       50.6494    
   5  0.945690     -0.558403E-01 -0.199907      0.199907       47.2545       47.4544    
   6  0.238956      -1.43147      -5.12464       5.12464       47.8839       53.0086    
   7  0.280830E-01  -3.57259      -12.7898       12.7898       47.7332       60.5230    
   8  0.902031E-01  -2.40569      -8.61232       8.61232       47.7162       56.3285    
   9  0.198361      -1.61767      -5.79120       5.79120       48.4284       54.2196    
  10  0.201288      -1.60302      -5.73876       5.73876       47.7893       53.5280    
  11  0.710033     -0.342444      -1.22594       1.22594       48.4558       49.6817    
  12  0.182913      -1.69874      -6.08146       6.08146       47.7303       53.8118    
  13  0.817316     -0.201730     -0.722187      0.722187       49.1221       49.8443    
  14  0.894732     -0.111231     -0.398203      0.398203       48.3105       48.7087    
  15  0.854000     -0.157824     -0.565007      0.565007       48.1302       48.6952    
  16  0.248066      -1.39406      -4.99070       4.99070       49.0408       54.0315    
  17  0.670877     -0.399170      -1.42902       1.42902       49.5314       50.9604    
  18  0.701473     -0.354573      -1.26936       1.26936       48.0842       49.3536    
  19  0.199467      -1.61210      -5.77130       5.77130       47.8653       53.6366    
  20  0.391533     -0.937685      -3.35689       3.35689       47.3977       50.7546    
  21  0.586761     -0.533138      -1.90862       1.90862       47.5631       49.4717    
  22  0.163799      -1.80912      -6.47659       6.47659       48.2681       54.7447    
  23  0.955964     -0.450353E-01 -0.161225      0.161225       48.6182       48.7795    
  24  0.365727      -1.00587      -3.60098       3.60098       49.9618       53.5628    
  25  0.733577     -0.309822      -1.10916       1.10916       48.0552       49.1644    
  26  0.111597      -2.19286      -7.85039       7.85039       48.1205       55.9709    
  27  0.714895     -0.335619      -1.20151       1.20151       47.6585       48.8600    
  28  0.816688     -0.202498     -0.724937      0.724937       47.6508       48.3758    
  29  0.480603     -0.732714      -2.62310       2.62310       49.5451       52.1682    
  30  0.573891     -0.555316      -1.98802       1.98802       48.7895       50.7775    
  31  0.204452      -1.58742      -5.68293       5.68293       48.4120       54.0949    
  32  0.845356E-01  -2.47058      -8.84462       8.84462       47.9746       56.8193    
  33  0.524789E-01  -2.94734      -10.5514       10.5514       48.0046       58.5560    
  34  0.631781     -0.459213      -1.64397       1.64397       47.1344       48.7784    
  35  0.620363     -0.477450      -1.70926       1.70926       48.5919       50.3011    
  36  0.553551     -0.591402      -2.11720       2.11720       48.3493       50.4665    
  37  0.546271     -0.604640      -2.16460       2.16460       48.6655       50.8301    
  38  0.402204     -0.910797      -3.26063       3.26063       49.0487       52.3094    
  39  0.735174     -0.307648      -1.10137       1.10137       50.9974       52.0988    
  40  0.359565      -1.02286      -3.66181       3.66181       48.8766       52.5385    
  41  0.564111     -0.572504      -2.04955       2.04955       50.0105       52.0600    
  42  0.412661     -0.885128      -3.16874       3.16874       48.7951       51.9639    
  43  0.795853     -0.228341     -0.817455      0.817455       48.8082       49.6256    
  44  0.909991E-01  -2.39691      -8.58086       8.58086       48.2631       56.8440    
  45  0.830687     -0.185502     -0.664093      0.664093       47.7233       48.3873    
  46  0.592588     -0.523256      -1.87324       1.87324       49.4574       51.3306    
  47  0.489472     -0.714427      -2.55763       2.55763       47.7850       50.3426    
  48  0.992056     -0.797586E-02 -0.285534E-01  0.285534E-01   47.8405       47.8691    
  49  0.808208     -0.212936     -0.762304      0.762304       48.3547       49.1170    
  50  0.212569      -1.54849      -5.54356       5.54356       48.3828       53.9263    
  51  0.214041      -1.54159      -5.51885       5.51885       48.9001       54.4190    
  52  0.586527     -0.533536      -1.91005       1.91005       50.0400       51.9500    
  53  0.603460     -0.505075      -1.80816       1.80816       48.4295       50.2376    
  54  0.819887     -0.198589     -0.710942      0.710942       50.8673       51.5782    
  55  0.204248      -1.58842      -5.68651       5.68651       47.6108       53.2973    
  56  0.540917     -0.614489      -2.19986       2.19986       49.0191       51.2190    
  57  0.430522     -0.842757      -3.01705       3.01705       47.8510       50.8681    
  58  0.637009E-01  -2.75356      -9.85766       9.85766       48.5836       58.4412    
  59  0.872387     -0.136522     -0.488745      0.488745       47.9426       48.4313    
  60  0.740351     -0.300631      -1.07625       1.07625       52.2522       53.3285    
  61  0.844085     -0.169502     -0.606814      0.606814       48.2724       48.8792    
  62  0.574613     -0.554058      -1.98351       1.98351       47.2142       49.1977    
  63  0.382052     -0.962198      -3.44464       3.44464       48.2589       51.7035    
  64  0.564583     -0.571667      -2.04655       2.04655       48.3863       50.4328    
  65  0.700807     -0.355522      -1.27276       1.27276       53.1660       54.4387    
  66  0.237235      -1.43870      -5.15052       5.15052       52.7556       57.9062    
  67  0.745904     -0.293158      -1.04950       1.04950       48.3430       49.3925    
  68  0.369081     -0.996740      -3.56830       3.56830       48.3329       51.9012    
  69  0.512148     -0.669141      -2.39551       2.39551       52.7507       55.1463    
  70  0.239900E-01  -3.73012      -13.3537       13.3537       48.2251       61.5788    
loop,thermsimp(1:2)       13   1.87191       1.31912    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273         48.50          0.83          1.12         23.88          0.38          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.50
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       13
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       14
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      272     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -3.87285       3.87285       47.2545       51.1274    
   2  0.649641     -0.431335      -1.54417       1.54417       47.8405       49.3847    
   3  0.930116     -0.724456E-01 -0.259353      0.259353       47.6508       47.9102    
   4  0.297326      -1.21293      -4.34225       4.34225       47.7233       52.0655    
   5  0.751734     -0.285373      -1.02163       1.02163       47.9426       48.9642    
   6  0.409056     -0.893902      -3.20015       3.20015       48.1302       51.3303    
   7  0.115094      -2.16201      -7.73993       7.73993       48.3105       56.0505    
   8  0.606681     -0.499753      -1.78910       1.78910       47.1344       48.9235    
   9  0.140571      -1.96204      -7.02407       7.02407       48.6182       55.6423    
  10  0.447669E-01  -3.10629      -11.1204       11.1204       47.4622       58.5827    
  11  0.517394     -0.658951      -2.35903       2.35903       47.6585       50.0175    
  12  0.587057     -0.532633      -1.90681       1.90681       48.2724       50.1792    
  13  0.384993E-01  -3.25712      -11.6604       11.6604       47.6468       59.3072    
  14  0.829105E-01  -2.48999      -8.91411       8.91411       47.1953       56.1094    
  15  0.382179     -0.961866      -3.44346       3.44346       48.3547       51.7981    
  16  0.269516      -1.31113      -4.69381       4.69381       48.0552       52.7490    
  17  0.879580     -0.128311     -0.459349      0.459349       47.2142       47.6735    
  18  0.760503E-01  -2.57636      -9.22331       9.22331       48.0842       57.3075    
  19  0.482544     -0.728684      -2.60867       2.60867       48.3430       50.9517    
  20  0.561499     -0.577145      -2.06617       2.06617       47.5631       49.6293    
  21  0.254621      -1.36798      -4.89733       4.89733       48.8082       53.7055    
  22  0.479261     -0.735511      -2.63311       2.63311       48.4558       51.0889    
  23  0.638455     -0.448704      -1.60635       1.60635       49.1221       50.7285    
  24  0.289082      -1.24105      -4.44291       4.44291       48.4295       52.8724    
  25  0.656024     -0.421558      -1.50917       1.50917       48.5919       50.1010    
  26  0.597431     -0.515117      -1.84411       1.84411       47.7850       49.6291    
  27  0.859562     -0.151333     -0.541768      0.541768       48.3863       48.9280    
  28  0.554826     -0.589100      -2.10896       2.10896       48.3493       50.4582    
  29  0.128413      -2.05250      -7.34792       7.34792       47.7100       55.0579    
  30  0.311170      -1.16742      -4.17932       4.17932       47.3977       51.5770    
  31  0.606679     -0.499755      -1.78911       1.78911       48.7895       50.5786    
  32  0.923238     -0.798686E-01 -0.285928      0.285928       48.6655       48.9514    
  33  0.734154     -0.309037      -1.10635       1.10635       47.8510       48.9574    
  34  0.988670     -0.113947E-01 -0.407928E-01  0.407928E-01   49.5314       49.5722    
  35  0.136308      -1.99284      -7.13431       7.13431       49.0191       56.1534    
  36  0.345839      -1.06178      -3.80116       3.80116       49.4574       53.2586    
  37  0.349440      -1.05142      -3.76407       3.76407       50.8673       54.6313    
  38  0.625658E-01  -2.77154      -9.92203       9.92203       48.2589       58.1809    
  39  0.394804     -0.929365      -3.32710       3.32710       48.3329       51.6600    
  40  0.899667E-02  -4.71090      -16.8649       16.8649       50.0400       66.9049    
  41  0.823946     -0.193651     -0.693264      0.693264       48.7951       49.4884    
  42  0.834235     -0.181240     -0.648836      0.648836       50.0105       50.6593    
  43  0.777534     -0.251627     -0.900820      0.900820       50.9974       51.8982    
  44  0.384993     -0.954531      -3.41720       3.41720       49.5451       52.9623    
  45  0.247443E-01  -3.69916      -13.2429       13.2429       49.0487       62.2916    
  46  0.810695     -0.209863     -0.751305      0.751305       48.8766       49.6279    
  47  0.893618     -0.112477     -0.402664      0.402664       47.8839       48.2866    
  48  0.545617     -0.605837      -2.16888       2.16888       47.6108       49.7797    
  49  0.587193     -0.532402      -1.90599       1.90599       52.2522       54.1582    
  50  0.991207     -0.883185E-02 -0.316178E-01  0.316178E-01   47.7893       47.8209    
  51  0.477440     -0.739316      -2.64673       2.64673       49.9618       52.6086    
  52  0.444858     -0.810000      -2.89978       2.89978       47.8653       50.7651    
  53  0.103440      -2.26876      -8.12212       8.12212       47.7303       55.8525    
  54  0.320718      -1.13719      -4.07112       4.07112       48.3828       52.4539    
  55  0.161721      -1.82188      -6.52230       6.52230       49.0408       55.5631    
  56  0.912244     -0.918481E-01 -0.328814      0.328814       48.4120       48.7408    
  57  0.358583      -1.02559      -3.67160       3.67160       48.4284       52.1000    
  58  0.263871      -1.33229      -4.76958       4.76958       48.9001       53.6697    
  59  0.782230     -0.245606     -0.879264      0.879264       53.1660       54.0452    
  60  0.592946     -0.522652      -1.87108       1.87108       48.2681       50.1392    
  61  0.652732     -0.426589      -1.52718       1.52718       52.7507       54.2779    
  62  0.817021     -0.202091     -0.723481      0.723481       48.1205       48.8440    
  63  0.177213      -1.73040      -6.19480       6.19480       47.7162       53.9110    
  64  0.263258      -1.33462      -4.77790       4.77790       47.9746       52.7525    
  65  0.856937     -0.154391     -0.552715      0.552715       48.2631       48.8158    
  66  0.541629E-01  -2.91576      -10.4383       10.4383       52.7556       63.1940    
  67  0.919404     -0.840293E-01 -0.300823      0.300823       48.5836       48.8844    
  68  0.996572     -0.343426E-02 -0.122946E-01  0.122946E-01   48.0046       48.0169    
  69  0.257654      -1.35614      -4.85494       4.85494       47.7332       52.5881    
  70  0.684182     -0.379532      -1.35871       1.35871       48.5005       49.8592    
loop,thermsimp(1:2)       14   3.87285       1.54417    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274         49.22          0.84          1.12         23.86          0.48          0.04         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       14
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       15
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      273     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -5.42503       5.42503       47.2142       52.6392    
   2  0.894567E-01  -2.41400      -8.64206       8.64206       47.7893       56.4313    
   3  0.863615     -0.146628     -0.524925      0.524925       47.6508       48.1758    
   4  0.807990     -0.213206     -0.763272      0.763272       48.0046       48.7679    
   5  0.318173      -1.14516      -4.09965       4.09965       47.8839       51.9836    
   6  0.464606     -0.766566      -2.74429       2.74429       48.4120       51.1562    
   7  0.574933     -0.553501      -1.98152       1.98152       48.2631       50.2446    
   8  0.974939     -0.253802E-01 -0.908605E-01  0.908605E-01   48.1205       48.2114    
   9  0.415757     -0.877653      -3.14198       3.14198       48.5836       51.7255    
  10  0.187109      -1.67606      -6.00026       6.00026       47.1344       53.1347    
  11  0.730515E-01  -2.61659      -9.36733       9.36733       48.3863       57.7536    
  12  0.209185      -1.56454      -5.60101       5.60101       48.6655       54.2665    
  13  0.496690     -0.699790      -2.50523       2.50523       47.8510       50.3563    
  14  0.862986     -0.147356     -0.527533      0.527533       47.9426       48.4701    
  15  0.888200     -0.118558     -0.424434      0.424434       47.8405       48.2649    
  16  0.380888     -0.965250      -3.45557       3.45557       48.7951       52.2507    
  17  0.135305      -2.00022      -7.16075       7.16075       49.5314       56.6921    
  18  0.927079     -0.757167E-01 -0.271064      0.271064       48.8766       49.1477    
  19  0.603067     -0.505727      -1.81049       1.81049       47.7850       49.5954    
  20  0.136202      -1.99362      -7.13711       7.13711       47.5631       54.7002    
  21  0.954653     -0.464076E-01 -0.166138      0.166138       47.6108       47.7769    
  22  0.151192      -1.88920      -6.76331       6.76331       48.5005       55.2638    
  23  0.449259     -0.800155      -2.86454       2.86454       47.6585       50.5230    
  24  0.780874     -0.247341     -0.885476      0.885476       48.5919       49.4774    
  25  0.456238     -0.784740      -2.80935       2.80935       48.2681       51.0775    
  26  0.163284      -1.81227      -6.48787       6.48787       48.2724       54.7603    
  27  0.821444     -0.196692     -0.704152      0.704152       48.3493       49.0534    
  28  0.861448     -0.149141     -0.533920      0.533920       48.7895       49.3234    
  29  0.924167     -0.788621E-01 -0.282324      0.282324       50.0105       50.2928    
  30  0.195059      -1.63445      -5.85131       5.85131       49.1221       54.9734    
  31  0.375134     -0.980472      -3.51007       3.51007       47.8653       51.3754    
  32  0.909862     -0.944628E-01 -0.338175      0.338175       48.3430       48.6812    
  33  0.831459     -0.184574     -0.660770      0.660770       48.4558       49.1166    
  34  0.627278     -0.466365      -1.66957       1.66957       47.2545       48.9241    
  35  0.918890     -0.845891E-01 -0.302827      0.302827       48.1302       48.4330    
  36  0.475784     -0.742791      -2.65917       2.65917       47.3977       50.0569    
  37  0.344524      -1.06559      -3.81479       3.81479       48.3329       52.1477    
  38  0.286778      -1.24905      -4.47155       4.47155       48.3547       52.8262    
  39  0.336148      -1.09020      -3.90290       3.90290       50.9974       54.9003    
  40  0.709840     -0.342716      -1.22692       1.22692       47.7233       48.9502    
  41  0.219827      -1.51491      -5.42335       5.42335       48.4284       53.8518    
  42  0.347594      -1.05672      -3.78303       3.78303       48.3828       52.1658    
  43  0.905734     -0.990099E-01 -0.354453      0.354453       47.7332       48.0877    
  44  0.826231     -0.190881     -0.683348      0.683348       49.9618       50.6452    
  45  0.400277     -0.915599      -3.27782       3.27782       48.0552       51.3330    
  46  0.555153     -0.588512      -2.10686       2.10686       47.9746       50.0815    
  47  0.864397     -0.145723     -0.521686      0.521686       48.4295       48.9512    
  48  0.277380E-01  -3.58495      -12.8340       12.8340       49.5451       62.3792    
  49  0.993968     -0.605015E-02 -0.216594E-01  0.216594E-01   49.4574       49.4791    
  50  0.717076     -0.332573      -1.19060       1.19060       48.9001       50.0908    
  51  0.736253     -0.306182      -1.09612       1.09612       48.8082       49.9043    
  52  0.278813      -1.27722      -4.57240       4.57240       47.7162       52.2886    
  53  0.646460     -0.436245      -1.56174       1.56174       53.1660       54.7277    
  54  0.600312     -0.510306      -1.82688       1.82688       52.2522       54.0791    
  55  0.295434      -1.21931      -4.36510       4.36510       52.7507       57.1158    
  56  0.946129     -0.553767E-01 -0.198247      0.198247       50.8673       51.0655    
  57  0.722008     -0.325719      -1.16607       1.16607       47.7100       48.8761    
  58  0.789514     -0.236338     -0.846084      0.846084       49.0408       49.8869    
  59  0.955429     -0.455949E-01 -0.163229      0.163229       48.6182       48.7815    
  60  0.693546     -0.365938      -1.31005       1.31005       47.7303       49.0404    
  61  0.979434     -0.207808E-01 -0.743948E-01  0.743948E-01   48.3105       48.3849    
  62  0.860966     -0.149700     -0.535923      0.535923       47.1953       47.7312    
  63  0.329063      -1.11151      -3.97917       3.97917       49.0191       52.9983    
  64  0.839540     -0.174902     -0.626144      0.626144       48.0842       48.7104    
  65  0.511945     -0.669538      -2.39693       2.39693       48.2589       50.6558    
  66  0.265617      -1.32570      -4.74597       4.74597       47.4622       52.2082    
  67  0.793213     -0.231663     -0.829347      0.829347       47.6468       48.4762    
  68  0.515723     -0.662186      -2.37061       2.37061       49.0487       51.4193    
  69  0.928816     -0.738450E-01 -0.264363      0.264363       52.7556       53.0200    
  70  0.936254     -0.658686E-01 -0.235808      0.235808       49.2175       49.4533    
loop,thermsimp(1:2)       15   5.42503       8.64206    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275         56.55          0.84          1.13         23.81          0.46          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     56.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       15
neval is:      274
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       16
neval is:      274


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      274     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -5.23466       5.23466       47.1953       52.4299    
   2  0.641193     -0.444425      -1.59103       1.59103       47.6108       49.2018    
   3  0.353033      -1.04119      -3.72745       3.72745       47.7332       51.4607    
   4  0.928955     -0.736953E-01 -0.263827      0.263827       47.6508       47.9147    
   5  0.350257      -1.04909      -3.75571       3.75571       48.1205       51.8762    
   6  0.682617     -0.381821      -1.36691       1.36691       47.8405       49.2074    
   7  0.162763      -1.81546      -6.49930       6.49930       48.3105       54.8098    
   8  0.874032     -0.134639     -0.482003      0.482003       48.1302       48.6122    
   9  0.518909     -0.656027      -2.34856       2.34856       47.9426       50.2911    
  10  0.461984     -0.772226      -2.76455       2.76455       47.6468       50.4114    
  11  0.449468     -0.799691      -2.86287       2.86287       48.3430       51.2059    
  12  0.523281     -0.647637      -2.31853       2.31853       48.0842       50.4028    
  13  0.637377     -0.450394      -1.61240       1.61240       48.0046       49.6170    
  14  0.596329     -0.516963      -1.85072       1.85072       48.6182       50.4690    
  15  0.286246      -1.25090      -4.47820       4.47820       47.7100       52.1882    
  16  0.590425     -0.526913      -1.88634       1.88634       47.2545       49.1408    
  17  0.853637     -0.158249     -0.566527      0.566527       47.7233       48.2898    
  18  0.245572      -1.40416      -5.02687       5.02687       48.4295       53.4564    
  19  0.375654     -0.979088      -3.50511       3.50511       47.7303       51.2354    
  20  0.281654      -1.26708      -4.53610       4.53610       48.3493       52.8854    
  21  0.443392     -0.813302      -2.91160       2.91160       48.4558       51.3674    
  22  0.442934     -0.814335      -2.91530       2.91530       48.8766       51.7919    
  23  0.171790      -1.76149      -6.30607       6.30607       48.7895       55.0956    
  24  0.802582     -0.219921     -0.787313      0.787313       49.2175       50.0048    
  25  0.162733      -1.81564      -6.49996       6.49996       48.5919       55.0918    
  26  0.838320     -0.176355     -0.631346      0.631346       49.4574       50.0887    
  27  0.210754      -1.55706      -5.57425       5.57425       47.7850       53.3592    
  28  0.240377      -1.42554      -5.10341       5.10341       49.0408       54.1442    
  29  0.173042E-01  -4.05680      -14.5233       14.5233       48.8082       63.3314    
  30  0.640146     -0.446059      -1.59688       1.59688       47.3977       48.9946    
  31  0.749210     -0.288736      -1.03367       1.03367       47.9746       49.0083    
  32  0.666162     -0.406222      -1.45427       1.45427       48.9001       50.3544    
  33  0.601746     -0.507920      -1.81834       1.81834       48.2631       50.0814    
  34  0.677044     -0.390020      -1.39626       1.39626       50.0105       51.4067    
  35  0.290379      -1.23657      -4.42689       4.42689       47.8510       52.2779    
  36  0.439723     -0.821610      -2.94134       2.94134       47.6585       50.5998    
  37  0.680091     -0.385528      -1.38018       1.38018       49.9618       51.3420    
  38  0.803784     -0.218425     -0.781955      0.781955       48.2589       49.0408    
  39  0.507823     -0.677622      -2.42587       2.42587       50.8673       53.2931    
  40  0.894573     -0.111408     -0.398839      0.398839       48.2681       48.6670    
  41  0.826908     -0.190062     -0.680418      0.680418       48.4120       49.0924    
  42  0.815562     -0.203878     -0.729879      0.729879       48.0552       48.7851    
  43  0.352457      -1.04283      -3.73330       3.73330       47.8653       51.5986    
  44  0.104059      -2.26279      -8.10075       8.10075       49.0487       57.1495    
  45  0.601892     -0.507677      -1.81747       1.81747       48.5836       50.4010    
  46  0.988184     -0.118862E-01 -0.425522E-01  0.425522E-01   47.8839       47.9265    
  47  0.733912     -0.309366      -1.10752       1.10752       48.3329       49.4404    
  48  0.107394      -2.23125      -7.98781       7.98781       48.3828       56.3706    
  49  0.592150     -0.523995      -1.87589       1.87589       47.4622       49.3381    
  50  0.821901     -0.196136     -0.702161      0.702161       48.7951       49.4973    
  51  0.400070E-01  -3.21870      -11.5229       11.5229       47.7162       59.2391    
  52  0.271211      -1.30486      -4.67136       4.67136       47.2142       51.8855    
  53  0.296309      -1.21635      -4.35451       4.35451       48.3547       52.7092    
  54  0.436334     -0.829346      -2.96904       2.96904       49.0191       51.9882    
  55  0.372372     -0.987863      -3.53652       3.53652       52.7556       56.2922    
  56  0.806182     -0.215446     -0.771291      0.771291       47.1344       47.9057    
  57  0.194087      -1.63945      -5.86919       5.86919       48.4284       54.2976    
  58  0.739876     -0.301273      -1.07855       1.07855       52.2522       53.3308    
  59  0.348380      -1.05446      -3.77495       3.77495       48.6655       52.4404    
  60  0.850149     -0.162343     -0.581186      0.581186       47.5631       48.1443    
  61  0.123296      -2.09317      -7.49348       7.49348       53.1660       60.6595    
  62  0.855160     -0.156467     -0.560148      0.560148       48.2724       48.8326    
  63  0.959969E-01  -2.34344      -8.38945       8.38945       50.9974       59.3869    
  64  0.739916     -0.301218      -1.07835       1.07835       49.1221       50.2005    
  65  0.470406     -0.754159      -2.69987       2.69987       48.5005       51.2003    
  66  0.559264     -0.581134      -2.08045       2.08045       47.7893       49.8697    
  67  0.935836     -0.663155E-01 -0.237408      0.237408       49.5314       49.7688    
  68  0.190508      -1.65806      -5.93583       5.93583       52.7507       58.6866    
  69  0.410140     -0.891256      -3.19068       3.19068       48.3863       51.5769    
  70  0.289980E-01  -3.54053      -12.6750       12.6750       56.5500       69.2250    
loop,thermsimp(1:2)       16   5.23466       1.59103    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    276         49.55          0.83          1.12         23.80          0.55          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       16
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       17
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      275     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427     -0.903682      0.903682       47.1344       48.0381    
   2  0.350417      -1.04863      -3.75407       3.75407       47.6508       51.4049    
   3  0.533846     -0.627648      -2.24696       2.24696       47.8839       50.1309    
   4  0.622955     -0.473280      -1.69433       1.69433       47.5631       49.2574    
   5  0.661091E-01  -2.71645      -9.72482       9.72482       47.7233       57.4481    
   6  0.759206     -0.275482     -0.986219      0.986219       48.1302       49.1164    
   7  0.430535     -0.842727      -3.01694       3.01694       48.2681       51.2851    
   8  0.257678      -1.35604      -4.85460       4.85460       48.0552       52.9098    
   9  0.296561      -1.21550      -4.35146       4.35146       48.2724       52.6239    
  10  0.805929     -0.215760     -0.772414      0.772414       47.3977       48.1701    
  11  0.421616     -0.863661      -3.09188       3.09188       47.9746       51.0665    
  12  0.767803     -0.264223     -0.945911      0.945911       48.2589       49.2048    
  13  0.605260     -0.502097      -1.79750       1.79750       48.4120       50.2095    
  14  0.566784     -0.567776      -2.03263       2.03263       47.2545       49.2871    
  15  0.292740      -1.22847      -4.39789       4.39789       47.6108       52.0087    
  16  0.898463     -0.107069     -0.383306      0.383306       47.8405       48.2238    
  17  0.218067      -1.52295      -5.45214       5.45214       47.4622       52.9144    
  18  0.856756     -0.154603     -0.553474      0.553474       48.3329       48.8864    
  19  0.338883      -1.08210      -3.87389       3.87389       48.7951       52.6690    
  20  0.796034     -0.228113     -0.816640      0.816640       48.0046       48.8212    
  21  0.778636     -0.250212     -0.895752      0.895752       49.5314       50.4271    
  22  0.575989     -0.551667      -1.97496       1.97496       47.7893       49.7642    
  23  0.355531      -1.03414      -3.70221       3.70221       49.2175       52.9197    
  24  0.164949      -1.80212      -6.45155       6.45155       48.2631       54.7146    
  25  0.315998      -1.15202      -4.12420       4.12420       49.4574       53.5816    
  26  0.330933      -1.10584      -3.95888       3.95888       49.1221       53.0810    
  27  0.429436     -0.845283      -3.02609       3.02609       47.9426       50.9687    
  28  0.464808     -0.766130      -2.74273       2.74273       48.9001       51.6429    
  29  0.192211      -1.64916      -5.90396       5.90396       48.5836       54.4875    
  30  0.866849     -0.142891     -0.511544      0.511544       48.0842       48.5958    
  31  0.474973     -0.744498      -2.66528       2.66528       47.6468       50.3121    
  32  0.667713     -0.403897      -1.44594       1.44594       48.6182       50.0642    
  33  0.994155     -0.586200E-02 -0.209858E-01  0.209858E-01   47.6585       47.6795    
  34  0.577739     -0.548634      -1.96410       1.96410       48.5005       50.4646    
  35  0.381919     -0.962546      -3.44589       3.44589       48.3430       51.7889    
  36  0.733204     -0.310331      -1.11098       1.11098       47.7303       48.8413    
  37  0.492382     -0.708500      -2.53641       2.53641       49.9618       52.4982    
  38  0.188899E-01  -3.96913      -14.2094       14.2094       48.4558       62.6652    
  39  0.741920E-01  -2.60110      -9.31187       9.31187       50.0105       59.3224    
  40  0.210592      -1.55783      -5.57700       5.57700       47.7332       53.3102    
  41  0.682838     -0.381498      -1.36575       1.36575       48.3863       49.7520    
  42  0.656831     -0.420328      -1.50476       1.50476       47.8653       49.3701    
  43  0.444670     -0.810424      -2.90130       2.90130       48.8766       51.7779    
  44  0.872301     -0.136621     -0.489099      0.489099       48.1205       48.6096    
  45  0.932741     -0.696282E-01 -0.249267      0.249267       47.2142       47.4634    
  46  0.601727     -0.507951      -1.81845       1.81845       49.0191       50.8376    
  47  0.940344     -0.615097E-01 -0.220203      0.220203       47.7100       47.9302    
  48  0.208477E-01  -3.87051      -13.8563       13.8563       47.8510       61.7074    
  49  0.257831      -1.35545      -4.85248       4.85248       47.1953       52.0478    
  50  0.522803     -0.648550      -2.32179       2.32179       48.6655       50.9873    
  51  0.676437     -0.390915      -1.39947       1.39947       48.3547       49.7542    
  52  0.612346     -0.490458      -1.75583       1.75583       48.3493       50.1051    
  53  0.206854      -1.57574      -5.64112       5.64112       50.8673       56.5084    
  54  0.201156      -1.60367      -5.74111       5.74111       52.2522       57.9934    
  55  0.785118     -0.241921     -0.866070      0.866070       47.7850       48.6510    
  56  0.534951     -0.625580      -2.23956       2.23956       48.4295       50.6690    
  57  0.147432      -1.91439      -6.85347       6.85347       49.0408       55.8943    
  58  0.696605     -0.361537      -1.29429       1.29429       48.4284       49.7227    
  59  0.711810     -0.339944      -1.21699       1.21699       48.3105       49.5275    
  60  0.934269     -0.679906E-01 -0.243404      0.243404       48.5919       48.8353    
  61  0.821040     -0.197183     -0.705910      0.705910       48.7895       49.4954    
  62  0.682914     -0.381386      -1.36535       1.36535       52.7556       54.1210    
  63  0.660876     -0.414189      -1.48279       1.48279       48.3828       49.8655    
  64  0.653213     -0.425852      -1.52454       1.52454       49.0487       50.5733    
  65  0.327611      -1.11593      -3.99499       3.99499       52.7507       56.7457    
  66  0.191936      -1.65059      -5.90908       5.90908       47.7162       53.6253    
  67  0.417647E-01  -3.17570      -11.3689       11.3689       50.9974       62.3664    
  68  0.629872     -0.462239      -1.65481       1.65481       53.1660       54.8208    
  69  0.391125     -0.938727      -3.36062       3.36062       48.8082       52.1688    
  70  0.111121      -2.19714      -7.86570       7.86570       49.5451       57.4109    
loop,thermsimp(1:2)       17  0.903682       3.75407    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277         48.28          0.84          1.11         23.84          0.63          0.04         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    278         54.55          0.84          1.09         23.90          0.75          0.04         26.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       17
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       18
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      277     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -5.10315       5.10315       47.2142       52.3173    
   2  0.711556E-02  -4.94547      -17.7047       17.7047       47.6585       65.3632    
   3  0.909796     -0.945347E-01 -0.338432      0.338432       47.7100       48.0484    
   4  0.659218     -0.416702      -1.49178       1.49178       47.1344       48.6262    
   5  0.833482     -0.182144     -0.652070      0.652070       47.3977       48.0498    
   6  0.726295E-01  -2.62238      -9.38807       9.38807       47.8405       57.2286    
   7  0.687091     -0.375288      -1.34352       1.34352       48.0842       49.4278    
   8  0.860775     -0.149922     -0.536717      0.536717       48.1205       48.6572    
   9  0.846215     -0.166982     -0.597792      0.597792       47.7850       48.3827    
  10  0.398551     -0.919919      -3.29329       3.29329       48.0046       51.2979    
  11  0.416092     -0.876849      -3.13910       3.13910       48.5919       51.7310    
  12  0.463389     -0.769189      -2.75368       2.75368       47.7303       50.4840    
  13  0.207356      -1.57332      -5.63244       5.63244       48.3329       53.9653    
  14  0.133003      -2.01738      -7.22219       7.22219       48.1302       55.3523    
  15  0.464971     -0.765779      -2.74147       2.74147       48.2589       51.0004    
  16  0.568281     -0.565140      -2.02319       2.02319       47.5631       49.5863    
  17  0.638811     -0.448147      -1.60435       1.60435       47.2545       48.8589    
  18  0.865664     -0.144259     -0.516443      0.516443       47.8653       48.3818    
  19  0.475002     -0.744436      -2.66506       2.66506       48.7895       51.4546    
  20  0.537086     -0.621597      -2.22530       2.22530       48.3105       50.5358    
  21  0.782345     -0.245459     -0.878737      0.878737       48.4284       49.3072    
  22  0.725469     -0.320937      -1.14895       1.14895       48.3863       49.5352    
  23  0.701426E-01  -2.65723      -9.51280       9.51280       48.3547       57.8675    
  24  0.297043      -1.21388      -4.34566       4.34566       47.7893       52.1349    
  25  0.444870     -0.809973      -2.89968       2.89968       48.3828       51.2824    
  26  0.685684     -0.377338      -1.35086       1.35086       48.6182       49.9691    
  27  0.651244     -0.428871      -1.53535       1.53535       48.3493       49.8846    
  28  0.269082      -1.31274      -4.69957       4.69957       47.8839       52.5835    
  29  0.177107      -1.73100      -6.19695       6.19695       48.4120       54.6089    
  30  0.766464     -0.265968     -0.952158      0.952158       47.6468       48.5990    
  31  0.801833     -0.220855     -0.790654      0.790654       49.5314       50.3220    
  32  0.759414     -0.275209     -0.985240      0.985240       48.5005       49.4857    
  33  0.566307     -0.568618      -2.03564       2.03564       49.0487       51.0844    
  34  0.297948      -1.21084      -4.33476       4.33476       48.4295       52.7642    
  35  0.430097E-01  -3.14633      -11.2638       11.2638       49.0191       60.2829    
  36  0.529414     -0.635984      -2.27681       2.27681       47.9426       50.2194    
  37  0.717133     -0.332494      -1.19032       1.19032       48.6655       49.8558    
  38  0.209457      -1.56323      -5.59634       5.59634       47.9746       53.5710    
  39  0.732428     -0.311390      -1.11477       1.11477       48.2681       49.3829    
  40  0.697782     -0.359849      -1.28825       1.28825       47.6508       48.9391    
  41  0.977227     -0.230362E-01 -0.824689E-01  0.824689E-01   48.9001       48.9826    
  42  0.744700     -0.294773      -1.05528       1.05528       48.8766       49.9319    
  43  0.713341     -0.337796      -1.20930       1.20930       48.3430       49.5523    
  44  0.497823     -0.697510      -2.49707       2.49707       47.6108       50.1078    
  45  0.968758     -0.317404E-01 -0.113630      0.113630       47.1953       47.3089    
  46  0.287665      -1.24596      -4.46050       4.46050       48.8082       53.2687    
  47  0.964672     -0.359674E-01 -0.128762      0.128762       49.9618       50.0906    
  48  0.733769     -0.309561      -1.10822       1.10822       48.2724       49.3806    
  49  0.692680     -0.367187      -1.31452       1.31452       48.7951       50.1097    
  50  0.328873      -1.11208      -3.98123       3.98123       48.0552       52.0365    
  51  0.744920     -0.294478      -1.05423       1.05423       47.4622       48.5165    
  52  0.655188     -0.422834      -1.51373       1.51373       49.2175       50.7313    
  53  0.255467      -1.36466      -4.88545       4.88545       49.1221       54.0076    
  54  0.262199E-02  -5.94382      -21.2787       21.2787       47.7332       69.0119    
  55  0.538310     -0.619321      -2.21715       2.21715       49.4574       51.6745    
  56  0.456270     -0.784671      -2.80910       2.80910       47.7162       50.5253    
  57  0.990209     -0.983957E-02 -0.352254E-01  0.352254E-01   52.7556       52.7909    
  58  0.262373      -1.33799      -4.78996       4.78996       48.5836       53.3735    
  59  0.645275     -0.438079      -1.56831       1.56831       48.2631       49.8314    
  60  0.423351     -0.859554      -3.07718       3.07718       53.1660       56.2432    
  61  0.353204      -1.04071      -3.72571       3.72571       49.0408       52.7665    
  62  0.721881     -0.325895      -1.16670       1.16670       50.8673       52.0340    
  63  0.213966      -1.54194      -5.52010       5.52010       52.7507       58.2708    
  64  0.176516      -1.73434      -6.20891       6.20891       49.5451       55.7541    
  65  0.885542     -0.121555     -0.435165      0.435165       47.7233       48.1584    
  66  0.551521     -0.595076      -2.13036       2.13036       52.2522       54.3826    
  67  0.847646     -0.165292     -0.591740      0.591740       50.0105       50.6022    
  68  0.825749E-01  -2.49405      -8.92863       8.92863       47.8510       56.7797    
  69  0.123448      -2.09193      -7.48906       7.48906       50.9974       58.4865    
  70  0.384918     -0.954725      -3.41789       3.41789       48.2799       51.6978    
loop,thermsimp(1:2)       18   5.10315       17.7047    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279         49.21          0.84          1.12         23.79          0.50          0.04         26.29
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    280         55.93          0.84          1.12         23.77          0.54          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    3.57998               277
loop is:       18
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    3.57998               277
loop is:       19
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1.78999               346

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      279     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453     -0.582557      0.582557       47.1953       47.7778    
   2  0.240049      -1.42691      -2.55415       2.55415       47.7100       50.2642    
   3  0.365543      -1.00637      -1.80139       1.80139       47.3977       49.1991    
   4  0.399010     -0.918769      -1.64459       1.64459       47.7233       49.3678    
   5  0.685268     -0.377945     -0.676517      0.676517       47.8653       48.5419    
   6  0.335805E-01  -3.39381      -6.07488       6.07488       47.7850       53.8598    
   7  0.820520     -0.197817     -0.354089      0.354089       47.4622       47.8163    
   8  0.756560     -0.278973     -0.499359      0.499359       47.6468       48.1462    
   9  0.869461     -0.139882     -0.250387      0.250387       47.1344       47.3848    
  10  0.787378     -0.239047     -0.427890      0.427890       48.1205       48.5484    
  11  0.330926      -1.10586      -1.97948       1.97948       47.2545       49.2340    
  12  0.339084E-01  -3.38409      -6.05748       6.05748       47.6508       53.7083    
  13  0.672805     -0.396300     -0.709372      0.709372       48.9001       49.6095    
  14  0.822413     -0.195513     -0.349966      0.349966       48.4284       48.7784    
  15  0.928870     -0.737865E-01 -0.132077      0.132077       48.2724       48.4045    
  16  0.778944     -0.249816     -0.447168      0.447168       48.2681       48.7153    
  17  0.301602E-01  -3.50123      -6.26716       6.26716       48.0842       54.3514    
  18  0.292626      -1.22886      -2.19965       2.19965       48.5005       50.7001    
  19  0.149515      -1.90036      -3.40162       3.40162       48.3863       51.7879    
  20  0.500330E-01  -2.99507      -5.36114       5.36114       48.3430       53.7041    
  21  0.759114E-01  -2.57819      -4.61493       4.61493       47.5631       52.1780    
  22  0.613440     -0.488673     -0.874718      0.874718       48.2631       49.1378    
  23  0.132502      -2.02116      -3.61785       3.61785       48.6655       52.2833    
  24  0.189750E-02  -6.26722      -11.2182       11.2182       48.3493       59.5675    
  25  0.507622     -0.678018      -1.21364       1.21364       48.8766       50.0903    
  26  0.378733     -0.970924      -1.73794       1.73794       48.6182       50.3562    
  27  0.139411      -1.97033      -3.52686       3.52686       49.9618       53.4887    
  28  0.298599      -1.20865      -2.16348       2.16348       47.6108       49.7743    
  29  0.767617     -0.264464     -0.473387      0.473387       48.7951       49.2685    
  30  0.656077     -0.421478     -0.754440      0.754440       47.9426       48.6970    
  31  0.701883     -0.353988     -0.633634      0.633634       49.5314       50.1650    
  32  0.940950     -0.608655E-01 -0.108948      0.108948       47.7303       47.8393    
  33  0.621043     -0.476355     -0.852670      0.852670       47.7162       48.5689    
  34  0.622910     -0.473353     -0.847295      0.847295       48.3105       49.1578    
  35  0.525019     -0.644320      -1.15333       1.15333       50.0105       51.1638    
  36  0.871126     -0.137969     -0.246963      0.246963       49.2175       49.4645    
  37  0.475532     -0.743322      -1.33054       1.33054       48.2589       49.5894    
  38  0.320094      -1.13914      -2.03905       2.03905       49.0487       51.0878    
  39  0.688986     -0.372534     -0.666831      0.666831       48.3828       49.0496    
  40  0.831218     -0.184863     -0.330903      0.330903       48.0046       48.3355    
  41  0.639633     -0.446861     -0.799875      0.799875       48.7895       49.5894    
  42  0.628257     -0.464807     -0.831998      0.831998       49.4574       50.2894    
  43  0.925835     -0.770596E-01 -0.137936      0.137936       48.2799       48.4179    
  44  0.611089     -0.492512     -0.881590      0.881590       48.5919       49.4735    
  45  0.423003E-01  -3.16296      -5.66166       5.66166       50.8673       56.5289    
  46  0.430763     -0.842198      -1.50752       1.50752       48.0552       49.5627    
  47  0.374764     -0.981459      -1.75680       1.75680       47.7893       49.5461    
  48  0.109336      -2.21333      -3.96183       3.96183       47.2142       51.1760    
  49  0.642636E-02  -5.04735      -9.03469       9.03469       47.8839       56.9186    
  50  0.232984      -1.45679      -2.60763       2.60763       48.4295       51.0371    
  51  0.169005E-01  -4.08041      -7.30389       7.30389       49.0408       56.3447    
  52  0.183441      -1.69586      -3.03557       3.03557       52.7556       55.7912    
  53  0.257429      -1.35701      -2.42903       2.42903       48.8082       51.2372    
  54  0.784332     -0.242922     -0.434828      0.434828       48.5836       49.0184    
  55  0.417881     -0.872558      -1.56187       1.56187       47.9746       49.5365    
  56  0.597408E-01  -2.81774      -5.04372       5.04372       48.3329       53.3766    
  57  0.854186E-01  -2.46019      -4.40371       4.40371       49.1221       53.5258    
  58  0.484163     -0.725335      -1.29834       1.29834       52.2522       53.5506    
  59  0.392210     -0.935958      -1.67535       1.67535       48.4120       50.0873    
  60  0.544229     -0.608385      -1.08900       1.08900       48.1302       49.2192    
  61  0.846696     -0.166413     -0.297877      0.297877       49.5451       49.8430    
  62  0.273327      -1.29709      -2.32177       2.32177       53.1660       55.4878    
  63  0.253790      -1.37125      -2.45452       2.45452       47.8510       50.3056    
  64  0.683640     -0.380324     -0.680776      0.680776       47.8405       48.5213    
  65  0.707324     -0.346266     -0.619812      0.619812       48.3547       48.9745    
  66  0.664908     -0.408107     -0.730506      0.730506       52.7507       53.4812    
  67  0.269947      -1.30953      -2.34404       2.34404       50.9974       53.3414    
  68  0.112661      -2.18338      -3.90821       3.90821       49.0191       52.9273    
  69  0.392076     -0.936299      -1.67596       1.67596       47.6585       49.3345    
  70  0.711292     -0.340672     -0.609798      0.609798       49.2075       49.8173    
loop,thermsimp(1:2)       19  0.582557       2.55415    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281         47.57          0.84          1.12         23.80          0.52          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    282         49.84          0.84          1.11         23.77          0.54          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    47.568        1.160     -1.844      3.180     -102.6      1.360    
                      0.3097      1.290     -99.70      3.726    -0.3371E-01

                       2.215     -1.085      1.530      6937.      3419.    

                     -0.8112E-01  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6108.      655.6    

                       1.433     -5.912     -4.141     -8.502      6.636    

                      -14.93     -3.607      8220.      0.000     0.1108E+05



                       1372.     0.1110E+05 -3548.     0.1040E+05  4075.    

                       5122.    -0.5842E-02 0.1833     0.1689E-01 0.1154    

                     -0.2486    -0.9205E-01 0.1800     0.1094     0.5709E-01



                     -0.4468    -0.7803      0.000     0.4775E-01-0.8015E-01

                     -0.1813E-02 0.1041    -0.7116    -0.1504     0.4146E-01

                      0.4519E-01-0.1414E-01-0.3767     -1.211      7090.    



                      -1.060     -1.212     -2.227     -2.325    -0.3807    

                     -0.3252      9.219      8.670    -0.1899E+05 -4.000    

                     -0.5336     -2.199      9.293      8.864    -0.1908E+05



                      -4.000     0.4571    -0.4755      8.855      9.062    

                     -0.1908E+05 -7.000    -0.7819    -0.6945      9.030    

                       8.767    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.57
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       19
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       20
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      281     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -2.08571       2.08571       47.1344       49.2201    
   2  0.362384      -1.01505      -1.81693       1.81693       47.1953       49.0122    
   3  0.900627     -0.104664     -0.187348      0.187348       47.4622       47.6496    
   4  0.233893      -1.45289      -2.60065       2.60065       47.7303       50.3310    
   5  0.183338      -1.69642      -3.03658       3.03658       47.6468       50.6834    
   6  0.351708      -1.04495      -1.87045       1.87045       48.0046       49.8750    
   7  0.979617     -0.205938E-01 -0.368626E-01  0.368626E-01   48.2724       48.3093    
   8  0.801294     -0.221527     -0.396531      0.396531       48.2799       48.6765    
   9  0.423893     -0.858275      -1.53630       1.53630       47.8405       49.3768    
  10  0.486446     -0.720630      -1.28992       1.28992       47.8653       49.1553    
  11  0.430531     -0.842736      -1.50849       1.50849       48.1205       49.6290    
  12  0.214629      -1.53884      -2.75451       2.75451       47.7162       50.4707    
  13  0.860310     -0.150463     -0.269327      0.269327       47.9426       48.2119    
  14  0.450659     -0.797045      -1.42670       1.42670       48.2681       49.6948    
  15  0.867432     -0.142218     -0.254568      0.254568       48.4284       48.6830    
  16  0.850327     -0.162134     -0.290218      0.290218       48.3547       48.6449    
  17  0.914193     -0.897130E-01 -0.160585      0.160585       48.5836       48.7442    
  18  0.908448     -0.960172E-01 -0.171870      0.171870       48.3828       48.5546    
  19  0.349788E-01  -3.35301      -6.00185       6.00185       48.2631       54.2649    
  20  0.825048     -0.192314     -0.344240      0.344240       48.3105       48.6548    
  21  0.628933     -0.463730     -0.830071      0.830071       47.3977       48.2278    
  22  0.756366     -0.279229     -0.499817      0.499817       48.1302       48.6300    
  23  0.545707     -0.605674      -1.08415       1.08415       47.2545       48.3387    
  24  0.653619     -0.425231     -0.761159      0.761159       48.7951       49.5563    
  25  0.781643     -0.246357     -0.440975      0.440975       47.6585       48.0995    
  26  0.444411     -0.811005      -1.45169       1.45169       47.7233       49.1749    
  27  0.223111      -1.50008      -2.68513       2.68513       49.2175       51.9027    
  28  0.143901      -1.93863      -3.47013       3.47013       48.5919       52.0620    
  29  0.419282E-01  -3.17180      -5.67748       5.67748       47.9746       53.6521    
  30  0.407367     -0.898040      -1.60748       1.60748       47.7893       49.3967    
  31  0.722138     -0.325538     -0.582710      0.582710       48.0552       48.6379    
  32  0.290143      -1.23738      -2.21489       2.21489       48.7895       51.0044    
  33  0.236931E-01  -3.74257      -6.69915       6.69915       48.2589       54.9580    
  34  0.198981      -1.61454      -2.89002       2.89002       48.9001       51.7902    
  35  0.765966     -0.266617     -0.477241      0.477241       47.6108       48.0880    
  36  0.522733     -0.648684      -1.16114       1.16114       49.2075       50.3687    
  37  0.297579E-01  -3.51466      -6.29120       6.29120       49.5451       55.8363    
  38  0.175475      -1.74026      -3.11504       3.11504       48.4120       51.5270    
  39  0.311931      -1.16497      -2.08529       2.08529       48.8766       50.9619    
  40  0.310920      -1.16822      -2.09110       2.09110       49.5314       51.6225    
  41  0.122272      -2.10150      -3.76167       3.76167       47.7100       51.4717    
  42  0.949359     -0.519686E-01 -0.930231E-01  0.930231E-01   49.4574       49.5504    
  43  0.500750     -0.691648      -1.23804       1.23804       47.8510       49.0891    
  44  0.729401E-01  -2.61812      -4.68640       4.68640       48.6182       53.3046    
  45  0.952528     -0.486360E-01 -0.870578E-01  0.870578E-01   48.5005       48.5875    
  46  0.718842     -0.330114     -0.590900      0.590900       48.4295       49.0204    
  47  0.529396     -0.636019      -1.13847       1.13847       49.0487       50.1872    
  48  0.314661      -1.15626      -2.06969       2.06969       50.0105       52.0802    
  49  0.947465     -0.539649E-01 -0.965965E-01  0.965965E-01   47.2142       47.3108    
  50  0.613869     -0.487974     -0.873468      0.873468       48.8082       49.6816    
  51  0.303056      -1.19384      -2.13696       2.13696       48.3863       50.5232    
  52  0.749186     -0.288769     -0.516892      0.516892       47.5631       48.0800    
  53  0.671119E-01  -2.70139      -4.83546       4.83546       48.6655       53.5009    
  54  0.545553E-02  -5.21113      -9.32785       9.32785       49.0191       58.3470    
  55  0.866985     -0.142734     -0.255491      0.255491       50.9974       51.2529    
  56  0.622088     -0.474673     -0.849660      0.849660       48.3329       49.1825    
  57  0.471050     -0.752790      -1.34749       1.34749       52.7507       54.0982    
  58  0.433456     -0.835964      -1.49637       1.49637       49.9618       51.4582    
  59  0.946573     -0.549070E-01 -0.982828E-01  0.982828E-01   49.1221       49.2204    
  60  0.795665     -0.228577     -0.409150      0.409150       52.2522       52.6614    
  61  0.536872E-01  -2.92458      -5.23496       5.23496       48.3430       53.5780    
  62  0.761403     -0.272592     -0.487937      0.487937       47.6508       48.1388    
  63  0.615271     -0.485692     -0.869383      0.869383       47.7850       48.6543    
  64  0.585500     -0.535288     -0.958160      0.958160       48.0842       49.0424    
  65  0.649114     -0.432147     -0.773538      0.773538       53.1660       53.9395    
  66  0.550765     -0.596448      -1.06763       1.06763       52.7556       53.8233    
  67  0.495492     -0.702204      -1.25694       1.25694       49.0408       50.2977    
  68  0.303565      -1.19216      -2.13395       2.13395       50.8673       53.0012    
  69  0.645152     -0.438270     -0.784497      0.784497       47.8839       48.6684    
  70  0.582875     -0.539782     -0.966203      0.966203       47.5679       48.5341    
loop,thermsimp(1:2)       20   2.08571       1.81693    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283         47.65          0.84          1.12         23.83          0.62          0.04         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    284         51.35          0.84          1.12         23.82          0.47          0.04         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       20
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       21
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      283     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -2.11268       2.11268       47.2142       49.3269    
   2  0.575213     -0.553015     -0.989889      0.989889       47.4622       48.4521    
   3  0.632244     -0.458480     -0.820674      0.820674       47.5631       48.3838    
   4  0.819203     -0.199424     -0.356966      0.356966       47.6108       47.9677    
   5  0.137693E-02  -6.58790      -11.7923       11.7923       47.6585       59.4507    
   6  0.367814      -1.00018      -1.79031       1.79031       47.6508       49.4412    
   7  0.452636     -0.792666      -1.41886       1.41886       47.9426       49.3614    
   8  0.278102      -1.27977      -2.29077       2.29077       47.3977       49.6885    
   9  0.417803     -0.872745      -1.56220       1.56220       48.2724       49.8346    
  10  0.682140     -0.382521     -0.684708      0.684708       47.2545       47.9392    
  11  0.204733      -1.58605      -2.83900       2.83900       47.5679       50.4069    
  12  0.637442     -0.450292     -0.806018      0.806018       48.3828       49.1888    
  13  0.114518      -2.16702      -3.87894       3.87894       48.5005       52.3794    
  14  0.724207     -0.322678     -0.577590      0.577590       48.1302       48.7078    
  15  0.461399     -0.773492      -1.38454       1.38454       48.0552       49.4398    
  16  0.731739     -0.312332     -0.559070      0.559070       48.3547       48.9138    
  17  0.773272     -0.257124     -0.460250      0.460250       47.7850       48.2452    
  18  0.789195     -0.236742     -0.423765      0.423765       48.3105       48.7343    
  19  0.762001     -0.271807     -0.486531      0.486531       47.8839       48.3705    
  20  0.933384     -0.689386E-01 -0.123399      0.123399       48.2799       48.4033    
  21  0.694037     -0.365230     -0.653757      0.653757       48.4284       49.0822    
  22  0.423570     -0.859038      -1.53767       1.53767       48.5836       50.1212    
  23  0.272919      -1.29858      -2.32444       2.32444       47.1953       49.5197    
  24  0.535843     -0.623914      -1.11680       1.11680       48.4295       49.5463    
  25  0.902288     -0.102822     -0.184049      0.184049       48.0842       48.2683    
  26  0.479374     -0.735275      -1.31613       1.31613       47.8510       49.1672    
  27  0.494900E-01  -3.00599      -5.38068       5.38068       47.8653       53.2460    
  28  0.921867     -0.813539E-01 -0.145622      0.145622       47.7233       47.8689    
  29  0.132425      -2.02174      -3.61888       3.61888       48.3329       51.9518    
  30  0.640539     -0.445446     -0.797342      0.797342       47.1344       47.9318    
  31  0.215363      -1.53543      -2.74840       2.74840       49.1221       51.8705    
  32  0.437204E-01  -3.12994      -5.60255       5.60255       47.8405       53.4431    
  33  0.166028      -1.79560      -3.21410       3.21410       47.7893       51.0034    
  34  0.425825     -0.853727      -1.52816       1.52816       49.4574       50.9856    
  35  0.810393     -0.210235     -0.376319      0.376319       48.7951       49.1715    
  36  0.855958     -0.155534     -0.278405      0.278405       48.1205       48.3989    
  37  0.830452     -0.185786     -0.332554      0.332554       48.8082       49.1407    
  38  0.658784     -0.417359     -0.747068      0.747068       48.2681       49.0152    
  39  0.910965     -0.932509E-01 -0.166918      0.166918       48.0046       48.1715    
  40  0.603480     -0.505043     -0.904020      0.904020       49.0487       49.9527    
  41  0.702610     -0.352953     -0.631782      0.631782       49.0408       49.6726    
  42  0.329065      -1.11150      -1.98957       1.98957       47.7303       49.7199    
  43  0.790497     -0.235094     -0.420815      0.420815       49.2075       49.6283    
  44  0.641572     -0.443834     -0.794457      0.794457       47.7162       48.5107    
  45  0.650683     -0.429733     -0.769217      0.769217       48.3863       49.1555    
  46  0.194049E-02  -6.24481      -11.1781       11.1781       47.6468       58.8249    
  47  0.662053     -0.412409     -0.738208      0.738208       48.8766       49.6148    
  48  0.294846      -1.22130      -2.18611       2.18611       48.7895       50.9756    
  49  0.709874     -0.342668     -0.613372      0.613372       50.9974       51.6108    
  50  0.700314     -0.356226     -0.637640      0.637640       49.9618       50.5995    
  51  0.639811E-01  -2.74917      -4.92098       4.92098       47.7100       52.6310    
  52  0.251451      -1.38051      -2.47109       2.47109       48.4120       50.8831    
  53  0.828691     -0.187907     -0.336352      0.336352       49.5314       49.8677    
  54  0.962710     -0.380034E-01 -0.680257E-01  0.680257E-01   48.9001       48.9682    
  55  0.429583     -0.844940      -1.51243       1.51243       49.2175       50.7300    
  56  0.871108     -0.137990     -0.247000      0.247000       48.5919       48.8389    
  57  0.328516      -1.11317      -1.99256       1.99256       50.0105       52.0030    
  58  0.401423     -0.912741      -1.63379       1.63379       52.2522       53.8860    
  59  0.671285     -0.398562     -0.713421      0.713421       50.8673       51.5807    
  60  0.919587     -0.838302E-01 -0.150055      0.150055       48.6182       48.7683    
  61  0.209634      -1.56239      -2.79667       2.79667       48.6655       51.4621    
  62  0.894137     -0.111896     -0.200292      0.200292       48.3430       48.5433    
  63  0.623590     -0.472262     -0.845344      0.845344       47.9746       48.8200    
  64  0.469722     -0.755615      -1.35254       1.35254       52.7556       54.1082    
  65  0.927315E-01  -2.37805      -4.25667       4.25667       53.1660       57.4227    
  66  0.663316     -0.410504     -0.734798      0.734798       52.7507       53.4855    
  67  0.972420     -0.279677E-01 -0.500619E-01  0.500619E-01   48.2631       48.3132    
  68  0.594470     -0.520086     -0.930947      0.930947       48.2589       49.1898    
  69  0.421560     -0.863793      -1.54618       1.54618       49.5451       51.0913    
  70  0.878821     -0.129174     -0.231220      0.231220       47.6550       47.8862    
loop,thermsimp(1:2)       21   2.11268      0.989889    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285         48.74          0.83          1.12         23.80          0.50          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.74
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       21
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       22
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      284     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666     -0.314440      0.314440       47.7233       48.0377    
   2  0.801853     -0.220830     -0.395283      0.395283       47.6550       48.0503    
   3  0.768645     -0.263126     -0.470991      0.470991       47.1344       47.6054    
   4  0.855557     -0.156003     -0.279243      0.279243       47.2545       47.5338    
   5  0.845591     -0.167720     -0.300216      0.300216       47.6108       47.9110    
   6  0.350050      -1.04968      -1.87891       1.87891       48.0046       49.8835    
   7  0.927608     -0.751463E-01 -0.134511      0.134511       47.7850       47.9195    
   8  0.655345E-01  -2.72518      -4.87803       4.87803       48.0842       52.9623    
   9  0.355481      -1.03428      -1.85136       1.85136       48.2631       50.1145    
  10  0.728523     -0.316737     -0.566955      0.566955       47.8839       48.4509    
  11  0.573220     -0.556486     -0.996103      0.996103       47.5631       48.5592    
  12  0.112478      -2.18499      -3.91111       3.91111       48.1205       52.0316    
  13  0.338739      -1.08253      -1.93771       1.93771       48.2799       50.2176    
  14  0.239648      -1.42858      -2.55715       2.55715       47.4622       50.0194    
  15  0.918959     -0.845134E-01 -0.151278      0.151278       47.7162       47.8675    
  16  0.283771      -1.25959      -2.25465       2.25465       48.3430       50.5976    
  17  0.414404     -0.880913      -1.57682       1.57682       48.1302       49.7070    
  18  0.716403     -0.333512     -0.596983      0.596983       48.3105       48.9075    
  19  0.317726      -1.14657      -2.05234       2.05234       48.6182       50.6706    
  20  0.339005      -1.08174      -1.93630       1.93630       47.9746       49.9109    
  21  0.163059      -1.81364      -3.24640       3.24640       48.5919       51.8383    
  22  0.477081     -0.740069      -1.32471       1.32471       48.3547       49.6794    
  23  0.105851      -2.24573      -4.01982       4.01982       48.9001       52.9200    
  24  0.840431     -0.173840     -0.311171      0.311171       48.2681       48.5793    
  25  0.235315      -1.44683      -2.58981       2.58981       48.4284       51.0183    
  26  0.865464     -0.144489     -0.258634      0.258634       48.8082       49.0668    
  27  0.909462     -0.949026E-01 -0.169874      0.169874       48.3863       48.5561    
  28  0.152105E-01  -4.18577      -7.49247       7.49247       47.8510       55.3435    
  29  0.962485     -0.382371E-01 -0.684440E-01  0.684440E-01   48.7951       48.8636    
  30  0.259410      -1.34934      -2.41531       2.41531       48.3828       50.7981    
  31  0.364880      -1.00819      -1.80464       1.80464       48.2589       50.0635    
  32  0.467235     -0.760923      -1.36204       1.36204       47.2142       48.5762    
  33  0.844908     -0.168527     -0.301662      0.301662       47.9426       48.2442    
  34  0.188232      -1.67008      -2.98943       2.98943       48.0552       51.0447    
  35  0.496585     -0.700000      -1.25299       1.25299       47.6508       48.9038    
  36  0.410505     -0.890367      -1.59375       1.59375       47.1953       48.7890    
  37  0.533875     -0.627594      -1.12339       1.12339       48.4295       49.5529    
  38  0.610668     -0.493202     -0.882825      0.882825       48.8766       49.7595    
  39  0.241933      -1.41910      -2.54016       2.54016       49.2075       51.7477    
  40  0.642629     -0.442188     -0.791510      0.791510       49.0408       49.8323    
  41  0.775072     -0.254799     -0.456087      0.456087       47.3977       47.8538    
  42  0.345343      -1.06322      -1.90314       1.90314       47.7303       49.6335    
  43  0.844097     -0.169488     -0.303381      0.303381       48.2724       48.5758    
  44  0.426886     -0.851239      -1.52371       1.52371       49.5314       51.0551    
  45  0.594109     -0.520693     -0.932034      0.932034       49.0487       49.9808    
  46  0.489527     -0.714316      -1.27862       1.27862       48.5836       49.8622    
  47  0.313882      -1.15874      -2.07413       2.07413       47.5679       49.6421    
  48  0.687066     -0.375325     -0.671828      0.671828       49.9618       50.6337    
  49  0.394505     -0.930124      -1.66491       1.66491       49.2175       50.8824    
  50  0.971200     -0.292233E-01 -0.523093E-01  0.523093E-01   48.4120       48.4643    
  51  0.916939     -0.867145E-01 -0.155218      0.155218       48.7895       48.9447    
  52  0.968457     -0.320511E-01 -0.573712E-01  0.573712E-01   49.4574       49.5148    
  53  0.437414     -0.826876      -1.48010       1.48010       47.7893       49.2694    
  54  0.647516     -0.434611     -0.777949      0.777949       49.5451       50.3231    
  55  0.181293      -1.70764      -3.05665       3.05665       48.6655       51.7221    
  56  0.836714     -0.178273     -0.319106      0.319106       50.8673       51.1864    
  57  0.940459     -0.613876E-01 -0.109883      0.109883       50.9974       51.1073    
  58  0.141896      -1.95266      -3.49524       3.49524       49.1221       52.6173    
  59  0.111323      -2.19532      -3.92959       3.92959       48.3329       52.2625    
  60  0.721494E-01  -2.62902      -4.70591       4.70591       50.0105       54.7164    
  61  0.618358     -0.480687     -0.860424      0.860424       48.5005       49.3609    
  62  0.825766     -0.191444     -0.342682      0.342682       47.7100       48.0527    
  63  0.438611     -0.824143      -1.47521       1.47521       47.8653       49.3405    
  64  0.158533      -1.84179      -3.29678       3.29678       47.8405       51.1373    
  65  0.750786     -0.286635     -0.513073      0.513073       52.7507       53.2638    
  66  0.936921     -0.651566E-01 -0.116630      0.116630       52.2522       52.3689    
  67  0.652715     -0.426615     -0.763636      0.763636       52.7556       53.5193    
  68  0.471604     -0.751616      -1.34538       1.34538       53.1660       54.5114    
  69  0.883538     -0.123821     -0.221637      0.221637       47.6468       47.8684    
  70  0.267870      -1.31725      -2.35787       2.35787       48.7413       51.0992    
loop,thermsimp(1:2)       22  0.314440      0.395283    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286         48.29          0.85          1.11         23.80          0.49          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.29
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       22
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       23
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      285     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456     -0.294374      0.294374       47.2545       47.5489    
   2  0.848474     -0.164316     -0.294124      0.294124       47.1344       47.4286    
   3  0.146795      -1.91872      -3.43448       3.43448       47.3977       50.8322    
   4  0.398624     -0.919738      -1.64632       1.64632       47.7162       49.3625    
   5  0.888093     -0.118679     -0.212433      0.212433       47.6468       47.8592    
   6  0.475009     -0.744421      -1.33250       1.33250       47.6108       48.9433    
   7  0.120824      -2.11342      -3.78300       3.78300       47.7850       51.5680    
   8  0.270052      -1.30914      -2.34335       2.34335       47.7233       50.0666    
   9  0.201748E-01  -3.90332      -6.98690       6.98690       47.6550       54.6419    
  10  0.999386     -0.614559E-03 -0.110005E-02  0.110005E-02   47.7100       47.7111    
  11  0.212655      -1.54808      -2.77105       2.77105       47.9426       50.7136    
  12  0.197911      -1.61994      -2.89967       2.89967       47.8839       50.7836    
  13  0.786394     -0.240297     -0.430130      0.430130       48.4120       48.8421    
  14  0.781263     -0.246844     -0.441847      0.441847       48.3863       48.8281    
  15  0.788011     -0.238244     -0.426453      0.426453       47.5631       47.9895    
  16  0.956387     -0.445927E-01 -0.798203E-01  0.798203E-01   48.2724       48.3522    
  17  0.717415     -0.332100     -0.594455      0.594455       47.2142       47.8086    
  18  0.808756     -0.212258     -0.379939      0.379939       48.2681       48.6481    
  19  0.756838     -0.278606     -0.498702      0.498702       47.1953       47.6940    
  20  0.570684     -0.560919      -1.00404       1.00404       48.7951       49.7992    
  21  0.946031     -0.554796E-01 -0.993079E-01  0.993079E-01   47.6508       47.7502    
  22  0.678634E-01  -2.69026      -4.81553       4.81553       48.3105       53.1261    
  23  0.631502     -0.459654     -0.822774      0.822774       48.7895       49.6123    
  24  0.114784E-01  -4.46729      -7.99639       7.99639       48.8082       56.8046    
  25  0.549681     -0.598417      -1.07116       1.07116       47.7893       48.8604    
  26  0.846433     -0.166725     -0.298435      0.298435       47.8653       48.1638    
  27  0.441841     -0.816805      -1.46207       1.46207       48.5005       49.9625    
  28  0.299100      -1.20698      -2.16047       2.16047       49.4574       51.6179    
  29  0.378130     -0.972517      -1.74079       1.74079       48.4295       50.1703    
  30  0.830469     -0.185764     -0.332516      0.332516       47.7303       48.0629    
  31  0.675108     -0.392883     -0.703256      0.703256       47.5679       48.2712    
  32  0.997619     -0.238377E-02 -0.426691E-02  0.426691E-02   48.3547       48.3590    
  33  0.897623     -0.108005     -0.193327      0.193327       48.1302       48.3235    
  34  0.591811E-01  -2.82715      -5.06057       5.06057       48.8766       53.9372    
  35  0.229825      -1.47044      -2.63206       2.63206       49.0408       51.6728    
  36  0.654017     -0.424622     -0.760069      0.760069       48.5836       49.3436    
  37  0.305777      -1.18490      -2.12096       2.12096       48.0046       50.1256    
  38  0.936135     -0.659954E-01 -0.118131      0.118131       47.9746       48.0928    
  39  0.698153     -0.359317     -0.643172      0.643172       49.0487       49.6919    
  40  0.829975     -0.186360     -0.333582      0.333582       47.4622       47.7958    
  41  0.951351     -0.498721E-01 -0.892704E-01  0.892704E-01   48.2589       48.3482    
  42  0.883299     -0.124092     -0.222123      0.222123       48.2631       48.4852    
  43  0.910087     -0.942154E-01 -0.168644      0.168644       48.2799       48.4486    
  44  0.590840     -0.526210     -0.941909      0.941909       49.5451       50.4871    
  45  0.146785      -1.91879      -3.43461       3.43461       48.3430       51.7776    
  46  0.830381E-01  -2.48846      -4.45430       4.45430       49.9618       54.4161    
  47  0.289482      -1.23966      -2.21898       2.21898       48.6182       50.8372    
  48  0.594462     -0.520098     -0.930969      0.930969       48.3828       49.3137    
  49  0.241311      -1.42167      -2.54477       2.54477       49.2175       51.7623    
  50  0.612368     -0.490422     -0.877849      0.877849       48.4284       49.3063    
  51  0.952207     -0.489727E-01 -0.876605E-01  0.876605E-01   48.0552       48.1429    
  52  0.857144     -0.154149     -0.275925      0.275925       49.5314       49.8073    
  53  0.221746      -1.50622      -2.69612       2.69612       48.7413       51.4375    
  54  0.874757     -0.133809     -0.239517      0.239517       50.9974       51.2369    
  55  0.474241     -0.746040      -1.33540       1.33540       47.8405       49.1759    
  56  0.679995E-01  -2.68826      -4.81194       4.81194       50.8673       55.6792    
  57  0.276977      -1.28382      -2.29802       2.29802       48.6655       50.9635    
  58  0.308562      -1.17583      -2.10473       2.10473       49.2075       51.3122    
  59  0.910099     -0.942023E-01 -0.168621      0.168621       48.5919       48.7605    
  60  0.189281      -1.66452      -2.97948       2.97948       48.1205       51.1000    
  61  0.759386     -0.275245     -0.492686      0.492686       48.3329       48.8256    
  62  0.464823     -0.766099      -1.37131       1.37131       52.2522       53.6235    
  63  0.428490     -0.847488      -1.51699       1.51699       49.1221       50.6391    
  64  0.377334     -0.974624      -1.74457       1.74457       48.9001       50.6447    
  65  0.168846      -1.77877      -3.18398       3.18398       48.0842       51.2682    
  66  0.816398     -0.202853     -0.363104      0.363104       52.7507       53.1138    
  67  0.663000     -0.410981     -0.735651      0.735651       52.7556       53.4913    
  68  0.805080     -0.216814     -0.388094      0.388094       53.1660       53.5541    
  69  0.767976E-01  -2.56658      -4.59415       4.59415       50.0105       54.6046    
  70  0.646958     -0.435474     -0.779493      0.779493       48.2909       49.0704    
loop,thermsimp(1:2)       23  0.294374      0.294124    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287         52.19          0.82          1.11         23.79          0.56          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       23
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       24
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      286     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -4.08570       4.08570       47.1344       51.2201    
   2  0.372115     -0.988552      -1.76950       1.76950       47.2545       49.0240    
   3  0.732875     -0.310780     -0.556293      0.556293       47.1953       47.7516    
   4  0.341646      -1.07398      -1.92241       1.92241       47.7100       49.6324    
   5  0.406512     -0.900141      -1.61124       1.61124       47.6508       49.2621    
   6  0.271848      -1.30251      -2.33148       2.33148       47.4622       49.7937    
   7  0.738418     -0.303245     -0.542804      0.542804       47.2142       47.7570    
   8  0.903199     -0.101813     -0.182244      0.182244       47.6468       47.8291    
   9  0.511789     -0.669842      -1.19901       1.19901       47.5631       48.7621    
  10  0.202674      -1.59616      -2.85710       2.85710       47.7303       50.5874    
  11  0.325695      -1.12179      -2.00800       2.00800       47.9746       49.9826    
  12  0.719720     -0.328893     -0.588714      0.588714       48.0552       48.6439    
  13  0.715609     -0.334622     -0.598969      0.598969       47.8653       48.4643    
  14  0.973328     -0.270339E-01 -0.483904E-01  0.483904E-01   47.5679       47.6163    
  15  0.373998     -0.983504      -1.76046       1.76046       48.1302       49.8906    
  16  0.977965     -0.222815E-01 -0.398836E-01  0.398836E-01   48.2589       48.2988    
  17  0.105495      -2.24909      -4.02585       4.02585       48.2724       52.2983    
  18  0.729809     -0.314973     -0.563798      0.563798       48.3547       48.9185    
  19  0.378008     -0.972839      -1.74137       1.74137       48.2799       50.0213    
  20  0.678326     -0.388127     -0.694742      0.694742       48.2631       48.9578    
  21  0.671993     -0.397507     -0.711533      0.711533       48.2681       48.9797    
  22  0.515926     -0.661792      -1.18460       1.18460       48.5919       49.7765    
  23  0.363490      -1.01200      -1.81147       1.81147       48.3329       50.1444    
  24  0.206319      -1.57833      -2.82519       2.82519       48.3863       51.2115    
  25  0.755157E-01  -2.58341      -4.62428       4.62428       48.4120       53.0362    
  26  0.413763     -0.882461      -1.57959       1.57959       47.7893       49.3689    
  27  0.279023      -1.27646      -2.28485       2.28485       47.6108       49.8956    
  28  0.506422     -0.680385      -1.21788       1.21788       48.2909       49.5087    
  29  0.643082E-02  -5.04665      -9.03345       9.03345       47.8405       56.8740    
  30  0.285888E-01  -3.55474      -6.36294       6.36294       48.4284       54.7914    
  31  0.660419     -0.414880     -0.742630      0.742630       48.3828       49.1254    
  32  0.739369     -0.301959     -0.540502      0.540502       48.5836       49.1241    
  33  0.270269      -1.30834      -2.34191       2.34191       47.7162       50.0581    
  34  0.663889     -0.409640     -0.733251      0.733251       48.7895       49.5228    
  35  0.898739E-01  -2.40935      -4.31270       4.31270       49.0487       53.3614    
  36  0.832427     -0.183410     -0.328302      0.328302       48.7951       49.1234    
  37  0.723106     -0.324200     -0.580314      0.580314       49.5314       50.1117    
  38  0.986274     -0.138207E-01 -0.247389E-01  0.247389E-01   48.5005       48.5252    
  39  0.812861     -0.207195     -0.370877      0.370877       47.7233       48.0941    
  40  0.553236     -0.591971      -1.05962       1.05962       48.0046       49.0642    
  41  0.693785E-01  -2.66818      -4.77601       4.77601       48.4295       53.2055    
  42  0.117256      -2.14340      -3.83666       3.83666       49.5451       53.3818    
  43  0.807809     -0.213430     -0.382036      0.382036       49.1221       49.5041    
  44  0.900249     -0.105084     -0.188099      0.188099       48.9001       49.0882    
  45  0.753470     -0.283066     -0.506684      0.506684       47.9426       48.4493    
  46  0.127159      -2.06232      -3.69152       3.69152       47.8839       51.5755    
  47  0.535389     -0.624762      -1.11832       1.11832       47.3977       48.5160    
  48  0.957281     -0.436582E-01 -0.781476E-01  0.781476E-01   48.6182       48.6964    
  49  0.227700      -1.47973      -2.64869       2.64869       48.6655       51.3142    
  50  0.636404     -0.451921     -0.808933      0.808933       48.1205       48.9295    
  51  0.905015     -0.998042E-01 -0.178648      0.178648       50.9974       51.1761    
  52  0.555191     -0.588444      -1.05331       1.05331       48.0842       49.1375    
  53  0.687780     -0.374286     -0.669968      0.669968       49.2075       49.8775    
  54  0.759422E-01  -2.57778      -4.61420       4.61420       48.7413       53.3555    
  55  0.374598     -0.981902      -1.75759       1.75759       47.7850       49.5425    
  56  0.399521     -0.917488      -1.64229       1.64229       49.4574       51.0997    
  57  0.997363     -0.264016E-02 -0.472585E-02  0.472585E-02   49.0408       49.0455    
  58  0.164658      -1.80389      -3.22893       3.22893       49.2175       52.4465    
  59  0.697359     -0.360454     -0.645209      0.645209       48.3430       48.9882    
  60  0.822795     -0.195048     -0.349133      0.349133       52.7507       53.0999    
  61  0.755086     -0.280923     -0.502849      0.502849       48.3105       48.8134    
  62  0.912857     -0.911765E-01 -0.163205      0.163205       52.7556       52.9188    
  63  0.891590     -0.114749     -0.205400      0.205400       53.1660       53.3714    
  64  0.461859     -0.772496      -1.38276       1.38276       52.2522       53.6350    
  65  0.695630     -0.362938     -0.649655      0.649655       48.8766       49.5263    
  66  0.168128      -1.78303      -3.19160       3.19160       49.9618       53.1534    
  67  0.552556     -0.593201      -1.06182       1.06182       50.0105       51.0723    
  68  0.450301E-01  -3.10043      -5.54972       5.54972       47.6550       53.2047    
  69  0.675538     -0.392246     -0.702115      0.702115       50.8673       51.5694    
  70  0.455839     -0.785615      -1.40624       1.40624       52.1905       53.5968    
loop,thermsimp(1:2)       24   4.08570       1.76950    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288         47.85          0.84          1.11         23.77          0.55          0.04         26.32
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    289         50.93          0.83          1.11         23.82          0.78          0.04         26.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.85
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       24
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       25
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      288     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.678914E-01  0.678914E-01   47.5679       47.6358    
   2  0.355374      -1.03458      -1.85189       1.85189       47.1953       49.0472    
   3  0.294461      -1.22261      -2.18845       2.18845       47.2142       49.4026    
   4  0.644538     -0.439222     -0.786201      0.786201       47.6468       48.4330    
   5  0.741622     -0.298915     -0.535055      0.535055       47.7233       48.2583    
   6  0.805913E-01  -2.51837      -4.50784       4.50784       48.2589       52.7667    
   7  0.498180     -0.696794      -1.24725       1.24725       47.9426       49.1898    
   8  0.771004     -0.260061     -0.465506      0.465506       47.8653       48.3308    
   9  0.753480     -0.283053     -0.506661      0.506661       47.3977       47.9044    
  10  0.460525     -0.775387      -1.38793       1.38793       48.5005       49.8884    
  11  0.918626     -0.848759E-01 -0.151927      0.151927       48.0552       48.2072    
  12  0.355379      -1.03457      -1.85187       1.85187       48.6182       50.4701    
  13  0.664646     -0.408501     -0.731212      0.731212       47.5631       48.2943    
  14  0.328018      -1.11469      -1.99528       1.99528       48.3105       50.3058    
  15  0.529583     -0.635665      -1.13783       1.13783       48.3547       49.4925    
  16  0.259823      -1.34775      -2.41246       2.41246       48.1205       50.5330    
  17  0.463690E-01  -3.07112      -5.49727       5.49727       48.2631       53.7604    
  18  0.366509      -1.00373      -1.79667       1.79667       48.2681       50.0648    
  19  0.794534     -0.229999     -0.411696      0.411696       48.3430       48.7547    
  20  0.669373     -0.401413     -0.718524      0.718524       47.2545       47.9730    
  21  0.798901     -0.224518     -0.401885      0.401885       49.0408       49.4427    
  22  0.610403     -0.493636     -0.883603      0.883603       48.0046       48.8882    
  23  0.267818      -1.31745      -2.35821       2.35821       48.9001       51.2584    
  24  0.663049     -0.410906     -0.735517      0.735517       48.7951       49.5307    
  25  0.782871     -0.244788     -0.438167      0.438167       48.5836       49.0217    
  26  0.706545     -0.347368     -0.621785      0.621785       48.3828       49.0045    
  27  0.120119      -2.11927      -3.79347       3.79347       48.0842       51.8777    
  28  0.270575      -1.30721      -2.33989       2.33989       47.6508       49.9907    
  29  0.505391     -0.682422      -1.22153       1.22153       47.7893       49.0108    
  30  0.665734     -0.406865     -0.728283      0.728283       49.1221       49.8504    
  31  0.836788     -0.178185     -0.318949      0.318949       48.2909       48.6098    
  32  0.866983     -0.142736     -0.255496      0.255496       48.7895       49.0450    
  33  0.552904     -0.592571      -1.06069       1.06069       48.8766       49.9373    
  34  0.554153     -0.590314      -1.05666       1.05666       47.7850       48.8416    
  35  0.592407E-01  -2.82615      -5.05877       5.05877       47.7100       52.7688    
  36  0.902163     -0.102960     -0.184297      0.184297       48.5919       48.7762    
  37  0.266638E-01  -3.62445      -6.48772       6.48772       47.4622       53.9500    
  38  0.897053     -0.108640     -0.194464      0.194464       49.2075       49.4020    
  39  0.840496     -0.173763     -0.311033      0.311033       48.1302       48.4412    
  40  0.288358      -1.24355      -2.22594       2.22594       47.6108       49.8367    
  41  0.835972E-01  -2.48175      -4.44229       4.44229       47.9746       52.4169    
  42  0.412070     -0.886563      -1.58694       1.58694       48.2799       49.8669    
  43  0.725010     -0.321570     -0.575606      0.575606       47.7162       48.2918    
  44  0.316556      -1.15026      -2.05894       2.05894       49.5314       51.5903    
  45  0.486178     -0.721181      -1.29091       1.29091       48.3329       49.6238    
  46  0.143341      -1.94253      -3.47711       3.47711       47.7303       51.2074    
  47  0.956913     -0.440430E-01 -0.788365E-01  0.788365E-01   50.0105       50.0893    
  48  0.362697      -1.01419      -1.81538       1.81538       49.4574       51.2728    
  49  0.951746     -0.494572E-01 -0.885278E-01  0.885278E-01   50.9974       51.0859    
  50  0.511140     -0.671112      -1.20128       1.20128       48.3863       49.5875    
  51  0.364891E-01  -3.31074      -5.92619       5.92619       47.1344       53.0606    
  52  0.377076     -0.975308      -1.74579       1.74579       48.6655       50.4113    
  53  0.670030E-01  -2.70302      -4.83837       4.83837       50.8673       55.7056    
  54  0.448832     -0.801107      -1.43397       1.43397       47.8839       49.3179    
  55  0.252392      -1.37677      -2.46440       2.46440       48.2724       50.7368    
  56  0.910592     -0.936608E-01 -0.167652      0.167652       49.2175       49.3852    
  57  0.801917     -0.220751     -0.395141      0.395141       52.7556       53.1508    
  58  0.473432     -0.747746      -1.33846       1.33846       48.4120       49.7504    
  59  0.431618     -0.840214      -1.50397       1.50397       52.7507       54.2547    
  60  0.886774     -0.120166     -0.215095      0.215095       49.9618       50.1769    
  61  0.880132     -0.127683     -0.228552      0.228552       47.6550       47.8835    
  62  0.962190     -0.385439E-01 -0.689930E-01  0.689930E-01   48.4295       48.4985    
  63  0.618144     -0.481034     -0.861044      0.861044       48.7413       49.6024    
  64  0.169887      -1.77262      -3.17297       3.17297       49.0487       52.2217    
  65  0.384484E-01  -3.25844      -5.83257       5.83257       53.1660       58.9985    
  66  0.178067      -1.72560      -3.08880       3.08880       49.5451       52.6339    
  67  0.255365      -1.36506      -2.44344       2.44344       52.1905       54.6340    
  68  0.476812     -0.740633      -1.32572       1.32572       52.2522       53.5780    
  69  0.642499     -0.442391     -0.791874      0.791874       48.4284       49.2203    
  70  0.178007      -1.72593      -3.08939       3.08939       47.8469       50.9363    
loop,thermsimp(1:2)       25  0.678914E-01   1.85189    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290         47.50          0.83          1.11         23.80          0.63          0.04         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    291         49.11          0.84          1.11         23.78          0.46          0.04         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       25
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       26
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      290     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.224731E-01  0.224731E-01   47.5679       47.5904    
   2  0.516099     -0.661457      -1.18400       1.18400       47.6550       48.8390    
   3  0.202206      -1.59847      -2.86124       2.86124       47.3977       50.2590    
   4  0.240260      -1.42603      -2.55258       2.55258       47.2545       49.8071    
   5  0.717263E-01  -2.63490      -4.71644       4.71644       48.0552       52.7717    
   6  0.395382     -0.927902      -1.66093       1.66093       47.7233       49.3842    
   7  0.494348     -0.704516      -1.26108       1.26108       47.7162       48.9773    
   8  0.970815     -0.296196E-01 -0.530188E-01  0.530188E-01   47.5631       47.6161    
   9  0.992795     -0.723105E-02 -0.129435E-01  0.129435E-01   47.8653       47.8783    
  10  0.387320     -0.948503      -1.69781       1.69781       47.6468       49.3446    
  11  0.586568     -0.533466     -0.954897      0.954897       48.1302       49.0851    
  12  0.119144      -2.12742      -3.80806       3.80806       48.4295       52.2375    
  13  0.145144      -1.93003      -3.45473       3.45473       48.2909       51.7456    
  14  0.767931     -0.264056     -0.472656      0.472656       48.3430       48.8157    
  15  0.415014     -0.879442      -1.57419       1.57419       48.5919       50.1661    
  16  0.994477     -0.553801E-02 -0.991296E-02  0.991296E-02   47.7850       47.7949    
  17  0.757243     -0.278071     -0.497744      0.497744       48.0046       48.5023    
  18  0.669290     -0.401537     -0.718747      0.718747       48.3828       49.1015    
  19  0.112026      -2.18903      -3.91833       3.91833       47.7893       51.7076    
  20  0.434244     -0.834148      -1.49312       1.49312       48.5836       50.0767    
  21  0.491828     -0.709627      -1.27022       1.27022       48.7895       50.0597    
  22  0.517535     -0.658677      -1.17902       1.17902       47.1953       48.3743    
  23  0.411147     -0.888804      -1.59095       1.59095       47.9426       49.5335    
  24  0.250164      -1.38564      -2.48028       2.48028       48.4284       50.9087    
  25  0.109742E-01  -4.51221      -8.07680       8.07680       47.8839       55.9607    
  26  0.559459     -0.580786      -1.03960       1.03960       49.2175       50.2571    
  27  0.289677      -1.23899      -2.21777       2.21777       49.2075       51.4253    
  28  0.835809     -0.179356     -0.321045      0.321045       47.2142       47.5352    
  29  0.236182      -1.44315      -2.58322       2.58322       49.0408       51.6240    
  30  0.700988     -0.355264     -0.635919      0.635919       48.3547       48.9906    
  31  0.886914     -0.120007     -0.214812      0.214812       48.7951       49.0100    
  32  0.182911      -1.69875      -3.04075       3.04075       48.3863       51.4270    
  33  0.693089     -0.366597     -0.656204      0.656204       48.7413       49.3975    
  34  0.108523      -2.22079      -3.97518       3.97518       48.3329       52.3081    
  35  0.141600      -1.95475      -3.49897       3.49897       48.4120       51.9109    
  36  0.168348E-01  -4.08431      -7.31086       7.31086       47.6108       54.9216    
  37  0.419419E-01  -3.17147      -5.67689       5.67689       49.1221       54.7990    
  38  0.244896      -1.40692      -2.51838       2.51838       48.2799       50.7983    
  39  0.360662      -1.01981      -1.82546       1.82546       48.5005       50.3259    
  40  0.927013     -0.757879E-01 -0.135659      0.135659       48.8766       49.0123    
  41  0.869067     -0.140335     -0.251198      0.251198       47.6508       47.9020    
  42  0.827083     -0.189851     -0.339830      0.339830       48.2681       48.6080    
  43  0.928403     -0.742893E-01 -0.132977      0.132977       50.0105       50.1435    
  44  0.513193     -0.667103      -1.19411       1.19411       49.9618       51.1559    
  45  0.809080     -0.211858     -0.379223      0.379223       48.3105       48.6898    
  46  0.341224E-02  -5.68039      -10.1678       10.1678       48.6655       58.8333    
  47  0.734431     -0.308659     -0.552496      0.552496       48.6182       49.1707    
  48  0.688454     -0.373307     -0.668215      0.668215       48.1205       48.7887    
  49  0.990614     -0.943067E-02 -0.168808E-01  0.168808E-01   48.2724       48.2893    
  50  0.143408      -1.94206      -3.47626       3.47626       47.8469       51.3232    
  51  0.868596     -0.140878     -0.252169      0.252169       50.9974       51.2496    
  52  0.244103      -1.41016      -2.52418       2.52418       47.7303       50.2545    
  53  0.207986      -1.57029      -2.81079       2.81079       48.9001       51.7109    
  54  0.426578E-01  -3.15455      -5.64660       5.64660       49.4574       55.1040    
  55  0.111938      -2.18981      -3.91974       3.91974       49.5314       53.4511    
  56  0.304345      -1.18959      -2.12936       2.12936       48.0842       50.2136    
  57  0.911041     -0.931671E-01 -0.166768      0.166768       49.0487       49.2155    
  58  0.144299      -1.93587      -3.46518       3.46518       47.9746       51.4398    
  59  0.306010      -1.18414      -2.11959       2.11959       49.5451       51.6647    
  60  0.633032     -0.457234     -0.818444      0.818444       48.2589       49.0773    
  61  0.737469E-02  -4.90970      -8.78830       8.78830       47.7100       56.4983    
  62  0.794623     -0.229887     -0.411495      0.411495       47.1344       47.5459    
  63  0.200033      -1.60927      -2.88058       2.88058       52.7556       55.6362    
  64  0.543825     -0.609128      -1.09033       1.09033       52.2522       53.3426    
  65  0.719260     -0.329532     -0.589858      0.589858       48.2631       48.8530    
  66  0.200311      -1.60788      -2.87809       2.87809       47.4622       50.3403    
  67  0.778326     -0.250609     -0.448588      0.448588       52.7507       53.1993    
  68  0.932167     -0.702437E-01 -0.125735      0.125735       52.1905       52.3163    
  69  0.188590      -1.66818      -2.98602       2.98602       50.8673       53.8533    
  70  0.722923     -0.324453     -0.580766      0.580766       47.4953       48.0760    
loop,thermsimp(1:2)       26  0.224731E-01   1.18400    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292         48.24          0.80          1.11         23.77          0.61          0.04         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    293         51.98          0.84          1.12         23.75          0.62          0.04         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.24
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       26
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       27
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      292     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140      -2.88438       2.88438       47.2142       50.0986    
   2  0.983274     -0.168677E-01 -0.301929E-01  0.301929E-01   47.1344       47.1646    
   3  0.569108     -0.563685      -1.00899       1.00899       47.5679       48.5769    
   4  0.411179     -0.888728      -1.59081       1.59081       47.5631       49.1539    
   5  0.889241     -0.117387     -0.210120      0.210120       47.7850       47.9951    
   6  0.109537      -2.21149      -3.95855       3.95855       47.8653       51.8239    
   7  0.658027     -0.418509     -0.749127      0.749127       47.6508       48.4000    
   8  0.427534     -0.849722      -1.52099       1.52099       47.4953       49.0163    
   9  0.277803      -1.28084      -2.29269       2.29269       48.2724       50.5651    
  10  0.568421     -0.564892      -1.01115       1.01115       47.1953       48.2064    
  11  0.368489     -0.998346      -1.78703       1.78703       48.0046       49.7916    
  12  0.100945E-01  -4.59576      -8.22636       8.22636       48.2681       56.4945    
  13  0.811445     -0.208939     -0.373998      0.373998       48.3105       48.6845    
  14  0.135138      -2.00146      -3.58258       3.58258       48.1205       51.7031    
  15  0.600340     -0.510258     -0.913356      0.913356       48.3430       49.2564    
  16  0.537538     -0.620755      -1.11114       1.11114       47.6550       48.7661    
  17  0.923261     -0.798434E-01 -0.142919      0.142919       48.2631       48.4060    
  18  0.296505      -1.21569      -2.17607       2.17607       47.7162       49.8923    
  19  0.975666     -0.246348E-01 -0.440960E-01  0.440960E-01   48.3547       48.3988    
  20  0.102971      -2.27331      -4.06920       4.06920       48.7951       52.8643    
  21  0.110137      -2.20603      -3.94877       3.94877       48.8766       52.8254    
  22  0.874539     -0.134058     -0.239962      0.239962       48.2589       48.4988    
  23  0.887507     -0.119339     -0.213616      0.213616       48.1302       48.3438    
  24  0.811767     -0.208543     -0.373288      0.373288       48.3828       48.7560    
  25  0.304283      -1.18980      -2.12972       2.12972       48.6182       50.7480    
  26  0.304144      -1.19025      -2.13054       2.13054       49.0487       51.1793    
  27  0.854538     -0.157194     -0.281375      0.281375       47.6468       47.9282    
  28  0.543001     -0.610645      -1.09305       1.09305       47.7233       48.8163    
  29  0.808766     -0.212246     -0.379918      0.379918       48.7413       49.1213    
  30  0.286176      -1.25115      -2.23954       2.23954       47.9426       50.1821    
  31  0.328161      -1.11425      -1.99449       1.99449       47.2545       49.2490    
  32  0.563264     -0.574006      -1.02746       1.02746       48.7895       49.8170    
  33  0.180895      -1.70984      -3.06059       3.06059       48.5836       51.6442    
  34  0.977796     -0.224538E-01 -0.401919E-01  0.401919E-01   50.0105       50.0507    
  35  0.650784     -0.429577     -0.768938      0.768938       48.5919       49.3608    
  36  0.350586      -1.04815      -1.87617       1.87617       48.0842       49.9604    
  37  0.852996E-01  -2.46159      -4.40621       4.40621       47.7303       52.1365    
  38  0.363921      -1.01082      -1.80935       1.80935       49.2175       51.0269    
  39  0.715496E-01  -2.63737      -4.72085       4.72085       47.3977       52.1186    
  40  0.540542     -0.615184      -1.10117       1.10117       48.5005       49.6016    
  41  0.458744E-02  -5.38443      -9.63807       9.63807       47.4622       57.1003    
  42  0.684509     -0.379054     -0.678501      0.678501       48.2799       48.9584    
  43  0.827193     -0.189717     -0.339591      0.339591       48.4284       48.7680    
  44  0.430712     -0.842315      -1.50773       1.50773       49.9618       51.4696    
  45  0.925073     -0.778822E-01 -0.139408      0.139408       50.9974       51.1368    
  46  0.139567      -1.96921      -3.52487       3.52487       47.8469       51.3718    
  47  0.905138     -0.996680E-01 -0.178404      0.178404       49.2075       49.3859    
  48  0.230323      -1.46827      -2.62819       2.62819       48.3863       51.0145    
  49  0.854981     -0.156676     -0.280448      0.280448       47.9746       48.2551    
  50  0.526676     -0.641170      -1.14769       1.14769       49.0408       50.1885    
  51  0.425904     -0.853542      -1.52783       1.52783       49.5451       51.0730    
  52  0.770395     -0.260852     -0.466922      0.466922       47.7893       48.2562    
  53  0.222399      -1.50328      -2.69086       2.69086       48.9001       51.5910    
  54  0.849203     -0.163457     -0.292587      0.292587       48.2909       48.5835    
  55  0.409521     -0.892766      -1.59804       1.59804       48.4120       50.0100    
  56  0.526161     -0.642147      -1.14944       1.14944       48.4295       49.5789    
  57  0.705716     -0.348543     -0.623888      0.623888       48.3329       48.9568    
  58  0.548845E-03  -7.50769      -13.4387       13.4387       52.1905       65.6292    
  59  0.498314     -0.696524      -1.24677       1.24677       48.0552       49.3020    
  60  0.774749     -0.255216     -0.456834      0.456834       52.7507       53.2076    
  61  0.537402E-01  -2.92359      -5.23320       5.23320       52.2522       57.4854    
  62  0.708174     -0.345066     -0.617663      0.617663       49.5314       50.1490    
  63  0.272932      -1.29853      -2.32436       2.32436       50.8673       53.1916    
  64  0.701294     -0.354828     -0.635137      0.635137       49.1221       49.7572    
  65  0.309054      -1.17424      -2.10187       2.10187       47.6108       49.7127    
  66  0.911982     -0.921347E-01 -0.164920      0.164920       49.4574       49.6223    
  67  0.874613     -0.133974     -0.239812      0.239812       52.7556       52.9954    
  68  0.317616      -1.14691      -2.05296       2.05296       47.8839       49.9369    
  69  0.587945     -0.531123     -0.950703      0.950703       47.7100       48.6607    
  70  0.358507E-02  -5.63098      -10.0794       10.0794       48.2390       58.3184    
loop,thermsimp(1:2)       27   2.88438      0.301929E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294         48.25          0.84          1.12         23.82          0.49          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       27
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       28
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      293     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246      -2.61778       2.61778       47.1344       49.7522    
   2  0.922423     -0.807516E-01 -0.144544      0.144544       47.6468       47.7914    
   3  0.556007     -0.586974      -1.05068       1.05068       47.7850       48.8356    
   4  0.921345     -0.819211E-01 -0.146638      0.146638       47.1953       47.3419    
   5  0.623358     -0.472635     -0.846010      0.846010       47.9746       48.8206    
   6  0.967150     -0.334012E-01 -0.597877E-01  0.597877E-01   47.7893       47.8491    
   7  0.239844      -1.42777      -2.55568       2.55568       48.1302       50.6858    
   8  0.707370     -0.346201     -0.619696      0.619696       48.3547       48.9744    
   9  0.375591     -0.979256      -1.75286       1.75286       47.6508       49.4037    
  10  0.164915      -1.80233      -3.22614       3.22614       48.2631       51.4892    
  11  0.634729     -0.454558     -0.813653      0.813653       48.2589       49.0725    
  12  0.956585     -0.443852E-01 -0.794489E-01  0.794489E-01   47.5679       47.6474    
  13  0.281051      -1.26922      -2.27188       2.27188       48.2909       50.5628    
  14  0.332446      -1.10128      -1.97127       1.97127       47.7100       49.6813    
  15  0.417901     -0.872510      -1.56178       1.56178       48.3105       49.8723    
  16  0.454459     -0.788647      -1.41167       1.41167       48.3828       49.7944    
  17  0.163150      -1.81309      -3.24540       3.24540       47.6550       50.9004    
  18  0.412675     -0.885095      -1.58431       1.58431       48.4284       50.0128    
  19  0.510076     -0.673195      -1.20501       1.20501       47.7233       48.9283    
  20  0.159872E-02  -6.43855      -11.5249       11.5249       48.3329       59.8578    
  21  0.279094      -1.27620      -2.28439       2.28439       48.2799       50.5643    
  22  0.229843E-01  -3.77294      -6.75352       6.75352       47.4953       54.2488    
  23  0.829240E-02  -4.79242      -8.57837       8.57837       48.7413       57.3197    
  24  0.722732     -0.324717     -0.581240      0.581240       47.5631       48.1443    
  25  0.399402     -0.917787      -1.64283       1.64283       47.2545       48.8973    
  26  0.321457      -1.13489      -2.03144       2.03144       48.3430       50.3744    
  27  0.103147      -2.27160      -4.06613       4.06613       48.0552       52.1214    
  28  0.488570     -0.716273      -1.28212       1.28212       48.5919       49.8740    
  29  0.775391     -0.254388     -0.455351      0.455351       49.2075       49.6629    
  30  0.264831      -1.32866      -2.37829       2.37829       48.4295       50.8078    
  31  0.291634      -1.23225      -2.20572       2.20572       48.5005       50.7062    
  32  0.754799E-02  -4.88647      -8.74673       8.74673       49.4574       58.2041    
  33  0.403715     -0.907047      -1.62360       1.62360       47.6108       49.2344    
  34  0.794963     -0.229460     -0.410731      0.410731       49.1221       49.5328    
  35  0.482612E-01  -3.03113      -5.42568       5.42568       48.0046       53.4303    
  36  0.309506      -1.17278      -2.09926       2.09926       48.7895       50.8888    
  37  0.265676      -1.32548      -2.37259       2.37259       47.7162       50.0888    
  38  0.793358     -0.231480     -0.414347      0.414347       47.8839       48.2983    
  39  0.603192E-01  -2.80811      -5.02647       5.02647       48.0842       53.1107    
  40  0.516664     -0.660363      -1.18204       1.18204       48.4120       49.5940    
  41  0.524892E-01  -2.94715      -5.27536       5.27536       50.0105       55.2858    
  42  0.581500     -0.542144     -0.970431      0.970431       47.2142       48.1846    
  43  0.403805     -0.906823      -1.62320       1.62320       49.5314       51.1546    
  44  0.447829     -0.803344      -1.43798       1.43798       47.9426       49.3806    
  45  0.470604     -0.753737      -1.34918       1.34918       49.0408       50.3900    
  46  0.479088     -0.735871      -1.31720       1.31720       48.2724       49.5896    
  47  0.959223     -0.416322E-01 -0.745211E-01  0.745211E-01   48.6182       48.6928    
  48  0.527403     -0.639789      -1.14522       1.14522       48.3863       49.5315    
  49  0.731687     -0.312402     -0.559196      0.559196       49.2175       49.7767    
  50  0.682707     -0.381689     -0.683219      0.683219       49.5451       50.2284    
  51  0.386616     -0.950322      -1.70106       1.70106       50.9974       52.6985    
  52  0.120332      -2.11750      -3.79031       3.79031       49.0487       52.8390    
  53  0.285899      -1.25212      -2.24127       2.24127       47.8469       50.0882    
  54  0.798593     -0.224904     -0.402576      0.402576       49.9618       50.3644    
  55  0.305098      -1.18712      -2.12493       2.12493       48.9001       51.0251    
  56  0.274289      -1.29357      -2.31548       2.31548       48.5836       50.8990    
  57  0.805459     -0.216343     -0.387252      0.387252       48.1205       48.5078    
  58  0.665552     -0.407139     -0.728773      0.728773       47.8653       48.5941    
  59  0.721477     -0.326454     -0.584349      0.584349       47.3977       47.9821    
  60  0.563306     -0.573931      -1.02733       1.02733       47.7303       48.7577    
  61  0.253697      -1.37162      -2.45518       2.45518       48.8766       51.3318    
  62  0.714468     -0.336217     -0.601824      0.601824       48.7951       49.3970    
  63  0.106618      -2.23850      -4.00689       4.00689       52.7556       56.7625    
  64  0.116686      -2.14827      -3.84537       3.84537       50.8673       54.7126    
  65  0.856486     -0.154918     -0.277301      0.277301       52.7507       53.0280    
  66  0.895996     -0.109820     -0.196576      0.196576       48.2681       48.4647    
  67  0.112164      -2.18779      -3.91611       3.91611       47.4622       51.3784    
  68  0.573757     -0.555550     -0.994427      0.994427       52.2522       53.2467    
  69  0.376044     -0.978049      -1.75070       1.75070       48.2390       49.9897    
  70  0.779305     -0.249353     -0.446339      0.446339       48.2533       48.6996    
loop,thermsimp(1:2)       28   2.61778      0.144544    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295         48.43          0.84          1.12         23.79          0.49          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.43
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       28
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       29
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      294     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247      -1.97340       1.97340       47.1953       49.1687    
   2  0.991191     -0.884791E-02 -0.158376E-01  0.158376E-01   47.5679       47.5838    
   3  0.752830     -0.283916     -0.508207      0.508207       47.6468       48.1550    
   4  0.718872     -0.330071     -0.590824      0.590824       47.7893       48.3801    
   5  0.362244      -1.01544      -1.81762       1.81762       47.3977       49.2153    
   6  0.993342E-01  -2.30927      -4.13356       4.13356       47.5631       51.6966    
   7  0.734379     -0.308729     -0.552622      0.552622       47.2142       47.7668    
   8  0.190509      -1.65806      -2.96790       2.96790       47.8839       50.8518    
   9  0.113713      -2.17408      -3.89157       3.89157       48.2681       52.1597    
  10  0.582158     -0.541014     -0.968408      0.968408       48.1205       49.0889    
  11  0.100405E-01  -4.60113      -8.23596       8.23596       47.8653       56.1013    
  12  0.614877     -0.486333     -0.870530      0.870530       48.6182       49.4888    
  13  0.996806     -0.319890E-02 -0.572600E-02  0.572600E-02   48.2533       48.2590    
  14  0.439871E-01  -3.12386      -5.59167       5.59167       47.7303       53.3220    
  15  0.610456     -0.493549     -0.883446      0.883446       47.9746       48.8581    
  16  0.676471     -0.390866     -0.699645      0.699645       47.7850       48.4846    
  17  0.263829      -1.33246      -2.38508       2.38508       47.2545       49.6396    
  18  0.761962     -0.271858     -0.486622      0.486622       47.7233       48.2099    
  19  0.405295     -0.903140      -1.61661       1.61661       48.3547       49.9713    
  20  0.184680      -1.68913      -3.02353       3.02353       48.2589       51.2824    
  21  0.695434     -0.363219     -0.650158      0.650158       47.6108       48.2609    
  22  0.597154     -0.515580     -0.922882      0.922882       47.9426       48.8655    
  23  0.254276      -1.36933      -2.45109       2.45109       48.7951       51.2462    
  24  0.777974     -0.251062     -0.449399      0.449399       47.6508       48.1002    
  25  0.597236     -0.515443     -0.922636      0.922636       48.3863       49.3089    
  26  0.658168     -0.418295     -0.748743      0.748743       49.1221       49.8709    
  27  0.917953     -0.856086E-01 -0.153238      0.153238       48.2724       48.4256    
  28  0.167567      -1.78637      -3.19759       3.19759       48.4120       51.6095    
  29  0.867739E-02  -4.74703      -8.49713       8.49713       49.2075       57.7047    
  30  0.157469      -1.84853      -3.30884       3.30884       47.7100       51.0189    
  31  0.947458     -0.539724E-01 -0.966099E-01  0.966099E-01   47.1344       47.2310    
  32  0.883772     -0.123556     -0.221163      0.221163       49.2175       49.4387    
  33  0.873100     -0.135705     -0.242910      0.242910       48.3828       48.6257    
  34  0.138043      -1.98019      -3.54451       3.54451       48.3105       51.8550    
  35  0.833185     -0.182500     -0.326672      0.326672       48.5919       48.9185    
  36  0.907894     -0.966275E-01 -0.172962      0.172962       48.2390       48.4120    
  37  0.858432     -0.152648     -0.273238      0.273238       48.4284       48.7017    
  38  0.192050      -1.65000      -2.95348       2.95348       47.8469       50.8004    
  39  0.890666     -0.115786     -0.207255      0.207255       47.7162       47.9235    
  40  0.389935     -0.941775      -1.68576       1.68576       49.5451       51.2309    
  41  0.842362     -0.171545     -0.307064      0.307064       49.9618       50.2689    
  42  0.143912      -1.93855      -3.46998       3.46998       48.3430       51.8130    
  43  0.678545     -0.387804     -0.694165      0.694165       49.0408       49.7349    
  44  0.621021     -0.476390     -0.852733      0.852733       48.2909       49.1436    
  45  0.533199     -0.628861      -1.12565       1.12565       48.2799       49.4056    
  46  0.891703     -0.114623     -0.205173      0.205173       48.1302       48.3353    
  47  0.675469     -0.392349     -0.702299      0.702299       48.5005       49.2028    
  48  0.757471     -0.277770     -0.497205      0.497205       48.4295       48.9267    
  49  0.855441     -0.156139     -0.279486      0.279486       48.7895       49.0690    
  50  0.737982     -0.303836     -0.543863      0.543863       48.5836       49.1274    
  51  0.630328     -0.461515     -0.826106      0.826106       47.6550       48.4811    
  52  0.701612     -0.354375     -0.634328      0.634328       48.9001       49.5345    
  53  0.161537E-01  -4.12561      -7.38479       7.38479       49.5314       56.9162    
  54  0.716145     -0.333873     -0.597628      0.597628       48.8766       49.4743    
  55  0.644842     -0.438751     -0.785358      0.785358       47.4622       48.2476    
  56  0.465420E-01  -3.06740      -5.49061       5.49061       48.2631       53.7537    
  57  0.644178     -0.439780     -0.787201      0.787201       48.0552       48.8424    
  58  0.297766      -1.21145      -2.16848       2.16848       50.9974       53.1659    
  59  0.877956     -0.130159     -0.232983      0.232983       49.0487       49.2817    
  60  0.373410     -0.985078      -1.76328       1.76328       52.7507       54.5140    
  61  0.162588      -1.81653      -3.25157       3.25157       48.0842       51.3358    
  62  0.634599     -0.454761     -0.814017      0.814017       52.2522       53.0663    
  63  0.762468     -0.271195     -0.485435      0.485435       48.0046       48.4900    
  64  0.237905      -1.43588      -2.57022       2.57022       47.4953       50.0655    
  65  0.473101     -0.748446      -1.33971       1.33971       50.8673       52.2070    
  66  0.156066      -1.85747      -3.32486       3.32486       50.0105       53.3353    
  67  0.992592     -0.743581E-02 -0.133100E-01  0.133100E-01   52.7556       52.7689    
  68  0.568078     -0.565496      -1.01223       1.01223       48.7413       49.7536    
  69  0.918090     -0.854598E-01 -0.152972      0.152972       49.4574       49.6104    
  70  0.561720     -0.576753      -1.03238       1.03238       48.4341       49.4664    
loop,thermsimp(1:2)       29   1.97340      0.158376E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296         47.55          0.84          1.12         23.78          0.55          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    297         60.34          0.84          1.11         23.75          0.56          0.04         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       29
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       30
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      296     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797      -3.30784       3.30784       47.1344       50.4423    
   2  0.553200     -0.592035      -1.05974       1.05974       47.5679       48.6277    
   3  0.825049     -0.192313     -0.344237      0.344237       47.2142       47.5584    
   4  0.767336     -0.264830     -0.474043      0.474043       47.7162       48.1903    
   5  0.966534     -0.340385E-01 -0.609284E-01  0.609284E-01   47.6508       47.7118    
   6  0.954430     -0.466410E-01 -0.834868E-01  0.834868E-01   47.6468       47.7303    
   7  0.780674     -0.247598     -0.443197      0.443197       47.7233       48.1665    
   8  0.312863      -1.16199      -2.07995       2.07995       47.4622       49.5422    
   9  0.990226     -0.982218E-02 -0.175816E-01  0.175816E-01   48.2533       48.2709    
  10  0.893872     -0.112193     -0.200823      0.200823       47.6108       47.8116    
  11  0.322320      -1.13221      -2.02664       2.02664       48.1302       50.1568    
  12  0.927465     -0.752997E-01 -0.134786      0.134786       47.7893       47.9241    
  13  0.539466     -0.617176      -1.10474       1.10474       48.2390       49.3438    
  14  0.461474     -0.773330      -1.38425       1.38425       48.2724       49.6567    
  15  0.745701     -0.293430     -0.525237      0.525237       47.6550       48.1802    
  16  0.703580     -0.351573     -0.629312      0.629312       47.7850       48.4143    
  17  0.917420E-01  -2.38878      -4.27588       4.27588       48.0046       52.2805    
  18  0.671661     -0.398001     -0.712417      0.712417       48.3828       49.0952    
  19  0.845179     -0.168207     -0.301089      0.301089       48.4284       48.7295    
  20  0.283605E-01  -3.56276      -6.37729       6.37729       48.0552       54.4325    
  21  0.108883E-01  -4.52006      -8.09086       8.09086       47.9746       56.0655    
  22  0.506006     -0.681208      -1.21935       1.21935       47.9426       49.1619    
  23  0.353918      -1.03869      -1.85924       1.85924       48.5919       50.4511    
  24  0.656862     -0.420282     -0.752299      0.752299       48.4295       49.1818    
  25  0.691560     -0.368806     -0.660157      0.660157       48.7895       49.4497    
  26  0.445402     -0.808779      -1.44770       1.44770       48.1205       49.5682    
  27  0.832700     -0.183081     -0.327713      0.327713       48.5836       48.9113    
  28  0.963063     -0.376360E-01 -0.673680E-01  0.673680E-01   48.2909       48.3582    
  29  0.422212     -0.862247      -1.54341       1.54341       47.1953       48.7387    
  30  0.917895     -0.856720E-01 -0.153352      0.153352       48.5005       48.6538    
  31  0.767210     -0.264994     -0.474336      0.474336       47.3977       47.8721    
  32  0.360836      -1.01933      -1.82459       1.82459       49.0487       50.8733    
  33  0.635930     -0.452667     -0.810268      0.810268       48.3863       49.1965    
  34  0.687292     -0.374995     -0.671237      0.671237       48.2799       48.9512    
  35  0.833832     -0.181724     -0.325283      0.325283       49.2175       49.5428    
  36  0.362075      -1.01590      -1.81846       1.81846       48.4341       50.2525    
  37  0.385764     -0.952530      -1.70502       1.70502       48.8766       50.5817    
  38  0.752556     -0.284279     -0.508856      0.508856       48.6182       49.1271    
  39  0.547433     -0.602515      -1.07849       1.07849       48.9001       49.9786    
  40  0.171004      -1.76607      -3.16124       3.16124       49.4574       52.6186    
  41  0.159022      -1.83871      -3.29127       3.29127       47.2545       50.5458    
  42  0.850806     -0.161571     -0.289209      0.289209       49.0408       49.3300    
  43  0.926075     -0.768001E-01 -0.137471      0.137471       48.7413       48.8788    
  44  0.584885     -0.536340     -0.960041      0.960041       49.1221       50.0822    
  45  0.547650     -0.602120      -1.07779       1.07779       48.3547       49.4325    
  46  0.864296     -0.145840     -0.261052      0.261052       47.4953       47.7563    
  47  0.384639     -0.955450      -1.71024       1.71024       49.9618       51.6721    
  48  0.359776      -1.02227      -1.82986       1.82986       47.8469       49.6768    
  49  0.147032      -1.91711      -3.43160       3.43160       47.8839       51.3155    
  50  0.649806     -0.431082     -0.771631      0.771631       47.7100       48.4816    
  51  0.909946     -0.943695E-01 -0.168920      0.168920       49.5451       49.7141    
  52  0.740699     -0.300161     -0.537285      0.537285       48.7951       49.3324    
  53  0.959446     -0.413992E-01 -0.741040E-01  0.741040E-01   48.2589       48.3330    
  54  0.993892     -0.612654E-02 -0.109664E-01  0.109664E-01   48.0842       48.0952    
  55  0.499875     -0.693397      -1.24117       1.24117       48.4120       49.6531    
  56  0.716813     -0.332941     -0.595960      0.595960       47.5631       48.1590    
  57  0.586555     -0.533488     -0.954937      0.954937       48.3430       49.2979    
  58  0.687999     -0.373968     -0.669397      0.669397       48.3105       48.9799    
  59  0.238056      -1.43525      -2.56908       2.56908       48.2681       50.8372    
  60  0.842319     -0.171596     -0.307155      0.307155       50.8673       51.1744    
  61  0.559244     -0.581169      -1.04029       1.04029       52.7556       53.7959    
  62  0.596920     -0.515973     -0.923584      0.923584       52.2522       53.1758    
  63  0.266753      -1.32143      -2.36535       2.36535       50.9974       53.3628    
  64  0.681727     -0.383126     -0.685790      0.685790       47.7303       48.4161    
  65  0.401206E-01  -3.21587      -5.75636       5.75636       50.0105       55.7668    
  66  0.275178      -1.29034      -2.30968       2.30968       48.2631       50.5728    
  67  0.830963     -0.185171     -0.331453      0.331453       52.7507       53.0822    
  68  0.802444     -0.220093     -0.393964      0.393964       47.8653       48.2593    
  69  0.661893E-01  -2.71524      -4.86024       4.86024       49.5314       54.3916    
  70  0.865761E-01  -2.44673      -4.37962       4.37962       47.5468       51.9264    
loop,thermsimp(1:2)       30   3.30784       1.05974    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298         48.77          0.84          1.12         23.82          0.45          0.04         26.25
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       30
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       31
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      297     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189      -2.29457       2.29457       47.2142       49.5087    
   2  0.202445      -1.59728      -2.85912       2.85912       47.6508       50.5100    
   3  0.927152     -0.756373E-01 -0.135390      0.135390       47.6468       47.7822    
   4  0.403144     -0.908460      -1.62613       1.62613       47.4953       49.1214    
   5  0.791838     -0.233398     -0.417780      0.417780       47.6108       48.0286    
   6  0.292576      -1.22903      -2.19995       2.19995       47.3977       49.5977    
   7  0.135578      -1.99821      -3.57677       3.57677       47.7893       51.3660    
   8  0.516570     -0.660545      -1.18237       1.18237       48.0842       49.2666    
   9  0.730579     -0.313918     -0.561909      0.561909       47.5631       48.1250    
  10  0.508248     -0.676786      -1.21144       1.21144       47.7233       48.9347    
  11  0.928455     -0.742338E-01 -0.132878      0.132878       47.6550       47.7879    
  12  0.696477     -0.361721     -0.647475      0.647475       47.7162       48.3637    
  13  0.465556     -0.764522      -1.36848       1.36848       47.8653       49.2338    
  14  0.194653      -1.63654      -2.92938       2.92938       48.2533       51.1827    
  15  0.650312     -0.430303     -0.770238      0.770238       48.2589       49.0291    
  16  0.555802     -0.587343      -1.05134       1.05134       48.2909       49.3422    
  17  0.985517     -0.145893E-01 -0.261147E-01  0.261147E-01   47.7850       47.8111    
  18  0.923066     -0.800544E-01 -0.143296      0.143296       47.7303       47.8736    
  19  0.658765     -0.417388     -0.747119      0.747119       47.7100       48.4571    
  20  0.197878      -1.62010      -2.89997       2.89997       47.5679       50.4679    
  21  0.449673     -0.799236      -1.43062       1.43062       48.5005       49.9311    
  22  0.208093      -1.56977      -2.80987       2.80987       48.4284       51.2383    
  23  0.102791      -2.27506      -4.07233       4.07233       47.1953       51.2676    
  24  0.650538     -0.429955     -0.769615      0.769615       48.7413       49.5110    
  25  0.223365      -1.49895      -2.68310       2.68310       48.5836       51.2667    
  26  0.520729     -0.652525      -1.16801       1.16801       48.2799       49.4479    
  27  0.919707E-01  -2.38629      -4.27142       4.27142       48.3105       52.5820    
  28  0.788427     -0.237716     -0.425508      0.425508       48.3828       48.8083    
  29  0.395754     -0.926961      -1.65925       1.65925       48.6182       50.2775    
  30  0.903388     -0.101603     -0.181869      0.181869       47.9426       48.1244    
  31  0.569415     -0.563145      -1.00802       1.00802       48.4295       49.4375    
  32  0.974677     -0.256496E-01 -0.459125E-01  0.459125E-01   48.3863       48.4322    
  33  0.376411     -0.977073      -1.74895       1.74895       48.3430       50.0919    
  34  0.309090      -1.17412      -2.10167       2.10167       49.0408       51.1424    
  35  0.248039      -1.39417      -2.49555       2.49555       48.7951       51.2907    
  36  0.941329     -0.604621E-01 -0.108226      0.108226       48.2390       48.3473    
  37  0.131879      -2.02587      -3.62629       3.62629       48.3547       51.9810    
  38  0.188022      -1.67120      -2.99142       2.99142       48.7895       51.7809    
  39  0.898649E-01  -2.40945      -4.31288       4.31288       47.4622       51.7751    
  40  0.853893     -0.157949     -0.282727      0.282727       49.2175       49.5003    
  41  0.643577     -0.440714     -0.788873      0.788873       48.1205       48.9094    
  42  0.664391     -0.408885     -0.731899      0.731899       48.4120       49.1439    
  43  0.825262     -0.192054     -0.343775      0.343775       48.2724       48.6162    
  44  0.611498     -0.491843     -0.880393      0.880393       47.8469       48.7273    
  45  0.284000      -1.25878      -2.25320       2.25320       49.5451       51.7983    
  46  0.108174      -2.22402      -3.98096       3.98096       48.9001       52.8811    
  47  0.293070      -1.22734      -2.19693       2.19693       49.1221       51.3190    
  48  0.412045     -0.886623      -1.58704       1.58704       48.1302       49.7172    
  49  0.464041     -0.767783      -1.37432       1.37432       48.4341       49.8084    
  50  0.711768     -0.340003     -0.608601      0.608601       47.1344       47.7430    
  51  0.919970     -0.834138E-01 -0.149310      0.149310       48.5919       48.7412    
  52  0.551321     -0.595437      -1.06583       1.06583       47.2545       48.3203    
  53  0.720690E-01  -2.63013      -4.70790       4.70790       48.2631       52.9710    
  54  0.788823     -0.237213     -0.424608      0.424608       48.8766       49.3013    
  55  0.339304      -1.08086      -1.93473       1.93473       48.2681       50.2028    
  56  0.824115     -0.193445     -0.346264      0.346264       49.0487       49.3950    
  57  0.564535     -0.571754      -1.02343       1.02343       50.8673       51.8907    
  58  0.608050     -0.497498     -0.890515      0.890515       47.8839       48.7744    
  59  0.696797     -0.361262     -0.646654      0.646654       49.9618       50.6085    
  60  0.287274      -1.24732      -2.23268       2.23268       47.5468       49.7795    
  61  0.302150E-01  -3.49942      -6.26391       6.26391       48.0046       54.2685    
  62  0.896370     -0.109402     -0.195828      0.195828       49.4574       49.6532    
  63  0.289059      -1.24112      -2.22160       2.22160       52.7507       54.9723    
  64  0.476596     -0.741086      -1.32653       1.32653       52.2522       53.5788    
  65  0.895851E-01  -2.41257      -4.31846       4.31846       50.9974       55.3159    
  66  0.864694     -0.145380     -0.260228      0.260228       52.7556       53.0159    
  67  0.222506      -1.50280      -2.69000       2.69000       49.5314       52.2214    
  68  0.800191     -0.222904     -0.398996      0.398996       48.0552       48.4542    
  69  0.332930      -1.09982      -1.96867       1.96867       50.0105       51.9792    
  70  0.616166     -0.484239     -0.866782      0.866782       48.7660       49.6328    
loop,thermsimp(1:2)       31   2.29457       2.85912    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    299         48.06          0.83          1.11         23.80          0.57          0.04         26.36
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    300         51.55          0.84          1.11         23.75          0.52          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       31
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       32
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      299     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759     -0.635014      0.635014       47.1344       47.7694    
   2  0.779682     -0.248869     -0.445473      0.445473       47.6468       48.0923    
   3  0.611645     -0.491604     -0.879965      0.879965       47.6550       48.5349    
   4  0.380626     -0.965937      -1.72902       1.72902       47.7850       49.5140    
   5  0.986599     -0.134915E-01 -0.241496E-01  0.241496E-01   47.7303       47.7545    
   6  0.699021     -0.358075     -0.640949      0.640949       47.6108       48.2517    
   7  0.981217E-01  -2.32155      -4.15554       4.15554       47.9426       52.0981    
   8  0.221199      -1.50869      -2.70054       2.70054       47.5631       50.2636    
   9  0.802460     -0.220073     -0.393928      0.393928       47.2545       47.6484    
  10  0.623430     -0.472519     -0.845802      0.845802       48.2390       49.0848    
  11  0.669862     -0.400684     -0.717219      0.717219       47.7162       48.4334    
  12  0.957999     -0.429090E-01 -0.768065E-01  0.768065E-01   48.3863       48.4631    
  13  0.569879E-01  -2.86492      -5.12817       5.12817       48.0552       53.1834    
  14  0.245244      -1.40550      -2.51583       2.51583       47.7100       50.2258    
  15  0.870123     -0.139121     -0.249025      0.249025       48.2724       48.5214    
  16  0.429679     -0.844716      -1.51203       1.51203       47.8469       49.3589    
  17  0.369880     -0.994577      -1.78028       1.78028       48.5919       50.3722    
  18  0.964882     -0.357490E-01 -0.639903E-01  0.639903E-01   47.8839       47.9479    
  19  0.625983     -0.468432     -0.838487      0.838487       48.3828       49.2212    
  20  0.508652     -0.675991      -1.21001       1.21001       48.1205       49.3305    
  21  0.694697     -0.364279     -0.652055      0.652055       47.7233       48.3753    
  22  0.817819     -0.201114     -0.359991      0.359991       48.2589       48.6189    
  23  0.655732     -0.422003     -0.755380      0.755380       47.4953       48.2507    
  24  0.658757     -0.417401     -0.747142      0.747142       48.4120       49.1591    
  25  0.325934      -1.12106      -2.00668       2.00668       47.8653       49.8720    
  26  0.849137     -0.163535     -0.292725      0.292725       48.0842       48.3770    
  27  0.953435     -0.476843E-01 -0.853543E-01  0.853543E-01   48.8766       48.9620    
  28  0.435049     -0.832297      -1.48980       1.48980       48.2909       49.7807    
  29  0.155341E-01  -4.16472      -7.45480       7.45480       49.0487       56.5035    
  30  0.390095     -0.941364      -1.68503       1.68503       48.4295       50.1145    
  31  0.400867E-02  -5.51929      -9.87947       9.87947       48.2799       58.1594    
  32  0.989750     -0.103025E-01 -0.184414E-01  0.184414E-01   49.2175       49.2360    
  33  0.194149      -1.63913      -2.93402       2.93402       47.2142       50.1482    
  34  0.573547     -0.555915     -0.995080      0.995080       48.7413       49.7364    
  35  0.570216     -0.561740      -1.00551       1.00551       47.3977       48.4032    
  36  0.802122     -0.220494     -0.394682      0.394682       48.7660       49.1607    
  37  0.831214E-01  -2.48745      -4.45251       4.45251       49.4574       53.9099    
  38  0.280368      -1.27165      -2.27624       2.27624       48.1302       50.4064    
  39  0.568263     -0.565171      -1.01165       1.01165       47.5468       48.5584    
  40  0.570544     -0.561165      -1.00448       1.00448       48.4341       49.4385    
  41  0.524202     -0.645877      -1.15611       1.15611       48.5005       49.6566    
  42  0.625335E-01  -2.77205      -4.96194       4.96194       48.3430       53.3049    
  43  0.717146     -0.332476     -0.595129      0.595129       48.2681       48.8633    
  44  0.234175      -1.45169      -2.59850       2.59850       48.6182       51.2167    
  45  0.366320      -1.00425      -1.79759       1.79759       47.5679       49.3655    
  46  0.458915     -0.778891      -1.39421       1.39421       47.6508       49.0451    
  47  0.379536     -0.968806      -1.73415       1.73415       49.9618       51.6960    
  48  0.854466     -0.157278     -0.281526      0.281526       49.0408       49.3223    
  49  0.452738E-01  -3.09503      -5.54006       5.54006       48.2533       53.7934    
  50  0.966525     -0.340477E-01 -0.609450E-01  0.609450E-01   48.4284       48.4894    
  51  0.400949     -0.913920      -1.63591       1.63591       48.5836       50.2195    
  52  0.563096     -0.574305      -1.02800       1.02800       47.1953       48.2233    
  53  0.612298     -0.490536     -0.878053      0.878053       48.7951       49.6732    
  54  0.395518     -0.927559      -1.66032       1.66032       49.1221       50.7824    
  55  0.693522     -0.365972     -0.655085      0.655085       47.7893       48.4444    
  56  0.270894      -1.30603      -2.33777       2.33777       47.4622       49.8000    
  57  0.885600     -0.121490     -0.217465      0.217465       48.7895       49.0070    
  58  0.862297     -0.148155     -0.265196      0.265196       49.5451       49.8103    
  59  0.483017     -0.727702      -1.30258       1.30258       50.8673       52.1699    
  60  0.594400     -0.520203     -0.931157      0.931157       50.0105       50.9416    
  61  0.351664      -1.04508      -1.87068       1.87068       48.3547       50.2254    
  62  0.402505     -0.910048      -1.62898       1.62898       49.5314       51.1604    
  63  0.272240      -1.30107      -2.32890       2.32890       48.3105       50.6394    
  64  0.234792      -1.44906      -2.59379       2.59379       48.9001       51.4939    
  65  0.825709E-01  -2.49410      -4.46440       4.46440       48.2631       52.7275    
  66  0.636436     -0.451871     -0.808843      0.808843       52.7556       53.5645    
  67  0.942309     -0.594220E-01 -0.106365      0.106365       52.2522       52.3586    
  68  0.185829      -1.68293      -3.01242       3.01242       48.0046       51.0170    
  69  0.518004     -0.657773      -1.17740       1.17740       52.7507       53.9281    
  70  0.831797     -0.184167     -0.329657      0.329657       48.0627       48.3923    
loop,thermsimp(1:2)       32  0.635014      0.445473    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301         48.39          0.84          1.12         23.76          0.55          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    302         50.03          0.84          1.12         23.81          0.43          0.04         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    48.394        1.231     -1.815      3.151     -102.6      1.445    
                      0.2604      1.310     -99.70      3.735     0.2705E-01

                       2.200     -1.012      1.530      7356.      3697.    

                     -0.7622E-02  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6142.      434.8    

                       1.433     -5.771     -3.986     -8.342      6.758    

                      -14.79     -3.598      2141.      0.000     0.1245E+05



                       1842.     0.1489E+05 -4762.      6015.      4416.    

                       6873.     0.2068E-01 0.1824     0.2789E-01 0.1076    

                     -0.2486    -0.6638E-01 0.2057     0.1351     0.8275E-01



                     -0.4833    -0.7880      0.000     0.8439E-01-0.9874E-01

                      0.2138E-01 0.9792E-01-0.7116    -0.1320     0.1762E-01

                      0.7086E-01-0.5603E-02-0.6319     -1.186      7268.    



                      -1.095     -1.342     -2.233     -2.328    -0.3807    

                     -0.3252      9.212      8.657    -0.1980E+05 -4.000    

                      -1.527     -2.168      9.317      8.889    -0.1908E+05



                      -4.000     0.3822    -0.3899      8.855      9.067    

                     -0.1908E+05 -7.000    -0.6963    -0.6171      9.038    

                       8.793    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       32
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       33
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      301     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412      -1.62247       1.62247       47.2545       48.8770    
   2  0.598662     -0.513057     -0.918366      0.918366       47.7303       48.6487    
   3  0.165178      -1.80073      -3.22328       3.22328       47.1344       50.3577    
   4  0.785331     -0.241651     -0.432552      0.432552       47.8839       48.3165    
   5  0.422061     -0.862604      -1.54405       1.54405       47.6468       49.1909    
   6  0.343624      -1.06821      -1.91208       1.91208       47.1953       49.1074    
   7  0.988862     -0.112001E-01 -0.200480E-01  0.200480E-01   47.4953       47.5153    
   8  0.586093E-01  -2.83686      -5.07795       5.07795       47.6108       52.6887    
   9  0.324880      -1.12430      -2.01248       2.01248       47.7233       49.7357    
  10  0.869373     -0.139983     -0.250568      0.250568       48.0842       48.3348    
  11  0.314362      -1.15721      -2.07139       2.07139       48.0627       50.1341    
  12  0.635265     -0.453712     -0.812140      0.812140       47.3977       48.2099    
  13  0.800738     -0.222221     -0.397773      0.397773       47.7162       48.1140    
  14  0.234515      -1.45024      -2.59590       2.59590       47.7893       50.3852    
  15  0.818766     -0.199957     -0.357920      0.357920       48.3863       48.7442    
  16  0.480807     -0.732289      -1.31079       1.31079       48.4284       49.7392    
  17  0.173083      -1.75398      -3.13961       3.13961       48.2724       51.4120    
  18  0.544835     -0.607272      -1.08701       1.08701       47.6550       48.7420    
  19  0.955728     -0.452816E-01 -0.810535E-01  0.810535E-01   47.5468       47.6278    
  20  0.909631     -0.947157E-01 -0.169540      0.169540       48.2589       48.4284    
  21  0.538276     -0.619384      -1.10869       1.10869       48.2681       49.3768    
  22  0.640373     -0.445705     -0.797806      0.797806       48.8766       49.6744    
  23  0.588429     -0.530300     -0.949230      0.949230       48.7895       49.7387    
  24  0.954392     -0.466804E-01 -0.835573E-01  0.835573E-01   47.6508       47.7344    
  25  0.976738     -0.235363E-01 -0.421297E-01  0.421297E-01   48.2390       48.2812    
  26  0.801897     -0.220775     -0.395185      0.395185       48.4120       48.8071    
  27  0.679499     -0.386400     -0.691652      0.691652       48.7660       49.4576    
  28  0.303686      -1.19176      -2.13324       2.13324       48.3828       50.5160    
  29  0.907562     -0.969936E-01 -0.173617      0.173617       49.2175       49.3911    
  30  0.117971E-01  -4.43990      -7.94737       7.94737       49.0408       56.9882    
  31  0.324683      -1.12491      -2.01357       2.01357       48.1205       50.1341    
  32  0.662106     -0.412329     -0.738065      0.738065       47.8469       48.5850    
  33  0.334080      -1.09637      -1.96250       1.96250       47.5679       49.5304    
  34  0.307577      -1.17903      -2.11045       2.11045       48.4341       50.5445    
  35  0.539029     -0.617986      -1.10619       1.10619       47.7850       48.8911    
  36  0.822737     -0.195119     -0.349261      0.349261       48.5005       48.8497    
  37  0.973480     -0.268776E-01 -0.481106E-01  0.481106E-01   48.7951       48.8433    
  38  0.918970     -0.845018E-01 -0.151257      0.151257       48.7413       48.8926    
  39  0.203072      -1.59419      -2.85359       2.85359       48.2909       51.1445    
  40  0.467655     -0.760024      -1.36043       1.36043       47.4622       48.8227    
  41  0.323145      -1.12965      -2.02207       2.02207       49.5451       51.5672    
  42  0.505961     -0.681295      -1.21951       1.21951       47.8653       49.0849    
  43  0.699853E-01  -2.65947      -4.76042       4.76042       48.4295       53.1899    
  44  0.188263      -1.66991      -2.98912       2.98912       47.2142       50.2033    
  45  0.663178     -0.410711     -0.735168      0.735168       48.5836       49.3187    
  46  0.680233     -0.385320     -0.689717      0.689717       48.3547       49.0444    
  47  0.717812     -0.331548     -0.593466      0.593466       47.7100       48.3035    
  48  0.319374      -1.14139      -2.04308       2.04308       47.5631       49.6062    
  49  0.667076     -0.404851     -0.724678      0.724678       48.5919       49.3166    
  50  0.755360     -0.280560     -0.502200      0.502200       48.1302       48.6324    
  51  0.105804      -2.24617      -4.02061       4.02061       48.3105       52.3311    
  52  0.432752     -0.837590      -1.49928       1.49928       49.1221       50.6214    
  53  0.258710      -1.35205      -2.42015       2.42015       50.0105       52.4306    
  54  0.826410     -0.190665     -0.341287      0.341287       48.0046       48.3459    
  55  0.958430     -0.424590E-01 -0.760011E-01  0.760011E-01   49.5314       49.6074    
  56  0.898442     -0.107093     -0.191695      0.191695       48.6182       48.8099    
  57  0.794924     -0.229509     -0.410818      0.410818       48.9001       49.3110    
  58  0.191148      -1.65471      -2.96190       2.96190       49.9618       52.9237    
  59  0.920959     -0.823397E-01 -0.147387      0.147387       47.9426       48.0900    
  60  0.239714      -1.42831      -2.55665       2.55665       50.8673       53.4239    
  61  0.337561      -1.08601      -1.94394       1.94394       52.2522       54.1962    
  62  0.229537      -1.47169      -2.63431       2.63431       48.2631       50.8974    
  63  0.518941     -0.655965      -1.17417       1.17417       48.0552       49.2294    
  64  0.565096     -0.570759      -1.02165       1.02165       48.3430       49.3646    
  65  0.934648     -0.675849E-01 -0.120976      0.120976       52.7556       52.8766    
  66  0.699822     -0.356929     -0.638899      0.638899       48.2533       48.8922    
  67  0.614954     -0.486208     -0.870307      0.870307       49.4574       50.3277    
  68  0.137942      -1.98092      -3.54582       3.54582       52.7507       56.2966    
  69  0.565370     -0.570275      -1.02079       1.02079       49.0487       50.0695    
  70  0.290261E-01  -3.53956      -6.33577       6.33577       48.3943       54.7300    
loop,thermsimp(1:2)       33   1.62247      0.918366    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303         49.88          0.84          1.12         23.84          0.67          0.04         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.88
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       33
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       34
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      302     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437      -2.63910       2.63910       47.4953       50.1344    
   2  0.299376      -1.20605      -2.15882       2.15882       47.5468       49.7056    
   3  0.220114      -1.51361      -2.70934       2.70934       47.6508       50.3602    
   4  0.229209      -1.47312      -2.63687       2.63687       47.9426       50.5794    
   5  0.902477     -0.102612     -0.183675      0.183675       47.7162       47.8999    
   6  0.659052     -0.416953     -0.746340      0.746340       47.3977       48.1441    
   7  0.100321E-01  -4.60197      -8.23747       8.23747       48.2390       56.4765    
   8  0.588837     -0.529606     -0.947988      0.947988       47.7100       48.6580    
   9  0.270943      -1.30585      -2.33745       2.33745       47.8839       50.2214    
  10  0.505518     -0.682171      -1.22108       1.22108       48.0842       49.3053    
  11  0.264565      -1.32967      -2.38009       2.38009       48.0046       50.3847    
  12  0.806386     -0.215193     -0.385193      0.385193       48.2589       48.6441    
  13  0.340560      -1.07716      -1.92811       1.92811       47.8469       49.7750    
  14  0.906186     -0.985106E-01 -0.176333      0.176333       48.1302       48.3065    
  15  0.786070     -0.240709     -0.430867      0.430867       47.7303       48.1612    
  16  0.540508     -0.615247      -1.10128       1.10128       47.6550       48.7563    
  17  0.935065     -0.671392E-01 -0.120178      0.120178       48.3863       48.5064    
  18  0.915359     -0.884391E-01 -0.158305      0.158305       48.4120       48.5703    
  19  0.958261     -0.426353E-01 -0.763166E-01  0.763166E-01   48.6182       48.6946    
  20  0.935110     -0.670907E-01 -0.120092      0.120092       47.4622       47.5823    
  21  0.637755     -0.449800     -0.805137      0.805137       48.7951       49.6003    
  22  0.975714     -0.245861E-01 -0.440089E-01  0.440089E-01   48.5005       48.5445    
  23  0.797424     -0.226369     -0.405198      0.405198       47.2545       47.6597    
  24  0.214179      -1.54094      -2.75827       2.75827       47.7850       50.5432    
  25  0.372145     -0.988472      -1.76935       1.76935       48.2533       50.0226    
  26  0.925208     -0.777367E-01 -0.139148      0.139148       48.7413       48.8805    
  27  0.175897      -1.73786      -3.11074       3.11074       48.3547       51.4654    
  28  0.952033     -0.491554E-01 -0.879876E-01  0.879876E-01   47.8653       47.9533    
  29  0.158274E-01  -4.14601      -7.42131       7.42131       47.1953       54.6166    
  30  0.799308     -0.224008     -0.400972      0.400972       47.6468       48.0478    
  31  0.248227      -1.39341      -2.49419       2.49419       48.0552       50.5494    
  32  0.244914      -1.40685      -2.51824       2.51824       48.9001       51.4184    
  33  0.390842     -0.939452      -1.68161       1.68161       48.5919       50.2735    
  34  0.146784      -1.91879      -3.43462       3.43462       48.5836       52.0182    
  35  0.500975     -0.691199      -1.23724       1.23724       48.3430       49.5802    
  36  0.480131E-01  -3.03628      -5.43491       5.43491       48.2681       53.7030    
  37  0.124503      -2.08343      -3.72931       3.72931       49.2175       52.9468    
  38  0.670304     -0.400024     -0.716039      0.716039       48.7660       49.4820    
  39  0.997449     -0.255468E-02 -0.457285E-02  0.457285E-02   47.5679       47.5725    
  40  0.681761     -0.383076     -0.685701      0.685701       47.5631       48.2488    
  41  0.440529     -0.819778      -1.46739       1.46739       49.5314       50.9988    
  42  0.342489      -1.07152      -1.91800       1.91800       48.8766       50.7946    
  43  0.735753     -0.306861     -0.549277      0.549277       47.7233       48.2725    
  44  0.614752     -0.486537     -0.870895      0.870895       48.7895       49.6604    
  45  0.351660      -1.04509      -1.87070       1.87070       48.4284       50.2991    
  46  0.777165     -0.252103     -0.451260      0.451260       49.0487       49.5000    
  47  0.392618     -0.934919      -1.67349       1.67349       48.0627       49.7362    
  48  0.385647     -0.952832      -1.70556       1.70556       48.1205       49.8261    
  49  0.834392     -0.181052     -0.324082      0.324082       47.2142       47.5383    
  50  0.469158     -0.756815      -1.35469       1.35469       49.4574       50.8121    
  51  0.697320     -0.360511     -0.645310      0.645310       47.1344       47.7797    
  52  0.987150     -0.129333E-01 -0.231504E-01  0.231504E-01   47.7893       47.8124    
  53  0.512413     -0.668624      -1.19683       1.19683       48.3828       49.5796    
  54  0.781282     -0.246819     -0.441804      0.441804       48.4341       48.8759    
  55  0.290579      -1.23588      -2.21221       2.21221       49.1221       51.3343    
  56  0.921499     -0.817534E-01 -0.146338      0.146338       48.2631       48.4094    
  57  0.198558      -1.61668      -2.89383       2.89383       48.2909       51.1847    
  58  0.488340     -0.716743      -1.28296       1.28296       48.2724       49.5554    
  59  0.874587     -0.134003     -0.239865      0.239865       49.5451       49.7850    
  60  0.165334      -1.79979      -3.22160       3.22160       48.3105       51.5321    
  61  0.712283     -0.339280     -0.607306      0.607306       50.0105       50.6178    
  62  0.578012E-01  -2.85075      -5.10280       5.10280       47.6108       52.7136    
  63  0.700556     -0.355880     -0.637022      0.637022       52.7556       53.3927    
  64  0.502101     -0.688954      -1.23322       1.23322       49.9618       51.1950    
  65  0.730977E-02  -4.91854      -8.80413       8.80413       48.4295       57.2336    
  66  0.986830     -0.132576E-01 -0.237309E-01  0.237309E-01   50.8673       50.8910    
  67  0.264041      -1.33165      -2.38364       2.38364       52.2522       54.6359    
  68  0.184096      -1.69230      -3.02920       3.02920       48.3943       51.4235    
  69  0.683389     -0.380691     -0.681432      0.681432       52.7507       53.4322    
  70  0.934635     -0.675991E-01 -0.121002      0.121002       49.8768       49.9978    
loop,thermsimp(1:2)       34   2.63910       2.15882    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304         48.10          0.84          1.12         23.79          0.69          0.04         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    305         53.64          0.84          1.11         23.78          0.47          0.04         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       34
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       35
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      304     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775      -1.89336       1.89336       47.2142       49.1075    
   2  0.621479     -0.475653     -0.851414      0.851414       47.5679       48.4193    
   3  0.221273      -1.50836      -2.69994       2.69994       47.4622       50.1622    
   4  0.180626E-01  -4.01391      -7.18486       7.18486       47.2545       54.4394    
   5  0.216093      -1.53205      -2.74235       2.74235       47.1344       49.8768    
   6  0.351343      -1.04599      -1.87231       1.87231       47.7893       49.6616    
   7  0.360847      -1.01930      -1.82454       1.82454       47.7162       49.5408    
   8  0.439525     -0.822061      -1.47148       1.47148       47.8653       49.3368    
   9  0.910616E-01  -2.39622      -4.28920       4.28920       47.6468       51.9360    
  10  0.549745     -0.598300      -1.07095       1.07095       47.3977       48.4687    
  11  0.619825     -0.478318     -0.856183      0.856183       47.7303       48.5865    
  12  0.548169E-01  -2.90376      -5.19769       5.19769       47.5631       52.7608    
  13  0.947163     -0.542842E-01 -0.971681E-01  0.971681E-01   47.7233       47.8204    
  14  0.725459     -0.320951     -0.574498      0.574498       48.1302       48.7047    
  15  0.481613     -0.730615      -1.30779       1.30779       48.2631       49.5709    
  16  0.866286     -0.143540     -0.256936      0.256936       48.3863       48.6432    
  17  0.221988E-01  -3.80772      -6.81577       6.81577       48.5005       55.3162    
  18  0.980823     -0.193630E-01 -0.346596E-01  0.346596E-01   48.4120       48.4466    
  19  0.332549      -1.10097      -1.97072       1.97072       48.2589       50.2296    
  20  0.989035     -0.110256E-01 -0.197357E-01  0.197357E-01   47.7100       47.7297    
  21  0.364016      -1.01056      -1.80888       1.80888       48.6182       50.4271    
  22  0.861799     -0.148733     -0.266231      0.266231       47.6550       47.9212    
  23  0.622306     -0.474324     -0.849034      0.849034       48.4341       49.2831    
  24  0.575476     -0.552558     -0.989072      0.989072       48.7413       49.7304    
  25  0.205536      -1.58213      -2.83200       2.83200       48.0842       50.9162    
  26  0.124037      -2.08718      -3.73602       3.73602       48.7660       52.5020    
  27  0.467008     -0.761408      -1.36291       1.36291       49.0487       50.4116    
  28  0.273870      -1.29510      -2.31822       2.31822       48.2724       50.5906    
  29  0.842780     -0.171050     -0.306177      0.306177       48.3828       48.6889    
  30  0.709315     -0.343455     -0.614780      0.614780       48.3430       48.9578    
  31  0.677144     -0.389871     -0.697864      0.697864       48.7951       49.4930    
  32  0.656062     -0.421500     -0.754480      0.754480       48.7895       49.5440    
  33  0.721592     -0.326295     -0.584064      0.584064       47.5468       48.1308    
  34  0.120172      -2.11883      -3.79269       3.79269       48.0627       51.8554    
  35  0.832403     -0.183439     -0.328353      0.328353       47.8469       48.1753    
  36  0.607577     -0.498276     -0.891908      0.891908       49.5451       50.4371    
  37  0.169814      -1.77305      -3.17374       3.17374       48.1205       51.2943    
  38  0.578085     -0.548034     -0.980975      0.980975       49.8768       50.8578    
  39  0.201144      -1.60373      -2.87067       2.87067       48.2533       51.1240    
  40  0.922823     -0.803178E-01 -0.143768      0.143768       47.4953       47.6390    
  41  0.136644      -1.99038      -3.56275       3.56275       47.8839       51.4467    
  42  0.836366     -0.178689     -0.319850      0.319850       48.5919       48.9117    
  43  0.590669     -0.526499     -0.942426      0.942426       48.4284       49.3709    
  44  0.745946     -0.293102     -0.524649      0.524649       47.6508       48.1755    
  45  0.874736     -0.133833     -0.239559      0.239559       48.0046       48.2442    
  46  0.370232     -0.993625      -1.77858       1.77858       47.7850       49.5635    
  47  0.832293     -0.183570     -0.328589      0.328589       48.0552       48.3838    
  48  0.351566      -1.04536      -1.87118       1.87118       47.9426       49.8138    
  49  0.705870     -0.348324     -0.623496      0.623496       50.0105       50.6340    
  50  0.323816      -1.12758      -2.01836       2.01836       48.8766       50.8950    
  51  0.197269      -1.62319      -2.90549       2.90549       49.4574       52.3629    
  52  0.140686      -1.96123      -3.51057       3.51057       50.8673       54.3778    
  53  0.913651     -0.903067E-01 -0.161648      0.161648       49.5314       49.6930    
  54  0.515699     -0.662233      -1.18539       1.18539       48.2909       49.4763    
  55  0.217669      -1.52478      -2.72934       2.72934       49.9618       52.6912    
  56  0.234146      -1.45181      -2.59872       2.59872       49.1221       51.7208    
  57  0.948303     -0.530813E-01 -0.950148E-01  0.950148E-01   48.9001       48.9952    
  58  0.165683      -1.79768      -3.21782       3.21782       48.3943       51.6121    
  59  0.506186     -0.680851      -1.21871       1.21871       48.3547       49.5734    
  60  0.644381     -0.439466     -0.786638      0.786638       48.3105       49.0972    
  61  0.790610     -0.234950     -0.420557      0.420557       48.5836       49.0041    
  62  0.945427     -0.561185E-01 -0.100451      0.100451       47.6108       47.7112    
  63  0.195494      -1.63222      -2.92166       2.92166       49.2175       52.1392    
  64  0.478914     -0.736235      -1.31785       1.31785       52.7556       54.0735    
  65  0.926031     -0.768470E-01 -0.137555      0.137555       52.7507       52.8883    
  66  0.945712     -0.558175E-01 -0.999127E-01  0.999127E-01   48.2681       48.3680    
  67  0.892862     -0.113323     -0.202847      0.202847       47.1953       47.3981    
  68  0.766967     -0.265312     -0.474905      0.474905       52.2522       52.7271    
  69  0.720632     -0.327626     -0.586447      0.586447       48.2390       48.8255    
  70  0.404614     -0.904821      -1.61962       1.61962       48.1019       49.7215    
loop,thermsimp(1:2)       35   1.89336      0.851414    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306         47.91          0.84          1.12         23.80          0.52          0.05         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    307         69.80          0.84          1.12         23.78          0.55          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       35
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       36
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      306     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367      -2.60205       2.60205       47.1953       49.7973    
   2  0.607568     -0.498291     -0.891934      0.891934       47.4953       48.3872    
   3  0.905785     -0.989529E-01 -0.177125      0.177125       47.6108       47.7879    
   4  0.995938E-01  -2.30666      -4.12888       4.12888       47.7100       51.8389    
   5  0.851360     -0.160920     -0.288045      0.288045       47.7233       48.0113    
   6  0.730583     -0.313913     -0.561900      0.561900       47.6550       48.2169    
   7  0.426216     -0.852810      -1.52652       1.52652       47.5468       49.0733    
   8  0.285108      -1.25489      -2.24624       2.24624       47.8469       50.0931    
   9  0.839246     -0.175251     -0.313698      0.313698       47.6508       47.9645    
  10  0.217639      -1.52492      -2.72958       2.72958       48.0046       50.7342    
  11  0.183996E-02  -6.29801      -11.2734       11.2734       48.2681       59.5415    
  12  0.682631     -0.381801     -0.683419      0.683419       48.0552       48.7386    
  13  0.203596      -1.59162      -2.84898       2.84898       47.5679       50.4169    
  14  0.881164     -0.126512     -0.226455      0.226455       48.4120       48.6384    
  15  0.711431     -0.340477     -0.609449      0.609449       47.3977       48.0072    
  16  0.874326     -0.134302     -0.240399      0.240399       47.7303       47.9707    
  17  0.814222     -0.205523     -0.367883      0.367883       48.3863       48.7541    
  18  0.995668     -0.434126E-02 -0.777081E-02  0.777081E-02   48.3828       48.3905    
  19  0.693805     -0.365564     -0.654356      0.654356       48.1302       48.7845    
  20  0.958584     -0.422984E-01 -0.757136E-01  0.757136E-01   48.2390       48.3147    
  21  0.748022     -0.290323     -0.519675      0.519675       48.5919       49.1116    
  22  0.696703     -0.361396     -0.646895      0.646895       48.3430       48.9899    
  23  0.732990     -0.310623     -0.556012      0.556012       48.9001       49.4562    
  24  0.534749     -0.625958      -1.12046       1.12046       48.5836       49.7040    
  25  0.691641     -0.368688     -0.659947      0.659947       48.3105       48.9705    
  26  0.300458      -1.20245      -2.15237       2.15237       47.2142       49.3665    
  27  0.977116     -0.231502E-01 -0.414386E-01  0.414386E-01   48.4341       48.4755    
  28  0.542581     -0.611418      -1.09443       1.09443       47.8653       48.9598    
  29  0.266111      -1.32384      -2.36966       2.36966       48.4284       50.7981    
  30  0.692298     -0.367738     -0.658247      0.658247       48.2909       48.9491    
  31  0.664047     -0.409403     -0.732826      0.732826       48.7951       49.5280    
  32  0.542186     -0.612146      -1.09573       1.09573       47.7162       48.8120    
  33  0.362243      -1.01544      -1.81762       1.81762       48.7895       50.6071    
  34  0.578658     -0.547044     -0.979202      0.979202       47.7850       48.7642    
  35  0.489298     -0.714783      -1.27945       1.27945       48.2631       49.5425    
  36  0.617485     -0.482100     -0.862954      0.862954       48.3547       49.2176    
  37  0.368651     -0.997905      -1.78624       1.78624       47.7893       49.5755    
  38  0.198936      -1.61477      -2.89042       2.89042       49.5314       52.4218    
  39  0.505263     -0.682676      -1.22198       1.22198       48.1019       49.3239    
  40  0.983997     -0.161325E-01 -0.288769E-01  0.288769E-01   48.7413       48.7702    
  41  0.630553     -0.461159     -0.825468      0.825468       47.9426       48.7680    
  42  0.423821E-01  -3.16103      -5.65820       5.65820       47.1344       52.7926    
  43  0.488935     -0.715526      -1.28078       1.28078       47.4622       48.7430    
  44  0.402078     -0.911110      -1.63088       1.63088       48.2589       49.8898    
  45  0.380878     -0.965277      -1.72783       1.72783       49.0487       50.7766    
  46  0.260585E-01  -3.64741      -6.52882       6.52882       48.6182       55.1471    
  47  0.681660     -0.383224     -0.685966      0.685966       49.5451       50.2311    
  48  0.489074     -0.715241      -1.28027       1.28027       48.2724       49.5527    
  49  0.752363     -0.284536     -0.509317      0.509317       50.0105       50.5198    
  50  0.978934     -0.212911E-01 -0.381109E-01  0.381109E-01   49.8768       49.9150    
  51  0.297789      -1.21137      -2.16834       2.16834       48.8766       51.0450    
  52  0.551604     -0.594926      -1.06491       1.06491       48.0842       49.1491    
  53  0.546413     -0.604381      -1.08183       1.08183       48.2533       49.3351    
  54  0.831880     -0.184067     -0.329477      0.329477       48.1205       48.4500    
  55  0.873708     -0.135010     -0.241665      0.241665       47.8839       48.1256    
  56  0.169447      -1.77521      -3.17761       3.17761       48.3943       51.5719    
  57  0.434000     -0.834712      -1.49412       1.49412       49.1221       50.6162    
  58  0.506119     -0.680984      -1.21895       1.21895       48.0627       49.2816    
  59  0.168470      -1.78100      -3.18796       3.18796       47.6468       50.8348    
  60  0.820014     -0.198433     -0.355193      0.355193       49.2175       49.5727    
  61  0.973689     -0.266631E-01 -0.477265E-01  0.477265E-01   49.4574       49.5051    
  62  0.438579     -0.824215      -1.47534       1.47534       48.7660       50.2413    
  63  0.725095     -0.321452     -0.575396      0.575396       49.9618       50.5372    
  64  0.857338     -0.153923     -0.275520      0.275520       52.2522       52.5278    
  65  0.363865      -1.01097      -1.80963       1.80963       47.5631       49.3727    
  66  0.391136     -0.938701      -1.68026       1.68026       52.7507       54.4310    
  67  0.949080     -0.522625E-01 -0.935492E-01  0.935492E-01   52.7556       52.8492    
  68  0.791138     -0.234283     -0.419364      0.419364       50.8673       51.2866    
  69  0.675448     -0.392379     -0.702354      0.702354       47.2545       47.9569    
  70  0.955283     -0.457479E-01 -0.818882E-01  0.818882E-01   47.9120       47.9939    
loop,thermsimp(1:2)       36   2.60205      0.891934    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308         47.83          0.83          1.12         23.82          0.64          0.04         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    309         51.49          0.84          1.12         23.79          0.49          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       36
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       37
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      308     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432      -1.59028       1.59028       47.6108       49.2011    
   2  0.697205     -0.360676     -0.645606      0.645606       47.2545       47.9001    
   3  0.314648E-01  -3.45889      -6.19136       6.19136       47.6508       53.8422    
   4  0.857269     -0.154003     -0.275664      0.275664       47.7303       48.0060    
   5  0.652165     -0.427457     -0.765144      0.765144       47.9120       48.6772    
   6  0.510145     -0.673060      -1.20477       1.20477       47.3977       48.6025    
   7  0.175175      -1.74197      -3.11810       3.11810       47.7233       50.8414    
   8  0.373803     -0.984025      -1.76139       1.76139       47.8839       49.6453    
   9  0.514972     -0.663642      -1.18791       1.18791       47.6550       48.8429    
  10  0.548235     -0.601051      -1.07587       1.07587       48.2390       49.3149    
  11  0.541310     -0.613763      -1.09863       1.09863       47.4953       48.5939    
  12  0.734083     -0.309133     -0.553344      0.553344       48.3828       48.9361    
  13  0.422599     -0.861332      -1.54177       1.54177       48.1205       49.6623    
  14  0.287055      -1.24808      -2.23405       2.23405       48.4341       50.6681    
  15  0.885133     -0.122017     -0.218409      0.218409       48.4120       48.6304    
  16  0.391075     -0.938857      -1.68054       1.68054       48.0552       49.7358    
  17  0.473784     -0.747003      -1.33713       1.33713       47.4622       48.7994    
  18  0.691812     -0.368440     -0.659504      0.659504       48.3863       49.0458    
  19  0.644447     -0.439363     -0.786455      0.786455       47.7850       48.5714    
  20  0.805933     -0.215754     -0.386197      0.386197       47.9426       48.3288    
  21  0.393766     -0.931998      -1.66827       1.66827       48.7413       50.4096    
  22  0.907098E-01  -2.40009      -4.29613       4.29613       48.1302       52.4263    
  23  0.376515     -0.976796      -1.74845       1.74845       47.7162       49.4647    
  24  0.819190     -0.199439     -0.356994      0.356994       48.2909       48.6479    
  25  0.692438     -0.367536     -0.657885      0.657885       47.8653       48.5232    
  26  0.188370      -1.66935      -2.98811       2.98811       48.3105       51.2986    
  27  0.500532     -0.692083      -1.23882       1.23882       48.3430       49.5818    
  28  0.282311      -1.26475      -2.26388       2.26388       47.5468       49.8107    
  29  0.338061      -1.08453      -1.94129       1.94129       48.5919       50.5332    
  30  0.466208     -0.763123      -1.36598       1.36598       48.0842       49.4502    
  31  0.893084     -0.113075     -0.202403      0.202403       48.3547       48.5571    
  32  0.818806     -0.199908     -0.357834      0.357834       48.0627       48.4205    
  33  0.585066     -0.536031     -0.959490      0.959490       48.1019       49.0614    
  34  0.527412     -0.639774      -1.14519       1.14519       48.2533       49.3985    
  35  0.994295     -0.572143E-02 -0.102413E-01  0.102413E-01   47.2142       47.2244    
  36  0.739278     -0.302082     -0.540723      0.540723       47.5631       48.1038    
  37  0.230995      -1.46536      -2.62297       2.62297       48.9001       51.5231    
  38  0.414929     -0.879648      -1.57456       1.57456       49.4574       51.0320    
  39  0.378446     -0.971682      -1.73930       1.73930       48.7951       50.5344    
  40  0.368620     -0.997990      -1.78639       1.78639       48.2631       50.0495    
  41  0.301312      -1.19961      -2.14728       2.14728       48.2724       50.4197    
  42  0.105882E-01  -4.54801      -8.14089       8.14089       49.2175       57.3584    
  43  0.481885     -0.730049      -1.30678       1.30678       47.7893       49.0960    
  44  0.446716     -0.805833      -1.44243       1.44243       48.5836       50.0260    
  45  0.482098     -0.729608      -1.30599       1.30599       47.1953       48.5013    
  46  0.278892      -1.27693      -2.28569       2.28569       48.2589       50.5446    
  47  0.756484     -0.279074     -0.499540      0.499540       49.8768       50.3764    
  48  0.662766     -0.411334     -0.736283      0.736283       47.8469       48.5832    
  49  0.433861E-01  -3.13762      -5.61629       5.61629       49.5451       55.1614    
  50  0.825649E-02  -4.79676      -8.58613       8.58613       48.7660       57.3521    
  51  0.476679     -0.740911      -1.32622       1.32622       47.5679       48.8942    
  52  0.128614      -2.05094      -3.67115       3.67115       50.0105       53.6816    
  53  0.609086     -0.495797     -0.887470      0.887470       49.9618       50.8493    
  54  0.484878E-01  -3.02644      -5.41730       5.41730       48.7895       54.2068    
  55  0.287383E-02  -5.85211      -10.4752       10.4752       49.1221       59.5973    
  56  0.699724     -0.357070     -0.639151      0.639151       48.0046       48.6437    
  57  0.407524     -0.897655      -1.60679       1.60679       49.0487       50.6555    
  58  0.530107     -0.634677      -1.13606       1.13606       48.4284       49.5645    
  59  0.589469E-01  -2.83112      -5.06767       5.06767       47.6468       52.7145    
  60  0.357066E-01  -3.33242      -5.96499       5.96499       48.8766       54.8416    
  61  0.726760     -0.319159     -0.571291      0.571291       50.8673       51.4386    
  62  0.486103     -0.721334      -1.29118       1.29118       48.3943       49.6855    
  63  0.212811      -1.54735      -2.76974       2.76974       47.7100       50.4798    
  64  0.264725      -1.32906      -2.37901       2.37901       49.5314       51.9104    
  65  0.162129      -1.81936      -3.25664       3.25664       52.2522       55.5089    
  66  0.148935      -1.90425      -3.40858       3.40858       47.1344       50.5430    
  67  0.271622      -1.30334      -2.33297       2.33297       52.7556       55.0886    
  68  0.965736     -0.348643E-01 -0.624067E-01  0.624067E-01   52.7507       52.8131    
  69  0.659377     -0.416460     -0.745458      0.745458       48.6182       49.3637    
  70  0.569807     -0.562457      -1.00679       1.00679       47.8350       48.8418    
loop,thermsimp(1:2)       37   1.59028      0.645606    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310         52.53          0.84          1.12         23.78          0.56          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.53
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       37
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       38
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      309     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401      -1.60097       1.60097       47.2142       48.8151    
   2  0.259700      -1.34823      -2.41331       2.41331       47.2545       49.6678    
   3  0.681144E-01  -2.68657      -4.80892       4.80892       47.7303       52.5393    
   4  0.158140      -1.84427      -3.30122       3.30122       47.5631       50.8643    
   5  0.497681     -0.697796      -1.24905       1.24905       47.9426       49.1916    
   6  0.800218     -0.222871     -0.398936      0.398936       48.0627       48.4616    
   7  0.831967     -0.183962     -0.329290      0.329290       47.1953       47.5246    
   8  0.707345     -0.346237     -0.619759      0.619759       47.8653       48.4851    
   9  0.265927      -1.32454      -2.37090       2.37090       48.3547       50.7256    
  10  0.659046     -0.416962     -0.746356      0.746356       47.7850       48.5313    
  11  0.654587E-01  -2.72634      -4.88011       4.88011       47.8469       52.7270    
  12  0.223329      -1.49911      -2.68339       2.68339       47.4953       50.1787    
  13  0.996019     -0.398855E-02 -0.713945E-02  0.713945E-02   47.3977       47.4049    
  14  0.553910     -0.590753      -1.05744       1.05744       48.4120       49.4694    
  15  0.218863      -1.51931      -2.71955       2.71955       48.0046       50.7241    
  16  0.414020     -0.881841      -1.57848       1.57848       48.2909       49.8694    
  17  0.229117      -1.47352      -2.63759       2.63759       47.9120       50.5496    
  18  0.341764      -1.07363      -1.92179       1.92179       47.4622       49.3840    
  19  0.357052      -1.02987      -1.84346       1.84346       47.8350       49.6784    
  20  0.780779     -0.247463     -0.442956      0.442956       47.6550       48.0979    
  21  0.382234     -0.961721      -1.72147       1.72147       47.5679       49.2894    
  22  0.123899      -2.08829      -3.73802       3.73802       48.3828       52.1208    
  23  0.393312     -0.933152      -1.67033       1.67033       48.3863       50.0566    
  24  0.481741     -0.730349      -1.30732       1.30732       48.1019       49.4092    
  25  0.120001      -2.12026      -3.79523       3.79523       47.7893       51.5845    
  26  0.506023     -0.681173      -1.21929       1.21929       47.6108       48.8301    
  27  0.891157     -0.115235     -0.206270      0.206270       48.2390       48.4453    
  28  0.584674     -0.536701     -0.960689      0.960689       48.6182       49.5789    
  29  0.313196      -1.16093      -2.07804       2.07804       48.2533       50.3313    
  30  0.507340     -0.678574      -1.21464       1.21464       48.0842       49.2989    
  31  0.985030     -0.150835E-01 -0.269994E-01  0.269994E-01   47.7162       47.7432    
  32  0.186570      -1.67895      -3.00530       3.00530       48.4284       51.4337    
  33  0.992622     -0.740493E-02 -0.132547E-01  0.132547E-01   48.3430       48.3563    
  34  0.344152      -1.06667      -1.90933       1.90933       47.8839       49.7933    
  35  0.327214      -1.11714      -1.99967       1.99967       48.1205       50.1202    
  36  0.722008     -0.325719     -0.583034      0.583034       48.3943       48.9773    
  37  0.471441     -0.751960      -1.34600       1.34600       48.0552       49.4012    
  38  0.483594     -0.726510      -1.30044       1.30044       47.5468       48.8472    
  39  0.799410     -0.223881     -0.400744      0.400744       48.5836       48.9843    
  40  0.864070     -0.146101     -0.261519      0.261519       48.2631       48.5246    
  41  0.326419      -1.11957      -2.00402       2.00402       49.8768       51.8809    
  42  0.970166E-01  -2.33287      -4.17581       4.17581       48.7413       52.9171    
  43  0.822479     -0.195432     -0.349822      0.349822       48.2724       48.6222    
  44  0.719858     -0.328701     -0.588371      0.588371       47.7100       48.2984    
  45  0.359763      -1.02231      -1.82992       1.82992       48.5919       50.4218    
  46  0.879180     -0.128765     -0.230489      0.230489       48.7951       49.0256    
  47  0.152514      -1.88050      -3.36607       3.36607       47.1344       50.5005    
  48  0.379430     -0.969085      -1.73465       1.73465       48.2589       49.9935    
  49  0.444703     -0.810349      -1.45052       1.45052       49.0487       50.4992    
  50  0.240485      -1.42510      -2.55091       2.55091       48.4341       50.9850    
  51  0.682479     -0.382024     -0.683818      0.683818       47.7233       48.4071    
  52  0.989508     -0.105479E-01 -0.188806E-01  0.188806E-01   49.9618       49.9807    
  53  0.626329E-01  -2.77046      -4.95910       4.95910       49.4574       54.4165    
  54  0.217806      -1.52415      -2.72821       2.72821       48.3105       51.0387    
  55  0.297102      -1.21368      -2.17247       2.17247       50.8673       53.0397    
  56  0.447982     -0.803002      -1.43736       1.43736       48.9001       50.3375    
  57  0.343456      -1.06870      -1.91295       1.91295       49.5314       51.4443    
  58  0.737340     -0.304706     -0.545419      0.545419       48.1302       48.6756    
  59  0.863080     -0.147248     -0.263571      0.263571       47.6468       47.9104    
  60  0.463462     -0.769030      -1.37655       1.37655       52.7507       54.1273    
  61  0.120067      -2.11970      -3.79424       3.79424       50.0105       53.8047    
  62  0.758415     -0.276525     -0.494976      0.494976       47.6508       48.1458    
  63  0.356867      -1.03039      -1.84439       1.84439       48.7895       50.6339    
  64  0.811695     -0.208631     -0.373447      0.373447       48.8766       49.2501    
  65  0.712430     -0.339074     -0.606938      0.606938       52.7556       53.3626    
  66  0.343671      -1.06807      -1.91183       1.91183       49.5451       51.4570    
  67  0.455065     -0.787315      -1.40928       1.40928       52.2522       53.6615    
  68  0.462404     -0.771317      -1.38065       1.38065       48.7660       50.1466    
  69  0.197402      -1.62251      -2.90428       2.90428       49.2175       52.1218    
  70  0.870222     -0.139007     -0.248821      0.248821       52.5290       52.7778    
loop,thermsimp(1:2)       38   1.60097       2.41331    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311         46.94          0.83          1.11         23.77          0.50          0.06         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    312         48.42          0.82          1.12         23.73          0.55          0.04         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       38
neval is:      311
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       39
neval is:      311


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      311     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -3.72119       3.72119       47.3977       51.1189    
   2  0.274837      -1.29158      -2.31190       2.31190       47.1953       49.5072    
   3  0.305931E-01  -3.48698      -6.24165       6.24165       47.7162       53.9579    
   4  0.929157     -0.734779E-01 -0.131525      0.131525       47.6468       47.7783    
   5  0.995956     -0.405208E-02 -0.725317E-02  0.725317E-02   47.6550       47.6622    
   6  0.904971     -0.998521E-01 -0.178734      0.178734       47.6508       47.8296    
   7  0.189758      -1.66200      -2.97497       2.97497       47.7100       50.6850    
   8  0.134931      -2.00299      -3.58533       3.58533       48.3430       51.9283    
   9  0.302412      -1.19596      -2.14076       2.14076       47.7233       49.8640    
  10  0.389155     -0.943777      -1.68935       1.68935       48.2390       49.9284    
  11  0.947428     -0.540040E-01 -0.966665E-01  0.966665E-01   48.0627       48.1593    
  12  0.338357      -1.08365      -1.93973       1.93973       47.8653       49.8051    
  13  0.937476     -0.645645E-01 -0.115570      0.115570       48.2631       48.3787    
  14  0.399493     -0.917560      -1.64242       1.64242       47.7850       49.4274    
  15  0.527586     -0.639444      -1.14460       1.14460       48.2724       49.4170    
  16  0.297740      -1.21153      -2.16863       2.16863       48.1302       50.2988    
  17  0.557978     -0.583436      -1.04434       1.04434       47.2142       48.2585    
  18  0.267521      -1.31856      -2.36020       2.36020       47.6108       49.9710    
  19  0.637637     -0.449986     -0.805469      0.805469       47.5468       48.3522    
  20  0.838569     -0.176059     -0.315143      0.315143       48.3943       48.7094    
  21  0.132199E-01  -4.32603      -7.74354       7.74354       48.5836       56.3271    
  22  0.745606     -0.293557     -0.525464      0.525464       48.7951       49.3206    
  23  0.334504      -1.09511      -1.96023       1.96023       47.9426       49.9028    
  24  0.118852      -2.12987      -3.81245       3.81245       48.8766       52.6891    
  25  0.319911      -1.13971      -2.04007       2.04007       47.5679       49.6080    
  26  0.638302E-01  -2.75153      -4.92520       4.92520       48.0842       53.0094    
  27  0.173204      -1.75329      -3.13836       3.13836       47.4622       50.6006    
  28  0.885640     -0.121444     -0.217384      0.217384       48.0552       48.2726    
  29  0.710758     -0.341423     -0.611143      0.611143       48.1019       48.7130    
  30  0.938919     -0.630265E-01 -0.112817      0.112817       48.4120       48.5248    
  31  0.217740      -1.52445      -2.72875       2.72875       48.6182       51.3470    
  32  0.130036      -2.03994      -3.65147       3.65147       47.2545       50.9060    
  33  0.331090      -1.10537      -1.97859       1.97859       47.8350       49.8136    
  34  0.453525E-01  -3.09329      -5.53695       5.53695       47.8839       53.4209    
  35  0.494600     -0.704006      -1.26016       1.26016       48.2909       49.5510    
  36  0.488771E-01  -3.01845      -5.40298       5.40298       49.9618       55.3648    
  37  0.262916E-01  -3.63850      -6.51288       6.51288       48.2589       54.7718    
  38  0.975293     -0.250177E-01 -0.447814E-01  0.447814E-01   48.3863       48.4310    
  39  0.521026     -0.651955      -1.16699       1.16699       48.1205       49.2875    
  40  0.210960      -1.55609      -2.78538       2.78538       48.7660       51.5514    
  41  0.475166E-02  -5.34926      -9.57511       9.57511       47.4953       57.0704    
  42  0.675859     -0.391771     -0.701265      0.701265       48.2533       48.9546    
  43  0.691418     -0.369011     -0.660525      0.660525       48.9001       49.5607    
  44  0.425152     -0.855309      -1.53099       1.53099       48.5919       50.1229    
  45  0.141313      -1.95678      -3.50260       3.50260       49.0487       52.5513    
  46  0.902170     -0.102952     -0.184283      0.184283       47.1344       47.3187    
  47  0.794321     -0.230268     -0.412177      0.412177       47.9120       48.3242    
  48  0.685387     -0.377772     -0.676208      0.676208       48.7895       49.4657    
  49  0.273223      -1.29747      -2.32245       2.32245       48.0046       50.3270    
  50  0.784111     -0.243205     -0.435334      0.435334       48.3547       48.7900    
  51  0.824524     -0.192949     -0.345377      0.345377       47.5631       47.9085    
  52  0.855082     -0.156558     -0.280237      0.280237       48.4341       48.7143    
  53  0.744692E-01  -2.59737      -4.64926       4.64926       48.3105       52.9598    
  54  0.294857E-01  -3.52385      -6.30765       6.30765       48.4284       54.7361    
  55  0.225962      -1.48739      -2.66241       2.66241       49.5314       52.1938    
  56  0.211073      -1.55555      -2.78441       2.78441       49.5451       52.3296    
  57  0.525673E-01  -2.94566      -5.27270       5.27270       47.7893       53.0620    
  58  0.855455     -0.156122     -0.279456      0.279456       49.8768       50.1563    
  59  0.169262E-01  -4.07890      -7.30117       7.30117       48.3828       55.6839    
  60  0.578360     -0.547559     -0.980123      0.980123       49.2175       50.1977    
  61  0.753083     -0.283580     -0.507606      0.507606       47.7303       48.2379    
  62  0.942983     -0.587068E-01 -0.105084      0.105084       47.8469       47.9520    
  63  0.164299      -1.80607      -3.23284       3.23284       52.5290       55.7619    
  64  0.964876     -0.357557E-01 -0.640022E-01  0.640022E-01   48.7413       48.8053    
  65  0.905245E-01  -2.40213      -4.29979       4.29979       50.8673       55.1671    
  66  0.812887     -0.207163     -0.370820      0.370820       52.7556       53.1265    
  67  0.702547     -0.353043     -0.631942      0.631942       52.2522       52.8842    
  68  0.229959      -1.46986      -2.63102       2.63102       50.0105       52.6415    
  69  0.880507     -0.127257     -0.227788      0.227788       52.7507       52.9785    
  70  0.528445     -0.637816      -1.14168       1.14168       46.9398       48.0815    
loop,thermsimp(1:2)       39   3.72119       2.31190    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    313         53.49          0.83          1.12         23.82          0.46          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       39
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       40
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      312     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385      -1.36824       1.36824       47.1344       48.5027    
   2  0.310178      -1.17061      -2.09537       2.09537       47.6550       49.7503    
   3  0.883713     -0.123623     -0.221284      0.221284       47.6468       47.8681    
   4  0.641465     -0.444001     -0.794757      0.794757       47.6508       48.4456    
   5  0.458576E-01  -3.08222      -5.51713       5.51713       47.5631       53.0802    
   6  0.611421     -0.491970     -0.880620      0.880620       47.8469       48.7275    
   7  0.292603      -1.22894      -2.19978       2.19978       46.9398       49.1396    
   8  0.180818      -1.71026      -3.06135       3.06135       48.0627       51.1240    
   9  0.490648     -0.712028      -1.27452       1.27452       47.7303       49.0049    
  10  0.538601     -0.618781      -1.10761       1.10761       47.2142       48.3218    
  11  0.451209     -0.795824      -1.42451       1.42451       48.0552       49.4797    
  12  0.610260     -0.493870     -0.884021      0.884021       47.9120       48.7961    
  13  0.425113     -0.855401      -1.53116       1.53116       47.5468       49.0779    
  14  0.647858     -0.434084     -0.777005      0.777005       48.2631       49.0401    
  15  0.394937     -0.929029      -1.66295       1.66295       48.3863       50.0492    
  16  0.452279E-01  -3.09604      -5.54188       5.54188       48.4120       53.9538    
  17  0.954905     -0.461437E-01 -0.825966E-01  0.825966E-01   48.3943       48.4769    
  18  0.362548      -1.01460      -1.81612       1.81612       48.1019       49.9180    
  19  0.808078     -0.213097     -0.381441      0.381441       48.4341       48.8155    
  20  0.219348      -1.51709      -2.71558       2.71558       48.3547       51.0703    
  21  0.206981      -1.57513      -2.81946       2.81946       48.7413       51.5608    
  22  0.719933     -0.328597     -0.588185      0.588185       48.2533       48.8415    
  23  0.950238     -0.510432E-01 -0.913667E-01  0.913667E-01   48.1205       48.2119    
  24  0.845993     -0.167244     -0.299364      0.299364       48.7951       49.0945    
  25  0.157926      -1.84563      -3.30365       3.30365       48.2724       51.5761    
  26  0.430020     -0.843924      -1.51061       1.51061       47.7850       49.2956    
  27  0.624159     -0.471350     -0.843710      0.843710       48.7895       49.6332    
  28  0.355386      -1.03455      -1.85183       1.85183       47.1953       49.0471    
  29  0.297353      -1.21284      -2.17096       2.17096       48.2909       50.4618    
  30  0.185476      -1.68483      -3.01582       3.01582       48.9001       51.9160    
  31  0.406569     -0.900002      -1.61099       1.61099       47.5679       49.1789    
  32  0.147052      -1.91697      -3.43135       3.43135       47.8653       51.2967    
  33  0.205955      -1.58010      -2.82835       2.82835       47.8350       50.6633    
  34  0.383503     -0.958409      -1.71554       1.71554       47.7233       49.4388    
  35  0.514677E-01  -2.96680      -5.31054       5.31054       47.9426       53.2531    
  36  0.499194     -0.694760      -1.24361       1.24361       48.2390       49.4826    
  37  0.103172E-01  -4.57394      -8.18730       8.18730       47.6108       55.7981    
  38  0.470163     -0.754676      -1.35086       1.35086       48.5919       49.9427    
  39  0.983694     -0.164404E-01 -0.294280E-01  0.294280E-01   49.8768       49.9063    
  40  0.880425     -0.127351     -0.227956      0.227956       49.2175       49.4455    
  41  0.969759     -0.307072E-01 -0.549655E-01  0.549655E-01   48.1302       48.1851    
  42  0.761826E-01  -2.57462      -4.60854       4.60854       48.0046       52.6131    
  43  0.124427      -2.08404      -3.73040       3.73040       47.4622       51.1926    
  44  0.997702     -0.230032E-02 -0.411754E-02  0.411754E-02   47.7100       47.7141    
  45  0.213939      -1.54206      -2.76027       2.76027       47.2545       50.0148    
  46  0.471369     -0.752113      -1.34627       1.34627       47.3977       48.7440    
  47  0.421561E-01  -3.16638      -5.66778       5.66778       48.6182       54.2860    
  48  0.693092     -0.366592     -0.656195      0.656195       48.7660       49.4222    
  49  0.375157     -0.980409      -1.75492       1.75492       48.3430       50.0979    
  50  0.285659      -1.25296      -2.24278       2.24278       49.5314       51.7742    
  51  0.338951      -1.08190      -1.93659       1.93659       49.5451       51.4817    
  52  0.930127E-01  -2.37502      -4.25126       4.25126       49.0487       53.3000    
  53  0.840878     -0.173309     -0.310221      0.310221       50.0105       50.3207    
  54  0.384591     -0.955575      -1.71047       1.71047       48.8766       50.5871    
  55  0.212856      -1.54714      -2.76936       2.76936       52.2522       55.0216    
  56  0.878356     -0.129704     -0.232168      0.232168       48.3105       48.5427    
  57  0.623236E-01  -2.77542      -4.96796       4.96796       52.7507       57.7187    
  58  0.374221E-02  -5.58808      -10.0026       10.0026       48.0842       58.0868    
  59  0.851985     -0.160186     -0.286732      0.286732       47.7893       48.0760    
  60  0.779613     -0.248958     -0.445631      0.445631       52.7556       53.2013    
  61  0.991658     -0.837700E-02 -0.149947E-01  0.149947E-01   47.8839       47.8989    
  62  0.425290     -0.854985      -1.53041       1.53041       47.7162       49.2466    
  63  0.613403     -0.488733     -0.874827      0.874827       48.4284       49.3033    
  64  0.487347E-01  -3.02136      -5.40820       5.40820       48.2589       53.6671    
  65  0.267732      -1.31777      -2.35879       2.35879       50.8673       53.2261    
  66  0.159530      -1.83552      -3.28556       3.28556       49.9618       53.2474    
  67  0.312803E-01  -3.46477      -6.20189       6.20189       48.3828       54.5846    
  68  0.956405     -0.445737E-01 -0.797863E-01  0.797863E-01   52.5290       52.6088    
  69  0.683324     -0.380786     -0.681602      0.681602       48.5836       49.2652    
  70  0.482307     -0.729174      -1.30521       1.30521       53.4897       54.7949    
loop,thermsimp(1:2)       40   1.36824       2.09537    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314         47.50          0.84          1.11         23.77          0.51          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    315         48.07          0.84          1.10         23.88          0.77          0.04         26.63
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       40
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       41
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      314     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501      -2.62235       2.62235       47.7100       50.3324    
   2  0.984723     -0.153953E-01 -0.275575E-01  0.275575E-01   47.6468       47.6744    
   3  0.689569     -0.371688     -0.665317      0.665317       47.8839       48.5492    
   4  0.539532     -0.617054      -1.10452       1.10452       47.7893       48.8938    
   5  0.103859      -2.26472      -4.05383       4.05383       48.1302       52.1840    
   6  0.403261     -0.908171      -1.62562       1.62562       48.1205       49.7461    
   7  0.545138     -0.606716      -1.08601       1.08601       47.2142       48.3002    
   8  0.211198      -1.55496      -2.78336       2.78336       47.6508       50.4342    
   9  0.533123     -0.629004      -1.12591       1.12591       48.3943       49.5202    
  10  0.891214     -0.115171     -0.206154      0.206154       47.1344       47.3406    
  11  0.604806     -0.502847     -0.900090      0.900090       48.3105       49.2106    
  12  0.176166      -1.73633      -3.10801       3.10801       47.8469       50.9549    
  13  0.733693     -0.309664     -0.554295      0.554295       47.3977       47.9520    
  14  0.248504      -1.39230      -2.49220       2.49220       47.9120       50.4042    
  15  0.183808      -1.69387      -3.03200       3.03200       48.4341       51.4660    
  16  0.308674E-02  -5.78064      -10.3473       10.3473       48.2533       58.6006    
  17  0.651025     -0.429207     -0.768275      0.768275       47.7303       48.4986    
  18  0.864353     -0.145775     -0.260935      0.260935       48.2631       48.5240    
  19  0.547352     -0.602664      -1.07876       1.07876       47.1953       48.2740    
  20  0.631248     -0.460057     -0.823497      0.823497       47.5468       48.3703    
  21  0.344368E-01  -3.36863      -6.02981       6.02981       48.7951       54.8250    
  22  0.876828     -0.131444     -0.235284      0.235284       46.9398       47.1751    
  23  0.884538     -0.122690     -0.219614      0.219614       47.5679       47.7875    
  24  0.926808     -0.760084E-01 -0.136054      0.136054       47.7162       47.8523    
  25  0.823462     -0.194237     -0.347683      0.347683       48.5836       48.9313    
  26  0.852580     -0.159489     -0.285483      0.285483       47.7850       48.0704    
  27  0.577707     -0.548689     -0.982146      0.982146       48.4284       49.4106    
  28  0.510093     -0.673163      -1.20495       1.20495       48.7660       49.9709    
  29  0.890288     -0.116210     -0.208014      0.208014       47.7233       47.9313    
  30  0.304875      -1.18785      -2.12624       2.12624       49.2175       51.3438    
  31  0.152164      -1.88279      -3.37018       3.37018       48.0552       51.4254    
  32  0.718687     -0.330329     -0.591286      0.591286       48.2390       48.8303    
  33  0.488128     -0.717177      -1.28374       1.28374       48.7895       50.0733    
  34  0.373052     -0.986038      -1.76500       1.76500       47.6550       49.4200    
  35  0.247351      -1.39695      -2.50052       2.50052       49.8768       52.3774    
  36  0.532108     -0.630909      -1.12932       1.12932       48.1019       49.2312    
  37  0.828879E-02  -4.79285      -8.57914       8.57914       48.5919       57.1710    
  38  0.168277      -1.78214      -3.19001       3.19001       47.2545       50.4445    
  39  0.253216      -1.37351      -2.45857       2.45857       48.3863       50.8448    
  40  0.458588     -0.779602      -1.39548       1.39548       48.3430       49.7385    
  41  0.725692     -0.320630     -0.573923      0.573923       50.0105       50.5844    
  42  0.283543      -1.26039      -2.25609       2.25609       48.2909       50.5470    
  43  0.798055     -0.225578     -0.403782      0.403782       48.8766       49.2804    
  44  0.805371     -0.216453     -0.387448      0.387448       47.8350       48.2224    
  45  0.580747     -0.543441     -0.972752      0.972752       48.3547       49.3274    
  46  0.581119     -0.542799     -0.971604      0.971604       48.0627       49.0343    
  47  0.305196      -1.18680      -2.12436       2.12436       47.4622       49.5866    
  48  0.905702     -0.990454E-01 -0.177290      0.177290       47.8653       48.0426    
  49  0.265633E-01  -3.62822      -6.49448       6.49448       49.5451       56.0396    
  50  0.114529E-01  -4.46951      -8.00037       8.00037       48.7413       56.7417    
  51  0.990634     -0.941033E-02 -0.168444E-01  0.168444E-01   48.2724       48.2893    
  52  0.609564     -0.495011     -0.886064      0.886064       49.5314       50.4174    
  53  0.380905     -0.965204      -1.72770       1.72770       48.9001       50.6279    
  54  0.902244     -0.102870     -0.184137      0.184137       52.5290       52.7132    
  55  0.841859     -0.172142     -0.308133      0.308133       48.0046       48.3127    
  56  0.954561     -0.465036E-01 -0.832408E-01  0.832408E-01   47.5631       47.6463    
  57  0.637314     -0.450492     -0.806376      0.806376       52.7556       53.5620    
  58  0.224695      -1.49301      -2.67247       2.67247       50.8673       53.5397    
  59  0.537548     -0.620738      -1.11111       1.11111       49.9618       51.0729    
  60  0.271295      -1.30455      -2.33513       2.33513       47.9426       50.2777    
  61  0.524725E-02  -5.25005      -9.39753       9.39753       49.0487       58.4462    
  62  0.194770      -1.63594      -2.92830       2.92830       48.2589       51.1872    
  63  0.833225E-01  -2.48504      -4.44818       4.44818       48.4120       52.8601    
  64  0.195984      -1.62972      -2.91718       2.91718       48.6182       51.5354    
  65  0.232752      -1.45778      -2.60941       2.60941       48.3828       50.9922    
  66  0.101893      -2.28383      -4.08803       4.08803       53.4897       57.5778    
  67  0.955311     -0.457184E-01 -0.818354E-01  0.818354E-01   52.2522       52.3341    
  68  0.791211     -0.234190     -0.419197      0.419197       47.6108       48.0300    
  69  0.617608     -0.481901     -0.862598      0.862598       52.7507       53.6133    
  70  0.792156     -0.232997     -0.417062      0.417062       47.5014       47.9185    
loop,thermsimp(1:2)       41   2.62235      0.275575E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316         52.21          0.84          1.11         23.74          0.59          0.04         26.32
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       41
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       42
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      315     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -5.57915       5.57915       46.9398       52.5190    
   2  0.196215      -1.62854      -2.91507       2.91507       47.1344       50.0495    
   3  0.501152     -0.690846      -1.23661       1.23661       47.5631       48.7997    
   4  0.288339      -1.24362      -2.22606       2.22606       47.6468       49.8729    
   5  0.773132     -0.257306     -0.460574      0.460574       47.5679       48.0285    
   6  0.417683     -0.873033      -1.56272       1.56272       47.7162       49.2789    
   7  0.229479      -1.47195      -2.63476       2.63476       47.5014       50.1362    
   8  0.964123     -0.365367E-01 -0.654002E-01  0.654002E-01   47.7233       47.7887    
   9  0.263782      -1.33263      -2.38540       2.38540       47.3977       49.7831    
  10  0.102960      -2.27342      -4.06939       4.06939       47.6108       51.6802    
  11  0.828790     -0.187788     -0.336139      0.336139       47.8653       48.2015    
  12  0.738697     -0.302868     -0.542129      0.542129       47.7850       48.3271    
  13  0.458595     -0.779589      -1.39545       1.39545       47.8350       49.2304    
  14  0.905176     -0.996260E-01 -0.178329      0.178329       47.1953       47.3736    
  15  0.147067      -1.91687      -3.43117       3.43117       48.2724       51.7036    
  16  0.142365      -1.94936      -3.48933       3.48933       47.2142       50.7035    
  17  0.483147     -0.727435      -1.30210       1.30210       48.0046       49.3067    
  18  0.640417     -0.445636     -0.797683      0.797683       47.5468       48.3445    
  19  0.719349     -0.329408     -0.589637      0.589637       47.7303       48.3200    
  20  0.714234     -0.336545     -0.602411      0.602411       48.2631       48.8655    
  21  0.825507     -0.191757     -0.343243      0.343243       47.8839       48.2272    
  22  0.155188      -1.86312      -3.33495       3.33495       48.2390       51.5740    
  23  0.248874      -1.39081      -2.48953       2.48953       47.7893       50.2788    
  24  0.107953      -2.22606      -3.98462       3.98462       48.5836       52.5682    
  25  0.349169      -1.05220      -1.88342       1.88342       48.0627       49.9461    
  26  0.967311     -0.332356E-01 -0.594913E-01  0.594913E-01   48.3105       48.3700    
  27  0.519506     -0.654877      -1.17222       1.17222       48.1019       49.2741    
  28  0.462662     -0.770758      -1.37965       1.37965       48.8766       50.2563    
  29  0.811438     -0.208948     -0.374014      0.374014       48.3547       48.7287    
  30  0.394710E-01  -3.23219      -5.78558       5.78558       48.4284       54.2140    
  31  0.482930     -0.727884      -1.30290       1.30290       47.6550       48.9579    
  32  0.520883     -0.652231      -1.16748       1.16748       48.3943       49.5618    
  33  0.980978E-01  -2.32179      -4.15598       4.15598       47.4622       51.6182    
  34  0.626549     -0.467529     -0.836871      0.836871       48.3430       49.1799    
  35  0.618402     -0.480616     -0.860297      0.860297       48.1205       48.9808    
  36  0.681438     -0.383550     -0.686549      0.686549       48.7660       49.4525    
  37  0.816820     -0.202336     -0.362179      0.362179       48.7895       49.1517    
  38  0.578487     -0.547340     -0.979731      0.979731       47.9426       48.9223    
  39  0.349734      -1.05058      -1.88053       1.88053       47.7100       49.5905    
  40  0.945672     -0.558596E-01 -0.999879E-01  0.999879E-01   47.9120       48.0120    
  41  0.767680     -0.264382     -0.473240      0.473240       49.5314       50.0046    
  42  0.122064      -2.10321      -3.76472       3.76472       47.6508       51.4156    
  43  0.211623      -1.55295      -2.77976       2.77976       47.2545       50.0343    
  44  0.969992E-01  -2.33305      -4.17614       4.17614       48.2909       52.4670    
  45  0.877482     -0.130699     -0.233950      0.233950       50.0105       50.2444    
  46  0.448991     -0.800752      -1.43334       1.43334       48.9001       50.3335    
  47  0.833113     -0.182586     -0.326827      0.326827       48.3863       48.7131    
  48  0.691765     -0.368508     -0.659625      0.659625       47.8469       48.5065    
  49  0.310664      -1.16904      -2.09257       2.09257       48.3828       50.4753    
  50  0.422283     -0.862080      -1.54311       1.54311       49.9618       51.5049    
  51  0.382184E-01  -3.26444      -5.84330       5.84330       48.2589       54.1022    
  52  0.679614E-01  -2.68882      -4.81295       4.81295       49.2175       54.0305    
  53  0.580404     -0.544031     -0.973809      0.973809       48.0552       49.0290    
  54  0.887981     -0.118805     -0.212659      0.212659       48.4341       48.6467    
  55  0.540749     -0.614799      -1.10048       1.10048       48.6182       49.7187    
  56  0.749712     -0.288066     -0.515634      0.515634       48.1302       48.6458    
  57  0.428385     -0.847733      -1.51743       1.51743       52.2522       53.7697    
  58  0.271790      -1.30272      -2.33186       2.33186       49.8768       52.2087    
  59  0.317865      -1.14613      -2.05156       2.05156       52.5290       54.5806    
  60  0.855566     -0.155992     -0.279224      0.279224       48.4120       48.6912    
  61  0.153120      -1.87653      -3.35897       3.35897       50.8673       54.2262    
  62  0.507684     -0.677896      -1.21343       1.21343       52.7556       53.9691    
  63  0.270723      -1.30666      -2.33890       2.33890       52.7507       55.0896    
  64  0.721736     -0.326096     -0.583707      0.583707       48.7951       49.3789    
  65  0.707323     -0.346268     -0.619815      0.619815       49.5451       50.1650    
  66  0.420146     -0.867152      -1.55219       1.55219       48.7413       50.2935    
  67  0.782833     -0.244836     -0.438253      0.438253       48.5919       49.0301    
  68  0.835529     -0.179691     -0.321644      0.321644       53.4897       53.8114    
  69  0.267477      -1.31872      -2.36050       2.36050       49.0487       51.4092    
  70  0.512596     -0.668267      -1.19619       1.19619       52.2127       53.4089    
loop,thermsimp(1:2)       42   5.57915       2.91507    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317         47.58          0.84          1.11         23.75          0.61          0.04         26.36
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    318         53.80          0.83          1.11         23.71          0.68          0.04         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       42
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       43
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      317     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867      -2.16351       2.16351       47.1953       49.3588    
   2  0.383173     -0.959268      -1.71708       1.71708       47.7233       49.4403    
   3  0.386205     -0.951387      -1.70297       1.70297       47.9120       49.6150    
   4  0.362178      -1.01562      -1.81794       1.81794       47.5679       49.3859    
   5  0.394462     -0.930233      -1.66511       1.66511       47.8653       49.5304    
   6  0.883072     -0.124349     -0.222583      0.222583       47.8839       48.1065    
   7  0.571477     -0.559531      -1.00155       1.00155       47.7303       48.7319    
   8  0.944036     -0.575912E-01 -0.103088      0.103088       47.7850       47.8880    
   9  0.326573      -1.11910      -2.00318       2.00318       47.5468       49.5500    
  10  0.467297     -0.760791      -1.36181       1.36181       48.3105       49.6723    
  11  0.828365     -0.188301     -0.337056      0.337056       47.8469       48.1840    
  12  0.826991     -0.189962     -0.340029      0.340029       48.1302       48.4702    
  13  0.675447E-01  -2.69497      -4.82396       4.82396       48.4341       53.2580    
  14  0.924113     -0.789214E-01 -0.141268      0.141268       48.4120       48.5532    
  15  0.810131     -0.210560     -0.376900      0.376900       48.3863       48.7632    
  16  0.410286     -0.890900      -1.59470       1.59470       48.3547       49.9494    
  17  0.334977      -1.09369      -1.95770       1.95770       47.5631       49.5208    
  18  0.119017      -2.12849      -3.80997       3.80997       48.2631       52.0731    
  19  0.447328     -0.804463      -1.43998       1.43998       47.9426       49.3826    
  20  0.324388E-02  -5.73098      -10.2584       10.2584       47.6550       57.9134    
  21  0.158272      -1.84344      -3.29974       3.29974       48.1205       51.4203    
  22  0.241219      -1.42205      -2.54545       2.54545       48.0552       50.6007    
  23  0.259790      -1.34788      -2.41269       2.41269       48.5919       51.0046    
  24  0.521973     -0.650139      -1.16374       1.16374       48.7895       49.9533    
  25  0.336335      -1.08965      -1.95046       1.95046       48.3430       50.2935    
  26  0.642248     -0.442780     -0.792572      0.792572       47.8350       48.6275    
  27  0.984615     -0.155047E-01 -0.277532E-01  0.277532E-01   48.1019       48.1297    
  28  0.373782     -0.984082      -1.76150       1.76150       47.7162       49.4777    
  29  0.932479     -0.699087E-01 -0.125136      0.125136       48.0046       48.1297    
  30  0.711360     -0.340577     -0.609629      0.609629       48.7951       49.4048    
  31  0.315363      -1.15403      -2.06570       2.06570       48.7660       50.8317    
  32  0.528583     -0.637556      -1.14122       1.14122       48.3943       49.5355    
  33  0.622355E-01  -2.77683      -4.97049       4.97049       47.7100       52.6805    
  34  0.144849      -1.93206      -3.45836       3.45836       48.6182       52.0766    
  35  0.868928     -0.140495     -0.251484      0.251484       47.3977       47.6492    
  36  0.243398      -1.41306      -2.52935       2.52935       47.6468       50.1762    
  37  0.936928     -0.651491E-01 -0.116616      0.116616       48.0627       48.1793    
  38  0.979804E-01  -2.32299      -4.15812       4.15812       49.5314       53.6895    
  39  0.805773     -0.215953     -0.386552      0.386552       47.2545       47.6411    
  40  0.210751      -1.55708      -2.78715       2.78715       47.1344       49.9216    
  41  0.497104     -0.698956      -1.25112       1.25112       47.5014       48.7525    
  42  0.532106     -0.630913      -1.12933       1.12933       49.5451       50.6745    
  43  0.898420     -0.107117     -0.191738      0.191738       50.0105       50.2022    
  44  0.579370     -0.545814     -0.977000      0.977000       48.8766       49.8536    
  45  0.191213      -1.65437      -2.96129       2.96129       47.7893       50.7506    
  46  0.491633     -0.710023      -1.27093       1.27093       48.7413       50.0123    
  47  0.989123     -0.109370E-01 -0.195771E-01  0.195771E-01   48.9001       48.9197    
  48  0.576855     -0.550164     -0.984786      0.984786       48.3828       49.3675    
  49  0.133368      -2.01464      -3.60618       3.60618       47.2142       50.8204    
  50  0.708426     -0.344710     -0.617026      0.617026       49.0487       49.6657    
  51  0.183469      -1.69571      -3.03530       3.03530       47.6508       50.6861    
  52  0.951201     -0.500300E-01 -0.895531E-01  0.895531E-01   49.9618       50.0514    
  53  0.380646E-01  -3.26847      -5.85052       5.85052       48.2390       54.0895    
  54  0.575108     -0.553198     -0.990218      0.990218       47.4622       48.4525    
  55  0.136357E-01  -4.29506      -7.68811       7.68811       47.6108       55.2989    
  56  0.665821E-01  -2.70932      -4.84965       4.84965       48.2724       53.1221    
  57  0.885471     -0.121635     -0.217725      0.217725       49.8768       50.0946    
  58  0.213600E-01  -3.84624      -6.88472       6.88472       48.2909       55.1756    
  59  0.740349     -0.300634     -0.538131      0.538131       46.9398       47.4780    
  60  0.290679      -1.23553      -2.21159       2.21159       48.5836       50.7952    
  61  0.895680     -0.110173     -0.197207      0.197207       52.2127       52.4099    
  62  0.956670     -0.442971E-01 -0.792913E-01  0.792913E-01   52.2522       52.3315    
  63  0.196231      -1.62846      -2.91493       2.91493       53.4897       56.4047    
  64  0.279139      -1.27605      -2.28411       2.28411       52.7556       55.0397    
  65  0.686055     -0.376797     -0.674463      0.674463       49.2175       49.8920    
  66  0.798228     -0.225361     -0.403394      0.403394       48.2589       48.6623    
  67  0.898321     -0.107228     -0.191936      0.191936       48.4284       48.6204    
  68  0.764857     -0.268067     -0.479836      0.479836       50.8673       51.3471    
  69  0.330164      -1.10817      -1.98360       1.98360       52.5290       54.5126    
  70  0.598170     -0.513879     -0.919838      0.919838       47.5839       48.5038    
loop,thermsimp(1:2)       43   2.16351       1.71708    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    319         48.33          0.84          1.11         23.77          0.54          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    320         52.95          0.84          1.11         23.79          0.52          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.33
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       43
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       44
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      319     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812      -2.23412       2.23412       46.9398       49.1740    
   2  0.260243      -1.34614      -2.40957       2.40957       47.2545       49.6641    
   3  0.646915     -0.435540     -0.779611      0.779611       47.3977       48.1773    
   4  0.572447     -0.557835     -0.998517      0.998517       47.7850       48.7835    
   5  0.105907      -2.24520      -4.01887       4.01887       47.8839       51.9028    
   6  0.693038     -0.366671     -0.656336      0.656336       48.1019       48.7582    
   7  0.329408      -1.11046      -1.98771       1.98771       48.0046       49.9923    
   8  0.187221      -1.67546      -2.99906       2.99906       48.0627       51.0617    
   9  0.545731     -0.605630      -1.08407       1.08407       47.8469       48.9310    
  10  0.752820     -0.283930     -0.508231      0.508231       47.4622       47.9705    
  11  0.153542      -1.87378      -3.35404       3.35404       48.1302       51.4842    
  12  0.400659     -0.914645      -1.63720       1.63720       47.5839       49.2211    
  13  0.306182      -1.18357      -2.11858       2.11858       48.4120       50.5305    
  14  0.270957E-01  -3.60838      -6.45896       6.45896       48.4284       54.8874    
  15  0.776765     -0.252618     -0.452183      0.452183       47.8350       48.2871    
  16  0.711945     -0.339755     -0.608158      0.608158       48.2589       48.8670    
  17  0.217190      -1.52698      -2.73328       2.73328       47.7303       50.4636    
  18  0.285226      -1.25447      -2.24549       2.24549       47.5014       49.7469    
  19  0.348904      -1.05296      -1.88478       1.88478       48.3863       50.2710    
  20  0.686414     -0.376275     -0.673528      0.673528       48.9001       49.5737    
  21  0.212825      -1.54729      -2.76962       2.76962       47.1953       49.9649    
  22  0.501697     -0.689760      -1.23466       1.23466       48.3828       49.6174    
  23  0.363771      -1.01123      -1.81009       1.81009       47.9426       49.7527    
  24  0.789273     -0.236642     -0.423587      0.423587       47.5679       47.9915    
  25  0.232884      -1.45721      -2.60839       2.60839       48.7951       51.4035    
  26  0.754896     -0.281175     -0.503299      0.503299       47.7233       48.2266    
  27  0.639358     -0.447290     -0.800644      0.800644       47.7162       48.5169    
  28  0.532505     -0.630163      -1.12798       1.12798       47.5631       48.6911    
  29  0.759813     -0.274683     -0.491679      0.491679       47.8653       48.3570    
  30  0.768360     -0.263497     -0.471657      0.471657       48.3943       48.8659    
  31  0.245116      -1.40602      -2.51676       2.51676       47.5468       50.0635    
  32  0.672517     -0.396727     -0.710137      0.710137       47.9120       48.6222    
  33  0.910675     -0.935691E-01 -0.167488      0.167488       49.0487       49.2162    
  34  0.441618     -0.817310      -1.46298       1.46298       48.3105       49.7735    
  35  0.212980      -1.54656      -2.76832       2.76832       48.8766       51.6450    
  36  0.471690     -0.751434      -1.34506       1.34506       49.2175       50.5626    
  37  0.968545     -0.319606E-01 -0.572091E-01  0.572091E-01   47.1344       47.1916    
  38  0.711169     -0.340845     -0.610108      0.610108       48.3547       48.9648    
  39  0.222170      -1.50431      -2.69270       2.69270       48.7895       51.4822    
  40  0.896100     -0.109703     -0.196368      0.196368       48.7413       48.9377    
  41  0.898054     -0.107525     -0.192468      0.192468       49.9618       50.1543    
  42  0.981364     -0.188122E-01 -0.336736E-01  0.336736E-01   49.8768       49.9105    
  43  0.238126      -1.43496      -2.56855       2.56855       47.6468       50.2154    
  44  0.884882     -0.122301     -0.218918      0.218918       50.0105       50.2294    
  45  0.206421      -1.57784      -2.82431       2.82431       48.3430       51.1673    
  46  0.421939     -0.862894      -1.54457       1.54457       48.0552       49.5998    
  47  0.334170E-01  -3.39869      -6.08361       6.08361       49.5451       55.6288    
  48  0.940374     -0.614772E-01 -0.110043      0.110043       47.6508       47.7609    
  49  0.119361      -2.12561      -3.80481       3.80481       47.7893       51.5941    
  50  0.493355     -0.706527      -1.26467       1.26467       48.5836       49.8482    
  51  0.239498      -1.42921      -2.55827       2.55827       47.2142       49.7724    
  52  0.779094     -0.249623     -0.446822      0.446822       48.7660       49.2128    
  53  0.993851     -0.616759E-02 -0.110399E-01  0.110399E-01   48.5919       48.6029    
  54  0.680666     -0.384683     -0.688578      0.688578       50.8673       51.5559    
  55  0.861145     -0.149492     -0.267589      0.267589       48.1205       48.3881    
  56  0.679030     -0.387090     -0.692886      0.692886       48.2631       48.9560    
  57  0.568731E-01  -2.86693      -5.13178       5.13178       48.6182       53.7500    
  58  0.342751      -1.07075      -1.91663       1.91663       52.2522       54.1689    
  59  0.929483     -0.731270E-01 -0.130896      0.130896       52.2127       52.3436    
  60  0.287616      -1.24613      -2.23056       2.23056       47.7100       49.9406    
  61  0.622582     -0.473881     -0.848240      0.848240       48.2724       49.1206    
  62  0.449193     -0.800303      -1.43253       1.43253       48.4341       49.8666    
  63  0.746100     -0.292896     -0.524280      0.524280       49.5314       50.0557    
  64  0.783595     -0.243863     -0.436511      0.436511       48.2390       48.6755    
  65  0.447963     -0.803044      -1.43744       1.43744       52.5290       53.9665    
  66  0.788663     -0.237416     -0.424973      0.424973       52.7556       53.1806    
  67  0.445514     -0.808528      -1.44725       1.44725       48.2909       49.7381    
  68  0.174611      -1.74519      -3.12387       3.12387       47.6108       50.7347    
  69  0.891268E-01  -2.41769      -4.32764       4.32764       53.4897       57.8174    
  70  0.279672      -1.27414      -2.28069       2.28069       48.3341       50.6148    
loop,thermsimp(1:2)       44   2.23412       2.40957    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    321         48.65          0.83          1.11         23.84          0.44          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    48.648        1.208     -1.879      3.245     -102.6      1.413    
                      0.2719      1.283     -99.70      3.694     0.2037E-02

                       2.249     -1.031      1.530      7209.      3546.    

                     -0.8373E-01  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6043.      451.5    

                       1.433     -5.802     -4.061     -8.435      6.729    

                      -14.94     -3.570     0.1588E+05  0.000      9860.    



                       1665.     0.1346E+05 -4303.    -0.3064E+05  4970.    

                       6212.    -0.9142E-02 0.1931     0.3349E-01 0.1301    

                     -0.2486    -0.7607E-01 0.1960     0.1254     0.7307E-01



                     -0.4965    -0.7546      0.000     0.7487E-01-0.9043E-01

                      0.1009E-01 0.1211    -0.7116    -0.1352     0.2777E-01

                      0.6118E-01-0.3674E-01-0.6589     -1.195      7403.    



                      -1.034     -1.198     -2.283     -2.309    -0.3807    

                     -0.3252      9.208      8.665    -0.1936E+05 -4.000    

                     -0.4854     -2.174      9.311      8.880    -0.1908E+05



                      -4.000     0.4065    -0.4222      8.865      9.091    

                     -0.1908E+05 -7.000    -0.7286    -0.6465      9.041    

                       8.783    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.65
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       44
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       45
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      320     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816      -2.84278       2.84278       47.1344       49.9772    
   2  0.455846E-01  -3.08818      -5.52781       5.52781       47.6508       53.1787    
   3  0.655807     -0.421889     -0.755176      0.755176       47.4622       48.2174    
   4  0.902989     -0.102045     -0.182660      0.182660       47.5679       47.7506    
   5  0.826012     -0.191146     -0.342148      0.342148       47.3977       47.7399    
   6  0.160871      -1.82715      -3.27058       3.27058       47.7233       50.9938    
   7  0.516410     -0.660854      -1.18292       1.18292       47.8350       49.0179    
   8  0.506939     -0.679364      -1.21605       1.21605       47.8653       49.0814    
   9  0.728359     -0.316962     -0.567357      0.567357       48.1205       48.6879    
  10  0.453162     -0.791506      -1.41679       1.41679       47.7162       49.1330    
  11  0.837994     -0.176745     -0.316371      0.316371       48.5919       48.9082    
  12  0.118024      -2.13686      -3.82496       3.82496       47.9120       51.7370    
  13  0.274030      -1.29452      -2.31717       2.31717       48.2390       50.5562    
  14  0.402227     -0.910738      -1.63021       1.63021       47.5631       49.1933    
  15  0.444245     -0.811380      -1.45236       1.45236       48.1019       49.5543    
  16  0.594880     -0.519396     -0.929713      0.929713       47.7850       48.7147    
  17  0.548806     -0.600010      -1.07401       1.07401       48.3943       49.4683    
  18  0.222827      -1.50136      -2.68741       2.68741       48.2589       50.9463    
  19  0.152541      -1.88032      -3.36575       3.36575       47.8469       51.2126    
  20  0.816533     -0.202688     -0.362808      0.362808       48.7413       49.1041    
  21  0.525417     -0.643564      -1.15197       1.15197       48.2631       49.4151    
  22  0.661450     -0.413320     -0.739839      0.739839       48.3547       49.0945    
  23  0.437535     -0.826598      -1.47960       1.47960       48.2724       49.7520    
  24  0.464442     -0.766918      -1.37277       1.37277       46.9398       48.3126    
  25  0.683975     -0.379834     -0.679898      0.679898       48.7660       49.4459    
  26  0.407919     -0.896688      -1.60506       1.60506       49.0487       50.6538    
  27  0.934669     -0.675632E-01 -0.120937      0.120937       47.5839       47.7049    
  28  0.866891     -0.142842     -0.255685      0.255685       48.9001       49.1558    
  29  0.145435E-01  -4.23061      -7.57275       7.57275       48.0552       55.6280    
  30  0.514599     -0.664368      -1.18921       1.18921       48.3828       49.5720    
  31  0.370591     -0.992656      -1.77684       1.77684       47.2545       49.0314    
  32  0.251726      -1.37941      -2.46913       2.46913       48.2909       50.7600    
  33  0.959470     -0.413742E-01 -0.740592E-01  0.740592E-01   47.5014       47.5755    
  34  0.344885E-01  -3.36713      -6.02712       6.02712       47.9426       53.9697    
  35  0.348690      -1.05357      -1.88588       1.88588       47.2142       49.1001    
  36  0.610898     -0.492826     -0.882152      0.882152       48.3105       49.1927    
  37  0.440567     -0.819693      -1.46724       1.46724       48.5836       50.0508    
  38  0.340409      -1.07761      -1.92890       1.92890       48.4341       50.3630    
  39  0.345015E-01  -3.36675      -6.02644       6.02644       49.8768       55.9033    
  40  0.667224     -0.404630     -0.724283      0.724283       47.7100       48.4343    
  41  0.138336      -1.97807      -3.54073       3.54073       47.1953       50.7360    
  42  0.412023     -0.886676      -1.58714       1.58714       48.0046       49.5917    
  43  0.578410     -0.547473     -0.979969      0.979969       49.5314       50.5113    
  44  0.972817     -0.275594E-01 -0.493310E-01  0.493310E-01   47.5468       47.5961    
  45  0.152341      -1.88163      -3.36810       3.36810       49.9618       53.3299    
  46  0.764264     -0.268842     -0.481224      0.481224       47.6468       48.1280    
  47  0.898082E-01  -2.41008      -4.31401       4.31401       50.0105       54.3245    
  48  0.205097      -1.58427      -2.83583       2.83583       48.3863       51.2221    
  49  0.249611E-01  -3.69044      -6.60584       6.60584       47.7303       54.3362    
  50  0.999211     -0.789000E-03 -0.141230E-02  0.141230E-02   48.4120       48.4134    
  51  0.622898E-01  -2.77596      -4.96893       4.96893       49.2175       54.1865    
  52  0.588779     -0.529705     -0.948165      0.948165       48.3341       49.2823    
  53  0.395562     -0.927447      -1.66012       1.66012       47.6108       49.2709    
  54  0.213371      -1.54472      -2.76504       2.76504       48.0627       50.8277    
  55  0.801544     -0.221215     -0.395973      0.395973       48.3430       48.7390    
  56  0.392036     -0.936401      -1.67615       1.67615       48.7951       50.4713    
  57  0.504835     -0.683524      -1.22350       1.22350       48.7895       50.0130    
  58  0.389514     -0.942856      -1.68770       1.68770       48.1302       49.8179    
  59  0.694006     -0.365275     -0.653838      0.653838       50.8673       51.5211    
  60  0.220113      -1.51361      -2.70935       2.70935       47.7893       50.4986    
  61  0.548334     -0.600870      -1.07555       1.07555       48.8766       49.9522    
  62  0.490082     -0.713183      -1.27659       1.27659       47.8839       49.1605    
  63  0.315187      -1.15459      -2.06670       2.06670       52.2127       54.2794    
  64  0.454028     -0.789596      -1.41337       1.41337       52.7556       54.1690    
  65  0.617612     -0.481894     -0.862584      0.862584       48.6182       49.4808    
  66  0.446806     -0.805630      -1.44207       1.44207       52.5290       53.9711    
  67  0.907640     -0.969076E-01 -0.173463      0.173463       52.2522       52.4257    
  68  0.508446     -0.676396      -1.21074       1.21074       48.4284       49.6392    
  69  0.552574     -0.593168      -1.06176       1.06176       49.5451       50.6069    
  70  0.716954     -0.332744     -0.595607      0.595607       48.6480       49.2436    
loop,thermsimp(1:2)       45   2.84278       5.52781    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322         49.17          0.84          1.11         23.79          0.76          0.04         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       45
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       46
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      321     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016     -0.411726      0.411726       47.5014       47.9131    
   2  0.338444      -1.08340      -1.93926       1.93926       47.5468       49.4860    
   3  0.563800     -0.573055      -1.02576       1.02576       47.5839       48.6097    
   4  0.295284      -1.21982      -2.18346       2.18346       47.3977       49.5812    
   5  0.506481     -0.680269      -1.21767       1.21767       47.5679       48.7856    
   6  0.345803      -1.06189      -1.90076       1.90076       47.6468       49.5476    
   7  0.741641     -0.298890     -0.535009      0.535009       47.4622       47.9973    
   8  0.182310      -1.70204      -3.04664       3.04664       46.9398       49.9865    
   9  0.315187      -1.15459      -2.06670       2.06670       48.4120       50.4787    
  10  0.598844     -0.512755     -0.917825      0.917825       47.7100       48.6278    
  11  0.659119     -0.416852     -0.746159      0.746159       48.1205       48.8667    
  12  0.247481      -1.39642      -2.49958       2.49958       47.7850       50.2845    
  13  0.255298      -1.36532      -2.44391       2.44391       48.3430       50.7869    
  14  0.876488     -0.131833     -0.235979      0.235979       48.5919       48.8279    
  15  0.358010      -1.02719      -1.83867       1.83867       47.8350       49.6736    
  16  0.317480      -1.14734      -2.05373       2.05373       47.2545       49.3082    
  17  0.153422      -1.87456      -3.35544       3.35544       47.8653       51.2208    
  18  0.296162      -1.21685      -2.17815       2.17815       48.3547       50.5328    
  19  0.629760     -0.462417     -0.827720      0.827720       47.2142       48.0419    
  20  0.458345E-01  -3.08272      -5.51803       5.51803       48.7413       54.2594    
  21  0.209534      -1.56287      -2.79751       2.79751       47.7162       50.5137    
  22  0.490210E-01  -3.01551      -5.39772       5.39772       48.9001       54.2979    
  23  0.144817      -1.93229      -3.45877       3.45877       47.8839       51.3427    
  24  0.764061     -0.269107     -0.481699      0.481699       48.3105       48.7922    
  25  0.158664      -1.84097      -3.29531       3.29531       47.5631       50.8584    
  26  0.242818      -1.41544      -2.53362       2.53362       48.6480       51.1816    
  27  0.779950     -0.248525     -0.444857      0.444857       47.6108       48.0556    
  28  0.763580     -0.269737     -0.482826      0.482826       48.3341       48.8169    
  29  0.817639     -0.201335     -0.360386      0.360386       48.2631       48.6235    
  30  0.656802     -0.420373     -0.752463      0.752463       48.7660       49.5184    
  31  0.202192      -1.59854      -2.86136       2.86136       48.3943       51.2556    
  32  0.469647     -0.755773      -1.35283       1.35283       48.6182       49.9711    
  33  0.107456      -2.23067      -3.99287       3.99287       48.1019       52.0948    
  34  0.709118     -0.343734     -0.615280      0.615280       48.3828       48.9980    
  35  0.988480     -0.115868E-01 -0.207403E-01  0.207403E-01   48.0046       48.0253    
  36  0.645173     -0.438236     -0.784438      0.784438       48.4284       49.2129    
  37  0.583143     -0.539322     -0.965380      0.965380       48.2724       49.2378    
  38  0.276552E-01  -3.58794      -6.42237       6.42237       48.1302       54.5525    
  39  0.560517     -0.578896      -1.03622       1.03622       48.8766       49.9129    
  40  0.292779      -1.22834      -2.19871       2.19871       47.1344       49.3331    
  41  0.486207     -0.721121      -1.29080       1.29080       48.7895       50.0803    
  42  0.379142E-01  -3.27243      -5.85761       5.85761       48.5836       54.4412    
  43  0.459895     -0.776757      -1.39038       1.39038       48.4341       49.8244    
  44  0.810771     -0.209769     -0.375484      0.375484       48.7951       49.1706    
  45  0.189138      -1.66528      -2.98082       2.98082       47.7893       50.7701    
  46  0.509870     -0.673599      -1.20573       1.20573       49.5314       50.7371    
  47  0.468020E-01  -3.06183      -5.48064       5.48064       48.2390       53.7197    
  48  0.568404     -0.564922      -1.01120       1.01120       49.5451       50.5564    
  49  0.891250     -0.115130     -0.206082      0.206082       49.0487       49.2548    
  50  0.415261     -0.878849      -1.57313       1.57313       47.1953       48.7684    
  51  0.714019     -0.336846     -0.602950      0.602950       48.2909       48.8938    
  52  0.606207     -0.500534     -0.895949      0.895949       48.0627       48.9586    
  53  0.106011      -2.24421      -4.01711       4.01711       48.2589       52.2760    
  54  0.330348      -1.10761      -1.98261       1.98261       47.7233       49.7059    
  55  0.773475     -0.256862     -0.459781      0.459781       47.8469       48.3067    
  56  0.721841     -0.325951     -0.583448      0.583448       48.3863       48.9697    
  57  0.714980     -0.335501     -0.600543      0.600543       50.8673       51.4678    
  58  0.616486     -0.483719     -0.865851      0.865851       47.9120       48.7779    
  59  0.885098     -0.122057     -0.218480      0.218480       52.2522       52.4707    
  60  0.463686     -0.768549      -1.37569       1.37569       47.6508       49.0265    
  61  0.912951     -0.910727E-01 -0.163019      0.163019       49.9618       50.1248    
  62  0.819534     -0.199020     -0.356243      0.356243       47.9426       48.2988    
  63  0.771708     -0.259149     -0.463873      0.463873       52.5290       52.9929    
  64  0.812091E-03  -7.11590      -12.7374       12.7374       52.7556       65.4930    
  65  0.880919     -0.126790     -0.226952      0.226952       49.2175       49.4445    
  66  0.552031     -0.594151      -1.06352       1.06352       52.2127       53.2763    
  67  0.134353      -2.00729      -3.59302       3.59302       50.0105       53.6035    
  68  0.410649     -0.890016      -1.59312       1.59312       47.7303       49.3235    
  69  0.258019      -1.35472      -2.42494       2.42494       48.0552       50.4802    
  70  0.808143     -0.213016     -0.381296      0.381296       49.1738       49.5551    
loop,thermsimp(1:2)       46  0.411726       1.93926    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323         48.49          0.83          1.12         23.84          0.64          0.04         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    324         52.56          0.84          1.11         23.83          0.48          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       46
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       47
neval is:      323


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      323     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926     -0.764192      0.764192       47.5014       48.2656    
   2  0.474910     -0.744630      -1.33288       1.33288       47.4622       48.7951    
   3  0.125725      -2.07366      -3.71182       3.71182       48.0046       51.7164    
   4  0.950967     -0.502756E-01 -0.899926E-01  0.899926E-01   47.2142       47.3042    
   5  0.562475     -0.575409      -1.02997       1.02997       47.6108       48.6408    
   6  0.728528     -0.316729     -0.566941      0.566941       47.9426       48.5095    
   7  0.326058      -1.12068      -2.00600       2.00600       47.8469       49.8529    
   8  0.460979     -0.774402      -1.38617       1.38617       47.5839       48.9701    
   9  0.186861      -1.67739      -3.00251       3.00251       48.2631       51.2656    
  10  0.737773     -0.304119     -0.544370      0.544370       47.7100       48.2544    
  11  0.254524      -1.36836      -2.44935       2.44935       47.1953       49.6446    
  12  0.475390     -0.743621      -1.33107       1.33107       47.9120       49.2431    
  13  0.783107     -0.244486     -0.437626      0.437626       47.5679       48.0056    
  14  0.615536     -0.485261     -0.868612      0.868612       48.3105       49.1791    
  15  0.600710E-01  -2.81223      -5.03385       5.03385       48.3341       53.3680    
  16  0.834417     -0.181022     -0.324028      0.324028       48.5919       48.9159    
  17  0.270355      -1.30802      -2.34134       2.34134       48.1205       50.4619    
  18  0.408387     -0.895540      -1.60301       1.60301       48.2909       49.8939    
  19  0.248286      -1.39318      -2.49377       2.49377       48.0627       50.5564    
  20  0.586808E-01  -2.83564      -5.07576       5.07576       48.3863       53.4620    
  21  0.747050     -0.291623     -0.522002      0.522002       48.3828       48.9048    
  22  0.261869E-01  -3.64250      -6.52003       6.52003       47.6508       54.1709    
  23  0.495813     -0.701557      -1.25578       1.25578       48.7951       50.0509    
  24  0.600032     -0.510772     -0.914275      0.914275       48.4284       49.3427    
  25  0.936456     -0.656531E-01 -0.117518      0.117518       48.2724       48.3899    
  26  0.583260     -0.539121     -0.965021      0.965021       49.0487       50.0137    
  27  0.994266     -0.575021E-02 -0.102928E-01  0.102928E-01   47.2545       47.2648    
  28  0.149755      -1.89876      -3.39875       3.39875       47.7303       51.1291    
  29  0.751239     -0.286032     -0.511993      0.511993       47.1344       47.6464    
  30  0.703931     -0.351075     -0.628420      0.628420       49.2175       49.8459    
  31  0.998476     -0.152564E-02 -0.273088E-02  0.273088E-02   47.5468       47.5495    
  32  0.501495     -0.690161      -1.23538       1.23538       48.7660       50.0014    
  33  0.446468     -0.806387      -1.44342       1.44342       47.6468       49.0902    
  34  0.321376      -1.13514      -2.03190       2.03190       49.1738       51.2057    
  35  0.850901     -0.161459     -0.289010      0.289010       47.3977       47.6867    
  36  0.975881     -0.244142E-01 -0.437011E-01  0.437011E-01   47.8350       47.8787    
  37  0.386316     -0.951100      -1.70246       1.70246       47.7233       49.4257    
  38  0.782734     -0.244962     -0.438479      0.438479       48.4341       48.8725    
  39  0.142678      -1.94716      -3.48540       3.48540       48.8766       52.3620    
  40  0.509914     -0.673514      -1.20558       1.20558       48.6182       49.8238    
  41  0.211111      -1.55537      -2.78409       2.78409       46.9398       49.7239    
  42  0.212538      -1.54864      -2.77204       2.77204       48.7895       51.5616    
  43  0.889982     -0.116555     -0.208631      0.208631       49.9618       50.1705    
  44  0.769070     -0.262573     -0.470003      0.470003       47.7850       48.2550    
  45  0.792434     -0.232646     -0.416433      0.416433       48.4120       48.8284    
  46  0.250220E-01  -3.68800      -6.60147       6.60147       48.0552       54.6567    
  47  0.190304      -1.65913      -2.96983       2.96983       47.7162       50.6861    
  48  0.579595     -0.545425     -0.976304      0.976304       48.3547       49.3310    
  49  0.373376     -0.985170      -1.76344       1.76344       49.5451       51.3086    
  50  0.933620E-01  -2.37127      -4.24455       4.24455       49.5314       53.7759    
  51  0.628243     -0.464828     -0.832036      0.832036       47.7893       48.6213    
  52  0.737857     -0.304005     -0.544166      0.544166       48.3430       48.8872    
  53  0.430189     -0.843530      -1.50991       1.50991       47.5631       49.0730    
  54  0.957397     -0.435375E-01 -0.779315E-01  0.779315E-01   48.6480       48.7259    
  55  0.388126     -0.946424      -1.69409       1.69409       47.8653       49.5594    
  56  0.989586     -0.104686E-01 -0.187387E-01  0.187387E-01   48.3943       48.4130    
  57  0.754642     -0.281511     -0.503902      0.503902       47.8839       48.3878    
  58  0.404023E-01  -3.20887      -5.74383       5.74383       50.8673       56.6111    
  59  0.298112      -1.21029      -2.16640       2.16640       48.1019       50.2683    
  60  0.915557     -0.882223E-01 -0.157917      0.157917       48.2589       48.4168    
  61  0.205580E-01  -3.88450      -6.95321       6.95321       52.2522       59.2055    
  62  0.883530     -0.123830     -0.221655      0.221655       52.5290       52.7507    
  63  0.776014     -0.253585     -0.453914      0.453914       52.2127       52.6667    
  64  0.755316     -0.280619     -0.502304      0.502304       50.0105       50.5128    
  65  0.912949     -0.910754E-01 -0.163024      0.163024       48.2390       48.4020    
  66  0.262008      -1.33938      -2.39747       2.39747       48.7413       51.1388    
  67  0.636818     -0.451272     -0.807771      0.807771       48.9001       49.7079    
  68  0.545112     -0.606763      -1.08610       1.08610       48.5836       49.6697    
  69  0.261545      -1.34115      -2.40064       2.40064       48.1302       50.5308    
  70  0.375676     -0.979027      -1.75245       1.75245       48.4895       50.2419    
loop,thermsimp(1:2)       47  0.764192       1.33288    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    325         48.68          0.84          1.11         23.86          0.45          0.04         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    326         51.80          0.82          1.12         23.88          0.48          0.04         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       47
neval is:      325
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       48
neval is:      325


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      325     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197      -2.06202       2.06202       47.2545       49.3165    
   2  0.452730     -0.792459      -1.41849       1.41849       47.2142       48.6327    
   3  0.463916     -0.768051      -1.37480       1.37480       47.5468       48.9216    
   4  0.531172E-01  -2.93526      -5.25407       5.25407       47.1344       52.3885    
   5  0.933113     -0.692290E-01 -0.123919      0.123919       47.3977       47.5216    
   6  0.107612      -2.22922      -3.99028       3.99028       47.8350       51.8252    
   7  0.228017      -1.47833      -2.64620       2.64620       47.5679       50.2141    
   8  0.766526     -0.265887     -0.475935      0.475935       47.7100       48.1859    
   9  0.676418     -0.390944     -0.699785      0.699785       47.7850       48.4847    
  10  0.220696      -1.51097      -2.70462       2.70462       47.5014       50.2060    
  11  0.959946E-01  -2.34346      -4.19477       4.19477       47.8839       52.0787    
  12  0.570655     -0.560971      -1.00413       1.00413       48.2724       49.2765    
  13  0.736426     -0.305947     -0.547641      0.547641       48.2390       48.7867    
  14  0.966377     -0.342013E-01 -0.612200E-01  0.612200E-01   48.3943       48.4555    
  15  0.797662     -0.226070     -0.404663      0.404663       48.2589       48.6635    
  16  0.413688     -0.882643      -1.57992       1.57992       47.9426       49.5225    
  17  0.200670      -1.60609      -2.87489       2.87489       47.7893       50.6642    
  18  0.843958E-01  -2.47224      -4.42527       4.42527       47.6108       52.0361    
  19  0.375580     -0.979284      -1.75291       1.75291       48.6480       50.4009    
  20  0.968669     -0.318322E-01 -0.569792E-01  0.569792E-01   47.4622       47.5192    
  21  0.379263     -0.969525      -1.73544       1.73544       48.4120       50.1474    
  22  0.421746     -0.863352      -1.54539       1.54539       48.4341       49.9794    
  23  0.639909     -0.446429     -0.799103      0.799103       48.3430       49.1421    
  24  0.549878     -0.598059      -1.07052       1.07052       48.3828       49.4533    
  25  0.226469      -1.48515      -2.65840       2.65840       48.5919       51.2503    
  26  0.547044E-02  -5.20840      -9.32296       9.32296       47.5839       56.9069    
  27  0.372808     -0.986692      -1.76617       1.76617       47.5631       49.3292    
  28  0.406819E-01  -3.20197      -5.73149       5.73149       47.6468       53.3783    
  29  0.664564     -0.408624     -0.731431      0.731431       48.3105       49.0420    
  30  0.708700     -0.344323     -0.616333      0.616333       47.9120       48.5284    
  31  0.863329     -0.146959     -0.263055      0.263055       48.3547       48.6177    
  32  0.406109     -0.901134      -1.61302       1.61302       48.4284       50.0415    
  33  0.101947      -2.28330      -4.08708       4.08708       47.7233       51.8103    
  34  0.660574     -0.414646     -0.742211      0.742211       47.8653       48.6076    
  35  0.839002     -0.175542     -0.314219      0.314219       47.1953       47.5095    
  36  0.735312E-01  -2.61005      -4.67195       4.67195       48.5836       53.2555    
  37  0.559917     -0.579967      -1.03813       1.03813       48.9001       49.9383    
  38  0.922004     -0.812055E-01 -0.145357      0.145357       46.9398       47.0852    
  39  0.891471     -0.114882     -0.205638      0.205638       48.6182       48.8239    
  40  0.489346     -0.714686      -1.27928       1.27928       49.2175       50.4968    
  41  0.583196     -0.539231     -0.965217      0.965217       47.8469       48.8121    
  42  0.989235     -0.108230E-01 -0.193731E-01  0.193731E-01   48.2909       48.3102    
  43  0.844741     -0.168725     -0.302016      0.302016       48.7660       49.0680    
  44  0.734982     -0.307909     -0.551153      0.551153       49.0487       49.5999    
  45  0.913246     -0.907495E-01 -0.162440      0.162440       48.7951       48.9576    
  46  0.605096     -0.502369     -0.899234      0.899234       49.9618       50.8611    
  47  0.623739     -0.472024     -0.844917      0.844917       48.4895       49.3344    
  48  0.780990     -0.247193     -0.442473      0.442473       48.1019       48.5444    
  49  0.615662E-01  -2.78764      -4.98985       4.98985       48.1205       53.1104    
  50  0.646443E-02  -5.04144      -9.02412       9.02412       50.0105       59.0346    
  51  0.848055     -0.164809     -0.295007      0.295007       48.1302       48.4252    
  52  0.740886     -0.299909     -0.536833      0.536833       48.0627       48.5995    
  53  0.350650      -1.04797      -1.87585       1.87585       47.7162       49.5921    
  54  0.873328     -0.135444     -0.242443      0.242443       47.7303       47.9728    
  55  0.353091      -1.04103      -1.86343       1.86343       48.7413       50.6048    
  56  0.867938     -0.141635     -0.253526      0.253526       49.1738       49.4273    
  57  0.746706     -0.292084     -0.522827      0.522827       48.2631       48.7859    
  58  0.701641     -0.354333     -0.634252      0.634252       49.5451       50.1794    
  59  0.454866     -0.787753      -1.41007       1.41007       48.7895       50.1996    
  60  0.172086      -1.75976      -3.14995       3.14995       48.0046       51.1545    
  61  0.633774     -0.456062     -0.816346      0.816346       48.8766       49.6930    
  62  0.321574      -1.13453      -2.03079       2.03079       52.2127       54.2435    
  63  0.171612      -1.76252      -3.15488       3.15488       52.5290       55.6839    
  64  0.417516     -0.873431      -1.56343       1.56343       48.3341       49.8975    
  65  0.735059     -0.307804     -0.550965      0.550965       48.3863       48.9372    
  66  0.259350      -1.34958      -2.41573       2.41573       49.5314       51.9471    
  67  0.498266     -0.696622      -1.24694       1.24694       47.6508       48.8978    
  68  0.309265      -1.17356      -2.10065       2.10065       48.0552       50.1559    
  69  0.612008     -0.491010     -0.878903      0.878903       50.8673       51.7462    
  70  0.624712E-01  -2.77305      -4.96372       4.96372       48.6847       53.6484    
loop,thermsimp(1:2)       48   2.06202       1.41849    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    327         49.31          0.84          1.11         23.84          0.46          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.31
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       48
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       49
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      326     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.152169E-01  0.152169E-01   46.9398       46.9551    
   2  0.120199      -2.11861      -3.79228       3.79228       47.1953       50.9876    
   3  0.825835     -0.191360     -0.342532      0.342532       47.4622       47.8048    
   4  0.769690     -0.261767     -0.468560      0.468560       47.3977       47.8663    
   5  0.206534      -1.57729      -2.82333       2.82333       47.7303       50.5537    
   6  0.435455     -0.831363      -1.48813       1.48813       47.7100       49.1981    
   7  0.408718     -0.894731      -1.60156       1.60156       48.2909       49.8924    
   8  0.504170E-01  -2.98743      -5.34746       5.34746       48.1302       53.4776    
   9  0.943874     -0.577631E-01 -0.103395      0.103395       48.3943       48.4977    
  10  0.161493      -1.82330      -3.26368       3.26368       47.7850       51.0486    
  11  0.248560      -1.39207      -2.49179       2.49179       47.9120       50.4038    
  12  0.952734     -0.484195E-01 -0.866704E-01  0.866704E-01   48.1019       48.1886    
  13  0.349224      -1.05204      -1.88314       1.88314       48.0627       49.9458    
  14  0.245013      -1.40644      -2.51751       2.51751       47.8653       50.3829    
  15  0.713805     -0.337146     -0.603486      0.603486       48.3547       48.9582    
  16  0.206995      -1.57506      -2.81934       2.81934       47.2142       50.0335    
  17  0.573984     -0.555154     -0.993719      0.993719       48.2589       49.2526    
  18  0.791297     -0.234082     -0.419005      0.419005       48.2631       48.6821    
  19  0.599323     -0.511955     -0.916393      0.916393       48.2390       49.1554    
  20  0.632893     -0.457454     -0.818838      0.818838       47.8469       48.6657    
  21  0.920472     -0.828688E-01 -0.148334      0.148334       48.6182       48.7666    
  22  0.650695     -0.429713     -0.769182      0.769182       47.6508       48.4200    
  23  0.759327     -0.275322     -0.492823      0.492823       47.5468       48.0396    
  24  0.547563     -0.602278      -1.07807       1.07807       48.3863       49.4643    
  25  0.375945     -0.978312      -1.75117       1.75117       48.7951       50.5463    
  26  0.436593     -0.828753      -1.48346       1.48346       48.3105       49.7940    
  27  0.226348      -1.48568      -2.65935       2.65935       48.7660       51.4253    
  28  0.889061     -0.117589     -0.210483      0.210483       48.3430       48.5535    
  29  0.294563      -1.22226      -2.18783       2.18783       48.2724       50.4602    
  30  0.760606     -0.273640     -0.489813      0.489813       47.2545       47.7443    
  31  0.131934      -2.02545      -3.62553       3.62553       47.5631       51.1886    
  32  0.150887      -1.89123      -3.38527       3.38527       48.4895       51.8748    
  33  0.108814      -2.21811      -3.97039       3.97039       49.1738       53.1442    
  34  0.392982     -0.933991      -1.67183       1.67183       48.3828       50.0546    
  35  0.524209     -0.645865      -1.15609       1.15609       47.9426       49.0987    
  36  0.779329     -0.249322     -0.446283      0.446283       47.7162       48.1625    
  37  0.684136     -0.379599     -0.679477      0.679477       49.0487       49.7282    
  38  0.898629     -0.106885     -0.191323      0.191323       48.8766       49.0680    
  39  0.885947E-01  -2.42368      -4.33836       4.33836       48.3341       52.6725    
  40  0.865042     -0.144977     -0.259507      0.259507       48.9001       49.1597    
  41  0.953799     -0.473027E-01 -0.846712E-01  0.846712E-01   48.4341       48.5187    
  42  0.264945      -1.32823      -2.37752       2.37752       48.4284       50.8060    
  43  0.931660     -0.707875E-01 -0.126709      0.126709       48.4120       48.5387    
  44  0.273150      -1.29773      -2.32293       2.32293       48.0552       50.3782    
  45  0.773196     -0.257223     -0.460426      0.460426       49.5451       50.0056    
  46  0.936342     -0.657743E-01 -0.117735      0.117735       48.7895       48.9073    
  47  0.367272      -1.00165      -1.79295       1.79295       47.5014       49.2944    
  48  0.970907     -0.295243E-01 -0.528480E-01  0.528480E-01   47.5679       47.6208    
  49  0.722669     -0.324804     -0.581396      0.581396       48.6480       49.2294    
  50  0.247966      -1.39446      -2.49607       2.49607       49.2175       51.7136    
  51  0.730821     -0.313587     -0.561316      0.561316       48.7413       49.3027    
  52  0.379134     -0.969864      -1.73605       1.73605       47.7893       49.5253    
  53  0.326173      -1.12033      -2.00537       2.00537       49.9618       51.9672    
  54  0.555872     -0.587218      -1.05111       1.05111       48.0046       49.0557    
  55  0.600838     -0.509431     -0.911875      0.911875       48.5919       49.5038    
  56  0.714504     -0.336167     -0.601734      0.601734       50.8673       51.4690    
  57  0.190775      -1.65666      -2.96540       2.96540       47.7233       50.6887    
  58  0.206210      -1.57886      -2.82614       2.82614       47.8350       50.6611    
  59  0.855348     -0.156247     -0.279681      0.279681       49.5314       49.8111    
  60  0.886753     -0.120189     -0.215136      0.215136       47.6108       47.8259    
  61  0.391830     -0.936926      -1.67709       1.67709       47.8839       49.5610    
  62  0.986898     -0.131885E-01 -0.236073E-01  0.236073E-01   47.1344       47.1580    
  63  0.153388      -1.87479      -3.35584       3.35584       48.1205       51.4764    
  64  0.416027     -0.877006      -1.56983       1.56983       48.5836       50.1534    
  65  0.815763     -0.203631     -0.364497      0.364497       47.6468       48.0113    
  66  0.196403      -1.62759      -2.91336       2.91336       48.6847       51.5981    
  67  0.751119E-01  -2.58878      -4.63388       4.63388       52.2127       56.8466    
  68  0.297288      -1.21305      -2.17135       2.17135       52.5290       54.7004    
  69  0.984987     -0.151265E-01 -0.270763E-01  0.270763E-01   47.5839       47.6110    
  70  0.142264      -1.95007      -3.49060       3.49060       49.3121       52.8027    
loop,thermsimp(1:2)       49  0.152169E-01   3.79228    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328         48.30          0.82          1.11         23.88          0.46          0.04         26.32
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       49
neval is:      327
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       50
neval is:      327


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      327     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -8.39413       8.39413       46.9398       55.3340    
   2  0.902150     -0.102974     -0.184323      0.184323       47.1344       47.3187    
   3  0.375868     -0.978517      -1.75153       1.75153       47.5839       49.3355    
   4  0.136549E-01  -4.29366      -7.68559       7.68559       47.5679       55.2535    
   5  0.948329     -0.530533E-01 -0.949648E-01  0.949648E-01   47.2545       47.3495    
   6  0.489379E-01  -3.01720      -5.40076       5.40076       47.4622       52.8630    
   7  0.319400      -1.14131      -2.04293       2.04293       47.6108       49.6537    
   8  0.748008     -0.290342     -0.519708      0.519708       47.3977       47.9174    
   9  0.468015     -0.759255      -1.35906       1.35906       47.6468       49.0059    
  10  0.467420     -0.760527      -1.36133       1.36133       47.5468       48.9081    
  11  0.345085      -1.06396      -1.90448       1.90448       47.7162       49.6207    
  12  0.598981     -0.512526     -0.917415      0.917415       48.1019       49.0193    
  13  0.231496      -1.46319      -2.61909       2.61909       47.6508       50.2699    
  14  0.685496     -0.377613     -0.675922      0.675922       48.3943       49.0702    
  15  0.225803      -1.48809      -2.66366       2.66366       48.4341       51.0977    
  16  0.744991E-01  -2.59697      -4.64854       4.64854       48.4120       53.0605    
  17  0.436777     -0.828332      -1.48270       1.48270       48.3430       49.8257    
  18  0.241074      -1.42265      -2.54653       2.54653       47.8469       50.3934    
  19  0.728071     -0.317357     -0.568066      0.568066       48.2631       48.8312    
  20  0.228500      -1.47622      -2.64241       2.64241       48.6182       51.2607    
  21  0.423678     -0.858781      -1.53721       1.53721       48.7895       50.3267    
  22  0.812855     -0.207202     -0.370889      0.370889       48.3547       48.7256    
  23  0.810546     -0.210047     -0.375982      0.375982       48.0046       48.3806    
  24  0.113500      -2.17595      -3.89492       3.89492       48.8766       52.7716    
  25  0.197385      -1.62260      -2.90444       2.90444       47.9426       50.8470    
  26  0.101018      -2.29246      -4.10348       4.10348       48.2390       52.3425    
  27  0.857009E-01  -2.45689      -4.39781       4.39781       48.9001       53.2980    
  28  0.693668     -0.365762     -0.654709      0.654709       47.7100       48.3647    
  29  0.705918     -0.348256     -0.623374      0.623374       48.6480       49.2713    
  30  0.309793      -1.17185      -2.09760       2.09760       48.2589       50.3565    
  31  0.144843      -1.93210      -3.45844       3.45844       47.5014       50.9598    
  32  0.412916     -0.884511      -1.58326       1.58326       48.7413       50.3246    
  33  0.916661     -0.870180E-01 -0.155761      0.155761       48.3863       48.5420    
  34  0.933384E-01  -2.37152      -4.24500       4.24500       48.5919       52.8369    
  35  0.937330     -0.647200E-01 -0.115848      0.115848       47.7893       47.9051    
  36  0.958012     -0.428952E-01 -0.767819E-01  0.767819E-01   47.8839       47.9607    
  37  0.692877E-01  -2.66949      -4.77835       4.77835       49.0487       53.8271    
  38  0.228520E-01  -3.77872      -6.76386       6.76386       48.3105       55.0744    
  39  0.188135      -1.67060      -2.99035       2.99035       49.5314       52.5217    
  40  0.122595E-01  -4.40146      -7.87855       7.87855       48.2909       56.1694    
  41  0.776693     -0.252710     -0.452349      0.452349       48.0627       48.5150    
  42  0.571957     -0.558691      -1.00005       1.00005       49.5451       50.5452    
  43  0.313016      -1.16150      -2.07907       2.07907       47.2142       49.2932    
  44  0.512360     -0.668728      -1.19701       1.19701       48.3828       49.5798    
  45  0.874954     -0.133584     -0.239114      0.239114       48.5836       48.8227    
  46  0.617920     -0.481397     -0.861694      0.861694       48.0552       48.9169    
  47  0.529196     -0.636396      -1.13914       1.13914       47.8653       49.0045    
  48  0.389261E-02  -5.54867      -9.93206       9.93206       47.9120       57.8441    
  49  0.323386E-01  -3.43149      -6.14233       6.14233       48.2724       54.4147    
  50  0.900641     -0.104648     -0.187319      0.187319       48.7951       48.9825    
  51  0.872638     -0.136235     -0.243859      0.243859       47.7303       47.9742    
  52  0.965349     -0.352660E-01 -0.631257E-01  0.631257E-01   47.8350       47.8981    
  53  0.679490     -0.386413     -0.691675      0.691675       47.7233       48.4149    
  54  0.101129      -2.29136      -4.10151       4.10151       48.4284       52.5300    
  55  0.885746     -0.121326     -0.217171      0.217171       47.1953       47.4125    
  56  0.307763      -1.17843      -2.10937       2.10937       47.7850       49.8943    
  57  0.978164     -0.220781E-01 -0.395195E-01  0.395195E-01   47.5631       47.6026    
  58  0.678582     -0.387750     -0.694067      0.694067       48.7660       49.4601    
  59  0.573317     -0.556317     -0.995801      0.995801       50.8673       51.8631    
  60  0.541891     -0.612690      -1.09671       1.09671       48.1205       49.2172    
  61  0.110478      -2.20294      -3.94324       3.94324       48.6847       52.6279    
  62  0.125637      -2.07436      -3.71307       3.71307       49.2175       52.9306    
  63  0.580733     -0.543464     -0.972794      0.972794       48.4895       49.4623    
  64  0.261777      -1.34026      -2.39905       2.39905       49.9618       52.3609    
  65  0.500314     -0.692519      -1.23960       1.23960       48.3341       49.5737    
  66  0.810055     -0.210653     -0.377065      0.377065       49.3121       49.6892    
  67  0.548357     -0.600828      -1.07548       1.07548       49.1738       50.2493    
  68  0.260831      -1.34388      -2.40553       2.40553       48.1302       50.5357    
  69  0.276330      -1.28616      -2.30221       2.30221       52.5290       54.8312    
  70  0.637232     -0.450622     -0.806608      0.806608       48.2988       49.1055    
loop,thermsimp(1:2)       50   8.39413      0.184323    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    329         47.98          0.83          1.12         23.84          0.46          0.04         26.29
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    330         53.13          0.83          1.12         23.87          0.40          0.04         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       50
neval is:      329
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       51
neval is:      329


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      329     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577     -0.181821      0.181821       47.1344       47.3162    
   2  0.808902     -0.212077     -0.379616      0.379616       47.2545       47.6341    
   3  0.762147     -0.271616     -0.486189      0.486189       47.1953       47.6815    
   4  0.287851      -1.24531      -2.22909       2.22909       47.5631       49.7922    
   5  0.212418      -1.54920      -2.77305       2.77305       47.8350       50.6080    
   6  0.380717     -0.965699      -1.72859       1.72859       47.7893       49.5179    
   7  0.877795     -0.130342     -0.233310      0.233310       47.3977       47.6310    
   8  0.836834     -0.178130     -0.318850      0.318850       47.8839       48.2028    
   9  0.435183     -0.831988      -1.48925       1.48925       47.7303       49.2196    
  10  0.900166     -0.105177     -0.188265      0.188265       47.7100       47.8983    
  11  0.175095      -1.74242      -3.11892       3.11892       48.0046       51.1235    
  12  0.322232      -1.13248      -2.02713       2.02713       47.7233       49.7504    
  13  0.706662     -0.347203     -0.621490      0.621490       48.0627       48.6842    
  14  0.494297     -0.704618      -1.26126       1.26126       48.3863       49.6475    
  15  0.324383      -1.12583      -2.01522       2.01522       48.3547       50.3699    
  16  0.777122     -0.252157     -0.451358      0.451358       48.5836       49.0349    
  17  0.499054E-01  -2.99763      -5.36571       5.36571       48.2631       53.6288    
  18  0.489193E-01  -3.01758      -5.40144       5.40144       47.5468       52.9482    
  19  0.480140     -0.733678      -1.31327       1.31327       48.0552       49.3685    
  20  0.914126     -0.897865E-01 -0.160717      0.160717       48.7951       48.9559    
  21  0.613008     -0.489378     -0.875980      0.875980       47.8653       48.7413    
  22  0.470573     -0.753804      -1.34930       1.34930       47.6468       48.9961    
  23  0.614279     -0.487307     -0.872273      0.872273       48.1019       48.9742    
  24  0.410529     -0.890308      -1.59364       1.59364       48.3943       49.9879    
  25  0.582759     -0.539981     -0.966560      0.966560       48.2988       49.2654    
  26  0.422753E-01  -3.16355      -5.66272       5.66272       48.1205       53.7833    
  27  0.717044     -0.332618     -0.595382      0.595382       48.6480       49.2434    
  28  0.420765     -0.865682      -1.54956       1.54956       47.2142       48.7637    
  29  0.801392     -0.221405     -0.396312      0.396312       47.5839       47.9803    
  30  0.426188     -0.852875      -1.52663       1.52663       48.7660       50.2926    
  31  0.338881      -1.08211      -1.93696       1.93696       48.4895       50.4265    
  32  0.398160     -0.920902      -1.64840       1.64840       48.3341       49.9825    
  33  0.938837     -0.631132E-01 -0.112972      0.112972       48.3828       48.4957    
  34  0.411860E-01  -3.18966      -5.70945       5.70945       47.7162       53.4257    
  35  0.180703      -1.71090      -3.06249       3.06249       47.6108       50.6733    
  36  0.617012     -0.482867     -0.864326      0.864326       49.3121       50.1764    
  37  0.788612     -0.237480     -0.425087      0.425087       48.3430       48.7681    
  38  0.381719     -0.963071      -1.72389       1.72389       47.7850       49.5088    
  39  0.376038     -0.978064      -1.75072       1.75072       49.1738       50.9245    
  40  0.105996      -2.24435      -4.01737       4.01737       47.6508       51.6682    
  41  0.769932E-01  -2.56404      -4.58960       4.58960       48.7413       53.3309    
  42  0.365987      -1.00516      -1.79922       1.79922       48.7895       50.5887    
  43  0.731763     -0.312298     -0.559010      0.559010       48.2589       48.8179    
  44  0.447137     -0.804891      -1.44075       1.44075       47.8469       49.2876    
  45  0.273519      -1.29638      -2.32051       2.32051       48.1302       50.4507    
  46  0.870614     -0.138556     -0.248014      0.248014       49.5451       49.7932    
  47  0.822463     -0.195452     -0.349856      0.349856       47.9426       48.2924    
  48  0.456061     -0.785129      -1.40537       1.40537       47.5014       48.9068    
  49  0.603947     -0.504269     -0.902636      0.902636       48.4341       49.3367    
  50  0.342037      -1.07284      -1.92036       1.92036       48.6182       50.5386    
  51  0.693527     -0.365965     -0.655074      0.655074       50.8673       51.5223    
  52  0.958323     -0.425703E-01 -0.762003E-01  0.762003E-01   48.2390       48.3152    
  53  0.587360     -0.532117     -0.952483      0.952483       49.9618       50.9143    
  54  0.364787      -1.00844      -1.80510       1.80510       49.5314       51.3365    
  55  0.878785     -0.129215     -0.231294      0.231294       48.4284       48.6597    
  56  0.273053      -1.29809      -2.32357       2.32357       48.6847       51.0083    
  57  0.896174     -0.109620     -0.196219      0.196219       48.8766       49.0729    
  58  0.239994      -1.42714      -2.55456       2.55456       48.5919       51.1464    
  59  0.595505E-01  -2.82093      -5.04943       5.04943       47.4622       52.5117    
  60  0.353403      -1.04015      -1.86185       1.86185       49.2175       51.0794    
  61  0.729282     -0.315695     -0.565090      0.565090       48.4120       48.9771    
  62  0.231928      -1.46133      -2.61576       2.61576       48.9001       51.5159    
  63  0.107599      -2.22934      -3.99050       3.99050       49.0487       53.0392    
  64  0.641905     -0.443315     -0.793528      0.793528       48.2724       49.0659    
  65  0.701312     -0.354803     -0.635093      0.635093       52.5290       53.1641    
  66  0.245029      -1.40638      -2.51740       2.51740       48.3105       50.8279    
  67  0.223204      -1.49967      -2.68439       2.68439       47.5679       50.2523    
  68  0.335163      -1.09314      -1.95671       1.95671       46.9398       48.8965    
  69  0.921199     -0.820796E-01 -0.146921      0.146921       48.2909       48.4378    
  70  0.395288     -0.928141      -1.66136       1.66136       47.9758       49.6372    
loop,thermsimp(1:2)       51  0.181821      0.379616    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    331         47.44          0.83          1.11         23.83          0.47          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    332         60.05          0.84          1.12         23.82          0.47          0.04         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       51
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       52
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      331     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906      -1.54817       1.54817       47.1344       48.6826    
   2  0.315135      -1.15476      -2.06700       2.06700       47.3977       49.4647    
   3  0.696708     -0.361389     -0.646882      0.646882       47.2545       47.9014    
   4  0.922116     -0.810842E-01 -0.145140      0.145140       47.1953       47.3404    
   5  0.908133     -0.963648E-01 -0.172492      0.172492       47.7100       47.8825    
   6  0.174132      -1.74794      -3.12879       3.12879       47.5839       50.7127    
   7  0.490629     -0.712068      -1.27459       1.27459       47.8839       49.1585    
   8  0.382604     -0.960755      -1.71974       1.71974       47.9426       49.6623    
   9  0.985159     -0.149527E-01 -0.267652E-01  0.267652E-01   48.2390       48.2658    
  10  0.182634      -1.70027      -3.04346       3.04346       48.2909       51.3343    
  11  0.554568     -0.589565      -1.05531       1.05531       48.3828       49.4381    
  12  0.999791     -0.209153E-03 -0.374381E-03  0.374381E-03   48.4284       48.4288    
  13  0.284621      -1.25660      -2.24930       2.24930       48.0627       50.3120    
  14  0.920706E-01  -2.38520      -4.26948       4.26948       47.8653       52.1348    
  15  0.243911      -1.41095      -2.52559       2.52559       47.2142       49.7398    
  16  0.866829     -0.142914     -0.255813      0.255813       48.3430       48.5988    
  17  0.640039     -0.446225     -0.798738      0.798738       48.2589       49.0576    
  18  0.737488E-01  -2.60709      -4.66666       4.66666       46.9398       51.6065    
  19  0.511916     -0.669594      -1.19857       1.19857       47.5014       48.7000    
  20  0.870220     -0.139009     -0.248825      0.248825       48.7951       49.0440    
  21  0.594690     -0.519714     -0.930282      0.930282       48.1019       49.0322    
  22  0.659508     -0.416262     -0.745103      0.745103       48.4120       49.1571    
  23  0.702023     -0.353789     -0.633279      0.633279       47.6468       48.2801    
  24  0.178121      -1.72529      -3.08825       3.08825       48.5836       51.6718    
  25  0.622271     -0.474379     -0.849132      0.849132       48.2724       49.1215    
  26  0.877027     -0.131217     -0.234877      0.234877       48.8766       49.1115    
  27  0.206753      -1.57623      -2.82144       2.82144       47.7303       50.5518    
  28  0.927381     -0.753912E-01 -0.134949      0.134949       48.6480       48.7829    
  29  0.610274     -0.493848     -0.883981      0.883981       48.2988       49.1828    
  30  0.453676     -0.790373      -1.41476       1.41476       47.8469       49.2617    
  31  0.203335      -1.59290      -2.85127       2.85127       48.4341       51.2853    
  32  0.558786     -0.581989      -1.04175       1.04175       48.0552       49.0970    
  33  0.685013     -0.378317     -0.677183      0.677183       47.7850       48.4621    
  34  0.753574     -0.282929     -0.506439      0.506439       47.7893       48.2957    
  35  0.736990E-01  -2.60777      -4.66787       4.66787       47.9758       52.6437    
  36  0.719848     -0.328716     -0.588397      0.588397       48.3863       48.9747    
  37  0.177345E-01  -4.03224      -7.21766       7.21766       47.7233       54.9409    
  38  0.277334E-01  -3.58512      -6.41732       6.41732       47.5631       53.9804    
  39  0.228604      -1.47576      -2.64160       2.64160       49.5451       52.1867    
  40  0.874609     -0.133979     -0.239820      0.239820       48.3341       48.5739    
  41  0.875699     -0.132733     -0.237591      0.237591       48.3943       48.6319    
  42  0.540874     -0.614569      -1.10007       1.10007       49.3121       50.4122    
  43  0.343108E-01  -3.37230      -6.03637       6.03637       47.5679       53.6043    
  44  0.982551     -0.176027E-01 -0.315087E-01  0.315087E-01   48.7660       48.7975    
  45  0.201823      -1.60037      -2.86464       2.86464       48.3547       51.2193    
  46  0.116838      -2.14697      -3.84305       3.84305       48.4895       52.3325    
  47  0.520586     -0.652800      -1.16850       1.16850       48.1302       49.2987    
  48  0.515528     -0.662563      -1.18598       1.18598       48.6182       49.8042    
  49  0.814407     -0.205295     -0.367475      0.367475       48.7895       49.1570    
  50  0.436930     -0.827981      -1.48208       1.48208       47.8350       49.3170    
  51  0.802441     -0.220097     -0.393970      0.393970       47.6108       48.0047    
  52  0.366662      -1.00331      -1.79592       1.79592       48.3105       50.1065    
  53  0.915349     -0.884494E-01 -0.158323      0.158323       49.9618       50.1201    
  54  0.619345     -0.479093     -0.857571      0.857571       49.1738       50.0313    
  55  0.984856     -0.152594E-01 -0.273141E-01  0.273141E-01   48.6847       48.7120    
  56  0.594834     -0.519472     -0.929849      0.929849       49.2175       50.1474    
  57  0.295281      -1.21983      -2.18348       2.18348       48.0046       50.1881    
  58  0.363721      -1.01137      -1.81033       1.81033       48.5919       50.4022    
  59  0.113237      -2.17827      -3.89908       3.89908       49.5314       53.4305    
  60  0.684322     -0.379327     -0.678990      0.678990       48.9001       49.5791    
  61  0.172853E-01  -4.05790      -7.26359       7.26359       50.8673       58.1309    
  62  0.910904     -0.933174E-01 -0.167037      0.167037       47.6508       47.8179    
  63  0.792218     -0.232919     -0.416922      0.416922       47.4622       47.8792    
  64  0.644894E-02  -5.04384      -9.02841       9.02841       47.5468       56.5752    
  65  0.674921     -0.393160     -0.703752      0.703752       49.0487       49.7525    
  66  0.713821     -0.337122     -0.603445      0.603445       52.5290       53.1325    
  67  0.122871      -2.09662      -3.75292       3.75292       48.7413       52.4943    
  68  0.809527     -0.211305     -0.378233      0.378233       47.7162       48.0945    
  69  0.266630      -1.32189      -2.36617       2.36617       48.2631       50.6293    
  70  0.457713     -0.781513      -1.39890       1.39890       47.4424       48.8413    
loop,thermsimp(1:2)       52   1.54817       2.06700    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333       7389.10          0.83          1.12         23.87          0.54          0.04         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    334        675.67          0.84          1.11         23.87          0.45          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4     50.87
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.78999               346
loop is:       52
neval is:      333
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     334       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    335         47.35          0.83          1.11         23.87          0.50          0.04         26.36
iter,obj,time:    336         47.43          0.83          1.11         23.86          0.47          0.04         26.31
iter,obj,time:    337         47.41          0.84          1.11         23.89          0.39          0.04         26.27
iter,obj,time:    338         47.25          0.84          1.11         23.87          0.65          0.04         26.52
iter,obj,time:    339         47.45          0.84          1.12         23.91          0.73          0.04         26.64
iter,obj,time:    340         47.41          0.83          1.11         23.89          0.48          0.04         26.34
iter,obj,time:    341         47.69          0.83          1.12         23.92          0.51          0.04         26.42
iter,obj,time:    342         47.27          0.83          1.12         23.90          0.57          0.04         26.46
iter,obj,time:    343         47.41          0.82          1.11         23.90          0.41          0.04         26.29
iter,obj,time:    344         47.46          0.83          1.12         23.90          0.46          0.04         26.35
iter,obj,time:    345         47.33          0.83          1.12         23.89          0.40          0.04         26.28
iter,obj,time:    346         47.57          0.82          1.11         23.88          0.41          0.04         26.26
iter,obj,time:    347         47.67          0.83          1.12         23.89          0.46          0.04         26.35
iter,obj,time:    348         47.40          0.84          1.12         23.88          0.39          0.04         26.27
iter,obj,time:    349         47.02          0.82          1.11         23.91          0.60          0.04         26.48
iter,obj,time:    350         47.42          0.84          1.12         23.91          0.59          0.04         26.49
iter,obj,time:    351         47.84          0.83          1.12         23.93          0.63          0.04         26.55
iter,obj,time:    352         47.34          0.80          1.11         23.89          0.48          0.04         26.32
iter,obj,time:    353         47.84          0.84          1.12         23.92          0.43          0.04         26.35
iter,obj,time:    354         47.26          0.83          1.11         23.85          0.40          0.04         26.23
iter,obj,time:    355         47.54          0.83          1.12         23.88          0.48          0.04         26.34
iter,obj,time:    356         47.55          0.84          1.12         23.91          0.49          0.04         26.40
iter,obj,time:    357         47.68          0.84          1.12         23.90          0.38          0.04         26.28
iter,obj,time:    358         47.46          0.84          1.12         23.94          0.67          0.04         26.61
iter,obj,time:    359         47.42          0.83          1.12         23.87          0.54          0.04         26.40
iter,obj,time:    360         48.05          0.84          1.12         23.84          0.50          0.04         26.33
iter,obj,time:    361         47.28          0.83          1.12         23.86          0.44          0.04         26.29
iter,obj,time:    362         47.72          0.82          1.11         23.91          0.43          0.04         26.32
iter,obj,time:    363         47.77          0.83          1.12         23.89          0.41          0.04         26.29
iter,obj,time:    364         47.29          0.84          1.12         23.88          0.60          0.04         26.48
iter,obj,time:    365         52.99          0.83          1.12         23.91          0.43          0.04         26.33
iter,obj,time:    366         47.44          0.83          1.12         23.90          0.42          0.04         26.30
iter,obj,time:    367         47.54          0.83          1.12         23.84          0.56          0.04         26.39
iter,obj,time:    368         47.31          0.83          1.12         23.89          0.41          0.04         26.30
iter,obj,time:    369         47.67          0.84          1.12         23.91          0.41          0.04         26.31
iter,obj,time:    370         47.28          0.83          1.12         23.91          0.40          0.04         26.30
iter,obj,time:    371         47.50          0.84          1.12         23.94          0.57          0.04         26.50
iter,obj,time:    372         47.44          0.83          1.12         23.92          0.57          0.04         26.48
iter,obj,time:    373         47.10          0.84          1.12         23.91          0.47          0.04         26.38
iter,obj,time:    374         47.68          0.84          1.12         23.91          0.43          0.04         26.34
iter,obj,time:    375         47.69          0.84          1.12         23.89          0.41          0.04         26.29
iter,obj,time:    376         47.17          0.84          1.12         23.90          0.48          0.04         26.38
iter,obj,time:    377         47.52          0.83          1.12         23.90          0.38          0.04         26.27
iter,obj,time:    378         47.71          0.80          1.12         23.98          0.64          0.05         26.59
iter,obj,time:    379         47.81          0.83          1.12         23.98          0.42          0.04         26.39
iter,obj,time:    380         47.37          0.85          1.12         23.88          0.38          0.04         26.27
iter,obj,time:    381         47.53          0.83          1.12         23.85          0.57          0.04         26.40
iter,obj,time:    382         47.69          0.83          1.12         23.88          0.43          0.04         26.30
iter,obj,time:    383         47.44          0.83          1.11         23.90          0.45          0.04         26.33
iter,obj,time:    384         47.23          0.83          1.12         23.85          0.43          0.04         26.27
iter,obj,time:    385         47.48          0.84          1.12         23.87          0.48          0.04         26.34
iter,obj,time:    386         47.08          0.84          1.12         23.89          0.42          0.04         26.30
iter,obj,time:    387         47.57          0.83          1.12         23.87          0.37          0.04         26.24
iter,obj,time:    388         47.39          0.83          1.12         23.89          0.44          0.04         26.32
iter,obj,time:    389         47.30          0.84          1.12         23.93          0.32          0.04         26.24
iter,obj,time:    390         46.97          0.84          1.12         23.91          0.45          0.04         26.36
iter,obj,time:    391         47.34          0.83          1.12         23.89          0.39          0.04         26.27
iter,obj,time:    392         47.52          0.83          1.11         23.87          0.44          0.04         26.30
iter,obj,time:    393         47.84          0.84          1.12         23.89          0.44          0.04         26.33
iter,obj,time:    394         47.51          0.82          1.11         23.96          0.62          0.04         26.55
iter,obj,time:    395         47.87          0.84          1.12         23.90          0.53          0.04         26.43
iter,obj,time:    396         47.31          0.84          1.12         23.89          0.41          0.04         26.29
iter,obj,time:    397         48.92          0.83          1.12         23.89          0.43          0.04         26.32
iter,obj,time:    398         47.79          0.83          1.12         23.89          0.59          0.04         26.46
iter,obj,time:    399         47.40          0.84          1.12         23.89          0.45          0.04         26.33
iter,obj,time:    400         47.26          0.83          1.12         23.88          0.41          0.04         26.29
iter,obj,time:    401         47.32          0.83          1.12         23.88          0.50          0.04         26.38
iter,obj,time:    402         47.07          0.83          1.12         23.85          0.46          0.04         26.30
iter,obj,time:    403         50.69          0.83          1.12         23.90          0.42          0.04         26.31


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     404      70
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     402




loop,nloop:      52      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.78999               346
loop is:       53
neval is:      402


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.894994               415

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      402     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -3.02405       3.02405       47.1953       50.2193    
   2  0.714674     -0.335928     -0.300654      0.300654       47.3525       47.6532    
   3  0.977792     -0.224587E-01 -0.201004E-01  0.201004E-01   47.4331       47.4532    
   4  0.771231     -0.259767     -0.232490      0.232490       47.4087       47.6412    
   5  0.265148      -1.32747      -1.18808       1.18808       47.2503       48.4384    
   6  0.559491     -0.580728     -0.519748      0.519748       47.4495       47.9692    
   7  0.934824E-01  -2.36998      -2.12112       2.12112       47.4100       49.5312    
   8  0.928182     -0.745278E-01 -0.667019E-01  0.667019E-01   47.6895       47.7562    
   9  0.464905     -0.765922     -0.685495      0.685495       47.2747       47.9602    
  10  0.871919     -0.137059     -0.122667      0.122667       47.4083       47.5309    
  11  0.982233     -0.179265E-01 -0.160441E-01  0.160441E-01   47.4614       47.4774    
  12  0.426376     -0.852433     -0.762922      0.762922       47.3343       48.0973    
  13  0.471128E-01  -3.05521      -2.73439       2.73439       47.5743       50.3087    
  14  0.686439     -0.376238     -0.336731      0.336731       47.6729       48.0096    
  15  0.117826      -2.13855      -1.91399       1.91399       47.4037       49.3176    
  16  0.756878E-01  -2.58114      -2.31010       2.31010       47.0228       49.3329    
  17  0.196211      -1.62856      -1.45756       1.45756       47.4189       48.8764    
  18  0.431930     -0.839491     -0.751339      0.751339       47.8373       48.5886    
  19  0.707794     -0.345602     -0.309312      0.309312       47.3370       47.6463    
  20  0.174358E-01  -4.04923      -3.62404       3.62404       47.8383       51.4623    
  21  0.267976      -1.31686      -1.17858       1.17858       47.2596       48.4382    
  22  0.793866     -0.230841     -0.206601      0.206601       47.5418       47.7484    
  23  0.135848      -1.99622      -1.78661       1.78661       47.5498       49.3364    
  24  0.663958     -0.409536     -0.366532      0.366532       47.6783       48.0448    
  25  0.281101      -1.26904      -1.13578       1.13578       47.4631       48.5989    
  26  0.606466     -0.500106     -0.447592      0.447592       47.4206       47.8682    
  27  0.940056     -0.618158E-01 -0.553248E-01  0.553248E-01   48.0462       48.1016    
  28  0.124106      -2.08662      -1.86751       1.86751       47.2837       49.1513    
  29  0.205090      -1.58431      -1.41795       1.41795       47.7154       49.1333    
  30  0.852960     -0.159043     -0.142342      0.142342       47.7700       47.9124    
  31  0.241701      -1.42005      -1.27094       1.27094       47.2913       48.5623    
  32  0.744368     -0.295220     -0.264220      0.264220       52.9922       53.2564    
  33  0.279909      -1.27329      -1.13959       1.13959       47.4443       48.5839    
  34  0.142971      -1.94511      -1.74086       1.74086       47.5377       49.2785    
  35  0.367233      -1.00176     -0.896567      0.896567       47.3068       48.2034    
  36  0.839044     -0.175493     -0.157065      0.157065       47.6707       47.8277    
  37  0.762369     -0.271325     -0.242834      0.242834       47.2799       47.5228    
  38  0.414704     -0.880189     -0.787764      0.787764       47.5045       48.2922    
  39  0.294445      -1.22266      -1.09428       1.09428       47.4395       48.5337    
  40  0.296874      -1.21445      -1.08692       1.08692       47.1025       48.1894    
  41  0.834777     -0.180590     -0.161627      0.161627       47.6812       47.8428    
  42  0.399354     -0.917907     -0.821521      0.821521       47.6944       48.5159    
  43  0.948666     -0.526981E-01 -0.471644E-01  0.471644E-01   47.1740       47.2211    
  44  0.306553E-01  -3.48495      -3.11901       3.11901       47.5153       50.6343    
  45  0.768324E-01  -2.56613      -2.29667       2.29667       47.7101       50.0068    
  46  0.723813     -0.323222     -0.289281      0.289281       47.8076       48.0968    
  47  0.912222     -0.918720E-01 -0.822248E-01  0.822248E-01   47.3698       47.4520    
  48  0.846322     -0.166855     -0.149334      0.149334       47.5267       47.6760    
  49  0.704090     -0.350850     -0.314008      0.314008       47.6886       48.0026    
  50  0.443839     -0.812294     -0.726998      0.726998       47.4353       48.1623    
  51  0.790462     -0.235137     -0.210446      0.210446       47.2294       47.4399    
  52  0.134239      -2.00813      -1.79726       1.79726       47.4822       49.2795    
  53  0.720618     -0.327646     -0.293241      0.293241       47.0782       47.3715    
  54  0.489652     -0.714061     -0.639080      0.639080       47.5693       48.2083    
  55  0.493891E-01  -3.00802      -2.69216       2.69216       47.3866       50.0788    
  56  0.524875     -0.644595     -0.576909      0.576909       47.2953       47.8722    
  57  0.919627     -0.837868E-01 -0.749887E-01  0.749887E-01   46.9668       47.0418    
  58  0.372709     -0.986956     -0.883320      0.883320       47.3397       48.2230    
  59  0.121203      -2.11029      -1.88870       1.88870       47.5186       49.4073    
  60  0.195183      -1.63382      -1.46226       1.46226       47.8360       49.2982    
  61  0.325168      -1.12341      -1.00545       1.00545       47.5054       48.5108    
  62  0.248863      -1.39085      -1.24481       1.24481       47.8673       49.1121    
  63  0.910643     -0.936046E-01 -0.837756E-01  0.837756E-01   47.3078       47.3916    
  64  0.131372E-01  -4.33230      -3.87739       3.87739       48.9242       52.8016    
  65  0.308708      -1.17536      -1.05194       1.05194       47.7904       48.8424    
  66  0.863163     -0.147151     -0.131700      0.131700       47.4042       47.5359    
  67  0.437001     -0.827819     -0.740893      0.740893       47.2583       47.9991    
  68  0.933437     -0.688822E-01 -0.616491E-01  0.616491E-01   47.3177       47.3794    
  69  0.595007     -0.519181     -0.464664      0.464664       47.0706       47.5352    
  70  0.184309      -1.69114      -1.51356       1.51356       50.6947       52.2083    
loop,thermsimp(1:2)       53   3.02405      0.300654    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    404         51.37          0.84          1.12         23.82          0.50          0.04         26.32
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.894994               415
loop is:       53
neval is:      403
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.894994               415
loop is:       54
neval is:      403


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      403     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133     -0.435086      0.435086       46.9668       47.4019    
   2  0.438442     -0.824528     -0.737948      0.737948       47.1740       47.9119    
   3  0.666371     -0.405908     -0.363286      0.363286       47.0782       47.4415    
   4  0.419797     -0.867984     -0.776840      0.776840       47.3177       48.0946    
   5  0.662493     -0.411746     -0.368510      0.368510       47.3078       47.6763    
   6  0.261021      -1.34315      -1.20211       1.20211       47.2294       48.4316    
   7  0.451731     -0.794667     -0.711222      0.711222       47.3698       48.0810    
   8  0.858047     -0.153096     -0.137020      0.137020       47.4331       47.5701    
   9  0.678039     -0.388550     -0.347750      0.347750       47.4614       47.8091    
  10  0.257304      -1.35750      -1.21495       1.21495       47.2799       48.4949    
  11  0.379774     -0.968178     -0.866513      0.866513       47.4083       48.2748    
  12  0.200314      -1.60787      -1.43903       1.43903       47.0706       48.5096    
  13  0.702955E-01  -2.65505      -2.37625       2.37625       47.4042       49.7805    
  14  0.846007     -0.167228     -0.149668      0.149668       47.4087       47.5584    
  15  0.692217     -0.367856     -0.329229      0.329229       47.3370       47.6662    
  16  0.830541     -0.185678     -0.166181      0.166181       47.3525       47.5187    
  17  0.162133E-02  -6.42451      -5.74989       5.74989       47.5267       53.2766    
  18  0.829216     -0.187275     -0.167610      0.167610       47.5418       47.7094    
  19  0.464918     -0.765894     -0.685471      0.685471       47.6895       48.3750    
  20  0.204157      -1.58887      -1.42203       1.42203       47.6707       49.0927    
  21  0.203429      -1.59244      -1.42522       1.42522       47.6812       49.1064    
  22  0.403935     -0.906500     -0.811312      0.811312       47.4206       48.2319    
  23  0.508037     -0.677201     -0.606091      0.606091       47.2953       47.9014    
  24  0.337702      -1.08559     -0.971596      0.971596       47.7700       48.7416    
  25  0.375672     -0.979039     -0.876234      0.876234       47.2747       48.1509    
  26  0.218755      -1.51980      -1.36021       1.36021       47.4495       48.8097    
  27  0.803422     -0.218876     -0.195892      0.195892       47.2583       47.4541    
  28  0.324101      -1.12670      -1.00839       1.00839       47.6886       48.6970    
  29  0.804001     -0.218155     -0.195247      0.195247       47.6729       47.8682    
  30  0.727676     -0.317899     -0.284518      0.284518       47.6783       47.9628    
  31  0.769479     -0.262042     -0.234526      0.234526       47.8076       48.0421    
  32  0.632293     -0.458402     -0.410267      0.410267       47.3343       47.7446    
  33  0.300459      -1.20244      -1.07618       1.07618       48.0462       49.1224    
  34  0.567362     -0.566759     -0.507245      0.507245       47.4353       47.9425    
  35  0.803345     -0.218971     -0.195978      0.195978       47.1025       47.2985    
  36  0.764706     -0.268264     -0.240095      0.240095       47.3068       47.5469    
  37  0.159444      -1.83606      -1.64326       1.64326       47.5693       49.2125    
  38  0.951670     -0.495367E-01 -0.443350E-01  0.443350E-01   47.3397       47.3840    
  39  0.769198     -0.262407     -0.234852      0.234852       47.5045       47.7393    
  40  0.916532     -0.871588E-01 -0.780066E-01  0.780066E-01   47.2596       47.3376    
  41  0.146117E-01  -4.22593      -3.78218       3.78218       47.2503       51.0325    
  42  0.196164      -1.62880      -1.45777       1.45777       47.5054       48.9632    
  43  0.399482     -0.917586     -0.821233      0.821233       47.6944       48.5156    
  44  0.646732     -0.435823     -0.390059      0.390059       47.4395       47.8295    
  45  0.207790      -1.57122      -1.40624       1.40624       47.2913       48.6976    
  46  0.276388      -1.28595      -1.15092       1.15092       47.4443       48.5952    
  47  0.410494     -0.890394     -0.796897      0.796897       47.8373       48.6342    
  48  0.437747     -0.826115     -0.739367      0.739367       47.4631       48.2024    
  49  0.414886     -0.879752     -0.787372      0.787372       47.7904       48.5778    
  50  0.453890     -0.789901     -0.706957      0.706957       47.4189       48.1258    
  51  0.141383      -1.95628      -1.75086       1.75086       47.8673       49.6182    
  52  0.264375      -1.33039      -1.19069       1.19069       47.7154       48.9061    
  53  0.598599     -0.513163     -0.459278      0.459278       47.2837       47.7430    
  54  0.716868     -0.332864     -0.297911      0.297911       47.5377       47.8356    
  55  0.547773     -0.601894     -0.538691      0.538691       47.4822       48.0209    
  56  0.920744     -0.825729E-01 -0.739022E-01  0.739022E-01   47.8360       47.9099    
  57  0.394656     -0.929742     -0.832113      0.832113       47.4037       48.2358    
  58  0.439395     -0.822357     -0.736004      0.736004       47.0228       47.7588    
  59  0.890216     -0.116291     -0.104080      0.104080       47.5498       47.6539    
  60  0.693208     -0.366425     -0.327948      0.327948       47.5186       47.8465    
  61  0.747783     -0.290642     -0.260123      0.260123       47.4100       47.6702    
  62  0.408813     -0.894498     -0.800570      0.800570       47.7101       48.5107    
  63  0.175963E-03  -8.64523      -7.73743       7.73743       47.3866       55.1240    
  64  0.715035     -0.335424     -0.300203      0.300203       47.1953       47.4955    
  65  0.895535     -0.110334     -0.987486E-01  0.987486E-01   47.5743       47.6730    
  66  0.332554      -1.10095     -0.985347      0.985347       47.5153       48.5007    
  67  0.594595     -0.519874     -0.465284      0.465284       47.8383       48.3035    
  68  0.883454     -0.123916     -0.110904      0.110904       50.6947       50.8056    
  69  0.727087     -0.318709     -0.285243      0.285243       48.9242       49.2095    
  70  0.760468     -0.273821     -0.245068      0.245068       51.3663       51.6114    
loop,thermsimp(1:2)       54  0.435086      0.737948    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    405         47.09          0.82          1.11         23.85          0.73          0.04         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    406         47.99          0.84          1.11         23.88          0.59          0.04         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.894994               415
loop is:       54
neval is:      405
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.894994               415
loop is:       55
neval is:      405


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      405     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241     -0.419072      0.419072       47.1025       47.5216    
   2  0.909442     -0.949244E-01 -0.849567E-01  0.849567E-01   47.2596       47.3446    
   3  0.449837     -0.798870     -0.714984      0.714984       47.3397       48.0546    
   4  0.761598     -0.272336     -0.243739      0.243739       46.9668       47.2106    
   5  0.706800     -0.347007     -0.310570      0.310570       47.0782       47.3888    
   6  0.214343      -1.54018      -1.37845       1.37845       47.2583       48.6367    
   7  0.855661     -0.155881     -0.139512      0.139512       47.1953       47.3348    
   8  0.432924E-01  -3.13978      -2.81008       2.81008       47.3525       50.1626    
   9  0.902784     -0.102271     -0.915323E-01  0.915323E-01   47.3068       47.3984    
  10  0.706965     -0.346774     -0.310361      0.310361       47.4087       47.7191    
  11  0.826667     -0.190354     -0.170365      0.170365       47.4331       47.6035    
  12  0.824436     -0.193055     -0.172783      0.172783       47.5498       47.7226    
  13  0.442772     -0.814700     -0.729151      0.729151       47.3370       48.0661    
  14  0.416355     -0.876217     -0.784209      0.784209       47.4100       48.1942    
  15  0.268464      -1.31504      -1.17695       1.17695       47.5743       48.7512    
  16  0.779742     -0.248792     -0.222667      0.222667       47.3078       47.5305    
  17  0.406799E-01  -3.20202      -2.86579       2.86579       47.5418       50.4075    
  18  0.975397     -0.249106E-01 -0.222948E-01  0.222948E-01   47.5045       47.5268    
  19  0.425150E-01  -3.15790      -2.82630       2.82630       47.2837       50.1100    
  20  0.302481      -1.19574      -1.07018       1.07018       47.3343       48.4045    
  21  0.732033     -0.311930     -0.279175      0.279175       47.0228       47.3019    
  22  0.774561     -0.255459     -0.228634      0.228634       47.4614       47.6900    
  23  0.899897     -0.105475     -0.943994E-01  0.943994E-01   47.4395       47.5339    
  24  0.549624     -0.598520     -0.535672      0.535672       47.5377       48.0733    
  25  0.143543      -1.94112      -1.73729       1.73729       47.5186       49.2559    
  26  0.229055      -1.47379      -1.31904       1.31904       47.6729       48.9920    
  27  0.334206      -1.09600     -0.980911      0.980911       47.2953       48.2762    
  28  0.301620      -1.19859      -1.07273       1.07273       47.8360       48.9087    
  29  0.856030     -0.155449     -0.139126      0.139126       47.1740       47.3131    
  30  0.978878     -0.213482E-01 -0.191065E-01  0.191065E-01   47.4353       47.4544    
  31  0.890790E-01  -2.41823      -2.16430       2.16430       47.6783       49.8426    
  32  0.275076      -1.29071      -1.15517       1.15517       47.4822       48.6374    
  33  0.506865     -0.679511     -0.608158      0.608158       47.8076       48.4157    
  34  0.628553     -0.464334     -0.415576      0.415576       47.3698       47.7854    
  35  0.787972     -0.238293     -0.213271      0.213271       47.3177       47.5310    
  36  0.746168     -0.292804     -0.262058      0.262058       47.4189       47.6809    
  37  0.116954      -2.14598      -1.92064       1.92064       47.2747       49.1953    
  38  0.245368      -1.40500      -1.25746       1.25746       47.4631       48.7205    
  39  0.873952     -0.134729     -0.120582      0.120582       47.4206       47.5412    
  40  0.850596     -0.161818     -0.144826      0.144826       47.4037       47.5485    
  41  0.455763     -0.785783     -0.703271      0.703271       47.4083       48.1115    
  42  0.984333     -0.157910E-01 -0.141328E-01  0.141328E-01   47.8383       47.8524    
  43  0.956700     -0.442655E-01 -0.396174E-01  0.396174E-01   47.6895       47.7291    
  44  0.186161      -1.68114      -1.50461       1.50461       47.2294       48.7341    
  45  0.791379     -0.233979     -0.209409      0.209409       47.2799       47.4893    
  46  0.262937      -1.33584      -1.19557       1.19557       47.5153       48.7109    
  47  0.115228E-01  -4.46342      -3.99474       3.99474       47.0706       51.0653    
  48  0.324912      -1.12420      -1.00615       1.00615       47.7101       48.7163    
  49  0.164288      -1.80613      -1.61648       1.61648       47.6944       49.3108    
  50  0.334193E-02  -5.70121      -5.10255       5.10255       47.7904       52.8930    
  51  0.189130      -1.66532      -1.49045       1.49045       47.4443       48.9347    
  52  0.157956      -1.84544      -1.65166       1.65166       47.8373       49.4889    
  53  0.414399     -0.880925     -0.788422      0.788422       47.6886       48.4770    
  54  0.445375     -0.808838     -0.723905      0.723905       47.2913       48.0152    
  55  0.674924     -0.393155     -0.351871      0.351871       47.7700       48.1219    
  56  0.204431      -1.58752      -1.42082       1.42082       47.4495       48.8703    
  57  0.741769     -0.298718     -0.267351      0.267351       47.7154       47.9827    
  58  0.662845     -0.411215     -0.368035      0.368035       47.5054       47.8734    
  59  0.716249     -0.333728     -0.298684      0.298684       47.6707       47.9694    
  60  0.503649     -0.685876     -0.613855      0.613855       47.6812       48.2951    
  61  0.525560     -0.643292     -0.575742      0.575742       48.0462       48.6220    
  62  0.981258     -0.189199E-01 -0.169332E-01  0.169332E-01   48.9242       48.9412    
  63  0.892133     -0.114140     -0.102155      0.102155       47.5693       47.6714    
  64  0.239527E-01  -3.73167      -3.33982       3.33982       47.8673       51.2071    
  65  0.819895E-01  -2.50116      -2.23853       2.23853       47.4042       49.6427    
  66  0.567274     -0.566913     -0.507384      0.507384       50.6947       51.2021    
  67  0.543991     -0.608823     -0.544892      0.544892       47.2503       47.7952    
  68  0.962374     -0.383523E-01 -0.343251E-01  0.343251E-01   51.3663       51.4007    
  69  0.514511     -0.664538     -0.594758      0.594758       47.5267       48.1214    
  70  0.845541     -0.167779     -0.150161      0.150161       47.0941       47.2442    
loop,thermsimp(1:2)       55  0.419072      0.849567E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    407         47.08          0.83          1.12         23.88          0.45          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    408         48.77          0.83          1.12         23.89          0.45          0.04         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.894994               415
loop is:       55
neval is:      407
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.894994               415
loop is:       56
neval is:      407


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      407     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307      -1.25574       1.25574       46.9668       48.2226    
   2  0.963480     -0.372033E-01 -0.332967E-01  0.332967E-01   47.0941       47.1274    
   3  0.633143     -0.457059     -0.409065      0.409065       47.0228       47.4318    
   4  0.939850E-02  -4.66721      -4.17712       4.17712       47.1740       51.3511    
   5  0.796978     -0.226928     -0.203099      0.203099       47.1953       47.3984    
   6  0.229125      -1.47349      -1.31876       1.31876       47.2596       48.5784    
   7  0.926958     -0.758467E-01 -0.678823E-01  0.678823E-01   47.0782       47.1461    
   8  0.687512     -0.374676     -0.335333      0.335333       47.3068       47.6422    
   9  0.695030     -0.363800     -0.325599      0.325599       47.4353       47.7609    
  10  0.900736     -0.104543     -0.935650E-01  0.935650E-01   47.2799       47.3735    
  11  0.867179     -0.142510     -0.127545      0.127545       47.1025       47.2300    
  12  0.879271     -0.128662     -0.115152      0.115152       47.5045       47.6196    
  13  0.197557      -1.62173      -1.45144       1.45144       47.3078       48.7593    
  14  0.790701     -0.234835     -0.210176      0.210176       47.3177       47.5279    
  15  0.807456     -0.213867     -0.191409      0.191409       47.4395       47.6309    
  16  0.688117     -0.373796     -0.334545      0.334545       47.4206       47.7551    
  17  0.227000      -1.48280      -1.32710       1.32710       47.4037       48.7308    
  18  0.374715     -0.981589     -0.878516      0.878516       47.4331       48.3116    
  19  0.176077      -1.73683      -1.55445       1.55445       47.5693       49.1237    
  20  0.446126E-01  -3.10974      -2.78320       2.78320       47.4189       50.2021    
  21  0.997763E-01  -2.30482      -2.06280       2.06280       47.4614       49.5242    
  22  0.142978E-01  -4.24765      -3.80162       3.80162       47.4087       51.2103    
  23  0.652216     -0.427379     -0.382502      0.382502       47.5498       47.9323    
  24  0.909797     -0.945339E-01 -0.846072E-01  0.846072E-01   47.6895       47.7741    
  25  0.145015      -1.93092      -1.72816       1.72816       47.3698       49.0979    
  26  0.189723      -1.66219      -1.48765       1.48765       47.2503       48.7380    
  27  0.260997      -1.34324      -1.20220       1.20220       47.8383       49.0405    
  28  0.167755      -1.78525      -1.59779       1.59779       47.5054       49.1032    
  29  0.148939      -1.90422      -1.70426       1.70426       47.6707       49.3749    
  30  0.209474      -1.56315      -1.39901       1.39901       47.7154       49.1144    
  31  0.594522     -0.519998     -0.465395      0.465395       47.2913       47.7567    
  32  0.401703     -0.912043     -0.816273      0.816273       47.3397       48.1559    
  33  0.306469      -1.18264      -1.05846       1.05846       47.3370       48.3954    
  34  0.879335     -0.128589     -0.115086      0.115086       47.5377       47.6528    
  35  0.920707     -0.826134E-01 -0.739385E-01  0.739385E-01   47.4083       47.4822    
  36  0.215616      -1.53425      -1.37315       1.37315       47.5267       48.8998    
  37  0.821708     -0.196370     -0.175750      0.175750       47.7700       47.9458    
  38  0.935240     -0.669517E-01 -0.599213E-01  0.599213E-01   47.4100       47.4700    
  39  0.691932     -0.368268     -0.329597      0.329597       47.2953       47.6249    
  40  0.493152     -0.706938     -0.632705      0.632705       47.6812       48.3139    
  41  0.362160      -1.01567     -0.909017      0.909017       47.3343       48.2433    
  42  0.636318     -0.452056     -0.404587      0.404587       47.8076       48.2122    
  43  0.178369      -1.72390      -1.54288       1.54288       47.6886       49.2315    
  44  0.987372     -0.127089E-01 -0.113744E-01  0.113744E-01   48.0462       48.0576    
  45  0.557690     -0.583953     -0.522634      0.522634       47.2583       47.7809    
  46  0.434391     -0.833811     -0.746256      0.746256       47.4822       48.2285    
  47  0.759572     -0.275001     -0.246124      0.246124       47.5153       47.7614    
  48  0.578559     -0.547214     -0.489753      0.489753       47.7101       48.1999    
  49  0.262392      -1.33792      -1.19743       1.19743       47.4631       48.6605    
  50  0.615619     -0.485127     -0.434185      0.434185       47.2294       47.6636    
  51  0.580502     -0.543861     -0.486753      0.486753       47.5743       48.0610    
  52  0.434749     -0.832986     -0.745517      0.745517       47.4495       48.1950    
  53  0.741569     -0.298987     -0.267592      0.267592       47.8360       48.1036    
  54  0.207475      -1.57274      -1.40760       1.40760       47.4443       48.8519    
  55  0.610742     -0.493081     -0.441304      0.441304       48.9242       49.3655    
  56  0.746759     -0.292013     -0.261350      0.261350       47.6729       47.9343    
  57  0.846394     -0.166771     -0.149259      0.149259       47.2747       47.4239    
  58  0.114011      -2.17146      -1.94344       1.94344       47.5186       49.4620    
  59  0.148375      -1.90801      -1.70766       1.70766       47.6944       49.4020    
  60  0.610037     -0.494236     -0.442338      0.442338       47.8373       48.2796    
  61  0.104069      -2.26270      -2.02510       2.02510       47.4042       49.4293    
  62  0.570721     -0.560855     -0.501962      0.501962       47.6783       48.1802    
  63  0.154528      -1.86738      -1.67129       1.67129       47.2837       48.9550    
  64  0.365341      -1.00692     -0.901190      0.901190       47.3525       48.2537    
  65  0.856377     -0.155044     -0.138763      0.138763       47.5418       47.6805    
  66  0.758370     -0.276584     -0.247541      0.247541       47.0706       47.3181    
  67  0.641541     -0.443881     -0.397271      0.397271       50.6947       51.0920    
  68  0.744629E-01  -2.59745      -2.32471       2.32471       47.8673       50.1920    
  69  0.186851      -1.67744      -1.50130       1.50130       51.3663       52.8676    
  70  0.431508     -0.840469     -0.752215      0.752215       47.0828       47.8350    
loop,thermsimp(1:2)       56   1.25574      0.332967E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    409         53.00          0.84          1.13         23.90          0.35          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    410         48.37          0.83          1.12         23.88          0.46          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     48.37
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.894994               415
loop is:       56
neval is:      409
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.894994               415
loop is:       57
neval is:      409


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      409     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105      -1.06599       1.06599       47.0941       48.1601    
   2  0.729962     -0.314762     -0.281710      0.281710       47.0782       47.3599    
   3  0.788140     -0.238080     -0.213080      0.213080       47.1025       47.3156    
   4  0.718031     -0.331242     -0.296460      0.296460       47.0706       47.3670    
   5  0.603575     -0.504885     -0.451869      0.451869       47.2799       47.7318    
   6  0.287757      -1.24564      -1.11484       1.11484       47.1953       48.3101    
   7  0.690986     -0.369635     -0.330821      0.330821       47.2747       47.6055    
   8  0.976315     -0.239695E-01 -0.214526E-01  0.214526E-01   47.0228       47.0442    
   9  0.983892     -0.162393E-01 -0.145341E-01  0.145341E-01   47.4100       47.4246    
  10  0.858769     -0.152255     -0.136267      0.136267       47.4083       47.5445    
  11  0.968889     -0.316048E-01 -0.282861E-01  0.282861E-01   47.3177       47.3460    
  12  0.364921      -1.00807     -0.902220      0.902220       47.5045       48.4067    
  13  0.540930     -0.614466     -0.549943      0.549943       47.2953       47.8452    
  14  0.812278E-01  -2.51050      -2.24688       2.24688       47.4395       49.6863    
  15  0.919841     -0.835539E-01 -0.747803E-01  0.747803E-01   47.3068       47.3816    
  16  0.275462      -1.28930      -1.15392       1.15392       47.5377       48.6916    
  17  0.704362     -0.350463     -0.313663      0.313663       47.2294       47.5431    
  18  0.896809     -0.108913     -0.974763E-01  0.974763E-01   47.5418       47.6392    
  19  0.166873      -1.79052      -1.60251       1.60251       47.4206       49.0231    
  20  0.927791E-02  -4.68012      -4.18868       4.18868       47.2913       51.4800    
  21  0.906733     -0.979074E-01 -0.876265E-01  0.876265E-01   47.4353       47.5229    
  22  0.575421     -0.552654     -0.494622      0.494622       47.5153       48.0099    
  23  0.975069     -0.252469E-01 -0.225959E-01  0.225959E-01   47.6895       47.7121    
  24  0.610094     -0.494143     -0.442255      0.442255       47.2583       47.7005    
  25  0.823028     -0.194765     -0.174313      0.174313       47.0828       47.2571    
  26  0.709022     -0.343869     -0.307760      0.307760       47.5498       47.8576    
  27  0.956893     -0.440633E-01 -0.394364E-01  0.394364E-01   47.6729       47.7124    
  28  0.897850E-01  -2.41034      -2.15724       2.15724       47.7700       49.9273    
  29  0.836996     -0.177936     -0.159252      0.159252       48.0462       48.2055    
  30  0.688664     -0.373001     -0.333834      0.333834       47.5743       47.9081    
  31  0.587454     -0.531957     -0.476098      0.476098       47.8360       48.3121    
  32  0.880970     -0.126731     -0.113424      0.113424       47.3397       47.4531    
  33  0.506724     -0.679789     -0.608407      0.608407       47.6783       48.2867    
  34  0.802262     -0.220320     -0.197185      0.197185       47.4495       47.6467    
  35  0.764787E-01  -2.57074      -2.30080       2.30080       47.7101       50.0109    
  36  0.907101     -0.975014E-01 -0.872631E-01  0.872631E-01   47.8076       47.8948    
  37  0.797350     -0.226461     -0.202682      0.202682       46.9668       47.1695    
  38  0.257375      -1.35722      -1.21470       1.21470       47.4822       48.6969    
  39  0.643190     -0.441315     -0.394974      0.394974       47.3343       47.7293    
  40  0.513768     -0.665984     -0.596051      0.596051       47.3525       47.9486    
  41  0.850264     -0.162208     -0.145175      0.145175       47.8373       47.9824    
  42  0.200819      -1.60535      -1.43678       1.43678       47.4331       48.8699    
  43  0.331940      -1.10280     -0.987000      0.987000       47.6812       48.6682    
  44  0.900490     -0.104816     -0.938097E-01  0.938097E-01   47.3370       47.4308    
  45  0.618957     -0.479719     -0.429346      0.429346       47.2596       47.6890    
  46  0.395756     -0.926956     -0.829620      0.829620       47.4631       48.2927    
  47  0.528166     -0.638345     -0.571315      0.571315       47.4037       47.9750    
  48  0.586635     -0.533352     -0.477346      0.477346       47.2503       47.7277    
  49  0.705559     -0.348765     -0.312143      0.312143       47.3078       47.6200    
  50  0.191018      -1.65539      -1.48156       1.48156       47.4443       48.9258    
  51  0.581133     -0.542775     -0.485780      0.485780       47.5267       48.0125    
  52  0.297529      -1.21224      -1.08495       1.08495       47.2837       48.3687    
  53  0.532486     -0.630198     -0.564023      0.564023       47.8383       48.4023    
  54  0.396084     -0.926129     -0.828879      0.828879       47.3698       48.1987    
  55  0.209334      -1.56382      -1.39961       1.39961       47.5054       48.9050    
  56  0.632068     -0.458758     -0.410586      0.410586       47.7154       48.1260    
  57  0.941424     -0.603613E-01 -0.540230E-01  0.540230E-01   47.5693       47.6233    
  58  0.875379     -0.133099     -0.119123      0.119123       47.6886       47.8077    
  59  0.497903     -0.697350     -0.624124      0.624124       48.9242       49.5483    
  60  0.840483     -0.173779     -0.155531      0.155531       47.6707       47.8262    
  61  0.230101      -1.46924      -1.31496       1.31496       47.6944       49.0093    
  62  0.213210      -1.54548      -1.38319       1.38319       47.4042       48.7874    
  63  0.412073     -0.886554     -0.793460      0.793460       47.5186       48.3120    
  64  0.264912      -1.32836      -1.18887       1.18887       47.4614       48.6503    
  65  0.234943      -1.44841      -1.29632       1.29632       47.8673       49.1636    
  66  0.957879     -0.430340E-01 -0.385152E-01  0.385152E-01   47.4189       47.4574    
  67  0.458250     -0.780340     -0.698399      0.698399       50.6947       51.3931    
  68  0.218142E-01  -3.82520      -3.42353       3.42353       47.4087       50.8322    
  69  0.340067E-01  -3.38120      -3.02615       3.02615       47.1740       50.2001    
  70  0.897872     -0.107728     -0.964159E-01  0.964159E-01   48.3688       48.4652    
loop,thermsimp(1:2)       57   1.06599      0.281710    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    411         47.12          0.82          1.11         23.89          0.39          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    412         47.31          0.83          1.12         23.88          0.41          0.04         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.894994               415
loop is:       57
neval is:      411
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.894994               415
loop is:       58
neval is:      411


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      411     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486     -0.567861      0.567861       47.0228       47.5906    
   2  0.175946E-01  -4.04016      -3.61592       3.61592       46.9668       50.5828    
   3  0.419998     -0.867504     -0.776411      0.776411       47.0828       47.8592    
   4  0.448197E-01  -3.10511      -2.77905       2.77905       47.1025       49.8815    
   5  0.501784     -0.689586     -0.617175      0.617175       47.3177       47.9349    
   6  0.858173     -0.152949     -0.136889      0.136889       47.0782       47.2151    
   7  0.101932      -2.28345      -2.04368       2.04368       47.0706       49.1143    
   8  0.453268     -0.791273     -0.708184      0.708184       47.3068       48.0150    
   9  0.128092      -2.05501      -1.83922       1.83922       47.4100       49.2493    
  10  0.779644     -0.248918     -0.222780      0.222780       47.3370       47.5597    
  11  0.769943E-01  -2.56402      -2.29479       2.29479       47.3397       49.6344    
  12  0.140214      -1.96458      -1.75829       1.75829       47.4189       49.1772    
  13  0.571588     -0.559337     -0.500603      0.500603       47.4353       47.9359    
  14  0.455096     -0.787247     -0.704581      0.704581       47.2294       47.9340    
  15  0.594240     -0.520471     -0.465819      0.465819       47.4083       47.8741    
  16  0.833288     -0.182376     -0.163225      0.163225       47.2747       47.4379    
  17  0.807090E-01  -2.51691      -2.25261       2.25261       47.3078       49.5605    
  18  0.430313     -0.843242     -0.754696      0.754696       47.5693       48.3240    
  19  0.990463     -0.958277E-02 -0.857652E-02  0.857652E-02   47.5418       47.5503    
  20  0.907906     -0.966144E-01 -0.864693E-01  0.864693E-01   47.4495       47.5360    
  21  0.607469     -0.498455     -0.446114      0.446114       47.2596       47.7057    
  22  0.927102     -0.756916E-01 -0.677435E-01  0.677435E-01   47.2583       47.3260    
  23  0.379122     -0.969896     -0.868051      0.868051       47.6895       48.5576    
  24  0.183121E-01  -4.00019      -3.58015       3.58015       47.6729       51.2531    
  25  0.561966     -0.576313     -0.515797      0.515797       47.2503       47.7661    
  26  0.638772     -0.448208     -0.401143      0.401143       47.3343       47.7355    
  27  0.234202      -1.45157      -1.29915       1.29915       47.2799       48.5791    
  28  0.257221      -1.35782      -1.21524       1.21524       47.6886       48.9038    
  29  0.688379     -0.373416     -0.334205      0.334205       47.6707       48.0049    
  30  0.360237E-01  -3.32358      -2.97458       2.97458       47.2953       50.2699    
  31  0.849177     -0.163487     -0.146320      0.146320       47.5498       47.6962    
  32  0.324868E-01  -3.42692      -3.06707       3.06707       47.8076       50.8746    
  33  0.216483E-01  -3.83283      -3.43036       3.43036       47.5743       51.0046    
  34  0.794095     -0.230552     -0.206342      0.206342       47.3525       47.5589    
  35  0.453180     -0.791465     -0.708356      0.708356       47.4037       48.1120    
  36  0.286278      -1.25079      -1.11945       1.11945       47.8373       48.9567    
  37  0.931500     -0.709590E-01 -0.635079E-01  0.635079E-01   47.5153       47.5788    
  38  0.483424     -0.726861     -0.650537      0.650537       47.5267       48.1772    
  39  0.782276     -0.245547     -0.219763      0.219763       47.7154       47.9351    
  40  0.976661     -0.236156E-01 -0.211358E-01  0.211358E-01   47.0941       47.1152    
  41  0.707981     -0.345338     -0.309075      0.309075       47.3698       47.6789    
  42  0.101993      -2.28285      -2.04314       2.04314       48.0462       50.0894    
  43  0.690974E-01  -2.67224      -2.39164       2.39164       47.6783       50.0699    
  44  0.767576E-01  -2.56710      -2.29754       2.29754       47.4631       49.7606    
  45  0.584825     -0.536443     -0.480113      0.480113       47.1953       47.6754    
  46  0.588828     -0.529621     -0.474008      0.474008       47.5186       47.9926    
  47  0.894562     -0.111421     -0.997210E-01  0.997210E-01   47.8360       47.9357    
  48  0.260723      -1.34430      -1.20314       1.20314       47.2837       48.4869    
  49  0.773456E-01  -2.55947      -2.29071       2.29071       47.8383       50.1290    
  50  0.848651E-01  -2.46669      -2.20767       2.20767       47.5045       49.7122    
  51  0.992803     -0.722305E-02 -0.646459E-02  0.646459E-02   48.3688       48.3753    
  52  0.529202     -0.636386     -0.569561      0.569561       47.4614       48.0309    
  53  0.540374     -0.615494     -0.550864      0.550864       47.6812       48.2321    
  54  0.185914      -1.68247      -1.50580       1.50580       47.5377       49.0435    
  55  0.764153     -0.268988     -0.240742      0.240742       47.4822       47.7229    
  56  0.931974E-01  -2.37304      -2.12385       2.12385       47.4042       49.5281    
  57  0.753946     -0.282434     -0.252777      0.252777       47.4331       47.6859    
  58  0.279731      -1.27393      -1.14016       1.14016       47.5054       48.6455    
  59  0.790083     -0.235617     -0.210876      0.210876       47.4443       47.6551    
  60  0.179541      -1.71735      -1.53702       1.53702       47.6944       49.2314    
  61  0.424504     -0.856835     -0.766862      0.766862       47.4206       48.1874    
  62  0.359861      -1.02204     -0.914717      0.914717       47.8673       48.7820    
  63  0.234475      -1.45041      -1.29811       1.29811       48.9242       50.2223    
  64  0.320303      -1.13849      -1.01894       1.01894       47.4395       48.4584    
  65  0.558182     -0.583071     -0.521845      0.521845       47.7700       48.2919    
  66  0.460702     -0.775003     -0.693623      0.693623       47.7101       48.4037    
  67  0.627136E-01  -2.76918      -2.47840       2.47840       47.1740       49.6524    
  68  0.673665     -0.395022     -0.353542      0.353542       47.4087       47.7622    
  69  0.540500     -0.615261     -0.550655      0.550655       50.6947       51.2454    
  70  0.277195      -1.28303      -1.14831       1.14831       47.1197       48.2680    
loop,thermsimp(1:2)       58  0.567861       3.61592    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    413         47.22          0.83          1.12         23.86          0.50          0.04         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    414         47.69          0.83          1.12         23.84          0.63          0.04         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.894994               415
loop is:       58
neval is:      413
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.894994               415
loop is:       59
neval is:      413


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      413     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01 -0.488140E-01  0.488140E-01   47.0941       47.1429    
   2  0.224221      -1.49512      -1.33812       1.33812       47.0782       48.4164    
   3  0.699642     -0.357186     -0.319679      0.319679       47.2583       47.5779    
   4  0.490916     -0.711482     -0.636772      0.636772       47.2747       47.9114    
   5  0.204251      -1.58840      -1.42161       1.42161       47.4495       48.8711    
   6  0.356522      -1.03136     -0.923060      0.923060       47.5418       48.4648    
   7  0.745938     -0.293113     -0.262334      0.262334       47.3525       47.6149    
   8  0.451533     -0.795107     -0.711616      0.711616       47.3370       48.0486    
   9  0.101038      -2.29226      -2.05156       2.05156       47.5153       49.5669    
  10  0.826978     -0.189977     -0.170028      0.170028       47.0228       47.1928    
  11  0.212337      -1.54958      -1.38686       1.38686       47.4443       48.8311    
  12  0.490540     -0.712248     -0.637458      0.637458       47.1953       47.8327    
  13  0.672078     -0.397381     -0.355653      0.355653       47.3698       47.7254    
  14  0.690580     -0.370223     -0.331347      0.331347       47.4331       47.7645    
  15  0.513190     -0.667108     -0.597058      0.597058       47.5498       48.1469    
  16  0.268393      -1.31530      -1.17719       1.17719       47.2596       48.4368    
  17  0.896898     -0.108813     -0.973870E-01  0.973870E-01   47.4822       47.5796    
  18  0.911953     -0.921674E-01 -0.824892E-01  0.824892E-01   47.3343       47.4168    
  19  0.355703      -1.03366     -0.925117      0.925117       47.4087       48.3338    
  20  0.293818      -1.22479      -1.09618       1.09618       47.2503       48.3465    
  21  0.713392     -0.337724     -0.302261      0.302261       47.0828       47.3851    
  22  0.660627     -0.414565     -0.371033      0.371033       47.4083       47.7793    
  23  0.795097     -0.229291     -0.205214      0.205214       47.2294       47.4347    
  24  0.919484     -0.839428E-01 -0.751283E-01  0.751283E-01   47.3177       47.3928    
  25  0.976382     -0.239014E-01 -0.213916E-01  0.213916E-01   47.7154       47.7368    
  26  0.922195     -0.809991E-01 -0.724937E-01  0.724937E-01   47.8360       47.9085    
  27  0.436062     -0.829970     -0.742818      0.742818       47.4353       48.1781    
  28  0.271848      -1.30251      -1.16574       1.16574       47.5186       48.6843    
  29  0.389360     -0.943252     -0.844205      0.844205       47.6707       48.5149    
  30  0.314178E-01  -3.46038      -3.09702       3.09702       47.3068       50.4038    
  31  0.545460     -0.606126     -0.542479      0.542479       47.4614       48.0039    
  32  0.925479E-01  -2.38003      -2.13011       2.13011       47.4037       49.5338    
  33  0.971973     -0.284273E-01 -0.254423E-01  0.254423E-01   47.5267       47.5521    
  34  0.403500     -0.907578     -0.812276      0.812276       47.4206       48.2328    
  35  0.392926     -0.934133     -0.836043      0.836043       47.6812       48.5173    
  36  0.718758     -0.330230     -0.295554      0.295554       47.1197       47.4153    
  37  0.746082     -0.292920     -0.262161      0.262161       47.7700       48.0322    
  38  0.353478      -1.03993     -0.930734      0.930734       47.5693       48.5000    
  39  0.843229     -0.170517     -0.152612      0.152612       48.3688       48.5214    
  40  0.388011     -0.946720     -0.847309      0.847309       47.7101       48.5574    
  41  0.969569     -0.309034E-01 -0.276583E-01  0.276583E-01   47.4395       47.4671    
  42  0.441380E-01  -3.12043      -2.79277       2.79277       47.2837       50.0765    
  43  0.533000     -0.629233     -0.563160      0.563160       47.6895       48.2527    
  44  0.288396      -1.24342      -1.11285       1.11285       47.2799       48.3928    
  45  0.683115     -0.381092     -0.341075      0.341075       47.5054       47.8465    
  46  0.339511      -1.08025     -0.966817      0.966817       47.8673       48.8341    
  47  0.150420E-01  -4.19691      -3.75620       3.75620       47.6886       51.4448    
  48  0.141026      -1.95881      -1.75312       1.75312       47.8373       49.5904    
  49  0.421666     -0.863541     -0.772864      0.772864       47.5377       48.3105    
  50  0.953496     -0.476201E-01 -0.426197E-01  0.426197E-01   47.0706       47.1132    
  51  0.966647     -0.339215E-01 -0.303595E-01  0.303595E-01   47.4189       47.4492    
  52  0.365434      -1.00667     -0.900964      0.900964       47.6944       48.5953    
  53  0.314209      -1.15770      -1.03613       1.03613       47.4100       48.4462    
  54  0.612536     -0.490148     -0.438679      0.438679       47.4042       47.8429    
  55  0.962603     -0.381139E-01 -0.341117E-01  0.341117E-01   47.3078       47.3420    
  56  0.518973     -0.655904     -0.587030      0.587030       47.3397       47.9267    
  57  0.963657     -0.370202E-01 -0.331328E-01  0.331328E-01   47.1740       47.2071    
  58  0.423866     -0.858338     -0.768208      0.768208       47.5045       48.2727    
  59  0.195959      -1.62985      -1.45871       1.45871       47.4631       48.9218    
  60  0.108838      -2.21789      -1.98500       1.98500       47.1025       49.0875    
  61  0.196446      -1.62737      -1.45648       1.45648       47.6783       49.1348    
  62  0.950303     -0.509747E-01 -0.456220E-01  0.456220E-01   48.0462       48.0919    
  63  0.363538      -1.01187     -0.905619      0.905619       47.8383       48.7439    
  64  0.834223     -0.181254     -0.162221      0.162221       48.9242       49.0864    
  65  0.529644     -0.635549     -0.568813      0.568813       47.2953       47.8641    
  66  0.944564     -0.570321E-01 -0.510434E-01  0.510434E-01   46.9668       47.0179    
  67  0.534482     -0.626456     -0.560675      0.560675       47.8076       48.3682    
  68  0.238252      -1.43443      -1.28380       1.28380       47.5743       48.8581    
  69  0.335731      -1.09145     -0.976837      0.976837       50.6947       51.6716    
  70  0.396637     -0.924734     -0.827631      0.827631       47.2168       48.0445    
loop,thermsimp(1:2)       59  0.488140E-01   1.33812    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    415        676.28          0.83          1.11         23.81          0.50          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    416         48.10          0.83          1.11         23.79          0.62          0.04         26.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     48.10
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.894994               415
loop is:       59
neval is:      415
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.894994               415
loop is:       60
neval is:      415


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      415     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808     -0.946974      0.946974       46.9668       47.9138    
   2  0.605757     -0.501276     -0.448639      0.448639       47.0706       47.5192    
   3  0.690633     -0.370146     -0.331278      0.331278       47.0941       47.4254    
   4  0.400665     -0.914628     -0.818587      0.818587       47.0228       47.8414    
   5  0.862165     -0.148309     -0.132735      0.132735       47.1740       47.3067    
   6  0.874011     -0.134662     -0.120522      0.120522       47.3078       47.4284    
   7  0.389525     -0.942826     -0.843824      0.843824       47.0828       47.9266    
   8  0.102225E-01  -4.58317      -4.10191       4.10191       47.3177       51.4196    
   9  0.102697      -2.27597      -2.03698       2.03698       47.1197       49.1567    
  10  0.818271     -0.200561     -0.179501      0.179501       47.3343       47.5138    
  11  0.888768     -0.117920     -0.105537      0.105537       47.2294       47.3350    
  12  0.539210     -0.617651     -0.552794      0.552794       47.4189       47.9717    
  13  0.317914      -1.14597      -1.02564       1.02564       47.4395       48.4651    
  14  0.437422     -0.826857     -0.740032      0.740032       47.5267       48.2667    
  15  0.925263     -0.776773E-01 -0.695207E-01  0.695207E-01   47.2583       47.3278    
  16  0.422436     -0.861717     -0.771231      0.771231       47.4822       48.2534    
  17  0.965248     -0.353697E-01 -0.316557E-01  0.316557E-01   47.3525       47.3842    
  18  0.771278     -0.259706     -0.232435      0.232435       47.3698       47.6022    
  19  0.902488     -0.102600     -0.918264E-01  0.918264E-01   47.7154       47.8072    
  20  0.512816     -0.667839     -0.597712      0.597712       47.4331       48.0308    
  21  0.915966     -0.877758E-01 -0.785588E-01  0.785588E-01   47.4083       47.4868    
  22  0.612605     -0.490035     -0.438578      0.438578       47.1953       47.6339    
  23  0.323528      -1.12847      -1.00997       1.00997       47.4042       48.4142    
  24  0.206646      -1.57675      -1.41118       1.41118       47.5054       48.9166    
  25  0.481057     -0.731769     -0.654928      0.654928       47.2953       47.9502    
  26  0.287887E-01  -3.54777      -3.17523       3.17523       47.8360       51.0112    
  27  0.996968     -0.303648E-02 -0.271763E-02  0.271763E-02   47.2747       47.2774    
  28  0.132770      -2.01914      -1.80712       1.80712       47.3397       49.1468    
  29  0.716038     -0.334023     -0.298948      0.298948       47.4614       47.7603    
  30  0.229552      -1.47162      -1.31709       1.31709       47.7700       49.0871    
  31  0.236358      -1.44241      -1.29095       1.29095       47.2168       48.5078    
  32  0.542780     -0.611051     -0.546887      0.546887       47.3370       47.8838    
  33  0.875156     -0.133353     -0.119350      0.119350       48.0462       48.1656    
  34  0.988730     -0.113343E-01 -0.101441E-01  0.101441E-01   47.5498       47.5600    
  35  0.244332      -1.40923      -1.26125       1.26125       47.4353       48.6965    
  36  0.659246     -0.416659     -0.372907      0.372907       47.4206       47.7935    
  37  0.457872     -0.781166     -0.699139      0.699139       47.6895       48.3887    
  38  0.380652E-01  -3.26846      -2.92525       2.92525       47.5045       50.4297    
  39  0.358843      -1.02487     -0.917252      0.917252       47.5377       48.4549    
  40  0.846233     -0.166960     -0.149428      0.149428       47.4087       47.5581    
  41  0.359308      -1.02358     -0.916095      0.916095       47.2503       48.1664    
  42  0.533329     -0.628617     -0.562609      0.562609       47.8076       48.3702    
  43  0.645289     -0.438058     -0.392059      0.392059       47.2799       47.6720    
  44  0.311850      -1.16523      -1.04287       1.04287       47.0782       48.1211    
  45  0.270084      -1.30902      -1.17157       1.17157       47.2596       48.4312    
  46  0.530313     -0.634287     -0.567683      0.567683       47.4100       47.9777    
  47  0.975874     -0.244213E-01 -0.218569E-01  0.218569E-01   47.5418       47.5636    
  48  0.313811      -1.15896      -1.03727       1.03727       47.5693       48.6065    
  49  0.932688     -0.696844E-01 -0.623671E-01  0.623671E-01   47.6707       47.7330    
  50  0.357359      -1.02901     -0.920962      0.920962       47.6812       48.6022    
  51  0.545837     -0.605435     -0.541860      0.541860       48.3688       48.9107    
  52  0.954982     -0.460626E-01 -0.412258E-01  0.412258E-01   47.7101       47.7513    
  53  0.470912     -0.753083     -0.674005      0.674005       47.6944       48.3684    
  54  0.719568     -0.329104     -0.294546      0.294546       47.5186       47.8131    
  55  0.859620     -0.151265     -0.135381      0.135381       47.8383       47.9736    
  56  0.544817     -0.607304     -0.543534      0.543534       47.4443       47.9878    
  57  0.505571E-02  -5.28724      -4.73204       4.73204       47.8673       52.5994    
  58  0.412350     -0.885884     -0.792860      0.792860       47.5743       48.3671    
  59  0.335424      -1.09236     -0.977656      0.977656       47.4495       48.4271    
  60  0.908603     -0.958472E-01 -0.857827E-01  0.857827E-01   47.4631       47.5489    
  61  0.434554     -0.833434     -0.745919      0.745919       48.9242       49.6701    
  62  0.801863     -0.220817     -0.197630      0.197630       47.1025       47.3001    
  63  0.567796     -0.565993     -0.506560      0.506560       47.6783       48.1848    
  64  0.818165     -0.200691     -0.179618      0.179618       47.4037       47.5833    
  65  0.490355     -0.712626     -0.637796      0.637796       47.5153       48.1531    
  66  0.971730     -0.286771E-01 -0.256658E-01  0.256658E-01   47.8373       47.8629    
  67  0.373659     -0.984411     -0.881042      0.881042       47.2837       48.1648    
  68  0.179333      -1.71851      -1.53806       1.53806       47.3068       48.8449    
  69  0.352089      -1.04387     -0.934259      0.934259       47.6886       48.6229    
  70  0.247178      -1.39765      -1.25089       1.25089       48.0954       49.3463    
loop,thermsimp(1:2)       60  0.946974      0.448639    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    417         47.04          0.84          1.11         23.84          0.77          0.04         26.60
Just calling func    0   0         26.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    418         49.05          0.84          1.11         23.77          0.56          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.894994               415
loop is:       60
neval is:      417
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.894994               415
loop is:       61
neval is:      417


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.447497               484

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      417     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597     -0.183294      0.183294       47.2747       47.4580    
   2  0.718953     -0.329960     -0.147656      0.147656       47.1025       47.2501    
   3  0.454275     -0.789053     -0.353099      0.353099       47.1740       47.5271    
   4  0.253407E-01  -3.67534      -1.64470       1.64470       47.2583       48.9030    
   5  0.611947     -0.491110     -0.219770      0.219770       47.2294       47.4492    
   6  0.234016      -1.45237     -0.649929      0.649929       47.3525       48.0025    
   7  0.359481E-01  -3.32568      -1.48823       1.48823       47.0941       48.5823    
   8  0.222118E-01  -3.80713      -1.70368       1.70368       47.3078       49.0115    
   9  0.905838E-01  -2.40148      -1.07466       1.07466       47.4083       48.4829    
  10  0.791683     -0.233594     -0.104533      0.104533       47.3343       47.4389    
  11  0.557734     -0.583873     -0.261282      0.261282       47.0706       47.3319    
  12  0.936048E-01  -2.36867      -1.05997       1.05997       47.4631       48.5230    
  13  0.431059     -0.841510     -0.376573      0.376573       47.4087       47.7853    
  14  0.225758      -1.48829     -0.666006      0.666006       47.5498       48.2158    
  15  0.275181E-01  -3.59291      -1.60782       1.60782       47.5418       49.1496    
  16  0.802517     -0.220002     -0.984503E-01  0.984503E-01   47.4037       47.5021    
  17  0.423872     -0.858323     -0.384097      0.384097       47.3698       47.7539    
  18  0.300971      -1.20074     -0.537328      0.537328       47.1953       47.7326    
  19  0.479556     -0.734895     -0.328863      0.328863       47.2799       47.6088    
  20  0.621838     -0.475076     -0.212595      0.212595       47.6707       47.8833    
  21  0.397654     -0.922172     -0.412669      0.412669       47.7101       48.1228    
  22  0.664976     -0.408004     -0.182581      0.182581       47.4614       47.6440    
  23  0.288358      -1.24355     -0.556485      0.556485       47.4206       47.9771    
  24  0.442017     -0.816406     -0.365339      0.365339       47.7154       48.0807    
  25  0.150763E-01  -4.19463      -1.87709       1.87709       47.5186       49.3957    
  26  0.600886     -0.509350     -0.227933      0.227933       47.0228       47.2507    
  27  0.162927      -1.81446     -0.811963      0.811963       47.8373       48.6492    
  28  0.932743     -0.696251E-01 -0.311570E-01  0.311570E-01   47.3370       47.3681    
  29  0.997186     -0.281799E-02 -0.126104E-02  0.126104E-02   46.9668       46.9681    
  30  0.418339     -0.871463     -0.389977      0.389977       47.0828       47.4728    
  31  0.694800     -0.364132     -0.162948      0.162948       47.2953       47.4582    
  32  0.852711     -0.159334     -0.713017E-01  0.713017E-01   47.4189       47.4902    
  33  0.624847     -0.470249     -0.210435      0.210435       47.8383       48.0487    
  34  0.427649     -0.849453     -0.380128      0.380128       47.4100       47.7902    
  35  0.149871      -1.89798     -0.849341      0.849341       47.4443       48.2936    
  36  0.563430     -0.573713     -0.256735      0.256735       47.4331       47.6898    
  37  0.860100     -0.150706     -0.674405E-01  0.674405E-01   47.0782       47.1457    
  38  0.867090E-01  -2.44520      -1.09422       1.09422       47.5153       48.6095    
  39  0.847848     -0.165054     -0.738610E-01  0.738610E-01   47.2837       47.3576    
  40  0.782599E-01  -2.54772      -1.14010       1.14010       48.0462       49.1863    
  41  0.697889E-01  -2.66228      -1.19136       1.19136       47.2503       48.4417    
  42  0.422765     -0.860939     -0.385267      0.385267       47.6783       48.0636    
  43  0.158365      -1.84286     -0.824672      0.824672       47.4822       48.3069    
  44  0.518935     -0.655976     -0.293547      0.293547       47.5267       47.8202    
  45  0.430406     -0.843027     -0.377252      0.377252       47.5743       47.9515    
  46  0.639805     -0.446592     -0.199849      0.199849       47.6944       47.8942    
  47  0.830453E-01  -2.48837      -1.11354       1.11354       47.8076       48.9211    
  48  0.639384     -0.447250     -0.200143      0.200143       47.6895       47.8897    
  49  0.833791     -0.181773     -0.813428E-01  0.813428E-01   47.4042       47.4855    
  50  0.453972     -0.789720     -0.353397      0.353397       47.4495       47.8029    
  51  0.542088     -0.612327     -0.274014      0.274014       47.2596       47.5336    
  52  0.271321      -1.30445     -0.583738      0.583738       47.5377       48.1214    
  53  0.176790      -1.73279     -0.775419      0.775419       47.4395       48.2149    
  54  0.511778     -0.669865     -0.299763      0.299763       47.2168       47.5166    
  55  0.632948     -0.457366     -0.204670      0.204670       47.6812       47.8859    
  56  0.252444      -1.37657     -0.616009      0.616009       47.5693       48.1853    
  57  0.726388     -0.319671     -0.143052      0.143052       47.6886       47.8317    
  58  0.483977     -0.725718     -0.324756      0.324756       47.4353       47.7600    
  59  0.497846     -0.697465     -0.312114      0.312114       47.3068       47.6189    
  60  0.369093     -0.996706     -0.446023      0.446023       48.3688       48.8148    
  61  0.225129      -1.49108     -0.667255      0.667255       47.5054       48.1726    
  62  0.908331E-01  -2.39873      -1.07342       1.07342       47.7700       48.8434    
  63  0.196370      -1.62776     -0.728416      0.728416       47.3397       48.0681    
  64  0.448748     -0.801293     -0.358576      0.358576       47.1197       47.4783    
  65  0.175426      -1.74054     -0.778885      0.778885       48.0954       48.8743    
  66  0.399277     -0.918099     -0.410847      0.410847       48.9242       49.3351    
  67  0.417464     -0.873557     -0.390914      0.390914       47.5045       47.8954    
  68  0.593993     -0.520889     -0.233096      0.233096       47.8360       48.0691    
  69  0.718485     -0.330610     -0.147947      0.147947       47.3177       47.4657    
  70  0.294519      -1.22241     -0.547026      0.547026       47.0382       47.5852    
loop,thermsimp(1:2)       61  0.183294      0.147656    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    419         47.03          0.83          1.12         23.80          0.47          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       61
neval is:      418
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       62
neval is:      418


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      418     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.633990E-02  0.633990E-02   46.9668       46.9732    
   2  0.420912     -0.865330     -0.387233      0.387233       47.0782       47.4655    
   3  0.617210     -0.482545     -0.215938      0.215938       47.1025       47.3184    
   4  0.787846     -0.238453     -0.106707      0.106707       47.0228       47.1295    
   5  0.608770     -0.496315     -0.222100      0.222100       47.0706       47.2927    
   6  0.925975     -0.769083E-01 -0.344162E-01  0.344162E-01   47.2837       47.3182    
   7  0.545822     -0.605462     -0.270942      0.270942       47.3370       47.6079    
   8  0.240142      -1.42653     -0.638366      0.638366       47.3343       47.9727    
   9  0.800257     -0.222822     -0.997122E-01  0.997122E-01   47.2294       47.3292    
  10  0.250149      -1.38570     -0.620096      0.620096       47.2747       47.8948    
  11  0.814044     -0.205741     -0.920686E-01  0.920686E-01   47.2953       47.3873    
  12  0.897552     -0.108084     -0.483672E-01  0.483672E-01   47.3177       47.3661    
  13  0.807530     -0.213775     -0.956638E-01  0.956638E-01   47.0828       47.1785    
  14  0.369031     -0.996874     -0.446098      0.446098       47.1197       47.5658    
  15  0.892620     -0.113594     -0.508330E-01  0.508330E-01   47.4042       47.4550    
  16  0.992736     -0.729054E-02 -0.326249E-02  0.326249E-02   47.4189       47.4221    
  17  0.264259      -1.33083     -0.595541      0.595541       47.4037       47.9992    
  18  0.164586      -1.80432     -0.807429      0.807429       47.2168       48.0243    
  19  0.594739     -0.519633     -0.232534      0.232534       47.1740       47.4065    
  20  0.766319     -0.266156     -0.119104      0.119104       47.2596       47.3787    
  21  0.392663     -0.934804     -0.418322      0.418322       47.0382       47.4565    
  22  0.900399     -0.104917     -0.469502E-01  0.469502E-01   47.2799       47.3269    
  23  0.853164E-01  -2.46139      -1.10146       1.10146       47.3068       48.4083    
  24  0.753181     -0.283450     -0.126843      0.126843       47.4614       47.5882    
  25  0.801958     -0.220699     -0.987619E-01  0.987619E-01   47.4331       47.5319    
  26  0.840206     -0.174108     -0.779129E-01  0.779129E-01   47.1953       47.2732    
  27  0.899787     -0.105597     -0.472545E-01  0.472545E-01   47.3698       47.4170    
  28  0.555629     -0.587654     -0.262973      0.262973       47.4353       47.6983    
  29  0.117481E-01  -4.44406      -1.98870       1.98870       47.4087       49.3974    
  30  0.228476      -1.47632     -0.660650      0.660650       47.4100       48.0707    
  31  0.121877      -2.10474     -0.941866      0.941866       47.4495       48.3914    
  32  0.475375     -0.743652     -0.332782      0.332782       47.5267       47.8595    
  33  0.208734      -1.56669     -0.701091      0.701091       47.6886       48.3897    
  34  0.680231     -0.385322     -0.172431      0.172431       47.6707       47.8431    
  35  0.211647      -1.55284     -0.694890      0.694890       47.6812       48.3761    
  36  0.982763     -0.173870E-01 -0.778065E-02  0.778065E-02   47.6895       47.6973    
  37  0.819904     -0.198568     -0.888586E-01  0.888586E-01   47.6944       47.7832    
  38  0.282339      -1.26465     -0.565926      0.565926       47.5045       48.0704    
  39  0.391986     -0.936529     -0.419094      0.419094       47.5743       47.9934    
  40  0.218050      -1.52303     -0.681552      0.681552       47.4206       48.1021    
  41  0.236244      -1.44289     -0.645689      0.645689       47.3525       47.9982    
  42  0.544673     -0.607570     -0.271886      0.271886       47.8383       48.1101    
  43  0.721937     -0.325818     -0.145802      0.145802       47.6783       47.8241    
  44  0.649728     -0.431202     -0.192961      0.192961       47.3397       47.5326    
  45  0.641823     -0.443443     -0.198439      0.198439       47.8360       48.0344    
  46  0.597293     -0.515347     -0.230616      0.230616       47.7154       47.9460    
  47  0.467405     -0.760558     -0.340347      0.340347       47.5377       47.8780    
  48  0.676900     -0.390232     -0.174628      0.174628       47.7101       47.8848    
  49  0.925913     -0.769750E-01 -0.344461E-01  0.344461E-01   47.5054       47.5398    
  50  0.692551     -0.367374     -0.164399      0.164399       47.5693       47.7337    
  51  0.161390      -1.82393     -0.816204      0.816204       47.4395       48.2557    
  52  0.513279     -0.666936     -0.298452      0.298452       47.5498       47.8483    
  53  0.379540     -0.968796     -0.433533      0.433533       47.4443       47.8778    
  54  0.557165     -0.584894     -0.261738      0.261738       47.4822       47.7439    
  55  0.459054     -0.778587     -0.348415      0.348415       47.2503       47.5988    
  56  0.466253     -0.763026     -0.341452      0.341452       47.4083       47.7497    
  57  0.635692E-01  -2.75563      -1.23313       1.23313       47.4631       48.6962    
  58  0.591279     -0.525467     -0.235145      0.235145       47.0941       47.3292    
  59  0.344168      -1.06663     -0.477312      0.477312       47.5153       47.9926    
  60  0.119291      -2.12619     -0.951462      0.951462       47.8373       48.7887    
  61  0.399057E-01  -3.22124      -1.44149       1.44149       48.3688       49.8103    
  62  0.737545     -0.304428     -0.136231      0.136231       47.7700       47.9062    
  63  0.855773     -0.155750     -0.696977E-01  0.696977E-01   48.0954       48.1651    
  64  0.604062E-01  -2.80666      -1.25597       1.25597       47.2583       48.5142    
  65  0.659236     -0.416674     -0.186460      0.186460       47.8076       47.9940    
  66  0.738818     -0.302704     -0.135459      0.135459       47.3078       47.4433    
  67  0.577372     -0.549268     -0.245796      0.245796       47.5418       47.7876    
  68  0.219220      -1.51768     -0.679157      0.679157       48.0462       48.7254    
  69  0.318915      -1.14283     -0.511414      0.511414       48.9242       49.4356    
  70  0.599810     -0.511142     -0.228735      0.228735       47.0330       47.2617    
loop,thermsimp(1:2)       62  0.633990E-02  0.387233    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    420         50.77          0.83          1.11         23.77          0.56          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    421         49.04          0.83          1.12         23.77          0.69          0.04         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  420    49.037        1.187     -1.814      2.710     -102.6      1.388    
                      0.2707      1.248     -99.70      3.752    -0.7351E-02

                       2.212     -1.057      1.530      6966.      3503.    

                     -0.8447E-01  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6151.      614.5    

                       1.433     -5.828     -4.100     -8.388      6.661    

                      -14.94     -3.620     0.1939E+05  0.000     0.1121E+05



                       1529.     0.1158E+05 -3952.      8267.      4666.    

                       5357.     0.6334E-02 0.1776     0.8845E-02 0.1156    

                     -0.2486    -0.8351E-01 0.1842     0.1180     0.6563E-01



                     -0.4775    -0.7814      0.000     0.6859E-01-0.7807E-01

                     -0.2561E-02 0.1040    -0.7116    -0.1533     0.4151E-01

                      0.5374E-01-0.1614E-01-0.6736     -1.203      7061.    



                      -1.069     -1.242     -2.233     -2.337    -0.3807    

                     -0.3252      9.225      8.652    -0.1900E+05 -4.000    

                     -0.5960     -2.193      9.306      8.872    -0.1908E+05



                      -4.000     0.4283    -0.4470      8.854      9.061    

                     -0.1908E+05 -7.000    -0.7534    -0.6898      9.030    

                       8.776    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     49.04
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       62
neval is:      420
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       63
neval is:      420


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      420     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.677130E-02  0.677130E-02   46.9668       46.9736    
   2  0.760415     -0.273890     -0.122565      0.122565       47.0228       47.1453    
   3  0.328612      -1.11288     -0.498009      0.498009       47.0828       47.5808    
   4  0.164880      -1.80254     -0.806630      0.806630       47.0330       47.8396    
   5  0.706606     -0.347282     -0.155408      0.155408       47.1953       47.3507    
   6  0.832070     -0.183839     -0.822675E-01  0.822675E-01   47.0706       47.1528    
   7  0.231505      -1.46315     -0.654756      0.654756       47.2837       47.9385    
   8  0.802671E-01  -2.52240      -1.12876       1.12876       47.1025       48.2313    
   9  0.116349      -2.15116     -0.962638      0.962638       47.2799       48.2426    
  10  0.874222     -0.134421     -0.601531E-01  0.601531E-01   47.2294       47.2896    
  11  0.729333     -0.315625     -0.141241      0.141241       47.0941       47.2353    
  12  0.301675      -1.19841     -0.536283      0.536283       47.3177       47.8540    
  13  0.496896     -0.699375     -0.312968      0.312968       47.2596       47.5726    
  14  0.692174     -0.367918     -0.164642      0.164642       47.2953       47.4599    
  15  0.717718     -0.331678     -0.148425      0.148425       47.1740       47.3224    
  16  0.867334E-01  -2.44492      -1.09409       1.09409       47.3698       48.4639    
  17  0.762934     -0.270584     -0.121085      0.121085       47.4189       47.5400    
  18  0.966741     -0.338246E-01 -0.151364E-01  0.151364E-01   47.3078       47.3230    
  19  0.375386     -0.979801     -0.438458      0.438458       47.4042       47.8427    
  20  0.878716     -0.129293     -0.578583E-01  0.578583E-01   47.0382       47.0960    
  21  0.238969      -1.43142     -0.640557      0.640557       47.0782       47.7188    
  22  0.939578     -0.623249E-01 -0.278902E-01  0.278902E-01   47.4331       47.4610    
  23  0.694828     -0.364091     -0.162929      0.162929       47.3397       47.5026    
  24  0.869149     -0.140241     -0.627572E-01  0.627572E-01   47.5054       47.5681    
  25  0.310010      -1.17115     -0.524087      0.524087       47.1197       47.6438    
  26  0.831753     -0.184219     -0.824376E-01  0.824376E-01   47.4614       47.5438    
  27  0.621050     -0.476344     -0.213162      0.213162       47.2503       47.4635    
  28  0.902274     -0.102837     -0.460194E-01  0.460194E-01   47.3370       47.3830    
  29  0.341345      -1.07486     -0.480998      0.480998       47.6895       48.1705    
  30  0.718647     -0.330385     -0.147846      0.147846       47.4353       47.5831    
  31  0.489532     -0.714305     -0.319649      0.319649       47.5693       47.8889    
  32  0.387793     -0.947282     -0.423906      0.423906       47.4822       47.9061    
  33  0.576785     -0.550285     -0.246251      0.246251       47.4083       47.6545    
  34  0.454048     -0.789552     -0.353322      0.353322       47.6944       48.0477    
  35  0.532728     -0.629744     -0.281809      0.281809       47.5418       47.8236    
  36  0.459832     -0.776895     -0.347658      0.347658       47.6783       48.0259    
  37  0.784910     -0.242187     -0.108378      0.108378       47.6707       47.7790    
  38  0.842297     -0.171622     -0.768003E-01  0.768003E-01   47.5498       47.6266    
  39  0.967556     -0.329823E-01 -0.147595E-01  0.147595E-01   47.5267       47.5414    
  40  0.126414      -2.06819     -0.925510      0.925510       47.4443       48.3698    
  41  0.407002     -0.898938     -0.402272      0.402272       47.5377       47.9399    
  42  0.903435     -0.101551     -0.454440E-01  0.454440E-01   47.7101       47.7556    
  43  0.430116     -0.843701     -0.377554      0.377554       47.2747       47.6522    
  44  0.675859     -0.391771     -0.175316      0.175316       47.7700       47.9453    
  45  0.444470     -0.810872     -0.362863      0.362863       47.7154       48.0782    
  46  0.728661     -0.316547     -0.141654      0.141654       47.3343       47.4760    
  47  0.143617      -1.94060     -0.868413      0.868413       47.5153       48.3837    
  48  0.729467E-01  -2.61803      -1.17156       1.17156       47.5743       48.7458    
  49  0.720547     -0.327745     -0.146665      0.146665       47.8076       47.9542    
  50  0.742905     -0.297187     -0.132990      0.132990       47.3525       47.4855    
  51  0.807330     -0.214023     -0.957748E-01  0.957748E-01   47.4037       47.4994    
  52  0.387442     -0.948190     -0.424312      0.424312       47.2168       47.6411    
  53  0.207045      -1.57482     -0.704727      0.704727       47.8360       48.5407    
  54  0.823983     -0.193606     -0.866380E-01  0.866380E-01   47.5045       47.5911    
  55  0.950173E-01  -2.35370      -1.05327       1.05327       47.4100       48.4633    
  56  0.662008     -0.412478     -0.184583      0.184583       47.4206       47.6052    
  57  0.640494E-01  -2.74810      -1.22977       1.22977       47.8383       49.0680    
  58  0.772515     -0.258104     -0.115501      0.115501       48.0954       48.2109    
  59  0.204175      -1.58878     -0.710974      0.710974       47.4395       48.1504    
  60  0.193223      -1.64391     -0.735644      0.735644       47.6812       48.4169    
  61  0.846602     -0.166525     -0.745193E-01  0.745193E-01   47.6886       47.7631    
  62  0.699262E-01  -2.66031      -1.19048       1.19048       47.4495       48.6400    
  63  0.581483     -0.542173     -0.242621      0.242621       47.3068       47.5494    
  64  0.497263     -0.698636     -0.312638      0.312638       47.2583       47.5709    
  65  0.912190     -0.919065E-01 -0.411279E-01  0.411279E-01   47.4631       47.5042    
  66  0.486665     -0.720179     -0.322278      0.322278       48.0462       48.3685    
  67  0.635633     -0.453135     -0.202776      0.202776       47.8373       48.0400    
  68  0.217422      -1.52591     -0.682842      0.682842       47.4087       48.0915    
  69  0.214720E-01  -3.84101      -1.71884       1.71884       48.9242       50.6431    
  70  0.256495      -1.36065     -0.608885      0.608885       49.0373       49.6462    
loop,thermsimp(1:2)       63  0.677130E-02  0.122565    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    422         47.73          0.83          1.11         23.82          0.61          0.04         26.41
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    423         49.02          0.83          1.12         23.84          0.44          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       63
neval is:      422
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       64
neval is:      422


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      422     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.162628E-01  0.162628E-01   46.9668       46.9831    
   2  0.186231      -1.68077     -0.752137      0.752137       47.0382       47.7903    
   3  0.127308      -2.06115     -0.922357      0.922357       47.0228       47.9451    
   4  0.305661      -1.18528     -0.530409      0.530409       47.0706       47.6010    
   5  0.685804     -0.377164     -0.168780      0.168780       47.0941       47.2629    
   6  0.713250     -0.337923     -0.151220      0.151220       47.2294       47.3807    
   7  0.562604     -0.575180     -0.257391      0.257391       47.1740       47.4314    
   8  0.410540     -0.890283     -0.398399      0.398399       47.3078       47.7062    
   9  0.667633     -0.404017     -0.180796      0.180796       47.1953       47.3761    
  10  0.111237      -2.19609     -0.982743      0.982743       47.3370       48.3197    
  11  0.987129     -0.129550E-01 -0.579731E-02  0.579731E-02   47.2953       47.3011    
  12  0.525481     -0.643442     -0.287938      0.287938       47.4331       47.7211    
  13  0.740553     -0.300358     -0.134409      0.134409       47.2503       47.3847    
  14  0.456748E-01  -3.08621      -1.38107       1.38107       47.3343       48.7154    
  15  0.831796     -0.184168     -0.824148E-01  0.824148E-01   47.3525       47.4350    
  16  0.798422     -0.225118     -0.100740      0.100740       47.4037       47.5044    
  17  0.985535     -0.145708E-01 -0.652037E-02  0.652037E-02   47.3397       47.3462    
  18  0.323340      -1.12905     -0.505246      0.505246       47.4631       47.9683    
  19  0.745026     -0.294336     -0.131714      0.131714       47.4189       47.5506    
  20  0.711871     -0.339858     -0.152086      0.152086       47.5267       47.6788    
  21  0.232875      -1.45725     -0.652116      0.652116       47.4614       48.1135    
  22  0.118192      -2.13545     -0.955607      0.955607       47.3068       48.2624    
  23  0.310641      -1.16912     -0.523176      0.523176       47.5054       48.0286    
  24  0.220899      -1.51005     -0.675743      0.675743       47.2583       47.9340    
  25  0.487797     -0.717856     -0.321238      0.321238       47.2596       47.5808    
  26  0.278848      -1.27709     -0.571493      0.571493       47.0828       47.6543    
  27  0.159355      -1.83662     -0.821881      0.821881       47.4353       48.2572    
  28  0.473156     -0.748329     -0.334875      0.334875       47.5045       47.8394    
  29  0.358980      -1.02449     -0.458455      0.458455       47.4206       47.8790    
  30  0.873266     -0.135515     -0.606424E-01  0.606424E-01   47.5498       47.6105    
  31  0.168201      -1.78260     -0.797706      0.797706       47.2168       48.0145    
  32  0.492581     -0.708096     -0.316871      0.316871       47.1197       47.4366    
  33  0.878329     -0.129734     -0.580557E-01  0.580557E-01   47.2747       47.3327    
  34  0.266147      -1.32371     -0.592355      0.592355       47.4083       48.0006    
  35  0.510485     -0.672394     -0.300894      0.300894       47.0782       47.3791    
  36  0.810074     -0.210630     -0.942563E-01  0.942563E-01   47.7101       47.8044    
  37  0.950614     -0.506467E-01 -0.226642E-01  0.226642E-01   47.6886       47.7113    
  38  0.329006      -1.11168     -0.497474      0.497474       47.6707       48.1681    
  39  0.934893E-01  -2.36991      -1.06053       1.06053       47.5418       48.6023    
  40  0.686671     -0.375900     -0.168214      0.168214       47.0330       47.2012    
  41  0.888060     -0.118716     -0.531252E-01  0.531252E-01   47.4042       47.4573    
  42  0.749618     -0.288192     -0.128965      0.128965       47.3177       47.4467    
  43  0.433754     -0.835279     -0.373785      0.373785       47.5693       47.9430    
  44  0.630341     -0.461494     -0.206517      0.206517       47.4822       47.6887    
  45  0.569388     -0.563194     -0.252027      0.252027       47.2837       47.5358    
  46  0.965872     -0.347242E-01 -0.155390E-01  0.155390E-01   47.5377       47.5532    
  47  0.797995     -0.225653     -0.100979      0.100979       47.7700       47.8710    
  48  0.716091     -0.333948     -0.149441      0.149441       47.8076       47.9570    
  49  0.339849      -1.07925     -0.482963      0.482963       47.6783       48.1612    
  50  0.202757      -1.59575     -0.714092      0.714092       47.8373       48.5514    
  51  0.266068      -1.32400     -0.592487      0.592487       47.6944       48.2869    
  52  0.985546E-01  -2.31715      -1.03692       1.03692       47.7154       48.7523    
  53  0.751309     -0.285938     -0.127957      0.127957       47.4087       47.5366    
  54  0.846042     -0.167187     -0.748156E-01  0.748156E-01   47.4395       47.5143    
  55  0.714380     -0.336340     -0.150511      0.150511       47.6895       47.8400    
  56  0.873273     -0.135507     -0.606390E-01  0.606390E-01   48.0954       48.1560    
  57  0.373211     -0.985610     -0.441057      0.441057       47.1025       47.5436    
  58  0.618869     -0.479862     -0.214737      0.214737       47.2799       47.4947    
  59  0.529025     -0.636720     -0.284930      0.284930       48.0462       48.3312    
  60  0.659913E-01  -2.71823      -1.21640       1.21640       47.4443       48.6607    
  61  0.541361E-01  -2.91625      -1.30501       1.30501       47.5153       48.8203    
  62  0.785735E-01  -2.54372      -1.13831       1.13831       47.6812       48.8195    
  63  0.569382     -0.563203     -0.252032      0.252032       47.4100       47.6621    
  64  0.564569     -0.571693     -0.255831      0.255831       47.3698       47.6256    
  65  0.689424     -0.371899     -0.166423      0.166423       47.8360       48.0024    
  66  0.992491     -0.753783E-02 -0.337316E-02  0.337316E-02   47.4495       47.4529    
  67  0.922665     -0.804887E-01 -0.360185E-01  0.360185E-01   47.5743       47.6103    
  68  0.497573     -0.698012     -0.312358      0.312358       47.8383       48.1506    
  69  0.594717     -0.519669     -0.232550      0.232550       49.0373       49.2698    
  70  0.132266      -2.02294     -0.905260      0.905260       47.7270       48.6323    
loop,thermsimp(1:2)       64  0.162628E-01  0.752137    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    424         47.75          0.83          1.12         23.82          0.52          0.04         26.32
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       64
neval is:      423
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       65
neval is:      423


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      423     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726     -0.383382      0.383382       46.9668       47.3502    
   2  0.350039      -1.04971     -0.469742      0.469742       47.0330       47.5027    
   3  0.872911     -0.135921     -0.608243E-01  0.608243E-01   47.0941       47.1549    
   4  0.829005     -0.187529     -0.839185E-01  0.839185E-01   47.2953       47.3792    
   5  0.201827      -1.60035     -0.716150      0.716150       47.2747       47.9908    
   6  0.735791     -0.306809     -0.137296      0.137296       47.3397       47.4769    
   7  0.985788     -0.143135E-01 -0.640524E-02  0.640524E-02   47.1953       47.2017    
   8  0.962727     -0.379858E-01 -0.169985E-01  0.169985E-01   47.0782       47.0952    
   9  0.796954     -0.226958     -0.101563      0.101563       47.2294       47.3310    
  10  0.563149     -0.574211     -0.256958      0.256958       47.2503       47.5073    
  11  0.776846     -0.252513     -0.112999      0.112999       47.1740       47.2870    
  12  0.921010     -0.822839E-01 -0.368218E-01  0.368218E-01   47.3525       47.3894    
  13  0.884938     -0.122238     -0.547012E-01  0.547012E-01   47.1197       47.1744    
  14  0.850974     -0.161373     -0.722140E-01  0.722140E-01   47.3177       47.3899    
  15  0.391065     -0.938882     -0.420147      0.420147       47.4495       47.8696    
  16  0.150921      -1.89100     -0.846216      0.846216       47.4042       48.2504    
  17  0.295162      -1.22023     -0.546050      0.546050       47.2799       47.8260    
  18  0.662567     -0.411634     -0.184205      0.184205       47.4037       47.5879    
  19  0.893994     -0.112056     -0.501447E-01  0.501447E-01   47.4395       47.4896    
  20  0.103282      -2.27029      -1.01595       1.01595       47.2837       48.2997    
  21  0.416341     -0.876251     -0.392120      0.392120       47.4087       47.8008    
  22  0.986101E-01  -2.31658      -1.03666       1.03666       47.1025       48.1392    
  23  0.617817E-01  -2.78415      -1.24590       1.24590       47.4189       48.6648    
  24  0.371945     -0.989010     -0.442579      0.442579       47.5377       47.9803    
  25  0.884755     -0.122444     -0.547934E-01  0.547934E-01   47.2596       47.3144    
  26  0.584237     -0.537449     -0.240507      0.240507       47.0706       47.3111    
  27  0.239981      -1.42719     -0.638665      0.638665       47.5743       48.2129    
  28  0.106477      -2.23982      -1.00231       1.00231       47.5498       48.5522    
  29  0.142954      -1.94523     -0.870485      0.870485       47.3698       48.2403    
  30  0.802284     -0.220292     -0.985801E-01  0.985801E-01   47.0828       47.1814    
  31  0.373571     -0.984648     -0.440627      0.440627       47.4100       47.8507    
  32  0.617091     -0.482739     -0.216024      0.216024       47.5267       47.7427    
  33  0.813617     -0.206266     -0.923033E-01  0.923033E-01   47.4822       47.5745    
  34  0.219787E-01  -3.81768      -1.70840       1.70840       47.3078       49.0162    
  35  0.398995     -0.918807     -0.411163      0.411163       47.6886       48.0998    
  36  0.906985     -0.976296E-01 -0.436889E-01  0.436889E-01   47.4331       47.4768    
  37  0.259146E-01  -3.65295      -1.63468       1.63468       47.0382       48.6728    
  38  0.347543      -1.05687     -0.472945      0.472945       47.7101       48.1831    
  39  0.879549     -0.128346     -0.574343E-01  0.574343E-01   47.5045       47.5619    
  40  0.618015     -0.481242     -0.215354      0.215354       47.6895       47.9049    
  41  0.173348      -1.75246     -0.784218      0.784218       47.7700       48.5542    
  42  0.324418      -1.12572     -0.503757      0.503757       47.4206       47.9243    
  43  0.426503     -0.852135     -0.381328      0.381328       47.2583       47.6396    
  44  0.672650     -0.396530     -0.177446      0.177446       47.5693       47.7467    
  45  0.500711     -0.691727     -0.309546      0.309546       47.0228       47.3323    
  46  0.457446     -0.782097     -0.349986      0.349986       47.8076       48.1576    
  47  0.408507     -0.895245     -0.400620      0.400620       47.4631       47.8637    
  48  0.649058     -0.432234     -0.193423      0.193423       47.4083       47.6017    
  49  0.275220      -1.29018     -0.577353      0.577353       47.8360       48.4133    
  50  0.706820     -0.346979     -0.155272      0.155272       47.2168       47.3721    
  51  0.596044     -0.517441     -0.231553      0.231553       47.5054       47.7369    
  52  0.362601      -1.01445     -0.453964      0.453964       47.4614       47.9153    
  53  0.934637     -0.675969E-01 -0.302494E-01  0.302494E-01   47.8383       47.8685    
  54  0.724055     -0.322888     -0.144491      0.144491       48.0954       48.2399    
  55  0.871040     -0.138067     -0.617845E-01  0.617845E-01   47.6783       47.7401    
  56  0.722457     -0.325097     -0.145480      0.145480       47.6707       47.8161    
  57  0.840721     -0.173495     -0.776385E-01  0.776385E-01   47.4353       47.5129    
  58  0.702714     -0.352805     -0.157879      0.157879       47.3068       47.4647    
  59  0.436737     -0.828424     -0.370717      0.370717       47.6944       48.0651    
  60  0.419753E-01  -3.17067      -1.41887       1.41887       47.3370       48.7558    
  61  0.588078     -0.530895     -0.237574      0.237574       48.0462       48.2838    
  62  0.762320     -0.271389     -0.121446      0.121446       47.8373       47.9587    
  63  0.646142     -0.436736     -0.195438      0.195438       47.5418       47.7372    
  64  0.940150     -0.617158E-01 -0.276176E-01  0.276176E-01   47.7270       47.7546    
  65  0.254129      -1.36991     -0.613032      0.613032       47.4443       48.0573    
  66  0.598588     -0.513182     -0.229648      0.229648       47.3343       47.5640    
  67  0.254926      -1.36678     -0.611631      0.611631       47.7154       48.3270    
  68  0.423512     -0.859172     -0.384477      0.384477       47.6812       48.0657    
  69  0.562567     -0.575245     -0.257420      0.257420       47.5153       47.7727    
  70  0.451860     -0.794383     -0.355484      0.355484       47.7484       48.1039    
loop,thermsimp(1:2)       65  0.383382      0.469742    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    425         47.36          0.83          1.11         23.85          0.45          0.04         26.29
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    426         51.40          0.83          1.11         23.77          0.56          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       65
neval is:      425
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       66
neval is:      425


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      425     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220     -0.333931      0.333931       47.0782       47.4122    
   2  0.162949E-01  -4.11691      -1.84230       1.84230       47.0941       48.9364    
   3  0.560104     -0.579632     -0.259384      0.259384       47.1197       47.3791    
   4  0.583629     -0.538490     -0.240972      0.240972       47.0828       47.3238    
   5  0.794243     -0.230366     -0.103088      0.103088       47.1953       47.2984    
   6  0.183626E-01  -3.99744      -1.78884       1.78884       47.1740       48.9628    
   7  0.642495     -0.442397     -0.197971      0.197971       47.0706       47.2686    
   8  0.611061E-02  -5.09773      -2.28122       2.28122       47.2596       49.5408    
   9  0.974115E-01  -2.32881      -1.04214       1.04214       47.2294       48.2716    
  10  0.817249E-01  -2.50440      -1.12071       1.12071       47.0228       48.1435    
  11  0.644422     -0.439401     -0.196630      0.196630       46.9668       47.1635    
  12  0.378181     -0.972383     -0.435138      0.435138       47.2168       47.6520    
  13  0.105422      -2.24978      -1.00677       1.00677       47.2953       48.3021    
  14  0.713647     -0.337367     -0.150971      0.150971       47.3525       47.5035    
  15  0.602100     -0.507333     -0.227030      0.227030       47.3177       47.5447    
  16  0.746624     -0.292194     -0.130756      0.130756       47.3068       47.4376    
  17  0.687673     -0.374442     -0.167562      0.167562       47.4331       47.6007    
  18  0.356323      -1.03192     -0.461781      0.461781       47.3397       47.8014    
  19  0.631203     -0.460128     -0.205906      0.205906       47.4395       47.6454    
  20  0.348432      -1.05431     -0.471802      0.471802       47.0330       47.5048    
  21  0.200848      -1.60521     -0.718325      0.718325       47.2503       47.9687    
  22  0.863860     -0.146345     -0.654888E-01  0.654888E-01   47.4353       47.5008    
  23  0.278415      -1.27864     -0.572188      0.572188       47.5045       48.0767    
  24  0.871038     -0.138069     -0.617856E-01  0.617856E-01   47.3343       47.3961    
  25  0.581010     -0.542987     -0.242985      0.242985       47.4822       47.7252    
  26  0.960519     -0.402815E-01 -0.180258E-01  0.180258E-01   47.4037       47.4217    
  27  0.104828      -2.25543      -1.00930       1.00930       47.4083       48.4176    
  28  0.907238     -0.973501E-01 -0.435639E-01  0.435639E-01   47.2583       47.3018    
  29  0.685005     -0.378330     -0.169301      0.169301       47.5054       47.6747    
  30  0.239566E-01  -3.73151      -1.66984       1.66984       47.5418       49.2116    
  31  0.643900     -0.440211     -0.196993      0.196993       47.6783       47.8753    
  32  0.526819     -0.640898     -0.286800      0.286800       47.5267       47.8135    
  33  0.463387     -0.769192     -0.344211      0.344211       47.5693       47.9135    
  34  0.847158E-01  -2.46845      -1.10463       1.10463       47.7270       48.8317    
  35  0.134368E-01  -4.30976      -1.92860       1.92860       47.5153       49.4439    
  36  0.141068      -1.95851     -0.876427      0.876427       47.4087       48.2851    
  37  0.239867      -1.42767     -0.638878      0.638878       47.6707       48.3095    
  38  0.317049      -1.14870     -0.514039      0.514039       47.2799       47.7940    
  39  0.925847     -0.770459E-01 -0.344778E-01  0.344778E-01   47.4100       47.4445    
  40  0.939258     -0.626649E-01 -0.280423E-01  0.280423E-01   47.4631       47.4911    
  41  0.111598      -2.19286     -0.981296      0.981296       47.8383       48.8196    
  42  0.357545      -1.02849     -0.460248      0.460248       47.4495       47.9097    
  43  0.902640     -0.102432     -0.458379E-01  0.458379E-01   47.6895       47.7354    
  44  0.914421     -0.894640E-01 -0.400349E-01  0.400349E-01   47.4614       47.5014    
  45  0.320420      -1.13812     -0.509306      0.509306       47.4206       47.9299    
  46  0.341333      -1.07490     -0.481013      0.481013       47.8373       48.3183    
  47  0.509727     -0.673879     -0.301559      0.301559       47.5377       47.8392    
  48  0.130581E-02  -6.64093      -2.97179       2.97179       47.2747       50.2465    
  49  0.105413      -2.24987      -1.00681       1.00681       47.4443       48.4511    
  50  0.743306     -0.296647     -0.132749      0.132749       47.6944       47.8271    
  51  0.114013      -2.17144     -0.971714      0.971714       47.6812       48.6529    
  52  0.225326      -1.49021     -0.666862      0.666862       47.6886       48.3555    
  53  0.131158      -2.03135     -0.909024      0.909024       47.7484       48.6574    
  54  0.886877     -0.120049     -0.537215E-01  0.537215E-01   47.1025       47.1562    
  55  0.202581      -1.59661     -0.714480      0.714480       47.8076       48.5220    
  56  0.890722     -0.115722     -0.517854E-01  0.517854E-01   47.7101       47.7619    
  57  0.154728      -1.86608     -0.835067      0.835067       47.5743       48.4093    
  58  0.246051      -1.40222     -0.627487      0.627487       48.0954       48.7229    
  59  0.936822     -0.652622E-01 -0.292046E-01  0.292046E-01   47.3698       47.3990    
  60  0.803405     -0.218896     -0.979553E-01  0.979553E-01   47.4042       47.5022    
  61  0.621921E-01  -2.77753      -1.24294       1.24294       48.0462       49.2892    
  62  0.114098      -2.17070     -0.971382      0.971382       47.2837       48.2551    
  63  0.750290     -0.287295     -0.128564      0.128564       47.7154       47.8439    
  64  0.946840     -0.546256E-01 -0.244448E-01  0.244448E-01   47.8360       47.8604    
  65  0.149613      -1.89970     -0.850110      0.850110       47.5498       48.3999    
  66  0.470076     -0.754861     -0.337798      0.337798       47.7700       48.1078    
  67  0.936184     -0.659437E-01 -0.295096E-01  0.295096E-01   47.4189       47.4484    
  68  0.136491      -1.99150     -0.891188      0.891188       47.0382       47.9294    
  69  0.660647     -0.414536     -0.185504      0.185504       47.3370       47.5225    
  70  0.438707     -0.823923     -0.368703      0.368703       47.3584       47.7271    
loop,thermsimp(1:2)       66  0.333931       1.84230    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    427         46.96          0.82          1.11         23.77          0.57          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    428         47.93          0.84          1.11         23.82          0.57          0.04         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       66
neval is:      427
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       67
neval is:      427


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      427     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780     -0.152498      0.152498       47.1025       47.2550    
   2  0.492413     -0.708438     -0.317024      0.317024       46.9668       47.2839    
   3  0.156563      -1.85430     -0.829792      0.829792       47.0706       47.9004    
   4  0.185270      -1.68594     -0.754454      0.754454       47.1953       47.9497    
   5  0.685983     -0.376903     -0.168663      0.168663       47.2583       47.4269    
   6  0.518581     -0.656659     -0.293853      0.293853       47.0828       47.3767    
   7  0.430667     -0.842421     -0.376981      0.376981       47.1197       47.4967    
   8  0.748228     -0.290047     -0.129795      0.129795       47.3343       47.4641    
   9  0.348167      -1.05507     -0.472142      0.472142       47.3698       47.8419    
  10  0.281980E-01  -3.56850      -1.59689       1.59689       47.0782       48.6751    
  11  0.670749     -0.399360     -0.178712      0.178712       47.4037       47.5824    
  12  0.225031      -1.49152     -0.667450      0.667450       47.3068       47.9743    
  13  0.258016      -1.35474     -0.606240      0.606240       47.4100       48.0163    
  14  0.122388      -2.10056     -0.939993      0.939993       47.4189       48.3589    
  15  0.556210     -0.586609     -0.262506      0.262506       47.4631       47.7256    
  16  0.938933     -0.630108E-01 -0.281972E-01  0.281972E-01   47.4353       47.4635    
  17  0.440352     -0.820180     -0.367028      0.367028       47.4614       47.8284    
  18  0.779048     -0.249683     -0.111732      0.111732       47.4042       47.5159    
  19  0.929725     -0.728667E-01 -0.326076E-01  0.326076E-01   47.3525       47.3851    
  20  0.330740      -1.10642     -0.495121      0.495121       47.0330       47.5281    
  21  0.214890      -1.53763     -0.688084      0.688084       47.3370       48.0250    
  22  0.363221      -1.01274     -0.453200      0.453200       47.3177       47.7709    
  23  0.681309     -0.383740     -0.171722      0.171722       47.4331       47.6048    
  24  0.107313      -2.23200     -0.998815      0.998815       47.4395       48.4383    
  25  0.622524     -0.473973     -0.212101      0.212101       47.2168       47.4289    
  26  0.532378     -0.630402     -0.282103      0.282103       47.5054       47.7875    
  27  0.298562      -1.20878     -0.540925      0.540925       47.4822       48.0231    
  28  0.432099     -0.839100     -0.375495      0.375495       47.3584       47.7339    
  29  0.243978      -1.41068     -0.631274      0.631274       47.6895       48.3208    
  30  0.581243     -0.542587     -0.242806      0.242806       47.7101       47.9529    
  31  0.897127E-01  -2.41114      -1.07898       1.07898       47.2799       48.3589    
  32  0.738124     -0.303644     -0.135880      0.135880       47.3397       47.4755    
  33  0.462727     -0.770619     -0.344849      0.344849       47.5267       47.8715    
  34  0.984641E-01  -2.31806      -1.03733       1.03733       47.6944       48.7317    
  35  0.641923     -0.443287     -0.198370      0.198370       47.5377       47.7360    
  36  0.334628      -1.09474     -0.489891      0.489891       47.7154       48.2053    
  37  0.482851     -0.728048     -0.325799      0.325799       47.8360       48.1618    
  38  0.826279     -0.190822     -0.853924E-01  0.853924E-01   47.6783       47.7637    
  39  0.966417     -0.341596E-01 -0.152863E-01  0.152863E-01   47.4495       47.4648    
  40  0.236833      -1.44040     -0.644575      0.644575       47.5693       48.2138    
  41  0.274744      -1.29192     -0.578128      0.578128       47.0382       47.6163    
  42  0.310307      -1.17019     -0.523657      0.523657       47.4206       47.9442    
  43  0.697298     -0.360543     -0.161342      0.161342       47.2503       47.4117    
  44  0.239072      -1.43099     -0.640364      0.640364       47.5045       48.1448    
  45  0.809729     -0.211055     -0.944466E-01  0.944466E-01   47.7700       47.8645    
  46  0.651880     -0.427895     -0.191482      0.191482       47.0228       47.2142    
  47  0.515020     -0.663550     -0.296936      0.296936       47.2837       47.5807    
  48  0.359059      -1.02427     -0.458357      0.458357       47.2294       47.6878    
  49  0.516010E-02  -5.26680      -2.35688       2.35688       47.4087       49.7656    
  50  0.321807      -1.13380     -0.507373      0.507373       47.2953       47.8027    
  51  0.787972     -0.238293     -0.106636      0.106636       47.6707       47.7773    
  52  0.842264     -0.171662     -0.768182E-01  0.768182E-01   47.8373       47.9141    
  53  0.201829      -1.60034     -0.716146      0.716146       47.6886       48.4048    
  54  0.650136     -0.430573     -0.192680      0.192680       47.5498       47.7425    
  55  0.498155     -0.696844     -0.311835      0.311835       47.5743       47.8861    
  56  0.780214E-01  -2.55077      -1.14146       1.14146       47.4083       48.5497    
  57  0.840777     -0.173429     -0.776087E-01  0.776087E-01   47.4443       47.5219    
  58  0.514128     -0.665282     -0.297712      0.297712       47.8076       48.1053    
  59  0.683522E-01  -2.68308      -1.20067       1.20067       47.6812       48.8819    
  60  0.376137E-01  -3.28039      -1.46796       1.46796       47.7484       49.2163    
  61  0.284022      -1.25870     -0.563266      0.563266       48.0954       48.6586    
  62  0.136027      -1.99490     -0.892711      0.892711       47.8383       48.7310    
  63  0.698137     -0.359341     -0.160804      0.160804       47.7270       47.8878    
  64  0.436751     -0.828392     -0.370703      0.370703       47.0941       47.4648    
  65  0.983110     -0.170340E-01 -0.762267E-02  0.762267E-02   47.1740       47.1816    
  66  0.807889E-01  -2.51592      -1.12586       1.12586       47.5418       48.6676    
  67  0.618306     -0.480773     -0.215144      0.215144       48.0462       48.2614    
  68  0.640808     -0.445025     -0.199147      0.199147       47.5153       47.7145    
  69  0.353445      -1.04003     -0.465409      0.465409       47.2596       47.7250    
  70  0.705613     -0.348688     -0.156037      0.156037       46.9633       47.1193    
loop,thermsimp(1:2)       67  0.152498      0.317024    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    429         46.87          0.83          1.11         23.82          0.48          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    430         46.92          0.82          1.11         23.81          0.44          0.04         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       67
neval is:      429
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       68
neval is:      429


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      429     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089     -0.232291      0.232291       46.9633       47.1955    
   2  0.204294      -1.58819     -0.710712      0.710712       47.1740       47.8847    
   3  0.902141     -0.102985     -0.460853E-01  0.460853E-01   47.0228       47.0689    
   4  0.317306      -1.14789     -0.513677      0.513677       47.1025       47.6162    
   5  0.914914E-01  -2.39151      -1.07019       1.07019       46.9668       48.0370    
   6  0.362439      -1.01490     -0.454164      0.454164       47.0828       47.5370    
   7  0.284546      -1.25686     -0.562440      0.562440       47.3525       47.9150    
   8  0.752727     -0.284053     -0.127113      0.127113       47.2503       47.3774    
   9  0.972148     -0.282475E-01 -0.126407E-01  0.126407E-01   47.2583       47.2709    
  10  0.312417      -1.16342     -0.520625      0.520625       47.2168       47.7374    
  11  0.772549E-01  -2.56064      -1.14588       1.14588       47.4353       48.5812    
  12  0.190763      -1.65672     -0.741379      0.741379       47.3343       48.0757    
  13  0.829036     -0.187492     -0.839021E-01  0.839021E-01   47.4495       47.5334    
  14  0.309766      -1.17194     -0.524439      0.524439       47.0941       47.6185    
  15  0.691616     -0.368724     -0.165003      0.165003       47.3397       47.5047    
  16  0.177510      -1.72873     -0.773601      0.773601       47.1197       47.8933    
  17  0.848561     -0.164214     -0.734851E-01  0.734851E-01   47.4042       47.4777    
  18  0.464945     -0.765836     -0.342709      0.342709       47.4443       47.7870    
  19  0.626682     -0.467316     -0.209122      0.209122       47.0330       47.2421    
  20  0.451266     -0.795699     -0.356073      0.356073       47.2837       47.6398    
  21  0.161179E-01  -4.12783      -1.84719       1.84719       47.4037       49.2508    
  22  0.848853     -0.163869     -0.733311E-01  0.733311E-01   47.4331       47.5064    
  23  0.565946     -0.569256     -0.254740      0.254740       47.0382       47.2929    
  24  0.798567     -0.224937     -0.100659      0.100659       47.2294       47.3301    
  25  0.282371      -1.26453     -0.565875      0.565875       47.5153       48.0812    
  26  0.887219     -0.119663     -0.535490E-01  0.535490E-01   47.2596       47.3132    
  27  0.311981      -1.16481     -0.521250      0.521250       47.4631       47.9843    
  28  0.454937     -0.787596     -0.352447      0.352447       47.3584       47.7108    
  29  0.200774E-01  -3.90816      -1.74889       1.74889       47.5377       49.2866    
  30  0.549692     -0.598397     -0.267781      0.267781       47.5498       47.8176    
  31  0.928164     -0.745470E-01 -0.333595E-01  0.333595E-01   47.6783       47.7116    
  32  0.876026     -0.132360     -0.592306E-01  0.592306E-01   47.3177       47.3769    
  33  0.360538      -1.02016     -0.456517      0.456517       47.6707       48.1272    
  34  0.810484     -0.210124     -0.940297E-01  0.940297E-01   47.5054       47.5994    
  35  0.350387      -1.04872     -0.469298      0.469298       47.2953       47.7646    
  36  0.609257     -0.495514     -0.221741      0.221741       47.4614       47.6831    
  37  0.847473     -0.165497     -0.740592E-01  0.740592E-01   47.3698       47.4438    
  38  0.459433     -0.777763     -0.348046      0.348046       47.7700       48.1181    
  39  0.213778      -1.54282     -0.690407      0.690407       47.5267       48.2171    
  40  0.983077     -0.170677E-01 -0.763772E-02  0.763772E-02   47.5743       47.5819    
  41  0.719533     -0.329153     -0.147295      0.147295       47.7270       47.8743    
  42  0.317292      -1.14793     -0.513697      0.513697       47.0706       47.5843    
  43  0.300670      -1.20174     -0.537776      0.537776       47.8373       48.3750    
  44  0.486388     -0.720748     -0.322533      0.322533       47.4206       47.7431    
  45  0.309580      -1.17254     -0.524707      0.524707       47.1953       47.7200    
  46  0.111802      -2.19103     -0.980479      0.980479       47.7101       48.6906    
  47  0.913484     -0.904897E-01 -0.404939E-01  0.404939E-01   47.3068       47.3473    
  48  0.438377     -0.824676     -0.369040      0.369040       47.4100       47.7791    
  49  0.773114     -0.257329     -0.115154      0.115154       47.4822       47.5974    
  50  0.248259      -1.39328     -0.623490      0.623490       47.3370       47.9604    
  51  0.502855     -0.687454     -0.307634      0.307634       47.8076       48.1152    
  52  0.827610E-01  -2.49180      -1.11507       1.11507       47.5045       48.6196    
  53  0.528759     -0.637222     -0.285155      0.285155       47.8360       48.1211    
  54  0.711957     -0.339738     -0.152032      0.152032       47.7154       47.8674    
  55  0.703963     -0.351029     -0.157084      0.157084       47.5693       47.7263    
  56  0.419247     -0.869295     -0.389007      0.389007       48.0462       48.4353    
  57  0.939830     -0.620566E-01 -0.277701E-01  0.277701E-01   47.6895       47.7173    
  58  0.401337     -0.912955     -0.408545      0.408545       47.4189       47.8274    
  59  0.547477     -0.602435     -0.269588      0.269588       47.2799       47.5495    
  60  0.237364      -1.43816     -0.643573      0.643573       47.6886       48.3322    
  61  0.619970E-01  -2.78067      -1.24434       1.24434       47.4395       48.6838    
  62  0.662658     -0.411496     -0.184143      0.184143       47.4083       47.5924    
  63  0.891998     -0.114291     -0.511449E-01  0.511449E-01   48.0954       48.1465    
  64  0.830370     -0.185883     -0.831822E-01  0.831822E-01   47.5418       47.6249    
  65  0.900614     -0.104678     -0.468433E-01  0.468433E-01   47.0782       47.1251    
  66  0.258356      -1.35342     -0.605650      0.605650       47.8383       48.4439    
  67  0.946683E-01  -2.35738      -1.05492       1.05492       47.6944       48.7493    
  68  0.763751     -0.269514     -0.120606      0.120606       47.6812       47.8018    
  69  0.161805      -1.82136     -0.815054      0.815054       47.7484       48.5634    
  70  0.571882     -0.558823     -0.250072      0.250072       46.8669       47.1170    
loop,thermsimp(1:2)       68  0.232291      0.710712    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    431         46.83          0.83          1.13         23.81          0.55          0.05         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    432         47.03          0.82          1.11         23.72          0.60          0.04         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       68
neval is:      431
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       69
neval is:      431


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      431     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560     -0.366750      0.366750       47.0228       47.3895    
   2  0.752309     -0.284608     -0.127361      0.127361       46.8669       46.9943    
   3  0.209108      -1.56490     -0.700290      0.700290       47.0782       47.7785    
   4  0.842922     -0.170881     -0.764689E-01  0.764689E-01   46.9633       47.0397    
   5  0.161148      -1.82543     -0.816874      0.816874       47.0330       47.8498    
   6  0.601748     -0.507917     -0.227291      0.227291       47.2583       47.4855    
   7  0.890912     -0.115510     -0.516903E-01  0.516903E-01   47.0382       47.0899    
   8  0.631939     -0.458963     -0.205385      0.205385       47.2596       47.4650    
   9  0.144759E-01  -4.23527      -1.89527       1.89527       47.2294       49.1247    
  10  0.653698     -0.425110     -0.190235      0.190235       47.3068       47.4971    
  11  0.401463     -0.912639     -0.408403      0.408403       47.3177       47.7261    
  12  0.906126     -0.985765E-01 -0.441127E-01  0.441127E-01   47.2503       47.2944    
  13  0.480601E-01  -3.03530      -1.35829       1.35829       47.3698       48.7281    
  14  0.264260      -1.33082     -0.595538      0.595538       47.4042       47.9997    
  15  0.586033     -0.534379     -0.239133      0.239133       47.3397       47.5788    
  16  0.323072      -1.12988     -0.505617      0.505617       47.4331       47.9387    
  17  0.785147     -0.241884     -0.108242      0.108242       47.4495       47.5577    
  18  0.139165      -1.97210     -0.882508      0.882508       47.0828       47.9653    
  19  0.105818E-01  -4.54862      -2.03549       2.03549       47.2799       49.3154    
  20  0.896943     -0.108763     -0.486713E-01  0.486713E-01   47.5743       47.6229    
  21  0.854239     -0.157544     -0.705003E-01  0.705003E-01   47.0706       47.1411    
  22  0.566003     -0.569157     -0.254696      0.254696       47.4083       47.6630    
  23  0.566387     -0.568477     -0.254392      0.254392       47.4822       47.7366    
  24  0.414905     -0.879707     -0.393666      0.393666       47.5054       47.8991    
  25  0.173772      -1.75001     -0.783126      0.783126       47.1025       47.8856    
  26  0.884308E-01  -2.42554      -1.08542       1.08542       47.0941       48.1795    
  27  0.417457     -0.873573     -0.390921      0.390921       47.5418       47.9327    
  28  0.334615      -1.09477     -0.489908      0.489908       47.2837       47.7737    
  29  0.706024E-01  -2.65069      -1.18618       1.18618       47.4614       48.6476    
  30  0.996422     -0.358418E-02 -0.160391E-02  0.160391E-02   47.3584       47.3600    
  31  0.894500     -0.111491     -0.498918E-01  0.498918E-01   47.6783       47.7282    
  32  0.827855     -0.188917     -0.845397E-01  0.845397E-01   47.6895       47.7741    
  33  0.434964     -0.832492     -0.372538      0.372538       47.1953       47.5678    
  34  0.121450      -2.10825     -0.943436      0.943436       47.5693       48.5127    
  35  0.498977     -0.695195     -0.311098      0.311098       47.2168       47.5279    
  36  0.117961      -2.13740     -0.956480      0.956480       47.4206       48.3771    
  37  0.309211      -1.17373     -0.525241      0.525241       47.2953       47.8205    
  38  0.786265     -0.240461     -0.107606      0.107606       47.4100       47.5176    
  39  0.614330     -0.487222     -0.218030      0.218030       47.4443       47.6623    
  40  0.820857     -0.197407     -0.883388E-01  0.883388E-01   47.6812       47.7696    
  41  0.670448     -0.399809     -0.178913      0.178913       47.5498       47.7287    
  42  0.742403     -0.297863     -0.133293      0.133293       47.4189       47.5522    
  43  0.760912E-01  -2.57582      -1.15267       1.15267       47.7154       48.8681    
  44  0.709677     -0.342945     -0.153467      0.153467       47.7270       47.8805    
  45  0.943449     -0.582133E-01 -0.260503E-01  0.260503E-01   47.1740       47.2000    
  46  0.176370      -1.73517     -0.776485      0.776485       47.1197       47.8962    
  47  0.866890     -0.142843     -0.639219E-01  0.639219E-01   47.3525       47.4165    
  48  0.711056     -0.341004     -0.152598      0.152598       47.3370       47.4896    
  49  0.929667E-01  -2.37551      -1.06304       1.06304       47.4631       48.5261    
  50  0.960091     -0.407270E-01 -0.182252E-01  0.182252E-01   46.9668       46.9851    
  51  0.948380     -0.530000E-01 -0.237173E-01  0.237173E-01   47.3343       47.3580    
  52  0.257449      -1.35693     -0.607223      0.607223       47.5153       48.1225    
  53  0.117236      -2.14357     -0.959240      0.959240       47.8076       48.7668    
  54  0.218340E-01  -3.82429      -1.71136       1.71136       47.7700       49.4814    
  55  0.523421     -0.647370     -0.289696      0.289696       47.8360       48.1257    
  56  0.577211     -0.549547     -0.245920      0.245920       47.6707       47.9166    
  57  0.288682      -1.24243     -0.555984      0.555984       48.0954       48.6514    
  58  0.672927E-01  -2.69870      -1.20766       1.20766       47.5267       48.7343    
  59  0.530586     -0.633774     -0.283612      0.283612       47.6886       47.9722    
  60  0.511831     -0.669760     -0.299716      0.299716       47.8373       48.1370    
  61  0.658851     -0.417258     -0.186722      0.186722       48.0462       48.2330    
  62  0.108719E-01  -4.52157      -2.02339       2.02339       47.8383       49.8617    
  63  0.252985      -1.37443     -0.615052      0.615052       47.7484       48.3634    
  64  0.741974     -0.298440     -0.133551      0.133551       47.4353       47.5688    
  65  0.978889     -0.213374E-01 -0.954843E-02  0.954843E-02   47.5045       47.5140    
  66  0.482845     -0.728059     -0.325804      0.325804       47.4395       47.7653    
  67  0.701589     -0.354408     -0.158596      0.158596       47.7101       47.8687    
  68  0.323083      -1.12985     -0.505603      0.505603       47.6944       48.2000    
  69  0.960426     -0.403786E-01 -0.180693E-01  0.180693E-01   47.4037       47.4217    
  70  0.803478     -0.218806     -0.979149E-01  0.979149E-01   46.8321       46.9300    
loop,thermsimp(1:2)       69  0.366750      0.127361    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    433         47.19          0.83          1.11         23.80          0.64          0.04         26.43
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       69
neval is:      432
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       70
neval is:      432


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      432     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.522593E-02  0.522593E-02   46.8321       46.8373    
   2  0.482301     -0.729186     -0.326309      0.326309       46.9668       47.2931    
   3  0.546964     -0.603372     -0.270007      0.270007       46.8669       47.1369    
   4  0.543918     -0.608957     -0.272507      0.272507       46.9633       47.2358    
   5  0.427641     -0.849472     -0.380136      0.380136       47.0382       47.4183    
   6  0.498345     -0.696462     -0.311665      0.311665       47.0706       47.3822    
   7  0.989308     -0.107494E-01 -0.481031E-02  0.481031E-02   47.1740       47.1788    
   8  0.658822     -0.417302     -0.186741      0.186741       47.2503       47.4371    
   9  0.917808     -0.857673E-01 -0.383806E-01  0.383806E-01   47.3343       47.3727    
  10  0.914490E-04  -9.29973      -4.16160       4.16160       47.3584       51.5200    
  11  0.989901     -0.101499E-01 -0.454205E-02  0.454205E-02   47.0228       47.0273    
  12  0.558183     -0.583069     -0.260922      0.260922       47.3525       47.6135    
  13  0.706994     -0.346733     -0.155162      0.155162       47.4037       47.5588    
  14  0.599152     -0.512240     -0.229226      0.229226       47.2596       47.4888    
  15  0.845909     -0.167343     -0.748854E-01  0.748854E-01   47.2583       47.3331    
  16  0.655384     -0.422534     -0.189083      0.189083       47.3370       47.5260    
  17  0.412232E-01  -3.18875      -1.42696       1.42696       47.3068       48.7338    
  18  0.495401     -0.702387     -0.314316      0.314316       47.5045       47.8188    
  19  0.378829     -0.970671     -0.434372      0.434372       47.4100       47.8444    
  20  0.653665E-02  -5.03033      -2.25106       2.25106       47.2168       49.4679    
  21  0.782670     -0.245045     -0.109657      0.109657       47.4189       47.5285    
  22  0.945547     -0.559921E-01 -0.250563E-01  0.250563E-01   47.4495       47.4745    
  23  0.969857     -0.306063E-01 -0.136962E-01  0.136962E-01   47.1953       47.2090    
  24  0.822249     -0.195712     -0.875804E-01  0.875804E-01   47.4353       47.5229    
  25  0.265012E-01  -3.63056      -1.62467       1.62467       47.3397       48.9643    
  26  0.360432E-01  -3.32304      -1.48705       1.48705       47.5743       49.0613    
  27  0.796418     -0.227631     -0.101864      0.101864       47.4443       47.5461    
  28  0.292313E-01  -3.53252      -1.58079       1.58079       47.4083       48.9891    
  29  0.227321      -1.48139     -0.662919      0.662919       47.3177       47.9806    
  30  0.812637     -0.207471     -0.928425E-01  0.928425E-01   47.6783       47.7711    
  31  0.930544     -0.719857E-01 -0.322134E-01  0.322134E-01   47.5498       47.5820    
  32  0.674873     -0.393231     -0.175970      0.175970       47.4822       47.6582    
  33  0.264030      -1.33169     -0.595928      0.595928       47.4395       48.0354    
  34  0.807464     -0.213856     -0.957000E-01  0.957000E-01   47.6812       47.7769    
  35  0.653731     -0.425060     -0.190213      0.190213       47.2837       47.4740    
  36  0.858536     -0.152527     -0.682553E-01  0.682553E-01   47.6895       47.7578    
  37  0.538887     -0.618250     -0.276665      0.276665       47.0782       47.3549    
  38  0.468049     -0.759182     -0.339732      0.339732       47.2953       47.6350    
  39  0.401324     -0.912987     -0.408559      0.408559       47.0330       47.4415    
  40  0.363356      -1.01237     -0.453034      0.453034       47.7101       48.1632    
  41  0.924933     -0.780342E-01 -0.349201E-01  0.349201E-01   47.7270       47.7620    
  42  0.797289     -0.226538     -0.101375      0.101375       47.1025       47.2039    
  43  0.200097      -1.60895     -0.720001      0.720001       47.1197       47.8397    
  44  0.686219     -0.376559     -0.168509      0.168509       47.5054       47.6739    
  45  0.895629     -0.110230     -0.493274E-01  0.493274E-01   47.6707       47.7200    
  46  0.331830      -1.10313     -0.493648      0.493648       47.5418       48.0354    
  47  0.967018     -0.335379E-01 -0.150081E-01  0.150081E-01   47.4331       47.4481    
  48  0.268282      -1.31572     -0.588779      0.588779       47.0828       47.6716    
  49  0.472399     -0.749931     -0.335592      0.335592       47.6886       48.0242    
  50  0.399276E-01  -3.22069      -1.44125       1.44125       47.4042       48.8455    
  51  0.956493     -0.444820E-01 -0.199056E-01  0.199056E-01   47.5153       47.5352    
  52  0.444161     -0.811569     -0.363174      0.363174       47.8360       48.1992    
  53  0.308942      -1.17460     -0.525631      0.525631       47.8373       48.3629    
  54  0.602319     -0.506968     -0.226867      0.226867       47.0941       47.3210    
  55  0.533797     -0.627740     -0.280912      0.280912       47.6944       47.9753    
  56  0.990519     -0.952607E-02 -0.426289E-02  0.426289E-02   48.0462       48.0505    
  57  0.931261     -0.712158E-01 -0.318689E-01  0.318689E-01   47.7484       47.7803    
  58  0.185125      -1.68672     -0.754803      0.754803       47.4206       48.1754    
  59  0.251659E-02  -5.98485      -2.67820       2.67820       47.5693       50.2475    
  60  0.706458     -0.347491     -0.155501      0.155501       47.4631       47.6186    
  61  0.555619     -0.587673     -0.262982      0.262982       47.4614       47.7244    
  62  0.798153     -0.225455     -0.100891      0.100891       48.0954       48.1963    
  63  0.951290     -0.499358E-01 -0.223461E-01  0.223461E-01   47.3698       47.3921    
  64  0.247755      -1.39532     -0.624400      0.624400       47.5267       48.1511    
  65  0.867838     -0.141750     -0.634328E-01  0.634328E-01   47.8076       47.8710    
  66  0.164123E-01  -4.10972      -1.83909       1.83909       47.7154       49.5545    
  67  0.443305     -0.813497     -0.364038      0.364038       47.2294       47.5935    
  68  0.390544     -0.940215     -0.420743      0.420743       47.2799       47.7007    
  69  0.854116     -0.157688     -0.705649E-01  0.705649E-01   47.7700       47.8406    
  70  0.873727     -0.134987     -0.604065E-01  0.604065E-01   47.1883       47.2487    
loop,thermsimp(1:2)       70  0.522593E-02  0.326309    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    434         47.24          0.83          1.12         23.84          0.73          0.04         26.55
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       70
neval is:      433
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       71
neval is:      433


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      433     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575     -0.673820E-01  0.673820E-01   46.8321       46.8995    
   2  0.573661     -0.555717     -0.248682      0.248682       47.0228       47.2714    
   3  0.499290     -0.694569     -0.310817      0.310817       46.8669       47.1777    
   4  0.677563     -0.389253     -0.174190      0.174190       47.1740       47.3482    
   5  0.476566     -0.741149     -0.331662      0.331662       47.1025       47.4342    
   6  0.153036      -1.87708     -0.839988      0.839988       47.1953       48.0353    
   7  0.626270     -0.467973     -0.209417      0.209417       46.9633       47.1727    
   8  0.794744     -0.229735     -0.102806      0.102806       47.1883       47.2911    
   9  0.111868E-01  -4.49302      -2.01061       2.01061       46.9668       48.9774    
  10  0.643880     -0.440243     -0.197007      0.197007       47.0941       47.2911    
  11  0.634705     -0.454595     -0.203430      0.203430       47.2583       47.4617    
  12  0.653568     -0.425308     -0.190324      0.190324       47.0782       47.2685    
  13  0.888231     -0.118524     -0.530391E-01  0.530391E-01   47.3343       47.3874    
  14  0.681775E-01  -2.68564      -1.20182       1.20182       47.0706       48.2724    
  15  0.241248      -1.42193     -0.636309      0.636309       47.3698       48.0061    
  16  0.208857      -1.56610     -0.700827      0.700827       47.0382       47.7390    
  17  0.652439     -0.427038     -0.191098      0.191098       47.2503       47.4414    
  18  0.489833     -0.713691     -0.319374      0.319374       47.0330       47.3523    
  19  0.719225     -0.329581     -0.147486      0.147486       47.4331       47.5806    
  20  0.924762     -0.782189E-01 -0.350027E-01  0.350027E-01   47.2837       47.3188    
  21  0.845502     -0.167825     -0.751011E-01  0.751011E-01   47.4495       47.5246    
  22  0.665989     -0.406482     -0.181899      0.181899       47.2596       47.4415    
  23  0.378562     -0.971376     -0.434688      0.434688       47.4353       47.8700    
  24  0.396889     -0.924098     -0.413531      0.413531       47.3370       47.7505    
  25  0.158089      -1.84460     -0.825452      0.825452       47.4189       48.2443    
  26  0.590577     -0.526655     -0.235677      0.235677       47.5153       47.7510    
  27  0.949513     -0.518061E-01 -0.231831E-01  0.231831E-01   47.4443       47.4674    
  28  0.518198     -0.657398     -0.294183      0.294183       47.4037       47.6978    
  29  0.551080     -0.595875     -0.266652      0.266652       47.5498       47.8165    
  30  0.986285     -0.138097E-01 -0.617982E-02  0.617982E-02   47.2294       47.2356    
  31  0.920142     -0.832276E-01 -0.372441E-01  0.372441E-01   47.3525       47.3898    
  32  0.133201      -2.01590     -0.902109      0.902109       47.4631       48.3652    
  33  0.584507     -0.536987     -0.240300      0.240300       47.2953       47.5356    
  34  0.790583     -0.234984     -0.105155      0.105155       47.4822       47.5874    
  35  0.702664     -0.352876     -0.157911      0.157911       47.0828       47.2407    
  36  0.148885      -1.90458     -0.852294      0.852294       47.5054       48.3577    
  37  0.290436      -1.23637     -0.553273      0.553273       47.2799       47.8332    
  38  0.638249     -0.449027     -0.200938      0.200938       47.6707       47.8716    
  39  0.381605     -0.963369     -0.431105      0.431105       47.4614       47.8925    
  40  0.823069     -0.194716     -0.871347E-01  0.871347E-01   47.6895       47.7767    
  41  0.492318     -0.708630     -0.317110      0.317110       47.7270       48.0441    
  42  0.773199     -0.257218     -0.115104      0.115104       47.6783       47.7934    
  43  0.289475E-01  -3.54227      -1.58516       1.58516       47.6812       49.2664    
  44  0.355683      -1.03371     -0.462584      0.462584       47.7484       48.2110    
  45  0.160396      -1.83011     -0.818968      0.818968       47.5045       48.3234    
  46  0.972861     -0.275140E-01 -0.123124E-01  0.123124E-01   47.1197       47.1321    
  47  0.781938E-02  -4.85115      -2.17087       2.17087       47.7700       49.9409    
  48  0.225299      -1.49033     -0.666918      0.666918       47.4100       48.0770    
  49  0.631686     -0.459363     -0.205563      0.205563       47.8076       48.0131    
  50  0.212316      -1.54968     -0.693476      0.693476       47.6944       48.3878    
  51  0.673664     -0.395024     -0.176772      0.176772       47.3177       47.4945    
  52  0.728322     -0.317012     -0.141862      0.141862       47.6886       47.8305    
  53  0.368576     -0.998108     -0.446650      0.446650       47.4395       47.8861    
  54  0.381088     -0.964725     -0.431712      0.431712       47.5418       47.9735    
  55  0.481283     -0.731301     -0.327255      0.327255       48.0462       48.3735    
  56  0.801664     -0.221066     -0.989262E-01  0.989262E-01   47.5267       47.6256    
  57  0.285936      -1.25199     -0.560261      0.560261       47.7101       48.2704    
  58  0.412374     -0.885823     -0.396403      0.396403       47.4206       47.8170    
  59  0.815685     -0.203727     -0.911671E-01  0.911671E-01   48.0954       48.1865    
  60  0.251414      -1.38065     -0.617838      0.617838       47.8360       48.4538    
  61  0.598278     -0.513699     -0.229879      0.229879       47.8373       48.0671    
  62  0.750137     -0.287499     -0.128655      0.128655       47.3068       47.4355    
  63  0.412907     -0.884533     -0.395826      0.395826       47.4042       47.8000    
  64  0.318297      -1.14477     -0.512282      0.512282       47.3397       47.8519    
  65  0.520766     -0.652454     -0.291971      0.291971       47.4083       47.7002    
  66  0.983801     -0.163320E-01 -0.730853E-02  0.730853E-02   47.5743       47.5816    
  67  0.897709     -0.107909     -0.482890E-01  0.482890E-01   47.2168       47.2651    
  68  0.645455     -0.437800     -0.195914      0.195914       47.7154       47.9113    
  69  0.995902     -0.410634E-02 -0.183758E-02  0.183758E-02   47.5693       47.5711    
  70  0.333624      -1.09774     -0.491235      0.491235       47.2353       47.7266    
loop,thermsimp(1:2)       71  0.673820E-01  0.248682    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    435         47.07          0.83          1.11         23.77          0.56          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    436         47.82          0.84          1.12         23.82          0.57          0.04         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       71
neval is:      435
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       72
neval is:      435


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      435     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232     -0.366604      0.366604       46.8321       47.1987    
   2  0.202294      -1.59803     -0.715114      0.715114       47.1197       47.8349    
   3  0.873786     -0.134920     -0.603764E-01  0.603764E-01   46.9633       47.0236    
   4  0.262141      -1.33887     -0.599142      0.599142       46.8669       47.4660    
   5  0.342005      -1.07293     -0.480132      0.480132       47.2294       47.7096    
   6  0.421217     -0.864607     -0.386909      0.386909       47.0828       47.4697    
   7  0.618489     -0.480477     -0.215012      0.215012       47.2168       47.4318    
   8  0.412552     -0.885393     -0.396210      0.396210       47.0782       47.4744    
   9  0.951192     -0.500396E-01 -0.223926E-01  0.223926E-01   47.0228       47.0452    
  10  0.298546      -1.20883     -0.540949      0.540949       47.1883       47.7292    
  11  0.805120     -0.216763     -0.970010E-01  0.970010E-01   47.0941       47.1911    
  12  0.208146      -1.56951     -0.702352      0.702352       47.2837       47.9861    
  13  0.924021     -0.790209E-01 -0.353616E-01  0.353616E-01   47.1740       47.2093    
  14  0.447624     -0.803802     -0.359699      0.359699       47.0330       47.3927    
  15  0.667709     -0.403903     -0.180745      0.180745       47.3343       47.5151    
  16  0.767295E-01  -2.56747      -1.14893       1.14893       47.3525       48.5015    
  17  0.301582      -1.19871     -0.536420      0.536420       47.1025       47.6389    
  18  0.788580     -0.237522     -0.106290      0.106290       47.3068       47.4131    
  19  0.887020     -0.119888     -0.536494E-01  0.536494E-01   47.2503       47.3040    
  20  0.233035E-01  -3.75915      -1.68221       1.68221       47.2596       48.9418    
  21  0.899320     -0.106116     -0.474868E-01  0.474868E-01   47.2583       47.3057    
  22  0.144480      -1.93461     -0.865733      0.865733       47.4443       48.3100    
  23  0.274629      -1.29233     -0.578315      0.578315       47.3177       47.8960    
  24  0.831597     -0.184407     -0.825215E-01  0.825215E-01   47.4495       47.5320    
  25  0.388827     -0.944620     -0.422714      0.422714       47.2953       47.7180    
  26  0.257578      -1.35643     -0.607000      0.607000       47.5693       48.1763    
  27  0.427791     -0.849120     -0.379978      0.379978       47.4331       47.8131    
  28  0.837664E-01  -2.47972      -1.10967       1.10967       47.5743       48.6839    
  29  0.782727     -0.244972     -0.109624      0.109624       47.4822       47.5918    
  30  0.259676E-01  -3.65091      -1.63377       1.63377       47.5267       49.1605    
  31  0.166181      -1.79468     -0.803114      0.803114       47.4037       48.2068    
  32  0.360749      -1.01957     -0.456255      0.456255       47.4083       47.8645    
  33  0.369697     -0.995071     -0.445291      0.445291       47.2353       47.6806    
  34  0.959392     -0.414553E-01 -0.185511E-01  0.185511E-01   47.0382       47.0567    
  35  0.449170     -0.800353     -0.358156      0.358156       47.3370       47.6951    
  36  0.655790E-02  -5.02708      -2.24960       2.24960       47.5153       49.7649    
  37  0.133569      -2.01313     -0.900871      0.900871       47.6895       48.5904    
  38  0.282061      -1.26563     -0.566367      0.566367       47.6783       48.2447    
  39  0.431813     -0.839762     -0.375791      0.375791       47.4042       47.7800    
  40  0.713174     -0.338031     -0.151268      0.151268       47.5498       47.7011    
  41  0.511305     -0.670790     -0.300176      0.300176       47.4206       47.7207    
  42  0.264485      -1.32997     -0.595158      0.595158       47.6886       48.2838    
  43  0.779298     -0.249362     -0.111589      0.111589       47.2799       47.3915    
  44  0.709352E-02  -4.94857      -2.21447       2.21447       47.3397       49.5541    
  45  0.770402     -0.260843     -0.116726      0.116726       47.4353       47.5520    
  46  0.694393     -0.364718     -0.163210      0.163210       47.6707       47.8339    
  47  0.589268E-01  -2.83146      -1.26707       1.26707       47.4395       48.7065    
  48  0.817644     -0.201328     -0.900936E-01  0.900936E-01   47.4614       47.5515    
  49  0.990168     -0.988073E-02 -0.442159E-02  0.442159E-02   47.7154       47.7198    
  50  0.733536E-01  -2.61246      -1.16907       1.16907       47.5418       48.7108    
  51  0.781472     -0.246575     -0.110342      0.110342       47.3698       47.4801    
  52  0.582548     -0.540344     -0.241802      0.241802       47.8076       48.0494    
  53  0.644915     -0.438636     -0.196288      0.196288       47.1953       47.3916    
  54  0.726975     -0.318863     -0.142690      0.142690       47.7270       47.8697    
  55  0.562265     -0.575782     -0.257661      0.257661       47.8373       48.0949    
  56  0.166410      -1.79330     -0.802496      0.802496       47.4100       48.2125    
  57  0.847052     -0.165994     -0.742816E-01  0.742816E-01   48.0954       48.1697    
  58  0.437688     -0.826250     -0.369744      0.369744       47.7484       48.1181    
  59  0.408722     -0.894719     -0.400384      0.400384       47.4189       47.8193    
  60  0.794023     -0.230643     -0.103212      0.103212       47.7101       47.8133    
  61  0.259946      -1.34728     -0.602903      0.602903       47.0706       47.6735    
  62  0.700123     -0.356499     -0.159532      0.159532       47.5045       47.6640    
  63  0.564078E-01  -2.87515      -1.28662       1.28662       47.5054       48.7920    
  64  0.999061     -0.939094E-03 -0.420241E-03  0.420241E-03   47.4631       47.4635    
  65  0.555696     -0.587534     -0.262920      0.262920       48.0462       48.3092    
  66  0.103792      -2.26537      -1.01375       1.01375       47.6944       48.7081    
  67  0.318583      -1.14387     -0.511879      0.511879       47.8360       48.3479    
  68  0.321355      -1.13521     -0.508002      0.508002       46.9668       47.4748    
  69  0.350004      -1.04981     -0.469787      0.469787       47.6812       48.1510    
  70  0.786507     -0.240153     -0.107468      0.107468       47.0695       47.1769    
loop,thermsimp(1:2)       72  0.366604      0.715114    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    437         46.89          0.83          1.11         23.79          0.51          0.04         26.29
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    438         47.14          0.83          1.11         23.79          0.55          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       72
neval is:      437
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       73
neval is:      437


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      437     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326     -0.954629E-01  0.954629E-01   46.9633       47.0587    
   2  0.554495     -0.589697     -0.263888      0.263888       47.0228       47.2867    
   3  0.997056     -0.294851E-02 -0.131945E-02  0.131945E-02   47.0382       47.0395    
   4  0.901183E-01  -2.40663      -1.07696       1.07696       47.0695       48.1464    
   5  0.296736      -1.21491     -0.543670      0.543670       47.0941       47.6378    
   6  0.907820     -0.967094E-01 -0.432772E-01  0.432772E-01   46.8321       46.8754    
   7  0.325542      -1.12226     -0.502209      0.502209       47.1740       47.6762    
   8  0.947537     -0.538896E-01 -0.241154E-01  0.241154E-01   47.2503       47.2745    
   9  0.378276     -0.972130     -0.435025      0.435025       47.2583       47.6933    
  10  0.985613     -0.144920E-01 -0.648510E-02  0.648510E-02   47.2799       47.2864    
  11  0.167434      -1.78717     -0.799752      0.799752       47.1953       47.9950    
  12  0.693849E-01  -2.66809      -1.19396       1.19396       47.0330       48.2269    
  13  0.434983     -0.832447     -0.372518      0.372518       47.3068       47.6793    
  14  0.998656     -0.134491E-02 -0.601843E-03  0.601843E-03   47.2168       47.2174    
  15  0.650302     -0.430318     -0.192566      0.192566       47.4631       47.6556    
  16  0.152610      -1.87987     -0.841236      0.841236       46.8669       47.7081    
  17  0.273947      -1.29482     -0.579428      0.579428       47.0828       47.6622    
  18  0.990471     -0.957469E-02 -0.428464E-02  0.428464E-02   47.0782       47.0825    
  19  0.684493     -0.379077     -0.169636      0.169636       46.9668       47.1365    
  20  0.864467E-01  -2.44823      -1.09557       1.09557       47.3698       48.4654    
  21  0.546085     -0.604980     -0.270727      0.270727       47.3343       47.6051    
  22  0.246642      -1.39982     -0.626413      0.626413       47.4495       48.0759    
  23  0.484505     -0.724627     -0.324269      0.324269       47.4614       47.7857    
  24  0.567359     -0.566763     -0.253625      0.253625       47.4353       47.6889    
  25  0.564371     -0.572043     -0.255988      0.255988       47.4822       47.7382    
  26  0.825604     -0.191640     -0.857585E-01  0.857585E-01   47.1025       47.1883    
  27  0.302493      -1.19570     -0.535072      0.535072       47.5045       48.0395    
  28  0.630396     -0.461407     -0.206478      0.206478       47.0706       47.2771    
  29  0.886734     -0.120210     -0.537938E-01  0.537938E-01   47.2353       47.2891    
  30  0.389345     -0.943288     -0.422119      0.422119       47.3370       47.7591    
  31  0.181391      -1.70710     -0.763922      0.763922       47.5498       48.3138    
  32  0.933221     -0.691132E-01 -0.309279E-01  0.309279E-01   47.2294       47.2604    
  33  0.169237E-01  -4.07904      -1.82536       1.82536       47.2953       49.1206    
  34  0.757788     -0.277351     -0.124114      0.124114       47.7154       47.8395    
  35  0.300993E-01  -3.50325      -1.56769       1.56769       47.4206       48.9883    
  36  0.395621     -0.927300     -0.414964      0.414964       47.1883       47.6032    
  37  0.459505     -0.777605     -0.347976      0.347976       47.4042       47.7522    
  38  0.733176     -0.310370     -0.138890      0.138890       47.4331       47.5720    
  39  0.575459     -0.552587     -0.247281      0.247281       47.7101       47.9574    
  40  0.560889     -0.578233     -0.258757      0.258757       47.4189       47.6776    
  41  0.428351     -0.847812     -0.379393      0.379393       47.6707       48.0501    
  42  0.553832     -0.590895     -0.264424      0.264424       47.1197       47.3842    
  43  0.581118     -0.542801     -0.242902      0.242902       47.4083       47.6512    
  44  0.319195E-01  -3.44454      -1.54142       1.54142       47.7270       49.2685    
  45  0.224512E-01  -3.79641      -1.69888       1.69888       47.3177       49.0166    
  46  0.113637E-01  -4.47733      -2.00359       2.00359       47.2837       49.2873    
  47  0.889134     -0.117508     -0.525844E-01  0.525844E-01   47.8076       47.8602    
  48  0.422937     -0.860531     -0.385085      0.385085       47.8373       48.2223    
  49  0.479928     -0.734119     -0.328516      0.328516       47.7484       48.0769    
  50  0.813133     -0.206861     -0.925695E-01  0.925695E-01   47.6812       47.7738    
  51  0.544683     -0.607551     -0.271877      0.271877       48.0954       48.3673    
  52  0.694184E-01  -2.66760      -1.19374       1.19374       47.5693       48.7630    
  53  0.656508     -0.420820     -0.188315      0.188315       47.4037       47.5920    
  54  0.532118     -0.630889     -0.282321      0.282321       47.4100       47.6924    
  55  0.485731E-01  -3.02468      -1.35354       1.35354       47.6783       49.0318    
  56  0.525424     -0.643549     -0.287986      0.287986       47.6886       47.9766    
  57  0.773368E-01  -2.55959      -1.14541       1.14541       48.0462       49.1917    
  58  0.741245     -0.299424     -0.133991      0.133991       47.4443       47.5783    
  59  0.286066      -1.25153     -0.560058      0.560058       47.8360       48.3960    
  60  0.327223      -1.11711     -0.499904      0.499904       47.3525       47.8524    
  61  0.124235      -2.08558     -0.933292      0.933292       47.6895       48.6228    
  62  0.599337     -0.511931     -0.229087      0.229087       47.5743       47.8034    
  63  0.666632     -0.405518     -0.181468      0.181468       47.4395       47.6209    
  64  0.810607     -0.209973     -0.939620E-01  0.939620E-01   47.6944       47.7883    
  65  0.104486      -2.25870      -1.01076       1.01076       47.5418       48.5525    
  66  0.516216     -0.661229     -0.295898      0.295898       47.5054       47.8013    
  67  0.671995     -0.397504     -0.177882      0.177882       47.2596       47.4375    
  68  0.343614      -1.06824     -0.478033      0.478033       47.5267       48.0047    
  69  0.423208     -0.859892     -0.384799      0.384799       47.3397       47.7245    
  70  0.301080E-01  -3.50297      -1.56757       1.56757       46.8942       48.4618    
loop,thermsimp(1:2)       73  0.954629E-01  0.263888    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    439         47.12          0.84          1.12         23.80          0.56          0.04         26.36
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    440         48.32          0.84          1.12         23.85          0.71          0.04         26.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       73
neval is:      439
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       74
neval is:      439


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      439     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889     -0.523075E-01  0.523075E-01   46.8321       46.8844    
   2  0.480213     -0.733525     -0.328250      0.328250       47.0382       47.3664    
   3  0.226156      -1.48653     -0.665218      0.665218       46.9633       47.6285    
   4  0.633402     -0.456651     -0.204350      0.204350       47.0782       47.2826    
   5  0.925311     -0.776258E-01 -0.347373E-01  0.347373E-01   46.9668       47.0016    
   6  0.498405     -0.696343     -0.311611      0.311611       47.1025       47.4141    
   7  0.133283      -2.01528     -0.901832      0.901832       47.2168       48.1187    
   8  0.657074E-01  -2.72254      -1.21833       1.21833       47.2294       48.4478    
   9  0.726758     -0.319162     -0.142824      0.142824       47.2503       47.3932    
  10  0.398365     -0.920388     -0.411871      0.411871       47.0706       47.4825    
  11  0.321047E-01  -3.43875      -1.53883       1.53883       47.2799       48.8187    
  12  0.276307      -1.28624     -0.575590      0.575590       47.0228       47.5984    
  13  0.483740     -0.726208     -0.324976      0.324976       47.2353       47.5603    
  14  0.224589      -1.49348     -0.668329      0.668329       47.1197       47.7881    
  15  0.832041     -0.183874     -0.822828E-01  0.822828E-01   47.2596       47.3419    
  16  0.939301     -0.626192E-01 -0.280219E-01  0.280219E-01   47.4331       47.4611    
  17  0.624052     -0.471522     -0.211004      0.211004       47.4443       47.6553    
  18  0.172753      -1.75589     -0.785757      0.785757       47.4037       48.1894    
  19  0.468323     -0.758597     -0.339470      0.339470       47.1883       47.5277    
  20  0.963461     -0.372229E-01 -0.166571E-01  0.166571E-01   47.3343       47.3510    
  21  0.812092     -0.208142     -0.931429E-01  0.931429E-01   47.4395       47.5326    
  22  0.376764     -0.976137     -0.436818      0.436818       47.0941       47.5309    
  23  0.791872E-01  -2.53594      -1.13483       1.13483       47.4083       48.5431    
  24  0.237003      -1.43968     -0.644254      0.644254       47.4631       48.1073    
  25  0.320094      -1.13914     -0.509762      0.509762       47.0828       47.5926    
  26  0.821410E-01  -2.49932      -1.11844       1.11844       47.1740       48.2924    
  27  0.789147     -0.236802     -0.105968      0.105968       47.4189       47.5248    
  28  0.734353E-01  -2.61135      -1.16857       1.16857       47.3068       48.4754    
  29  0.226401      -1.48545     -0.664733      0.664733       47.4353       48.1000    
  30  0.380831     -0.965399     -0.432013      0.432013       47.4100       47.8421    
  31  0.264857      -1.32857     -0.594529      0.594529       47.2583       47.8528    
  32  0.246167      -1.40174     -0.627276      0.627276       46.8669       47.4942    
  33  0.142133      -1.95099     -0.873064      0.873064       47.3397       48.2127    
  34  0.123438E-01  -4.39460      -1.96657       1.96657       47.4822       49.4488    
  35  0.853289     -0.158657     -0.709984E-01  0.709984E-01   47.4042       47.4752    
  36  0.418603     -0.870831     -0.389694      0.389694       47.3370       47.7267    
  37  0.235242      -1.44714     -0.647591      0.647591       47.6812       48.3288    
  38  0.841712     -0.172317     -0.771113E-01  0.771113E-01   47.4614       47.5385    
  39  0.113373      -2.17707     -0.974233      0.974233       47.6944       48.6686    
  40  0.617966     -0.481322     -0.215390      0.215390       47.5054       47.7208    
  41  0.149268      -1.90202     -0.851146      0.851146       47.5743       48.4254    
  42  0.811010     -0.209475     -0.937396E-01  0.937396E-01   47.7154       47.8091    
  43  0.571477     -0.559531     -0.250388      0.250388       47.3525       47.6029    
  44  0.105494      -2.24911      -1.00647       1.00647       47.8076       48.8140    
  45  0.709548     -0.343127     -0.153548      0.153548       47.7101       47.8637    
  46  0.535895     -0.623816     -0.279156      0.279156       47.6886       47.9678    
  47  0.137736      -1.98242     -0.887126      0.887126       47.1953       48.0824    
  48  0.666779     -0.405297     -0.181369      0.181369       47.5267       47.7081    
  49  0.326487      -1.11936     -0.500912      0.500912       47.5045       48.0054    
  50  0.461090     -0.774162     -0.346435      0.346435       47.6707       48.0171    
  51  0.246088      -1.40207     -0.627421      0.627421       47.4495       48.0769    
  52  0.308348      -1.17653     -0.526492      0.526492       47.7484       48.2749    
  53  0.921161     -0.821209E-01 -0.367489E-01  0.367489E-01   47.0695       47.1062    
  54  0.361112      -1.01857     -0.455806      0.455806       47.8373       48.2931    
  55  0.853246     -0.158708     -0.710212E-01  0.710212E-01   47.0330       47.1040    
  56  0.535783     -0.624027     -0.279250      0.279250       47.5498       47.8291    
  57  0.347437      -1.05717     -0.473081      0.473081       48.0954       48.5685    
  58  0.722381     -0.325203     -0.145527      0.145527       47.8360       47.9815    
  59  0.134598      -2.00546     -0.897438      0.897438       46.8942       47.7916    
  60  0.521537     -0.650975     -0.291309      0.291309       47.3698       47.6611    
  61  0.713987     -0.336890     -0.150757      0.150757       47.5418       47.6925    
  62  0.202889      -1.59510     -0.713801      0.713801       47.6895       48.4033    
  63  0.973267     -0.270971E-01 -0.121259E-01  0.121259E-01   47.5693       47.5814    
  64  0.396441     -0.925228     -0.414037      0.414037       47.4206       47.8346    
  65  0.482421     -0.728937     -0.326197      0.326197       47.3177       47.6439    
  66  0.622991     -0.473223     -0.211766      0.211766       47.6783       47.8901    
  67  0.474966     -0.744512     -0.333167      0.333167       47.2953       47.6284    
  68  0.741916     -0.298520     -0.133587      0.133587       48.0462       48.1798    
  69  0.717884     -0.331448     -0.148322      0.148322       47.7270       47.8754    
  70  0.537648     -0.620551     -0.277694      0.277694       47.1250       47.4027    
loop,thermsimp(1:2)       74  0.523075E-01  0.328250    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    441         47.01          0.83          1.11         23.82          0.48          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    442         47.81          0.83          1.11         23.79          0.50          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  440    47.015        1.204     -1.855      2.706     -102.6      1.409    
                      0.2674      1.246     -99.70      3.723     0.4792E-02

                       2.264     -1.061      1.530      7443.      3511.    

                     -0.3566E-01  0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6148.      633.5    

                       1.433     -5.818     -4.014     -8.412      6.718    

                      -14.94     -3.597      7474.      0.000      9839.    



                       1641.     0.1195E+05 -4244.      7687.      3926.    

                       5103.     0.1372E-02 0.1857     0.2466E-01 0.1189    

                     -0.2486    -0.7734E-01 0.1817     0.1242     0.7180E-01



                     -0.4521     -1.017      0.000     0.6018E-01-0.7373E-01

                      0.3667E-02 0.1174    -0.7116    -0.1426     0.4559E-01

                      0.5109E-01-0.1134E-01-0.6712     -1.197      7210.    



                      -1.082     -1.258     -2.231     -2.323    -0.3807    

                     -0.3252      9.234      8.650    -0.1886E+05 -4.000    

                     -0.5706     -2.203      9.296      8.869    -0.1908E+05



                      -4.000     0.4109    -0.4264      8.872      9.063    

                     -0.1908E+05 -7.000    -0.7329    -0.6821      9.040    

                       8.782    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       74
neval is:      441
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       75
neval is:      441


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      441     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264     -0.195674      0.195674       46.8321       47.0278    
   2  0.108032      -2.22533     -0.995827      0.995827       46.9668       47.9627    
   3  0.908790     -0.956413E-01 -0.427992E-01  0.427992E-01   47.0330       47.0758    
   4  0.987883     -0.121914E-01 -0.545559E-02  0.545559E-02   47.0695       47.0749    
   5  0.318380      -1.14451     -0.512165      0.512165       47.0782       47.5904    
   6  0.924426     -0.785824E-01 -0.351654E-01  0.351654E-01   47.2596       47.2948    
   7  0.965220     -0.353996E-01 -0.158412E-01  0.158412E-01   47.3343       47.3502    
   8  0.852248     -0.159878     -0.715450E-01  0.715450E-01   47.0382       47.1097    
   9  0.329186      -1.11113     -0.497229      0.497229       47.2503       47.7476    
  10  0.282479      -1.26415     -0.565704      0.565704       47.1250       47.6907    
  11  0.818943     -0.199740     -0.893832E-01  0.893832E-01   47.1025       47.1919    
  12  0.842569     -0.171300     -0.766561E-01  0.766561E-01   47.4331       47.5098    
  13  0.370966     -0.991644     -0.443758      0.443758       47.4042       47.8480    
  14  0.362233      -1.01547     -0.454418      0.454418       47.0706       47.5250    
  15  0.356944E-01  -3.33276      -1.49140       1.49140       46.8669       48.3583    
  16  0.149119      -1.90301     -0.851591      0.851591       47.4189       48.2705    
  17  0.127170      -2.06223     -0.922843      0.922843       47.1883       48.1111    
  18  0.589256     -0.528895     -0.236679      0.236679       47.0941       47.3308    
  19  0.702139     -0.353624     -0.158246      0.158246       47.4395       47.5977    
  20  0.713819     -0.337127     -0.150863      0.150863       47.4614       47.6122    
  21  0.121783      -2.10552     -0.942212      0.942212       47.2353       48.1776    
  22  0.992321     -0.770837E-02 -0.344947E-02  0.344947E-02   47.5693       47.5727    
  23  0.622746     -0.473616     -0.211942      0.211942       47.0828       47.2948    
  24  0.388486     -0.945499     -0.423108      0.423108       47.0228       47.4459    
  25  0.365204      -1.00730     -0.450764      0.450764       47.3525       47.8033    
  26  0.416566     -0.875710     -0.391877      0.391877       47.2953       47.6872    
  27  0.250735      -1.38336     -0.619048      0.619048       46.9633       47.5823    
  28  0.243824      -1.41131     -0.631557      0.631557       47.3177       47.9493    
  29  0.177195      -1.73050     -0.774394      0.774394       47.4443       48.2187    
  30  0.723685     -0.323399     -0.144720      0.144720       47.3698       47.5145    
  31  0.157256      -1.84988     -0.827815      0.827815       47.5418       48.3696    
  32  0.941988     -0.597623E-01 -0.267434E-01  0.267434E-01   47.5267       47.5534    
  33  0.110785      -2.20016     -0.984567      0.984567       47.5054       48.4900    
  34  0.200758      -1.60566     -0.718526      0.718526       47.3370       48.0555    
  35  0.873323     -0.135450     -0.606135E-01  0.606135E-01   47.1197       47.1804    
  36  0.842283     -0.171639     -0.768078E-01  0.768078E-01   46.8942       46.9710    
  37  0.326633      -1.11892     -0.500712      0.500712       47.7154       48.2161    
  38  0.648559     -0.433003     -0.193767      0.193767       47.5498       47.7436    
  39  0.460689E-01  -3.07762      -1.37722       1.37722       47.4206       48.7978    
  40  0.676614     -0.390654     -0.174816      0.174816       47.4100       47.5849    
  41  0.863029     -0.147307     -0.659194E-01  0.659194E-01   47.2583       47.3242    
  42  0.646727     -0.435831     -0.195033      0.195033       47.7101       47.9052    
  43  0.310616      -1.16920     -0.523212      0.523212       47.7270       48.2502    
  44  0.521840     -0.650394     -0.291049      0.291049       47.6783       47.9693    
  45  0.381245     -0.964312     -0.431527      0.431527       47.6886       48.1201    
  46  0.815908     -0.203453     -0.910448E-01  0.910448E-01   47.8360       47.9270    
  47  0.209395E-01  -3.86612      -1.73008       1.73008       47.5045       49.2346    
  48  0.800991E-01  -2.52449      -1.12970       1.12970       47.6707       48.8004    
  49  0.824204     -0.193337     -0.865178E-01  0.865178E-01   47.4495       47.5360    
  50  0.828636     -0.187975     -0.841181E-01  0.841181E-01   47.1953       47.2794    
  51  0.609810     -0.494608     -0.221336      0.221336       47.4353       47.6566    
  52  0.793631     -0.231137     -0.103433      0.103433       47.4631       47.5665    
  53  0.450040E-01  -3.10100      -1.38769       1.38769       47.2168       48.6045    
  54  0.758261     -0.276727     -0.123835      0.123835       48.0462       48.1701    
  55  0.450025     -0.798453     -0.357305      0.357305       47.4037       47.7610    
  56  0.687694     -0.374411     -0.167548      0.167548       47.3397       47.5072    
  57  0.851665     -0.160562     -0.718511E-01  0.718511E-01   47.7484       47.8202    
  58  0.964091     -0.365694E-01 -0.163647E-01  0.163647E-01   47.1740       47.1903    
  59  0.717554     -0.331907     -0.148527      0.148527       47.8373       47.9858    
  60  0.726427     -0.319617     -0.143028      0.143028       47.6812       47.8242    
  61  0.646354     -0.436408     -0.195291      0.195291       47.6895       47.8848    
  62  0.841481     -0.172592     -0.772343E-01  0.772343E-01   47.5743       47.6515    
  63  0.635881     -0.452744     -0.202602      0.202602       47.2294       47.4320    
  64  0.753792     -0.282639     -0.126480      0.126480       47.3068       47.4333    
  65  0.568235     -0.565221     -0.252934      0.252934       47.4083       47.6612    
  66  0.607832     -0.497856     -0.222789      0.222789       48.0954       48.3182    
  67  0.918682     -0.848156E-01 -0.379547E-01  0.379547E-01   47.6944       47.7323    
  68  0.783545     -0.243927     -0.109157      0.109157       47.8076       47.9167    
  69  0.741290     -0.299363     -0.133964      0.133964       47.2799       47.4139    
  70  0.965965     -0.346273E-01 -0.154956E-01  0.154956E-01   47.0147       47.0302    
loop,thermsimp(1:2)       75  0.195674      0.995827    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    443         47.15          0.83          1.11         23.77          0.52          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    444         48.15          0.84          1.11         23.85          0.42          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       75
neval is:      443
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       76
neval is:      443


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      443     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733     -0.714801      0.714801       46.8942       47.6090    
   2  0.337724      -1.08553     -0.485770      0.485770       46.8321       47.3179    
   3  0.870295     -0.138923     -0.621678E-01  0.621678E-01   47.0147       47.0769    
   4  0.837087     -0.177827     -0.795770E-01  0.795770E-01   47.0695       47.1490    
   5  0.512110     -0.669215     -0.299472      0.299472       47.0330       47.3324    
   6  0.998742     -0.125879E-02 -0.563305E-03  0.563305E-03   47.0382       47.0387    
   7  0.203490      -1.59214     -0.712477      0.712477       47.1197       47.8322    
   8  0.525951E-01  -2.94513      -1.31794       1.31794       47.1740       48.4919    
   9  0.474810     -0.744841     -0.333314      0.333314       47.1025       47.4358    
  10  0.440755     -0.819266     -0.366619      0.366619       47.1953       47.5619    
  11  0.225689      -1.48860     -0.666143      0.666143       47.0828       47.7490    
  12  0.902704     -0.102360     -0.458058E-01  0.458058E-01   47.2596       47.3054    
  13  0.663331     -0.410481     -0.183689      0.183689       47.2583       47.4419    
  14  0.511480     -0.670447     -0.300023      0.300023       47.0941       47.3941    
  15  0.625297     -0.469528     -0.210113      0.210113       47.3343       47.5444    
  16  0.812907     -0.207139     -0.926941E-01  0.926941E-01   47.2799       47.3726    
  17  0.979453     -0.207607E-01 -0.929034E-02  0.929034E-02   47.2294       47.2387    
  18  0.255329      -1.36520     -0.610924      0.610924       47.3068       47.9177    
  19  0.856654     -0.154722     -0.692374E-01  0.692374E-01   47.0228       47.0920    
  20  0.610394     -0.493650     -0.220907      0.220907       47.3397       47.5606    
  21  0.703614     -0.351525     -0.157306      0.157306       47.4331       47.5904    
  22  0.623403     -0.472562     -0.211470      0.211470       47.3698       47.5813    
  23  0.375727     -0.978893     -0.438051      0.438051       47.0706       47.5086    
  24  0.870528     -0.138656     -0.620479E-01  0.620479E-01   47.4495       47.5115    
  25  0.175838E-01  -4.04078      -1.80824       1.80824       47.5267       49.3349    
  26  0.237914      -1.43585     -0.642536      0.642536       47.4631       48.1056    
  27  0.464352     -0.767112     -0.343280      0.343280       47.5693       47.9125    
  28  0.776873     -0.252478     -0.112983      0.112983       46.9633       47.0762    
  29  0.380679     -0.965800     -0.432192      0.432192       47.4100       47.8422    
  30  0.391295     -0.938295     -0.419884      0.419884       47.0782       47.4981    
  31  0.369488     -0.995636     -0.445544      0.445544       47.4395       47.8850    
  32  0.302398      -1.19601     -0.535211      0.535211       47.4614       47.9966    
  33  0.809138     -0.211786     -0.947735E-01  0.947735E-01   47.5743       47.6690    
  34  0.675473     -0.392342     -0.175572      0.175572       47.4353       47.6109    
  35  0.486217     -0.721100     -0.322690      0.322690       47.4083       47.7310    
  36  0.937468     -0.645730E-01 -0.288962E-01  0.288962E-01   47.2953       47.3242    
  37  0.741025     -0.299721     -0.134124      0.134124       47.1250       47.2591    
  38  0.155236      -1.86281     -0.833601      0.833601       47.6944       48.5280    
  39  0.407249     -0.898331     -0.402000      0.402000       47.5498       47.9518    
  40  0.348550E-01  -3.35656      -1.50205       1.50205       47.2503       48.7524    
  41  0.178548      -1.72290     -0.770991      0.770991       47.4037       48.1746    
  42  0.127429      -2.06020     -0.921932      0.921932       47.3525       48.2745    
  43  0.919888     -0.835037E-01 -0.373677E-01  0.373677E-01   47.7484       47.7857    
  44  0.520080     -0.653772     -0.292561      0.292561       47.6812       47.9738    
  45  0.574092     -0.554965     -0.248345      0.248345       47.4042       47.6525    
  46  0.893427     -0.112690     -0.504286E-01  0.504286E-01   47.6895       47.7400    
  47  0.658991     -0.417045     -0.186627      0.186627       47.7101       47.8968    
  48  0.803744     -0.218475     -0.977667E-01  0.977667E-01   47.8076       47.9053    
  49  0.499877     -0.693392     -0.310291      0.310291       47.8360       48.1463    
  50  0.723109     -0.324195     -0.145076      0.145076       47.3177       47.4628    
  51  0.477842     -0.738475     -0.330465      0.330465       46.9668       47.2973    
  52  0.946108     -0.553980E-01 -0.247905E-01  0.247905E-01   47.6783       47.7031    
  53  0.296943      -1.21422     -0.543358      0.543358       47.8373       48.3806    
  54  0.702733     -0.352778     -0.157867      0.157867       47.3370       47.4948    
  55  0.644709     -0.438956     -0.196431      0.196431       47.1883       47.3847    
  56  0.687506     -0.374685     -0.167670      0.167670       47.6886       47.8563    
  57  0.682968     -0.381308     -0.170634      0.170634       48.0462       48.2169    
  58  0.695030     -0.363801     -0.162800      0.162800       47.2353       47.3981    
  59  0.134664      -2.00497     -0.897218      0.897218       47.7154       48.6126    
  60  0.789098     -0.236865     -0.105996      0.105996       47.4443       47.5503    
  61  0.495959     -0.701262     -0.313812      0.313812       47.7270       48.0408    
  62  0.932440     -0.699500E-01 -0.313024E-01  0.313024E-01   47.4189       47.4502    
  63  0.390950     -0.939176     -0.420279      0.420279       48.0954       48.5157    
  64  0.209807      -1.56156     -0.698795      0.698795       46.8669       47.5657    
  65  0.727082     -0.318716     -0.142625      0.142625       47.5418       47.6844    
  66  0.622701     -0.473688     -0.211974      0.211974       47.5054       47.7174    
  67  0.468739     -0.757708     -0.339072      0.339072       47.2168       47.5559    
  68  0.253730      -1.37148     -0.613735      0.613735       47.4206       48.0343    
  69  0.200081      -1.60903     -0.720037      0.720037       47.6707       48.3907    
  70  0.737960     -0.303866     -0.135979      0.135979       47.1545       47.2905    
loop,thermsimp(1:2)       76  0.714801      0.485770    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    445         47.35          0.83          1.12         23.79          0.49          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.35
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       76
neval is:      444
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       77
neval is:      444


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      444     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181     -0.222040      0.222040       47.0382       47.2602    
   2  0.437836     -0.825911     -0.369593      0.369593       46.9633       47.3328    
   3  0.123560      -2.09103     -0.935730      0.935730       47.0147       47.9504    
   4  0.943438     -0.582242E-01 -0.260552E-01  0.260552E-01   47.0228       47.0488    
   5  0.215054      -1.53686     -0.687742      0.687742       47.0695       47.7572    
   6  0.984763     -0.153546E-01 -0.687113E-02  0.687113E-02   47.2294       47.2363    
   7  0.154160E-01  -4.17235      -1.86711       1.86711       47.1250       48.9921    
   8  0.231957      -1.46120     -0.653884      0.653884       47.1545       47.8084    
   9  0.476349     -0.741605     -0.331866      0.331866       46.9668       47.2987    
  10  0.620436     -0.477333     -0.213605      0.213605       47.2596       47.4732    
  11  0.456145     -0.784945     -0.351261      0.351261       46.8321       47.1834    
  12  0.507296     -0.678660     -0.303698      0.303698       47.2953       47.5990    
  13  0.910123     -0.941755E-01 -0.421432E-01  0.421432E-01   47.0330       47.0751    
  14  0.323556      -1.12838     -0.504948      0.504948       47.2799       47.7849    
  15  0.666279     -0.406046     -0.181704      0.181704       47.1883       47.3700    
  16  0.781920     -0.246002     -0.110085      0.110085       47.0941       47.2042    
  17  0.921689     -0.815478E-01 -0.364924E-01  0.364924E-01   47.2353       47.2718    
  18  0.152544      -1.88030     -0.841429      0.841429       47.1025       47.9439    
  19  0.265926      -1.32454     -0.592727      0.592727       47.2583       47.8510    
  20  0.812409     -0.207751     -0.929679E-01  0.929679E-01   47.4189       47.5118    
  21  0.517560E-01  -2.96121      -1.32513       1.32513       47.3177       48.6428    
  22  0.559187     -0.581271     -0.260117      0.260117       47.3370       47.5971    
  23  0.708792     -0.344194     -0.154026      0.154026       47.0782       47.2323    
  24  0.287762      -1.24562     -0.557412      0.557412       47.0706       47.6280    
  25  0.896953     -0.108752     -0.486663E-01  0.486663E-01   47.4495       47.4982    
  26  0.305048      -1.18729     -0.531308      0.531308       47.3343       47.8656    
  27  0.752428     -0.284450     -0.127290      0.127290       47.4443       47.5716    
  28  0.248159      -1.39369     -0.623670      0.623670       47.2168       47.8405    
  29  0.997822     -0.217989E-02 -0.975495E-03  0.975495E-03   47.3397       47.3406    
  30  0.706427     -0.347535     -0.155521      0.155521       47.1953       47.3508    
  31  0.885217     -0.121923     -0.545601E-01  0.545601E-01   46.8669       46.9215    
  32  0.448301     -0.802290     -0.359022      0.359022       47.3698       47.7288    
  33  0.316275      -1.15114     -0.515134      0.515134       47.4331       47.9482    
  34  0.682241     -0.382372     -0.171110      0.171110       46.8942       47.0653    
  35  0.655896     -0.421752     -0.188733      0.188733       47.4353       47.6240    
  36  0.129575      -2.04350     -0.914460      0.914460       47.4042       48.3187    
  37  0.236133      -1.44336     -0.645900      0.645900       47.5743       48.2202    
  38  0.481338     -0.731186     -0.327203      0.327203       47.5418       47.8690    
  39  0.825902     -0.191279     -0.855967E-01  0.855967E-01   47.6783       47.7639    
  40  0.818029     -0.200857     -0.898829E-01  0.898829E-01   47.5054       47.5953    
  41  0.135951E-01  -4.29805      -1.92336       1.92336       47.4083       49.3316    
  42  0.535484     -0.624585     -0.279500      0.279500       47.6895       47.9690    
  43  0.451882     -0.794334     -0.355462      0.355462       47.0828       47.4383    
  44  0.591282     -0.525463     -0.235143      0.235143       47.7484       47.9835    
  45  0.220584      -1.51148     -0.676381      0.676381       47.1197       47.7961    
  46  0.217569      -1.52524     -0.682539      0.682539       47.4100       48.0926    
  47  0.541669     -0.613101     -0.274361      0.274361       47.6886       47.9630    
  48  0.927891     -0.748411E-01 -0.334912E-01  0.334912E-01   47.4395       47.4730    
  49  0.888902     -0.117768     -0.527007E-01  0.527007E-01   47.7101       47.7628    
  50  0.391529     -0.937694     -0.419615      0.419615       47.8076       48.2272    
  51  0.611187     -0.492353     -0.220326      0.220326       47.5693       47.7896    
  52  0.475002     -0.744437     -0.333133      0.333133       47.3068       47.6400    
  53  0.504237     -0.684709     -0.306405      0.306405       47.5498       47.8562    
  54  0.605691     -0.501385     -0.224368      0.224368       47.6812       47.9056    
  55  0.476618     -0.741039     -0.331613      0.331613       47.4614       47.7930    
  56  0.128287      -2.05348     -0.918927      0.918927       47.4206       48.3395    
  57  0.164258      -1.80632     -0.808322      0.808322       47.7270       48.5354    
  58  0.381764     -0.962954     -0.430919      0.430919       47.4631       47.8940    
  59  0.824295     -0.193227     -0.864684E-01  0.864684E-01   47.8360       47.9225    
  60  0.170823      -1.76713     -0.790783      0.790783       47.4037       48.1944    
  61  0.258309      -1.35360     -0.605731      0.605731       48.0462       48.6520    
  62  0.470573     -0.753804     -0.337325      0.337325       47.3525       47.6899    
  63  0.939649     -0.622488E-01 -0.278561E-01  0.278561E-01   47.8373       47.8651    
  64  0.323567      -1.12835     -0.504933      0.504933       47.6707       48.1756    
  65  0.192095      -1.64976     -0.738264      0.738264       47.1740       47.9122    
  66  0.739439     -0.301863     -0.135083      0.135083       48.0954       48.2305    
  67  0.259637      -1.34847     -0.603437      0.603437       47.6944       48.2978    
  68  0.478982     -0.736093     -0.329399      0.329399       47.7154       48.0448    
  69  0.980393     -0.198018E-01 -0.886125E-02  0.886125E-02   47.2503       47.2592    
  70  0.792065     -0.233112     -0.104317      0.104317       47.3454       47.4497    
loop,thermsimp(1:2)       77  0.222040      0.369593    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    446         46.86          0.82          1.11         23.75          0.54          0.04         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    447         47.06          0.84          1.11         23.82          0.57          0.04         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.86
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       77
neval is:      446
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       78
neval is:      446


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      446     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258      -1.03935       1.03935       46.8669       47.9062    
   2  0.700279     -0.356277     -0.159433      0.159433       47.0228       47.1822    
   3  0.681564     -0.383366     -0.171555      0.171555       46.8942       47.0657    
   4  0.838213E-01  -2.47907      -1.10938       1.10938       47.0330       48.1423    
   5  0.708687     -0.344341     -0.154092      0.154092       46.8321       46.9862    
   6  0.253966      -1.37055     -0.613318      0.613318       47.0941       47.7074    
   7  0.210796      -1.55686     -0.696691      0.696691       47.0782       47.7749    
   8  0.967741     -0.327906E-01 -0.146737E-01  0.146737E-01   47.2294       47.2441    
   9  0.901331     -0.103882     -0.464871E-01  0.464871E-01   47.2503       47.2968    
  10  0.985067     -0.150452E-01 -0.673267E-02  0.673267E-02   47.0382       47.0449    
  11  0.153899      -1.87146     -0.837472      0.837472       47.2353       48.0728    
  12  0.297572      -1.21210     -0.542410      0.542410       46.9668       47.5092    
  13  0.111036      -2.19790     -0.983553      0.983553       46.9633       47.9468    
  14  0.489011     -0.715370     -0.320126      0.320126       47.3397       47.6598    
  15  0.970731     -0.297058E-01 -0.132933E-01  0.132933E-01   47.1953       47.2086    
  16  0.246322      -1.40112     -0.626995      0.626995       47.1883       47.8153    
  17  0.293332      -1.22645     -0.548832      0.548832       47.0828       47.6316    
  18  0.545752     -0.605591     -0.271000      0.271000       47.3454       47.6164    
  19  0.455999     -0.785265     -0.351404      0.351404       47.4395       47.7909    
  20  0.427211     -0.850477     -0.380586      0.380586       47.2596       47.6402    
  21  0.185046E-01  -3.98974      -1.78539       1.78539       47.4495       49.2349    
  22  0.768936     -0.262748     -0.117579      0.117579       47.4189       47.5364    
  23  0.870591     -0.138583     -0.620156E-01  0.620156E-01   47.4443       47.5063    
  24  0.563023     -0.574436     -0.257058      0.257058       47.5054       47.7624    
  25  0.132150E-01  -4.32640      -1.93605       1.93605       47.3370       49.2730    
  26  0.890415     -0.116068     -0.519400E-01  0.519400E-01   47.2953       47.3472    
  27  0.163417      -1.81145     -0.810620      0.810620       47.4353       48.2459    
  28  0.360288      -1.02085     -0.456828      0.456828       47.0706       47.5274    
  29  0.622131     -0.474604     -0.212384      0.212384       47.3068       47.5192    
  30  0.942630     -0.590811E-01 -0.264386E-01  0.264386E-01   47.3525       47.3790    
  31  0.135626      -1.99785     -0.894033      0.894033       47.3698       48.2638    
  32  0.369646     -0.995208     -0.445353      0.445353       47.0695       47.5148    
  33  0.501457     -0.690237     -0.308879      0.308879       47.7101       48.0190    
  34  0.459762     -0.777047     -0.347726      0.347726       47.6783       48.0260    
  35  0.489970     -0.713411     -0.319249      0.319249       47.2799       47.5992    
  36  0.504194     -0.684794     -0.306443      0.306443       47.5693       47.8757    
  37  0.543102E-01  -2.91304      -1.30358       1.30358       47.4614       48.7650    
  38  0.873609     -0.135122     -0.604667E-01  0.604667E-01   47.1197       47.1802    
  39  0.425787     -0.853816     -0.382080      0.382080       47.1545       47.5366    
  40  0.792406     -0.232682     -0.104124      0.104124       47.2168       47.3209    
  41  0.691102     -0.369469     -0.165336      0.165336       47.2583       47.4236    
  42  0.752290     -0.284633     -0.127373      0.127373       47.5498       47.6772    
  43  0.279962      -1.27310     -0.569709      0.569709       47.8373       48.4070    
  44  0.315915E-01  -3.45487      -1.54604       1.54604       47.3343       48.8804    
  45  0.266419      -1.32269     -0.591898      0.591898       47.5418       48.1337    
  46  0.949868     -0.514319E-01 -0.230156E-01  0.230156E-01   47.4631       47.4861    
  47  0.520560     -0.652850     -0.292148      0.292148       47.6812       47.9734    
  48  0.805351     -0.216477     -0.968729E-01  0.968729E-01   47.1740       47.2708    
  49  0.281582      -1.26733     -0.567127      0.567127       47.8360       48.4031    
  50  0.365228      -1.00723     -0.450734      0.450734       47.1025       47.5532    
  51  0.961426     -0.393382E-01 -0.176037E-01  0.176037E-01   47.4331       47.4507    
  52  0.176024      -1.73713     -0.777361      0.777361       47.0147       47.7921    
  53  0.722488     -0.325055     -0.145461      0.145461       47.6886       47.8341    
  54  0.543981     -0.608841     -0.272454      0.272454       47.6895       47.9620    
  55  0.810204     -0.210469     -0.941843E-01  0.941843E-01   47.7484       47.8426    
  56  0.839414     -0.175052     -0.783350E-01  0.783350E-01   47.7154       47.7937    
  57  0.890272     -0.116228     -0.520117E-01  0.520117E-01   47.4100       47.4621    
  58  0.370000     -0.994252     -0.444925      0.444925       47.6707       48.1156    
  59  0.528163     -0.638351     -0.285660      0.285660       47.4037       47.6893    
  60  0.215496      -1.53481     -0.686824      0.686824       47.5743       48.2611    
  61  0.907335E-01  -2.39983      -1.07392       1.07392       47.8076       48.8815    
  62  0.853602     -0.158290     -0.708343E-01  0.708343E-01   48.0954       48.1662    
  63  0.625306     -0.469515     -0.210106      0.210106       47.6944       47.9045    
  64  0.267902      -1.31713     -0.589414      0.589414       47.4042       47.9936    
  65  0.932632E-01  -2.37233      -1.06161       1.06161       47.4206       48.4822    
  66  0.154744      -1.86598     -0.835021      0.835021       47.7270       48.5621    
  67  0.478208     -0.737710     -0.330123      0.330123       47.3177       47.6478    
  68  0.869735     -0.139567     -0.624559E-01  0.624559E-01   48.0462       48.1087    
  69  0.702209     -0.353524     -0.158201      0.158201       47.1250       47.2832    
  70  0.374797     -0.981372     -0.439161      0.439161       46.8607       47.2999    
loop,thermsimp(1:2)       78   1.03935      0.159433    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    448         52.57          0.83          1.12         23.79          0.46          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    449         50.72          0.84          1.12         23.85          0.52          0.04         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     50.72
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       78
neval is:      448
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       79
neval is:      448


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      448     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960     -0.742666      0.742666       46.8321       47.5748    
   2  0.812983     -0.207045     -0.926521E-01  0.926521E-01   47.0382       47.1308    
   3  0.820046E-01  -2.50098      -1.11918       1.11918       46.8942       48.0134    
   4  0.863006     -0.147333     -0.659312E-01  0.659312E-01   47.1197       47.1857    
   5  0.647901     -0.434017     -0.194221      0.194221       47.0228       47.2170    
   6  0.650063E-01  -2.73327      -1.22313       1.22313       47.1953       48.4184    
   7  0.407685E-02  -5.50243      -2.46232       2.46232       47.2294       49.6918    
   8  0.935930     -0.662149E-01 -0.296310E-01  0.296310E-01   47.1740       47.2036    
   9  0.158531      -1.84180     -0.824202      0.824202       47.1250       47.9492    
  10  0.846482     -0.166666     -0.745826E-01  0.745826E-01   47.2503       47.3249    
  11  0.252208      -1.37750     -0.616428      0.616428       46.8607       47.4771    
  12  0.781651E-02  -4.85152      -2.17104       2.17104       47.2168       49.3879    
  13  0.990286     -0.976134E-02 -0.436817E-02  0.436817E-02   47.2953       47.2996    
  14  0.550116     -0.597625     -0.267435      0.267435       47.3525       47.6200    
  15  0.483066     -0.727601     -0.325599      0.325599       47.2583       47.5839    
  16  0.196160      -1.62883     -0.728895      0.728895       47.4331       48.1620    
  17  0.469455     -0.756184     -0.338390      0.338390       47.4100       47.7484    
  18  0.624392     -0.470977     -0.210761      0.210761       47.4631       47.6738    
  19  0.743593     -0.296262     -0.132576      0.132576       47.4443       47.5768    
  20  0.348439      -1.05429     -0.471793      0.471793       46.9668       47.4386    
  21  0.779083     -0.249637     -0.111712      0.111712       47.0695       47.1812    
  22  0.989010     -0.110506E-01 -0.494511E-02  0.494511E-02   47.3068       47.3118    
  23  0.655432E-01  -2.72505      -1.21945       1.21945       47.0706       48.2900    
  24  0.470908     -0.753092     -0.337006      0.337006       47.4189       47.7559    
  25  0.685537     -0.377553     -0.168954      0.168954       47.1545       47.3234    
  26  0.863060E-02  -4.75244      -2.12670       2.12670       47.1025       49.2292    
  27  0.526195     -0.642084     -0.287331      0.287331       47.2799       47.5672    
  28  0.767692     -0.264367     -0.118303      0.118303       47.3454       47.4637    
  29  0.380048     -0.967459     -0.432935      0.432935       47.0828       47.5158    
  30  0.337508E-01  -3.38875      -1.51646       1.51646       47.2596       48.7761    
  31  0.683667     -0.380285     -0.170176      0.170176       47.3177       47.4879    
  32  0.245511      -1.40441     -0.628471      0.628471       47.3397       47.9681    
  33  0.294388      -1.22286     -0.547224      0.547224       47.5498       48.0971    
  34  0.159040      -1.83860     -0.822767      0.822767       47.4037       48.2264    
  35  0.613798     -0.488089     -0.218418      0.218418       47.0941       47.3125    
  36  0.863839E-01  -2.44895      -1.09590       1.09590       47.5054       48.6013    
  37  0.118930      -2.12922     -0.952820      0.952820       47.0782       48.0310    
  38  0.961460     -0.393026E-01 -0.175878E-01  0.175878E-01   47.4395       47.4570    
  39  0.457884     -0.781140     -0.349558      0.349558       47.0147       47.3643    
  40  0.312963      -1.16167     -0.519844      0.519844       47.7154       48.2352    
  41  0.892553     -0.113669     -0.508665E-01  0.508665E-01   47.1883       47.2391    
  42  0.448774     -0.801235     -0.358550      0.358550       47.6886       48.0472    
  43  0.942987E-01  -2.36129      -1.05667       1.05667       47.7484       48.8051    
  44  0.848599     -0.164169     -0.734649E-01  0.734649E-01   47.5693       47.6427    
  45  0.665342     -0.407455     -0.182335      0.182335       47.6944       47.8767    
  46  0.894010     -0.112039     -0.501369E-01  0.501369E-01   46.8669       46.9170    
  47  0.403928     -0.906518     -0.405664      0.405664       46.9633       47.3689    
  48  0.612812     -0.489696     -0.219138      0.219138       47.6895       47.9087    
  49  0.726279     -0.319821     -0.143119      0.143119       47.6812       47.8243    
  50  0.694767     -0.364179     -0.162969      0.162969       47.4042       47.5672    
  51  0.849471     -0.163141     -0.730051E-01  0.730051E-01   47.7101       47.7831    
  52  0.615908     -0.484657     -0.216882      0.216882       47.6783       47.8952    
  53  0.256250      -1.36160     -0.609313      0.609313       47.2353       47.8447    
  54  0.124633      -2.08238     -0.931859      0.931859       48.0462       48.9781    
  55  0.629294E-01  -2.76574      -1.23766       1.23766       47.6707       48.9083    
  56  0.127527      -2.05943     -0.921587      0.921587       47.5418       48.4633    
  57  0.721510     -0.326409     -0.146067      0.146067       47.0330       47.1790    
  58  0.664696     -0.408425     -0.182769      0.182769       48.0954       48.2782    
  59  0.562617     -0.575156     -0.257381      0.257381       47.4353       47.6927    
  60  0.413984     -0.881928     -0.394660      0.394660       47.5743       47.9689    
  61  0.656751     -0.420450     -0.188150      0.188150       47.3698       47.5579    
  62  0.642415     -0.442520     -0.198027      0.198027       47.8360       48.0340    
  63  0.136182      -1.99376     -0.892203      0.892203       47.8373       48.7295    
  64  0.481125     -0.731629     -0.327402      0.327402       47.4206       47.7480    
  65  0.147280      -1.91542     -0.857144      0.857144       47.7270       48.5842    
  66  0.162546      -1.81680     -0.813010      0.813010       47.4614       48.2744    
  67  0.200903      -1.60493     -0.718203      0.718203       47.3343       48.0525    
  68  0.444300     -0.811254     -0.363034      0.363034       47.8076       48.1706    
  69  0.799825     -0.223363     -0.999541E-01  0.999541E-01   47.4495       47.5494    
  70  0.622561     -0.473914     -0.212075      0.212075       50.7209       50.9330    
loop,thermsimp(1:2)       79  0.742666      0.926521E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    450         47.09          0.83          1.11         23.81          0.73          0.04         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    451         47.91          0.84          1.11         23.81          0.71          0.04         26.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     47.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       79
neval is:      450
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       80
neval is:      450


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      450     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733     -0.486578      0.486578       46.8669       47.3535    
   2  0.744737     -0.294724     -0.131888      0.131888       47.0382       47.1701    
   3  0.361564E-01  -3.31990      -1.48565       1.48565       47.0330       48.5186    
   4  0.312099      -1.16444     -0.521082      0.521082       47.0695       47.5905    
   5  0.119132      -2.12752     -0.952061      0.952061       47.1197       48.0718    
   6  0.617735     -0.481696     -0.215557      0.215557       47.1740       47.3895    
   7  0.117626      -2.14025     -0.957754      0.957754       47.0228       47.9805    
   8  0.258570      -1.35259     -0.605279      0.605279       47.1883       47.7936    
   9  0.851854E-01  -2.46293      -1.10215       1.10215       47.2953       48.3974    
  10  0.220620      -1.51131     -0.676308      0.676308       47.3068       47.9831    
  11  0.648876     -0.432513     -0.193548      0.193548       47.0941       47.2876    
  12  0.958689     -0.421884E-01 -0.188792E-01  0.188792E-01   47.1545       47.1734    
  13  0.240652      -1.42440     -0.637416      0.637416       47.2503       47.8878    
  14  0.975871     -0.244252E-01 -0.109302E-01  0.109302E-01   47.0147       47.0256    
  15  0.467835     -0.759639     -0.339936      0.339936       46.9633       47.3032    
  16  0.398205     -0.920788     -0.412050      0.412050       46.9668       47.3789    
  17  0.757338E-01  -2.58053      -1.15478       1.15478       47.4395       48.5942    
  18  0.654643     -0.423666     -0.189589      0.189589       47.3454       47.5349    
  19  0.305298      -1.18647     -0.530940      0.530940       46.8607       47.3916    
  20  0.435768     -0.830645     -0.371711      0.371711       47.3177       47.6894    
  21  0.689410     -0.371920     -0.166433      0.166433       47.0828       47.2493    
  22  0.267500      -1.31864     -0.590085      0.590085       47.4495       48.0396    
  23  0.590747     -0.526367     -0.235548      0.235548       47.3698       47.6053    
  24  0.108947E-01  -4.51948      -2.02245       2.02245       47.4042       49.4267    
  25  0.236025      -1.44382     -0.646104      0.646104       47.2799       47.9260    
  26  0.590760     -0.526345     -0.235538      0.235538       46.8321       47.0677    
  27  0.782443     -0.245334     -0.109786      0.109786       47.4443       47.5541    
  28  0.702257     -0.353456     -0.158170      0.158170       47.2583       47.4164    
  29  0.764991     -0.267891     -0.119881      0.119881       47.3525       47.4724    
  30  0.753362     -0.283210     -0.126735      0.126735       47.5693       47.6960    
  31  0.961949E-01  -2.34138      -1.04776       1.04776       47.4631       48.5108    
  32  0.541564     -0.613294     -0.274447      0.274447       47.4353       47.7097    
  33  0.474786     -0.744891     -0.333336      0.333336       47.4206       47.7539    
  34  0.242842      -1.41534     -0.633362      0.633362       47.4100       48.0434    
  35  0.495414     -0.702361     -0.314304      0.314304       47.4189       47.7332    
  36  0.636645     -0.451543     -0.202064      0.202064       47.7101       47.9122    
  37  0.758087     -0.276957     -0.123937      0.123937       47.6812       47.8052    
  38  0.209321      -1.56389     -0.699835      0.699835       47.2353       47.9352    
  39  0.484343     -0.724961     -0.324418      0.324418       47.6944       48.0188    
  40  0.499790     -0.693567     -0.310369      0.310369       47.6783       47.9887    
  41  0.316628      -1.15003     -0.514634      0.514634       47.6895       48.2042    
  42  0.705469     -0.348892     -0.156128      0.156128       47.1250       47.2811    
  43  0.514591     -0.664383     -0.297310      0.297310       47.3397       47.6370    
  44  0.869006     -0.140406     -0.628311E-01  0.628311E-01   47.5743       47.6371    
  45  0.112600      -2.18392     -0.977295      0.977295       46.8942       47.8715    
  46  0.511991     -0.669449     -0.299576      0.299576       47.0782       47.3778    
  47  0.477456     -0.739283     -0.330827      0.330827       47.8360       48.1668    
  48  0.494460     -0.704290     -0.315168      0.315168       47.6886       48.0038    
  49  0.698938     -0.358193     -0.160290      0.160290       47.3343       47.4946    
  50  0.430212     -0.843478     -0.377454      0.377454       47.5498       47.9273    
  51  0.474243E-01  -3.04862      -1.36425       1.36425       47.4331       48.7974    
  52  0.167497      -1.78679     -0.799582      0.799582       47.8076       48.6071    
  53  0.233811      -1.45324     -0.650322      0.650322       47.4037       48.0540    
  54  0.760101     -0.274304     -0.122750      0.122750       47.7154       47.8381    
  55  0.195143      -1.63402     -0.731221      0.731221       47.4614       48.1926    
  56  0.822875     -0.194951     -0.872400E-01  0.872400E-01   48.0954       48.1826    
  57  0.332571      -1.10090     -0.492650      0.492650       47.0706       47.5632    
  58  0.682214     -0.382412     -0.171128      0.171128       47.1953       47.3664    
  59  0.560875E-01  -2.88084      -1.28917       1.28917       47.5418       48.8309    
  60  0.407464     -0.897802     -0.401764      0.401764       47.7270       48.1288    
  61  0.650997     -0.429250     -0.192088      0.192088       47.5054       47.6975    
  62  0.426312E-01  -3.15517      -1.41193       1.41193       47.8373       49.2492    
  63  0.556139E-01  -2.88932      -1.29296       1.29296       47.2596       48.5526    
  64  0.837058     -0.177861     -0.795924E-01  0.795924E-01   47.7484       47.8280    
  65  0.655823     -0.421864     -0.188783      0.188783       47.6707       47.8595    
  66  0.846314E-02  -4.77204      -2.13547       2.13547       48.0462       50.1817    
  67  0.227818E-01  -3.78179      -1.69234       1.69234       47.1025       48.7948    
  68  0.401219     -0.913248     -0.408676      0.408676       47.2168       47.6255    
  69  0.663900     -0.409624     -0.183305      0.183305       47.2294       47.4128    
  70  0.660940     -0.414092     -0.185305      0.185305       47.0942       47.2795    
loop,thermsimp(1:2)       80  0.486578      0.131888    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    452         46.43          0.82          1.12         23.78          0.46          0.06         26.24
Just calling func    0   0         26.24


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    453         47.79          0.82          1.12         23.80          0.50          0.04         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.43
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       80
neval is:      452
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       81
neval is:      452


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      452     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733     -0.477626      0.477626       47.0147       47.4923    
   2  0.822787     -0.195058     -0.872877E-01  0.872877E-01   46.8321       46.9194    
   3  0.320831E-01  -3.43942      -1.53913       1.53913       47.0382       48.5773    
   4  0.224034      -1.49596     -0.669437      0.669437       47.1545       47.8239    
   5  0.200770      -1.60559     -0.718498      0.718498       47.0828       47.8013    
   6  0.983846     -0.162863E-01 -0.728805E-02  0.728805E-02   47.0942       47.1015    
   7  0.762274     -0.271449     -0.121473      0.121473       47.1250       47.2464    
   8  0.872649     -0.136221     -0.609587E-01  0.609587E-01   47.0941       47.1550    
   9  0.366891      -1.00269     -0.448701      0.448701       46.9633       47.4120    
  10  0.800852     -0.222079     -0.993798E-01  0.993798E-01   46.8669       46.9663    
  11  0.755695     -0.280117     -0.125351      0.125351       47.1953       47.3206    
  12  0.595174     -0.518902     -0.232207      0.232207       47.0782       47.3104    
  13  0.316509      -1.15040     -0.514802      0.514802       46.9668       47.4816    
  14  0.847901     -0.164991     -0.738329E-01  0.738329E-01   47.1740       47.2478    
  15  0.116195      -2.15248     -0.963229      0.963229       46.8607       47.8239    
  16  0.121963      -2.10403     -0.941549      0.941549       47.2294       48.1710    
  17  0.298485      -1.20903     -0.541039      0.541039       47.2583       47.7993    
  18  0.698751     -0.358461     -0.160410      0.160410       47.3525       47.5130    
  19  0.248186      -1.39358     -0.623621      0.623621       47.3343       47.9580    
  20  0.717251     -0.332329     -0.148716      0.148716       47.3454       47.4941    
  21  0.591856     -0.524491     -0.234708      0.234708       47.4443       47.6790    
  22  0.780177E-01  -2.55082      -1.14148       1.14148       47.0706       48.2121    
  23  0.314281      -1.15747     -0.517964      0.517964       47.0695       47.5874    
  24  0.565423E-01  -2.87277      -1.28555       1.28555       47.3698       48.6553    
  25  0.964829     -0.358044E-01 -0.160224E-01  0.160224E-01   47.2168       47.2328    
  26  0.900157     -0.105186     -0.470706E-01  0.470706E-01   47.3397       47.3867    
  27  0.656998     -0.420074     -0.187982      0.187982       47.5743       47.7623    
  28  0.888436E-01  -2.42088      -1.08334       1.08334       47.3177       48.4010    
  29  0.853838     -0.158014     -0.707108E-01  0.707108E-01   47.5693       47.6400    
  30  0.704842     -0.349782     -0.156526      0.156526       47.5054       47.6619    
  31  0.890111     -0.116409     -0.520926E-01  0.520926E-01   47.4353       47.4874    
  32  0.424397     -0.857087     -0.383544      0.383544       47.4189       47.8024    
  33  0.959371     -0.414778E-01 -0.185612E-01  0.185612E-01   47.4206       47.4391    
  34  0.323832      -1.12753     -0.504567      0.504567       47.1883       47.6928    
  35  0.943913     -0.577217E-01 -0.258303E-01  0.258303E-01   47.6812       47.7070    
  36  0.119048      -2.12823     -0.952374      0.952374       47.7484       48.7008    
  37  0.427842E-01  -3.15159      -1.41032       1.41032       47.7154       49.1257    
  38  0.433544     -0.835761     -0.374000      0.374000       47.6707       48.0447    
  39  0.773173     -0.257253     -0.115120      0.115120       46.8942       47.0093    
  40  0.455657     -0.786014     -0.351739      0.351739       47.2503       47.6021    
  41  0.362132      -1.01575     -0.454543      0.454543       47.7101       48.1647    
  42  0.775394     -0.254384     -0.113836      0.113836       47.2799       47.3938    
  43  0.889906     -0.116639     -0.521957E-01  0.521957E-01   47.5498       47.6020    
  44  0.415923     -0.877255     -0.392569      0.392569       47.2353       47.6279    
  45  0.374532E-01  -3.28466      -1.46988       1.46988       47.0228       48.4926    
  46  0.904805     -0.100036     -0.447658E-01  0.447658E-01   47.3068       47.3516    
  47  0.130905      -2.03328     -0.909888      0.909888       47.6783       48.5882    
  48  0.951733     -0.494710E-01 -0.221381E-01  0.221381E-01   47.6886       47.7107    
  49  0.720673     -0.327570     -0.146586      0.146586       47.6944       47.8410    
  50  0.425150     -0.855314     -0.382750      0.382750       47.4495       47.8322    
  51  0.464059     -0.767744     -0.343563      0.343563       47.4100       47.7536    
  52  0.822031     -0.195978     -0.876994E-01  0.876994E-01   47.4037       47.4914    
  53  0.325542      -1.12226     -0.502210      0.502210       47.1197       47.6219    
  54  0.701043     -0.355186     -0.158945      0.158945       47.7270       47.8860    
  55  0.135013      -2.00239     -0.896061      0.896061       47.8360       48.7320    
  56  0.911632     -0.925193E-01 -0.414021E-01  0.414021E-01   48.0954       48.1368    
  57  0.172993      -1.75450     -0.785135      0.785135       47.4614       48.2465    
  58  0.401556     -0.912409     -0.408300      0.408300       47.6895       48.0978    
  59  0.906091     -0.986152E-01 -0.441300E-01  0.441300E-01   47.2953       47.3394    
  60  0.322588      -1.13138     -0.506289      0.506289       47.4631       47.9694    
  61  0.779620     -0.248949     -0.111404      0.111404       47.0330       47.1444    
  62  0.886087     -0.120940     -0.541204E-01  0.541204E-01   47.2596       47.3137    
  63  0.841445     -0.172634     -0.772532E-01  0.772532E-01   47.4395       47.5167    
  64  0.960060E-01  -2.34334      -1.04864       1.04864       47.8076       48.8562    
  65  0.198159      -1.61868     -0.724356      0.724356       47.1025       47.8268    
  66  0.762088E-01  -2.57428      -1.15198       1.15198       47.4331       48.5851    
  67  0.829173     -0.187327     -0.838280E-01  0.838280E-01   47.5418       47.6256    
  68  0.725953     -0.320270     -0.143320      0.143320       47.8373       47.9806    
  69  0.881009     -0.126687     -0.566922E-01  0.566922E-01   47.4042       47.4609    
  70  0.964096     -0.365643E-01 -0.163624E-01  0.163624E-01   46.4330       46.4494    
loop,thermsimp(1:2)       81  0.477626      0.872877E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    454         47.01          0.82          1.11         23.80          0.59          0.04         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.01
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       81
neval is:      453
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       82
neval is:      453


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      453     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184     -0.262316      0.262316       46.4330       46.6953    
   2  0.926592     -0.762421E-01 -0.341181E-01  0.341181E-01   46.8321       46.8662    
   3  0.766762     -0.265579     -0.118846      0.118846       46.8669       46.9857    
   4  0.627980     -0.465247     -0.208197      0.208197       46.8942       47.1024    
   5  0.647527     -0.434594     -0.194480      0.194480       47.0942       47.2887    
   6  0.639464     -0.447125     -0.200087      0.200087       47.0330       47.2331    
   7  0.168437      -1.78119     -0.797078      0.797078       47.0941       47.8912    
   8  0.725133     -0.321400     -0.143826      0.143826       47.2168       47.3606    
   9  0.620073     -0.477917     -0.213867      0.213867       47.1250       47.3388    
  10  0.837394     -0.177461     -0.794131E-01  0.794131E-01   47.1740       47.2534    
  11  0.763326     -0.270070     -0.120855      0.120855       47.0782       47.1991    
  12  0.216703      -1.52923     -0.684325      0.684325       47.2596       47.9439    
  13  0.846730     -0.166373     -0.744515E-01  0.744515E-01   47.1953       47.2697    
  14  0.712127     -0.339499     -0.151925      0.151925       47.2953       47.4472    
  15  0.731222     -0.313039     -0.140084      0.140084       47.3068       47.4469    
  16  0.131329      -2.03005     -0.908442      0.908442       47.3397       48.2481    
  17  0.946517     -0.549662E-01 -0.245972E-01  0.245972E-01   47.2799       47.3045    
  18  0.303743      -1.19157     -0.533226      0.533226       46.9633       47.4965    
  19  0.452199     -0.793633     -0.355148      0.355148       47.4206       47.7757    
  20  0.176302      -1.73556     -0.776656      0.776656       47.4042       48.1809    
  21  0.569871     -0.562345     -0.251647      0.251647       46.9668       47.2185    
  22  0.267873      -1.31724     -0.589462      0.589462       47.4353       48.0247    
  23  0.295877      -1.21781     -0.544966      0.544966       47.4037       47.9486    
  24  0.658567     -0.417689     -0.186914      0.186914       47.0147       47.2016    
  25  0.633120     -0.457096     -0.204549      0.204549       47.3454       47.5499    
  26  0.655522     -0.422324     -0.188989      0.188989       47.3525       47.5415    
  27  0.532295     -0.630558     -0.282173      0.282173       47.4395       47.7216    
  28  0.611209     -0.492317     -0.220310      0.220310       47.0695       47.2898    
  29  0.768812E-01  -2.56549      -1.14805       1.14805       47.5498       48.6979    
  30  0.845132     -0.168262     -0.752967E-01  0.752967E-01   47.2503       47.3256    
  31  0.133696      -2.01219     -0.900447      0.900447       47.1197       48.0202    
  32  0.850522E-01  -2.46449      -1.10285       1.10285       47.5418       48.6446    
  33  0.901960     -0.103185     -0.461749E-01  0.461749E-01   47.2353       47.2815    
  34  0.394454E-01  -3.23284      -1.44668       1.44668       47.5693       49.0159    
  35  0.152819      -1.87850     -0.840622      0.840622       47.5054       48.3460    
  36  0.951369     -0.498538E-01 -0.223094E-01  0.223094E-01   47.4443       47.4666    
  37  0.909075     -0.953273E-01 -0.426587E-01  0.426587E-01   47.1883       47.2309    
  38  0.552964     -0.592462     -0.265125      0.265125       47.6812       47.9463    
  39  0.904748     -0.100099     -0.447940E-01  0.447940E-01   47.6886       47.7334    
  40  0.434860     -0.832731     -0.372645      0.372645       47.4100       47.7827    
  41  0.807557E-01  -2.51633      -1.12605       1.12605       47.5743       48.7003    
  42  0.245089      -1.40614     -0.629241      0.629241       47.2583       47.8875    
  43  0.566857     -0.567648     -0.254021      0.254021       47.0828       47.3368    
  44  0.154441      -1.86794     -0.835898      0.835898       47.4189       48.2548    
  45  0.961849     -0.388974E-01 -0.174065E-01  0.174065E-01   47.1545       47.1719    
  46  0.267234      -1.31963     -0.590531      0.590531       46.8607       47.4512    
  47  0.170042      -1.77171     -0.792834      0.792834       47.1025       47.8953    
  48  0.796608     -0.227393     -0.101758      0.101758       47.4495       47.5512    
  49  0.474137     -0.746260     -0.333949      0.333949       47.6944       48.0283    
  50  0.164737      -1.80340     -0.807018      0.807018       47.7270       48.5340    
  51  0.728428     -0.316867     -0.141797      0.141797       47.3343       47.4761    
  52  0.259284      -1.34983     -0.604046      0.604046       47.4631       48.0671    
  53  0.932415     -0.699773E-01 -0.313146E-01  0.313146E-01   47.8373       47.8686    
  54  0.905731     -0.990126E-01 -0.443078E-01  0.443078E-01   47.6707       47.7150    
  55  0.975166     -0.251472E-01 -0.112533E-01  0.112533E-01   47.6895       47.7008    
  56  0.312519      -1.16309     -0.520479      0.520479       48.0954       48.6159    
  57  0.363326      -1.01246     -0.453071      0.453071       47.7101       48.1632    
  58  0.633693     -0.456191     -0.204144      0.204144       47.2294       47.4336    
  59  0.765432     -0.267315     -0.119622      0.119622       47.0706       47.1902    
  60  0.197736      -1.62082     -0.725312      0.725312       47.4614       48.1867    
  61  0.825376     -0.191916     -0.858819E-01  0.858819E-01   47.3177       47.4036    
  62  0.401700     -0.912049     -0.408139      0.408139       47.0228       47.4309    
  63  0.637472     -0.450245     -0.201483      0.201483       47.0382       47.2396    
  64  0.989702     -0.103516E-01 -0.463232E-02  0.463232E-02   47.4331       47.4377    
  65  0.980344     -0.198515E-01 -0.888350E-02  0.888350E-02   47.6783       47.6872    
  66  0.719848     -0.328715     -0.147099      0.147099       47.3698       47.5169    
  67  0.779598     -0.248976     -0.111416      0.111416       47.7484       47.8598    
  68  0.979665     -0.205443E-01 -0.919350E-02  0.919350E-02   47.8360       47.8452    
  69  0.904051E-01  -2.40345      -1.07554       1.07554       47.8076       48.8831    
  70  0.484052     -0.725563     -0.324687      0.324687       47.0066       47.3313    
loop,thermsimp(1:2)       82  0.262316      0.341181E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    455         47.96          0.83          1.11         23.83          0.52          0.04         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       82
neval is:      454
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       83
neval is:      454


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      454     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129     -0.213514      0.213514       46.4330       46.6465    
   2  0.835522     -0.179699     -0.804147E-01  0.804147E-01   46.8321       46.9125    
   3  0.626661     -0.467350     -0.209138      0.209138       46.8669       47.0760    
   4  0.197939      -1.61980     -0.724853      0.724853       46.8942       47.6190    
   5  0.842637     -0.171219     -0.766199E-01  0.766199E-01   47.1545       47.2311    
   6  0.873669     -0.135053     -0.604360E-01  0.604360E-01   47.0706       47.1310    
   7  0.298180E-01  -3.51264      -1.57190       1.57190       47.0782       48.6501    
   8  0.548374     -0.600797     -0.268855      0.268855       47.0147       47.2836    
   9  0.407469E-01  -3.20037      -1.43216       1.43216       46.9668       48.3990    
  10  0.210105E-02  -6.16532      -2.75896       2.75896       47.1883       49.9472    
  11  0.631577     -0.459536     -0.205641      0.205641       47.0330       47.2386    
  12  0.944026     -0.576013E-01 -0.257764E-01  0.257764E-01   47.0382       47.0639    
  13  0.492775     -0.707703     -0.316695      0.316695       47.1740       47.4907    
  14  0.195107      -1.63421     -0.731303      0.731303       47.1953       47.9266    
  15  0.775688     -0.254005     -0.113666      0.113666       47.2353       47.3490    
  16  0.763907     -0.269310     -0.120515      0.120515       47.0942       47.2148    
  17  0.797499     -0.226275     -0.101257      0.101257       47.0695       47.1707    
  18  0.639217     -0.447511     -0.200260      0.200260       47.2799       47.4802    
  19  0.775225     -0.254602     -0.113934      0.113934       47.2503       47.3643    
  20  0.680633     -0.384733     -0.172167      0.172167       47.0066       47.1787    
  21  0.532184     -0.630766     -0.282266      0.282266       47.0828       47.3651    
  22  0.843009     -0.170778     -0.764227E-01  0.764227E-01   47.1250       47.2014    
  23  0.943186     -0.584913E-01 -0.261747E-01  0.261747E-01   47.2168       47.2430    
  24  0.601611     -0.508143     -0.227393      0.227393       47.3177       47.5451    
  25  0.259021      -1.35084     -0.604499      0.604499       47.0228       47.6273    
  26  0.855132     -0.156500     -0.700332E-01  0.700332E-01   47.2294       47.2995    
  27  0.351229      -1.04632     -0.468224      0.468224       47.4331       47.9013    
  28  0.950362     -0.509122E-01 -0.227830E-01  0.227830E-01   47.3068       47.3296    
  29  0.447301     -0.804524     -0.360022      0.360022       47.2953       47.6553    
  30  0.325509      -1.12237     -0.502255      0.502255       46.8607       47.3630    
  31  0.717010     -0.332666     -0.148867      0.148867       47.4443       47.5931    
  32  0.676718     -0.390500     -0.174748      0.174748       47.3343       47.5091    
  33  0.493623     -0.705983     -0.315925      0.315925       46.9633       47.2792    
  34  0.155805E-01  -4.16174      -1.86236       1.86236       47.3698       49.2322    
  35  0.417708     -0.872973     -0.390653      0.390653       47.3525       47.7432    
  36  0.395067     -0.928699     -0.415590      0.415590       47.3454       47.7609    
  37  0.977835     -0.224139E-01 -0.100302E-01  0.100302E-01   47.4495       47.4595    
  38  0.603414     -0.505151     -0.226054      0.226054       47.6783       47.9043    
  39  0.173810      -1.74979     -0.783026      0.783026       47.6895       48.4726    
  40  0.979719     -0.204895E-01 -0.916898E-02  0.916898E-02   47.6707       47.6798    
  41  0.234071      -1.45213     -0.649824      0.649824       47.4395       48.0893    
  42  0.264051      -1.33161     -0.595893      0.595893       47.6886       48.2845    
  43  0.756353     -0.279247     -0.124962      0.124962       47.4206       47.5455    
  44  0.980782     -0.194046E-01 -0.868350E-02  0.868350E-02   47.4100       47.4187    
  45  0.444591E-01  -3.11319      -1.39314       1.39314       47.8360       49.2291    
  46  0.276895      -1.28412     -0.574638      0.574638       47.7484       48.3230    
  47  0.754338     -0.281915     -0.126156      0.126156       47.8373       47.9634    
  48  0.288496      -1.24308     -0.556272      0.556272       47.2583       47.8145    
  49  0.945547     -0.559915E-01 -0.250560E-01  0.250560E-01   47.0941       47.1191    
  50  0.698722     -0.358502     -0.160429      0.160429       47.1025       47.2629    
  51  0.586821     -0.533035     -0.238532      0.238532       47.2596       47.4981    
  52  0.173241      -1.75307     -0.784494      0.784494       47.6812       48.4657    
  53  0.157974      -1.84532     -0.825777      0.825777       47.4037       48.2294    
  54  0.789304     -0.236604     -0.105880      0.105880       47.1197       47.2256    
  55  0.351815      -1.04465     -0.467477      0.467477       47.4353       47.9028    
  56  0.109517      -2.21167     -0.989717      0.989717       47.6944       48.6841    
  57  0.884115     -0.123168     -0.551174E-01  0.551174E-01   47.4631       47.5182    
  58  0.590256     -0.527198     -0.235920      0.235920       47.7101       47.9460    
  59  0.720991     -0.327128     -0.146389      0.146389       47.4042       47.5506    
  60  0.584697     -0.536661     -0.240154      0.240154       47.4614       47.7015    
  61  0.798909E-01  -2.52709      -1.13087       1.13087       47.3397       48.4705    
  62  0.476858     -0.740537     -0.331388      0.331388       47.4189       47.7503    
  63  0.366415      -1.00399     -0.449282      0.449282       47.5054       47.9547    
  64  0.579292     -0.545948     -0.244310      0.244310       47.7270       47.9713    
  65  0.859086     -0.151886     -0.679684E-01  0.679684E-01   48.0954       48.1634    
  66  0.178211      -1.72479     -0.771838      0.771838       47.5418       48.3136    
  67  0.372347     -0.987929     -0.442095      0.442095       47.5498       47.9919    
  68  0.132090      -2.02427     -0.905854      0.905854       47.5743       48.4801    
  69  0.292834      -1.22815     -0.549594      0.549594       47.8076       48.3572    
  70  0.788579     -0.237522     -0.106290      0.106290       47.9601       48.0664    
loop,thermsimp(1:2)       83  0.213514      0.804147E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    456         47.83          0.83          1.12         23.84          0.45          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       83
neval is:      455
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       84
neval is:      455


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      455     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573     -0.248617      0.248617       46.4330       46.6816    
   2  0.583943E-01  -2.84054      -1.27113       1.27113       46.8321       48.1033    
   3  0.377108     -0.975224     -0.436410      0.436410       47.0382       47.4746    
   4  0.117758      -2.13912     -0.957251      0.957251       46.8669       47.8241    
   5  0.531627     -0.631812     -0.282734      0.282734       47.0941       47.3768    
   6  0.348101      -1.05526     -0.472226      0.472226       47.0706       47.5428    
   7  0.713050     -0.338204     -0.151345      0.151345       47.0695       47.2208    
   8  0.895286     -0.110612     -0.494986E-01  0.494986E-01   47.0066       47.0561    
   9  0.873863     -0.134831     -0.603365E-01  0.603365E-01   47.1250       47.1853    
  10  0.225074      -1.49132     -0.667363      0.667363       47.0942       47.7616    
  11  0.542220     -0.612083     -0.273905      0.273905       47.1197       47.3936    
  12  0.262707      -1.33672     -0.598177      0.598177       47.1545       47.7527    
  13  0.864358E-01  -2.44835      -1.09563       1.09563       47.0330       48.1286    
  14  0.468331     -0.758581     -0.339462      0.339462       47.2168       47.5563    
  15  0.896509     -0.109247     -0.488878E-01  0.488878E-01   47.1025       47.1514    
  16  0.169842E-01  -4.07547      -1.82376       1.82376       46.9633       48.7870    
  17  0.980158     -0.200410E-01 -0.896829E-02  0.896829E-02   47.0147       47.0237    
  18  0.252821      -1.37507     -0.615341      0.615341       47.2294       47.8448    
  19  0.556823     -0.585507     -0.262013      0.262013       47.3068       47.5688    
  20  0.520304     -0.653342     -0.292368      0.292368       47.2353       47.5277    
  21  0.956705E-01  -2.34685      -1.05021       1.05021       46.8607       47.9109    
  22  0.458762     -0.779224     -0.348700      0.348700       47.2503       47.5990    
  23  0.684654     -0.378842     -0.169530      0.169530       47.0828       47.2523    
  24  0.749393     -0.288492     -0.129099      0.129099       47.4100       47.5391    
  25  0.112724      -2.18282     -0.976803      0.976803       47.4495       48.4263    
  26  0.642114     -0.442989     -0.198236      0.198236       47.2799       47.4782    
  27  0.881888     -0.125691     -0.562461E-01  0.562461E-01   47.1740       47.2302    
  28  0.933845     -0.684452E-01 -0.306290E-01  0.306290E-01   47.2596       47.2902    
  29  0.124482      -2.08359     -0.932401      0.932401       47.3343       48.2667    
  30  0.189487      -1.66344     -0.744383      0.744383       47.4631       48.2075    
  31  0.526869     -0.640804     -0.286758      0.286758       47.3177       47.6045    
  32  0.490162     -0.713020     -0.319074      0.319074       47.4206       47.7396    
  33  0.292049      -1.23083     -0.550795      0.550795       47.4042       47.9550    
  34  0.646685     -0.435896     -0.195062      0.195062       47.4443       47.6393    
  35  0.738289     -0.303420     -0.135780      0.135780       46.8942       47.0300    
  36  0.379268     -0.969513     -0.433854      0.433854       47.0228       47.4566    
  37  0.691037     -0.369562     -0.165378      0.165378       47.2953       47.4607    
  38  0.566288     -0.568653     -0.254471      0.254471       47.6707       47.9251    
  39  0.130734      -2.03459     -0.910473      0.910473       47.4614       48.3719    
  40  0.298876      -1.20773     -0.540453      0.540453       47.3525       47.8930    
  41  0.369194     -0.996434     -0.445901      0.445901       47.4189       47.8648    
  42  0.291325      -1.23331     -0.551904      0.551904       47.3454       47.8973    
  43  0.828296     -0.188384     -0.843014E-01  0.843014E-01   47.2583       47.3426    
  44  0.540492E-01  -2.91786      -1.30573       1.30573       47.4331       48.7388    
  45  0.979889     -0.203162E-01 -0.909145E-02  0.909145E-02   47.4353       47.4444    
  46  0.411533     -0.887866     -0.397317      0.397317       47.6783       48.0756    
  47  0.430635     -0.842495     -0.377014      0.377014       47.1953       47.5723    
  48  0.948338     -0.530447E-01 -0.237373E-01  0.237373E-01   47.7101       47.7339    
  49  0.400713E-02  -5.51968      -2.47004       2.47004       47.5054       49.9754    
  50  0.963092     -0.376065E-01 -0.168288E-01  0.168288E-01   47.8373       47.8541    
  51  0.101802      -2.28472      -1.02241       1.02241       47.7270       48.7494    
  52  0.161305      -1.82446     -0.816440      0.816440       47.5498       48.3663    
  53  0.579295     -0.545944     -0.244308      0.244308       47.9601       48.2044    
  54  0.246178      -1.40170     -0.627257      0.627257       47.4395       48.0667    
  55  0.783155     -0.244425     -0.109379      0.109379       48.0954       48.2048    
  56  0.643375     -0.441028     -0.197359      0.197359       47.4037       47.6010    
  57  0.440007     -0.820964     -0.367379      0.367379       47.6886       48.0560    
  58  0.478097     -0.737941     -0.330226      0.330226       47.5418       47.8720    
  59  0.174252      -1.74725     -0.781889      0.781889       47.7484       48.5303    
  60  0.947266E-01  -2.35676      -1.05464       1.05464       47.8076       48.8622    
  61  0.115878      -2.15522     -0.964454      0.964454       46.9668       47.9313    
  62  0.523006     -0.648162     -0.290051      0.290051       47.6812       47.9713    
  63  0.114447      -2.16765     -0.970015      0.970015       47.3397       48.3097    
  64  0.694365     -0.364757     -0.163228      0.163228       47.6895       47.8528    
  65  0.551880     -0.594425     -0.266003      0.266003       47.5743       47.8403    
  66  0.558116     -0.583189     -0.260975      0.260975       47.0782       47.3392    
  67  0.160284      -1.83081     -0.819281      0.819281       47.6944       48.5136    
  68  0.786878     -0.239682     -0.107257      0.107257       47.8360       47.9432    
  69  0.450862     -0.796593     -0.356473      0.356473       47.3698       47.7263    
  70  0.857757     -0.153434     -0.686614E-01  0.686614E-01   47.8314       47.9001    
loop,thermsimp(1:2)       84  0.248617       1.27113    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    457         52.18          0.82          1.11         23.80          0.50          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    458         51.55          0.83          1.12         23.86          0.45          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4     47.51
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.447497               484
loop is:       84
neval is:      457
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     459       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    459         46.67          0.83          1.11         23.87          0.47          0.04         26.31
iter,obj,time:    460         46.56          0.83          1.11         23.81          0.50          0.04         26.29
iter,obj,time:    461         46.55          0.82          1.12         23.80          0.48          0.04         26.26
iter,obj,time:    462         46.62          0.84          1.12         23.86          0.61          0.04         26.46
iter,obj,time:    463         46.71          0.84          1.12         23.83          0.52          0.04         26.34
iter,obj,time:    464         46.62          0.82          1.11         23.91          0.71          0.04         26.59
iter,obj,time:    465         46.75          0.83          1.11         23.89          0.55          0.04         26.41
iter,obj,time:    466         46.67          0.82          1.11         23.89          0.43          0.04         26.29
iter,obj,time:    467         46.73          0.82          1.12         23.82          0.53          0.04         26.34
iter,obj,time:    468         46.90          0.80          1.11         23.82          0.48          0.04         26.27
iter,obj,time:    469         46.82          0.82          1.11         23.84          0.51          0.04         26.31
iter,obj,time:    470         46.67          0.82          1.11         23.86          0.58          0.04         26.42
iter,obj,time:    471         46.75          0.82          1.11         23.87          0.47          0.04         26.32
iter,obj,time:    472         46.82          0.82          1.11         23.86          0.48          0.04         26.31
iter,obj,time:    473         46.61          0.82          1.11         23.85          0.48          0.04         26.31
iter,obj,time:    474         46.90          0.82          1.11         23.89          0.45          0.04         26.33
iter,obj,time:    475         46.59          0.83          1.11         23.85          0.50          0.04         26.33
iter,obj,time:    476         46.73          0.83          1.12         23.79          0.54          0.05         26.34
iter,obj,time:    477         46.88          0.83          1.11         23.80          0.52          0.04         26.29
iter,obj,time:    478         46.75          0.82          1.11         23.84          0.43          0.04         26.23
iter,obj,time:    479         46.74          0.82          1.11         23.83          0.54          0.04         26.34
iter,obj,time:    480         46.71          0.79          1.11         23.87          0.67          0.04         26.48
iter,obj,time:    481         46.80          0.80          1.12         23.89          0.74          0.04         26.59
iter,obj,time:    482         46.72          0.81          1.11         23.79          0.54          0.04         26.28
iter,obj,time:    483         46.69          0.83          1.11         23.87          0.43          0.04         26.27
iter,obj,time:    484         46.86          0.80          1.11         23.86          0.49          0.04         26.31
iter,obj,time:    485         46.72          0.82          1.11         23.85          0.48          0.04         26.30
iter,obj,time:    486         46.83          0.84          1.12         23.86          0.55          0.04         26.41
iter,obj,time:    487         46.86          0.82          1.11         23.93          0.39          0.04         26.30
iter,obj,time:    488         46.90          0.83          1.11         23.86          0.64          0.04         26.49
iter,obj,time:    489         46.78          0.83          1.11         23.82          0.70          0.04         26.50
iter,obj,time:    490         46.64          0.84          1.12         23.84          0.48          0.04         26.32
iter,obj,time:    491         46.66          0.83          1.11         23.84          0.49          0.04         26.31
iter,obj,time:    492         46.63          0.81          1.11         23.87          0.46          0.04         26.29
iter,obj,time:    493         46.94          0.82          1.11         23.88          0.58          0.04         26.43
iter,obj,time:    494         46.81          0.82          1.11         23.86          0.64          0.04         26.47
iter,obj,time:    495         46.95          0.82          1.11         23.86          0.79          0.04         26.62
iter,obj,time:    496         47.12          0.82          1.11         23.80          0.53          0.04         26.30
iter,obj,time:    497         46.84          0.82          1.11         23.85          0.51          0.04         26.33
iter,obj,time:    498         46.81          0.81          1.12         23.85          0.48          0.04         26.30
iter,obj,time:    499         46.77          0.82          1.11         23.86          0.51          0.04         26.34
iter,obj,time:    500         46.71          0.80          1.11         23.81          0.58          0.04         26.35
iter,obj,time:    501         47.04          0.80          1.11         23.87          0.48          0.04         26.31
iter,obj,time:    502         46.61          0.82          1.11         23.85          0.48          0.04         26.31
iter,obj,time:    503         46.98          0.82          1.11         23.82          0.47          0.04         26.27
iter,obj,time:    504         46.57          0.82          1.11         23.85          0.76          0.04         26.59
iter,obj,time:    505         46.97          0.82          1.11         23.88          0.59          0.04         26.43
iter,obj,time:    506         46.75          0.82          1.11         23.85          0.48          0.04         26.32
iter,obj,time:    507         46.92          0.82          1.11         23.84          0.49          0.04         26.31
iter,obj,time:    508         46.95          0.82          1.11         23.81          0.64          0.04         26.42
iter,obj,time:    509         46.81          0.82          1.11         23.78          0.54          0.04         26.30
iter,obj,time:    510         46.97          0.82          1.12         23.82          0.45          0.04         26.26
iter,obj,time:    511         46.63          0.83          1.11         23.83          0.52          0.04         26.33
iter,obj,time:    512         46.66          0.82          1.12         23.80          0.55          0.04         26.33
iter,obj,time:    513         46.97          0.80          1.11         23.79          0.62          0.04         26.36
iter,obj,time:    514         47.06          0.82          1.11         23.88          0.57          0.04         26.42
iter,obj,time:    515         46.76          0.82          1.11         23.87          0.67          0.04         26.52
iter,obj,time:    516         46.79          0.82          1.12         23.89          0.66          0.05         26.54
iter,obj,time:    517         46.96          0.82          1.11         23.92          0.54          0.04         26.45
iter,obj,time:    518         46.92          0.82          1.11         23.83          0.53          0.04         26.33
iter,obj,time:    519         46.80          0.83          1.11         23.84          0.53          0.04         26.36
iter,obj,time:    520         46.97          0.82          1.11         23.88          0.49          0.04         26.34
iter,obj,time:    521         46.88          0.83          1.12         23.81          0.45          0.04         26.25
iter,obj,time:    522         47.21          0.82          1.11         23.89          0.48          0.04         26.34
iter,obj,time:    523         46.81          0.82          1.11         23.89          0.41          0.04         26.27
iter,obj,time:    524         47.03          0.82          1.11         23.85          0.51          0.04         26.34
iter,obj,time:    525         46.57          0.82          1.11         23.85          0.44          0.04         26.27
iter,obj,time:    526         47.02          0.83          1.11         23.84          0.48          0.04         26.31
iter,obj,time:    527         46.88          0.83          1.11         23.86          0.50          0.04         26.34


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     529      70
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     526




loop,nloop:      84      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.447497               484
loop is:       85
neval is:      526


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.223748               553

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      526     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01 -0.146312E-01  0.146312E-01   46.4330       46.4476    
   2  0.765516     -0.267206     -0.597868E-01  0.597868E-01   46.6709       46.7307    
   3  0.899266     -0.106176     -0.237567E-01  0.237567E-01   46.5646       46.5883    
   4  0.953341     -0.477822E-01 -0.106912E-01  0.106912E-01   46.5473       46.5580    
   5  0.642356     -0.442612     -0.990338E-01  0.990338E-01   46.6206       46.7196    
   6  0.265713      -1.32534     -0.296543      0.296543       46.7124       47.0090    
   7  0.379937     -0.967749     -0.216532      0.216532       46.6187       46.8352    
   8  0.449606     -0.799384     -0.178861      0.178861       46.7534       46.9322    
   9  0.810725     -0.209826     -0.469483E-01  0.469483E-01   46.6693       46.7163    
  10  0.218977      -1.51879     -0.339827      0.339827       46.7272       47.0670    
  11  0.456613     -0.783919     -0.175401      0.175401       46.9009       47.0763    
  12  0.439289E-02  -5.42777      -1.21445       1.21445       46.8224       48.0368    
  13  0.710409     -0.341914     -0.765028E-01  0.765028E-01   46.6736       46.7501    
  14  0.385315     -0.953695     -0.213388      0.213388       46.7470       46.9603    
  15  0.116701      -2.14814     -0.480644      0.480644       46.8239       47.3045    
  16  0.985237     -0.148728E-01 -0.332776E-02  0.332776E-02   46.6068       46.6101    
  17  0.856588     -0.154798     -0.346358E-01  0.346358E-01   46.9048       46.9395    
  18  0.155419      -1.86163     -0.416536      0.416536       46.5933       47.0099    
  19  0.257525      -1.35664     -0.303546      0.303546       46.7329       47.0365    
  20  0.548716     -0.600174     -0.134288      0.134288       46.8771       47.0114    
  21  0.589698     -0.528145     -0.118172      0.118172       46.7476       46.8657    
  22  0.884364     -0.122887     -0.274957E-01  0.274957E-01   46.7417       46.7691    
  23  0.871018E-01  -2.44068     -0.546098      0.546098       46.7063       47.2524    
  24  0.486795     -0.719912     -0.161079      0.161079       46.8003       46.9614    
  25  0.161417      -1.82376     -0.408064      0.408064       46.7171       47.1252    
  26  0.598774     -0.512871     -0.114754      0.114754       46.6945       46.8092    
  27  0.483527     -0.726647     -0.162586      0.162586       46.8647       47.0273    
  28  0.715961     -0.334130     -0.747610E-01  0.747610E-01   46.7233       46.7981    
  29  0.771801     -0.259029     -0.579572E-01  0.579572E-01   46.8264       46.8843    
  30  0.458713     -0.779330     -0.174374      0.174374       46.8553       47.0297    
  31  0.235181      -1.44740     -0.323854      0.323854       46.8987       47.2226    
  32  0.488220     -0.716988     -0.160425      0.160425       46.7800       46.9405    
  33  0.365473      -1.00656     -0.225217      0.225217       46.6436       46.8688    
  34  0.191311      -1.65386     -0.370048      0.370048       46.6573       47.0273    
  35  0.484999     -0.723609     -0.161906      0.161906       46.6293       46.7912    
  36  0.799086     -0.224286     -0.501837E-01  0.501837E-01   46.9388       46.9890    
  37  0.811458     -0.208923     -0.467462E-01  0.467462E-01   46.8107       46.8575    
  38  0.829885E-01  -2.48905     -0.556922      0.556922       46.9539       47.5108    
  39  0.731085     -0.313226     -0.700839E-01  0.700839E-01   47.1217       47.1918    
  40  0.854012     -0.157810     -0.353096E-01  0.353096E-01   46.8362       46.8716    
  41  0.699629     -0.357205     -0.799241E-01  0.799241E-01   46.8067       46.8866    
  42  0.918965     -0.845069E-01 -0.189083E-01  0.189083E-01   46.7659       46.7848    
  43  0.463498     -0.768952     -0.172052      0.172052       46.7127       46.8848    
  44  0.758690E-01  -2.57875     -0.576991      0.576991       47.0360       47.6130    
  45  0.577757     -0.548602     -0.122749      0.122749       46.6131       46.7359    
  46  0.897332     -0.108329     -0.242385E-01  0.242385E-01   46.9754       46.9997    
  47  0.522547     -0.649040     -0.145222      0.145222       46.5677       46.7130    
  48  0.408730E-01  -3.19729     -0.715388      0.715388       46.9697       47.6850    
  49  0.244793      -1.40734     -0.314890      0.314890       46.7450       47.0599    
  50  0.503867     -0.685443     -0.153367      0.153367       46.9183       47.0716    
  51  0.268075      -1.31649     -0.294562      0.294562       46.9506       47.2452    
  52  0.502965     -0.687236     -0.153768      0.153768       46.8124       46.9662    
  53  0.204120      -1.58905     -0.355547      0.355547       46.9749       47.3305    
  54  0.815323     -0.204171     -0.456829E-01  0.456829E-01   46.6269       46.6726    
  55  0.197358      -1.62274     -0.363085      0.363085       46.6597       47.0228    
  56  0.754254     -0.282026     -0.631029E-01  0.631029E-01   46.9654       47.0285    
  57  0.693043E-01  -2.66925     -0.597240      0.597240       47.0647       47.6620    
  58  0.913327     -0.906616E-01 -0.202854E-01  0.202854E-01   46.7635       46.7838    
  59  0.921558     -0.816897E-01 -0.182779E-01  0.182779E-01   46.7917       46.8100    
  60  0.383396     -0.958686     -0.214504      0.214504       46.9562       47.1707    
  61  0.641735     -0.443580     -0.992504E-01  0.992504E-01   46.9226       47.0219    
  62  0.380707     -0.965725     -0.216079      0.216079       46.7950       47.0111    
  63  0.877180E-01  -2.43363     -0.544521      0.544521       46.9700       47.5145    
  64  0.768830     -0.262886     -0.588203E-01  0.588203E-01   46.8811       46.9400    
  65  0.998270     -0.173121E-02 -0.387355E-03  0.387355E-03   47.2150       47.2154    
  66  0.504375     -0.684435     -0.153141      0.153141       46.8136       46.9668    
  67  0.789522     -0.236327     -0.528778E-01  0.528778E-01   47.0341       47.0870    
  68  0.182758E-01  -4.00218     -0.895481      0.895481       46.5666       47.4620    
  69  0.828868     -0.187695     -0.419964E-01  0.419964E-01   47.0152       47.0572    
  70  0.147499      -1.91393     -0.428239      0.428239       46.8840       47.3122    
loop,thermsimp(1:2)       85  0.146312E-01  0.597868E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    528         46.61          0.83          1.11         23.79          0.49          0.05         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    529         46.66          0.84          1.11         23.82          0.51          0.04         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       85
neval is:      528
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       86
neval is:      528


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      528     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542     -0.245099      0.245099       46.4330       46.6781    
   2  0.140144      -1.96508     -0.439684      0.439684       46.5473       46.9870    
   3  0.520913     -0.652172     -0.145922      0.145922       46.5646       46.7105    
   4  0.628337     -0.464678     -0.103971      0.103971       46.6068       46.7108    
   5  0.203324      -1.59296     -0.356421      0.356421       46.6269       46.9834    
   6  0.481205     -0.731462     -0.163663      0.163663       46.5677       46.7314    
   7  0.948759     -0.526009E-01 -0.117694E-01  0.117694E-01   46.6693       46.6811    
   8  0.251825      -1.37902     -0.308553      0.308553       46.6206       46.9291    
   9  0.363806      -1.01114     -0.226240      0.226240       46.6709       46.8971    
  10  0.465077     -0.765552     -0.171291      0.171291       46.6131       46.7844    
  11  0.580920     -0.543143     -0.121527      0.121527       46.6736       46.7951    
  12  0.957129     -0.438167E-01 -0.980391E-02  0.980391E-02   46.7417       46.7515    
  13  0.345007      -1.06419     -0.238111      0.238111       46.7635       47.0016    
  14  0.177852E-01  -4.02939     -0.901570      0.901570       46.7659       47.6675    
  15  0.843779     -0.169864     -0.380068E-01  0.380068E-01   46.6293       46.6673    
  16  0.765452     -0.267288     -0.598053E-01  0.598053E-01   46.7233       46.7831    
  17  0.453925     -0.789824     -0.176722      0.176722       46.6945       46.8712    
  18  0.378234     -0.972243     -0.217538      0.217538       46.7917       47.0093    
  19  0.167312      -1.78790     -0.400039      0.400039       46.6187       47.0187    
  20  0.240345      -1.42568     -0.318993      0.318993       46.8107       47.1297    
  21  0.868226     -0.141303     -0.316164E-01  0.316164E-01   46.7476       46.7792    
  22  0.907002     -0.976102E-01 -0.218401E-01  0.218401E-01   46.6436       46.6655    
  23  0.433040     -0.836925     -0.187261      0.187261       46.8362       47.0235    
  24  0.291080      -1.23416     -0.276141      0.276141       46.8264       47.1025    
  25  0.391091     -0.938815     -0.210058      0.210058       46.7127       46.9228    
  26  0.541803     -0.612853     -0.137125      0.137125       46.8067       46.9438    
  27  0.494251     -0.704711     -0.157678      0.157678       46.7534       46.9111    
  28  0.617376     -0.482277     -0.107909      0.107909       46.9048       47.0127    
  29  0.919515     -0.839094E-01 -0.187746E-01  0.187746E-01   46.8811       46.8999    
  30  0.836216     -0.178868     -0.400215E-01  0.400215E-01   46.7800       46.8201    
  31  0.436173     -0.829716     -0.185648      0.185648       46.7470       46.9326    
  32  0.175211      -1.74176     -0.389717      0.389717       46.8003       47.1901    
  33  0.304297      -1.18975     -0.266205      0.266205       46.8124       47.0786    
  34  0.996125     -0.388259E-02 -0.868724E-03  0.868724E-03   46.8136       46.8145    
  35  0.146253      -1.92242     -0.430138      0.430138       46.9388       47.3690    
  36  0.110666      -2.20124     -0.492523      0.492523       46.9754       47.4680    
  37  0.481190E-01  -3.03408     -0.678870      0.678870       46.7124       47.3913    
  38  0.342728      -1.07082     -0.239594      0.239594       46.5933       46.8329    
  39  0.998409E-01  -2.30418     -0.515556      0.515556       46.7950       47.3106    
  40  0.509248     -0.674821     -0.150990      0.150990       46.8771       47.0281    
  41  0.974159     -0.261804E-01 -0.585783E-02  0.585783E-02   46.9226       46.9285    
  42  0.950347     -0.509279E-01 -0.113950E-01  0.113950E-01   46.6597       46.6711    
  43  0.333494      -1.09813     -0.245705      0.245705       46.8647       47.1104    
  44  0.914660     -0.892024E-01 -0.199589E-01  0.199589E-01   46.6573       46.6773    
  45  0.249678      -1.38758     -0.310470      0.310470       46.9654       47.2758    
  46  0.512508     -0.668440     -0.149562      0.149562       46.8553       47.0048    
  47  0.592185     -0.523937     -0.117230      0.117230       46.7329       46.8502    
  48  0.931089     -0.714008E-01 -0.159758E-01  0.159758E-01   47.0152       47.0311    
  49  0.638700     -0.448321     -0.100311      0.100311       46.7450       46.8454    
  50  0.563786     -0.573081     -0.128226      0.128226       46.7272       46.8554    
  51  0.136824      -1.98906     -0.445049      0.445049       46.9183       47.3633    
  52  0.806361     -0.215224     -0.481560E-01  0.481560E-01   46.9009       46.9490    
  53  0.106433      -2.24024     -0.501250      0.501250       47.0341       47.5353    
  54  0.637638     -0.449985     -0.100683      0.100683       46.7171       46.8178    
  55  0.677480     -0.389375     -0.871219E-01  0.871219E-01   46.9562       47.0433    
  56  0.533764     -0.627801     -0.140470      0.140470       47.1217       47.2622    
  57  0.879213     -0.128728     -0.288028E-01  0.288028E-01   47.2150       47.2438    
  58  0.260545E-01  -3.64756     -0.816137      0.816137       46.8987       47.7149    
  59  0.249338      -1.38895     -0.310775      0.310775       46.9506       47.2614    
  60  0.101288      -2.28979     -0.512336      0.512336       46.7063       47.2186    
  61  0.563390     -0.573782     -0.128383      0.128383       46.8239       46.9522    
  62  0.735149     -0.307682     -0.688435E-01  0.688435E-01   46.8840       46.9528    
  63  0.720819     -0.327367     -0.732478E-01  0.732478E-01   46.9749       47.0482    
  64  0.493868     -0.705487     -0.157852      0.157852       46.5666       46.7244    
  65  0.417909     -0.872492     -0.195219      0.195219       46.9539       47.1491    
  66  0.529854     -0.635153     -0.142115      0.142115       46.9700       47.1121    
  67  0.732047     -0.311910     -0.697894E-01  0.697894E-01   47.0360       47.1057    
  68  0.926465     -0.763785E-01 -0.170896E-01  0.170896E-01   47.0647       47.0818    
  69  0.948726     -0.526350E-01 -0.117770E-01  0.117770E-01   46.9697       46.9814    
  70  0.433699     -0.835404     -0.186920      0.186920       46.6071       46.7940    
loop,thermsimp(1:2)       86  0.245099      0.439684    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    530         46.79          0.83          1.11         23.85          0.43          0.04         26.25
Just calling func    0   0         26.25


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     46.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       86
neval is:      529
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       87
neval is:      529


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      529     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750     -0.695298      0.695298       46.6436       47.3389    
   2  0.682805     -0.381545     -0.853702E-01  0.853702E-01   46.6293       46.7147    
   3  0.699780     -0.356989     -0.798758E-01  0.798758E-01   46.6597       46.7396    
   4  0.515086     -0.663422     -0.148440      0.148440       46.6573       46.8057    
   5  0.402461     -0.910157     -0.203646      0.203646       46.4330       46.6366    
   6  0.652803     -0.426480     -0.954243E-01  0.954243E-01   46.6693       46.7647    
   7  0.483213     -0.727297     -0.162732      0.162732       46.5646       46.7273    
   8  0.873684     -0.135037     -0.302143E-01  0.302143E-01   46.6068       46.6370    
   9  0.142648      -1.94738     -0.435723      0.435723       46.5666       47.0023    
  10  0.844357     -0.169180     -0.378538E-01  0.378538E-01   46.5677       46.6056    
  11  0.154187      -1.86959     -0.418317      0.418317       46.7417       47.1600    
  12  0.437314E-01  -3.12969     -0.700263      0.700263       46.7476       47.4478    
  13  0.455393E-02  -5.39176      -1.20640       1.20640       46.7233       47.9297    
  14  0.236800      -1.44054     -0.322318      0.322318       46.6131       46.9355    
  15  0.660181     -0.415241     -0.929096E-01  0.929096E-01   46.6071       46.7000    
  16  0.652586     -0.426813     -0.954987E-01  0.954987E-01   46.6736       46.7691    
  17  0.153101      -1.87666     -0.419900      0.419900       46.8136       47.2335    
  18  0.753412     -0.283143     -0.633527E-01  0.633527E-01   46.7171       46.7805    
  19  0.240839      -1.42363     -0.318534      0.318534       46.7800       47.0986    
  20  0.684622     -0.378888     -0.847757E-01  0.847757E-01   46.5933       46.6781    
  21  0.243018      -1.41462     -0.316519      0.316519       46.7450       47.0616    
  22  0.815539     -0.203906     -0.456237E-01  0.456237E-01   46.7329       46.7786    
  23  0.589355     -0.528726     -0.118302      0.118302       46.7272       46.8455    
  24  0.243009      -1.41466     -0.316527      0.316527       46.6945       47.0110    
  25  0.821886     -0.196154     -0.438892E-01  0.438892E-01   46.6709       46.7148    
  26  0.261401      -1.34170     -0.300204      0.300204       46.8811       47.1813    
  27  0.571134     -0.560131     -0.125328      0.125328       46.7534       46.8787    
  28  0.406429E-01  -3.20293     -0.716651      0.716651       46.7127       47.4294    
  29  0.341463      -1.07451     -0.240421      0.240421       46.9226       47.1631    
  30  0.252643      -1.37578     -0.307828      0.307828       46.6206       46.9284    
  31  0.503366     -0.686439     -0.153590      0.153590       46.7470       46.9005    
  32  0.247804      -1.39512     -0.312155      0.312155       46.8067       47.1188    
  33  0.902392     -0.102706     -0.229803E-01  0.229803E-01   46.9009       46.9238    
  34  0.198330E-01  -3.92041     -0.877185      0.877185       46.8239       47.7010    
  35  0.695627     -0.362942     -0.812077E-01  0.812077E-01   46.8840       46.9652    
  36  0.833441     -0.182192     -0.407652E-01  0.407652E-01   46.9697       47.0104    
  37  0.720954     -0.327181     -0.732061E-01  0.732061E-01   46.6269       46.7002    
  38  0.155604      -1.86044     -0.416271      0.416271       46.5473       46.9636    
  39  0.496580E-01  -3.00260     -0.671826      0.671826       46.7635       47.4353    
  40  0.804644     -0.217356     -0.486330E-01  0.486330E-01   46.8553       46.9039    
  41  0.329241      -1.11097     -0.248577      0.248577       46.7917       47.0403    
  42  0.889596     -0.116988     -0.261759E-01  0.261759E-01   46.9048       46.9310    
  43  0.857341     -0.153920     -0.344393E-01  0.344393E-01   46.6187       46.6531    
  44  0.238258      -1.43440     -0.320945      0.320945       46.8362       47.1572    
  45  0.998437     -0.156448E-02 -0.350050E-03  0.350050E-03   46.8771       46.8775    
  46  0.280889      -1.26979     -0.284115      0.284115       47.0152       47.2993    
  47  0.518450     -0.656912     -0.146983      0.146983       46.9562       47.1032    
  48  0.348786      -1.05330     -0.235673      0.235673       46.9749       47.2106    
  49  0.250207      -1.38547     -0.309996      0.309996       46.8124       47.1224    
  50  0.442136     -0.816138     -0.182610      0.182610       47.0647       47.2473    
  51  0.881002     -0.126696     -0.283480E-01  0.283480E-01   46.8264       46.8547    
  52  0.903963     -0.100967     -0.225912E-01  0.225912E-01   47.0360       47.0586    
  53  0.227541      -1.48043     -0.331243      0.331243       46.8647       47.1959    
  54  0.468734     -0.757719     -0.169539      0.169539       46.9700       47.1395    
  55  0.622565E-01  -2.77649     -0.621236      0.621236       46.8107       47.4320    
  56  0.650607     -0.429850     -0.961783E-01  0.961783E-01   46.9539       47.0500    
  57  0.947139     -0.543094E-01 -0.121516E-01  0.121516E-01   46.8003       46.8125    
  58  0.942852     -0.588460E-01 -0.131667E-01  0.131667E-01   46.7063       46.7195    
  59  0.204603      -1.58668     -0.355018      0.355018       47.2150       47.5700    
  60  0.781809     -0.246145     -0.550745E-01  0.550745E-01   46.9506       47.0057    
  61  0.543108     -0.610447     -0.136586      0.136586       47.1217       47.2583    
  62  0.199157E-02  -6.21883      -1.39145       1.39145       46.9654       48.3568    
  63  0.867255     -0.142422     -0.318668E-01  0.318668E-01   46.7950       46.8269    
  64  0.846580     -0.166550     -0.372654E-01  0.372654E-01   46.9183       46.9555    
  65  0.267681      -1.31796     -0.294891      0.294891       46.9388       47.2337    
  66  0.656550E-01  -2.72334     -0.609344      0.609344       46.7124       47.3218    
  67  0.914706     -0.891526E-01 -0.199478E-01  0.199478E-01   46.9754       46.9954    
  68  0.177217      -1.73038     -0.387170      0.387170       47.0341       47.4212    
  69  0.973717     -0.266348E-01 -0.595950E-02  0.595950E-02   46.7659       46.7719    
  70  0.329699E-01  -3.41216     -0.763466      0.763466       46.7917       47.5551    
loop,thermsimp(1:2)       87  0.695298      0.853702E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    531         46.89          0.84          1.12         23.85          0.43          0.04         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     46.89
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       87
neval is:      530
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       88
neval is:      530


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      530     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752     -0.168427      0.168427       46.5677       46.7362    
   2  0.531040     -0.632917     -0.141614      0.141614       46.4330       46.5746    
   3  0.592986E-01  -2.82517     -0.632127      0.632127       46.6068       47.2389    
   4  0.247694      -1.39556     -0.312255      0.312255       46.6187       46.9310    
   5  0.131832      -2.02623     -0.453365      0.453365       46.5933       47.0467    
   6  0.928797E-01  -2.37645     -0.531727      0.531727       46.6071       47.1388    
   7  0.638590     -0.448492     -0.100349      0.100349       46.6269       46.7273    
   8  0.220145      -1.51347     -0.338637      0.338637       46.6293       46.9680    
   9  0.764323     -0.268765     -0.601357E-01  0.601357E-01   46.6709       46.7310    
  10  0.223429      -1.49866     -0.335323      0.335323       46.7063       47.0416    
  11  0.705665     -0.348615     -0.780020E-01  0.780020E-01   46.5646       46.6426    
  12  0.812667     -0.207434     -0.464131E-01  0.464131E-01   46.6597       46.7061    
  13  0.344167      -1.06663     -0.238656      0.238656       46.6693       46.9080    
  14  0.691720     -0.368573     -0.824677E-01  0.824677E-01   46.6736       46.7561    
  15  0.601584     -0.508189     -0.113707      0.113707       46.7659       46.8796    
  16  0.323598      -1.12825     -0.252445      0.252445       46.7329       46.9854    
  17  0.536181     -0.623284     -0.139459      0.139459       46.7171       46.8566    
  18  0.224445      -1.49412     -0.334308      0.334308       46.6573       46.9916    
  19  0.967837     -0.326916E-01 -0.731468E-02  0.731468E-02   46.8003       46.8077    
  20  0.982234     -0.179257E-01 -0.401085E-02  0.401085E-02   46.7950       46.7991    
  21  0.656459     -0.420894     -0.941745E-01  0.941745E-01   46.7272       46.8214    
  22  0.138036      -1.98024     -0.443075      0.443075       46.8264       47.2694    
  23  0.698821     -0.358360     -0.801826E-01  0.801826E-01   46.8771       46.9573    
  24  0.603237     -0.505446     -0.113093      0.113093       46.7534       46.8665    
  25  0.253585      -1.37205     -0.306995      0.306995       46.7470       47.0540    
  26  0.404885     -0.904153     -0.202303      0.202303       46.8553       47.0576    
  27  0.802083     -0.220543     -0.493461E-01  0.493461E-01   46.9009       46.9502    
  28  0.756447     -0.279123     -0.624533E-01  0.624533E-01   46.6206       46.6830    
  29  0.390929     -0.939231     -0.210151      0.210151       46.9048       47.1150    
  30  0.260757      -1.34417     -0.300755      0.300755       46.6131       46.9139    
  31  0.177681      -1.72776     -0.386585      0.386585       46.9183       47.3049    
  32  0.806362     -0.215223     -0.481558E-01  0.481558E-01   46.5473       46.5955    
  33  0.222380      -1.50337     -0.336376      0.336376       46.8840       47.2204    
  34  0.969986     -0.304736E-01 -0.681842E-02  0.681842E-02   46.9754       46.9823    
  35  0.417166     -0.874272     -0.195617      0.195617       46.5666       46.7622    
  36  0.212672      -1.54800     -0.346364      0.346364       46.9506       47.2970    
  37  0.141187      -1.95767     -0.438026      0.438026       46.9697       47.4077    
  38  0.750343     -0.287224     -0.642660E-01  0.642660E-01   46.6945       46.7588    
  39  0.628172     -0.464941     -0.104030      0.104030       46.7917       46.8958    
  40  0.466629     -0.762221     -0.170546      0.170546       46.9539       47.1244    
  41  0.120425      -2.11672     -0.473614      0.473614       47.0360       47.5096    
  42  0.179567      -1.71721     -0.384223      0.384223       46.7450       47.1293    
  43  0.209268      -1.56414     -0.349974      0.349974       46.7800       47.1300    
  44  0.730304E-01  -2.61688     -0.585523      0.585523       46.9562       47.5417    
  45  0.985392     -0.147157E-01 -0.329262E-02  0.329262E-02   46.8067       46.8100    
  46  0.726759E-01  -2.62175     -0.586611      0.586611       46.8124       47.3990    
  47  0.205943      -1.58016     -0.353558      0.353558       46.9700       47.3236    
  48  0.198791      -1.61550     -0.361466      0.361466       46.8362       47.1977    
  49  0.320500      -1.13787     -0.254598      0.254598       46.7417       46.9962    
  50  0.911267     -0.929191E-01 -0.207905E-01  0.207905E-01   46.9226       46.9434    
  51  0.153842      -1.87183     -0.418820      0.418820       46.8811       47.3000    
  52  0.152265      -1.88213     -0.421124      0.421124       46.8647       47.2858    
  53  0.396303     -0.925575     -0.207096      0.207096       46.9749       47.1820    
  54  0.964537     -0.361075E-01 -0.807899E-02  0.807899E-02   46.8136       46.8217    
  55  0.259986      -1.34713     -0.301417      0.301417       46.9388       47.2403    
  56  0.710828     -0.341325     -0.763710E-01  0.763710E-01   47.0647       47.1411    
  57  0.189878E-01  -3.96396     -0.886930      0.886930       47.1217       48.0086    
  58  0.960744     -0.400468E-01 -0.896041E-02  0.896041E-02   47.0152       47.0241    
  59  0.514017     -0.665499     -0.148904      0.148904       46.7124       46.8613    
  60  0.507688     -0.677888     -0.151676      0.151676       46.6436       46.7953    
  61  0.915765     -0.879957E-01 -0.196889E-01  0.196889E-01   47.0341       47.0538    
  62  0.648043     -0.433798     -0.970617E-01  0.970617E-01   46.7127       46.8098    
  63  0.395249     -0.928240     -0.207692      0.207692       46.8107       47.0184    
  64  0.604600     -0.503188     -0.112587      0.112587       46.7635       46.8761    
  65  0.348789      -1.05329     -0.235671      0.235671       46.7476       46.9832    
  66  0.497548     -0.698064     -0.156191      0.156191       46.7917       46.9479    
  67  0.240711E-01  -3.72675     -0.833853      0.833853       47.2150       48.0488    
  68  0.745753     -0.293361     -0.656390E-01  0.656390E-01   46.8239       46.8895    
  69  0.195047      -1.63452     -0.365721      0.365721       46.7233       47.0890    
  70  0.792585     -0.232456     -0.520116E-01  0.520116E-01   46.8882       46.9403    
loop,thermsimp(1:2)       88  0.168427      0.141614    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    532         46.77          0.84          1.11         23.79          0.60          0.04         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     46.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       88
neval is:      531
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       89
neval is:      531


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      531     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877     -0.234661      0.234661       46.4330       46.6677    
   2  0.650675     -0.429745     -0.961548E-01  0.961548E-01   46.5473       46.6435    
   3  0.849247     -0.163405     -0.365617E-01  0.365617E-01   46.5646       46.6011    
   4  0.910703     -0.935381E-01 -0.209290E-01  0.209290E-01   46.6206       46.6415    
   5  0.188892      -1.66658     -0.372894      0.372894       46.6597       47.0326    
   6  0.256564      -1.36038     -0.304382      0.304382       46.6269       46.9313    
   7  0.465488E-01  -3.06725     -0.686293      0.686293       46.6709       47.3572    
   8  0.824855     -0.192548     -0.430824E-01  0.430824E-01   46.5677       46.6108    
   9  0.730565     -0.313937     -0.702428E-01  0.702428E-01   46.6736       46.7438    
  10  0.888077     -0.118697     -0.265582E-01  0.265582E-01   46.6945       46.7211    
  11  0.898172     -0.107394     -0.240293E-01  0.240293E-01   46.5666       46.5906    
  12  0.314974      -1.15527     -0.258489      0.258489       46.6436       46.9021    
  13  0.247979      -1.39441     -0.311997      0.311997       46.7950       47.1070    
  14  0.330032E-01  -3.41115     -0.763240      0.763240       46.8003       47.5636    
  15  0.570783E-01  -2.86333     -0.640666      0.640666       46.7127       47.3534    
  16  0.694187     -0.365014     -0.816712E-01  0.816712E-01   46.8067       46.8884    
  17  0.314834      -1.15571     -0.258588      0.258588       46.7272       46.9858    
  18  0.917621     -0.859711E-01 -0.192359E-01  0.192359E-01   46.8136       46.8329    
  19  0.613858     -0.487991     -0.109187      0.109187       46.7171       46.8263    
  20  0.744084E-01  -2.59819     -0.581340      0.581340       46.7124       47.2938    
  21  0.454198     -0.789221     -0.176587      0.176587       46.7534       46.9300    
  22  0.118203E-01  -4.43793     -0.992981      0.992981       46.7635       47.7565    
  23  0.746996     -0.291695     -0.652663E-01  0.652663E-01   46.7659       46.8312    
  24  0.416160     -0.876686     -0.196157      0.196157       46.8239       47.0200    
  25  0.339178E-01  -3.38381     -0.757123      0.757123       46.7917       47.5489    
  26  0.824080     -0.193487     -0.432924E-01  0.432924E-01   46.6693       46.7126    
  27  0.589652     -0.528223     -0.118189      0.118189       46.6131       46.7313    
  28  0.680293     -0.385231     -0.861949E-01  0.861949E-01   46.6187       46.7049    
  29  0.864872E-01  -2.44776     -0.547682      0.547682       46.8882       47.4359    
  30  0.672988     -0.396027     -0.886105E-01  0.886105E-01   46.9226       47.0112    
  31  0.797049E-01  -2.52942     -0.565955      0.565955       46.7917       47.3576    
  32  0.831708     -0.184273     -0.412309E-01  0.412309E-01   46.9009       46.9421    
  33  0.280253E-01  -3.57465     -0.799822      0.799822       46.8771       47.6770    
  34  0.131717      -2.02710     -0.453560      0.453560       46.6293       47.0829    
  35  0.343675      -1.06806     -0.238977      0.238977       46.9754       47.2144    
  36  0.280745      -1.27031     -0.284230      0.284230       46.7476       47.0318    
  37  0.322275      -1.13235     -0.253362      0.253362       46.7329       46.9863    
  38  0.769830E-01  -2.56417     -0.573729      0.573729       46.6573       47.2310    
  39  0.851798     -0.160406     -0.358905E-01  0.358905E-01   46.7417       46.7775    
  40  0.864683     -0.145392     -0.325312E-01  0.325312E-01   46.8107       46.8433    
  41  0.157880      -1.84592     -0.413021      0.413021       47.0152       47.4282    
  42  0.371895     -0.989143     -0.221319      0.221319       46.7063       46.9276    
  43  0.861425     -0.149167     -0.333759E-01  0.333759E-01   46.5933       46.6267    
  44  0.778275E-01  -2.55326     -0.571288      0.571288       47.0341       47.6054    
  45  0.450106     -0.798272     -0.178612      0.178612       46.7470       46.9256    
  46  0.188928      -1.66639     -0.372852      0.372852       46.8553       47.2281    
  47  0.225391      -1.48992     -0.333367      0.333367       46.7233       47.0567    
  48  0.814689     -0.204949     -0.458569E-01  0.458569E-01   46.9048       46.9507    
  49  0.556109     -0.586791     -0.131293      0.131293       46.9539       47.0852    
  50  0.860351     -0.150415     -0.336552E-01  0.336552E-01   46.7450       46.7787    
  51  0.124594      -2.08269     -0.465999      0.465999       46.7800       47.2460    
  52  0.924630     -0.783615E-01 -0.175333E-01  0.175333E-01   46.6071       46.6246    
  53  0.463685     -0.768549     -0.171962      0.171962       47.0647       47.2367    
  54  0.719654     -0.328985     -0.736099E-01  0.736099E-01   46.9749       47.0485    
  55  0.740445     -0.300503     -0.672371E-01  0.672371E-01   46.8362       46.9035    
  56  0.948188     -0.532020E-01 -0.119039E-01  0.119039E-01   46.8840       46.8959    
  57  0.174315      -1.74689     -0.390864      0.390864       46.6068       46.9977    
  58  0.436138     -0.829795     -0.185665      0.185665       46.9388       47.1245    
  59  0.442627     -0.815027     -0.182361      0.182361       46.8264       47.0087    
  60  0.781531     -0.246500     -0.551540E-01  0.551540E-01   46.8647       46.9198    
  61  0.233219E-01  -3.75836     -0.840928      0.840928       46.9506       47.7915    
  62  0.529855     -0.635152     -0.142114      0.142114       46.8811       47.0232    
  63  0.415693     -0.877807     -0.196408      0.196408       46.9183       47.1147    
  64  0.655864     -0.421801     -0.943774E-01  0.943774E-01   46.9700       47.0644    
  65  0.932327     -0.700720E-01 -0.156785E-01  0.156785E-01   46.8124       46.8281    
  66  0.570322     -0.561554     -0.125647      0.125647       46.9697       47.0953    
  67  0.969693     -0.307757E-01 -0.688602E-02  0.688602E-02   47.0360       47.0428    
  68  0.707842     -0.345534     -0.773128E-01  0.773128E-01   46.9562       47.0335    
  69  0.971476E-01  -2.33152     -0.521675      0.521675       47.1217       47.6434    
  70  0.807879     -0.213342     -0.477350E-01  0.477350E-01   46.7662       46.8139    
loop,thermsimp(1:2)       89  0.234661      0.961548E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    533         46.53          0.83          1.11         23.82          0.79          0.04         26.60
Just calling func    0   0         26.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    534         46.45          0.83          1.12         23.81          0.50          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       89
neval is:      533
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       90
neval is:      533


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      533     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786     -0.453730      0.453730       46.5666       47.0203    
   2  0.314760      -1.15594     -0.258641      0.258641       46.5646       46.8232    
   3  0.748375     -0.289851     -0.648537E-01  0.648537E-01   46.5677       46.6326    
   4  0.632472     -0.458119     -0.102503      0.102503       46.6071       46.7096    
   5  0.677472     -0.389387     -0.871247E-01  0.871247E-01   46.5933       46.6804    
   6  0.433475     -0.835921     -0.187036      0.187036       46.6206       46.8076    
   7  0.458976     -0.778758     -0.174246      0.174246       46.5473       46.7216    
   8  0.411427E-02  -5.49329      -1.22912       1.22912       46.4330       47.6621    
   9  0.904989     -0.998322E-01 -0.223373E-01  0.223373E-01   46.6187       46.6410    
  10  0.480311     -0.733322     -0.164080      0.164080       46.6693       46.8334    
  11  0.277870      -1.28060     -0.286532      0.286532       46.6945       46.9810    
  12  0.958372     -0.425196E-01 -0.951370E-02  0.951370E-02   46.6131       46.6227    
  13  0.321639      -1.13432     -0.253803      0.253803       46.6736       46.9274    
  14  0.562333     -0.575660     -0.128803      0.128803       46.7417       46.8705    
  15  0.665565     -0.407119     -0.910922E-01  0.910922E-01   46.7450       46.8361    
  16  0.307614      -1.17891     -0.263779      0.263779       46.7662       47.0300    
  17  0.504790E-01  -2.98620     -0.668157      0.668157       46.7171       47.3853    
  18  0.361959      -1.01622     -0.227379      0.227379       46.8124       47.0398    
  19  0.470787     -0.753350     -0.168561      0.168561       46.7659       46.9345    
  20  0.312221      -1.16404     -0.260453      0.260453       46.8136       47.0741    
  21  0.156792      -1.85283     -0.414569      0.414569       46.8107       47.2253    
  22  0.445216     -0.809196     -0.181056      0.181056       46.8067       46.9877    
  23  0.999492     -0.508321E-03 -0.113736E-03  0.113736E-03   46.8840       46.8841    
  24  0.167067      -1.78936     -0.400366      0.400366       46.6436       47.0440    
  25  0.435083     -0.832219     -0.186208      0.186208       46.8362       47.0224    
  26  0.110403      -2.20362     -0.493056      0.493056       46.8647       47.3577    
  27  0.704194     -0.350701     -0.784689E-01  0.784689E-01   46.7470       46.8254    
  28  0.767816     -0.264205     -0.591155E-01  0.591155E-01   46.7063       46.7654    
  29  0.231293      -1.46407     -0.327583      0.327583       46.7534       47.0810    
  30  0.965513     -0.350953E-01 -0.785251E-02  0.785251E-02   46.6269       46.6348    
  31  0.674440     -0.393873     -0.881284E-01  0.881284E-01   46.9009       46.9890    
  32  0.248626      -1.39181     -0.311415      0.311415       46.9048       47.2162    
  33  0.461218     -0.773884     -0.173155      0.173155       46.7272       46.9003    
  34  0.778910     -0.249859     -0.559057E-01  0.559057E-01   46.7329       46.7888    
  35  0.665530     -0.407172     -0.911041E-01  0.911041E-01   46.6068       46.6979    
  36  0.383296     -0.958947     -0.214563      0.214563       46.8264       47.0409    
  37  0.492311     -0.708645     -0.158558      0.158558       46.9226       47.0812    
  38  0.631911     -0.459006     -0.102702      0.102702       46.8239       46.9266    
  39  0.150454E-01  -4.19668     -0.939002      0.939002       46.8811       47.8201    
  40  0.958677     -0.422006E-01 -0.944232E-02  0.944232E-02   46.7476       46.7570    
  41  0.411899     -0.886977     -0.198460      0.198460       46.6597       46.8582    
  42  0.466999     -0.761428     -0.170368      0.170368       46.9562       47.1266    
  43  0.622674     -0.473731     -0.105997      0.105997       47.0360       47.1420    
  44  0.497710     -0.697737     -0.156118      0.156118       46.9749       47.1310    
  45  0.763352E-01  -2.57262     -0.575620      0.575620       46.7233       47.2989    
  46  0.192360      -1.64839     -0.368824      0.368824       46.9700       47.3388    
  47  0.444368     -0.811101     -0.181483      0.181483       46.6293       46.8108    
  48  0.617268     -0.482452     -0.107948      0.107948       46.9539       47.0618    
  49  0.898554     -0.106968     -0.239339E-01  0.239339E-01   46.9697       46.9936    
  50  0.382850     -0.960111     -0.214823      0.214823       46.7950       47.0099    
  51  0.769319     -0.262250     -0.586780E-01  0.586780E-01   46.9183       46.9769    
  52  0.356805      -1.03057     -0.230588      0.230588       46.9388       47.1694    
  53  0.159449E-01  -4.13862     -0.926009      0.926009       46.9754       47.9015    
  54  0.879661     -0.128218     -0.286887E-01  0.286887E-01   46.8553       46.8840    
  55  0.413677     -0.882671     -0.197496      0.197496       46.6573       46.8548    
  56  0.332125      -1.10224     -0.246625      0.246625       47.0647       47.3113    
  57  0.963873     -0.367956E-01 -0.823296E-02  0.823296E-02   46.7800       46.7883    
  58  0.440660     -0.819481     -0.183358      0.183358       46.7124       46.8958    
  59  0.968287     -0.322271E-01 -0.721076E-02  0.721076E-02   46.7127       46.7199    
  60  0.174603      -1.74524     -0.390495      0.390495       46.6709       47.0614    
  61  0.915676E-01  -2.39068     -0.534911      0.534911       46.7917       47.3266    
  62  0.882563     -0.124926     -0.279519E-01  0.279519E-01   47.0152       47.0431    
  63  0.504296     -0.684592     -0.153176      0.153176       46.8882       47.0414    
  64  0.877119     -0.131112     -0.293361E-01  0.293361E-01   46.7917       46.8211    
  65  0.703997     -0.350981     -0.785315E-01  0.785315E-01   46.8003       46.8789    
  66  0.349323      -1.05176     -0.235329      0.235329       47.0341       47.2694    
  67  0.417707     -0.872976     -0.195327      0.195327       47.1217       47.3170    
  68  0.442862E-01  -3.11708     -0.697442      0.697442       46.8771       47.5746    
  69  0.135627      -1.99785     -0.447015      0.447015       46.7635       47.2105    
  70  0.684853     -0.378551     -0.847001E-01  0.847001E-01   46.4456       46.5303    
loop,thermsimp(1:2)       90  0.453730      0.258641    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    535         46.41          0.83          1.11         23.85          0.42          0.06         26.27
Just calling func    0   0         26.27


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    536         46.36          0.82          1.11         23.80          0.52          0.04         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.36
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       90
neval is:      535
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       91
neval is:      535


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      535     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01 -0.185648E-01  0.185648E-01   46.4456       46.4642    
   2  0.393393     -0.932946     -0.208745      0.208745       46.6131       46.8219    
   3  0.317218      -1.14817     -0.256901      0.256901       46.5677       46.8246    
   4  0.324247      -1.12625     -0.251996      0.251996       46.6269       46.8789    
   5  0.515746E-01  -2.96473     -0.663353      0.663353       46.6187       47.2820    
   6  0.143224      -1.94335     -0.434820      0.434820       46.5933       47.0281    
   7  0.512136     -0.669164     -0.149724      0.149724       46.6068       46.7565    
   8  0.993896     -0.612239E-02 -0.136988E-02  0.136988E-02   46.6071       46.6085    
   9  0.440900     -0.818937     -0.183236      0.183236       46.7127       46.8960    
  10  0.861233     -0.149390     -0.334259E-01  0.334259E-01   46.5473       46.5808    
  11  0.690005     -0.371056     -0.830233E-01  0.830233E-01   46.7476       46.8306    
  12  0.192792      -1.64614     -0.368322      0.368322       46.7063       47.0746    
  13  0.975175     -0.251388E-01 -0.562476E-02  0.562476E-02   46.7800       46.7857    
  14  0.595327E-01  -2.82123     -0.631246      0.631246       46.7329       47.3642    
  15  0.142661      -1.94729     -0.435702      0.435702       46.6206       47.0563    
  16  0.141610      -1.95468     -0.437356      0.437356       46.6293       47.0667    
  17  0.976591     -0.236872E-01 -0.529998E-02  0.529998E-02   46.7917       46.7970    
  18  0.894748     -0.111213     -0.248838E-01  0.248838E-01   46.5646       46.5894    
  19  0.747310     -0.291275     -0.651723E-01  0.651723E-01   46.7470       46.8121    
  20  0.434887     -0.832670     -0.186309      0.186309       46.6693       46.8556    
  21  0.673581     -0.395146     -0.884134E-01  0.884134E-01   46.7450       46.8335    
  22  0.624944     -0.470094     -0.105183      0.105183       46.6573       46.7625    
  23  0.617967     -0.481321     -0.107695      0.107695       46.6597       46.7674    
  24  0.659853     -0.415739     -0.930209E-01  0.930209E-01   46.7417       46.8347    
  25  0.963159E-01  -2.34012     -0.523599      0.523599       46.8003       47.3239    
  26  0.179190      -1.71931     -0.384693      0.384693       46.8553       47.2400    
  27  0.251042      -1.38213     -0.309250      0.309250       46.8840       47.1933    
  28  0.116711      -2.14806     -0.480625      0.480625       46.7124       47.1930    
  29  0.890376     -0.116112     -0.259798E-01  0.259798E-01   46.7272       46.7532    
  30  0.880065E-02  -4.73293      -1.05899       1.05899       46.8239       47.8828    
  31  0.613810     -0.488070     -0.109205      0.109205       46.6736       46.7828    
  32  0.960436E-01  -2.34295     -0.524232      0.524232       46.7659       47.2902    
  33  0.768907E-02  -4.86796      -1.08920       1.08920       46.9183       48.0075    
  34  0.316163      -1.15150     -0.257645      0.257645       46.6945       46.9521    
  35  0.195769      -1.63082     -0.364893      0.364893       46.8067       47.1716    
  36  0.813020     -0.207000     -0.463158E-01  0.463158E-01   46.9009       46.9472    
  37  0.578245     -0.547758     -0.122560      0.122560       46.9697       47.0922    
  38  0.711511     -0.340365     -0.761561E-01  0.761561E-01   46.7950       46.8712    
  39  0.565886     -0.569362     -0.127394      0.127394       46.5666       46.6940    
  40  0.874556     -0.134039     -0.299910E-01  0.299910E-01   46.8362       46.8662    
  41  0.335685      -1.09158     -0.244239      0.244239       46.7662       47.0104    
  42  0.861776     -0.148759     -0.332847E-01  0.332847E-01   46.8124       46.8457    
  43  0.634500     -0.454918     -0.101787      0.101787       46.8264       46.9282    
  44  0.211879      -1.55174     -0.347200      0.347200       46.8882       47.2354    
  45  0.789454     -0.236414     -0.528973E-01  0.528973E-01   47.0152       47.0681    
  46  0.726316E-01  -2.62235     -0.586748      0.586748       46.6436       47.2304    
  47  0.344022      -1.06705     -0.238751      0.238751       46.6709       46.9096    
  48  0.367544      -1.00091     -0.223952      0.223952       46.9539       47.1778    
  49  0.634223     -0.455355     -0.101885      0.101885       46.8136       46.9155    
  50  0.462643     -0.770799     -0.172465      0.172465       46.7534       46.9258    
  51  0.904061     -0.100859     -0.225670E-01  0.225670E-01   46.9226       46.9452    
  52  0.183754      -1.69416     -0.379065      0.379065       46.9562       47.3353    
  53  0.214369      -1.54005     -0.344585      0.344585       46.9749       47.3195    
  54  0.515075     -0.663442     -0.148444      0.148444       47.0360       47.1844    
  55  0.173268      -1.75291     -0.392212      0.392212       46.9388       47.3311    
  56  0.788225     -0.237971     -0.532457E-01  0.532457E-01   46.7635       46.8167    
  57  0.657874     -0.418741     -0.936927E-01  0.936927E-01   46.9048       46.9985    
  58  0.262790      -1.33640     -0.299017      0.299017       46.8107       47.1097    
  59  0.806843     -0.214626     -0.480222E-01  0.480222E-01   47.0341       47.0821    
  60  0.121073      -2.11136     -0.472414      0.472414       46.7233       47.1957    
  61  0.928422     -0.742690E-01 -0.166176E-01  0.166176E-01   47.0647       47.0813    
  62  0.971911     -0.284914E-01 -0.637491E-02  0.637491E-02   47.1217       47.1281    
  63  0.167455      -1.78704     -0.399847      0.399847       46.7917       47.1915    
  64  0.280629E-01  -3.57331     -0.799522      0.799522       46.9700       47.7695    
  65  0.668523E-01  -2.70527     -0.605300      0.605300       46.8647       47.4700    
  66  0.714939     -0.335559     -0.750807E-01  0.750807E-01   46.7171       46.7922    
  67  0.990226     -0.982180E-02 -0.219761E-02  0.219761E-02   46.8771       46.8793    
  68  0.229020      -1.47395     -0.329793      0.329793       46.4330       46.7628    
  69  0.130543      -2.03605     -0.455563      0.455563       46.8811       47.3367    
  70  0.520653     -0.652672     -0.146034      0.146034       46.3574       46.5035    
loop,thermsimp(1:2)       91  0.185648E-01  0.208745    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    537         46.50          0.83          1.12         23.82          0.47          0.04         26.28
Just calling func    0   0         26.28


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    538         46.73          0.84          1.12         23.82          0.64          0.04         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.50
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       91
neval is:      537
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       92
neval is:      537


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      537     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858     -0.259230      0.259230       46.4456       46.7048    
   2  0.484866     -0.723883     -0.161968      0.161968       46.3574       46.5194    
   3  0.743257     -0.296713     -0.663891E-01  0.663891E-01   46.5473       46.6137    
   4  0.476659     -0.740953     -0.165787      0.165787       46.5646       46.7303    
   5  0.895662E-01  -2.41278     -0.539855      0.539855       46.6071       47.1470    
   6  0.100541      -2.29719     -0.513992      0.513992       46.5666       47.0805    
   7  0.394309     -0.930621     -0.208225      0.208225       46.7272       46.9354    
   8  0.856201     -0.155250     -0.347369E-01  0.347369E-01   46.6068       46.6416    
   9  0.903325     -0.101673     -0.227492E-01  0.227492E-01   46.6573       46.6800    
  10  0.849389     -0.163238     -0.365242E-01  0.365242E-01   46.4330       46.4695    
  11  0.245876      -1.40293     -0.313903      0.313903       46.6597       46.9736    
  12  0.535664     -0.624247     -0.139674      0.139674       46.6736       46.8133    
  13  0.509317     -0.674685     -0.150960      0.150960       46.7800       46.9310    
  14  0.103141      -2.27166     -0.508281      0.508281       46.7171       47.2254    
  15  0.822327     -0.195617     -0.437690E-01  0.437690E-01   46.7917       46.8355    
  16  0.293454      -1.22603     -0.274323      0.274323       46.7470       47.0213    
  17  0.610098E-01  -2.79672     -0.625762      0.625762       46.7635       47.3893    
  18  0.467864E-01  -3.06216     -0.685154      0.685154       46.6131       47.2983    
  19  0.888641     -0.118062     -0.264161E-01  0.264161E-01   46.5677       46.5942    
  20  0.371769     -0.989482     -0.221395      0.221395       46.7476       46.9689    
  21  0.770202     -0.261103     -0.584213E-01  0.584213E-01   46.7450       46.8035    
  22  0.752967E-01  -2.58632     -0.578685      0.578685       46.7417       47.3203    
  23  0.787365E-01  -2.54165     -0.568690      0.568690       46.8124       47.3811    
  24  0.516026     -0.661597     -0.148031      0.148031       46.6693       46.8173    
  25  0.133613      -2.01281     -0.450363      0.450363       46.8362       47.2866    
  26  0.705575     -0.348742     -0.780306E-01  0.780306E-01   46.7950       46.8731    
  27  0.747326     -0.291254     -0.651677E-01  0.651677E-01   46.6269       46.6921    
  28  0.941066E-01  -2.36333     -0.528791      0.528791       46.8771       47.4059    
  29  0.243001      -1.41469     -0.316535      0.316535       46.7127       47.0293    
  30  0.186020      -1.68190     -0.376323      0.376323       46.6709       47.0472    
  31  0.707073     -0.346621     -0.775560E-01  0.775560E-01   46.8136       46.8912    
  32  0.820399     -0.197964     -0.442941E-01  0.442941E-01   46.7534       46.7977    
  33  0.169787E-01  -4.07580     -0.911953      0.911953       46.8264       47.7383    
  34  0.196118      -1.62904     -0.364495      0.364495       46.9226       47.2871    
  35  0.910420E-01  -2.39643     -0.536198      0.536198       46.9009       47.4370    
  36  0.101963      -2.28314     -0.510850      0.510850       46.6945       47.2053    
  37  0.816143     -0.203166     -0.454580E-01  0.454580E-01   46.9048       46.9503    
  38  0.921931     -0.812847E-01 -0.181873E-01  0.181873E-01   46.7662       46.7844    
  39  0.867385     -0.142273     -0.318333E-01  0.318333E-01   46.5933       46.6252    
  40  0.534867     -0.625737     -0.140008      0.140008       46.6206       46.7606    
  41  0.354961      -1.03575     -0.231747      0.231747       46.6293       46.8611    
  42  0.707205     -0.346435     -0.775143E-01  0.775143E-01   47.0152       47.0927    
  43  0.341296      -1.07501     -0.240531      0.240531       46.7063       46.9468    
  44  0.615332     -0.485594     -0.108651      0.108651       47.0647       47.1734    
  45  0.100325      -2.29934     -0.514474      0.514474       47.0341       47.5486    
  46  0.218012      -1.52321     -0.340815      0.340815       46.9697       47.3105    
  47  0.346044      -1.06119     -0.237439      0.237439       46.8107       47.0482    
  48  0.313706      -1.15930     -0.259391      0.259391       47.1217       47.3811    
  49  0.884226     -0.123043     -0.275306E-01  0.275306E-01   46.8067       46.8342    
  50  0.562231     -0.575842     -0.128844      0.128844       46.9539       47.0827    
  51  0.208749      -1.56662     -0.350529      0.350529       47.0360       47.3865    
  52  0.553752     -0.591038     -0.132244      0.132244       46.7917       46.9239    
  53  0.389358     -0.943257     -0.211052      0.211052       46.7124       46.9235    
  54  0.290822      -1.23504     -0.276339      0.276339       46.8840       47.1603    
  55  0.592574     -0.523280     -0.117083      0.117083       46.7233       46.8404    
  56  0.816972     -0.202151     -0.452309E-01  0.452309E-01   46.6436       46.6888    
  57  0.674491     -0.393797     -0.881115E-01  0.881115E-01   46.8882       46.9764    
  58  0.136892      -1.98856     -0.444938      0.444938       46.8553       47.3002    
  59  0.783273     -0.244273     -0.546558E-01  0.546558E-01   46.6187       46.6734    
  60  0.896165     -0.109631     -0.245297E-01  0.245297E-01   46.7659       46.7905    
  61  0.268163      -1.31616     -0.294489      0.294489       46.9749       47.2694    
  62  0.773898     -0.256315     -0.573501E-01  0.573501E-01   46.8003       46.8577    
  63  0.929489     -0.731207E-01 -0.163606E-01  0.163606E-01   46.9388       46.9552    
  64  0.588680     -0.529872     -0.118558      0.118558       46.9562       47.0747    
  65  0.234390      -1.45077     -0.324607      0.324607       46.8811       47.2057    
  66  0.471928     -0.750929     -0.168019      0.168019       46.7329       46.9010    
  67  0.487657     -0.718143     -0.160683      0.160683       46.8647       47.0254    
  68  0.669180     -0.401702     -0.898802E-01  0.898802E-01   46.9700       47.0599    
  69  0.781256     -0.246852     -0.552328E-01  0.552328E-01   46.8239       46.8791    
  70  0.781840     -0.246106     -0.550658E-01  0.550658E-01   46.5034       46.5584    
loop,thermsimp(1:2)       92  0.259230      0.161968    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    539         46.54          0.82          1.11         23.82          0.59          0.04         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     46.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       92
neval is:      538
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       93
neval is:      538


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      538     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789      -1.12946       1.12946       46.4330       47.5624    
   2  0.977343     -0.229176E-01 -0.512779E-02  0.512779E-02   46.3574       46.3626    
   3  0.515611     -0.662402     -0.148211      0.148211       46.5034       46.6516    
   4  0.985018     -0.150949E-01 -0.337747E-02  0.337747E-02   46.5677       46.5711    
   5  0.909744E-01  -2.39718     -0.536365      0.536365       46.5473       47.0837    
   6  0.163485      -1.81103     -0.405216      0.405216       46.5933       46.9985    
   7  0.709610     -0.343039     -0.767545E-01  0.767545E-01   46.6068       46.6836    
   8  0.639309     -0.447368     -0.100098      0.100098       46.6187       46.7188    
   9  0.500633     -0.691882     -0.154808      0.154808       46.6573       46.8121    
  10  0.623218     -0.472859     -0.105802      0.105802       46.6436       46.7494    
  11  0.974620     -0.257075E-01 -0.575201E-02  0.575201E-02   46.6269       46.6327    
  12  0.940866     -0.609540E-01 -0.136384E-01  0.136384E-01   46.4456       46.4593    
  13  0.268848      -1.31361     -0.293918      0.293918       46.5646       46.8585    
  14  0.131404      -2.02948     -0.454092      0.454092       46.6206       47.0747    
  15  0.242045      -1.41863     -0.317417      0.317417       46.7662       47.0836    
  16  0.333489      -1.09815     -0.245709      0.245709       46.7659       47.0116    
  17  0.540917     -0.614489     -0.137491      0.137491       46.7534       46.8909    
  18  0.935945     -0.661981E-01 -0.148117E-01  0.148117E-01   46.7450       46.7599    
  19  0.948265     -0.531218E-01 -0.118859E-01  0.118859E-01   46.6736       46.6855    
  20  0.306672      -1.18198     -0.264466      0.264466       46.6693       46.9338    
  21  0.674766E-01  -2.69597     -0.603220      0.603220       46.8067       47.4099    
  22  0.304885      -1.18782     -0.265773      0.265773       46.7917       47.0575    
  23  0.987276     -0.128055E-01 -0.286520E-02  0.286520E-02   46.7233       46.7262    
  24  0.866309     -0.143514     -0.321110E-01  0.321110E-01   46.8003       46.8324    
  25  0.325072      -1.12371     -0.251428      0.251428       46.6293       46.8808    
  26  0.882651     -0.124826     -0.279296E-01  0.279296E-01   46.7950       46.8230    
  27  0.608994E-02  -5.10112      -1.14137       1.14137       46.8239       47.9652    
  28  0.956776     -0.441859E-01 -0.988652E-02  0.988652E-02   46.8136       46.8235    
  29  0.680690E-01  -2.68723     -0.601264      0.601264       46.7329       47.3342    
  30  0.870194     -0.139039     -0.311097E-01  0.311097E-01   46.7124       46.7435    
  31  0.154954      -1.86463     -0.417207      0.417207       46.7917       47.2089    
  32  0.533144     -0.628963     -0.140730      0.140730       46.7800       46.9208    
  33  0.848128     -0.164724     -0.368567E-01  0.368567E-01   46.7272       46.7640    
  34  0.302343E-01  -3.49878     -0.782846      0.782846       46.7063       47.4891    
  35  0.670768     -0.399332     -0.893499E-01  0.893499E-01   46.9048       46.9942    
  36  0.575709     -0.552152     -0.123543      0.123543       46.9388       47.0624    
  37  0.961243     -0.395278E-01 -0.884429E-02  0.884429E-02   46.7476       46.7564    
  38  0.174287      -1.74705     -0.390901      0.390901       46.6597       47.0506    
  39  0.450902     -0.796506     -0.178217      0.178217       46.8882       47.0665    
  40  0.807155     -0.214240     -0.479359E-01  0.479359E-01   46.7470       46.7949    
  41  0.245094E-01  -3.70870     -0.829815      0.829815       46.8647       47.6945    
  42  0.840819     -0.173379     -0.387932E-01  0.387932E-01   46.7127       46.7515    
  43  0.418157     -0.871899     -0.195086      0.195086       46.6709       46.8660    
  44  0.795491     -0.228796     -0.511926E-01  0.511926E-01   46.8107       46.8619    
  45  0.675445E-01  -2.69497     -0.602995      0.602995       46.9700       47.5730    
  46  0.158617      -1.84126     -0.411980      0.411980       46.9562       47.3682    
  47  0.538475     -0.619015     -0.138504      0.138504       46.5666       46.7051    
  48  0.318292      -1.14479     -0.256144      0.256144       46.9539       47.2100    
  49  0.427160     -0.850596     -0.190320      0.190320       47.0152       47.2055    
  50  0.485422     -0.722737     -0.161711      0.161711       46.6071       46.7688    
  51  0.603579     -0.504879     -0.112966      0.112966       46.8840       46.9970    
  52  0.151674      -1.88602     -0.421995      0.421995       47.0647       47.4867    
  53  0.216599      -1.52971     -0.342270      0.342270       46.6945       47.0368    
  54  0.838062     -0.176664     -0.395282E-01  0.395282E-01   46.8811       46.9207    
  55  0.728698     -0.316496     -0.708155E-01  0.708155E-01   46.7171       46.7879    
  56  0.866837     -0.142904     -0.319746E-01  0.319746E-01   46.9749       47.0069    
  57  0.921748     -0.814837E-01 -0.182319E-01  0.182319E-01   46.8362       46.8545    
  58  0.325236      -1.12320     -0.251315      0.251315       46.9226       47.1739    
  59  0.316044      -1.15187     -0.257730      0.257730       46.6131       46.8709    
  60  0.163050      -1.81370     -0.405813      0.405813       46.8553       47.2611    
  61  0.940520     -0.613225E-01 -0.137208E-01  0.137208E-01   46.9697       46.9834    
  62  0.439004     -0.823246     -0.184200      0.184200       46.7417       46.9259    
  63  0.209586      -1.56262     -0.349634      0.349634       47.1217       47.4713    
  64  0.521405     -0.651229     -0.145711      0.145711       46.8124       46.9581    
  65  0.397376     -0.922872     -0.206491      0.206491       47.0360       47.2425    
  66  0.398167     -0.920883     -0.206046      0.206046       46.7635       46.9695    
  67  0.821539     -0.196576     -0.439836E-01  0.439836E-01   46.8771       46.9211    
  68  0.652451     -0.427020     -0.955450E-01  0.955450E-01   46.9009       46.9964    
  69  0.412127     -0.886423     -0.198336      0.198336       47.0341       47.2324    
  70  0.748303E-02  -4.89512      -1.09528       1.09528       46.5382       47.6335    
loop,thermsimp(1:2)       93   1.12946      0.512779E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    540         46.63          0.82          1.11         23.83          0.51          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    541         47.84          0.84          1.12         23.80          0.45          0.04         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  540    47.845        1.243     -1.879      2.675     -102.6      1.389    
                      0.2752      1.169     -99.70      3.744     0.5890E-01

                       2.281     -1.056      1.530      7325.      3845.    

                      0.1128      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6433.      458.6    

                       1.433     -5.862     -3.854     -8.396      6.699    

                      -14.89     -3.564      2284.      0.000      8145.    



                       1893.     0.1256E+05 -671.8      7154.      3384.    

                       5878.     0.1205E-01 0.1824     0.3126E-01 0.1188    

                     -0.2486    -0.6359E-01 0.1816     0.1379     0.8555E-01



                     -0.4497    -0.7994      0.000     0.4502E-01-0.8303E-01

                      0.2253E-01 0.9581E-01-0.7116    -0.1560     0.3421E-01

                      0.5459E-01 0.1786E-02-0.6616     -1.183      7516.    



                      -1.063     -1.254     -2.220     -2.331    -0.3807    

                     -0.3252      9.230      8.640    -0.1937E+05 -4.000    

                     -0.5493     -2.209      9.296      8.872    -0.1908E+05



                      -4.000     0.3689    -0.3806      8.655      9.069    

                     -0.1908E+05 -7.000    -0.6870    -0.6776      9.030    

                       8.796    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     46.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       93
neval is:      540
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       94
neval is:      540


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      540     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831     -0.196413      0.196413       46.3574       46.5539    
   2  0.262668E-01  -3.63945     -0.814321      0.814321       46.4456       47.2599    
   3  0.620248     -0.477636     -0.106870      0.106870       46.5677       46.6746    
   4  0.249183      -1.38957     -0.310914      0.310914       46.6269       46.9379    
   5  0.999872     -0.128438E-03 -0.287377E-04  0.287377E-04   46.5034       46.5034    
   6  0.933252     -0.690802E-01 -0.154566E-01  0.154566E-01   46.6068       46.6223    
   7  0.857047     -0.154263     -0.345161E-01  0.345161E-01   46.6736       46.7081    
   8  0.365787      -1.00570     -0.225025      0.225025       46.5666       46.7916    
   9  0.499682     -0.693784     -0.155233      0.155233       46.6187       46.7739    
  10  0.761560     -0.272387     -0.609461E-01  0.609461E-01   46.7233       46.7843    
  11  0.793904E-01  -2.53338     -0.566839      0.566839       46.7124       47.2793    
  12  0.514449     -0.664659     -0.148716      0.148716       46.6436       46.7923    
  13  0.678176     -0.388349     -0.868925E-01  0.868925E-01   46.7127       46.7996    
  14  0.257558      -1.35651     -0.303517      0.303517       46.7476       47.0511    
  15  0.832067E-01  -2.48643     -0.556334      0.556334       46.7450       47.3014    
  16  0.272851      -1.29883     -0.290611      0.290611       46.7272       47.0178    
  17  0.255245      -1.36553     -0.305536      0.305536       46.6071       46.9126    
  18  0.419883     -0.867779     -0.194164      0.194164       46.7171       46.9113    
  19  0.870346     -0.138865     -0.310708E-01  0.310708E-01   46.7470       46.7780    
  20  0.814510E-01  -2.50775     -0.561106      0.561106       46.6573       47.2184    
  21  0.560000     -0.579819     -0.129734      0.129734       46.7950       46.9248    
  22  0.860285     -0.150492     -0.336723E-01  0.336723E-01   46.8136       46.8473    
  23  0.538601     -0.618780     -0.138451      0.138451       46.8003       46.9388    
  24  0.542321     -0.611898     -0.136911      0.136911       46.8362       46.9732    
  25  0.836575     -0.178440     -0.399256E-01  0.399256E-01   46.5646       46.6045    
  26  0.705694     -0.348574     -0.779929E-01  0.779929E-01   46.8107       46.8887    
  27  0.301063      -1.20043     -0.268595      0.268595       46.6709       46.9395    
  28  0.125899      -2.07227     -0.463668      0.463668       46.6131       47.0768    
  29  0.476747     -0.740770     -0.165746      0.165746       46.6293       46.7951    
  30  0.676103     -0.391410     -0.875773E-01  0.875773E-01   46.7534       46.8410    
  31  0.385349     -0.953606     -0.213368      0.213368       46.8811       47.0945    
  32  0.141470      -1.95567     -0.437577      0.437577       46.7800       47.2176    
  33  0.146971      -1.91752     -0.429043      0.429043       46.8771       47.3062    
  34  0.616396     -0.483866     -0.108264      0.108264       46.7417       46.8499    
  35  0.962361     -0.383659E-01 -0.858432E-02  0.858432E-02   46.6693       46.6779    
  36  0.618266     -0.480836     -0.107586      0.107586       46.8124       46.9200    
  37  0.369072     -0.996763     -0.223024      0.223024       46.7635       46.9865    
  38  0.312675      -1.16259     -0.260128      0.260128       46.9697       47.2298    
  39  0.367326      -1.00150     -0.224085      0.224085       46.9048       47.1289    
  40  0.184422      -1.69053     -0.378253      0.378253       46.9009       47.2791    
  41  0.113088      -2.17959     -0.487680      0.487680       46.8840       47.3717    
  42  0.333487      -1.09815     -0.245710      0.245710       46.5933       46.8390    
  43  0.407562     -0.897562     -0.200828      0.200828       46.9749       47.1758    
  44  0.443434     -0.813206     -0.181954      0.181954       46.7659       46.9479    
  45  0.265046      -1.32785     -0.297105      0.297105       46.6945       46.9916    
  46  0.444603     -0.810573     -0.181364      0.181364       46.6597       46.8411    
  47  0.689395E-01  -2.67453     -0.598421      0.598421       46.7917       47.3902    
  48  0.862417     -0.148017     -0.331185E-01  0.331185E-01   46.9388       46.9720    
  49  0.541063     -0.614219     -0.137430      0.137430       46.8882       47.0257    
  50  0.885208     -0.121933     -0.272823E-01  0.272823E-01   46.6206       46.6479    
  51  0.808718     -0.212305     -0.475029E-01  0.475029E-01   46.7662       46.8137    
  52  0.238877E-01  -3.73439     -0.835564      0.835564       46.5473       47.3829    
  53  0.428951     -0.846414     -0.189384      0.189384       46.9226       47.1120    
  54  0.860433     -0.150319     -0.336337E-01  0.336337E-01   47.0152       47.0488    
  55  0.367713      -1.00045     -0.223850      0.223850       46.7917       47.0155    
  56  0.782210     -0.245632     -0.549598E-01  0.549598E-01   46.9539       47.0088    
  57  0.916512E-01  -2.38976     -0.534706      0.534706       47.0341       47.5688    
  58  0.230050      -1.46946     -0.328789      0.328789       47.0360       47.3647    
  59  0.715909     -0.334202     -0.747772E-01  0.747772E-01   46.8553       46.9301    
  60  0.992857E-01  -2.30975     -0.516804      0.516804       46.7329       47.2497    
  61  0.697124     -0.360791     -0.807265E-01  0.807265E-01   46.9562       47.0369    
  62  0.232699      -1.45801     -0.326228      0.326228       46.8067       47.1329    
  63  0.134492      -2.00625     -0.448896      0.448896       47.1217       47.5706    
  64  0.778931     -0.249833     -0.558997E-01  0.558997E-01   47.0647       47.1206    
  65  0.248765      -1.39125     -0.311289      0.311289       46.7063       47.0176    
  66  0.317309      -1.14788     -0.256836      0.256836       46.4330       46.6898    
  67  0.555562     -0.587775     -0.131514      0.131514       46.9700       47.1015    
  68  0.924692     -0.782950E-01 -0.175184E-01  0.175184E-01   46.5382       46.5558    
  69  0.930266     -0.722849E-01 -0.161736E-01  0.161736E-01   46.8647       46.8809    
  70  0.839348     -0.175130     -0.391850E-01  0.391850E-01   46.6316       46.6708    
loop,thermsimp(1:2)       94  0.196413      0.814321    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    542         47.23          0.83          1.11         23.84          0.49          0.04         26.31
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     47.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       94
neval is:      541
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    14.3199      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.223748               553
loop is:       95
neval is:      541


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      553
neval,tstepnext:      541     553

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797     -0.274756      0.274756       46.5034       46.7781    
   2  0.225242      -1.49058     -0.333515      0.333515       46.3574       46.6910    
   3  0.946430E-01  -2.35764     -0.527519      0.527519       46.5382       47.0658    
   4  0.371694     -0.989684     -0.221440      0.221440       46.5646       46.7860    
   5  0.933291     -0.690381E-01 -0.154472E-01  0.154472E-01   46.6068       46.6223    
   6  0.926571     -0.762651E-01 -0.170642E-01  0.170642E-01   46.6206       46.6377    
   7  0.138048      -1.98015     -0.443056      0.443056       46.6316       47.0747    
   8  0.113008E-01  -4.48288      -1.00304       1.00304       46.5677       47.5708    
   9  0.405736     -0.902053     -0.201833      0.201833       46.6693       46.8711    
  10  0.390885     -0.939341     -0.210176      0.210176       46.4330       46.6432    
  11  0.873008     -0.135810     -0.303873E-01  0.303873E-01   46.6736       46.7040    
  12  0.945037     -0.565316E-01 -0.126489E-01  0.126489E-01   46.6187       46.6313    
  13  0.642194E-01  -2.74545     -0.614290      0.614290       46.7470       47.3612    
  14  0.322052E-01  -3.43563     -0.768716      0.768716       46.7233       47.4920    
  15  0.521559     -0.650933     -0.145645      0.145645       46.5666       46.7122    
  16  0.271788      -1.30273     -0.291485      0.291485       46.6436       46.9351    
  17  0.153503      -1.87403     -0.419312      0.419312       46.6293       47.0486    
  18  0.219303      -1.51730     -0.339494      0.339494       46.7127       47.0522    
  19  0.476616     -0.741044     -0.165807      0.165807       46.7662       46.9320    
  20  0.510024     -0.673297     -0.150649      0.150649       46.5933       46.7440    
  21  0.393388     -0.932959     -0.208748      0.208748       46.7534       46.9621    
  22  0.947927     -0.534776E-01 -0.119655E-01  0.119655E-01   46.6597       46.6717    
  23  0.472009     -0.750758     -0.167981      0.167981       46.8136       46.9816    
  24  0.678717     -0.387551     -0.867139E-01  0.867139E-01   46.7417       46.8284    
  25  0.617620     -0.481882     -0.107820      0.107820       46.8647       46.9725    
  26  0.138594E-01  -4.27879     -0.957373      0.957373       46.8107       47.7681    
  27  0.588445     -0.530273     -0.118648      0.118648       46.7171       46.8357    
  28  0.950805     -0.504465E-01 -0.112873E-01  0.112873E-01   46.6071       46.6184    
  29  0.444108     -0.811687     -0.181614      0.181614       46.8124       46.9940    
  30  0.299195      -1.20666     -0.269988      0.269988       46.7950       47.0650    
  31  0.808517E-01  -2.51514     -0.562758      0.562758       46.8553       47.4180    
  32  0.493903     -0.705415     -0.157836      0.157836       46.6269       46.7848    
  33  0.973584     -0.267710E-01 -0.598996E-02  0.598996E-02   46.8003       46.8063    
  34  0.219889      -1.51463     -0.338897      0.338897       46.6709       47.0098    
  35  0.872114     -0.136835     -0.306167E-01  0.306167E-01   46.7659       46.7965    
  36  0.413991     -0.881912     -0.197326      0.197326       46.9388       47.1362    
  37  0.155656      -1.86011     -0.416197      0.416197       46.8362       47.2524    
  38  0.744603     -0.294905     -0.659845E-01  0.659845E-01   46.7635       46.8295    
  39  0.627736     -0.465635     -0.104185      0.104185       46.6945       46.7987    
  40  0.137880      -1.98137     -0.443328      0.443328       46.9539       47.3972    
  41  0.270817      -1.30631     -0.292285      0.292285       46.7917       47.0840    
  42  0.271872      -1.30243     -0.291416      0.291416       46.7063       46.9977    
  43  0.988104     -0.119670E-01 -0.267759E-02  0.267759E-02   46.7272       46.7299    
  44  0.837729E-01  -2.47965     -0.554817      0.554817       46.8882       47.4431    
  45  0.731806     -0.312240     -0.698633E-01  0.698633E-01   46.9562       47.0261    
  46  0.520356     -0.653242     -0.146162      0.146162       47.0152       47.1613    
  47  0.158934      -1.83927     -0.411533      0.411533       46.7476       47.1591    
  48  0.724534     -0.322226     -0.720977E-01  0.720977E-01   46.6131       46.6852    
  49  0.895315     -0.110580     -0.247420E-01  0.247420E-01   46.8811       46.9059    
  50  0.850194     -0.162291     -0.363123E-01  0.363123E-01   46.9700       47.0063    
  51  0.428755     -0.846869     -0.189486      0.189486       46.9226       47.1121    
  52  0.523907     -0.646440     -0.144640      0.144640       47.0647       47.2094    
  53  0.358551      -1.02568     -0.229495      0.229495       46.9048       47.1343    
  54  0.680509     -0.384914     -0.861239E-01  0.861239E-01   46.8067       46.8928    
  55  0.607274     -0.498775     -0.111600      0.111600       46.9749       47.0865    
  56  0.591502     -0.525090     -0.117488      0.117488       46.7800       46.8975    
  57  0.121812      -2.10527     -0.471052      0.471052       46.6573       47.1283    
  58  0.812950     -0.207086     -0.463351E-01  0.463351E-01   46.9697       47.0160    
  59  0.915745     -0.880175E-01 -0.196938E-01  0.196938E-01   46.7329       46.7526    
  60  0.596748     -0.516260     -0.115512      0.115512       46.4456       46.5611    
  61  0.229246      -1.47296     -0.329573      0.329573       46.9009       47.2304    
  62  0.706979     -0.346754     -0.775856E-01  0.775856E-01   46.7124       46.7900    
  63  0.879114     -0.128841     -0.288279E-01  0.288279E-01   46.7450       46.7739    
  64  0.529368     -0.636072     -0.142320      0.142320       46.8771       47.0194    
  65  0.193084      -1.64463     -0.367984      0.367984       47.0360       47.4039    
  66  0.179439      -1.71792     -0.384382      0.384382       46.8840       47.2684    
  67  0.945530     -0.560096E-01 -0.125321E-01  0.125321E-01   46.5473       46.5599    
  68  0.486508     -0.720502     -0.161211      0.161211       46.7917       46.9529    
  69  0.131906      -2.02566     -0.453239      0.453239       47.0341       47.4873    
  70  0.203721      -1.59100     -0.355985      0.355985       47.2292       47.5851    
loop,thermsimp(1:2)       95  0.274756      0.333515    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    543         46.73          0.80          1.11         23.82          0.52          0.04         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     46.73
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.223748               553
loop is:       95
neval is:      542
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =  0.162147    

hmean,hstd :    46.7555      0.162147    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    46.7555      0.162147    
h(1),h(best1),h(np1) :    46.5473       46.3574       46.7314    
htherm(1),htherm(best1),htherm(np1) :    46.5599       46.6910       47.7681    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    544         46.70          0.83          1.12         23.79          0.48          0.04         26.25

 EVIDENCE OF CONVERGENCE

 Centroid of last simplex =
    1.2115      -1.8432       2.6944      -102.61       1.3974      0.27132    

    1.2345      -99.703       3.7475      0.15270E-01   2.2282      -1.0453    

    1.5304       7200.3       3549.1     -0.54068E-02   0.0000       0.0000    

    0.0000      -1.2210     -0.50000       0.0000       0.0000       6182.4    


    599.33       1.4328      -5.8607      -4.0522      -8.3939       6.7100    

   -14.917      -3.6206       6869.4       0.0000       10129.       1675.1    

    12264.      -528.20       7636.8       4291.8       5429.9      0.10259E-01

   0.17711      0.17897E-01  0.12302     -0.24859     -0.75491E-01  0.18396    


   0.12600      0.73645E-01 -0.46608     -0.78207       0.0000      0.67843E-01

  -0.75964E-01  0.59606E-03  0.10450     -0.71156     -0.15426      0.42064E-01

   0.52993E-01 -0.87230E-02 -0.66833      -1.1949       7208.4      -1.0874    

   -1.2398      -2.2277      -2.3379     -0.38066     -0.32524       9.2327    


    8.6473      -18978.      -4.0000     -0.59419      -2.1758       9.2984    

    8.8710      -19076.      -4.0000      0.40279     -0.42029       8.8608    

    9.0631      -19076.      -7.0000     -0.72670     -0.67814       9.0358    

    8.7839      -19076.      -7.0000    
 Function value at centroid =   46.7019    

 Minimum found after  543 function evaluations

 Minimum at
   1.21147     -1.84319      2.69441     -102.605      1.39736     0.271325    

   1.23452     -99.7026      3.74753     0.152698E-01  2.22825     -1.04533    

   1.53040      7200.27      3549.12    -0.540683E-02  0.00000      0.00000    

   0.00000     -1.22100    -0.500000      0.00000      0.00000      6182.42    


   599.332      1.43276     -5.86072     -4.05220     -8.39395      6.71004    

  -14.9165     -3.62061      6869.42      0.00000      10129.4      1675.15    

   12263.8     -528.197      7636.82      4291.80      5429.91     0.102593E-01

  0.177113     0.178968E-01 0.123020    -0.248587    -0.754911E-01 0.183963    


  0.125996     0.736455E-01-0.466077    -0.782072      0.00000     0.678425E-01

 -0.759644E-01 0.596058E-03 0.104499    -0.711560    -0.154264     0.420643E-01

  0.529925E-01-0.872295E-02-0.668332     -1.19488      7208.40     -1.08744    

  -1.23978     -2.22766     -2.33792    -0.380664    -0.325238      9.23267    


   8.64731     -18978.3     -4.00000    -0.594189     -2.17576      9.29843    

   8.87097     -19075.9     -4.00000     0.402793    -0.420288      8.86081    

   9.06308     -19075.9     -7.00000    -0.726704    -0.678142      9.03580    

   8.78392     -19075.9     -7.00000    
 Function value at minimum =   46.7019    
 out of minim now and here is ifault            0
run time:       14340.85
