nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    17.2889      0.500000    
Tfreq:   51
nop,maxfn,iprint,nloop,iquad:   938000  20  95   1
stopcr,simp:    20.0000       0.00000    
T0,Tstep:    17.2889      0.500000    
Tfreq:   51
 Estimating   51 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2         57.63          3.87          1.02         23.48          1.01          0.04         29.41
iter,obj,time:      3         57.98          1.22          1.05         23.93          0.17          0.06         26.43
iter,obj,time:      4         57.64          1.22          1.05         23.91          0.15          0.06         26.39
iter,obj,time:      5         59.68          1.20          1.04         23.91          0.24          0.06         26.45
iter,obj,time:      6         57.62          1.23          1.06         23.91          0.18          0.06         26.45
iter,obj,time:      7         58.37          1.25          1.05         23.88          0.20          0.06         26.45
iter,obj,time:      8        361.49          1.24          1.06         23.93          0.18          0.06         26.46
iter,obj,time:      9         58.70          1.24          1.05         23.97          0.18          0.06         26.50
iter,obj,time:     10         57.92          1.23          1.05         23.89          0.18          0.06         26.42
iter,obj,time:     11         57.91          1.23          1.05         24.11          0.08          0.05         26.52
iter,obj,time:     12         57.00          1.16          1.02         23.97          0.23          0.06         26.45
iter,obj,time:     13         57.04          1.23          1.06         24.02          0.05          0.06         26.42
iter,obj,time:     14         57.63          1.24          1.05         24.01          0.13          0.06         26.50
iter,obj,time:     15        734.97          1.23          1.06         24.11          0.04          0.06         26.50
iter,obj,time:     16         57.67          1.19          1.05         24.18          0.00          0.06         26.48
iter,obj,time:     17         57.46          1.24          1.06         24.05          0.09          0.05         26.50
iter,obj,time:     18         57.63          1.19          1.02         24.05          0.18          0.06         26.51
iter,obj,time:     19         57.85          1.17          1.05         24.02          0.07          0.05         26.36
iter,obj,time:     20         60.47          1.05          1.02         24.13          0.19          0.06         26.46
iter,obj,time:     21         60.32          1.24          1.05         24.06          0.07          0.04         26.46
iter,obj,time:     22         52.59          1.00          1.00         23.77          0.58          0.05         26.40
iter,obj,time:     23         57.57          1.18          1.02         23.94          0.28          0.05         26.46
iter,obj,time:     24         56.50          0.98          1.01         23.91          0.38          0.05         26.34
iter,obj,time:     25         57.64          1.01          1.01         23.84          0.37          0.04         26.27
iter,obj,time:     26         58.38          0.97          1.00         23.76          0.55          0.05         26.33
iter,obj,time:     27         58.49          0.96          1.01         23.97          0.30          0.05         26.29
iter,obj,time:     28         57.51          1.11          1.02         24.05          0.23          0.06         26.46
iter,obj,time:     29         58.11          1.21          1.05         24.04          0.15          0.05         26.51
iter,obj,time:     30         60.15          0.95          1.00         24.09          0.32          0.05         26.41
iter,obj,time:     31         60.70          1.00          1.01         24.02          0.33          0.05         26.41
iter,obj,time:     32         59.43          0.98          1.00         24.08          0.29          0.05         26.41
iter,obj,time:     33         60.73          1.04          1.03         24.06          0.26          0.05         26.44
iter,obj,time:     34         58.58          0.99          1.03         24.09          0.23          0.05         26.39
iter,obj,time:     35         58.27          0.97          1.01         24.08          0.33          0.05         26.44
iter,obj,time:     36         63.48          1.03          1.03         24.20          0.09          0.05         26.39
iter,obj,time:     37         61.72          1.04          1.04         24.10          0.05          0.05         26.29
iter,obj,time:     38         58.16          0.96          1.02         24.04          0.27          0.05         26.34
iter,obj,time:     39         59.64          1.14          1.05         24.21          0.04          0.05         26.48
iter,obj,time:     40         54.65          0.96          1.01         24.05          0.36          0.05         26.44
iter,obj,time:     41         63.11          0.95          1.02         24.02          0.31          0.05         26.35
iter,obj,time:     42         58.85          1.15          1.04         24.11          0.05          0.05         26.40
iter,obj,time:     43         57.51          1.02          1.04         24.13          0.08          0.05         26.32
iter,obj,time:     44         55.03          1.00          1.02         24.19          0.09          0.05         26.35
iter,obj,time:     45         58.92          0.99          1.01         24.07          0.34          0.05         26.46
iter,obj,time:     46         65.85          1.02          1.02         24.14          0.12          0.05         26.36
iter,obj,time:     47         58.02          1.05          1.01         23.89          0.39          0.06         26.39
iter,obj,time:     48         54.66          1.23          1.05         24.14          0.12          0.06         26.60
iter,obj,time:     49         61.47          1.21          1.06         24.21          0.12          0.06         26.66
iter,obj,time:     50         54.74          1.24          1.04         24.05          0.09          0.05         26.47
iter,obj,time:     51         57.39          1.19          1.04         24.08          0.10          0.06         26.47
iter,obj,time:     52         54.56          1.22          1.05         24.16          0.07          0.06         26.55
iter,obj,time:     53         60.12          1.24          1.05         24.04          0.15          0.06         26.54

    1    57.630        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    2    57.984        1.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    3    57.638        2.989     -2.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    4    59.680        2.989     -1.297      4.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    5    57.624        2.989     -1.297      5.132     -100.0     0.2964    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    6    58.365        2.989     -1.297      5.132     -100.0      1.296    
                      -1.602      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    7    361.49        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      1.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    8    58.698        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      1.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

    9    57.920        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578     0.2605    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   10    57.912        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                      0.4448    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   11    57.002        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445     -1.825      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   12    57.041        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                     -0.4674      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   13    57.634        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -1.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   14    734.97        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     0.6208     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   15    57.673        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -2.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   16    57.465        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472    -0.8138E-01
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   17    57.630        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -10.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   18    57.845        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -1.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   19    60.473        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5556     0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   20    60.323        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.5105      0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   21    52.586        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.3670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   22    57.574        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                      0.2912    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   23    56.504        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088     0.2012    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   24    57.640        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988     0.3415    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   25    58.379        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585     0.3386    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   26    58.488        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614     0.4238    

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   27    57.506        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                     -0.1704    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   28    58.106        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170     0.3045      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   29    60.149        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000     0.4620    -0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   30    60.703        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01 0.4650    
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   31    59.431        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01 0.4584    -0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   32    60.728        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01 0.4300    -0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   33    58.583        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01 0.3009    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   34    58.267        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991     0.3131    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   35    63.482        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.6441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   36    61.717        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.5634    -0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   37    58.162        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01 0.8615    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   38    59.643        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385     0.7823E-01  0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   39    54.647        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.569      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   40    63.106        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.619     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   41    58.848        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                       1.115     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   42    57.509        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853      1.512      9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   43    55.034        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.505      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   44    58.922        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      9.023     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   45    65.849        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000      1.393    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   46    58.018        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071     0.9625      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   47    54.665        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      9.274      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   48    61.469        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.515    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   49    54.737        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000      1.333    -0.5843      9.534    
                       8.778     -3546.     -2.000    

   50    57.393        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667     0.9157      9.534    
                       8.778     -3546.     -2.000    

   51    54.563        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      10.03    
                       8.778     -3546.     -2.000    

   52    60.122        2.989     -1.297      5.132     -100.0      1.296    
                     -0.6018      2.590     -100.0      2.578      1.260    
                       1.445    -0.8249      1.841      0.000      0.000    
                      -1.467      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.323     -2.379     -5.472     -3.081    
                      -14.09     -2.565      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5559E-01 0.1048E-01  0.000    -0.8670    
                     -0.2088    -0.2988    -0.1585    -0.1614    -0.7621E-01

                      -1.170    -0.6955      0.000    -0.3800E-01-0.3504E-01
                      0.8541E-01-0.4157E-01-0.6997E-01-0.1991    -0.1869    
                      0.1441     0.6343E-01-0.1385    -0.9218      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.069      9.119     -7039.     -4.000    
                     -0.3853     0.1210E-01  9.005      8.523     -4904.    

                      -4.000    -0.1071    -0.5375      8.774      9.015    
                      -6912.     -4.000    -0.1667    -0.5843      9.534    
                       9.278     -3546.     -2.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          52          52

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.2889               103
loop is:        1
neval is:       52


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       52     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -25.5170       25.5170       57.6298       83.1468    
   2  0.709707     -0.342904      -5.92844       5.92844       57.9836       63.9120    
   3  0.151889      -1.88460      -32.5828       32.5828       57.6377       90.2205    
   4  0.456170E-01  -3.08747      -53.3792       53.3792       59.6803       113.059    
   5  0.882557     -0.124932      -2.15994       2.15994       57.6243       59.7842    
   6  0.711292     -0.340672      -5.88986       5.88986       58.3654       64.2552    
   7  0.241669      -1.42019      -24.5535       24.5535       361.491       386.045    
   8  0.682871     -0.381450      -6.59486       6.59486       58.6979       65.2928    
   9  0.500657     -0.691834      -11.9611       11.9611       57.9204       69.8815    
  10  0.494633     -0.703939      -12.1704       12.1704       57.9119       70.0822    
  11  0.437126     -0.827535      -14.3072       14.3072       57.0015       71.3087    
  12  0.462981     -0.770069      -13.3137       13.3137       57.0414       70.3551    
  13  0.988878     -0.111840E-01 -0.193359      0.193359       57.6342       57.8275    
  14  0.878158     -0.129929      -2.24634       2.24634       734.969       737.216    
  15  0.825605     -0.191638      -3.31323       3.31323       57.6732       60.9865    
  16  0.966665     -0.339033E-01 -0.586153      0.586153       57.4648       58.0510    
  17  0.340930      -1.07608      -18.6042       18.6042       57.6298       76.2341    
  18  0.288920      -1.24161      -21.4661       21.4661       57.8450       79.3111    
  19  0.442843     -0.814539      -14.0825       14.0825       60.4725       74.5551    
  20  0.878635     -0.129386      -2.23694       2.23694       60.3225       62.5595    
  21  0.198777E-01  -3.91816      -67.7408       67.7408       52.5860       120.327    
  22  0.315829      -1.15255      -19.9264       19.9264       57.5736       77.5001    
  23  0.208690      -1.56690      -27.0901       27.0901       56.5045       83.5946    
  24  0.849393     -0.163234      -2.82214       2.82214       57.6405       60.4626    
  25  0.945818     -0.557056E-01 -0.963091      0.963091       58.3794       59.3425    
  26  0.567839     -0.565917      -9.78411       9.78411       58.4876       68.2717    
  27  0.718388     -0.330745      -5.71823       5.71823       57.5064       63.2247    
  28  0.115406      -2.15930      -37.3320       37.3320       58.1064       95.4384    
  29  0.659869E-01  -2.71830      -46.9965       46.9965       60.1493       107.146    
  30  0.171393      -1.76380      -30.4942       30.4942       60.7031       91.1973    
  31  0.161953      -1.82045      -31.4737       31.4737       59.4310       90.9047    
  32  0.455406     -0.786566      -13.5989       13.5989       60.7280       74.3269    
  33  0.788693     -0.237378      -4.10401       4.10401       58.5833       62.6873    
  34  0.157754      -1.84672      -31.9278       31.9278       58.2671       90.1950    
  35  0.126279      -2.06926      -35.7753       35.7753       63.4817       99.2570    
  36  0.646962     -0.435467      -7.52877       7.52877       61.7167       69.2455    
  37  0.730769     -0.313658      -5.42281       5.42281       58.1621       63.5849    
  38  0.443446E-01  -3.11577      -53.8683       53.8683       59.6428       113.511    
  39  0.219048      -1.51847      -26.2527       26.2527       54.6474       80.9001    
  40  0.311223E-01  -3.46983      -59.9897       59.9897       63.1059       123.096    
  41  0.864417     -0.145700      -2.51900       2.51900       58.8479       61.3669    
  42  0.372606     -0.987233      -17.0682       17.0682       57.5094       74.5776    
  43  0.599250E-01  -2.81466      -48.6625       48.6625       55.0342       103.697    
  44  0.250528      -1.38418      -23.9311       23.9311       58.9224       82.8535    
  45  0.404968E-01  -3.20653      -55.4376       55.4376       65.8487       121.286    
  46  0.792822     -0.232156      -4.01373       4.01373       58.0182       62.0319    
  47  0.826691     -0.190324      -3.29050       3.29050       54.6648       57.9553    
  48  0.258424      -1.35316      -23.3946       23.3946       61.4687       84.8633    
  49  0.713620     -0.337405      -5.83338       5.83338       54.7371       60.5704    
  50  0.936186     -0.659413E-01  -1.14005       1.14005       57.3931       58.5331    
  51  0.655367E-01  -2.72514      -47.1149       47.1149       54.5627       101.678    
  52  0.178790      -1.72154      -29.7637       29.7637       60.1220       89.8857    
loop,thermsimp(1:2)        1   25.5170       5.92844    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     54         56.67          1.19          1.00         24.05          0.22          0.07         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     55         56.28          1.04          1.00         24.12          0.12          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     56.28
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.2889               103
loop is:        1
neval is:       54
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.2889               103
loop is:        2
neval is:       54


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       54     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -18.0158       18.0158       57.6342       75.6500    
   2  0.440787     -0.819193      -14.1630       14.1630       54.6648       68.8278    
   3  0.685789     -0.377185      -6.52113       6.52113       57.4648       63.9859    
   4  0.673104     -0.395856      -6.84393       6.84393       57.3931       64.2370    
   5  0.655536     -0.422301      -7.30115       7.30115       58.3794       65.6806    
   6  0.422838     -0.860766      -14.8817       14.8817       57.6243       72.5060    
   7  0.300870      -1.20108      -20.7654       20.7654       57.6405       78.4059    
   8  0.776987     -0.252331      -4.36254       4.36254       54.7371       59.0996    
   9  0.170551      -1.76872      -30.5793       30.5793       57.6732       88.2526    
  10  0.587497     -0.531884      -9.19572       9.19572       58.8479       68.0436    
  11  0.250425      -1.38459      -23.9382       23.9382       58.0182       81.9564    
  12  0.776362E-01  -2.55572      -44.1857       44.1857       60.3225       104.508    
  13  0.766647     -0.265729      -4.59417       4.59417       58.5833       63.1775    
  14  0.480193     -0.733568      -12.6826       12.6826       57.5064       70.1890    
  15  0.434643     -0.833231      -14.4057       14.4057       58.1621       72.5678    
  16  0.815924E-01  -2.50602      -43.3264       43.3264       57.9836       101.310    
  17  0.724257E-01  -2.62519      -45.3868       45.3868       58.3654       103.752    
  18  0.573795     -0.555483      -9.60372       9.60372       58.6979       68.3017    
  19  0.196096      -1.62915      -28.1663       28.1663       58.4876       86.6539    
  20  0.240673      -1.42432      -24.6249       24.6249       61.7167       86.3416    
  21  0.194228      -1.63872      -28.3318       28.3318       57.9204       86.2522    
  22  0.236387      -1.44229      -24.9356       24.9356       57.9119       82.8475    
  23  0.261662      -1.34070      -23.1793       23.1793       57.0414       80.2207    
  24  0.146321      -1.92195      -33.2286       33.2286       57.0015       90.2301    
  25  0.169637      -1.77410      -30.6723       30.6723       60.7280       91.4002    
  26  0.886717     -0.120229      -2.07863       2.07863       60.4725       62.5512    
  27  0.253412      -1.37274      -23.7332       23.7332       57.5094       81.2426    
  28  0.470820     -0.753279      -13.0234       13.0234       57.6298       70.6532    
  29  0.329871      -1.10905      -19.1744       19.1744       57.5736       76.7480    
  30  0.726784     -0.319126      -5.51735       5.51735       57.8450       63.3624    
  31  0.612351     -0.490450      -8.47937       8.47937       54.6474       63.1268    
  32  0.146573      -1.92023      -33.1988       33.1988       58.9224       92.1212    
  33  0.812633     -0.207476      -3.58704       3.58704       57.6298       61.2169    
  34  0.486789     -0.719925      -12.4467       12.4467       56.5045       68.9512    
  35  0.653508     -0.425400      -7.35472       7.35472       61.4687       68.8234    
  36  0.180127      -1.71409      -29.6349       29.6349       60.1220       89.7569    
  37  0.155218      -1.86292      -32.2080       32.2080       58.2671       90.4751    
  38  0.830615     -0.185589      -3.20863       3.20863       57.6377       60.8464    
  39  0.728345     -0.316980      -5.48025       5.48025       59.4310       64.9113    
  40  0.262318      -1.33820      -23.1360       23.1360       60.7031       83.8391    
  41  0.234222      -1.45148      -25.0946       25.0946       58.1064       83.2011    
  42  0.250201      -1.38549      -23.9537       23.9537       63.4817       87.4354    
  43  0.898433     -0.107103      -1.85170       1.85170       54.5627       56.4144    
  44  0.580277     -0.544250      -9.40952       9.40952       55.0342       64.4437    
  45  0.823617     -0.194050      -3.35491       3.35491       60.1493       63.5042    
  46  0.820676     -0.197627      -3.41676       3.41676       59.6803       63.0970    
  47  0.502494     -0.688171      -11.8977       11.8977       59.6428       71.5405    
  48  0.751016     -0.286329      -4.95033       4.95033       52.5860       57.5363    
  49  0.360461      -1.02037      -17.6411       17.6411       65.8487       83.4898    
  50  0.948712     -0.526497E-01 -0.910258      0.910258       63.1059       64.0162    
  51  0.452918     -0.792045      -13.6936       13.6936       361.491       375.185    
  52  0.182886      -1.69889      -29.3721       29.3721       56.2779       85.6500    
loop,thermsimp(1:2)        2   18.0158       14.1630    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     56         58.13          1.22          1.00         23.95          0.22          0.07         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     57         58.06          1.02          1.00         24.00          0.14          0.06         26.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     58.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.2889               103
loop is:        2
neval is:       56
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.2889               103
loop is:        3
neval is:       56


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      103
neval,tstepnext:       56     103

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -30.8504       30.8504       54.5627       85.4131    
   2  0.274399      -1.29317      -22.3576       22.3576       52.5860       74.9436    
   3  0.597410E-01  -2.81774      -48.7157       48.7157       54.7371       103.453    
   4  0.283115E-01  -3.56449      -61.6262       61.6262       57.6377       119.264    
   5  0.901069     -0.104174      -1.80106       1.80106       57.6298       59.4309    
   6  0.717939     -0.331371      -5.72906       5.72906       60.4725       66.2016    
   7  0.294866      -1.22123      -21.1138       21.1138       59.6803       80.7941    
   8  0.935651     -0.665127E-01  -1.14993       1.14993       54.6474       55.7973    
   9  0.314362      -1.15721      -20.0069       20.0069       58.5833       78.5903    
  10  0.807729     -0.213529      -3.69169       3.69169       57.8450       61.5367    
  11  0.757191     -0.278140      -4.80874       4.80874       60.1493       64.9581    
  12  0.508654     -0.675987      -11.6871       11.6871       57.4648       69.1519    
  13  0.722060     -0.325647      -5.63009       5.63009       63.1059       68.7360    
  14  0.424032     -0.857947      -14.8330       14.8330       57.3931       72.2261    
  15  0.786154     -0.240602      -4.15976       4.15976       55.0342       59.1940    
  16  0.399894     -0.916557      -15.8463       15.8463       59.4310       75.2773    
  17  0.757416     -0.277843      -4.80362       4.80362       58.3794       63.1830    
  18  0.637270     -0.450563      -7.78975       7.78975       58.8479       66.6377    
  19  0.586055     -0.534342      -9.23821       9.23821       58.6979       67.9362    
  20  0.821724     -0.196351      -3.39470       3.39470       61.4687       64.8634    
  21  0.921558     -0.816897E-01  -1.41233       1.41233       54.6648       56.0771    
  22  0.985596     -0.145083E-01 -0.250834      0.250834       56.5045       56.7553    
  23  0.257194      -1.35793      -23.4771       23.4771       57.5064       80.9835    
  24  0.921438E-01  -2.38440      -41.2238       41.2238       57.6298       98.8537    
  25  0.114653      -2.16584      -37.4452       37.4452       59.6428       97.0879    
  26  0.379827     -0.968040      -16.7364       16.7364       57.6243       74.3607    
  27  0.541451     -0.613503      -10.6068       10.6068       58.1621       68.7689    
  28  0.544274     -0.608302      -10.5169       10.5169       57.6342       68.1511    
  29  0.934365     -0.678883E-01  -1.17372       1.17372       57.5736       58.7474    
  30  0.266419E-01  -3.62527      -62.6771       62.6771       57.6405       120.318    
  31  0.919572     -0.838466E-01  -1.44962       1.44962       57.0414       58.4910    
  32  0.864639     -0.145444      -2.51457       2.51457       57.5094       60.0239    
  33  0.341156      -1.07542      -18.5928       18.5928       58.0182       76.6110    
  34  0.803175     -0.219182      -3.78943       3.78943       57.9119       61.7013    
  35  0.699424     -0.357498      -6.18077       6.18077       58.1064       64.2872    
  36  0.223868E-01  -3.79928      -65.6856       65.6856       65.8487       131.534    
  37  0.605689     -0.501389      -8.66848       8.66848       60.7031       69.3715    
  38  0.312349      -1.16363      -20.1180       20.1180       56.2779       76.3959    
  39  0.437501     -0.826675      -14.2923       14.2923       57.9204       72.2127    
  40  0.303330      -1.19293      -20.6246       20.6246       61.7167       82.3413    
  41  0.129735      -2.04226      -35.3085       35.3085       58.4876       93.7961    
  42  0.954352     -0.467224E-01 -0.807781      0.807781       63.4817       64.2894    
  43  0.519807     -0.654297      -11.3121       11.3121       57.6732       68.9854    
  44  0.950560     -0.507036E-01 -0.876611      0.876611       60.1220       60.9986    
  45  0.443941     -0.812064      -14.0397       14.0397       57.0015       71.0413    
  46  0.911446     -0.927229E-01  -1.60308       1.60308       58.2671       59.8702    
  47  0.782475     -0.245293      -4.24086       4.24086       60.7280       64.9688    
  48  0.412534     -0.885438      -15.3083       15.3083       58.9224       74.2307    
  49  0.843850     -0.169780      -2.93532       2.93532       57.9836       60.9189    
  50  0.149432      -1.90091      -32.8648       32.8648       58.3654       91.2302    
  51  0.292747      -1.22845      -21.2386       21.2386       60.3225       81.5611    
  52  0.579908E-02  -5.15006      -89.0391       89.0391       58.0564       147.095    
loop,thermsimp(1:2)        3   30.8504       22.3576    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     58       7428.46          1.22          1.01         24.00          0.19          0.06         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     59       3880.34          1.02          1.00         24.11          0.07          0.06         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4     58.06
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    17.2889               103
loop is:        3
neval is:       58
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):      59       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:     60         54.48          1.23          1.05         24.06          0.10          0.05         26.48
iter,obj,time:     61         54.96          0.99          1.00         23.79          0.46          0.06         26.30
iter,obj,time:     62         55.38          1.22          1.04         23.97          0.11          0.06         26.41
iter,obj,time:     63         55.53          1.17          1.04         24.15          0.09          0.05         26.50
iter,obj,time:     64         54.71          1.01          1.00         23.94          0.33          0.06         26.34
iter,obj,time:     65         55.51          1.21          1.04         24.11          0.08          0.06         26.50
iter,obj,time:     66         55.43          1.23          1.04         24.07          0.08          0.05         26.48
iter,obj,time:     67         55.43          1.20          1.04         24.07          0.13          0.06         26.50
iter,obj,time:     68         55.59          1.15          1.01         23.92          0.28          0.06         26.41
iter,obj,time:     69         56.39          1.22          1.05         23.90          0.14          0.06         26.38
iter,obj,time:     70         55.47          1.21          1.04         24.00          0.08          0.05         26.39
iter,obj,time:     71         55.50          1.17          1.02         23.90          0.23          0.06         26.38
iter,obj,time:     72         55.83          1.22          1.04         24.01          0.12          0.06         26.45
iter,obj,time:     73         55.78          1.23          1.04         24.01          0.12          0.06         26.46
iter,obj,time:     74         57.07          1.17          1.02         23.92          0.17          0.06         26.34
iter,obj,time:     75         56.76          1.21          1.05         24.04          0.10          0.06         26.46
iter,obj,time:     76         56.17          1.23          1.04         24.02          0.13          0.06         26.48
iter,obj,time:     77         56.37          1.21          1.04         24.01          0.12          0.06         26.45
iter,obj,time:     78         56.43          1.21          1.04         23.88          0.23          0.05         26.41
iter,obj,time:     79         55.73          0.97          1.00         23.96          0.30          0.05         26.29
iter,obj,time:     80         55.69          1.04          1.01         23.88          0.25          0.05         26.23
iter,obj,time:     81         55.52          0.99          1.01         24.06          0.31          0.05         26.43
iter,obj,time:     82         57.13          1.11          1.04         24.02          0.16          0.05         26.37
iter,obj,time:     83         55.74          1.03          1.00         23.85          0.49          0.06         26.43
iter,obj,time:     84         55.51          1.16          1.01         23.94          0.30          0.05         26.46
iter,obj,time:     85         55.40          1.03          1.01         24.10          0.28          0.05         26.47
iter,obj,time:     86         56.37          1.15          1.03         24.03          0.15          0.05         26.41
iter,obj,time:     87         55.01          1.06          1.00         24.02          0.39          0.05         26.52
iter,obj,time:     88         55.49          1.00          1.00         23.94          0.31          0.05         26.30
iter,obj,time:     89         55.44          1.00          1.00         24.08          0.31          0.06         26.45
iter,obj,time:     90         55.98          1.14          1.03         24.02          0.20          0.06         26.45
iter,obj,time:     91         55.20          1.04          1.02         24.06          0.24          0.05         26.41
iter,obj,time:     92         52.72          0.96          1.01         23.96          0.39          0.05         26.38
iter,obj,time:     93         55.90          1.05          1.01         24.02          0.19          0.06         26.32
iter,obj,time:     94         55.28          1.09          1.02         24.07          0.18          0.05         26.41
iter,obj,time:     95         55.65          1.04          1.02         24.10          0.16          0.05         26.38
iter,obj,time:     96         55.58          1.03          1.00         23.96          0.30          0.05         26.35
iter,obj,time:     97         56.18          1.04          1.01         23.75          0.50          0.05         26.36
iter,obj,time:     98         55.50          1.01          1.00         23.84          0.49          0.05         26.40
iter,obj,time:     99         56.55          1.12          1.02         24.07          0.13          0.05         26.38
iter,obj,time:    100         56.62          1.03          1.00         23.85          0.46          0.05         26.39
iter,obj,time:    101         54.94          1.11          1.04         24.06          0.13          0.05         26.39
iter,obj,time:    102         55.89          0.99          1.01         24.05          0.33          0.05         26.43
iter,obj,time:    103         55.87          1.00          1.02         24.07          0.23          0.05         26.38
iter,obj,time:    104         56.31          1.01          1.01         23.98          0.33          0.05         26.39
iter,obj,time:    105         55.51          1.02          1.01         23.96          0.34          0.06         26.39
iter,obj,time:    106         54.39          1.23          1.03         24.12          0.07          0.05         26.51
iter,obj,time:    107         55.46          1.01          1.01         24.11          0.21          0.06         26.41
iter,obj,time:    108         55.09          1.14          1.03         24.09          0.11          0.05         26.42
iter,obj,time:    109         58.12          1.00          1.00         23.84          0.47          0.05         26.37
iter,obj,time:    110         57.16          0.98          1.00         24.09          0.30          0.05         26.42


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     111      52
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     109




loop,nloop:       3      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    17.2889               103
loop is:        4
neval is:      109


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    8.64447               154

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      109     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162      -1.07331       1.07331       54.6474       55.7207    
   2  0.114178      -2.16999      -18.7585       18.7585       54.4838       73.2422    
   3  0.217017      -1.52778      -13.2068       13.2068       54.9582       68.1651    
   4  0.138317      -1.97821      -17.1006       17.1006       55.3763       72.4769    
   5  0.832728     -0.183048      -1.58235       1.58235       55.5327       57.1150    
   6  0.390825     -0.939496      -8.12145       8.12145       54.7075       62.8289    
   7  0.283633      -1.26007      -10.8927       10.8927       55.5086       66.4012    
   8  0.725809     -0.320468      -2.77028       2.77028       55.4343       58.2046    
   9  0.506121     -0.680979      -5.88671       5.88671       55.4251       61.3118    
  10  0.216234      -1.53139      -13.2381       13.2381       55.5921       68.8302    
  11  0.637942     -0.449509      -3.88577       3.88577       56.3917       60.2774    
  12  0.536707     -0.622302      -5.37948       5.37948       55.4738       60.8533    
  13  0.231844      -1.46169      -12.6356       12.6356       55.4961       68.1316    
  14  0.491379     -0.710540      -6.14225       6.14225       55.8253       61.9676    
  15  0.825774     -0.191434      -1.65485       1.65485       55.7756       57.4305    
  16  0.671593     -0.398102      -3.44139       3.44139       57.0685       60.5099    
  17  0.549103     -0.599470      -5.18210       5.18210       56.7638       61.9459    
  18  0.659287     -0.416597      -3.60126       3.60126       56.1652       59.7665    
  19  0.205012      -1.58469      -13.6988       13.6988       56.3681       70.0668    
  20  0.400541E-02  -5.52011      -47.7184       47.7184       56.4266       104.145    
  21  0.750831     -0.286575      -2.47729       2.47729       55.7344       58.2117    
  22  0.619921     -0.478162      -4.13346       4.13346       55.6930       59.8264    
  23  0.435226     -0.831889      -7.19124       7.19124       55.5209       62.7121    
  24  0.460974     -0.774414      -6.69440       6.69440       57.1320       63.8264    
  25  0.891582E-01  -2.41734      -20.8967       20.8967       55.7371       76.6338    
  26  0.589618E-01  -2.83087      -24.4713       24.4713       55.5148       79.9862    
  27  0.541391     -0.613613      -5.30436       5.30436       55.4000       60.7044    
  28  0.545108E-01  -2.90936      -25.1498       25.1498       56.3664       81.5163    
  29  0.744722     -0.294744      -2.54791       2.54791       55.0105       57.5584    
  30  0.712477     -0.339008      -2.93054       2.93054       55.4946       58.4252    
  31  0.563836     -0.572992      -4.95321       4.95321       55.4360       60.3892    
  32  0.161455      -1.82353      -15.7634       15.7634       55.9751       71.7385    
  33  0.640738     -0.445135      -3.84796       3.84796       55.2045       59.0524    
  34  0.157494      -1.84837      -15.9781       15.9781       52.7157       68.6939    
  35  0.695323     -0.363378      -3.14121       3.14121       55.9013       59.0425    
  36  0.792798     -0.232186      -2.00713       2.00713       55.2783       57.2854    
  37  0.940634     -0.612017E-01 -0.529056      0.529056       55.6468       56.1759    
  38  0.750008     -0.287672      -2.48677       2.48677       55.5795       58.0663    
  39  0.298939E-01  -3.51010      -30.3430       30.3430       56.1820       86.5250    
  40  0.633510     -0.456480      -3.94603       3.94603       55.4965       59.4425    
  41  0.465723     -0.764164      -6.60580       6.60580       56.5522       63.1580    
  42  0.916259     -0.874560E-01 -0.756011      0.756011       56.6218       57.3778    
  43  0.451376     -0.795456      -6.87629       6.87629       54.9357       61.8120    
  44  0.414090     -0.881672      -7.62159       7.62159       55.8922       63.5138    
  45  0.273092      -1.29795      -11.2201       11.2201       55.8656       67.0857    
  46  0.361379      -1.01783      -8.79858       8.79858       56.3102       65.1088    
  47  0.548848     -0.599934      -5.18611       5.18611       55.5086       60.6947    
  48  0.832309     -0.183552      -1.58671       1.58671       54.3906       55.9773    
  49  0.673017     -0.395985      -3.42308       3.42308       55.4608       58.8839    
  50  0.692516     -0.367425      -3.17619       3.17619       55.0947       58.2709    
  51  0.354468E-01  -3.33972      -28.8701       28.8701       58.1204       86.9906    
  52  0.987850     -0.122240E-01 -0.105670      0.105670       57.1600       57.2657    
loop,thermsimp(1:2)        4   1.07331       18.7585    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    111         55.62          1.00          0.99         24.11          0.28          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    112         57.85          1.04          1.00         24.25          0.11          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:        4
neval is:      111
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:        5
neval is:      111


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      111     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01 -0.279457      0.279457       54.6474       54.9269    
   2  0.384676     -0.955353      -8.25852       8.25852       54.3906       62.6491    
   3  0.472770     -0.749146      -6.47598       6.47598       55.6468       62.1228    
   4  0.131186      -2.03114      -17.5581       17.5581       55.5327       73.0908    
   5  0.387497     -0.948046      -8.19536       8.19536       57.1600       65.3554    
   6  0.474858     -0.744739      -6.43787       6.43787       55.2783       61.7161    
   7  0.654056     -0.424563      -3.67012       3.67012       56.6218       60.2920    
   8  0.375266     -0.980119      -8.47261       8.47261       55.7756       64.2482    
   9  0.605577     -0.501574      -4.33584       4.33584       55.0105       59.3464    
  10  0.485605     -0.722360      -6.24443       6.24443       55.5795       61.8240    
  11  0.503843     -0.685490      -5.92570       5.92570       55.4343       61.3600    
  12  0.374521     -0.982108      -8.48981       8.48981       55.7344       64.2242    
  13  0.955542E-01  -2.34806      -20.2978       20.2978       55.0947       75.3925    
  14  0.902567     -0.102512     -0.886163      0.886163       55.4946       56.3808    
  15  0.347215      -1.05781      -9.14421       9.14421       55.4608       64.6050    
  16  0.893138     -0.113014     -0.976948      0.976948       55.9013       56.8782    
  17  0.561145     -0.577776      -4.99456       4.99456       55.2045       60.1990    
  18  0.667287     -0.404536      -3.49700       3.49700       55.4965       58.9935    
  19  0.601102     -0.508991      -4.39996       4.39996       56.1652       60.5652    
  20  0.569928     -0.562245      -4.86031       4.86031       55.6930       60.5533    
  21  0.655926     -0.421708      -3.64544       3.64544       56.3917       60.0371    
  22  0.355892      -1.03313      -8.93084       8.93084       55.4360       64.3668    
  23  0.208013      -1.57015      -13.5731       13.5731       57.0685       70.6417    
  24  0.879772     -0.128093      -1.10729       1.10729       55.5086       56.6159    
  25  0.114206E-01  -4.47233      -38.6610       38.6610       55.4000       94.0610    
  26  0.950245     -0.510357E-01 -0.441176      0.441176       55.4738       55.9150    
  27  0.321268      -1.13548      -9.81562       9.81562       55.4251       65.2407    
  28  0.379005     -0.970207      -8.38693       8.38693       54.9357       63.3226    
  29  0.117960      -2.13741      -18.4768       18.4768       56.7638       75.2406    
  30  0.822558     -0.195337      -1.68858       1.68858       55.8253       57.5139    
  31  0.671085     -0.398860      -3.44794       3.44794       55.5209       58.9688    
  32  0.220279      -1.51286      -13.0779       13.0779       54.7075       67.7853    
  33  0.836335     -0.178727      -1.54500       1.54500       56.5522       58.0972    
  34  0.982442E-01  -2.32030      -20.0578       20.0578       55.8922       75.9500    
  35  0.912526     -0.915389E-01 -0.791305      0.791305       57.1320       57.9233    
  36  0.758802     -0.276015      -2.38600       2.38600       56.3102       58.6962    
  37  0.562651     -0.575096      -4.97140       4.97140       55.5086       60.4800    
  38  0.248142      -1.39375      -12.0483       12.0483       55.8656       67.9139    
  39  0.864881     -0.145163      -1.25486       1.25486       55.4961       56.7509    
  40  0.495151     -0.702893      -6.07614       6.07614       54.9582       61.0344    
  41  0.112352E-01  -4.48870      -38.8024       38.8024       52.7157       91.5182    
  42  0.745500     -0.293700      -2.53888       2.53888       55.5921       58.1310    
  43  0.405071     -0.903693      -7.81195       7.81195       56.3681       64.1800    
  44  0.617259     -0.482466      -4.17067       4.17067       55.9751       60.1458    
  45  0.992755     -0.727089E-02 -0.628530E-01  0.628530E-01   55.3763       55.4392    
  46  0.888739     -0.117952      -1.01963       1.01963       54.4838       55.5034    
  47  0.976701     -0.235748E-01 -0.203792      0.203792       55.7371       55.9409    
  48  0.461976     -0.772242      -6.67563       6.67563       55.5148       62.1904    
  49  0.150581      -1.89325      -16.3662       16.3662       56.3664       72.7326    
  50  0.726286E-01  -2.62240      -22.6692       22.6692       56.1820       78.8513    
  51  0.280837      -1.26998      -10.9783       10.9783       58.1204       69.0987    
  52  0.727959     -0.317510      -2.74471       2.74471       55.6220       58.3667    
loop,thermsimp(1:2)        5  0.279457       8.25852    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    113         55.48          0.96          0.99         24.12          0.25          0.06         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    114         55.46          1.02          1.00         24.30          0.05          0.05         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:        5
neval is:      113
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:        6
neval is:      113


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      113     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382      -1.86186       1.86186       54.6474       56.5093    
   2  0.337878      -1.08507      -9.37987       9.37987       55.3763       64.7562    
   3  0.930612     -0.719127E-01 -0.621647      0.621647       54.4838       55.1054    
   4  0.843645     -0.170024      -1.46977       1.46977       55.4738       56.9435    
   5  0.757799     -0.277337      -2.39743       2.39743       55.7371       58.1346    
   6  0.627925     -0.465335      -4.02258       4.02258       55.4946       59.5172    
   7  0.412314     -0.885971      -7.65875       7.65875       55.5086       63.1673    
   8  0.282274      -1.26488      -10.9342       10.9342       55.4961       66.4303    
   9  0.426609E-01  -3.15447      -27.2688       27.2688       55.9013       83.1700    
  10  0.484876     -0.723862      -6.25740       6.25740       55.8253       62.0827    
  11  0.372210     -0.988296      -8.54330       8.54330       57.1320       65.6753    
  12  0.740507     -0.300421      -2.59698       2.59698       56.5522       59.1492    
  13  0.361519      -1.01744      -8.79525       8.79525       55.5921       64.3874    
  14  0.421034     -0.865042      -7.47783       7.47783       55.6220       63.0999    
  15  0.780595     -0.247699      -2.14123       2.14123       56.3102       58.4514    
  16  0.758410     -0.276531      -2.39046       2.39046       55.5209       57.9113    
  17  0.522921E-01  -2.95091      -25.5091       25.5091       55.4965       81.0055    
  18  0.609673     -0.494833      -4.27757       4.27757       55.0105       59.2881    
  19  0.204029      -1.58949      -13.7403       13.7403       56.3917       70.1320    
  20  0.516385     -0.660902      -5.71315       5.71315       55.9751       61.6883    
  21  0.323918      -1.12726      -9.74460       9.74460       55.2045       64.9491    
  22  0.671820     -0.397765      -3.43847       3.43847       56.6218       60.0603    
  23  0.850344     -0.162114      -1.40139       1.40139       55.5086       56.9099    
  24  0.515631     -0.662364      -5.72578       5.72578       55.6930       61.4188    
  25  0.919408     -0.840249E-01 -0.726351      0.726351       56.1652       56.8916    
  26  0.516519     -0.660643      -5.71091       5.71091       54.9582       60.6691    
  27  0.986900     -0.131869E-01 -0.113994      0.113994       55.4343       55.5483    
  28  0.127351      -2.06081      -17.8146       17.8146       55.2783       73.0929    
  29  0.775028E-01  -2.55744      -22.1077       22.1077       55.5795       77.6873    
  30  0.778307     -0.250634      -2.16660       2.16660       55.6468       57.8134    
  31  0.548570     -0.600441      -5.19049       5.19049       55.5148       60.7053    
  32  0.191672      -1.65197      -14.2804       14.2804       54.3906       68.6710    
  33  0.593733     -0.521326      -4.50659       4.50659       54.9357       59.4423    
  34  0.612853     -0.489631      -4.23260       4.23260       56.3681       60.6007    
  35  0.872749     -0.136107      -1.17657       1.17657       55.7344       56.9110    
  36  0.291105E-01  -3.53666      -30.5725       30.5725       55.7756       86.3482    
  37  0.310804      -1.16859      -10.1019       10.1019       55.4360       65.5379    
  38  0.238051      -1.43527      -12.4072       12.4072       55.4608       67.8680    
  39  0.600295     -0.510334      -4.41157       4.41157       55.4251       59.8367    
  40  0.856575     -0.154813      -1.33828       1.33828       57.1600       58.4983    
  41  0.127990      -2.05580      -17.7713       17.7713       54.7075       72.4788    
  42  0.390396E-01  -3.24318      -28.0356       28.0356       55.8656       83.9011    
  43  0.469298E-01  -3.05910      -26.4443       26.4443       58.1204       84.5647    
  44  0.170208      -1.77073      -15.3071       15.3071       57.0685       72.3756    
  45  0.457801     -0.781320      -6.75410       6.75410       56.3664       63.1205    
  46  0.451589     -0.794982      -6.87220       6.87220       55.5327       62.4049    
  47  0.601844     -0.507757      -4.38929       4.38929       56.7638       61.1531    
  48  0.923684     -0.793857E-01 -0.686248      0.686248       55.0947       55.7810    
  49  0.113154      -2.17901      -18.8364       18.8364       55.8922       74.7286    
  50  0.652894     -0.426340      -3.68549       3.68549       56.1820       59.8675    
  51  0.600010     -0.510809      -4.41567       4.41567       52.7157       57.1314    
  52  0.768679     -0.263082      -2.27420       2.27420       55.4598       57.7340    
loop,thermsimp(1:2)        6   1.86186       9.37987    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    115         55.60          1.02          0.98         23.97          0.46          0.07         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    116         56.05          1.02          1.00         24.04          0.24          0.05         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:        6
neval is:      115
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:        7
neval is:      115


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      115     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -18.4948       18.4948       54.4838       72.9786    
   2  0.421875     -0.863045      -7.46057       7.46057       55.4343       62.8949    
   3  0.700103     -0.356528      -3.08200       3.08200       55.0947       58.1767    
   4  0.209367      -1.56367      -13.5171       13.5171       54.6474       68.1645    
   5  0.117251      -2.14344      -18.5289       18.5289       56.1652       74.6941    
   6  0.898330     -0.107218     -0.926840      0.926840       55.5086       56.4354    
   7  0.209806      -1.56157      -13.4990       13.4990       55.7344       69.2334    
   8  0.917155     -0.864790E-01 -0.747565      0.747565       55.4738       56.2213    
   9  0.120514E-01  -4.41857      -38.1962       38.1962       52.7157       90.9120    
  10  0.189983      -1.66082      -14.3569       14.3569       55.4598       69.8167    
  11  0.257131      -1.35817      -11.7406       11.7406       55.6468       67.3875    
  12  0.913158E-01  -2.39343      -20.6900       20.6900       55.5209       76.2108    
  13  0.336531      -1.08906      -9.41439       9.41439       55.7371       65.1515    
  14  0.318351      -1.14460      -9.89447       9.89447       56.3102       66.2046    
  15  0.919606     -0.838101E-01 -0.724494      0.724494       57.1600       57.8845    
  16  0.719771E-01  -2.63141      -22.7471       22.7471       56.5522       79.2993    
  17  0.788730E-01  -2.53992      -21.9562       21.9562       55.0105       76.9668    
  18  0.905929     -0.987941E-01 -0.854023      0.854023       54.9357       55.7897    
  19  0.665501     -0.407215      -3.52016       3.52016       55.4946       59.0148    
  20  0.812159     -0.208059      -1.79856       1.79856       55.4251       57.2237    
  21  0.412726E-01  -3.18756      -27.5548       27.5548       56.1820       83.7368    
  22  0.256064      -1.36233      -11.7766       11.7766       56.6218       68.3984    
  23  0.277519      -1.28187      -11.0811       11.0811       56.3681       67.4491    
  24  0.279550      -1.27457      -11.0180       11.0180       54.9582       65.9762    
  25  0.857884     -0.153286      -1.32508       1.32508       55.5148       56.8399    
  26  0.205158      -1.58398      -13.6926       13.6926       56.7638       70.4564    
  27  0.482085     -0.729635      -6.30731       6.30731       55.6930       62.0003    
  28  0.494966E-01  -3.00585      -25.9840       25.9840       55.9751       81.9591    
  29  0.338791      -1.08237      -9.35654       9.35654       55.8253       65.1819    
  30  0.249491E-01  -3.69092      -31.9060       31.9060       55.5327       87.4387    
  31  0.480710     -0.732491      -6.33200       6.33200       55.6220       61.9540    
  32  0.908951E-01  -2.39805      -20.7299       20.7299       56.3664       77.0963    
  33  0.283223      -1.26152      -10.9052       10.9052       55.5086       66.4138    
  34  0.277734      -1.28109      -11.0744       11.0744       55.5921       66.6665    
  35  0.504407     -0.684372      -5.91604       5.91604       55.3763       61.2924    
  36  0.251881      -1.37880      -11.9190       11.9190       55.2045       67.1235    
  37  0.568193     -0.565294      -4.88667       4.88667       55.4360       60.3227    
  38  0.186135      -1.68128      -14.5338       14.5338       57.1320       71.6658    
  39  0.964582     -0.360604E-01 -0.311723      0.311723       55.4961       55.8078    
  40  0.493045     -0.707155      -6.11298       6.11298       55.4608       61.5738    
  41  0.477950     -0.738248      -6.38177       6.38177       54.3906       60.7723    
  42  0.114879      -2.16388      -18.7056       18.7056       56.3917       75.0972    
  43  0.324003      -1.12700      -9.74233       9.74233       57.0685       66.8109    
  44  0.720573     -0.327708      -2.83287       2.83287       54.7075       57.5403    
  45  0.934913     -0.673019E-01 -0.581790      0.581790       55.2783       55.8601    
  46  0.516467     -0.660745      -5.71179       5.71179       55.8922       61.6040    
  47  0.351513      -1.04551      -9.03786       9.03786       55.5795       64.6174    
  48  0.310221      -1.17047      -10.1181       10.1181       55.4965       65.6146    
  49  0.467571     -0.760204      -6.57156       6.57156       55.9013       62.4728    
  50  0.700644     -0.355756      -3.07532       3.07532       55.8656       58.9409    
  51  0.608579E-01  -2.79921      -24.1977       24.1977       58.1204       82.3181    
  52  0.360106      -1.02136      -8.82910       8.82910       55.5979       64.4270    
loop,thermsimp(1:2)        7   18.4948       7.46057    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    117         58.97          1.02          0.98         23.73          0.70          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    118         68.53          1.00          0.99         24.14          0.29          0.05         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     58.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:        7
neval is:      117
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:        8
neval is:      117


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      117     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -6.21251       6.21251       54.9357       61.1482    
   2  0.568497     -0.564760      -4.88205       4.88205       55.4961       60.3781    
   3  0.632037E-01  -2.76139      -23.8708       23.8708       55.2783       79.1491    
   4  0.184325      -1.69105      -14.6183       14.6183       55.4738       70.0920    
   5  0.949772     -0.515332E-01 -0.445477      0.445477       55.5086       55.9540    
   6  0.512179     -0.669081      -5.78385       5.78385       55.5148       61.2987    
   7  0.573767     -0.555532      -4.80228       4.80228       55.4251       60.2274    
   8  0.590189     -0.527312      -4.55833       4.55833       54.7075       59.2658    
   9  0.323917      -1.12727      -9.74464       9.74464       57.1600       66.9046    
  10  0.246420E-01  -3.70330      -32.0131       32.0131       55.0947       87.1078    
  11  0.923153E-01  -2.38255      -20.5959       20.5959       55.8656       76.4614    
  12  0.236043      -1.44374      -12.4804       12.4804       55.4946       67.9750    
  13  0.885388     -0.121730      -1.05229       1.05229       55.4360       56.4883    
  14  0.617726     -0.481710      -4.16413       4.16413       54.3906       58.5547    
  15  0.349992      -1.04985      -9.07536       9.07536       55.3763       64.4517    
  16  0.892028     -0.114257     -0.987695      0.987695       55.4608       56.4485    
  17  0.382423     -0.961227      -8.30930       8.30930       55.8922       64.2015    
  18  0.850527     -0.161899      -1.39954       1.39954       55.6220       57.0216    
  19  0.653461     -0.425472      -3.67798       3.67798       55.6930       59.3709    
  20  0.413959     -0.881988      -7.62432       7.62432       55.9013       63.5256    
  21  0.807813     -0.213424      -1.84494       1.84494       55.4343       57.2792    
  22  0.348045      -1.05542      -9.12358       9.12358       55.5979       64.7214    
  23  0.435267     -0.831795      -7.19043       7.19043       55.5795       62.7700    
  24  0.434284     -0.834056      -7.20997       7.20997       55.7371       62.9471    
  25  0.983564     -0.165728E-01 -0.143263      0.143263       55.8253       55.9686    
  26  0.545923     -0.605277      -5.23230       5.23230       55.4965       60.7288    
  27  0.227140      -1.48219      -12.8127       12.8127       54.9582       67.7710    
  28  0.965085     -0.355395E-01 -0.307221      0.307221       56.3102       56.6174    
  29  0.183882      -1.69346      -14.6391       14.6391       55.5086       70.1476    
  30  0.187300E-02  -6.28022      -54.2892       54.2892       55.5921       109.881    
  31  0.428736     -0.846914      -7.32112       7.32112       57.0685       64.3897    
  32  0.459764     -0.777041      -6.71711       6.71711       55.2045       61.9216    
  33  0.914786     -0.890649E-01 -0.769919      0.769919       55.6468       56.4168    
  34  0.872236     -0.136696      -1.18166       1.18166       56.3681       57.5497    
  35  0.789367     -0.236524      -2.04462       2.04462       54.6474       56.6920    
  36  0.619233E-01  -2.78186      -24.0477       24.0477       56.6218       80.6695    
  37  0.138004E-01  -4.28306      -37.0248       37.0248       55.7344       92.7592    
  38  0.287035      -1.24815      -10.7896       10.7896       55.4598       66.2494    
  39  0.138758E-01  -4.27761      -36.9777       36.9777       56.7638       93.7415    
  40  0.593330     -0.522005      -4.51246       4.51246       57.1320       61.6445    
  41  0.399445     -0.917679      -7.93285       7.93285       54.4838       62.4166    
  42  0.982947     -0.172001E-01 -0.148686      0.148686       56.1652       56.3139    
  43  0.259534      -1.34887      -11.6602       11.6602       56.3917       68.0519    
  44  0.816592E-01  -2.50520      -21.6561       21.6561       55.5209       77.1770    
  45  0.166083      -1.79527      -15.5191       15.5191       55.0105       70.5297    
  46  0.967370     -0.331741E-01 -0.286773      0.286773       56.3664       56.6532    
  47  0.371024     -0.991488      -8.57089       8.57089       56.5522       65.1231    
  48  0.941964     -0.597885E-01 -0.516840      0.516840       55.9751       56.4919    
  49  0.130219      -2.03854      -17.6221       17.6221       58.1204       75.7425    
  50  0.599455     -0.511734      -4.42367       4.42367       56.1820       60.6057    
  51  0.519323     -0.655230      -5.66412       5.66412       55.5327       61.1968    
  52  0.829175     -0.187324      -1.61932       1.61932       58.9674       60.5868    
loop,thermsimp(1:2)        8   6.21251       4.88205    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    119         55.73          1.11          1.00         23.94          0.32          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    120         56.03          1.01          0.99         23.99          0.30          0.06         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.73
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:        8
neval is:      119
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:        9
neval is:      119


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      119     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -21.0265       21.0265       55.5086       76.5351    
   2  0.192227      -1.64908      -14.2554       14.2554       55.8253       70.0807    
   3  0.872733     -0.136126      -1.17674       1.17674       56.1652       57.3420    
   4  0.444113     -0.811675      -7.01650       7.01650       55.6468       62.6633    
   5  0.194382      -1.63793      -14.1591       14.1591       55.4608       69.6199    
   6  0.358074      -1.02702      -8.87802       8.87802       55.4360       64.3140    
   7  0.461693     -0.772855      -6.68093       6.68093       55.9751       62.6560    
   8  0.180202      -1.71368      -14.8138       14.8138       56.3102       71.1240    
   9  0.944954     -0.566187E-01 -0.489439      0.489439       56.3664       56.8559    
  10  0.738770     -0.302769      -2.61728       2.61728       54.6474       57.2647    
  11  0.822491E-01  -2.49800      -21.5939       21.5939       55.6220       77.2159    
  12  0.313602      -1.15963      -10.0244       10.0244       55.4343       65.4587    
  13  0.978185     -0.220567E-01 -0.190669      0.190669       56.3681       56.5587    
  14  0.540591E-01  -2.91768      -25.2218       25.2218       54.3906       79.6124    
  15  0.872885     -0.135951      -1.17523       1.17523       54.7075       55.8827    
  16  0.209079      -1.56504      -13.5290       13.5290       55.6930       69.2219    
  17  0.789205E-01  -2.53931      -21.9510       21.9510       55.4251       77.3761    
  18  0.746404     -0.292489      -2.52841       2.52841       55.4961       58.0245    
  19  0.110219      -2.20529      -19.0636       19.0636       58.9674       78.0310    
  20  0.656016     -0.421570      -3.64425       3.64425       56.1820       59.8263    
  21  0.665675     -0.406953      -3.51789       3.51789       55.4965       59.0144    
  22  0.563292     -0.573957      -4.96155       4.96155       54.9357       59.8973    
  23  0.615044     -0.486062      -4.20175       4.20175       55.5327       59.7344    
  24  0.128081      -2.05509      -17.7652       17.7652       55.5148       73.2800    
  25  0.459916     -0.776711      -6.71426       6.71426       57.1320       63.8463    
  26  0.433297     -0.836332      -7.22965       7.22965       55.2045       62.4341    
  27  0.225675      -1.48866      -12.8687       12.8687       54.4838       67.3525    
  28  0.808805     -0.212197      -1.83433       1.83433       55.5795       57.4139    
  29  0.578238     -0.547770      -4.73518       4.73518       55.7371       60.4723    
  30  0.569572     -0.562871      -4.86572       4.86572       55.9013       60.7670    
  31  0.291272      -1.23350      -10.6629       10.6629       55.8922       66.5551    
  32  0.144426      -1.93499      -16.7269       16.7269       57.0685       73.7955    
  33  0.908321     -0.961572E-01 -0.831228      0.831228       55.3763       56.2076    
  34  0.593166     -0.522281      -4.51485       4.51485       55.5979       60.1127    
  35  0.327630      -1.11587      -9.64612       9.64612       56.5522       66.1983    
  36  0.823214E-01  -2.49712      -21.5863       21.5863       55.4598       77.0461    
  37  0.742531     -0.297691      -2.57338       2.57338       57.1600       59.7334    
  38  0.476201E-01  -3.04450      -26.3181       26.3181       54.9582       81.2763    
  39  0.183829      -1.69375      -14.6416       14.6416       55.4946       70.1362    
  40  0.417257     -0.874053      -7.55573       7.55573       56.3917       63.9474    
  41  0.647723E-01  -2.73688      -23.6589       23.6589       55.4738       79.1326    
  42  0.123950E-01  -4.39046      -37.9532       37.9532       55.5086       93.4618    
  43  0.281372E-01  -3.57066      -30.8665       30.8665       55.0105       85.8770    
  44  0.883044     -0.124380      -1.07520       1.07520       58.1204       59.1956    
  45  0.445413     -0.808754      -6.99125       6.99125       55.8656       62.8568    
  46  0.418101     -0.872031      -7.53825       7.53825       55.5209       63.0591    
  47  0.301534      -1.19887      -10.3636       10.3636       55.2783       65.6419    
  48  0.674500     -0.393783      -3.40405       3.40405       56.6218       60.0259    
  49  0.732783     -0.310905      -2.68761       2.68761       55.0947       57.7823    
  50  0.970355     -0.300929E-01 -0.260138      0.260138       55.7344       55.9946    
  51  0.981589     -0.185824E-01 -0.160635      0.160635       56.7638       56.9244    
  52  0.677253     -0.389711      -3.36884       3.36884       55.7337       59.1026    
loop,thermsimp(1:2)        9   21.0265       14.2554    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    121         55.72          1.21          1.01         23.96          0.30          0.06         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    122         56.06          0.98          0.99         23.97          0.21          0.05         26.21
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  120    55.724        3.001     -1.326      5.103     -100.0      1.268    
                     -0.6305      2.661     -100.0      2.549      1.232    
                       1.416    -0.8536      1.841      0.000      0.000    
                      -1.439      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.237     -2.619     -5.386     -3.265    
                      -16.05     -2.536      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.4573E-01 0.2482E-01  0.000    -0.8735    
                     -0.1945    -0.2845    -0.1441    -0.1471    -0.6187E-01

                      -1.142    -0.7100      0.000    -0.2366E-01-0.2070E-01
                      0.8541E-01-0.2723E-01-0.5563E-01-0.1848    -0.1726    
                      0.1585     0.7777E-01-0.1098    -0.8931      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.334      9.134     -7039.     -4.000    
                     -0.3423     0.5513E-01  9.019      8.538     -4904.    

                      -4.000    -0.6406E-01-0.4945      8.788      9.029    
                      -6912.     -4.000    -0.1237    -0.5413      9.549    
                       8.792     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:        9
neval is:      121
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       10
neval is:      121


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      121     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339      -4.24737       4.24737       54.7075       58.9548    
   2  0.877337     -0.130865      -1.13126       1.13126       55.7344       56.8657    
   3  0.821280     -0.196891      -1.70202       1.70202       55.3763       57.0784    
   4  0.989636     -0.104181E-01 -0.900590E-01  0.900590E-01   56.3681       56.4581    
   5  0.492813     -0.707625      -6.11704       6.11704       56.3664       62.4835    
   6  0.904083     -0.100835     -0.871662      0.871662       56.7638       57.6355    
   7  0.490620     -0.712086      -6.15561       6.15561       54.6474       60.8030    
   8  0.572439     -0.557850      -4.82232       4.82232       56.1652       60.9876    
   9  0.588753     -0.529749      -4.57940       4.57940       55.5795       60.1589    
  10  0.341799      -1.07353      -9.28011       9.28011       55.0947       64.3748    
  11  0.449605     -0.799385      -6.91027       6.91027       55.4961       62.4063    
  12  0.740720     -0.300132      -2.59449       2.59449       55.4965       58.0910    
  13  0.173164E-01  -4.05610      -35.0629       35.0629       55.7337       90.7966    
  14  0.828389     -0.188272      -1.62751       1.62751       58.1204       59.7479    
  15  0.110451      -2.20318      -19.0454       19.0454       57.1600       76.2054    
  16  0.646816     -0.435693      -3.76634       3.76634       55.5327       59.2990    
  17  0.857676     -0.153529      -1.32717       1.32717       56.1820       57.5092    
  18  0.691202E-02  -4.97449      -43.0019       43.0019       54.9357       97.9376    
  19  0.530885     -0.633210      -5.47377       5.47377       56.6218       62.0956    
  20  0.742957     -0.297117      -2.56842       2.56842       55.5979       58.1663    
  21  0.883526E-01  -2.42642      -20.9751       20.9751       55.7371       76.7123    
  22  0.599138     -0.512263      -4.42824       4.42824       55.9013       60.3295    
  23  0.476407     -0.741482      -6.40972       6.40972       55.2045       61.6142    
  24  0.509994E-01  -2.97594      -25.7254       25.7254       55.9751       81.7006    
  25  0.669768     -0.400824      -3.46491       3.46491       55.6468       59.1118    
  26  0.874430     -0.134183      -1.15994       1.15994       55.8656       57.0255    
  27  0.830739     -0.185440      -1.60303       1.60303       55.5209       57.1239    
  28  0.166673      -1.79172      -15.4885       15.4885       57.1320       72.6205    
  29  0.578742     -0.546898      -4.72764       4.72764       56.3917       61.1193    
  30  0.433531     -0.835791      -7.22498       7.22498       55.4360       62.6610    
  31  0.979127     -0.210935E-01 -0.182342      0.182342       55.4343       55.6166    
  32  0.310252      -1.17037      -10.1172       10.1172       55.2783       65.3955    
  33  0.686879     -0.375597      -3.24684       3.24684       56.5522       59.7990    
  34  0.243104      -1.41427      -12.2256       12.2256       55.8922       68.1178    
  35  0.459407     -0.777818      -6.72383       6.72383       54.4838       61.2076    
  36  0.332163      -1.10213      -9.52733       9.52733       55.6930       65.2203    
  37  0.512243     -0.668956      -5.78277       5.78277       55.4608       61.2436    
  38  0.323240      -1.12936      -9.76273       9.76273       55.8253       65.5880    
  39  0.667455     -0.404284      -3.49482       3.49482       55.4946       58.9895    
  40  0.460037     -0.776449      -6.71199       6.71199       56.3102       63.0222    
  41  0.227415      -1.48098      -12.8023       12.8023       55.5148       68.3171    
  42  0.636494     -0.451780      -3.90540       3.90540       57.0685       60.9739    
  43  0.432078     -0.839149      -7.25400       7.25400       55.5086       62.7626    
  44  0.609015     -0.495913      -4.28691       4.28691       55.4598       59.7467    
  45  0.427755     -0.849205      -7.34093       7.34093       55.6220       62.9630    
  46  0.496712     -0.699745      -6.04893       6.04893       55.4251       61.4740    
  47  0.295308      -1.21974      -10.5440       10.5440       58.9674       69.5114    
  48  0.928979     -0.736692E-01 -0.636831      0.636831       55.4738       56.1106    
  49  0.245696E-01  -3.70625      -32.0385       32.0385       54.3906       86.4291    
  50  0.833617E-01  -2.48457      -21.4778       21.4778       54.9582       76.4360    
  51  0.499690     -0.693767      -5.99725       5.99725       55.0105       61.0078    
  52  0.320552      -1.13771      -9.83491       9.83491       55.7240       65.5589    
loop,thermsimp(1:2)       10   4.24737       1.13126    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    123         57.40          1.06          0.98         23.92          0.43          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    124         62.53          0.98          0.99         24.03          0.35          0.05         26.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     57.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       10
neval is:      123
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       11
neval is:      123


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      123     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -8.90931       8.90931       55.4343       64.3436    
   2  0.318207      -1.14505      -9.89839       9.89839       55.4738       65.3722    
   3  0.410972E-01  -3.19181      -27.5916       27.5916       56.3681       83.9596    
   4  0.217948      -1.52350      -13.1698       13.1698       55.7344       68.9042    
   5  0.460755     -0.774888      -6.69850       6.69850       55.8656       62.5641    
   6  0.694214     -0.364975      -3.15502       3.15502       55.3763       58.5314    
   7  0.237764      -1.43648      -12.4176       12.4176       55.5209       67.9384    
   8  0.635477     -0.453379      -3.91922       3.91922       56.1820       60.1012    
   9  0.882831E-01  -2.42721      -20.9819       20.9819       56.7638       77.7457    
  10  0.889613     -0.116969      -1.01113       1.01113       55.4965       56.5076    
  11  0.236395      -1.44225      -12.4675       12.4675       55.5979       68.0654    
  12  0.785560     -0.241359      -2.08642       2.08642       54.7075       56.7939    
  13  0.253594      -1.37202      -11.8604       11.8604       55.4946       67.3550    
  14  0.767743     -0.264300      -2.28474       2.28474       55.6468       57.9316    
  15  0.425111     -0.855405      -7.39453       7.39453       55.5327       62.9272    
  16  0.334680E-01  -3.39717      -29.3667       29.3667       55.4598       84.8265    
  17  0.737903     -0.303943      -2.62743       2.62743       58.1204       60.7478    
  18  0.530906     -0.633170      -5.47342       5.47342       56.5522       62.0256    
  19  0.811772     -0.208536      -1.80269       1.80269       55.5795       57.3822    
  20  0.781494     -0.246548      -2.13128       2.13128       55.9013       58.0325    
  21  0.668871     -0.402164      -3.47650       3.47650       54.6474       58.1239    
  22  0.609633     -0.494898      -4.27813       4.27813       57.0685       61.3467    
  23  0.732795E-01  -2.61347      -22.5921       22.5921       56.1652       78.7574    
  24  0.999755     -0.244962E-03 -0.211757E-02  0.211757E-02   55.0105       55.0127    
  25  0.556911     -0.585350      -5.06005       5.06005       56.3917       61.4517    
  26  0.381942     -0.962485      -8.32018       8.32018       54.4838       62.8040    
  27  0.230973      -1.46546      -12.6681       12.6681       55.4608       68.1289    
  28  0.791084     -0.234351      -2.02584       2.02584       55.4251       57.4510    
  29  0.122039      -2.10341      -18.1829       18.1829       55.2045       73.3874    
  30  0.411383     -0.888231      -7.67829       7.67829       56.6218       64.3001    
  31  0.753656     -0.282819      -2.44482       2.44482       55.4961       57.9409    
  32  0.846821     -0.166266      -1.43728       1.43728       56.3664       57.8037    
  33  0.577745     -0.548622      -4.74255       4.74255       55.4360       60.1786    
  34  0.859903     -0.150936      -1.30476       1.30476       55.5086       56.8133    
  35  0.915816     -0.879395E-01 -0.760191      0.760191       55.6220       56.3822    
  36  0.220499      -1.51186      -13.0692       13.0692       56.3102       69.3794    
  37  0.539962     -0.616256      -5.32721       5.32721       55.0947       60.4219    
  38  0.810725     -0.209827      -1.81384       1.81384       55.6930       57.5068    
  39  0.901567     -0.103621     -0.895746      0.895746       55.2783       56.1740    
  40  0.196148      -1.62888      -14.0808       14.0808       55.7240       69.8049    
  41  0.413437     -0.883250      -7.63523       7.63523       55.8253       63.4605    
  42  0.192892      -1.64562      -14.2255       14.2255       55.8922       70.1177    
  43  0.194290      -1.63840      -14.1631       14.1631       55.5148       69.6779    
  44  0.988313     -0.117563E-01 -0.101627      0.101627       58.9674       59.0691    
  45  0.917980     -0.855792E-01 -0.739787      0.739787       57.1320       57.8718    
  46  0.136083      -1.99449      -17.2413       17.2413       57.1600       74.4013    
  47  0.847126     -0.165905      -1.43417       1.43417       54.9582       56.3924    
  48  0.513003     -0.667474      -5.76996       5.76996       55.7371       61.5071    
  49  0.562161     -0.575967      -4.97893       4.97893       55.9751       60.9540    
  50  0.926079     -0.767957E-01 -0.663858      0.663858       54.3906       55.0544    
  51  0.890313     -0.116182      -1.00433       1.00433       55.7337       56.7381    
  52  0.857665     -0.153542      -1.32729       1.32729       57.3950       58.7223    
loop,thermsimp(1:2)       11   8.90931       9.89839    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    125         57.39          1.03          0.98         23.72          0.69          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     57.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       11
neval is:      124
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       12
neval is:      124


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      124     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -22.2794       22.2794       55.0105       77.2899    
   2  0.804470     -0.217571      -1.88079       1.88079       54.3906       56.2714    
   3  0.984017     -0.161120E-01 -0.139280      0.139280       55.2783       55.4176    
   4  0.587639     -0.531643      -4.59577       4.59577       55.6220       60.2178    
   5  0.523810     -0.646626      -5.58974       5.58974       54.9582       60.5480    
   6  0.930607     -0.719181E-01 -0.621694      0.621694       55.4965       56.1182    
   7  0.360114E-01  -3.32392      -28.7335       28.7335       55.7337       84.4673    
   8  0.963815     -0.368556E-01 -0.318597      0.318597       54.7075       55.0261    
   9  0.201264E-01  -3.90572      -33.7629       33.7629       55.5086       89.2715    
  10  0.954897     -0.461522E-01 -0.398962      0.398962       55.5795       55.9785    
  11  0.374160     -0.983071      -8.49813       8.49813       55.4251       63.9232    
  12  0.174967      -1.74316      -15.0687       15.0687       55.6930       70.7616    
  13  0.381618     -0.963335      -8.32752       8.32752       56.3664       64.6940    
  14  0.191097      -1.65498      -14.3064       14.3064       57.1320       71.4384    
  15  0.425287     -0.854991      -7.39095       7.39095       55.6468       63.0378    
  16  0.426180     -0.852893      -7.37281       7.37281       55.4961       62.8689    
  17  0.615671     -0.485042      -4.19293       4.19293       55.9013       60.0942    
  18  0.787264     -0.239192      -2.06769       2.06769       54.6474       56.7151    
  19  0.812636     -0.207472      -1.79349       1.79349       55.3763       57.1698    
  20  0.917241E-01  -2.38897      -20.6514       20.6514       57.3950       78.0464    
  21  0.671310     -0.398525      -3.44504       3.44504       58.9674       62.4125    
  22  0.548174     -0.601162      -5.19673       5.19673       56.1820       61.3788    
  23  0.134851      -2.00359      -17.3199       17.3199       55.4360       72.7559    
  24  0.373236     -0.985545      -8.51952       8.51952       55.0947       63.6142    
  25  0.578774     -0.546843      -4.72717       4.72717       58.1204       62.8476    
  26  0.910021     -0.942872E-01 -0.815063      0.815063       55.9751       56.7902    
  27  0.192323      -1.64858      -14.2511       14.2511       57.0685       71.3196    
  28  0.366342      -1.00419      -8.68068       8.68068       56.3917       65.0724    
  29  0.686994     -0.375430      -3.24539       3.24539       55.7371       58.9825    
  30  0.486551     -0.720414      -6.22760       6.22760       56.5522       62.7798    
  31  0.256801      -1.35945      -11.7518       11.7518       55.8656       67.6173    
  32  0.284977      -1.25535      -10.8518       10.8518       54.4838       65.3356    
  33  0.903072     -0.101953     -0.881326      0.881326       55.5327       56.4140    
  34  0.226450      -1.48523      -12.8390       12.8390       55.8253       68.6644    
  35  0.446078     -0.807261      -6.97834       6.97834       56.6218       63.6002    
  36  0.152634      -1.87971      -16.2491       16.2491       55.4343       71.6834    
  37  0.511955     -0.669518      -5.78763       5.78763       55.4738       61.2614    
  38  0.513138     -0.667210      -5.76768       5.76768       55.4946       61.2623    
  39  0.637309     -0.450501      -3.89434       3.89434       55.5209       59.4152    
  40  0.861477     -0.149107      -1.28895       1.28895       55.5979       56.8868    
  41  0.817364     -0.201671      -1.74334       1.74334       55.4608       57.2041    
  42  0.793820     -0.230898      -1.99599       1.99599       55.7344       57.7304    
  43  0.253309      -1.37315      -11.8701       11.8701       56.3102       68.1803    
  44  0.702532     -0.353065      -3.05206       3.05206       55.5148       58.5669    
  45  0.822324     -0.195620      -1.69103       1.69103       55.7240       57.4150    
  46  0.720485     -0.327831      -2.83392       2.83392       55.8922       58.7261    
  47  0.881589     -0.126029      -1.08946       1.08946       55.2045       56.2939    
  48  0.584479     -0.537035      -4.64239       4.64239       57.1600       61.8024    
  49  0.697197     -0.360688      -3.11796       3.11796       56.7638       59.8818    
  50  0.320931      -1.13653      -9.82470       9.82470       56.1652       65.9899    
  51  0.780071     -0.248371      -2.14703       2.14703       56.3681       58.5151    
  52  0.318322E-01  -3.44728      -29.7999       29.7999       57.3874       87.1873    
loop,thermsimp(1:2)       12   22.2794       1.88079    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    126         55.82          1.25          1.05         24.15          0.06          0.07         26.58
Just calling func    0   0         26.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    127         56.12          1.02          1.03         24.13          0.06          0.06         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.82
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       12
neval is:      126
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       13
neval is:      126


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      126     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467      -1.17968       1.17968       54.7075       55.8871    
   2  0.311340      -1.16687      -10.0870       10.0870       55.2783       65.3652    
   3  0.293828      -1.22476      -10.5874       10.5874       55.5795       66.1669    
   4  0.586668     -0.533296      -4.61007       4.61007       55.4965       60.1065    
   5  0.360311      -1.02079      -8.82418       8.82418       54.3906       63.2147    
   6  0.315643      -1.15314      -9.96831       9.96831       55.2045       65.1728    
   7  0.481464     -0.730923      -6.31845       6.31845       55.5327       61.8511    
   8  0.720279     -0.328116      -2.83639       2.83639       54.6474       57.4838    
   9  0.551471     -0.595166      -5.14490       5.14490       55.9751       61.1200    
  10  0.524434     -0.645435      -5.57945       5.57945       55.5979       61.1773    
  11  0.781600     -0.246412      -2.13010       2.13010       55.3763       57.5064    
  12  0.353648      -1.03945      -8.98552       8.98552       55.4608       64.4463    
  13  0.451044     -0.796190      -6.88265       6.88265       55.7240       62.6067    
  14  0.325353      -1.12284      -9.70639       9.70639       55.7344       65.4408    
  15  0.312157      -1.16425      -10.0643       10.0643       56.3681       66.4324    
  16  0.432418     -0.838362      -7.24720       7.24720       55.5148       62.7620    
  17  0.296543      -1.21556      -10.5079       10.5079       55.8922       66.4001    
  18  0.705416     -0.348967      -3.01664       3.01664       55.7371       58.7538    
  19  0.146505      -1.92069      -16.6034       16.6034       55.5209       72.1242    
  20  0.471608     -0.751607      -6.49725       6.49725       56.7638       63.2611    
  21  0.633095     -0.457134      -3.95168       3.95168       55.9013       59.8530    
  22  0.754855     -0.281230      -2.43109       2.43109       55.6220       58.0531    
  23  0.444501E-01  -3.11339      -26.9136       26.9136       54.9582       81.8718    
  24  0.160973      -1.82652      -15.7893       15.7893       55.4738       71.2631    
  25  0.943694     -0.579536E-01 -0.500978      0.500978       55.4946       55.9956    
  26  0.187304      -1.67502      -14.4797       14.4797       56.1820       70.6617    
  27  0.840922     -0.173257      -1.49771       1.49771       57.1600       58.6577    
  28  0.888648     -0.118054      -1.02051       1.02051       58.9674       59.9880    
  29  0.920614E-01  -2.38530      -20.6197       20.6197       56.5522       77.1718    
  30  0.906493     -0.981722E-01 -0.848647      0.848647       58.1204       58.9691    
  31  0.221761      -1.50616      -13.0199       13.0199       55.4961       68.5160    
  32  0.248725      -1.39141      -12.0280       12.0280       55.6468       67.6748    
  33  0.315928      -1.15224      -9.96053       9.96053       56.6218       66.5824    
  34  0.949967     -0.513283E-01 -0.443706      0.443706       55.0947       55.5384    
  35  0.802748     -0.219715      -1.89932       1.89932       55.4251       57.3244    
  36  0.558987     -0.581628      -5.02787       5.02787       56.3664       61.3943    
  37  0.638133     -0.449209      -3.88317       3.88317       56.3917       60.2749    
  38  0.637852     -0.449648      -3.88697       3.88697       54.4838       58.3708    
  39  0.382908     -0.959961      -8.29836       8.29836       56.1652       64.4636    
  40  0.982834     -0.173149E-01 -0.149679      0.149679       55.8656       56.0153    
  41  0.497022     -0.699120      -6.04353       6.04353       56.3102       62.3537    
  42  0.263620      -1.33325      -11.5252       11.5252       55.8253       67.3505    
  43  0.296939      -1.21423      -10.4964       10.4964       55.6930       66.1893    
  44  0.784161     -0.243141      -2.10183       2.10183       57.0685       59.1704    
  45  0.545321     -0.606380      -5.24184       5.24184       57.1320       62.3739    
  46  0.770080     -0.261260      -2.25846       2.25846       55.4343       57.6927    
  47  0.358755      -1.02511      -8.86157       8.86157       55.4360       64.2976    
  48  0.325126      -1.12354      -9.71243       9.71243       55.0105       64.7230    
  49  0.599396     -0.511832      -4.42452       4.42452       57.3950       61.8195    
  50  0.323708      -1.12791      -9.75022       9.75022       55.7337       65.4839    
  51  0.329142      -1.11127      -9.60630       9.60630       57.3874       66.9937    
  52  0.685661     -0.377371      -3.26218       3.26218       55.8164       59.0786    
loop,thermsimp(1:2)       13   1.17968       10.0870    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    128         57.12          1.25          1.06         24.15          0.07          0.07         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    129         61.99          1.02          1.04         24.18          0.07          0.06         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     57.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       13
neval is:      128
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       14
neval is:      128


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      128     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -9.20965       9.20965       55.0947       64.3043    
   2  0.267720      -1.31781      -11.3918       11.3918       54.7075       66.0993    
   3  0.279825      -1.27359      -11.0095       11.0095       55.4946       66.5042    
   4  0.281095      -1.26906      -10.9704       10.9704       55.8656       66.8360    
   5  0.245867      -1.40297      -12.1279       12.1279       55.4251       67.5530    
   6  0.914239     -0.896636E-01 -0.775094      0.775094       54.6474       55.4225    
   7  0.180116      -1.71415      -14.8180       14.8180       55.3763       70.1943    
   8  0.567917     -0.565780      -4.89087       4.89087       55.4343       60.3252    
   9  0.431941     -0.839465      -7.25674       7.25674       55.6220       62.8788    
  10  0.877920     -0.130199      -1.12551       1.12551       54.4838       55.6093    
  11  0.280355      -1.27170      -10.9932       10.9932       57.1600       68.1532    
  12  0.486947     -0.719601      -6.22057       6.22057       55.7371       61.9577    
  13  0.216546      -1.52995      -13.2256       13.2256       58.1204       71.3460    
  14  0.483718E-02  -5.33142      -46.0873       46.0873       55.8164       101.904    
  15  0.785152E-03  -7.14963      -61.8048       61.8048       57.0685       118.873    
  16  0.300781      -1.20137      -10.3852       10.3852       55.9013       66.2865    
  17  0.869691     -0.139618      -1.20692       1.20692       58.9674       60.1744    
  18  0.694261E-01  -2.66749      -23.0591       23.0591       55.4965       78.5555    
  19  0.635475     -0.453382      -3.91925       3.91925       56.3917       60.3109    
  20  0.894977     -0.110958     -0.959169      0.959169       55.9751       56.9343    
  21  0.442267     -0.815841      -7.05251       7.05251       55.5979       62.6504    
  22  0.283362      -1.26103      -10.9009       10.9009       56.3664       67.2674    
  23  0.518611     -0.656601      -5.67597       5.67597       57.3950       63.0710    
  24  0.858122E-01  -2.45559      -21.2273       21.2273       55.5327       76.7600    
  25  0.461153     -0.774026      -6.69105       6.69105       56.3102       63.0012    
  26  0.180026      -1.71465      -14.8223       14.8223       57.1320       71.9543    
  27  0.446938E-01  -3.10792      -26.8663       26.8663       55.7240       82.5903    
  28  0.152352      -1.88156      -16.2651       16.2651       55.5148       71.7799    
  29  0.163937E-01  -4.11086      -35.5362       35.5362       54.3906       89.9268    
  30  0.721347     -0.326635      -2.82359       2.82359       56.7638       59.5874    
  31  0.813323     -0.206626      -1.78618       1.78618       55.4360       57.2222    
  32  0.569343     -0.563273      -4.86919       4.86919       55.4608       60.3300    
  33  0.275899      -1.28772      -11.1317       11.1317       56.1652       67.2969    
  34  0.933187     -0.691492E-01 -0.597759      0.597759       55.0105       55.6083    
  35  0.716570     -0.333279      -2.88102       2.88102       55.2045       58.0855    
  36  0.405413     -0.902848      -7.80465       7.80465       55.2783       63.0829    
  37  0.907528     -0.970314E-01 -0.838785      0.838785       55.7344       56.5732    
  38  0.554651     -0.589416      -5.09519       5.09519       55.7337       60.8289    
  39  0.419962     -0.867592      -7.49987       7.49987       55.5795       63.0794    
  40  0.824173     -0.193375      -1.67163       1.67163       55.6930       57.3646    
  41  0.865647     -0.144278      -1.24721       1.24721       55.8922       57.1394    
  42  0.300944      -1.20083      -10.3806       10.3806       56.3681       66.7486    
  43  0.339688      -1.07973      -9.33368       9.33368       56.6218       65.9555    
  44  0.217032      -1.52771      -13.2063       13.2063       57.3874       70.5936    
  45  0.792618E-01  -2.53500      -21.9137       21.9137       55.8253       77.7391    
  46  0.997677     -0.232582E-02 -0.201055E-01  0.201055E-01   55.6468       55.6669    
  47  0.174239      -1.74733      -15.1047       15.1047       55.4961       70.6008    
  48  0.834084     -0.181422      -1.56829       1.56829       56.1820       57.7503    
  49  0.324404      -1.12577      -9.73166       9.73166       55.4738       65.2054    
  50  0.927598     -0.751564E-01 -0.649688      0.649688       55.5209       56.1706    
  51  0.981384     -0.187911E-01 -0.162439      0.162439       56.5522       56.7146    
  52  0.849105     -0.163572      -1.41399       1.41399       57.1168       58.5308    
loop,thermsimp(1:2)       14   9.20965       11.3918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    130         55.39          1.24          1.05         24.22          0.02          0.06         26.59
Just calling func    0   0         26.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    131         57.13          1.03          1.04         24.14          0.04          0.06         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       14
neval is:      130
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       15
neval is:      130


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      130     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -12.7065       12.7065       54.6474       67.3539    
   2  0.322822      -1.13066      -9.77392       9.77392       55.0105       64.7845    
   3  0.327586      -1.11601      -9.64728       9.64728       54.4838       64.1311    
   4  0.799078     -0.224296      -1.93892       1.93892       55.6468       57.5858    
   5  0.698072     -0.359433      -3.10711       3.10711       55.5209       58.6280    
   6  0.733871     -0.309421      -2.67479       2.67479       55.7344       58.4092    
   7  0.823872     -0.193740      -1.67478       1.67478       56.5522       58.2270    
   8  0.800045     -0.223087      -1.92847       1.92847       55.9751       57.9036    
   9  0.162010      -1.82010      -15.7338       15.7338       55.8922       71.6260    
  10  0.113138      -2.17915      -18.8376       18.8376       55.4360       74.2736    
  11  0.973966     -0.263784E-01 -0.228027      0.228027       55.6930       55.9210    
  12  0.998107     -0.189521E-02 -0.163831E-01  0.163831E-01   56.1820       56.1984    
  13  0.631351     -0.459893      -3.97553       3.97553       55.2045       59.1800    
  14  0.698229     -0.359208      -3.10517       3.10517       57.1168       60.2220    
  15  0.359252      -1.02373      -8.84961       8.84961       56.7638       65.6134    
  16  0.936266     -0.658562E-01 -0.569292      0.569292       58.9674       59.5367    
  17  0.843107     -0.170662      -1.47528       1.47528       56.3917       57.8670    
  18  0.181284      -1.70769      -14.7621       14.7621       55.4343       70.1964    
  19  0.354246      -1.03777      -8.97093       8.97093       55.4608       64.4317    
  20  0.981540     -0.186324E-01 -0.161067      0.161067       55.7337       55.8948    
  21  0.582284E-01  -2.84338      -24.5795       24.5795       55.7371       80.3167    
  22  0.935088     -0.671143E-01 -0.580168      0.580168       55.5979       56.1780    
  23  0.682144     -0.382515      -3.30664       3.30664       55.6220       58.9287    
  24  0.441439     -0.817715      -7.06872       7.06872       56.3102       63.3789    
  25  0.325829      -1.12138      -9.69376       9.69376       57.3950       67.0888    
  26  0.956968E-01  -2.34657      -20.2849       20.2849       55.5795       75.8644    
  27  0.465124E-01  -3.06804      -26.5216       26.5216       55.2783       81.7998    
  28  0.645503     -0.437726      -3.78391       3.78391       55.0947       58.8786    
  29  0.184751      -1.68875      -14.5983       14.5983       55.4738       70.0721    
  30  0.676303     -0.391115      -3.38098       3.38098       56.6218       60.0028    
  31  0.408248     -0.895880      -7.74441       7.74441       54.7075       62.4519    
  32  0.215511      -1.53474      -13.2671       13.2671       55.9013       69.1683    
  33  0.762109     -0.271666      -2.34841       2.34841       55.4946       57.8430    
  34  0.445022     -0.809632      -6.99884       6.99884       56.3681       63.3669    
  35  0.667113     -0.404797      -3.49925       3.49925       55.8656       59.3648    
  36  0.995785     -0.422376E-02 -0.365122E-01  0.365122E-01   56.3664       56.4029    
  37  0.278840      -1.27712      -11.0400       11.0400       56.1652       67.2053    
  38  0.624255     -0.471196      -4.07324       4.07324       55.4251       59.4983    
  39  0.368212     -0.999097      -8.63667       8.63667       57.1600       65.7967    
  40  0.330266      -1.10786      -9.57685       9.57685       55.3763       64.9532    
  41  0.969155     -0.313304E-01 -0.270835      0.270835       57.3874       57.6582    
  42  0.686816     -0.375688      -3.24763       3.24763       55.4961       58.7437    
  43  0.201053      -1.60419      -13.8673       13.8673       58.1204       71.9877    
  44  0.481166     -0.731544      -6.32381       6.32381       55.5148       61.8386    
  45  0.992829     -0.719725E-02 -0.622164E-01  0.622164E-01   57.1320       57.1942    
  46  0.665697     -0.406921      -3.51762       3.51762       55.5327       59.0503    
  47  0.991934E-02  -4.61327      -39.8793       39.8793       55.8253       95.7046    
  48  0.211644      -1.55285      -13.4236       13.4236       55.4965       68.9200    
  49  0.908243E-01  -2.39883      -20.7366       20.7366       55.7240       76.4606    
  50  0.643762     -0.440426      -3.80725       3.80725       54.3906       58.1978    
  51  0.568794E-01  -2.86682      -24.7822       24.7822       55.8164       80.5986    
  52  0.159466      -1.83592      -15.8706       15.8706       55.3930       71.2636    
loop,thermsimp(1:2)       15   12.7065       9.77392    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    132         56.34          1.23          1.06         24.13          0.09          0.05         26.57
Just calling func    0   0         26.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    133         59.69          1.00          1.00         24.21          0.19          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     56.34
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       15
neval is:      132
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       16
neval is:      132


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      132     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747      -5.04618       5.04618       55.7337       60.7799    
   2  0.850944     -0.161409      -1.39530       1.39530       55.6930       57.0883    
   3  0.343999      -1.06712      -9.22465       9.22465       55.5979       64.8225    
   4  0.481777E-02  -5.33544      -46.1221       46.1221       56.1820       102.304    
   5  0.146991      -1.91738      -16.5748       16.5748       56.3664       72.9412    
   6  0.545677     -0.605728      -5.23620       5.23620       57.1320       62.3682    
   7  0.761940     -0.271888      -2.35033       2.35033       55.6468       57.9972    
   8  0.944477     -0.571238E-01 -0.493805      0.493805       57.3874       57.8812    
   9  0.965249     -0.353688E-01 -0.305745      0.305745       55.4946       55.8004    
  10  0.634176     -0.455429      -3.93695       3.93695       56.3917       60.3286    
  11  0.793205     -0.231673      -2.00269       2.00269       55.9751       57.9778    
  12  0.743605     -0.296246      -2.56089       2.56089       54.3906       56.9515    
  13  0.983069E-01  -2.31966      -20.0522       20.0522       56.5522       76.6044    
  14  0.618437     -0.480560      -4.15419       4.15419       55.7344       59.8886    
  15  0.429182     -0.845875      -7.31214       7.31214       55.5209       62.8330    
  16  0.771528     -0.259382      -2.24222       2.24222       55.4961       57.7383    
  17  0.218286      -1.52195      -13.1564       13.1564       55.0947       68.2511    
  18  0.556408     -0.586254      -5.06786       5.06786       55.6220       60.6899    
  19  0.526292     -0.641899      -5.54888       5.54888       55.5327       61.0816    
  20  0.665532     -0.407169      -3.51976       3.51976       55.2045       58.7242    
  21  0.261756      -1.34034      -11.5866       11.5866       55.8656       67.4522    
  22  0.975508     -0.247971E-01 -0.214358      0.214358       55.4251       55.6395    
  23  0.257613      -1.35630      -11.7245       11.7245       58.9674       70.6919    
  24  0.981555E-01  -2.32120      -20.0656       20.0656       56.6218       76.6874    
  25  0.955054     -0.459870E-01 -0.397533      0.397533       57.1168       57.5144    
  26  0.887906     -0.118890      -1.02774       1.02774       55.5148       56.5426    
  27  0.407043     -0.898837      -7.76997       7.76997       54.7075       62.4774    
  28  0.876870     -0.131396      -1.13585       1.13585       56.3681       57.5039    
  29  0.957152     -0.437935E-01 -0.378572      0.378572       56.3102       56.6888    
  30  0.827730     -0.189068      -1.63439       1.63439       54.4838       56.1182    
  31  0.289027      -1.24124      -10.7298       10.7298       55.4608       66.1906    
  32  0.125230      -2.07760      -17.9598       17.9598       55.0105       72.9703    
  33  0.242443      -1.41699      -12.2491       12.2491       55.3763       67.6255    
  34  0.654103     -0.424490      -3.66949       3.66949       56.7638       60.4333    
  35  0.811871     -0.208414      -1.80163       1.80163       57.1600       58.9616    
  36  0.145201E-01  -4.23222      -36.5853       36.5853       57.3950       93.9803    
  37  0.344449      -1.06581      -9.21335       9.21335       56.1652       65.3786    
  38  0.265532      -1.32602      -11.4627       11.4627       54.6474       66.1101    
  39  0.811851     -0.208438      -1.80184       1.80184       55.4965       57.2983    
  40  0.983290E-01  -2.31944      -20.0503       20.0503       55.9013       75.9516    
  41  0.347314      -1.05753      -9.14176       9.14176       55.4738       64.6155    
  42  0.923773     -0.792888E-01 -0.685410      0.685410       55.4343       56.1197    
  43  0.690375     -0.370520      -3.20295       3.20295       55.3930       58.5959    
  44  0.227523      -1.48051      -12.7982       12.7982       55.8922       68.6904    
  45  0.652275     -0.427289      -3.69369       3.69369       58.1204       61.8141    
  46  0.669640     -0.401014      -3.46656       3.46656       55.4360       58.9026    
  47  0.288804      -1.24201      -10.7365       10.7365       55.5795       66.3160    
  48  0.404648     -0.904738      -7.82098       7.82098       55.7240       63.5450    
  49  0.371042     -0.991440      -8.57047       8.57047       55.7371       64.3076    
  50  0.308424      -1.17628      -10.1683       10.1683       55.8164       65.9848    
  51  0.911221     -0.929703E-01 -0.803680      0.803680       55.2783       56.0820    
  52  0.615436     -0.485425      -4.19624       4.19624       56.3445       60.5408    
loop,thermsimp(1:2)       16   5.04618       1.39530    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    134         55.61          1.05          0.99         24.14          0.16          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    135         55.88          1.04          1.00         24.25          0.09          0.06         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       16
neval is:      134
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       17
neval is:      134


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      134     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387      -2.60533       2.60533       55.4251       58.0304    
   2  0.527958     -0.638738      -5.52155       5.52155       55.4946       61.0162    
   3  0.326119      -1.12049      -9.68606       9.68606       55.2783       64.9643    
   4  0.647061     -0.435314      -3.76306       3.76306       54.4838       58.2468    
   5  0.419805     -0.867966      -7.50311       7.50311       55.4343       62.9374    
   6  0.218417      -1.52135      -13.1512       13.1512       55.5148       68.6661    
   7  0.168864      -1.77866      -15.3756       15.3756       56.3102       71.6858    
   8  0.761417     -0.272575      -2.35626       2.35626       54.3906       56.7468    
   9  0.383989     -0.957143      -8.27399       8.27399       55.6930       63.9670    
  10  0.104774      -2.25595      -19.5015       19.5015       55.4965       74.9980    
  11  0.167912      -1.78432      -15.4245       15.4245       56.3681       71.7925    
  12  0.997930     -0.207190E-02 -0.179105E-01  0.179105E-01   57.1168       57.1348    
  13  0.493294     -0.706650      -6.10862       6.10862       55.4961       61.6047    
  14  0.483048     -0.727639      -6.29006       6.29006       57.3874       63.6774    
  15  0.715967     -0.334121      -2.88830       2.88830       55.9751       58.8634    
  16  0.595423E-01  -2.82107      -24.3866       24.3866       55.6468       80.0335    
  17  0.636569     -0.451662      -3.90438       3.90438       55.3930       59.2974    
  18  0.482980     -0.727779      -6.29127       6.29127       55.2045       61.4957    
  19  0.500121     -0.692905      -5.98980       5.98980       55.4360       61.4258    
  20  0.426980     -0.851018      -7.35660       7.35660       57.1600       64.5166    
  21  0.546576     -0.604082      -5.22197       5.22197       55.7344       60.9564    
  22  0.142720      -1.94687      -16.8297       16.8297       56.3917       73.2214    
  23  0.473622     -0.747346      -6.46041       6.46041       56.7638       63.2242    
  24  0.892718E-01  -2.41607      -20.8856       20.8856       56.3445       77.2302    
  25  0.660659     -0.414518      -3.58329       3.58329       55.6220       59.2053    
  26  0.328755      -1.11244      -9.61649       9.61649       55.7337       65.3502    
  27  0.544150     -0.608530      -5.26042       5.26042       55.5327       60.7931    
  28  0.199068      -1.61411      -13.9531       13.9531       58.1204       72.0735    
  29  0.685070     -0.378234      -3.26964       3.26964       57.1320       60.4017    
  30  0.500258     -0.692632      -5.98744       5.98744       54.7075       60.6949    
  31  0.130607      -2.03556      -17.5964       17.5964       55.5209       73.1172    
  32  0.982013E-01  -2.32074      -20.0615       20.0615       55.7240       75.7855    
  33  0.581494E-01  -2.84474      -24.5913       24.5913       55.7371       80.3284    
  34  0.841391     -0.172699      -1.49289       1.49289       55.4738       56.9667    
  35  0.838937E-01  -2.47820      -21.4228       21.4228       55.5979       77.0206    
  36  0.729848     -0.314919      -2.72231       2.72231       56.1652       58.8876    
  37  0.748292     -0.289962      -2.50657       2.50657       55.8164       58.3230    
  38  0.229216      -1.47309      -12.7341       12.7341       54.6474       67.3815    
  39  0.710713     -0.341487      -2.95197       2.95197       55.4608       58.4128    
  40  0.511506     -0.670395      -5.79522       5.79522       55.5795       61.3748    
  41  0.106756      -2.23721      -19.3395       19.3395       55.8656       75.2051    
  42  0.583466     -0.538770      -4.65738       4.65738       55.3763       60.0337    
  43  0.993140E-01  -2.30947      -19.9641       19.9641       55.0947       75.0588    
  44  0.461224     -0.773871      -6.68970       6.68970       55.8922       62.5819    
  45  0.574465     -0.554316      -4.79177       4.79177       58.9674       63.7592    
  46  0.715977     -0.334107      -2.88818       2.88818       56.3664       59.2546    
  47  0.877584     -0.130583      -1.12882       1.12882       55.0105       56.1394    
  48  0.492354     -0.708558      -6.12511       6.12511       55.9013       62.0264    
  49  0.874926     -0.133616      -1.15504       1.15504       56.5522       57.7072    
  50  0.800367     -0.222685      -1.92499       1.92499       56.6218       58.5468    
  51  0.507308     -0.678636      -5.86645       5.86645       57.3950       63.2615    
  52  0.727831     -0.317686      -2.74623       2.74623       55.6113       58.3575    
loop,thermsimp(1:2)       17   2.60533       5.52155    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    136         55.67          1.11          0.99         23.77          0.45          0.06         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    137         55.80          1.02          1.00         23.82          0.38          0.05         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       17
neval is:      136
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       18
neval is:      136


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      136     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -8.29944       8.29944       55.0105       63.3100    
   2  0.293468      -1.22599      -10.5980       10.5980       54.3906       64.9886    
   3  0.954036     -0.470539E-01 -0.406756      0.406756       55.4738       55.8805    
   4  0.452934     -0.792010      -6.84651       6.84651       57.1168       63.9634    
   5  0.251692      -1.37955      -11.9255       11.9255       56.5522       68.4777    
   6  0.881081     -0.126605      -1.09444       1.09444       55.4251       56.5195    
   7  0.855311     -0.156290      -1.35104       1.35104       54.4838       55.8348    
   8  0.576474     -0.550824      -4.76158       4.76158       55.8164       60.5780    
   9  0.433835     -0.835090      -7.21892       7.21892       55.6113       62.8302    
  10  0.298626      -1.20856      -10.4474       10.4474       55.4608       65.9082    
  11  0.269991      -1.30937      -11.3188       11.3188       56.6218       67.9406    
  12  0.884826     -0.122364      -1.05777       1.05777       55.9751       57.0329    
  13  0.664124     -0.409287      -3.53807       3.53807       56.1652       59.7033    
  14  0.580836     -0.543287      -4.69643       4.69643       55.6220       60.3185    
  15  0.285501      -1.25351      -10.8359       10.8359       56.3664       67.2024    
  16  0.690757     -0.369967      -3.19817       3.19817       55.3930       58.5911    
  17  0.578320     -0.547628      -4.73396       4.73396       55.3763       60.1103    
  18  0.563230     -0.574067      -4.96251       4.96251       57.1320       62.0945    
  19  0.681565     -0.383363      -3.31397       3.31397       54.7075       58.0214    
  20  0.453362     -0.791065      -6.83834       6.83834       55.5327       62.3710    
  21  0.645457     -0.437797      -3.78453       3.78453       55.7344       59.5189    
  22  0.982222E-01  -2.32052      -20.0597       20.0597       55.4946       75.5543    
  23  0.843064     -0.170712      -1.47572       1.47572       55.5795       57.0553    
  24  0.505683     -0.681845      -5.89419       5.89419       55.4360       61.3302    
  25  0.350376      -1.04875      -9.06589       9.06589       55.2045       64.2704    
  26  0.367167      -1.00194      -8.66124       8.66124       55.4961       64.1573    
  27  0.268175      -1.31611      -11.3771       11.3771       55.9013       67.2784    
  28  0.989085E-01  -2.31356      -19.9995       19.9995       55.8922       75.8917    
  29  0.349392      -1.05156      -9.09020       9.09020       55.4343       64.5245    
  30  0.945468     -0.560755E-01 -0.484743      0.484743       56.7638       57.2485    
  31  0.305400      -1.18613      -10.2535       10.2535       57.3950       67.6485    
  32  0.942706     -0.590006E-01 -0.510029      0.510029       57.3874       57.8974    
  33  0.778346     -0.250584      -2.16617       2.16617       58.9674       61.1336    
  34  0.256449      -1.36083      -11.7636       11.7636       55.6930       67.4566    
  35  0.338120      -1.08436      -9.37368       9.37368       57.1600       66.5337    
  36  0.644609     -0.439112      -3.79589       3.79589       55.2783       59.0742    
  37  0.420837     -0.865509      -7.48187       7.48187       55.7337       63.2156    
  38  0.793406     -0.231421      -2.00051       2.00051       54.6474       56.6479    
  39  0.685561     -0.377517      -3.26344       3.26344       55.5148       58.7783    
  40  0.278740      -1.27748      -11.0431       11.0431       56.3102       67.3533    
  41  0.414078     -0.881700      -7.62184       7.62184       56.3681       63.9899    
  42  0.999720     -0.280334E-03 -0.242334E-02  0.242334E-02   58.1204       58.1228    
  43  0.714259     -0.336509      -2.90895       2.90895       55.5209       58.4298    
  44  0.713371     -0.337753      -2.91970       2.91970       56.3917       59.3114    
  45  0.451360     -0.795490      -6.87659       6.87659       55.4965       62.3731    
  46  0.887280     -0.119595      -1.03384       1.03384       55.0947       56.1285    
  47  0.234319      -1.45107      -12.5438       12.5438       55.8656       68.4093    
  48  0.277567E-01  -3.58428      -30.9842       30.9842       55.7240       86.7082    
  49  0.582411     -0.540579      -4.67302       4.67302       55.5979       60.2709    
  50  0.969019     -0.314707E-01 -0.272047      0.272047       56.3445       56.6166    
  51  0.441889     -0.816696      -7.05990       7.05990       55.6468       62.7067    
  52  0.150247      -1.89548      -16.3854       16.3854       55.6701       72.0555    
loop,thermsimp(1:2)       18   8.29944       10.5980    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    138         55.63          1.01          0.99         24.05          0.41          0.06         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    139         56.16          1.02          1.00         24.13          0.15          0.05         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       18
neval is:      138
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       19
neval is:      138


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      138     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -9.00158       9.00158       54.4838       63.4854    
   2  0.270835E-01  -3.60883      -31.1964       31.1964       55.4738       86.6702    
   3  0.923755     -0.793087E-01 -0.685582      0.685582       55.0947       55.7803    
   4  0.535520     -0.624517      -5.39862       5.39862       55.4251       60.8237    
   5  0.629344     -0.463078      -4.00306       4.00306       56.3445       60.3476    
   6  0.572648E-01  -2.86007      -24.7238       24.7238       54.6474       79.3712    
   7  0.353113E-01  -3.34355      -28.9033       28.9033       55.9751       84.8784    
   8  0.580838     -0.543283      -4.69639       4.69639       55.5795       60.2759    
   9  0.370403     -0.993164      -8.58538       8.58538       56.7638       65.3492    
  10  0.443010     -0.814162      -7.03800       7.03800       57.3874       64.4254    
  11  0.188704      -1.66757      -14.4153       14.4153       54.7075       69.1228    
  12  0.177608      -1.72818      -14.9392       14.9392       58.1204       73.0596    
  13  0.694998     -0.363847      -3.14526       3.14526       55.5209       58.6661    
  14  0.160742      -1.82796      -15.8017       15.8017       55.3930       71.1947    
  15  0.290050      -1.23770      -10.6993       10.6993       55.5148       66.2141    
  16  0.441138E-01  -3.12098      -26.9792       26.9792       55.2783       82.2575    
  17  0.372461     -0.987622      -8.53748       8.53748       56.3917       64.9292    
  18  0.652779     -0.426517      -3.68702       3.68702       55.7344       59.4214    
  19  0.998108     -0.189387E-02 -0.163715E-01  0.163715E-01   56.1652       56.1816    
  20  0.741140     -0.299566      -2.58959       2.58959       55.3763       57.9659    
  21  0.623042     -0.473141      -4.09006       4.09006       55.5979       59.6879    
  22  0.504617     -0.683955      -5.91243       5.91243       55.6220       61.5345    
  23  0.872499     -0.136394      -1.17906       1.17906       55.8164       56.9955    
  24  0.142620      -1.94757      -16.8357       16.8357       58.9674       75.8032    
  25  0.580285     -0.544236      -4.70463       4.70463       55.4360       60.1406    
  26  0.860063E-01  -2.45334      -21.2078       21.2078       57.1320       78.3398    
  27  0.401846     -0.911687      -7.88105       7.88105       55.5327       63.4137    
  28  0.161242      -1.82485      -15.7749       15.7749       55.4965       71.2714    
  29  0.550753     -0.596469      -5.15616       5.15616       55.6468       60.8030    
  30  0.815012     -0.204553      -1.76825       1.76825       55.6113       57.3795    
  31  0.438663     -0.824024      -7.12325       7.12325       55.7337       62.8570    
  32  0.542283     -0.611968      -5.29014       5.29014       55.0105       60.3007    
  33  0.943132E-01  -2.36113      -20.4108       20.4108       57.1168       77.5276    
  34  0.236587      -1.44144      -12.4605       12.4605       56.3681       68.8285    
  35  0.283068      -1.26207      -10.9099       10.9099       55.4961       66.4060    
  36  0.973178     -0.271886E-01 -0.235031      0.235031       55.2045       55.4395    
  37  0.596723     -0.516302      -4.46316       4.46316       55.4343       59.8974    
  38  0.595114     -0.519003      -4.48650       4.48650       54.3906       58.8771    
  39  0.948736     -0.526250E-01 -0.454915      0.454915       55.4608       55.9157    
  40  0.216072E-01  -3.83473      -33.1492       33.1492       57.1600       90.3092    
  41  0.440213     -0.820496      -7.09276       7.09276       56.3664       63.4592    
  42  0.905197     -0.996023E-01 -0.861010      0.861010       55.9013       56.7623    
  43  0.158396      -1.84266      -15.9288       15.9288       56.3102       72.2390    
  44  0.287789      -1.24553      -10.7669       10.7669       55.6930       66.4599    
  45  0.238244      -1.43446      -12.4002       12.4002       57.3950       69.7952    
  46  0.363881      -1.01093      -8.73894       8.73894       56.6218       65.3608    
  47  0.828805     -0.187771      -1.62318       1.62318       55.8656       57.4888    
  48  0.587140     -0.532492      -4.60311       4.60311       56.5522       61.1553    
  49  0.141687      -1.95414      -16.8925       16.8925       55.6701       72.5626    
  50  0.879115     -0.128839      -1.11375       1.11375       55.4946       56.6084    
  51  0.742190     -0.298150      -2.57735       2.57735       55.8922       58.4696    
  52  0.218958      -1.51887      -13.1299       13.1299       55.6325       68.7624    
loop,thermsimp(1:2)       19   9.00158       31.1964    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    140       3877.87          1.00          0.98         23.48          0.75          0.05         26.26
Just calling func    0   0         26.26


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    141         69.06          0.95          0.99         23.75          0.53          0.05         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  140    69.063        3.027     -1.301      5.160     -100.0      1.293    
                     -0.6056      1.863     -100.0      2.574      1.257    
                       1.441    -0.8286      1.841      0.000      0.000    
                      -1.464      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.311     -2.411     -5.461     -2.988    
                      -14.12     -2.561      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.3540E-01 0.1237E-01  0.000    -0.8868    
                     -0.2069    -0.3151    -0.1566    -0.1764    -0.7433E-01

                      -1.167    -0.7368      0.000    -0.3611E-01-0.3316E-01
                      0.8541E-01-0.3969E-01-0.6808E-01-0.1972    -0.1850    
                      0.1285     0.6532E-01-0.1659    -0.9180      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.321      9.121     -7039.     -4.000    
                     -0.3797     0.1776E-01  9.007      8.525     -4904.    

                      -4.000    -0.1014    -0.5319      8.776      9.017    
                      -6912.     -4.000    -0.1611    -0.5787      9.516    
                       8.780     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     69.06
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       19
neval is:      140
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       20
neval is:      140


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      140     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963      -5.41112       5.41112       55.2045       60.6156    
   2  0.288348      -1.24359      -10.7502       10.7502       55.0947       65.8449    
   3  0.910112E-01  -2.39677      -20.7188       20.7188       55.4608       76.1796    
   4  0.213812      -1.54266      -13.3355       13.3355       56.1652       69.5007    
   5  0.575222     -0.552999      -4.78038       4.78038       55.4946       60.2750    
   6  0.855707     -0.155827      -1.34704       1.34704       55.9013       57.2483    
   7  0.818692     -0.200047      -1.72930       1.72930       55.8164       57.5457    
   8  0.309911      -1.17147      -10.1267       10.1267       55.6113       65.7380    
   9  0.773438     -0.256910      -2.22085       2.22085       55.8656       58.0864    
  10  0.440502E-01  -3.12243      -26.9917       26.9917       55.3763       82.3681    
  11  0.211655      -1.55280      -13.4231       13.4231       55.8922       69.3153    
  12  0.713577     -0.337465      -2.91721       2.91721       55.5209       58.4381    
  13  0.927405     -0.753650E-01 -0.651491      0.651491       54.3906       55.0421    
  14  0.360229      -1.02101      -8.82613       8.82613       55.7344       64.5606    
  15  0.911872     -0.922553E-01 -0.797499      0.797499       55.5979       56.3954    
  16  0.800691     -0.222280      -1.92150       1.92150       55.4343       57.3558    
  17  0.169830      -1.77296      -15.3263       15.3263       55.4360       70.7623    
  18  0.581014     -0.542980      -4.69378       4.69378       55.5795       60.2733    
  19  0.869395     -0.139958      -1.20986       1.20986       55.0105       56.2204    
  20  0.773880     -0.256338      -2.21591       2.21591       56.3445       58.5604    
  21  0.496085     -0.701008      -6.05985       6.05985       55.6468       61.7067    
  22  0.530037     -0.634809      -5.48759       5.48759       55.4251       60.9127    
  23  0.239414      -1.42956      -12.3578       12.3578       56.5522       68.9100    
  24  0.595728     -0.517972      -4.47759       4.47759       55.6220       60.0996    
  25  0.170793      -1.76730      -15.2774       15.2774       55.7337       71.0111    
  26  0.983027     -0.171183E-01 -0.147979      0.147979       55.5327       55.6807    
  27  0.608714     -0.496407      -4.29117       4.29117       56.3664       60.6576    
  28  0.518727     -0.656378      -5.67404       5.67404       54.4838       60.1578    
  29  0.887918     -0.118876      -1.02762       1.02762       57.3874       58.4150    
  30  0.140498      -1.96256      -16.9653       16.9653       56.3917       73.3570    
  31  0.256308      -1.36138      -11.7684       11.7684       56.7638       68.5322    
  32  0.887238     -0.119642      -1.03424       1.03424       56.6218       57.6561    
  33  0.306042      -1.18403      -10.2353       10.2353       55.5148       65.7502    
  34  0.993873     -0.614632E-02 -0.531317E-01  0.531317E-01   55.4961       55.5492    
  35  0.275412E-01  -3.59207      -31.0516       31.0516       55.6930       86.7445    
  36  0.698960     -0.358161      -3.09611       3.09611       55.6325       58.7286    
  37  0.268424      -1.31519      -11.3691       11.3691       56.3681       67.7371    
  38  0.580935E-01  -2.84570      -24.5996       24.5996       54.7075       79.3070    
  39  0.242705      -1.41591      -12.2398       12.2398       57.3950       69.6348    
  40  0.443517     -0.813019      -7.02812       7.02812       55.3930       62.4211    
  41  0.904179     -0.100728     -0.870738      0.870738       55.4965       56.3672    
  42  0.454025     -0.789603      -6.82570       6.82570       56.3102       63.1359    
  43  0.592994     -0.522572      -4.51736       4.51736       55.6701       60.1875    
  44  0.401796     -0.911812      -7.88213       7.88213       58.1204       66.0025    
  45  0.130776      -2.03427      -17.5852       17.5852       58.9674       76.5526    
  46  0.709753     -0.342839      -2.96366       2.96366       57.1168       60.0805    
  47  0.388071     -0.946568      -8.18258       8.18258       57.1320       65.3146    
  48  0.362521      -1.01467      -8.77130       8.77130       54.6474       63.4187    
  49  0.285379      -1.25394      -10.8396       10.8396       55.2783       66.1179    
  50  0.286508      -1.24999      -10.8055       10.8055       55.9751       66.7806    
  51  0.951542     -0.496714E-01 -0.429383      0.429383       55.4738       55.9032    
  52  0.122933      -2.09612      -18.1198       18.1198       69.0635       87.1833    
loop,thermsimp(1:2)       20   5.41112       10.7502    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    142         56.81          1.01          0.99         23.80          0.47          0.05         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    143         57.00          1.03          1.00         24.02          0.23          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     56.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       20
neval is:      142
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       21
neval is:      142


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      142     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -10.4823       10.4823       54.3906       64.8729    
   2  0.663536     -0.410173      -3.54573       3.54573       55.4961       59.0418    
   3  0.263982      -1.33188      -11.5134       11.5134       55.5327       67.0461    
   4  0.792402     -0.232686      -2.01145       2.01145       55.4738       57.4852    
   5  0.624731     -0.470434      -4.06665       4.06665       55.0105       59.0772    
   6  0.170977      -1.76622      -15.2681       15.2681       55.4965       70.7646    
   7  0.362487      -1.01477      -8.77213       8.77213       55.5979       64.3700    
   8  0.659245     -0.416659      -3.60180       3.60180       55.9013       59.5031    
   9  0.746481E-03  -7.20014      -62.2414       62.2414       55.4343       117.676    
  10  0.690046     -0.370998      -3.20708       3.20708       55.8164       59.0235    
  11  0.905636     -0.991173E-01 -0.856817      0.856817       56.6218       57.4787    
  12  0.317643      -1.14683      -9.91372       9.91372       55.8656       65.7793    
  13  0.321948      -1.13336      -9.79734       9.79734       57.3874       67.1847    
  14  0.293974      -1.22426      -10.5831       10.5831       55.5209       66.1040    
  15  0.679275     -0.386729      -3.34307       3.34307       56.3445       59.6876    
  16  0.180340      -1.71291      -14.8072       14.8072       55.6325       70.4398    
  17  0.539600     -0.616927      -5.33301       5.33301       57.1168       62.4499    
  18  0.260315      -1.34586      -11.6343       11.6343       55.6220       67.2563    
  19  0.256777      -1.35955      -11.7526       11.7526       54.4838       66.2364    
  20  0.518851     -0.656138      -5.67197       5.67197       55.6701       61.3421    
  21  0.485887     -0.721780      -6.23941       6.23941       55.5795       61.8189    
  22  0.562814     -0.574805      -4.96889       4.96889       55.4946       60.4635    
  23  0.906369     -0.983082E-01 -0.849823      0.849823       55.2045       56.0543    
  24  0.332143      -1.10219      -9.52785       9.52785       56.3664       65.8943    
  25  0.912001E-01  -2.39470      -20.7009       20.7009       55.4251       76.1260    
  26  0.302569      -1.19545      -10.3340       10.3340       55.6468       65.9808    
  27  0.362040      -1.01600      -8.78279       8.78279       55.3930       64.1758    
  28  0.630870     -0.460656      -3.98213       3.98213       56.3102       60.2923    
  29  0.685312     -0.377881      -3.26658       3.26658       54.6474       57.9140    
  30  0.329910      -1.10894      -9.58617       9.58617       55.7344       65.3206    
  31  0.906630E-01  -2.40061      -20.7520       20.7520       57.1320       77.8840    
  32  0.339749      -1.07955      -9.33214       9.33214       55.6113       64.9434    
  33  0.783039     -0.244573      -2.11420       2.11420       55.5148       57.6290    
  34  0.322673      -1.13112      -9.77791       9.77791       55.0947       64.8726    
  35  0.255311      -1.36527      -11.8020       11.8020       58.1204       69.9225    
  36  0.645921     -0.437078      -3.77831       3.77831       55.2783       59.0566    
  37  0.240122      -1.42661      -12.3323       12.3323       55.9751       68.3074    
  38  0.224638      -1.49326      -12.9085       12.9085       56.3681       69.2765    
  39  0.682659     -0.381760      -3.30011       3.30011       56.7638       60.0639    
  40  0.533856     -0.627629      -5.42552       5.42552       56.5522       61.9777    
  41  0.439620E-02  -5.42701      -46.9137       46.9137       55.8922       102.806    
  42  0.409891     -0.891863      -7.70968       7.70968       56.1652       63.8749    
  43  0.379406     -0.969149      -8.37778       8.37778       57.3950       65.7728    
  44  0.982111     -0.180514E-01 -0.156045      0.156045       55.4360       55.5920    
  45  0.243530      -1.41251      -12.2104       12.2104       55.7337       67.9442    
  46  0.709323     -0.343445      -2.96890       2.96890       56.3917       59.3606    
  47  0.212014      -1.55110      -13.4085       13.4085       55.4608       68.8693    
  48  0.530919     -0.633146      -5.47322       5.47322       58.9674       64.4407    
  49  0.439600     -0.821890      -7.10481       7.10481       54.7075       61.8123    
  50  0.304385      -1.18946      -10.2823       10.2823       55.3763       65.6586    
  51  0.850253     -0.162221      -1.40232       1.40232       55.6930       57.0953    
  52  0.686564     -0.376055      -3.25080       3.25080       56.8139       60.0647    
loop,thermsimp(1:2)       21   10.4823       3.54573    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    144         56.06          0.97          0.99         23.89          0.44          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    145         57.87          0.96          0.99         23.87          0.43          0.05         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     56.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       21
neval is:      144
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       22
neval is:      144


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      144     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -8.28114       8.28114       55.4360       63.7171    
   2  0.741480     -0.299107      -2.58562       2.58562       55.2045       57.7901    
   3  0.138898      -1.97401      -17.0643       17.0643       55.6930       72.7573    
   4  0.751974E-01  -2.58764      -22.3688       22.3688       56.6218       78.9906    
   5  0.824485     -0.192996      -1.66835       1.66835       55.4738       57.1421    
   6  0.982900     -0.172482E-01 -0.149102      0.149102       55.5148       55.6639    
   7  0.693409     -0.366136      -3.16505       3.16505       54.6474       57.8125    
   8  0.941572     -0.602045E-01 -0.520436      0.520436       55.8164       56.3369    
   9  0.812713     -0.207378      -1.79267       1.79267       55.4961       57.2887    
  10  0.879507     -0.128393      -1.10989       1.10989       55.2783       56.3882    
  11  0.418958     -0.869984      -7.52055       7.52055       55.0105       62.5311    
  12  0.314952      -1.15533      -9.98725       9.98725       56.3917       66.3789    
  13  0.812426     -0.207731      -1.79572       1.79572       55.9013       57.6970    
  14  0.213788      -1.54277      -13.3364       13.3364       56.3445       69.6809    
  15  0.521629     -0.650798      -5.62581       5.62581       56.7638       62.3896    
  16  0.287143      -1.24777      -10.7864       10.7864       56.8139       67.6002    
  17  0.518340     -0.657125      -5.68050       5.68050       56.3102       61.9907    
  18  0.712802E-02  -4.94372      -42.7359       42.7359       55.4946       98.2305    
  19  0.579935     -0.544838      -4.70984       4.70984       55.6701       60.3799    
  20  0.508101E-02  -5.28224      -45.6622       45.6622       54.7075       100.370    
  21  0.984466     -0.156557E-01 -0.135336      0.135336       55.5795       55.7149    
  22  0.394325     -0.930579      -8.04436       8.04436       56.5522       64.5966    
  23  0.837309     -0.177562      -1.53493       1.53493       57.1168       58.6518    
  24  0.683519     -0.380501      -3.28923       3.28923       56.1652       59.4545    
  25  0.892337     -0.113912     -0.984708      0.984708       55.3930       56.3777    
  26  0.297675      -1.21175      -10.4750       10.4750       55.5979       66.0728    
  27  0.566054     -0.569065      -4.91927       4.91927       58.9674       63.8867    
  28  0.325499E-01  -3.42498      -29.6072       29.6072       55.0947       84.7019    
  29  0.721169     -0.326882      -2.82572       2.82572       54.3906       57.2163    
  30  0.370449     -0.993040      -8.58431       8.58431       55.6113       64.1956    
  31  0.398952     -0.918913      -7.94352       7.94352       55.7344       63.6779    
  32  0.942469     -0.592518E-01 -0.512201      0.512201       55.3763       55.8885    
  33  0.379045     -0.970101      -8.38601       8.38601       57.3950       65.7810    
  34  0.218373      -1.52155      -13.1530       13.1530       55.8656       69.0186    
  35  0.413944     -0.882024      -7.62463       7.62463       56.3664       63.9911    
  36  0.452532     -0.792896      -6.85417       6.85417       55.6468       62.5010    
  37  0.938896     -0.630505E-01 -0.545038      0.545038       55.5209       56.0659    
  38  0.389299     -0.943409      -8.15527       8.15527       54.4838       62.6391    
  39  0.943794     -0.578471E-01 -0.500058      0.500058       55.5327       56.0328    
  40  0.706887     -0.346884      -2.99863       2.99863       57.3874       60.3860    
  41  0.274873      -1.29145      -11.1639       11.1639       55.6220       66.7859    
  42  0.343864      -1.06751      -9.22805       9.22805       55.7337       64.9618    
  43  0.869527E-01  -2.44239      -21.1132       21.1132       55.9751       77.0883    
  44  0.859615     -0.151271      -1.30765       1.30765       55.4608       56.7685    
  45  0.264079      -1.33151      -11.5102       11.5102       56.3681       67.8782    
  46  0.494871     -0.703457      -6.08102       6.08102       58.1204       64.2014    
  47  0.112943      -2.18087      -18.8525       18.8525       55.6325       74.4850    
  48  0.358273      -1.02646      -8.87321       8.87321       55.4965       64.3697    
  49  0.215257      -1.53592      -13.2772       13.2772       55.4251       68.7023    
  50  0.441681     -0.817166      -7.06397       7.06397       57.1320       64.1960    
  51  0.888276     -0.118473      -1.02414       1.02414       55.8922       56.9163    
  52  0.780286     -0.248095      -2.14465       2.14465       56.0612       58.2059    
loop,thermsimp(1:2)       22   8.28114       2.58562    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    146         57.07          1.02          0.98         23.59          0.76          0.06         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    147         60.77          1.03          1.00         24.06          0.31          0.06         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     57.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       22
neval is:      146
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       23
neval is:      146


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      146     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -9.64543       9.64543       55.5148       65.1603    
   2  0.736029     -0.306486      -2.64941       2.64941       55.5795       58.2289    
   3  0.608436     -0.496864      -4.29513       4.29513       55.3763       59.6715    
   4  0.584882     -0.536346      -4.63643       4.63643       55.5327       60.1691    
   5  0.617514     -0.482053      -4.16709       4.16709       55.5209       59.6880    
   6  0.376473     -0.976909      -8.44486       8.44486       55.8164       64.2613    
   7  0.535145     -0.625218      -5.40468       5.40468       55.3930       60.7977    
   8  0.341783      -1.07358      -9.28052       9.28052       55.2783       64.5588    
   9  0.804208E-01  -2.52048      -21.7882       21.7882       55.4608       77.2490    
  10  0.660499     -0.414760      -3.58538       3.58538       55.8922       59.4776    
  11  0.739860E-01  -2.60388      -22.5092       22.5092       55.4738       77.9829    
  12  0.203251      -1.59331      -13.7733       13.7733       54.3906       68.1639    
  13  0.637025     -0.450946      -3.89819       3.89819       55.4961       59.3943    
  14  0.687460     -0.374752      -3.23953       3.23953       55.9013       59.1408    
  15  0.663581     -0.410105      -3.54514       3.54514       55.2045       58.7496    
  16  0.579690     -0.545263      -4.71351       4.71351       54.6474       59.3609    
  17  0.775653     -0.254050      -2.19613       2.19613       56.0612       58.2573    
  18  0.284124      -1.25834      -10.8777       10.8777       57.1168       67.9946    
  19  0.317710      -1.14662      -9.91188       9.91188       56.1652       66.0771    
  20  0.958871     -0.419990E-01 -0.363060      0.363060       55.6701       56.0332    
  21  0.582932     -0.539685      -4.66529       4.66529       57.3874       62.0527    
  22  0.905476     -0.992942E-01 -0.858346      0.858346       56.3102       57.1685    
  23  0.225214      -1.49070      -12.8863       12.8863       56.7638       69.6501    
  24  0.618260     -0.480846      -4.15666       4.15666       55.6468       59.8035    
  25  0.608706     -0.496420      -4.29129       4.29129       55.0105       59.3018    
  26  0.651052     -0.429165      -3.70991       3.70991       54.4838       58.1937    
  27  0.138439E-02  -6.58249      -56.9022       56.9022       55.7344       112.637    
  28  0.157375      -1.84913      -15.9847       15.9847       55.4360       71.4207    
  29  0.168063      -1.78342      -15.4167       15.4167       58.9674       74.3841    
  30  0.924354     -0.786598E-01 -0.679973      0.679973       56.3664       57.0464    
  31  0.985585     -0.145204E-01 -0.125521      0.125521       55.6113       55.7368    
  32  0.540844E-01  -2.91721      -25.2177       25.2177       57.1320       82.3497    
  33  0.535345     -0.624843      -5.40144       5.40144       58.1204       63.5219    
  34  0.736351     -0.306048      -2.64563       2.64563       55.4965       58.1421    
  35  0.283062E-01  -3.56467      -30.8147       30.8147       56.5522       87.3669    
  36  0.690743     -0.369987      -3.19834       3.19834       55.7337       58.9321    
  37  0.260994      -1.34326      -11.6117       11.6117       57.3950       69.0068    
  38  0.243637      -1.41208      -12.2067       12.2067       55.5979       67.8045    
  39  0.850226     -0.162253      -1.40259       1.40259       56.3917       57.7943    
  40  0.589307     -0.528809      -4.57127       4.57127       55.6220       60.1933    
  41  0.515087     -0.663420      -5.73492       5.73492       56.8139       62.5488    
  42  0.348855      -1.05310      -9.10350       9.10350       56.3681       65.4715    
  43  0.791407     -0.233943      -2.02232       2.02232       55.4251       57.4474    
  44  0.370775     -0.992160      -8.57670       8.57670       55.8656       64.4423    
  45  0.676021     -0.391531      -3.38458       3.38458       56.3445       59.7291    
  46  0.125601      -2.07465      -17.9342       17.9342       55.6930       73.6272    
  47  0.582904     -0.539733      -4.66571       4.66571       55.6325       60.2982    
  48  0.818994     -0.199679      -1.72612       1.72612       55.9751       57.7012    
  49  0.291406      -1.23304      -10.6590       10.6590       56.6218       67.2808    
  50  0.887104     -0.119794      -1.03555       1.03555       55.0947       56.1303    
  51  0.666242     -0.406102      -3.51054       3.51054       55.4946       59.0052    
  52  0.931047     -0.714460E-01 -0.617613      0.617613       57.0666       57.6843    
loop,thermsimp(1:2)       23   9.64543       2.64941    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    148         55.93          1.16          1.02         24.13          0.12          0.07         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    149         56.93          1.02          1.00         24.11          0.14          0.06         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.93
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       23
neval is:      148
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       24
neval is:      148


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      148     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -10.6561       10.6561       55.6113       66.2674    
   2  0.991852     -0.818183E-02 -0.707276E-01  0.707276E-01   55.6701       55.7408    
   3  0.317368      -1.14769      -9.92121       9.92121       55.0947       65.0159    
   4  0.737330     -0.304720      -2.63414       2.63414       56.3664       59.0006    
   5  0.834641     -0.180753      -1.56251       1.56251       56.3102       57.8727    
   6  0.464401     -0.767007      -6.63038       6.63038       55.4251       62.0555    
   7  0.592116     -0.524053      -4.53016       4.53016       57.0666       61.5968    
   8  0.464372     -0.767069      -6.63090       6.63090       55.9751       62.6060    
   9  0.636055E-01  -2.75505      -23.8160       23.8160       56.3917       80.2077    
  10  0.712927     -0.338376      -2.92508       2.92508       55.4965       58.4216    
  11  0.265597      -1.32578      -11.4606       11.4606       54.4838       65.9444    
  12  0.152318      -1.88178      -16.2670       16.2670       55.5795       71.8466    
  13  0.629580     -0.462703      -3.99982       3.99982       56.0612       60.0610    
  14  0.849464     -0.163150      -1.41034       1.41034       55.2045       56.6148    
  15  0.487816     -0.717817      -6.20515       6.20515       55.7337       61.9389    
  16  0.374667     -0.981718      -8.48644       8.48644       55.4946       63.9811    
  17  0.657383     -0.419488      -3.62625       3.62625       55.9013       59.5275    
  18  0.846901     -0.166172      -1.43647       1.43647       55.0105       56.4470    
  19  0.201185      -1.60353      -13.8617       13.8617       54.6474       68.5091    
  20  0.771980     -0.258797      -2.23716       2.23716       55.4961       57.7332    
  21  0.507739     -0.677788      -5.85912       5.85912       55.8922       61.7513    
  22  0.280262      -1.27203      -10.9960       10.9960       55.3763       66.3724    
  23  0.285359      -1.25401      -10.8402       10.8402       55.5209       66.3611    
  24  0.246191      -1.40165      -12.1165       12.1165       56.3445       68.4610    
  25  0.559989E-01  -2.88242      -24.9170       24.9170       55.6468       80.5639    
  26  0.330462      -1.10726      -9.57171       9.57171       55.5327       65.1044    
  27  0.899405     -0.106022     -0.916506      0.916506       55.6220       56.5385    
  28  0.637003     -0.450981      -3.89849       3.89849       55.6325       59.5310    
  29  0.699726E-01  -2.65965      -22.9913       22.9913       55.3930       78.3843    
  30  0.677191     -0.389802      -3.36963       3.36963       57.3874       60.7570    
  31  0.649507     -0.431542      -3.73045       3.73045       56.8139       60.5443    
  32  0.527986     -0.638685      -5.52110       5.52110       58.1204       63.6415    
  33  0.374870E-01  -3.28376      -28.3864       28.3864       55.8164       84.2028    
  34  0.448697     -0.801407      -6.92774       6.92774       55.8656       62.7933    
  35  0.809612     -0.211200      -1.82571       1.82571       55.2783       57.1040    
  36  0.836235     -0.178846      -1.54603       1.54603       55.5148       57.0608    
  37  0.198161      -1.61867      -13.9926       13.9926       56.3681       70.3606    
  38  0.222702      -1.50192      -12.9833       12.9833       56.1652       69.1485    
  39  0.888863     -0.117812      -1.01842       1.01842       56.6218       57.6403    
  40  0.868267     -0.141256      -1.22108       1.22108       55.5979       56.8189    
  41  0.164066      -1.80749      -15.6248       15.6248       57.1168       72.7416    
  42  0.163797      -1.80912      -15.6389       15.6389       54.3906       70.0295    
  43  0.883498     -0.123867      -1.07076       1.07076       57.3950       58.4658    
  44  0.749983     -0.287705      -2.48706       2.48706       56.7638       59.2509    
  45  0.666691     -0.405428      -3.50471       3.50471       55.4360       58.9407    
  46  0.978530     -0.217038E-01 -0.187618      0.187618       55.6930       55.8806    
  47  0.442024     -0.816391      -7.05727       7.05727       58.9674       66.0247    
  48  0.228080      -1.47806      -12.7770       12.7770       55.4608       68.2378    
  49  0.226174      -1.48645      -12.8496       12.8496       55.4738       68.3234    
  50  0.388394     -0.945736      -8.17539       8.17539       57.1320       65.3074    
  51  0.257425      -1.35703      -11.7308       11.7308       56.5522       68.2830    
  52  0.707288     -0.346317      -2.99373       2.99373       55.9295       58.9232    
loop,thermsimp(1:2)       24   10.6561      0.707276E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    150         55.67          1.22          1.03         24.23          0.11          0.07         26.65
Just calling func    0   0         26.65


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    151         56.17          1.02          1.03         24.18          0.14          0.06         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.67
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       24
neval is:      150
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       25
neval is:      150


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      150     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -16.6391       16.6391       55.6701       72.3092    
   2  0.438196     -0.825090      -7.13247       7.13247       55.6930       62.8254    
   3  0.637359     -0.450422      -3.89367       3.89367       55.0105       58.9042    
   4  0.122813      -2.09709      -18.1282       18.1282       55.6220       73.7503    
   5  0.926899     -0.759107E-01 -0.656208      0.656208       55.2045       55.8607    
   6  0.456580     -0.783992      -6.77720       6.77720       55.5979       62.3751    
   7  0.988763     -0.113008E-01 -0.976899E-01  0.976899E-01   55.5148       55.6125    
   8  0.499609     -0.693930      -5.99866       5.99866       55.2783       61.2769    
   9  0.432617     -0.837902      -7.24322       7.24322       56.6218       63.8651    
  10  0.403570     -0.907406      -7.84405       7.84405       55.4961       63.3401    
  11  0.435824     -0.830517      -7.17938       7.17938       56.3102       63.4896    
  12  0.504807     -0.683579      -5.90918       5.90918       55.4965       61.4057    
  13  0.778763     -0.250048      -2.16153       2.16153       57.3950       59.5565    
  14  0.429140     -0.845972      -7.31298       7.31298       55.9295       63.2425    
  15  0.597763     -0.514562      -4.44811       4.44811       55.4360       59.8841    
  16  0.425932     -0.853476      -7.37785       7.37785       56.3664       63.7443    
  17  0.825778     -0.191430      -1.65481       1.65481       56.7638       58.4186    
  18  0.448772     -0.801241      -6.92631       6.92631       55.9013       62.8276    
  19  0.701335     -0.354770      -3.06680       3.06680       55.6325       58.6993    
  20  0.425857     -0.853651      -7.37937       7.37937       56.0612       63.4406    
  21  0.800815     -0.222126      -1.92016       1.92016       56.8139       58.7340    
  22  0.724239     -0.322634      -2.78900       2.78900       57.3874       60.1764    
  23  0.312194      -1.16413      -10.0633       10.0633       57.0666       67.1299    
  24  0.796592     -0.227412      -1.96586       1.96586       55.8922       57.8581    
  25  0.164146      -1.80700      -15.6206       15.6206       55.7337       71.3543    
  26  0.503041     -0.687083      -5.93947       5.93947       55.4251       61.3646    
  27  0.640838     -0.444978      -3.84660       3.84660       55.9751       59.8217    
  28  0.327752      -1.11550      -9.64289       9.64289       55.8656       65.5085    
  29  0.720325     -0.328053      -2.83585       2.83585       58.1204       60.9563    
  30  0.447570     -0.803922      -6.94948       6.94948       55.4946       62.4441    
  31  0.377461     -0.974289      -8.42222       8.42222       55.0947       63.5169    
  32  0.951264     -0.499633E-01 -0.431906      0.431906       55.5327       55.9646    
  33  0.610405     -0.493632      -4.26719       4.26719       57.1320       61.3992    
  34  0.564697     -0.571466      -4.94002       4.94002       54.4838       59.4238    
  35  0.993998     -0.601974E-02 -0.520375E-01  0.520375E-01   58.9674       59.0195    
  36  0.908032     -0.964757E-01 -0.833981      0.833981       55.6113       56.4452    
  37  0.731210     -0.313055      -2.70620       2.70620       55.5209       58.2271    
  38  0.818812     -0.199901      -1.72804       1.72804       55.3763       57.1044    
  39  0.423172     -0.859976      -7.43404       7.43404       55.4608       62.8948    
  40  0.554414     -0.589843      -5.09889       5.09889       56.5522       61.6511    
  41  0.244903E-01  -3.70948      -32.0665       32.0665       55.4738       87.5403    
  42  0.337898      -1.08501      -9.37934       9.37934       56.3445       65.7239    
  43  0.634521E-01  -2.75747      -23.8369       23.8369       54.6474       78.4843    
  44  0.824978     -0.192398      -1.66318       1.66318       56.1652       57.8284    
  45  0.954123     -0.469622E-01 -0.405963      0.405963       54.3906       54.7965    
  46  0.807852     -0.213376      -1.84452       1.84452       56.3681       58.2126    
  47  0.335430      -1.09234      -9.44271       9.44271       55.5795       65.0222    
  48  0.266194      -1.32353      -11.4412       11.4412       57.1168       68.5581    
  49  0.797818     -0.225874      -1.95257       1.95257       55.3930       57.3455    
  50  0.710601     -0.341644      -2.95333       2.95333       56.3917       59.3450    
  51  0.469059     -0.757026      -6.54409       6.54409       55.6468       62.1909    
  52  0.256457E-01  -3.66338      -31.6680       31.6680       55.6739       87.3419    
loop,thermsimp(1:2)       25   16.6391       7.13247    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    152         55.89          1.20          1.00         24.10          0.10          0.07         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    153         56.40          1.02          1.02         24.12          0.10          0.05         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       25
neval is:      152
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       26
neval is:      152


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      152     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126      -2.13627       2.13627       54.3906       56.5268    
   2  0.928800     -0.738619E-01 -0.638498      0.638498       55.5148       56.1533    
   3  0.727994     -0.317462      -2.74429       2.74429       55.2045       57.9488    
   4  0.109723E-01  -4.51238      -39.0072       39.0072       55.5327       94.5399    
   5  0.160096      -1.83198      -15.8365       15.8365       55.6113       71.4478    
   6  0.497079     -0.699006      -6.04254       6.04254       55.3763       61.4189    
   7  0.789473     -0.236389      -2.04346       2.04346       55.3930       57.4364    
   8  0.763780     -0.269476      -2.32948       2.32948       56.1652       58.4947    
   9  0.217288      -1.52653      -13.1961       13.1961       55.8922       69.0883    
  10  0.867642     -0.141976      -1.22731       1.22731       56.3681       57.5954    
  11  0.740966     -0.299800      -2.59162       2.59162       55.5209       58.1125    
  12  0.999757     -0.242662E-03 -0.209769E-02  0.209769E-02   56.7638       56.7659    
  13  0.587476     -0.531920      -4.59816       4.59816       55.6325       60.2307    
  14  0.703619     -0.351518      -3.03869       3.03869       56.8139       59.8526    
  15  0.740946     -0.299828      -2.59185       2.59185       55.0105       57.6024    
  16  0.335927      -1.09086      -9.42991       9.42991       58.9674       68.3974    
  17  0.736553     -0.305774      -2.64325       2.64325       56.3917       59.0349    
  18  0.597397     -0.515174      -4.45341       4.45341       54.4838       58.9372    
  19  0.126601      -2.06672      -17.8657       17.8657       57.3950       75.2607    
  20  0.990194     -0.985477E-02 -0.851893E-01  0.851893E-01   55.9751       56.0603    
  21  0.716453     -0.333443      -2.88244       2.88244       55.4360       58.3184    
  22  0.279233E-01  -3.57829      -30.9325       30.9325       57.3874       88.3198    
  23  0.413932     -0.882054      -7.62489       7.62489       58.1204       65.7453    
  24  0.109516      -2.21168      -19.1188       19.1188       55.2783       74.3971    
  25  0.440749     -0.819279      -7.08224       7.08224       55.4251       62.5073    
  26  0.412115     -0.886453      -7.66292       7.66292       57.1320       64.7949    
  27  0.146963      -1.91758      -16.5764       16.5764       55.4965       72.0729    
  28  0.345919      -1.06155      -9.17654       9.17654       56.5522       65.7287    
  29  0.343614      -1.06824      -9.23433       9.23433       55.6468       64.8812    
  30  0.600334E-01  -2.81285      -24.3156       24.3156       55.5979       79.9135    
  31  0.751538     -0.285634      -2.46915       2.46915       55.4946       57.9638    
  32  0.878119     -0.129973      -1.12355       1.12355       55.6930       56.8165    
  33  0.544046     -0.608721      -5.26208       5.26208       55.9013       61.1633    
  34  0.931023     -0.714714E-01 -0.617833      0.617833       55.4608       56.0786    
  35  0.131968      -2.02520      -17.5068       17.5068       55.9295       73.4363    
  36  0.826694E-01  -2.49291      -21.5499       21.5499       55.4961       77.0459    
  37  0.174702E-02  -6.34984      -54.8911       54.8911       56.0612       110.952    
  38  0.233470      -1.45470      -12.5751       12.5751       56.3102       68.8853    
  39  0.232927      -1.45703      -12.5952       12.5952       55.0947       67.6899    
  40  0.958279     -0.426163E-01 -0.368396      0.368396       56.3664       56.7348    
  41  0.820100     -0.198330      -1.71445       1.71445       56.6218       58.3363    
  42  0.305797      -1.18483      -10.2423       10.2423       55.5795       65.8218    
  43  0.260853      -1.34380      -11.6164       11.6164       55.8656       67.4820    
  44  0.960408     -0.403967E-01 -0.349208      0.349208       56.3445       56.6937    
  45  0.318957      -1.14270      -9.87803       9.87803       57.0666       66.9447    
  46  0.146887      -1.91809      -16.5809       16.5809       57.1168       73.6977    
  47  0.787623     -0.238735      -2.06374       2.06374       55.7337       57.7975    
  48  0.452412     -0.793163      -6.85647       6.85647       55.6701       62.5266    
  49  0.218339      -1.52170      -13.1543       13.1543       55.6220       68.7764    
  50  0.177672      -1.72782      -14.9361       14.9361       54.6474       69.5835    
  51  0.928922     -0.737304E-01 -0.637361      0.637361       55.6739       56.3113    
  52  0.341447      -1.07456      -9.28902       9.28902       55.8868       65.1758    
loop,thermsimp(1:2)       26   2.13627      0.638498    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    154         55.62          1.07          0.99         24.13          0.22          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    155         58.92          0.95          0.98         24.00          0.28          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       26
neval is:      154
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       27
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      154
neval,tstepnext:      154     154

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271      -1.73124       1.73124       55.9751       57.7063    
   2  0.309452      -1.17295      -10.1396       10.1396       55.4608       65.6004    
   3  0.303638      -1.19192      -10.3035       10.3035       55.5148       65.8183    
   4  0.754457     -0.281757      -2.43564       2.43564       55.6739       58.1096    
   5  0.623133     -0.472996      -4.08880       4.08880       54.3906       58.4794    
   6  0.989422E-01  -2.31322      -19.9966       19.9966       56.3445       76.3411    
   7  0.695126     -0.363662      -3.14367       3.14367       56.3664       59.5101    
   8  0.832210E-01  -2.48626      -21.4924       21.4924       56.7638       78.2562    
   9  0.869521     -0.139813      -1.20861       1.20861       55.6930       56.9016    
  10  0.488136     -0.717160      -6.19947       6.19947       55.3930       61.5924    
  11  0.579877     -0.544940      -4.71072       4.71072       56.3681       61.0788    
  12  0.480435     -0.733064      -6.33695       6.33695       55.0105       61.3475    
  13  0.792626     -0.232404      -2.00901       2.00901       55.7337       57.7427    
  14  0.870230     -0.138998      -1.20156       1.20156       55.2045       56.4060    
  15  0.886361     -0.120631      -1.04279       1.04279       55.4946       56.5374    
  16  0.358181      -1.02672      -8.87543       8.87543       55.5209       64.3963    
  17  0.560125     -0.579594      -5.01029       5.01029       55.4360       60.4463    
  18  0.546151     -0.604859      -5.22869       5.22869       56.6218       61.8505    
  19  0.732086     -0.311858      -2.69585       2.69585       56.1652       58.8611    
  20  0.590102     -0.527460      -4.55961       4.55961       54.4838       59.0434    
  21  0.867355     -0.142307      -1.23017       1.23017       56.3917       57.6218    
  22  0.749758     -0.288005      -2.48965       2.48965       56.8139       59.3035    
  23  0.721970     -0.325772      -2.81613       2.81613       55.6325       58.4487    
  24  0.596865     -0.516065      -4.46111       4.46111       55.9013       60.3624    
  25  0.878161     -0.129925      -1.12313       1.12313       55.3763       56.4995    
  26  0.558752E-01  -2.88463      -24.9361       24.9361       55.4251       80.3612    
  27  0.555543     -0.587810      -5.08131       5.08131       55.6701       60.7514    
  28  0.597562     -0.514897      -4.45101       4.45101       57.1320       61.5830    
  29  0.995329     -0.468202E-02 -0.404736E-01  0.404736E-01   55.6468       55.6873    
  30  0.206787      -1.57606      -13.6243       13.6243       55.8868       69.5111    
  31  0.645457     -0.437797      -3.78453       3.78453       56.5522       60.3367    
  32  0.871352     -0.137710      -1.19043       1.19043       58.1204       59.3108    
  33  0.701360     -0.354733      -3.06648       3.06648       55.5795       58.6460    
  34  0.936151     -0.659784E-01 -0.570349      0.570349       57.0666       57.6370    
  35  0.590091     -0.527478      -4.55977       4.55977       55.8656       60.4254    
  36  0.750433     -0.287105      -2.48187       2.48187       55.0947       57.5766    
  37  0.326255      -1.12007      -9.68246       9.68246       58.9674       68.6499    
  38  0.873133     -0.135668      -1.17278       1.17278       55.6220       56.7948    
  39  0.621627     -0.475415      -4.10971       4.10971       56.3102       60.4199    
  40  0.153041      -1.87705      -16.2261       16.2261       55.8922       72.1183    
  41  0.196696      -1.62610      -14.0567       14.0567       54.6474       68.7042    
  42  0.365028      -1.00778      -8.71174       8.71174       55.6113       64.3230    
  43  0.398429     -0.920226      -7.95487       7.95487       55.4965       63.4513    
  44  0.549691     -0.598399      -5.17285       5.17285       55.9295       61.1023    
  45  0.994179     -0.583795E-02 -0.504660E-01  0.504660E-01   57.1168       57.1673    
  46  0.147335E-01  -4.21763      -36.4592       36.4592       55.2783       91.7375    
  47  0.224737      -1.49282      -12.9047       12.9047       57.3950       70.2997    
  48  0.182172      -1.70281      -14.7199       14.7199       55.4961       70.2159    
  49  0.230919      -1.46569      -12.6701       12.6701       55.5979       68.2680    
  50  0.491818     -0.709647      -6.13452       6.13452       57.3874       63.5219    
  51  0.370754     -0.992217      -8.57719       8.57719       55.5327       64.1099    
  52  0.785622     -0.241279      -2.08573       2.08573       55.6227       57.7084    
loop,thermsimp(1:2)       27   1.73124       10.1396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156       1263.11          1.10          1.00         24.01          0.20          0.05         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    157         67.61          1.01          0.99         24.14          0.18          0.05         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     67.61
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    8.64447               154
loop is:       27
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    8.64447               154
loop is:       28
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    4.32224               205

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      156     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380     -0.917959      0.917959       55.6468       56.5648    
   2  0.162004E-01  -4.12272      -17.8194       17.8194       55.2045       73.0239    
   3  0.446841E-01  -3.10814      -13.4341       13.4341       55.3763       68.8104    
   4  0.757954     -0.277132      -1.19783       1.19783       55.4946       56.6925    
   5  0.525315     -0.643757      -2.78247       2.78247       55.6220       58.4045    
   6  0.229940      -1.46994      -6.35342       6.35342       55.6930       62.0464    
   7  0.273310E-01  -3.59973      -15.5589       15.5589       57.1168       72.6757    
   8  0.228047      -1.47820      -6.38914       6.38914       55.0947       61.4838    
   9  0.963384E-01  -2.33989      -10.1136       10.1136       56.3917       66.5052    
  10  0.495504     -0.702179      -3.03498       3.03498       57.0666       60.1016    
  11  0.930436     -0.721018E-01 -0.311641      0.311641       55.9751       56.2867    
  12  0.138744      -1.97513      -8.53697       8.53697       55.6227       64.1596    
  13  0.676381     -0.390999      -1.68999       1.68999       55.7337       57.4237    
  14  0.763696     -0.269586      -1.16521       1.16521       55.6739       56.8392    
  15  0.282468      -1.26419      -5.46413       5.46413       55.6325       61.0967    
  16  0.359172      -1.02395      -4.42577       4.42577       54.3906       58.8163    
  17  0.392258     -0.935834      -4.04490       4.04490       55.5795       59.6244    
  18  0.524686     -0.644955      -2.78765       2.78765       56.1652       58.9529    
  19  0.850465     -0.161972     -0.700082      0.700082       54.4838       55.1839    
  20  0.227056      -1.48256      -6.40796       6.40796       56.8139       63.2218    
  21  0.942039     -0.597082E-01 -0.258073      0.258073       58.1204       58.3785    
  22  0.807336     -0.214016     -0.925027      0.925027       56.3664       57.2915    
  23  0.345853      -1.06174      -4.58910       4.58910       56.5522       61.1413    
  24  0.762940     -0.270575      -1.16949       1.16949       55.9013       57.0708    
  25  0.589959     -0.527702      -2.28085       2.28085       56.3102       58.5910    
  26  0.563539     -0.573518      -2.47888       2.47888       55.8656       58.3445    
  27  0.812044     -0.208201     -0.899895      0.899895       55.4360       56.3359    
  28  0.735850     -0.306729      -1.32576       1.32576       55.6701       56.9959    
  29  0.396292     -0.925605      -4.00068       4.00068       56.3681       60.3687    
  30  0.623568     -0.472298      -2.04138       2.04138       55.9295       57.9709    
  31  0.925937     -0.769486E-01 -0.332590      0.332590       55.0105       55.3431    
  32  0.880074     -0.127749     -0.552163      0.552163       57.1320       57.6842    
  33  0.379958     -0.967693      -4.18260       4.18260       55.3930       59.5756    
  34  0.842940E-01  -2.47344      -10.6908       10.6908       56.6218       67.3126    
  35  0.199092      -1.61399      -6.97604       6.97604       55.4965       62.4725    
  36  0.625899     -0.468566      -2.02525       2.02525       57.3874       59.4126    
  37  0.888337     -0.118405     -0.511772      0.511772       55.5327       56.0445    
  38  0.959633     -0.412048E-01 -0.178097      0.178097       55.6113       55.7894    
  39  0.289813      -1.23852      -5.35317       5.35317       55.5209       60.8740    
  40  0.889440     -0.117163     -0.506407      0.506407       55.4608       55.9672    
  41  0.797260     -0.226575     -0.979309      0.979309       55.5148       56.4941    
  42  0.451097     -0.796073      -3.44082       3.44082       55.5979       59.0387    
  43  0.609578     -0.494989      -2.13946       2.13946       58.9674       61.1069    
  44  0.910850     -0.933770E-01 -0.403597      0.403597       54.6474       55.0510    
  45  0.448191     -0.802536      -3.46875       3.46875       55.8868       59.3556    
  46  0.831229     -0.184850     -0.798963      0.798963       55.4961       56.2950    
  47  0.246260      -1.40137      -6.05705       6.05705       57.3950       63.4521    
  48  0.280480      -1.27125      -5.49465       5.49465       55.8922       61.3869    
  49  0.161513      -1.82317      -7.88017       7.88017       56.3445       64.2247    
  50  0.337020      -1.08761      -4.70092       4.70092       56.7638       61.4647    
  51  0.160136      -1.83173      -7.91717       7.91717       55.4251       63.3423    
  52  0.268039      -1.31662      -5.69076       5.69076       67.6052       73.2959    
loop,thermsimp(1:2)       28  0.917959       17.8194    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158         55.41          0.95          0.99         23.87          0.46          0.05         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    159         55.35          1.00          1.02         24.13          0.22          0.05         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       28
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       29
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      158     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -9.31508       9.31508       54.6474       63.9625    
   2  0.685048     -0.378267      -1.63496       1.63496       54.4838       56.1187    
   3  0.739526     -0.301746      -1.30422       1.30422       55.0105       56.3148    
   4  0.161448      -1.82357      -7.88190       7.88190       55.6113       63.4932    
   5  0.819608     -0.198929     -0.859819      0.859819       55.4608       56.3206    
   6  0.750679     -0.286777      -1.23952       1.23952       55.5327       56.7722    
   7  0.797409     -0.226388     -0.978501      0.978501       55.9751       56.9536    
   8  0.193123      -1.64443      -7.10762       7.10762       55.4961       62.6037    
   9  0.189346E-01  -3.96676      -17.1453       17.1453       55.4360       72.5813    
  10  0.715264     -0.335103      -1.44839       1.44839       55.5148       56.9632    
  11  0.384856     -0.954886      -4.12724       4.12724       55.6468       59.7741    
  12  0.268023      -1.31668      -5.69102       5.69102       55.4946       61.1857    
  13  0.777164     -0.252104      -1.08965       1.08965       55.6739       56.7636    
  14  0.707495E-01  -2.64861      -11.4479       11.4479       55.6701       67.1180    
  15  0.233610      -1.45410      -6.28497       6.28497       55.9013       62.1862    
  16  0.193057      -1.64477      -7.10909       7.10909       56.3664       63.4755    
  17  0.486879     -0.719739      -3.11088       3.11088       55.7337       58.8446    
  18  0.735370     -0.307381      -1.32858       1.32858       57.1320       58.4606    
  19  0.147509      -1.91387      -8.27219       8.27219       55.9295       64.2017    
  20  0.739111     -0.302308      -1.30664       1.30664       55.8656       57.1722    
  21  0.886241     -0.120766     -0.521979      0.521979       58.1204       58.6424    
  22  0.158672      -1.84092      -7.95687       7.95687       55.6220       63.5789    
  23  0.143658      -1.94032      -8.38653       8.38653       56.3102       64.6967    
  24  0.637431E-02  -5.05548      -21.8510       21.8510       54.3906       76.2416    
  25  0.753372     -0.283196      -1.22404       1.22404       56.1652       57.3893    
  26  0.555831     -0.587292      -2.53841       2.53841       55.5979       58.1363    
  27  0.280013      -1.27292      -5.50186       5.50186       55.8868       61.3887    
  28  0.811304     -0.209112     -0.903834      0.903834       57.3874       58.2912    
  29  0.972296E-02  -4.63327      -20.0261       20.0261       55.3930       75.4190    
  30  0.713459     -0.337631      -1.45932       1.45932       55.5795       57.0389    
  31  0.194621      -1.63670      -7.07420       7.07420       57.0666       64.1408    
  32  0.492587     -0.708083      -3.06050       3.06050       56.3681       59.4286    
  33  0.759094E-01  -2.57821      -11.1437       11.1437       55.5209       66.6645    
  34  0.494544     -0.704119      -3.04337       3.04337       55.6325       58.6759    
  35  0.297023      -1.21395      -5.24697       5.24697       58.9674       64.2144    
  36  0.429878E-01  -3.14684      -13.6014       13.6014       56.5522       70.1536    
  37  0.490931     -0.711452      -3.07506       3.07506       55.8922       58.9673    
  38  0.534417     -0.626578      -2.70822       2.70822       56.7638       59.4720    
  39  0.254967      -1.36662      -5.90685       5.90685       55.0947       61.0016    
  40  0.995945     -0.406335E-02 -0.175628E-01  0.175628E-01   55.6930       55.7105    
  41  0.428814E-01  -3.14932      -13.6121       13.6121       55.4965       69.1086    
  42  0.332915      -1.09987      -4.75389       4.75389       56.8139       61.5678    
  43  0.657266     -0.419666      -1.81390       1.81390       55.4251       57.2390    
  44  0.301071      -1.20041      -5.18845       5.18845       57.3950       62.5835    
  45  0.998178     -0.182349E-02 -0.788157E-02  0.788157E-02   55.6227       55.6306    
  46  0.533372     -0.628536      -2.71668       2.71668       56.3445       59.0612    
  47  0.244746      -1.40753      -6.08369       6.08369       56.3917       62.4754    
  48  0.345321      -1.06328      -4.59576       4.59576       56.6218       61.2176    
  49  0.339541      -1.08016      -4.66872       4.66872       55.3763       60.0451    
  50  0.456434     -0.784311      -3.38998       3.38998       57.1168       60.5068    
  51  0.510210     -0.672933      -2.90858       2.90858       55.2045       58.1131    
  52  0.678441     -0.387958      -1.67685       1.67685       55.3547       57.0316    
loop,thermsimp(1:2)       29   9.31508       1.63496    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160         57.39          1.01          1.00         24.09          0.35          0.05         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     57.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       29
neval is:      159
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       30
neval is:      159


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      159     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -13.9519       13.9519       55.6227       69.5746    
   2  0.712690     -0.338709      -1.46398       1.46398       55.6930       57.1569    
   3  0.284498      -1.25703      -5.43318       5.43318       54.4838       59.9170    
   4  0.132414      -2.02182      -8.73879       8.73879       55.0105       63.7493    
   5  0.868558     -0.140920     -0.609091      0.609091       55.4608       56.0699    
   6  0.695240     -0.363498      -1.57112       1.57112       55.6739       57.2451    
   7  0.777362     -0.251849      -1.08855       1.08855       55.5327       56.6212    
   8  0.302494      -1.19569      -5.16807       5.16807       55.9751       61.1432    
   9  0.710188     -0.342225      -1.47918       1.47918       55.5148       56.9940    
  10  0.884530     -0.122698     -0.530331      0.530331       55.3547       55.8851    
  11  0.146421E-01  -4.22386      -18.2565       18.2565       55.5795       73.8360    
  12  0.834801     -0.180562     -0.780430      0.780430       55.8656       56.6460    
  13  0.414011     -0.881863      -3.81162       3.81162       55.4251       59.2367    
  14  0.655777     -0.421935      -1.82370       1.82370       56.1652       57.9889    
  15  0.530106     -0.634679      -2.74323       2.74323       55.2045       57.9477    
  16  0.325231      -1.12322      -4.85482       4.85482       55.5979       60.4527    
  17  0.293550      -1.22571      -5.29780       5.29780       57.3874       62.6852    
  18  0.194161      -1.63907      -7.08445       7.08445       57.1320       64.2165    
  19  0.589029E-01  -2.83186      -12.2400       12.2400       58.1204       70.3604    
  20  0.385142     -0.954143      -4.12403       4.12403       55.6325       59.7566    
  21  0.287461      -1.24667      -5.38839       5.38839       55.7337       61.1221    
  22  0.528518     -0.637678      -2.75620       2.75620       55.8922       58.6484    
  23  0.517042     -0.659630      -2.85108       2.85108       56.3445       59.1956    
  24  0.453375     -0.791035      -3.41904       3.41904       56.3681       59.7871    
  25  0.695596     -0.362986      -1.56891       1.56891       56.7638       58.3327    
  26  0.645178     -0.438228      -1.89413       1.89413       55.6468       57.5410    
  27  0.696076     -0.362297      -1.56593       1.56593       55.3763       56.9423    
  28  0.483522     -0.726659      -3.14079       3.14079       57.1168       60.2576    
  29  0.155396E-01  -4.16436      -17.9994       17.9994       55.0947       73.0941    
  30  0.883154     -0.124256     -0.537064      0.537064       55.4946       56.0317    
  31  0.525944     -0.642561      -2.77730       2.77730       56.6218       59.3991    
  32  0.746799     -0.291959      -1.26191       1.26191       55.8868       57.1487    
  33  0.458658     -0.779449      -3.36896       3.36896       56.8139       60.1828    
  34  0.614284     -0.487298      -2.10622       2.10622       55.9013       58.0075    
  35  0.581412     -0.542295      -2.34393       2.34393       56.3917       58.7356    
  36  0.820935     -0.197312     -0.852828      0.852828       57.3950       58.2478    
  37  0.852366     -0.159739     -0.690430      0.690430       55.4961       56.1865    
  38  0.527059     -0.640443      -2.76814       2.76814       56.3664       59.1346    
  39  0.376404     -0.977092      -4.22322       4.22322       55.6113       59.8345    
  40  0.729525E-01  -2.61795      -11.3154       11.3154       55.6220       66.9374    
  41  0.342258      -1.07219      -4.63426       4.63426       54.6474       59.2817    
  42  0.955065     -0.459761E-01 -0.198719      0.198719       57.0666       57.2654    
  43  0.508654E-01  -2.97857      -12.8741       12.8741       55.9295       68.8036    
  44  0.471716     -0.751379      -3.24764       3.24764       58.9674       62.2151    
  45  0.137118      -1.98691      -8.58792       8.58792       56.3102       64.8981    
  46  0.844826     -0.168625     -0.728835      0.728835       55.5209       56.2497    
  47  0.841708     -0.172322     -0.744816      0.744816       55.6701       56.4149    
  48  0.360396E-01  -3.32314      -14.3634       14.3634       55.4965       69.8599    
  49  0.953282     -0.478444E-01 -0.206795      0.206795       56.5522       56.7590    
  50  0.503408     -0.686355      -2.96659       2.96659       55.4360       58.4026    
  51  0.593854     -0.521122      -2.25241       2.25241       55.3930       57.6454    
  52  0.524910     -0.644528      -2.78580       2.78580       57.3931       60.1789    
loop,thermsimp(1:2)       30   13.9519       1.46398    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    161         56.44          1.01          0.99         24.05          0.30          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    162         59.19          0.97          0.99         24.04          0.40          0.06         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    56.441        3.013     -1.337      5.145     -100.0      1.256    
                     -0.6418      2.653     -100.0      2.538      1.220    
                       1.405    -0.8649      1.841      0.000      0.000    
                      -1.427      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.203     -2.800     -5.352     -2.833    
                      -13.99     -2.568      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.4165E-01 0.3049E-01  0.000    -0.8803    
                     -0.1888    -0.3085    -0.1385    -0.1689    -0.5620E-01

                      -1.130    -0.7247      0.000    -0.1799E-01-0.1503E-01
                      0.8541E-01-0.2156E-01-0.4996E-01-0.4389    -0.1704    
                      0.1356     0.8344E-01-0.1494    -0.8818      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.339      9.139     -7039.     -4.000    
                     -0.3946     0.7214E-01  9.001      8.543     -4904.    

                      -4.000    -0.4705E-01-0.4775      8.794      9.035    
                      -6912.     -4.000    -0.1667    -0.5243      9.523    
                       8.798     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     56.44
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       30
neval is:      161
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       31
neval is:      161


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      161     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -6.01650       6.01650       55.3547       61.3712    
   2  0.247647      -1.39575      -6.03277       6.03277       55.4946       61.5274    
   3  0.396263     -0.925678      -4.00100       4.00100       55.4608       59.4618    
   4  0.386461     -0.950723      -4.10925       4.10925       55.4961       59.6053    
   5  0.729285     -0.315691      -1.36449       1.36449       55.5209       56.8854    
   6  0.665866     -0.406667      -1.75771       1.75771       55.6701       57.4278    
   7  0.385122     -0.954194      -4.12425       4.12425       55.5327       59.6569    
   8  0.625701     -0.468883      -2.02662       2.02662       55.8656       57.8922    
   9  0.392668     -0.934792      -4.04039       4.04039       56.5522       60.5926    
  10  0.698356     -0.359026      -1.55180       1.55180       55.3763       56.9281    
  11  0.537534E-01  -2.92335      -12.6354       12.6354       55.5148       68.1502    
  12  0.289307      -1.24027      -5.36073       5.36073       55.8868       61.2475    
  13  0.138460E-01  -4.27976      -18.4981       18.4981       55.6930       74.1911    
  14  0.824110     -0.193451     -0.836140      0.836140       55.6739       56.5101    
  15  0.560983     -0.578065      -2.49853       2.49853       57.0666       59.5652    
  16  0.116087E-01  -4.45600      -19.2599       19.2599       55.6468       74.9067    
  17  0.218033      -1.52311      -6.58323       6.58323       55.3930       61.9762    
  18  0.893705E-01  -2.41497      -10.4381       10.4381       55.2045       65.6425    
  19  0.304886      -1.18782      -5.13402       5.13402       56.1652       61.2993    
  20  0.179833      -1.71573      -7.41579       7.41579       55.9013       63.3171    
  21  0.867378     -0.142281     -0.614971      0.614971       57.3950       58.0100    
  22  0.243287      -1.41351      -6.10954       6.10954       56.7638       62.8733    
  23  0.772489     -0.258138      -1.11573       1.11573       55.4360       56.5517    
  24  0.321011      -1.13628      -4.91127       4.91127       55.8922       60.8035    
  25  0.499417     -0.694314      -3.00099       3.00099       56.3917       59.3927    
  26  0.396806     -0.924307      -3.99508       3.99508       56.3664       60.3615    
  27  0.580203E-01  -2.84696      -12.3052       12.3052       56.3445       68.6498    
  28  0.854206     -0.157583     -0.681110      0.681110       55.4251       56.1062    
  29  0.914649     -0.892145E-01 -0.385606      0.385606       54.6474       55.0330    
  30  0.167601      -1.78617      -7.72025       7.72025       56.6218       64.3421    
  31  0.350137      -1.04943      -4.53589       4.53589       55.6325       60.1684    
  32  0.522932     -0.648304      -2.80212       2.80212       56.3681       59.1702    
  33  0.538779     -0.618450      -2.67309       2.67309       55.6113       58.2844    
  34  0.693066     -0.366629      -1.58466       1.58466       54.4838       56.0684    
  35  0.361961      -1.01622      -4.39234       4.39234       57.3931       61.7854    
  36  0.310665      -1.16904      -5.05287       5.05287       56.8139       61.8667    
  37  0.818669     -0.200076     -0.864775      0.864775       57.1168       57.9816    
  38  0.582861     -0.539807      -2.33317       2.33317       55.5979       57.9310    
  39  0.401728     -0.911979      -3.94179       3.94179       55.7337       59.6755    
  40  0.171089      -1.76557      -7.63122       7.63122       55.9751       63.6063    
  41  0.980174     -0.200248E-01 -0.865519E-01  0.865519E-01   58.9674       59.0540    
  42  0.495496     -0.702196      -3.03506       3.03506       57.3874       60.4224    
  43  0.436683     -0.828549      -3.58118       3.58118       55.0105       58.5917    
  44  0.910411     -0.938588E-01 -0.405680      0.405680       57.1320       57.5377    
  45  0.649932     -0.430887      -1.86240       1.86240       56.3102       58.1726    
  46  0.755226     -0.280738      -1.21341       1.21341       55.6220       56.8354    
  47  0.927352     -0.754221E-01 -0.325992      0.325992       55.9295       56.2555    
  48  0.848028     -0.164842     -0.712485      0.712485       55.6227       56.3352    
  49  0.146193      -1.92283      -8.31093       8.31093       55.4965       63.8074    
  50  0.571278     -0.559879      -2.41993       2.41993       58.1204       60.5403    
  51  0.244418      -1.40888      -6.08950       6.08950       55.0947       61.1842    
  52  0.979014     -0.212091E-01 -0.916706E-01  0.916706E-01   56.4406       56.5323    
loop,thermsimp(1:2)       31   6.01650       6.03277    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    163         55.96          1.11          1.02         24.02          0.11          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    164         56.48          0.98          1.00         24.14          0.22          0.05         26.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       31
neval is:      163
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       32
neval is:      163


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      163     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.170192E-01  0.170192E-01   54.6474       54.6644    
   2  0.758684E-02  -4.88134      -21.0983       21.0983       54.4838       75.5821    
   3  0.404439     -0.905254      -3.91272       3.91272       55.4251       59.3378    
   4  0.947917E-01  -2.35607      -10.1835       10.1835       55.9295       66.1130    
   5  0.834417     -0.181022     -0.782421      0.782421       55.6227       56.4051    
   6  0.891274     -0.115104     -0.497506      0.497506       55.6739       56.1714    
   7  0.744451     -0.295108      -1.27553       1.27553       56.4406       57.7161    
   8  0.559638     -0.580466      -2.50891       2.50891       55.4360       57.9449    
   9  0.821724     -0.196351     -0.848674      0.848674       55.6220       56.4707    
  10  0.847292     -0.165710     -0.716236      0.716236       55.5209       56.2371    
  11  0.661676     -0.412979      -1.78499       1.78499       55.3763       57.1613    
  12  0.993427     -0.659478E-02 -0.285042E-01  0.285042E-01   55.6701       55.6986    
  13  0.425996     -0.853326      -3.68828       3.68828       57.1320       60.8203    
  14  0.673132     -0.395813      -1.71080       1.71080       55.8656       57.5764    
  15  0.234810      -1.44898      -6.26283       6.26283       55.5979       61.8607    
  16  0.122926      -2.09617      -9.06015       9.06015       57.1168       66.1770    
  17  0.523553     -0.647118      -2.79700       2.79700       57.3950       60.1920    
  18  0.959317     -0.415333E-01 -0.179517      0.179517       56.3102       56.4897    
  19  0.321726      -1.13406      -4.90166       4.90166       55.6113       60.5129    
  20  0.493112     -0.707018      -3.05590       3.05590       55.0105       58.0664    
  21  0.416134     -0.876748      -3.78951       3.78951       58.9674       62.7570    
  22  0.409432     -0.892985      -3.85969       3.85969       56.3681       60.2277    
  23  0.657956     -0.418617      -1.80936       1.80936       56.3917       58.2010    
  24  0.904324     -0.100567     -0.434676      0.434676       55.4608       55.8955    
  25  0.714426     -0.336276      -1.45347       1.45347       57.0666       58.5201    
  26  0.150521      -1.89365      -8.18481       8.18481       55.4961       63.6809    
  27  0.758740     -0.276096      -1.19335       1.19335       55.5327       56.7260    
  28  0.359105      -1.02414      -4.42658       4.42658       55.7337       60.1603    
  29  0.666937     -0.405060      -1.75076       1.75076       55.6325       57.3833    
  30  0.343213      -1.06940      -4.62222       4.62222       56.3664       60.9886    
  31  0.484849     -0.723918      -3.12895       3.12895       57.3874       60.5163    
  32  0.874661     -0.133919     -0.578829      0.578829       58.1204       58.6992    
  33  0.994710     -0.530415E-02 -0.229258E-01  0.229258E-01   56.5522       56.5751    
  34  0.821923     -0.196109     -0.847630      0.847630       55.8922       56.7398    
  35  0.954096E-02  -4.65216      -20.1077       20.1077       55.0947       75.2024    
  36  0.240030      -1.42699      -6.16779       6.16779       55.8868       62.0546    
  37  0.279003      -1.27653      -5.51747       5.51747       56.1652       61.6827    
  38  0.553830     -0.590898      -2.55400       2.55400       55.3547       57.9087    
  39  0.400809     -0.914271      -3.95170       3.95170       55.4946       59.4463    
  40  0.146125      -1.92330      -8.31294       8.31294       57.3931       65.7060    
  41  0.811879     -0.208403     -0.900769      0.900769       56.8139       57.7146    
  42  0.349149      -1.05226      -4.54811       4.54811       55.3930       59.9411    
  43  0.897422     -0.108229     -0.467791      0.467791       56.7638       57.2316    
  44  0.114492      -2.16725      -9.36737       9.36737       55.9013       65.2686    
  45  0.831901E-01  -2.48663      -10.7478       10.7478       55.9751       66.7229    
  46  0.721169     -0.326882      -1.41286       1.41286       55.4965       56.9093    
  47  0.801724     -0.220991     -0.955176      0.955176       56.6218       57.5770    
  48  0.466569     -0.762349      -3.29505       3.29505       55.2045       58.4995    
  49  0.103404      -2.26911      -9.80764       9.80764       55.5148       65.3225    
  50  0.417206     -0.874175      -3.77839       3.77839       56.3445       60.1229    
  51  0.267666      -1.31802      -5.69677       5.69677       55.6930       61.3897    
  52  0.670232     -0.400131      -1.72946       1.72946       55.9570       57.6864    
loop,thermsimp(1:2)       32  0.170192E-01   21.0983    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    165         57.80          1.01          0.98         23.82          0.47          0.05         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     57.80
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       32
neval is:      164
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       33
neval is:      164


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      164     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160      -3.39797       3.39797       54.6474       58.0454    
   2  0.588265E-01  -2.83316      -12.2456       12.2456       55.6701       67.9157    
   3  0.787103E-01  -2.54198      -10.9870       10.9870       55.4608       66.4479    
   4  0.597713     -0.514644      -2.22441       2.22441       55.6739       57.8984    
   5  0.110741      -2.20056      -9.51135       9.51135       55.5209       65.0322    
   6  0.677861     -0.388813      -1.68054       1.68054       55.6227       57.3032    
   7  0.307724      -1.17855      -5.09398       5.09398       55.6220       60.7160    
   8  0.550587     -0.596770      -2.57938       2.57938       56.3102       58.8896    
   9  0.601295     -0.508669      -2.19859       2.19859       56.5522       58.7508    
  10  0.487121     -0.719243      -3.10874       3.10874       55.5327       58.6414    
  11  0.146295      -1.92213      -8.30789       8.30789       55.8922       64.2001    
  12  0.714050     -0.336802      -1.45574       1.45574       55.4965       56.9522    
  13  0.723089     -0.324223      -1.40137       1.40137       55.3763       56.7777    
  14  0.805432     -0.216376     -0.935229      0.935229       56.7638       57.6990    
  15  0.123280      -2.09329      -9.04771       9.04771       55.6325       64.6802    
  16  0.853039     -0.158950     -0.687021      0.687021       55.8656       56.5526    
  17  0.288289      -1.24379      -5.37596       5.37596       56.6218       61.9978    
  18  0.705126     -0.349379      -1.51010       1.51010       55.9570       57.4671    
  19  0.772420     -0.258227      -1.11612       1.11612       56.8139       57.9300    
  20  0.962845     -0.378631E-01 -0.163653      0.163653       56.4406       56.6043    
  21  0.245802      -1.40323      -6.06508       6.06508       55.3547       61.4198    
  22  0.752702     -0.284087      -1.22789       1.22789       55.4360       56.6639    
  23  0.729896     -0.314853      -1.36087       1.36087       55.0105       56.3714    
  24  0.869278     -0.140092     -0.605512      0.605512       56.3917       56.9972    
  25  0.597817E-01  -2.81706      -12.1760       12.1760       55.2045       67.3805    
  26  0.984108     -0.160195E-01 -0.692401E-01  0.692401E-01   57.0666       57.1359    
  27  0.278288      -1.27910      -5.52857       5.52857       58.1204       63.6490    
  28  0.588278     -0.530555      -2.29318       2.29318       55.4251       57.7183    
  29  0.807614     -0.213671     -0.923538      0.923538       55.4946       56.4182    
  30  0.428679     -0.847047      -3.66114       3.66114       55.3930       59.0541    
  31  0.452991     -0.791883      -3.42271       3.42271       56.3445       59.7672    
  32  0.678742     -0.387514      -1.67493       1.67493       55.7337       57.4087    
  33  0.504500     -0.684188      -2.95722       2.95722       57.3950       60.3522    
  34  0.894800     -0.111155     -0.480438      0.480438       56.3681       56.8485    
  35  0.854311     -0.157461     -0.680582      0.680582       55.6113       56.2918    
  36  0.756230     -0.279410      -1.20768       1.20768       57.3874       58.5951    
  37  0.744369     -0.295219      -1.27601       1.27601       57.1320       58.4080    
  38  0.435758     -0.830668      -3.59034       3.59034       56.3664       59.9568    
  39  0.677387     -0.389513      -1.68357       1.68357       55.6930       57.3765    
  40  0.504989     -0.683219      -2.95303       2.95303       56.1652       59.1183    
  41  0.325676      -1.12185      -4.84891       4.84891       55.5979       60.4468    
  42  0.147207      -1.91591      -8.28103       8.28103       55.8868       64.1678    
  43  0.432041     -0.839234      -3.62737       3.62737       58.9674       62.5948    
  44  0.615972     -0.484555      -2.09436       2.09436       55.4961       57.5904    
  45  0.150867      -1.89136      -8.17489       8.17489       55.9013       64.0762    
  46  0.464307     -0.767210      -3.31606       3.31606       55.5148       58.8309    
  47  0.379753     -0.968234      -4.18494       4.18494       57.3931       61.5780    
  48  0.886192     -0.120822     -0.522220      0.522220       55.9295       56.4517    
  49  0.231751E-01  -3.76468      -16.2718       16.2718       57.1168       73.3887    
  50  0.257662      -1.35611      -5.86141       5.86141       55.9751       61.8365    
  51  0.470381E-01  -3.05680      -13.2122       13.2122       55.0947       68.3069    
  52  0.972366     -0.280233E-01 -0.121123      0.121123       57.8006       57.9217    
loop,thermsimp(1:2)       33   3.39797       12.2456    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166         55.19          1.05          1.00         23.95          0.33          0.06         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    167         57.15          1.02          1.00         24.19          0.11          0.05         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       33
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       34
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      166     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -10.1216       10.1216       55.6113       65.7329    
   2  0.298819      -1.20792      -5.22091       5.22091       55.0105       60.2314    
   3  0.706385     -0.347595      -1.50239       1.50239       55.4946       56.9970    
   4  0.958764     -0.421100E-01 -0.182009      0.182009       55.9295       56.1115    
   5  0.306496      -1.18255      -5.11126       5.11126       55.8656       60.9769    
   6  0.905447     -0.993270E-01 -0.429315      0.429315       56.4406       56.8699    
   7  0.234113      -1.45195      -6.27567       6.27567       55.4360       61.7117    
   8  0.704141     -0.350777      -1.51614       1.51614       55.3763       56.8925    
   9  0.908200     -0.962902E-01 -0.416189      0.416189       56.3681       56.7842    
  10  0.656383     -0.421011      -1.81971       1.81971       55.4965       57.3162    
  11  0.967894     -0.326327E-01 -0.141046      0.141046       56.3917       56.5327    
  12  0.754670     -0.281475      -1.21660       1.21660       57.0666       58.2833    
  13  0.488960     -0.715475      -3.09245       3.09245       55.6227       58.7151    
  14  0.451577     -0.795009      -3.43622       3.43622       55.6930       59.1292    
  15  0.387599E-01  -3.25037      -14.0489       14.0489       55.7337       69.7826    
  16  0.210942E-02  -6.16134      -26.6308       26.6308       55.9570       82.5878    
  17  0.656530     -0.420787      -1.81874       1.81874       55.4961       57.3148    
  18  0.181246      -1.70790      -7.38195       7.38195       56.7638       64.1458    
  19  0.758879     -0.275913      -1.19256       1.19256       55.4251       56.6177    
  20  0.392052     -0.936362      -4.04718       4.04718       55.6739       59.7211    
  21  0.406710     -0.899654      -3.88852       3.88852       57.8006       61.6891    
  22  0.830107     -0.186201     -0.804803      0.804803       56.8139       57.6187    
  23  0.311833      -1.16529      -5.03665       5.03665       54.6474       59.6841    
  24  0.945407     -0.561396E-01 -0.242649      0.242649       57.1320       57.3747    
  25  0.303319      -1.19297      -5.15630       5.15630       57.3874       62.5437    
  26  0.284230      -1.25797      -5.43725       5.43725       55.5327       60.9699    
  27  0.292492      -1.22932      -5.31340       5.31340       56.5522       61.8656    
  28  0.401496     -0.912557      -3.94429       3.94429       55.5148       59.4591    
  29  0.379648     -0.968510      -4.18613       4.18613       56.3102       60.4963    
  30  0.723496E-01  -2.62625      -11.3513       11.3513       55.3930       66.7442    
  31  0.940338     -0.615157E-01 -0.265886      0.265886       56.1652       56.4311    
  32  0.766237     -0.266264      -1.15085       1.15085       56.3445       57.4954    
  33  0.984920     -0.151946E-01 -0.656746E-01  0.656746E-01   56.3664       56.4321    
  34  0.552546     -0.593218      -2.56403       2.56403       57.3950       59.9590    
  35  0.735557     -0.307128      -1.32748       1.32748       55.5979       56.9253    
  36  0.142195      -1.95056      -8.43076       8.43076       55.6220       64.0528    
  37  0.304783      -1.18816      -5.13549       5.13549       55.3547       60.4902    
  38  0.868582     -0.140894     -0.608976      0.608976       57.3931       58.0020    
  39  0.382741     -0.960397      -4.15106       4.15106       55.9751       60.1262    
  40  0.273812      -1.29531      -5.59865       5.59865       56.6218       62.2205    
  41  0.601920     -0.507631      -2.19410       2.19410       58.9674       61.1615    
  42  0.827744     -0.189051     -0.817125      0.817125       58.1204       58.9375    
  43  0.881186E-01  -2.42907      -10.4990       10.4990       55.9013       66.4003    
  44  0.386744     -0.949994      -4.10610       4.10610       55.8868       59.9929    
  45  0.852312     -0.159803     -0.690706      0.690706       55.8922       56.5829    
  46  0.830189     -0.186102     -0.804379      0.804379       55.6325       56.4369    
  47  0.216531      -1.53002      -6.61312       6.61312       55.5209       62.1340    
  48  0.835540     -0.179677     -0.776607      0.776607       55.4608       56.2374    
  49  0.962152     -0.385824E-01 -0.166762      0.166762       55.2045       55.3712    
  50  0.866477     -0.143320     -0.619461      0.619461       55.6701       56.2896    
  51  0.640111     -0.446114      -1.92821       1.92821       55.0947       57.0229    
  52  0.103467      -2.26850      -9.80501       9.80501       55.1919       64.9969    
loop,thermsimp(1:2)       34   10.1216       5.22091    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168         55.68          1.03          0.99         23.97          0.37          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    169         57.04          1.03          1.00         24.10          0.15          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       34
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       35
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      168     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -4.56116       4.56116       55.2045       59.7656    
   2  0.175000      -1.74297      -7.53354       7.53354       55.9295       63.4630    
   3  0.131587      -2.02809      -8.76589       8.76589       55.4608       64.2267    
   4  0.301717      -1.19826      -5.17918       5.17918       55.6701       60.8493    
   5  0.166877      -1.79050      -7.73897       7.73897       56.1652       63.9042    
   6  0.481073     -0.731736      -3.16273       3.16273       56.3664       59.5292    
   7  0.706381     -0.347600      -1.50241       1.50241       55.6325       57.1349    
   8  0.702617     -0.352943      -1.52550       1.52550       56.3917       57.9172    
   9  0.552795     -0.592767      -2.56208       2.56208       55.8922       58.4543    
  10  0.495420     -0.702349      -3.03572       3.03572       55.4251       58.4608    
  11  0.479343     -0.735339      -3.17831       3.17831       56.3681       59.5464    
  12  0.462659     -0.770765      -3.33143       3.33143       56.4406       59.7720    
  13  0.631315E-01  -2.76253      -11.9403       11.9403       55.3763       67.3167    
  14  0.785681     -0.241205      -1.04254       1.04254       55.5979       56.6404    
  15  0.767932     -0.264055      -1.14131       1.14131       55.4946       56.6359    
  16  0.262689E-01  -3.63937      -15.7302       15.7302       55.0947       70.8249    
  17  0.871353     -0.137708     -0.595207      0.595207       55.4961       56.0913    
  18  0.618350     -0.480701      -2.07770       2.07770       55.4965       57.5742    
  19  0.196090      -1.62918      -7.04172       7.04172       57.1320       64.1737    
  20  0.925050     -0.779078E-01 -0.336736      0.336736       56.3445       56.6813    
  21  0.903269     -0.101735     -0.439723      0.439723       56.8139       57.2536    
  22  0.958828     -0.420436E-01 -0.181722      0.181722       57.3931       57.5748    
  23  0.969274     -0.312081E-01 -0.134889      0.134889       57.0666       57.2015    
  24  0.313932      -1.15858      -5.00765       5.00765       55.6227       60.6303    
  25  0.106324      -2.24126      -9.68727       9.68727       58.1204       67.8077    
  26  0.718705     -0.330304      -1.42765       1.42765       55.6930       57.1206    
  27  0.751116     -0.286195      -1.23700       1.23700       55.5148       56.7518    
  28  0.996391     -0.361592E-02 -0.156289E-01  0.156289E-01   54.6474       54.6630    
  29  0.313387      -1.16032      -5.01517       5.01517       55.6739       60.6891    
  30  0.305057      -1.18726      -5.13160       5.13160       57.3950       62.5266    
  31  0.408833     -0.894447      -3.86601       3.86601       55.8868       59.7528    
  32  0.589856     -0.527877      -2.28161       2.28161       55.9751       58.2567    
  33  0.808683     -0.212349     -0.917822      0.917822       55.0105       55.9284    
  34  0.481635     -0.730569      -3.15769       3.15769       55.3547       58.5124    
  35  0.677481     -0.389374      -1.68297       1.68297       56.3102       57.9931    
  36  0.673605     -0.395111      -1.70776       1.70776       55.5327       57.2405    
  37  0.409374E-01  -3.19571      -13.8126       13.8126       55.8656       69.6782    
  38  0.362144      -1.01571      -4.39016       4.39016       58.9674       63.3576    
  39  0.364718E-01  -3.31122      -14.3119       14.3119       57.8006       72.1125    
  40  0.280272      -1.27199      -5.49786       5.49786       55.4360       60.9339    
  41  0.532528     -0.630120      -2.72353       2.72353       56.5522       59.2757    
  42  0.901591     -0.103595     -0.447761      0.447761       55.5209       55.9686    
  43  0.262858      -1.33614      -5.77511       5.77511       56.6218       62.3969    
  44  0.168755      -1.77931      -7.69060       7.69060       57.3874       65.0780    
  45  0.504619     -0.683952      -2.95620       2.95620       55.6220       58.5782    
  46  0.900650     -0.104639     -0.452273      0.452273       56.7638       57.2161    
  47  0.438495     -0.824406      -3.56328       3.56328       55.1919       58.7552    
  48  0.984597     -0.155233E-01 -0.670955E-01  0.670955E-01   55.6113       55.6784    
  49  0.469739     -0.755579      -3.26579       3.26579       55.9013       59.1671    
  50  0.252111      -1.37789      -5.95555       5.95555       55.3930       61.3485    
  51  0.764692     -0.268282      -1.15958       1.15958       55.7337       56.8933    
  52  0.848445     -0.164351     -0.710362      0.710362       55.6766       56.3870    
loop,thermsimp(1:2)       35   4.56116       7.53354    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170         54.39          1.00          1.00         23.81          0.46          0.05         26.32
Just calling func    0   0         26.31


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    171         55.38          0.97          1.00         23.73          0.54          0.05         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       35
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       36
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      170     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -11.1504       11.1504       54.6474       65.7978    
   2  0.962370     -0.383559E-01 -0.165783      0.165783       55.6113       55.7770    
   3  0.356737      -1.03076      -4.45517       4.45517       55.0105       59.4657    
   4  0.884319     -0.122937     -0.531364      0.531364       55.5209       56.0522    
   5  0.919725E-01  -2.38627      -10.3140       10.3140       55.4961       65.8101    
   6  0.900184     -0.105156     -0.454509      0.454509       55.6766       56.1311    
   7  0.390055     -0.941468      -4.06925       4.06925       55.4946       59.5639    
   8  0.263976      -1.33190      -5.75678       5.75678       55.5979       61.3546    
   9  0.898455     -0.107078     -0.462818      0.462818       56.3445       56.8073    
  10  0.697674E-01  -2.66259      -11.5083       11.5083       55.5148       67.0232    
  11  0.888938     -0.117727     -0.508845      0.508845       55.7337       56.2426    
  12  0.824147     -0.193406     -0.835946      0.835946       55.6930       56.5289    
  13  0.941109     -0.606968E-01 -0.262346      0.262346       55.6325       55.8949    
  14  0.885654     -0.121429     -0.524844      0.524844       57.0666       57.5915    
  15  0.798208     -0.225386     -0.974170      0.974170       56.7638       57.7380    
  16  0.365331      -1.00695      -4.35229       4.35229       55.5327       59.8850    
  17  0.519490     -0.654907      -2.83066       2.83066       56.8139       59.6445    
  18  0.922741     -0.804065E-01 -0.347536      0.347536       55.4965       55.8440    
  19  0.877443     -0.130744     -0.565105      0.565105       57.3931       57.9582    
  20  0.584844     -0.536410      -2.31849       2.31849       56.3917       58.7102    
  21  0.671390     -0.398406      -1.72200       1.72200       56.3102       58.0322    
  22  0.203335      -1.59290      -6.88489       6.88489       55.9751       62.8600    
  23  0.330236E-01  -3.41053      -14.7411       14.7411       55.8922       70.6333    
  24  0.879725     -0.128146     -0.553879      0.553879       55.4251       55.9790    
  25  0.833976     -0.181550     -0.784704      0.784704       55.3547       56.1394    
  26  0.901698     -0.103475     -0.447244      0.447244       55.6220       56.0693    
  27  0.692847     -0.366946      -1.58603       1.58603       55.1919       56.7780    
  28  0.550572     -0.596797      -2.57950       2.57950       55.9013       58.4808    
  29  0.158383E-01  -4.14532      -17.9171       17.9171       56.5522       74.4693    
  30  0.503246     -0.686677      -2.96798       2.96798       56.3664       59.3344    
  31  0.648812     -0.432612      -1.86985       1.86985       56.3681       58.2379    
  32  0.306980      -1.18097      -5.10444       5.10444       55.8868       60.9913    
  33  0.205188      -1.58383      -6.84569       6.84569       55.2045       62.0502    
  34  0.265146      -1.32748      -5.73766       5.73766       56.4406       62.1783    
  35  0.272730E-01  -3.60186      -15.5681       15.5681       55.6227       71.1908    
  36  0.262990E-01  -3.63823      -15.7253       15.7253       55.6739       71.3992    
  37  0.492753     -0.707748      -3.05905       3.05905       55.6701       58.7292    
  38  0.255065      -1.36624      -5.90519       5.90519       55.4360       61.3412    
  39  0.623259     -0.472794      -2.04353       2.04353       55.3930       57.4365    
  40  0.949296     -0.520343E-01 -0.224905      0.224905       56.6218       56.8467    
  41  0.982394     -0.177630E-01 -0.767758E-01  0.767758E-01   57.3950       57.4718    
  42  0.566450     -0.568366      -2.45661       2.45661       58.9674       61.4241    
  43  0.557613     -0.584090      -2.52458       2.52458       55.9295       58.4541    
  44  0.900731     -0.104549     -0.451885      0.451885       56.1652       56.6171    
  45  0.671339     -0.398481      -1.72233       1.72233       57.1320       58.8543    
  46  0.650454     -0.430084      -1.85893       1.85893       55.4608       57.3197    
  47  0.749315     -0.288595      -1.24738       1.24738       57.3874       58.6348    
  48  0.667497     -0.404220      -1.74713       1.74713       55.3763       57.1235    
  49  0.132870      -2.01838      -8.72394       8.72394       58.1204       66.8443    
  50  0.964787     -0.358480E-01 -0.154944      0.154944       55.8656       56.0205    
  51  0.835780     -0.179390     -0.775364      0.775364       55.0947       55.8701    
  52  0.601609     -0.508148      -2.19633       2.19633       54.3941       56.5904    
loop,thermsimp(1:2)       36   11.1504      0.165783    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172         56.46          1.09          1.00         24.09          0.14          0.06         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    173         61.23          0.98          0.99         23.92          0.38          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     56.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       36
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       37
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      172     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01 -0.271283      0.271283       55.6113       55.8825    
   2  0.112532E-01  -4.48710      -19.3943       19.3943       55.4965       74.8908    
   3  0.907929     -0.965891E-01 -0.417481      0.417481       55.0947       55.5122    
   4  0.478640     -0.736807      -3.18465       3.18465       55.6325       58.8172    
   5  0.737686     -0.304237      -1.31498       1.31498       55.4251       56.7401    
   6  0.114880      -2.16387      -9.35275       9.35275       55.8656       65.2183    
   7  0.309837      -1.17171      -5.06440       5.06440       55.5209       60.5853    
   8  0.469091     -0.756958      -3.27175       3.27175       55.6220       58.8938    
   9  0.721151     -0.326907      -1.41297       1.41297       55.6766       57.0896    
  10  0.557251     -0.584740      -2.52739       2.52739       55.3547       57.8821    
  11  0.581534     -0.542085      -2.34302       2.34302       55.7337       58.0767    
  12  0.501412     -0.690326      -2.98375       2.98375       55.6930       58.6767    
  13  0.783062     -0.244543      -1.05697       1.05697       54.3941       55.4510    
  14  0.571322     -0.559803      -2.41960       2.41960       56.1652       58.5848    
  15  0.902729E-01  -2.40492      -10.3946       10.3946       55.1919       65.5866    
  16  0.695403E-01  -2.66585      -11.5224       11.5224       56.3445       67.8670    
  17  0.128872      -2.04894      -8.85600       8.85600       56.6218       65.4778    
  18  0.940828E-01  -2.36358      -10.2160       10.2160       55.3763       65.5923    
  19  0.326350      -1.11979      -4.83998       4.83998       55.4608       60.3008    
  20  0.102915      -2.27385      -9.82814       9.82814       55.3930       65.2211    
  21  0.324524      -1.12540      -4.86423       4.86423       57.3950       62.2592    
  22  0.259454      -1.34918      -5.83146       5.83146       57.0666       62.8981    
  23  0.782812     -0.244863      -1.05836       1.05836       56.7638       57.8222    
  24  0.383591     -0.958178      -4.14147       4.14147       57.3931       61.5345    
  25  0.626880     -0.466999      -2.01848       2.01848       56.3102       58.3287    
  26  0.292269      -1.23008      -5.31669       5.31669       56.3681       61.6847    
  27  0.448852     -0.801062      -3.46238       3.46238       55.9295       59.3919    
  28  0.685432     -0.377706      -1.63254       1.63254       55.9013       57.5338    
  29  0.995399     -0.461118E-02 -0.199306E-01  0.199306E-01   57.3874       57.4073    
  30  0.163323      -1.81203      -7.83202       7.83202       56.3917       64.2237    
  31  0.952940     -0.482038E-01 -0.208348      0.208348       55.6701       55.8784    
  32  0.861306     -0.149306     -0.645335      0.645335       57.1320       57.7774    
  33  0.587276     -0.532261      -2.30056       2.30056       56.3664       58.6670    
  34  0.908704     -0.957357E-01 -0.413792      0.413792       55.0105       55.4243    
  35  0.585935     -0.534546      -2.31043       2.31043       55.4946       57.8051    
  36  0.429836     -0.844352      -3.64949       3.64949       56.8139       60.4634    
  37  0.726203     -0.319926      -1.38280       1.38280       55.5327       56.9155    
  38  0.151145E-01  -4.19210      -18.1192       18.1192       55.8868       74.0060    
  39  0.927869     -0.748646E-01 -0.323582      0.323582       55.4360       55.7596    
  40  0.961645     -0.391099E-01 -0.169042      0.169042       55.5979       55.7669    
  41  0.253977      -1.37051      -5.92367       5.92367       58.9674       64.8911    
  42  0.768038     -0.263917      -1.14071       1.14071       55.2045       56.3452    
  43  0.569441E-01  -2.86569      -12.3862       12.3862       56.4406       68.8268    
  44  0.103919      -2.26415      -9.78617       9.78617       55.9751       65.7613    
  45  0.312226      -1.16403      -5.03120       5.03120       54.6474       59.6786    
  46  0.473636E-02  -5.35249      -23.1347       23.1347       55.4961       78.6308    
  47  0.192099      -1.64975      -7.13059       7.13059       58.1204       65.2510    
  48  0.799429     -0.223858     -0.967567      0.967567       55.5148       56.4824    
  49  0.164379      -1.80558      -7.80415       7.80415       55.8922       63.6964    
  50  0.421896     -0.862996      -3.73007       3.73007       55.6227       59.3527    
  51  0.361660      -1.01705      -4.39593       4.39593       55.6739       60.0699    
  52  0.346541      -1.05975      -4.58051       4.58051       56.4583       61.0388    
loop,thermsimp(1:2)       37  0.271283       19.3943    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174         56.16          0.99          0.99         23.77          0.50          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    175         57.09          1.00          0.99         23.96          0.27          0.06         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     56.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       37
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       38
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      174     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525      -4.27696       4.27696       55.0105       59.2875    
   2  0.687927     -0.374072      -1.61683       1.61683       54.3941       56.0109    
   3  0.288957      -1.24148      -5.36596       5.36596       55.0947       60.4607    
   4  0.192838      -1.64590      -7.11398       7.11398       55.4360       62.5500    
   5  0.369869     -0.994607      -4.29893       4.29893       55.5979       59.8968    
   6  0.735973     -0.306562      -1.32503       1.32503       55.6701       56.9951    
   7  0.637144     -0.450760      -1.94829       1.94829       55.6113       57.5596    
   8  0.703934     -0.351071      -1.51741       1.51741       55.2045       56.7219    
   9  0.864279     -0.145859     -0.630438      0.630438       55.5148       56.1453    
  10  0.473452     -0.747705      -3.23176       3.23176       55.4251       58.6569    
  11  0.242010      -1.41877      -6.13228       6.13228       55.5327       61.6650    
  12  0.510769     -0.671838      -2.90384       2.90384       55.6766       58.5805    
  13  0.829624     -0.186782     -0.807318      0.807318       57.3874       58.1947    
  14  0.228911      -1.47442      -6.37281       6.37281       55.9013       62.2741    
  15  0.310006      -1.17116      -5.06205       5.06205       57.1320       62.1941    
  16  0.248341      -1.39295      -6.02067       6.02067       55.4946       61.5153    
  17  0.723214     -0.324050      -1.40062       1.40062       56.7638       58.1644    
  18  0.420900     -0.865360      -3.74029       3.74029       55.3547       59.0950    
  19  0.133903      -2.01064      -8.69045       8.69045       55.7337       64.4242    
  20  0.571916     -0.558763      -2.41511       2.41511       56.3102       58.7253    
  21  0.609104     -0.495766      -2.14282       2.14282       56.1652       58.3081    
  22  0.582057     -0.541186      -2.33913       2.33913       56.3664       58.7056    
  23  0.440731     -0.819321      -3.54130       3.54130       55.6930       59.2343    
  24  0.211006      -1.55587      -6.72484       6.72484       55.6325       62.3574    
  25  0.665769     -0.406813      -1.75834       1.75834       55.6220       57.3804    
  26  0.766062     -0.266493      -1.15184       1.15184       55.6227       56.7745    
  27  0.321416E-01  -3.43760      -14.8581       14.8581       55.9295       70.7876    
  28  0.165897E-01  -4.09897      -17.7167       17.7167       54.6474       72.3641    
  29  0.634553     -0.454835      -1.96590       1.96590       55.6739       57.6398    
  30  0.981834     -0.183335E-01 -0.792418E-01  0.792418E-01   55.4608       55.5400    
  31  0.511720     -0.669978      -2.89580       2.89580       56.8139       59.7097    
  32  0.426358     -0.852477      -3.68461       3.68461       55.5209       59.2055    
  33  0.500527     -0.692094      -2.99139       2.99139       56.4583       59.4497    
  34  0.100483      -2.29777      -9.93151       9.93151       57.3931       67.3246    
  35  0.837324     -0.177545     -0.767390      0.767390       56.3681       57.1354    
  36  0.257741      -1.35580      -5.86009       5.86009       57.3950       63.2551    
  37  0.437184     -0.827401      -3.57622       3.57622       57.0666       60.6429    
  38  0.707529     -0.345976      -1.49539       1.49539       55.8922       57.3876    
  39  0.538379     -0.619193      -2.67630       2.67630       56.3917       59.0680    
  40  0.611820     -0.491317      -2.12359       2.12359       58.9674       61.0910    
  41  0.404533     -0.905022      -3.91172       3.91172       55.8656       59.7773    
  42  0.902499     -0.102588     -0.443410      0.443410       55.3930       55.8364    
  43  0.704299     -0.350552      -1.51517       1.51517       58.1204       59.6356    
  44  0.511818     -0.669786      -2.89497       2.89497       56.6218       59.5168    
  45  0.748131     -0.290178      -1.25422       1.25422       55.1919       56.4461    
  46  0.296598      -1.21538      -5.25315       5.25315       55.3763       60.6295    
  47  0.805122     -0.216762     -0.936896      0.936896       55.9751       56.9120    
  48  0.525063     -0.644236      -2.78454       2.78454       56.3445       59.1291    
  49  0.192567      -1.64731      -7.12007       7.12007       56.4406       63.5607    
  50  0.991898     -0.813527E-02 -0.351626E-01  0.351626E-01   55.8868       55.9220    
  51  0.238175      -1.43475      -6.20133       6.20133       55.4965       61.6978    
  52  0.627675     -0.465733      -2.01301       2.01301       56.1567       58.1697    
loop,thermsimp(1:2)       38   4.27696       1.61683    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176         58.03          1.20          1.02         23.96          0.27          0.05         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    177         65.42          0.99          0.99         24.00          0.14          0.06         26.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     58.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       38
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       39
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      176     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600      -1.39435       1.39435       55.4608       56.8552    
   2  0.309663      -1.17227      -5.06683       5.06683       55.3930       60.4598    
   3  0.688114     -0.373801      -1.61565       1.61565       55.8868       57.5025    
   4  0.677876     -0.388791      -1.68045       1.68045       54.3941       56.0745    
   5  0.283701      -1.25984      -5.44531       5.44531       55.5148       60.9601    
   6  0.183733      -1.69427      -7.32303       7.32303       55.1919       62.5150    
   7  0.243414      -1.41299      -6.10729       6.10729       55.2045       61.3118    
   8  0.785389     -0.241576      -1.04415       1.04415       55.6227       56.6668    
   9  0.258033      -1.35467      -5.85520       5.85520       55.9751       61.8303    
  10  0.137887      -1.98132      -8.56375       8.56375       55.6701       64.2338    
  11  0.386520     -0.950573      -4.10860       4.10860       56.3681       60.4767    
  12  0.882934     -0.124505     -0.538141      0.538141       55.6220       56.1602    
  13  0.395106     -0.928602      -4.01364       4.01364       55.8922       59.9058    
  14  0.107633      -2.22903      -9.63440       9.63440       55.6113       65.2457    
  15  0.434094     -0.834495      -3.60688       3.60688       55.6739       59.2808    
  16  0.558484     -0.582529      -2.51783       2.51783       56.7638       59.2816    
  17  0.102706      -2.27589      -9.83692       9.83692       56.1567       65.9937    
  18  0.325804      -1.12146      -4.84721       4.84721       57.3874       62.2346    
  19  0.693871     -0.365469      -1.57964       1.57964       56.1652       57.7449    
  20  0.832622     -0.183176     -0.791729      0.791729       55.6766       56.4684    
  21  0.691207     -0.369316      -1.59627       1.59627       55.4251       57.0214    
  22  0.903946     -0.100985     -0.436482      0.436482       56.3664       56.8029    
  23  0.258785E-01  -3.65434      -15.7949       15.7949       56.3102       72.1051    
  24  0.247338      -1.39700      -6.03816       6.03816       56.3917       62.4298    
  25  0.861464     -0.149122     -0.644542      0.644542       55.3547       55.9993    
  26  0.954919     -0.461290E-01 -0.199380      0.199380       56.3445       56.5439    
  27  0.579638     -0.545352      -2.35714       2.35714       55.5209       57.8780    
  28  0.537182     -0.621418      -2.68592       2.68592       55.6930       58.3789    
  29  0.407710     -0.897199      -3.87791       3.87791       55.0105       58.8884    
  30  0.958466     -0.424211E-01 -0.183354      0.183354       56.4583       56.6416    
  31  0.884674     -0.122536     -0.529630      0.529630       56.6218       57.1515    
  32  0.395055     -0.928731      -4.01420       4.01420       58.1204       62.1346    
  33  0.325425      -1.12262      -4.85224       4.85224       56.8139       61.6661    
  34  0.679842     -0.385895      -1.66793       1.66793       55.8656       57.5335    
  35  0.765292     -0.267498      -1.15619       1.15619       55.5979       56.7540    
  36  0.217460      -1.52574      -6.59461       6.59461       55.0947       61.6893    
  37  0.181189      -1.70822      -7.38331       7.38331       55.3763       62.7597    
  38  0.518456     -0.656899      -2.83927       2.83927       57.0666       59.9059    
  39  0.249864E-01  -3.68942      -15.9466       15.9466       58.9674       74.9140    
  40  0.336654      -1.08870      -4.70562       4.70562       55.4946       60.2003    
  41  0.873801     -0.134903     -0.583082      0.583082       55.5327       56.1158    
  42  0.478904     -0.736255      -3.18227       3.18227       55.4965       58.6787    
  43  0.819950     -0.198512     -0.858017      0.858017       57.1320       57.9900    
  44  0.966813     -0.337500E-01 -0.145876      0.145876       55.9013       56.0471    
  45  0.514109     -0.665319      -2.87567       2.87567       55.6325       58.5082    
  46  0.483734     -0.726221      -3.13890       3.13890       55.4360       58.5749    
  47  0.227743E-01  -3.78212      -16.3472       16.3472       57.3950       73.7422    
  48  0.409495     -0.892830      -3.85902       3.85902       56.4406       60.2996    
  49  0.198361      -1.61767      -6.99195       6.99195       55.7337       62.7257    
  50  0.925767     -0.771331E-01 -0.333387      0.333387       57.3931       57.7265    
  51  0.842113     -0.171842     -0.742740      0.742740       55.9295       56.6722    
  52  0.347114E-01  -3.36069      -14.5257       14.5257       58.0288       72.5545    
loop,thermsimp(1:2)       39   1.39435       5.06683    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178         53.12          1.23          1.02         24.09          0.09          0.06         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    179         50.81          0.99          0.99         24.15          0.11          0.05         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.81
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       39
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       40
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      178     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01 -0.200680      0.200680       55.3547       55.5554    
   2  0.450411     -0.797594      -3.44739       3.44739       55.9013       59.3487    
   3  0.691912E-01  -2.67088      -11.5442       11.5442       54.3941       65.9383    
   4  0.740935     -0.299842      -1.29599       1.29599       55.5327       56.8287    
   5  0.452531     -0.792898      -3.42709       3.42709       55.6220       59.0491    
   6  0.461330     -0.773642      -3.34386       3.34386       55.6766       59.0205    
   7  0.102999      -2.27303      -9.82459       9.82459       56.3445       66.1691    
   8  0.475106     -0.744217      -3.21668       3.21668       56.4583       59.6750    
   9  0.240275      -1.42597      -6.16338       6.16338       55.6227       61.7861    
  10  0.276707E-01  -3.58738      -15.5055       15.5055       55.9295       71.4350    
  11  0.132701E-01  -4.32224      -18.6817       18.6817       55.5979       74.2796    
  12  0.997219     -0.278509E-02 -0.120378E-01  0.120378E-01   56.3664       56.3785    
  13  0.563305     -0.573934      -2.48068       2.48068       55.4608       57.9415    
  14  0.347949      -1.05570      -4.56299       4.56299       55.4251       59.9881    
  15  0.546018     -0.605103      -2.61540       2.61540       56.6218       59.2372    
  16  0.343968      -1.06721      -4.61272       4.61272       55.8868       60.4995    
  17  0.945234     -0.563230E-01 -0.243441      0.243441       55.8656       56.1090    
  18  0.346208      -1.06072      -4.58466       4.58466       57.3931       61.9777    
  19  0.406433     -0.900337      -3.89147       3.89147       56.1652       60.0567    
  20  0.632259     -0.458455      -1.98155       1.98155       55.5209       57.5024    
  21  0.983930     -0.162002E-01 -0.700211E-01  0.700211E-01   57.1320       57.2020    
  22  0.200798      -1.60546      -6.93917       6.93917       55.6930       62.6321    
  23  0.223962      -1.49628      -6.46726       6.46726       55.6325       62.0998    
  24  0.594322     -0.520335      -2.24901       2.24901       55.4360       57.6850    
  25  0.875298     -0.133191     -0.575683      0.575683       55.4965       56.0722    
  26  0.327822      -1.11529      -4.82053       4.82053       55.0105       59.8311    
  27  0.215105      -1.53663      -6.64167       6.64167       55.6739       62.3156    
  28  0.905181     -0.996198E-01 -0.430581      0.430581       56.7638       57.1944    
  29  0.699086     -0.357981      -1.54728       1.54728       55.8922       57.4395    
  30  0.747401     -0.291154      -1.25844       1.25844       57.0666       58.3251    
  31  0.699189     -0.357834      -1.54664       1.54664       55.4946       57.0413    
  32  0.563488     -0.573610      -2.47928       2.47928       56.4406       58.9199    
  33  0.155576      -1.86062      -8.04206       8.04206       55.3930       63.4350    
  34  0.380593     -0.966025      -4.17539       4.17539       56.3681       60.5434    
  35  0.626112     -0.468226      -2.02378       2.02378       55.5148       57.5386    
  36  0.372369     -0.987870      -4.26981       4.26981       55.2045       59.4743    
  37  0.517531     -0.658686      -2.84700       2.84700       56.8139       59.6609    
  38  0.673247     -0.395643      -1.71006       1.71006       55.0947       56.8048    
  39  0.741527     -0.299044      -1.29254       1.29254       55.9751       57.2676    
  40  0.280982      -1.26947      -5.48693       5.48693       58.1204       63.6073    
  41  0.331745      -1.10339      -4.76911       4.76911       57.3874       62.1565    
  42  0.712030     -0.339635      -1.46798       1.46798       56.3917       57.8597    
  43  0.200581      -1.60654      -6.94383       6.94383       55.1919       62.1358    
  44  0.989915     -0.101357E-01 -0.438089E-01  0.438089E-01   55.7337       55.7775    
  45  0.808031     -0.213155     -0.921308      0.921308       55.3763       56.2977    
  46  0.893446     -0.112670     -0.486986      0.486986       55.6701       56.1571    
  47  0.364885      -1.00817      -4.35756       4.35756       55.6113       59.9688    
  48  0.923731     -0.793347E-01 -0.342903      0.342903       56.1567       56.4996    
  49  0.504880     -0.683434      -2.95396       2.95396       56.3102       59.2641    
  50  0.724988     -0.321600      -1.39003       1.39003       58.0288       59.4188    
  51  0.927322     -0.754540E-01 -0.326130      0.326130       57.3950       57.7211    
  52  0.857721     -0.153476     -0.663361      0.663361       50.8055       51.4689    
loop,thermsimp(1:2)       40  0.200680       3.44739    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180         55.96          1.19          1.01         24.02          0.14          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     55.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       40
neval is:      179
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       41
neval is:      179


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      179     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732      -4.44032       4.44032       50.8055       55.2459    
   2  0.414955     -0.879585      -3.80178       3.80178       55.3547       59.1565    
   3  0.407443     -0.897854      -3.88074       3.88074       55.7337       59.6145    
   4  0.883897     -0.123414     -0.533426      0.533426       55.4965       56.0299    
   5  0.520045     -0.653840      -2.82605       2.82605       55.8656       58.6916    
   6  0.634521     -0.454885      -1.96612       1.96612       55.6701       57.6362    
   7  0.344406      -1.06594      -4.60722       4.60722       55.3763       59.9836    
   8  0.545595     -0.605879      -2.61875       2.61875       56.3664       58.9852    
   9  0.766876     -0.265430      -1.14725       1.14725       56.1567       57.3040    
  10  0.639043     -0.447783      -1.93542       1.93542       55.0947       57.0301    
  11  0.850701     -0.161694     -0.698882      0.698882       55.5327       56.2316    
  12  0.832060     -0.183851     -0.794648      0.794648       55.4946       56.2893    
  13  0.728209     -0.317167      -1.37087       1.37087       56.7638       58.1347    
  14  0.531327     -0.632378      -2.73329       2.73329       57.1320       59.8653    
  15  0.188974E-01  -3.96873      -17.1538       17.1538       55.9751       73.1289    
  16  0.246817      -1.39911      -6.04727       6.04727       55.8922       61.9395    
  17  0.935336     -0.668496E-01 -0.288940      0.288940       55.5209       55.8098    
  18  0.730823     -0.313585      -1.35539       1.35539       55.5148       56.8702    
  19  0.482288     -0.729213      -3.15183       3.15183       55.4360       58.5878    
  20  0.782974E-04  -9.45500      -40.8667       40.8667       57.3950       98.2617    
  21  0.258744      -1.35192      -5.84330       5.84330       56.3917       62.2350    
  22  0.389044     -0.944063      -4.08046       4.08046       55.4608       59.5413    
  23  0.611459E-01  -2.79449      -12.0785       12.0785       57.0666       69.1451    
  24  0.124922      -2.08006      -8.99053       8.99053       56.4406       65.4311    
  25  0.253683      -1.37167      -5.92868       5.92868       55.6766       61.6053    
  26  0.781437     -0.246621      -1.06595       1.06595       55.6220       56.6880    
  27  0.835634     -0.179565     -0.776122      0.776122       56.6218       57.3980    
  28  0.542030     -0.612434      -2.64708       2.64708       56.3102       58.9573    
  29  0.463443     -0.769071      -3.32411       3.32411       55.9013       59.2254    
  30  0.120587      -2.11538      -9.14318       9.14318       58.0288       67.1720    
  31  0.733316     -0.310178      -1.34066       1.34066       55.2045       56.5451    
  32  0.955530     -0.454889E-01 -0.196614      0.196614       56.8139       57.0105    
  33  0.419735     -0.868132      -3.75227       3.75227       56.4583       60.2106    
  34  0.284829      -1.25587      -5.42815       5.42815       55.0105       60.4387    
  35  0.924079     -0.789582E-01 -0.341276      0.341276       55.6113       55.9525    
  36  0.432674     -0.837770      -3.62104       3.62104       55.4251       59.0461    
  37  0.155293      -1.86244      -8.04990       8.04990       56.1652       64.2151    
  38  0.634342     -0.455168      -1.96734       1.96734       55.8868       57.8542    
  39  0.935635     -0.665293E-01 -0.287556      0.287556       56.3681       56.6556    
  40  0.931832     -0.706024E-01 -0.305160      0.305160       55.6227       55.9278    
  41  0.875970     -0.132424     -0.572367      0.572367       57.3931       57.9654    
  42  0.273544      -1.29629      -5.60288       5.60288       55.6325       61.2354    
  43  0.799596     -0.223649     -0.966665      0.966665       55.1919       56.1586    
  44  0.772883     -0.257628      -1.11353       1.11353       57.3874       58.5009    
  45  0.274276      -1.29362      -5.59134       5.59134       55.6739       61.2653    
  46  0.116034      -2.15387      -9.30955       9.30955       55.6930       65.0025    
  47  0.700214     -0.356369      -1.54031       1.54031       55.3930       56.9333    
  48  0.704184E-01  -2.65330      -11.4682       11.4682       58.1204       69.5886    
  49  0.699980E-01  -2.65929      -11.4941       11.4941       54.3941       65.8881    
  50  0.186964      -1.67684      -7.24770       7.24770       56.3445       63.5922    
  51  0.342641      -1.07107      -4.62943       4.62943       55.9295       60.5589    
  52  0.989806     -0.102462E-01 -0.442863E-01  0.442863E-01   55.9626       56.0069    
loop,thermsimp(1:2)       41   4.44032       3.80178    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    181         54.52          1.02          0.99         23.86          0.42          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    182         53.31          1.03          1.01         24.02          0.18          0.05         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    54.517        3.015     -1.312      5.190     -100.0      1.282    
                     -0.6159      2.575     -100.0      2.564      1.246    
                       1.477    -0.8390      1.841      0.000      0.000    
                      -1.453      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.280     -2.615     -5.430     -2.520    
                      -13.93     -2.609      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5051E-01-0.6678E-02  0.000    -0.8373    
                     -0.2018    -0.3042    -0.1514    -0.1920    -0.6918E-01

                      -1.156    -0.6758      0.000    -0.3096E-01-0.2800E-01
                      0.8541E-01-0.3454E-01-0.6293E-01-0.2184    -0.1847    
                      0.1121     0.7047E-01-0.1940    -0.9077      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.304      9.126     -7039.     -4.000    
                     -0.4589     0.3322E-01  8.979      8.530     -4904.    

                      -4.000    -0.8597E-01-0.5169      8.779      9.022    
                      -6912.     -4.000    -0.2276    -0.5632      9.771    
                       8.785     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       41
neval is:      181
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       42
neval is:      181


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      181     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -12.4630       12.4630       50.8055       63.2685    
   2  0.688513     -0.373221      -1.61315       1.61315       55.5209       57.1340    
   3  0.530653     -0.633647      -2.73877       2.73877       55.6227       58.3614    
   4  0.542886     -0.610856      -2.64026       2.64026       55.6113       58.2515    
   5  0.603382     -0.505205      -2.18361       2.18361       55.9626       58.1463    
   6  0.478412     -0.737283      -3.18671       3.18671       55.4965       58.6832    
   7  0.809657     -0.211144     -0.912616      0.912616       55.1919       56.1045    
   8  0.764585     -0.268422      -1.16018       1.16018       55.5327       56.6929    
   9  0.228600      -1.47578      -6.37867       6.37867       55.4946       61.8733    
  10  0.495526     -0.702136      -3.03480       3.03480       55.2045       58.2393    
  11  0.368264     -0.998954      -4.31772       4.31772       56.3681       60.6858    
  12  0.407647     -0.897355      -3.87858       3.87858       55.6220       59.5006    
  13  0.316165      -1.15149      -4.97702       4.97702       55.5148       60.4918    
  14  0.458518     -0.779756      -3.37029       3.37029       55.3930       58.7633    
  15  0.643610     -0.440663      -1.90465       1.90465       56.8139       58.7185    
  16  0.316553E-01  -3.45285      -14.9240       14.9240       55.0947       70.0187    
  17  0.570171     -0.561819      -2.42832       2.42832       56.1567       58.5851    
  18  0.448642E-01  -3.10412      -13.4167       13.4167       56.6218       70.0386    
  19  0.128957      -2.04828      -8.85315       8.85315       55.6701       64.5232    
  20  0.159422      -1.83620      -7.93650       7.93650       55.8868       63.8233    
  21  0.154083      -1.87026      -8.08371       8.08371       57.3931       65.4768    
  22  0.696997     -0.360974      -1.56021       1.56021       56.7638       58.3240    
  23  0.579421     -0.545727      -2.35876       2.35876       57.3874       59.7461    
  24  0.528206     -0.638269      -2.75875       2.75875       55.4360       58.1948    
  25  0.322914      -1.13037      -4.88572       4.88572       55.8656       60.7513    
  26  0.369562     -0.995437      -4.30251       4.30251       56.3102       60.6127    
  27  0.134248      -2.00806      -8.67933       8.67933       56.3664       65.0458    
  28  0.950150     -0.511358E-01 -0.221021      0.221021       55.4251       55.6461    
  29  0.138040      -1.98021      -8.55894       8.55894       55.3547       63.9137    
  30  0.316838      -1.14936      -4.96782       4.96782       55.9013       60.8691    
  31  0.151783      -1.88530      -8.14873       8.14873       55.4608       63.6095    
  32  0.338674      -1.08272      -4.67976       4.67976       55.7337       60.4135    
  33  0.814165     -0.205592     -0.888619      0.888619       57.1320       58.0206    
  34  0.578183     -0.547865      -2.36800       2.36800       55.3763       57.7443    
  35  0.208707      -1.56682      -6.77218       6.77218       56.4583       63.2305    
  36  0.540561     -0.615147      -2.65881       2.65881       55.0105       57.6693    
  37  0.910129     -0.941686E-01 -0.407019      0.407019       55.9295       56.3365    
  38  0.907740     -0.967972E-01 -0.418380      0.418380       55.6325       56.0509    
  39  0.549661     -0.598453      -2.58666       2.58666       55.6739       58.2606    
  40  0.193889      -1.64047      -7.09051       7.09051       55.6766       62.7671    
  41  0.807651     -0.213625     -0.923339      0.923339       55.8922       56.8155    
  42  0.613777     -0.488124      -2.10979       2.10979       56.3917       58.5015    
  43  0.664452     -0.408793      -1.76690       1.76690       56.3445       58.1114    
  44  0.584630     -0.536776      -2.32007       2.32007       56.1652       58.4853    
  45  0.618915     -0.479787      -2.07375       2.07375       55.6930       57.7667    
  46  0.542097     -0.612311      -2.64655       2.64655       56.4406       59.0872    
  47  0.133641      -2.01260      -8.69893       8.69893       54.3941       63.0930    
  48  0.479627     -0.734747      -3.17575       3.17575       58.0288       61.2046    
  49  0.225939      -1.48749      -6.42929       6.42929       57.0666       63.4959    
  50  0.324869      -1.12433      -4.85963       4.85963       58.1204       62.9800    
  51  0.669051     -0.401895      -1.73709       1.73709       55.9751       57.7122    
  52  0.602039     -0.507434      -2.19325       2.19325       53.3113       55.5045    
loop,thermsimp(1:2)       42   12.4630       1.61315    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    183         55.20          0.95          0.99         23.94          0.40          0.05         26.33
Just calling func    0   0         26.33


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    184         56.23          1.00          0.99         24.19          0.11          0.05         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       42
neval is:      183
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       43
neval is:      183


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      183     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495      -1.02651       1.02651       53.3113       54.3378    
   2  0.796559     -0.227454     -0.983110      0.983110       55.4251       56.4082    
   3  0.784232     -0.243051      -1.05052       1.05052       55.6325       56.6831    
   4  0.503549     -0.686074      -2.96537       2.96537       55.1919       58.1573    
   5  0.468337     -0.758566      -3.27870       3.27870       55.9295       59.2082    
   6  0.198518      -1.61688      -6.98853       6.98853       55.5327       62.5212    
   7  0.857529     -0.153700     -0.664328      0.664328       55.8922       56.5565    
   8  0.845427     -0.167913     -0.725759      0.725759       55.5209       56.2466    
   9  0.710919     -0.341197      -1.47473       1.47473       55.0105       56.4853    
  10  0.934107     -0.681640E-01 -0.294621      0.294621       55.9751       56.2697    
  11  0.565087     -0.570775      -2.46703       2.46703       55.3763       57.8434    
  12  0.147377      -1.91476      -8.27605       8.27605       55.6930       63.9690    
  13  0.471965     -0.750851      -3.24536       3.24536       57.1320       60.3774    
  14  0.287319      -1.24716      -5.39052       5.39052       56.3445       61.7350    
  15  0.526906     -0.640733      -2.76940       2.76940       55.9626       58.7321    
  16  0.176999      -1.73161      -7.48444       7.48444       55.4360       62.9204    
  17  0.868579     -0.140897     -0.608988      0.608988       55.2045       55.8135    
  18  0.621282     -0.475971      -2.05726       2.05726       55.6113       57.6685    
  19  0.181881      -1.70440      -7.36684       7.36684       55.6739       63.0408    
  20  0.565209     -0.570560      -2.46610       2.46610       56.7638       59.2299    
  21  0.927617     -0.751364E-01 -0.324757      0.324757       55.6227       55.9474    
  22  0.296120      -1.21699      -5.26012       5.26012       56.1652       61.4254    
  23  0.152389      -1.88132      -8.13150       8.13150       56.3917       64.5232    
  24  0.508731     -0.675835      -2.92112       2.92112       56.1567       59.0779    
  25  0.389654     -0.942496      -4.07369       4.07369       55.4965       59.5702    
  26  0.770754     -0.260386      -1.12545       1.12545       56.8139       57.9393    
  27  0.144347      -1.93554      -8.36584       8.36584       55.3930       63.7588    
  28  0.690124     -0.370884      -1.60305       1.60305       56.4406       58.0436    
  29  0.882429     -0.125077     -0.540613      0.540613       55.6220       56.1626    
  30  0.781105     -0.247045      -1.06779       1.06779       57.3874       58.4552    
  31  0.331946      -1.10278      -4.76648       4.76648       55.7337       60.5002    
  32  0.157011      -1.85144      -8.00235       8.00235       55.5148       63.5172    
  33  0.734200     -0.308973      -1.33545       1.33545       56.3102       57.6456    
  34  0.563390     -0.573784      -2.48003       2.48003       56.3681       58.8481    
  35  0.349498      -1.05126      -4.54378       4.54378       55.8656       60.4094    
  36  0.256822      -1.35937      -5.87552       5.87552       55.9013       61.7768    
  37  0.563556     -0.573488      -2.47875       2.47875       58.0288       60.5076    
  38  0.945419E-01  -2.35871      -10.1949       10.1949       55.4946       65.6895    
  39  0.571450     -0.559577      -2.41863       2.41863       55.6766       58.0952    
  40  0.583029E-01  -2.84210      -12.2842       12.2842       58.1204       70.4047    
  41  0.428808     -0.846746      -3.65984       3.65984       54.3941       58.0539    
  42  0.628450     -0.464499      -2.00767       2.00767       56.4583       58.4660    
  43  0.152789      -1.87869      -8.12016       8.12016       50.8055       58.9257    
  44  0.787004E-01  -2.54211      -10.9876       10.9876       57.0666       68.0542    
  45  0.170927E-01  -4.06911      -17.5876       17.5876       55.4608       73.0484    
  46  0.531078     -0.632847      -2.73531       2.73531       55.8868       58.6221    
  47  0.206082E-01  -3.88206      -16.7792       16.7792       55.3547       72.1339    
  48  0.909565     -0.947891E-01 -0.409701      0.409701       55.6701       56.0798    
  49  0.456291     -0.784625      -3.39133       3.39133       56.3664       59.7578    
  50  0.997425E-02  -4.60775      -19.9158       19.9158       57.3931       77.3088    
  51  0.251070      -1.38202      -5.97343       5.97343       55.0947       61.0681    
  52  0.548517     -0.600536      -2.59566       2.59566       55.2042       57.7998    
loop,thermsimp(1:2)       43   1.02651      0.983110    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    185         53.84          1.11          1.00         24.20          0.07          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    186         58.70          0.99          0.98         24.01          0.34          0.05         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.84
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       43
neval is:      185
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       44
neval is:      185


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      185     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -9.74198       9.74198       53.3113       63.0532    
   2  0.780131E-01  -2.55088      -11.0255       11.0255       55.2045       66.2300    
   3  0.723689     -0.323394      -1.39779       1.39779       55.6227       57.0205    
   4  0.439896     -0.821218      -3.54950       3.54950       55.6701       59.2196    
   5  0.967364     -0.331803E-01 -0.143413      0.143413       55.6220       55.7654    
   6  0.235884      -1.44441      -6.24310       6.24310       55.5209       61.7640    
   7  0.311956      -1.16489      -5.03495       5.03495       55.9751       61.0101    
   8  0.600573     -0.509870      -2.20378       2.20378       55.4251       57.6289    
   9  0.781739     -0.246234      -1.06428       1.06428       55.0105       56.0748    
  10  0.505036     -0.683126      -2.95263       2.95263       55.8922       58.8448    
  11  0.896130     -0.109670     -0.474020      0.474020       55.6325       56.1065    
  12  0.545040     -0.606897      -2.62315       2.62315       56.3102       58.9333    
  13  0.338019      -1.08465      -4.68813       4.68813       55.6113       60.2994    
  14  0.200467      -1.60711      -6.94629       6.94629       55.2042       62.1505    
  15  0.548763     -0.600089      -2.59373       2.59373       55.3763       57.9701    
  16  0.897241     -0.108431     -0.468664      0.468664       56.8139       57.2825    
  17  0.229905      -1.47009      -6.35407       6.35407       56.4406       62.7947    
  18  0.387828     -0.947193      -4.09399       4.09399       54.3941       58.4881    
  19  0.789400     -0.236482      -1.02213       1.02213       55.6766       56.6988    
  20  0.495667     -0.701851      -3.03357       3.03357       55.1919       58.2255    
  21  0.818926     -0.199761     -0.863416      0.863416       57.3874       58.2508    
  22  0.181319      -1.70750      -7.38020       7.38020       56.4583       63.8385    
  23  0.901986     -0.103156     -0.445866      0.445866       55.8868       56.3327    
  24  0.933790E-01  -2.37109      -10.2484       10.2484       55.9626       66.2111    
  25  0.171523      -1.76304      -7.62026       7.62026       56.3681       63.9883    
  26  0.648450     -0.433170      -1.87226       1.87226       50.8055       52.6778    
  27  0.777448     -0.251739      -1.08807       1.08807       56.1567       57.2448    
  28  0.777670     -0.251453      -1.08684       1.08684       55.9295       57.0163    
  29  0.972420     -0.279672E-01 -0.120881      0.120881       56.7638       56.8847    
  30  0.825305     -0.192002     -0.829877      0.829877       55.4965       56.3264    
  31  0.470649     -0.753642      -3.25742       3.25742       56.3664       59.6238    
  32  0.263953      -1.33198      -5.75714       5.75714       57.1320       62.8892    
  33  0.857551     -0.153675     -0.664220      0.664220       55.8656       56.5298    
  34  0.950157     -0.511279E-01 -0.220987      0.220987       55.7337       55.9547    
  35  0.866482     -0.143314     -0.619436      0.619436       58.0288       58.6483    
  36  0.904889     -0.999433E-01 -0.431979      0.431979       55.0947       55.5267    
  37  0.297565      -1.21212      -5.23908       5.23908       56.1652       61.4043    
  38  0.902696     -0.102369     -0.442464      0.442464       56.3445       56.7870    
  39  0.800054     -0.223076     -0.964188      0.964188       55.9013       56.8655    
  40  0.534162     -0.627057      -2.71029       2.71029       55.5327       58.2430    
  41  0.593018     -0.522530      -2.25850       2.25850       55.4360       57.6945    
  42  0.682417E-01  -2.68470      -11.6039       11.6039       55.6739       67.2778    
  43  0.336048      -1.09050      -4.71340       4.71340       55.5148       60.2282    
  44  0.576540     -0.550710      -2.38030       2.38030       55.3930       57.7733    
  45  0.217955      -1.52347      -6.58478       6.58478       55.6930       62.2778    
  46  0.281607      -1.26724      -5.47732       5.47732       56.3917       61.8690    
  47  0.306631      -1.18211      -5.10936       5.10936       55.4946       60.6040    
  48  0.676335E-01  -2.69365      -11.6426       11.6426       57.0666       68.7093    
  49  0.145631      -1.92668      -8.32756       8.32756       58.1204       66.4480    
  50  0.820952     -0.197291     -0.852738      0.852738       55.3547       56.2075    
  51  0.224137      -1.49550      -6.46389       6.46389       55.4608       61.9247    
  52  0.738282     -0.303430      -1.31150       1.31150       53.8423       55.1538    
loop,thermsimp(1:2)       44   9.74198       11.0255    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    187         54.21          1.15          1.01         23.82          0.30          0.06         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    188         53.72          0.98          0.99         23.93          0.23          0.05         26.18
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.72
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       44
neval is:      187
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       45
neval is:      187


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      187     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261     -0.588954      0.588954       50.8055       51.3945    
   2  0.990306     -0.974175E-02 -0.421062E-01  0.421062E-01   53.8423       53.8844    
   3  0.488656     -0.716096      -3.09514       3.09514       55.0947       58.1898    
   4  0.865115E-01  -2.44748      -10.5786       10.5786       55.6220       66.2006    
   5  0.234262      -1.45132      -6.27293       6.27293       55.7337       62.0067    
   6  0.906541     -0.981186E-01 -0.424092      0.424092       55.0105       55.4346    
   7  0.680454     -0.384995      -1.66404       1.66404       55.6325       57.2966    
   8  0.575574     -0.552388      -2.38755       2.38755       55.3547       57.7423    
   9  0.537443E-02  -5.22610      -22.5885       22.5885       55.4965       78.0849    
  10  0.421676     -0.863518      -3.73233       3.73233       55.8868       59.6191    
  11  0.297588      -1.21204      -5.23874       5.23874       55.8656       61.1043    
  12  0.119337      -2.12581      -9.18824       9.18824       55.6766       64.8649    
  13  0.958276     -0.426192E-01 -0.184210      0.184210       56.3445       56.5287    
  14  0.115549      -2.15806      -9.32763       9.32763       55.9013       65.2289    
  15  0.104220      -2.26125      -9.77367       9.77367       56.7638       66.5375    
  16  0.719503     -0.329194      -1.42285       1.42285       55.9295       57.3523    
  17  0.875656     -0.132782     -0.573914      0.573914       55.6227       56.1966    
  18  0.578760     -0.546868      -2.36369       2.36369       56.1567       58.5204    
  19  0.923704     -0.793639E-01 -0.343030      0.343030       56.8139       57.1569    
  20  0.457980     -0.780930      -3.37536       3.37536       55.4251       58.8005    
  21  0.783173     -0.244401      -1.05636       1.05636       55.4360       56.4924    
  22  0.764479     -0.268561      -1.16078       1.16078       55.3930       56.5538    
  23  0.496891     -0.699384      -3.02290       3.02290       55.3763       58.3992    
  24  0.554859     -0.589041      -2.54598       2.54598       55.1919       57.7379    
  25  0.734503E-02  -4.91373      -21.2383       21.2383       55.5327       76.7710    
  26  0.117643      -2.14010      -9.25004       9.25004       57.3874       66.6374    
  27  0.145440      -1.92799      -8.33324       8.33324       54.3941       62.7273    
  28  0.375449     -0.979633      -4.23421       4.23421       58.0288       62.2630    
  29  0.954324E-01  -2.34934      -10.1544       10.1544       55.8922       66.0466    
  30  0.449085     -0.800543      -3.46013       3.46013       56.3102       59.7703    
  31  0.354483      -1.03709      -4.48256       4.48256       55.6701       60.1527    
  32  0.153971      -1.87099      -8.08686       8.08686       56.3664       64.4533    
  33  0.871598     -0.137427     -0.593991      0.593991       55.5148       56.1088    
  34  0.633061     -0.457188      -1.97607       1.97607       55.6113       57.5873    
  35  0.947022E-01  -2.35702      -10.1876       10.1876       55.4946       65.6822    
  36  0.793812     -0.230909     -0.998044      0.998044       55.9751       56.9731    
  37  0.760585     -0.273667      -1.18285       1.18285       56.1652       57.3481    
  38  0.124312      -2.08496      -9.01170       9.01170       55.5209       64.5326    
  39  0.961605E-03  -6.94691      -30.0262       30.0262       56.3917       86.4179    
  40  0.672529     -0.396710      -1.71467       1.71467       55.4608       57.1755    
  41  0.749847E-01  -2.59047      -11.1966       11.1966       55.2042       66.4008    
  42  0.982441     -0.177147E-01 -0.765672E-01  0.765672E-01   55.6930       55.7695    
  43  0.340727      -1.07667      -4.65363       4.65363       56.4406       61.0942    
  44  0.915043     -0.887846E-01 -0.383748      0.383748       57.1320       57.5158    
  45  0.150614      -1.89303      -8.18214       8.18214       53.3113       61.4934    
  46  0.892785     -0.113409     -0.490181      0.490181       56.4583       56.9485    
  47  0.844073     -0.169516     -0.732687      0.732687       56.3681       57.1007    
  48  0.469949     -0.755131      -3.26385       3.26385       55.9626       59.2265    
  49  0.389072     -0.943991      -4.08015       4.08015       55.2045       59.2846    
  50  0.738049     -0.303745      -1.31286       1.31286       58.1204       59.4333    
  51  0.250173      -1.38560      -5.98891       5.98891       55.6739       61.6628    
  52  0.383245     -0.959081      -4.14537       4.14537       53.7200       57.8653    
loop,thermsimp(1:2)       45  0.588954      0.421062E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    189         54.95          1.01          0.99         23.96          0.39          0.06         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    190         53.90          1.03          1.02         24.21          0.05          0.06         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       45
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       46
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      189     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -10.5021       10.5021       50.8055       61.3076    
   2  0.312747      -1.16236      -5.02400       5.02400       53.8423       58.8663    
   3  0.317683      -1.14670      -4.95631       4.95631       55.0105       59.9668    
   4  0.693053     -0.366649      -1.58474       1.58474       55.6930       57.2777    
   5  0.361881      -1.01644      -4.39329       4.39329       55.5148       59.9081    
   6  0.127478      -2.05981      -8.90299       8.90299       55.6227       64.5257    
   7  0.718706     -0.330302      -1.42765       1.42765       55.4360       56.8636    
   8  0.609419E-01  -2.79783      -12.0929       12.0929       56.3445       68.4374    
   9  0.320798      -1.13695      -4.91415       4.91415       55.3930       60.3071    
  10  0.343503      -1.06856      -4.61857       4.61857       56.4583       61.0769    
  11  0.671828     -0.397753      -1.71918       1.71918       55.9751       57.6943    
  12  0.616702     -0.483369      -2.08924       2.08924       56.3681       58.4573    
  13  0.806358E-01  -2.51781      -10.8826       10.8826       56.8139       67.6965    
  14  0.997284     -0.271972E-02 -0.117553E-01  0.117553E-01   55.4608       55.4726    
  15  0.554344     -0.589969      -2.54999       2.54999       55.6325       58.1825    
  16  0.411057     -0.889023      -3.84257       3.84257       56.1652       60.0078    
  17  0.846258E-01  -2.46952      -10.6738       10.6738       55.9295       66.6033    
  18  0.737439     -0.304571      -1.31643       1.31643       57.1320       58.4484    
  19  0.393790     -0.931939      -4.02806       4.02806       55.6113       59.6393    
  20  0.965947     -0.346467E-01 -0.149751      0.149751       55.1919       55.3417    
  21  0.150166      -1.89601      -8.19502       8.19502       55.3547       63.5498    
  22  0.212005      -1.55114      -6.70441       6.70441       53.7200       60.4244    
  23  0.615060     -0.486036      -2.10076       2.10076       55.0947       57.1955    
  24  0.382142     -0.961962      -4.15783       4.15783       55.3763       59.5342    
  25  0.249044      -1.39013      -6.00846       6.00846       56.1567       62.1652    
  26  0.245943      -1.40266      -6.06261       6.06261       55.4251       61.4877    
  27  0.108882      -2.21749      -9.58453       9.58453       55.9626       65.5472    
  28  0.199835      -1.61026      -6.95994       6.95994       55.2045       62.1644    
  29  0.863954     -0.146235     -0.632064      0.632064       58.1204       58.7525    
  30  0.392842     -0.934347      -4.03847       4.03847       55.8868       59.9253    
  31  0.770596     -0.260592      -1.12634       1.12634       56.3102       57.4365    
  32  0.149868      -1.89800      -8.20362       8.20362       55.6701       63.8737    
  33  0.234154      -1.45178      -6.27492       6.27492       56.4406       62.7155    
  34  0.611512     -0.491821      -2.12577       2.12577       55.8656       57.9914    
  35  0.518093E-01  -2.96019      -12.7946       12.7946       53.3113       66.1059    
  36  0.567953     -0.565716      -2.44516       2.44516       55.6739       58.1191    
  37  0.190847      -1.65628      -7.15885       7.15885       55.7337       62.8926    
  38  0.104561      -2.25798      -9.75953       9.75953       58.0288       67.7883    
  39  0.135276      -2.00044      -8.64637       8.64637       54.3941       63.0404    
  40  0.262364      -1.33802      -5.78325       5.78325       56.3664       62.1497    
  41  0.463951     -0.767976      -3.31938       3.31938       55.5209       58.8402    
  42  0.419672     -0.868282      -3.75292       3.75292       55.6766       59.4295    
  43  0.897011     -0.108687     -0.469770      0.469770       55.9013       56.3710    
  44  0.818933     -0.199754     -0.863382      0.863382       55.4946       56.3580    
  45  0.136906      -1.98846      -8.59461       8.59461       55.8922       64.4868    
  46  0.561722     -0.576748      -2.49284       2.49284       55.6220       58.1149    
  47  0.991681     -0.835368E-02 -0.361066E-01  0.361066E-01   55.2042       55.2403    
  48  0.653388     -0.425585      -1.83948       1.83948       56.7638       58.6033    
  49  0.578557     -0.547219      -2.36521       2.36521       57.3874       59.7526    
  50  0.784121     -0.243191      -1.05113       1.05113       55.5327       56.5838    
  51  0.827307     -0.189579     -0.819406      0.819406       55.4965       56.3159    
  52  0.994261     -0.575522E-02 -0.248754E-01  0.248754E-01   53.9033       53.9282    
loop,thermsimp(1:2)       46   10.5021       5.02400    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191         55.04          1.22          1.02         24.08          0.15          0.07         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    192         59.91          1.04          1.03         24.19          0.02          0.06         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       46
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       47
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      191     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -13.7113       13.7113       53.9033       67.6146    
   2  0.581082     -0.542864      -2.34639       2.34639       55.2042       57.5506    
   3  0.690143     -0.370857      -1.60293       1.60293       55.1919       56.7949    
   4  0.958690     -0.421877E-01 -0.182345      0.182345       55.4608       55.6432    
   5  0.947492     -0.539367E-01 -0.233127      0.233127       55.4965       55.7296    
   6  0.253816E-01  -3.67373      -15.8787       15.8787       55.4946       71.3734    
   7  0.811950     -0.208316     -0.900391      0.900391       55.9013       56.8017    
   8  0.448512     -0.801821      -3.46566       3.46566       55.5327       58.9984    
   9  0.625244     -0.469613      -2.02978       2.02978       55.4360       57.4658    
  10  0.557627     -0.584065      -2.52447       2.52447       55.0947       57.6192    
  11  0.762657     -0.270947      -1.17110       1.17110       55.6930       56.8641    
  12  0.579328     -0.545887      -2.35945       2.35945       56.3102       58.6696    
  13  0.168395      -1.78144      -7.69982       7.69982       55.9751       63.6749    
  14  0.993282     -0.674111E-02 -0.291367E-01  0.291367E-01   55.8656       55.8947    
  15  0.573458     -0.556070      -2.40347       2.40347       55.6220       58.0255    
  16  0.900456     -0.104854     -0.453202      0.453202       55.6739       56.1271    
  17  0.961937     -0.388068E-01 -0.167732      0.167732       55.6325       55.8003    
  18  0.685702     -0.377312      -1.63083       1.63083       57.1320       58.7629    
  19  0.335644      -1.09171      -4.71861       4.71861       56.3681       61.0867    
  20  0.726392     -0.319666      -1.38167       1.38167       56.7638       58.1455    
  21  0.523515     -0.647189      -2.79730       2.79730       58.1204       60.9177    
  22  0.877914     -0.130206     -0.562783      0.562783       55.5209       56.0836    
  23  0.893563     -0.112539     -0.486420      0.486420       53.8423       54.3287    
  24  0.829449     -0.186994     -0.808233      0.808233       55.6766       56.4849    
  25  0.454457     -0.788653      -3.40874       3.40874       55.3763       58.7851    
  26  0.261407      -1.34168      -5.79904       5.79904       55.6113       61.4103    
  27  0.144225      -1.93638      -8.36950       8.36950       57.3874       65.7569    
  28  0.963744     -0.369299E-01 -0.159620      0.159620       55.5148       55.6744    
  29  0.267843      -1.31735      -5.69392       5.69392       55.8868       61.5807    
  30  0.251943E-01  -3.68114      -15.9108       15.9108       55.0105       70.9213    
  31  0.321532      -1.13466      -4.90426       4.90426       56.1652       61.0695    
  32  0.440903     -0.818930      -3.53961       3.53961       55.3930       58.9326    
  33  0.214416      -1.53984      -6.65555       6.65555       53.7200       60.3755    
  34  0.212185      -1.55030      -6.70076       6.70076       56.4583       63.1591    
  35  0.948253E-01  -2.35572      -10.1820       10.1820       50.8055       60.9875    
  36  0.507627     -0.678008      -2.93051       2.93051       55.4251       58.3556    
  37  0.415074     -0.879299      -3.80054       3.80054       56.3664       60.1670    
  38  0.768069     -0.263876      -1.14054       1.14054       55.2045       56.3450    
  39  0.462999E-01  -3.07261      -13.2806       13.2806       56.1567       69.4373    
  40  0.835390     -0.179856     -0.777382      0.777382       56.4406       57.2180    
  41  0.678734     -0.387526      -1.67498       1.67498       55.7337       57.4087    
  42  0.363569      -1.01179      -4.37318       4.37318       54.3941       58.7672    
  43  0.677161     -0.389846      -1.68501       1.68501       55.3547       57.0397    
  44  0.506668     -0.679899      -2.93869       2.93869       55.6701       58.6088    
  45  0.875658     -0.132779     -0.573903      0.573903       55.8922       56.4661    
  46  0.924863     -0.781102E-01 -0.337611      0.337611       55.6227       55.9603    
  47  0.794570E-01  -2.53254      -10.9462       10.9462       55.9626       66.9089    
  48  0.449212     -0.800261      -3.45892       3.45892       53.3113       56.7702    
  49  0.658987     -0.417051      -1.80260       1.80260       55.9295       57.7321    
  50  0.674357     -0.393995      -1.70294       1.70294       56.8139       58.5168    
  51  0.436334     -0.829348      -3.58464       3.58464       58.0288       61.6135    
  52  0.331871      -1.10301      -4.76746       4.76746       55.0370       59.8045    
loop,thermsimp(1:2)       47   13.7113       2.34639    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193         54.88          1.23          1.04         24.09          0.14          0.07         26.56
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    194         54.40          1.04          1.01         24.11          0.05          0.06         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       47
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       48
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      193     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720      -2.45382       2.45382       53.8423       56.2961    
   2  0.216137      -1.53184      -6.62098       6.62098       55.4608       62.0818    
   3  0.476425     -0.741444      -3.20470       3.20470       55.5148       58.7195    
   4  0.184047      -1.69256      -7.31566       7.31566       55.4965       62.8121    
   5  0.722630     -0.324858      -1.40411       1.40411       55.6325       57.0366    
   6  0.887750     -0.119065     -0.514627      0.514627       55.8656       56.3802    
   7  0.236344      -1.44247      -6.23469       6.23469       55.6227       61.8574    
   8  0.798055     -0.225578     -0.974999      0.974999       55.5209       56.4959    
   9  0.425454     -0.854597      -3.69377       3.69377       55.6739       59.3677    
  10  0.605701     -0.501368      -2.16703       2.16703       55.2045       57.3715    
  11  0.742456     -0.297792      -1.28713       1.28713       55.8922       57.1793    
  12  0.378462E-01  -3.27423      -14.1520       14.1520       55.6766       69.8286    
  13  0.341910      -1.07321      -4.63866       4.63866       53.3113       57.9499    
  14  0.794971E-01  -2.53203      -10.9441       10.9441       55.1919       66.1360    
  15  0.586423     -0.533715      -2.30684       2.30684       55.9013       58.2081    
  16  0.990523     -0.952170E-02 -0.411551E-01  0.411551E-01   55.6930       55.7341    
  17  0.348475      -1.05419      -4.55645       4.55645       55.3547       59.9112    
  18  0.998034     -0.196755E-02 -0.850421E-02  0.850421E-02   56.4406       56.4491    
  19  0.616072     -0.484391      -2.09365       2.09365       55.7337       57.8274    
  20  0.427239     -0.850411      -3.67568       3.67568       55.4360       59.1117    
  21  0.598160     -0.513898      -2.22119       2.22119       55.2042       57.4254    
  22  0.642831     -0.441873      -1.90988       1.90988       55.0947       57.0046    
  23  0.392766     -0.934541      -4.03931       4.03931       55.9295       59.9688    
  24  0.738407     -0.303260      -1.31076       1.31076       55.6220       56.9328    
  25  0.334341      -1.09559      -4.73541       4.73541       56.7638       61.4992    
  26  0.997912     -0.208996E-02 -0.903329E-02  0.903329E-02   55.4251       55.4341    
  27  0.492305E-01  -3.01124      -13.0153       13.0153       56.8139       69.8292    
  28  0.304734      -1.18832      -5.13618       5.13618       55.6701       60.8063    
  29  0.159886      -1.83330      -7.92394       7.92394       56.3102       64.2341    
  30  0.991331     -0.870666E-02 -0.376322E-01  0.376322E-01   57.1320       57.1696    
  31  0.735164     -0.307662      -1.32979       1.32979       54.3941       55.7239    
  32  0.279948      -1.27315      -5.50286       5.50286       55.3763       60.8792    
  33  0.457260     -0.782502      -3.38216       3.38216       55.3930       58.7751    
  34  0.678170     -0.388358      -1.67857       1.67857       55.5327       57.2113    
  35  0.689603     -0.371639      -1.60631       1.60631       55.0370       56.6433    
  36  0.468470     -0.758283      -3.27748       3.27748       56.3664       59.6439    
  37  0.937429     -0.646141E-01 -0.279277      0.279277       53.7200       53.9992    
  38  0.115915      -2.15490      -9.31398       9.31398       58.1204       67.4344    
  39  0.125789      -2.07315      -8.96063       8.96063       50.8055       59.7662    
  40  0.137562      -1.98368      -8.57394       8.57394       56.1652       64.7392    
  41  0.273901      -1.29499      -5.59724       5.59724       56.3681       61.9653    
  42  0.934963     -0.672484E-01 -0.290664      0.290664       55.6113       55.9019    
  43  0.450296     -0.797850      -3.44850       3.44850       55.8868       59.3353    
  44  0.681645     -0.383246      -1.65648       1.65648       58.0288       59.6853    
  45  0.282914E-01  -3.56520      -15.4096       15.4096       56.4583       71.8679    
  46  0.962226     -0.385062E-01 -0.166433      0.166433       55.9751       56.1415    
  47  0.771412     -0.259533      -1.12176       1.12176       57.3874       58.5091    
  48  0.778208     -0.250761      -1.08385       1.08385       55.9626       57.0465    
  49  0.945686     -0.558450E-01 -0.241375      0.241375       53.9033       54.1447    
  50  0.648669     -0.432833      -1.87081       1.87081       56.1567       58.0275    
  51  0.214283      -1.54046      -6.65821       6.65821       55.0105       61.6687    
  52  0.692999     -0.366726      -1.58508       1.58508       54.3964       55.9815    
loop,thermsimp(1:2)       48   2.45382       6.62098    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195         55.46          1.25          1.02         24.11          0.10          0.06         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     55.46
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       48
neval is:      194
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       49
neval is:      194


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      194     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -7.38853       7.38853       53.7200       61.1085    
   2  0.335083      -1.09338      -4.72584       4.72584       53.9033       58.6291    
   3  0.585160     -0.535871      -2.31616       2.31616       55.4251       57.7413    
   4  0.445729     -0.808044      -3.49256       3.49256       54.3941       57.8866    
   5  0.963605     -0.370741E-01 -0.160243      0.160243       55.6930       55.8532    
   6  0.538074     -0.619758      -2.67874       2.67874       55.6113       58.2900    
   7  0.971443     -0.289729E-01 -0.125228      0.125228       54.3964       54.5217    
   8  0.817136     -0.201950     -0.872875      0.872875       55.9751       56.8480    
   9  0.216943      -1.52812      -6.60490       6.60490       53.8423       60.4472    
  10  0.572311     -0.558074      -2.41213       2.41213       55.8656       58.2777    
  11  0.511761     -0.669897      -2.89545       2.89545       56.4406       59.3361    
  12  0.331920E-01  -3.40545      -14.7191       14.7191       55.5209       70.2400    
  13  0.662680     -0.411462      -1.77844       1.77844       55.0370       56.8154    
  14  0.578679     -0.547007      -2.36429       2.36429       55.6220       57.9863    
  15  0.473979     -0.746592      -3.22695       3.22695       55.0947       58.3217    
  16  0.243750      -1.41161      -6.10132       6.10132       55.6325       61.7339    
  17  0.784227     -0.243057      -1.05055       1.05055       55.9626       57.0132    
  18  0.215065      -1.53682      -6.64248       6.64248       57.1320       63.7745    
  19  0.813272     -0.206689     -0.893360      0.893360       55.8922       56.7856    
  20  0.877336     -0.130865     -0.565630      0.565630       55.5327       56.0983    
  21  0.911070     -0.931357E-01 -0.402554      0.402554       55.2045       55.6070    
  22  0.424500     -0.856844      -3.70348       3.70348       55.2042       58.9076    
  23  0.122508      -2.09958      -9.07489       9.07489       55.7337       64.8086    
  24  0.173199      -1.75331      -7.57824       7.57824       53.3113       60.8895    
  25  0.243010      -1.41465      -6.11447       6.11447       56.1567       62.2712    
  26  0.618804     -0.479966      -2.07453       2.07453       55.9013       57.9758    
  27  0.365303      -1.00703      -4.35261       4.35261       57.3874       61.7400    
  28  0.178054      -1.72567      -7.45875       7.45875       55.5148       62.9736    
  29  0.416122     -0.876776      -3.78963       3.78963       55.3930       59.1826    
  30  0.789287     -0.236625      -1.02275       1.02275       55.4360       56.4588    
  31  0.786736     -0.239863      -1.03675       1.03675       55.8868       56.9236    
  32  0.295880      -1.21780      -5.26362       5.26362       55.6739       60.9376    
  33  0.418649     -0.870722      -3.76346       3.76346       56.3664       60.1299    
  34  0.706992     -0.346736      -1.49867       1.49867       58.0288       59.5275    
  35  0.281863      -1.26633      -5.47339       5.47339       50.8055       56.2789    
  36  0.357290      -1.02921      -4.44848       4.44848       55.3547       59.8032    
  37  0.174180      -1.74767      -7.55383       7.55383       55.9295       63.4833    
  38  0.190924      -1.65588      -7.15711       7.15711       55.6701       62.8272    
  39  0.630369     -0.461449      -1.99449       1.99449       55.3763       57.3708    
  40  0.252261      -1.37729      -5.95298       5.95298       56.7638       62.7168    
  41  0.359213      -1.02384      -4.42528       4.42528       55.0105       59.4358    
  42  0.740344     -0.300640      -1.29944       1.29944       55.6227       56.9221    
  43  0.283211      -1.26156      -5.45278       5.45278       56.3681       61.8208    
  44  0.965119     -0.355039E-01 -0.153456      0.153456       55.4608       55.6143    
  45  0.389600     -0.942634      -4.07429       4.07429       55.4965       59.5708    
  46  0.598383     -0.513525      -2.21958       2.21958       56.3102       58.5298    
  47  0.631795     -0.459190      -1.98473       1.98473       56.1652       58.1500    
  48  0.997460     -0.254363E-02 -0.109942E-01  0.109942E-01   55.1919       55.2029    
  49  0.192532      -1.64749      -7.12086       7.12086       58.1204       65.2413    
  50  0.769348     -0.262212      -1.13334       1.13334       55.6766       56.8100    
  51  0.740745     -0.300099      -1.29710       1.29710       56.8139       58.1110    
  52  0.590587     -0.526639      -2.27626       2.27626       55.4576       57.7339    
loop,thermsimp(1:2)       49   7.38853       4.72584    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    196         54.83          1.24          1.02         23.96          0.25          0.06         26.53
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     54.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       49
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       50
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      195     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -14.9148       14.9148       54.3964       69.3113    
   2  0.601445     -0.508421      -2.19752       2.19752       55.1919       57.3894    
   3  0.651191     -0.428952      -1.85403       1.85403       55.2045       57.0585    
   4  0.187303      -1.67503      -7.23986       7.23986       55.4608       62.7007    
   5  0.664603     -0.408566      -1.76592       1.76592       55.6930       57.4589    
   6  0.945236     -0.563208E-01 -0.243432      0.243432       55.5327       55.7761    
   7  0.865870     -0.144020     -0.622488      0.622488       50.8055       51.4280    
   8  0.674117     -0.394351      -1.70448       1.70448       55.4360       57.1405    
   9  0.959689E-01  -2.34373      -10.1302       10.1302       55.8922       66.0224    
  10  0.663337     -0.410472      -1.77416       1.77416       55.6766       57.4508    
  11  0.384854     -0.954891      -4.12726       4.12726       55.0370       59.1643    
  12  0.892338     -0.113910     -0.492348      0.492348       55.9751       56.4675    
  13  0.470837     -0.753243      -3.25569       3.25569       55.6227       58.8784    
  14  0.262618      -1.33706      -5.77907       5.77907       55.8868       61.6659    
  15  0.877143     -0.131085     -0.566579      0.566579       55.9626       56.5292    
  16  0.262102      -1.33902      -5.78757       5.78757       55.3763       61.1639    
  17  0.306130      -1.18375      -5.11643       5.11643       55.4576       60.5741    
  18  0.251844      -1.37895      -5.96014       5.96014       55.4251       61.3852    
  19  0.371147     -0.991157      -4.28402       4.28402       54.3941       58.6781    
  20  0.244393E-01  -3.71156      -16.0423       16.0423       55.9013       71.9435    
  21  0.550903     -0.596197      -2.57690       2.57690       55.6220       58.1989    
  22  0.509078     -0.675154      -2.91818       2.91818       56.8139       59.7320    
  23  0.741178     -0.299515      -1.29457       1.29457       56.1652       57.4598    
  24  0.585965     -0.534496      -2.31022       2.31022       55.8656       58.1758    
  25  0.602491     -0.506683      -2.19000       2.19000       55.6113       57.8013    
  26  0.532366     -0.630423      -2.72484       2.72484       55.0947       57.8195    
  27  0.264247      -1.33087      -5.75233       5.75233       56.3102       62.0625    
  28  0.468512     -0.758194      -3.27709       3.27709       53.9033       57.1804    
  29  0.338122      -1.08435      -4.68682       4.68682       55.2042       59.8910    
  30  0.815455     -0.204008     -0.881773      0.881773       55.3930       56.2747    
  31  0.126007      -2.07142      -8.95316       8.95316       56.4406       65.3938    
  32  0.391435     -0.937937      -4.05399       4.05399       55.0105       59.0645    
  33  0.477179     -0.739864      -3.19787       3.19787       58.0288       61.2267    
  34  0.926058     -0.768180E-01 -0.332025      0.332025       55.4965       55.8285    
  35  0.305992E-01  -3.48678      -15.0707       15.0707       55.3547       70.4254    
  36  0.142122      -1.95107      -8.43299       8.43299       56.3664       64.7994    
  37  0.934627E-01  -2.37019      -10.2445       10.2445       53.8423       64.0868    
  38  0.933240     -0.690924E-01 -0.298634      0.298634       53.3113       53.6099    
  39  0.551354     -0.595378      -2.57336       2.57336       55.6739       58.2473    
  40  0.167646      -1.78590      -7.71909       7.71909       53.7200       61.4391    
  41  0.657770     -0.418900      -1.81059       1.81059       55.6325       57.4431    
  42  0.937012     -0.650587E-01 -0.281199      0.281199       57.3874       57.6686    
  43  0.435130     -0.832109      -3.59657       3.59657       56.3681       59.9646    
  44  0.346278E-01  -3.36310      -14.5361       14.5361       56.1567       70.6928    
  45  0.529273     -0.636251      -2.75003       2.75003       56.7638       59.5138    
  46  0.543808     -0.609159      -2.63293       2.63293       55.6701       58.3030    
  47  0.476993     -0.740254      -3.19955       3.19955       55.5148       58.7144    
  48  0.602365     -0.506891      -2.19090       2.19090       55.9295       58.1204    
  49  0.429141     -0.845970      -3.65648       3.65648       57.1320       60.7885    
  50  0.161300E-01  -4.12707      -17.8382       17.8382       55.7337       73.5719    
  51  0.806405     -0.215169     -0.930013      0.930013       58.1204       59.0504    
  52  0.577848E-01  -2.85103      -12.3228       12.3228       54.8255       67.1484    
loop,thermsimp(1:2)       50   14.9148       2.19752    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197         54.69          1.23          1.02         23.83          0.31          0.06         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198         54.45          1.01          1.02         24.02          0.25          0.06         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.45
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       50
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       51
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      197     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01 -0.316944      0.316944       50.8055       51.1225    
   2  0.669511     -0.401208      -1.73412       1.73412       53.3113       55.0454    
   3  0.863337E-01  -2.44954      -10.5875       10.5875       55.5327       66.1202    
   4  0.279945      -1.27316      -5.50291       5.50291       55.4965       60.9994    
   5  0.832640     -0.183154     -0.791635      0.791635       55.3930       56.1846    
   6  0.848933     -0.163775     -0.707876      0.707876       55.9751       56.6830    
   7  0.141794      -1.95338      -8.44298       8.44298       55.9626       64.4056    
   8  0.208764      -1.56655      -6.77101       6.77101       55.2045       61.9755    
   9  0.755787     -0.279996      -1.21021       1.21021       55.4360       56.6462    
  10  0.177416      -1.72926      -7.47427       7.47427       53.9033       61.3776    
  11  0.405148     -0.903503      -3.90515       3.90515       55.1919       59.0971    
  12  0.640380     -0.445693      -1.92639       1.92639       55.6325       57.5589    
  13  0.548060     -0.601370      -2.59927       2.59927       55.6766       58.2759    
  14  0.773287     -0.257105      -1.11127       1.11127       55.6930       56.8042    
  15  0.180768      -1.71054      -7.39336       7.39336       56.1652       63.5586    
  16  0.135846      -1.99624      -8.62820       8.62820       57.3874       66.0156    
  17  0.601016     -0.509133      -2.20060       2.20060       55.6113       57.8119    
  18  0.302263      -1.19646      -5.17137       5.17137       55.0947       60.2661    
  19  0.189428      -1.66374      -7.19110       7.19110       55.9295       63.1206    
  20  0.737158     -0.304953      -1.31808       1.31808       55.8656       57.1837    
  21  0.790680     -0.234862      -1.01513       1.01513       55.6220       56.6372    
  22  0.177192E-01  -4.03310      -17.4320       17.4320       55.6739       73.1060    
  23  0.236042      -1.44375      -6.24021       6.24021       55.6701       61.9103    
  24  0.459229     -0.778206      -3.36359       3.36359       54.3941       57.7577    
  25  0.586479E-01  -2.83620      -12.2587       12.2587       55.5148       67.7736    
  26  0.263766      -1.33269      -5.76021       5.76021       55.6227       61.3829    
  27  0.942550     -0.591663E-01 -0.255731      0.255731       58.1204       58.3761    
  28  0.106855      -2.23628      -9.66573       9.66573       55.0105       64.6763    
  29  0.710700     -0.341505      -1.47606       1.47606       55.0370       56.5131    
  30  0.207109E-01  -3.87709      -16.7577       16.7577       56.7638       73.5215    
  31  0.901203     -0.104025     -0.449621      0.449621       56.8139       57.2635    
  32  0.949751     -0.515555E-01 -0.222835      0.222835       55.2042       55.4270    
  33  0.343487      -1.06861      -4.61877       4.61877       56.3681       60.9868    
  34  0.875043     -0.133483     -0.576944      0.576944       55.4576       56.0346    
  35  0.122447E-01  -4.40266      -19.0294       19.0294       57.1320       76.1614    
  36  0.820650     -0.197659     -0.854328      0.854328       55.3763       56.2307    
  37  0.748866     -0.289195      -1.24997       1.24997       58.0288       59.2788    
  38  0.594525     -0.519992      -2.24753       2.24753       55.4251       57.6726    
  39  0.927863E-01  -2.37746      -10.2759       10.2759       53.7200       63.9959    
  40  0.631335     -0.459918      -1.98788       1.98788       55.8868       57.8747    
  41  0.282620      -1.26365      -5.46181       5.46181       56.3102       61.7720    
  42  0.707811     -0.345578      -1.49367       1.49367       55.4608       56.9545    
  43  0.930463     -0.720730E-01 -0.311517      0.311517       53.8423       54.1538    
  44  0.988563     -0.115032E-01 -0.497197E-01  0.497197E-01   56.3664       56.4161    
  45  0.869439     -0.139907     -0.604712      0.604712       56.4406       57.0453    
  46  0.693921     -0.365397      -1.57933       1.57933       55.8922       57.4715    
  47  0.731753     -0.312312      -1.34989       1.34989       54.8255       56.1754    
  48  0.848712     -0.164035     -0.708999      0.708999       54.3964       55.1054    
  49  0.174447      -1.74613      -7.54721       7.54721       55.3547       62.9019    
  50  0.313212      -1.16087      -5.01757       5.01757       56.1567       61.1743    
  51  0.880789     -0.126937     -0.548651      0.548651       55.9013       56.4499    
  52  0.441967     -0.816520      -3.52919       3.52919       54.4453       57.9745    
loop,thermsimp(1:2)       51  0.316944       1.73412    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199         54.69          1.24          1.02         23.89          0.35          0.06         26.56
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     54.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       51
neval is:      198
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       52
neval is:      198


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      198     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502      -1.80887       1.80887       50.8055       52.6144    
   2  0.385391     -0.953496      -4.12124       4.12124       53.8423       57.9635    
   3  0.323679      -1.12800      -4.87549       4.87549       53.3113       58.1867    
   4  0.402516E-01  -3.21260      -13.8856       13.8856       54.3964       68.2821    
   5  0.866022     -0.143846     -0.621734      0.621734       55.2042       55.8259    
   6  0.560147     -0.579555      -2.50498       2.50498       55.4576       57.9626    
   7  0.389098     -0.943925      -4.07987       4.07987       54.8255       58.9054    
   8  0.470755     -0.753417      -3.25644       3.25644       55.3930       58.6494    
   9  0.794299     -0.230295     -0.995390      0.995390       55.3763       56.3717    
  10  0.897132     -0.108553     -0.469191      0.469191       56.3664       56.8356    
  11  0.359474      -1.02311      -4.42214       4.42214       55.9013       60.3234    
  12  0.604694     -0.503032      -2.17423       2.17423       55.0370       57.2112    
  13  0.101554      -2.28717      -9.88567       9.88567       55.6220       65.5077    
  14  0.274480      -1.29288      -5.58811       5.58811       55.4360       61.0241    
  15  0.916086     -0.876445E-01 -0.378820      0.378820       55.9751       56.3539    
  16  0.820070E-01  -2.50095      -10.8097       10.8097       55.6930       66.5027    
  17  0.975902     -0.243929E-01 -0.105432      0.105432       55.4608       55.5662    
  18  0.131665      -2.02750      -8.76332       8.76332       56.4406       65.2039    
  19  0.751313     -0.285933      -1.23587       1.23587       55.8656       57.1015    
  20  0.775324     -0.254475      -1.09990       1.09990       56.8139       57.9138    
  21  0.237000      -1.43969      -6.22270       6.22270       55.8922       62.1149    
  22  0.113641      -2.17471      -9.39960       9.39960       55.6325       65.0321    
  23  0.762281     -0.271440      -1.17323       1.17323       55.4251       56.5983    
  24  0.783730     -0.243690      -1.05329       1.05329       54.3941       55.4474    
  25  0.492891     -0.707468      -3.05785       3.05785       55.6113       58.6691    
  26  0.471904     -0.750980      -3.24592       3.24592       55.8868       59.1327    
  27  0.855781     -0.155740     -0.673147      0.673147       54.4453       55.1184    
  28  0.636473     -0.451814      -1.95285       1.95285       55.6766       57.6295    
  29  0.433340     -0.836232      -3.61439       3.61439       58.1204       61.7348    
  30  0.482236     -0.729321      -3.15230       3.15230       55.1919       58.3442    
  31  0.855143E-01  -2.45907      -10.6287       10.6287       58.0288       68.6575    
  32  0.916579     -0.871071E-01 -0.376497      0.376497       55.0947       55.4712    
  33  0.232519      -1.45878      -6.30521       6.30521       56.3681       62.6733    
  34  0.283977      -1.25886      -5.44110       5.44110       55.4965       60.9376    
  35  0.401228E-01  -3.21581      -13.8995       13.8995       56.1567       70.0562    
  36  0.235231      -1.44719      -6.25509       6.25509       53.9033       60.1584    
  37  0.233426      -1.45489      -6.28837       6.28837       55.6227       61.9110    
  38  0.903594     -0.101376     -0.438169      0.438169       56.3102       56.7483    
  39  0.857571     -0.153651     -0.664115      0.664115       55.6701       56.3342    
  40  0.444085     -0.811739      -3.50853       3.50853       55.2045       58.7130    
  41  0.151055      -1.89011      -8.16952       8.16952       55.3547       63.5243    
  42  0.745694     -0.293440      -1.26832       1.26832       55.9295       57.1978    
  43  0.470647E-01  -3.05623      -13.2098       13.2098       56.1652       69.3750    
  44  0.344459      -1.06578      -4.60656       4.60656       53.7200       58.3265    
  45  0.592738     -0.523004      -2.26055       2.26055       55.9626       58.2232    
  46  0.754292     -0.281975      -1.21876       1.21876       55.0105       56.2293    
  47  0.162950      -1.81431      -7.84189       7.84189       57.3874       65.2293    
  48  0.939100     -0.628333E-01 -0.271581      0.271581       55.5327       55.8043    
  49  0.966845     -0.337175E-01 -0.145735      0.145735       55.5148       55.6606    
  50  0.287323      -1.24715      -5.39046       5.39046       55.6739       61.0644    
  51  0.835081     -0.180227     -0.778982      0.778982       56.7638       57.5428    
  52  0.836052     -0.179064     -0.773957      0.773957       54.6934       55.4673    
loop,thermsimp(1:2)       52   1.80887       4.12124    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    200         54.20          1.23          1.02         23.87          0.41          0.06         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     54.20
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       52
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       53
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      199     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717      -2.34143       2.34143       50.8055       53.1470    
   2  0.307993      -1.17768      -5.09020       5.09020       54.4453       59.5355    
   3  0.551684     -0.594779      -2.57078       2.57078       54.3941       56.9648    
   4  0.969976     -0.304835E-01 -0.131757      0.131757       54.6934       54.8251    
   5  0.401714     -0.912015      -3.94195       3.94195       55.0947       59.0366    
   6  0.336211      -1.09002      -4.71130       4.71130       55.4608       60.1721    
   7  0.649191     -0.432028      -1.86733       1.86733       55.5148       57.3821    
   8  0.426986     -0.851005      -3.67825       3.67825       55.5327       59.2109    
   9  0.479997     -0.733976      -3.17242       3.17242       55.2042       58.3766    
  10  0.441527     -0.817516      -3.53350       3.53350       55.0105       58.5440    
  11  0.218988      -1.51874      -6.56435       6.56435       55.6701       62.2344    
  12  0.935549     -0.666221E-01 -0.287956      0.287956       55.9751       56.2631    
  13  0.159996      -1.83261      -7.92097       7.92097       55.3763       63.2973    
  14  0.486870     -0.719759      -3.11097       3.11097       55.4251       58.5361    
  15  0.835520     -0.179701     -0.776708      0.776708       56.3102       57.0869    
  16  0.643759     -0.440431      -1.90365       1.90365       56.3664       58.2701    
  17  0.177188      -1.73054      -7.47982       7.47982       55.8656       63.3454    
  18  0.408356     -0.895617      -3.87107       3.87107       55.9295       59.8005    
  19  0.463768     -0.768371      -3.32108       3.32108       55.0370       58.3581    
  20  0.616820     -0.483178      -2.08841       2.08841       56.7638       58.8522    
  21  0.377083     -0.975289      -4.21543       4.21543       55.6766       59.8921    
  22  0.278016      -1.28008      -5.53280       5.53280       56.8139       62.3467    
  23  0.746435     -0.292446      -1.26402       1.26402       55.4576       56.7217    
  24  0.872234     -0.136697     -0.590837      0.590837       53.8423       54.4331    
  25  0.887073E-01  -2.42241      -10.4702       10.4702       53.3113       63.7815    
  26  0.124913      -2.08014      -8.99085       8.99085       55.9626       64.9535    
  27  0.918160     -0.853835E-01 -0.369048      0.369048       53.7200       54.0890    
  28  0.924603     -0.783912E-01 -0.338826      0.338826       55.1919       55.5308    
  29  0.863214     -0.147092     -0.635768      0.635768       55.3930       56.0287    
  30  0.823499E-02  -4.79936      -20.7440       20.7440       55.6113       76.3552    
  31  0.548113     -0.601275      -2.59885       2.59885       55.2045       57.8033    
  32  0.800553     -0.222452     -0.961490      0.961490       54.8255       55.7870    
  33  0.180829      -1.71020      -7.39190       7.39190       55.8868       63.2787    
  34  0.968975E-01  -2.33410      -10.0885       10.0885       53.9033       63.9918    
  35  0.749847     -0.287886      -1.24431       1.24431       55.9013       57.1456    
  36  0.902028     -0.103110     -0.445666      0.445666       55.4965       55.9421    
  37  0.312083      -1.16449      -5.03318       5.03318       55.4360       60.4692    
  38  0.472691     -0.749313      -3.23871       3.23871       55.6739       58.9126    
  39  0.970346     -0.301026E-01 -0.130110      0.130110       58.1204       58.2505    
  40  0.485853     -0.721850      -3.12001       3.12001       55.6227       58.7427    
  41  0.604658     -0.503092      -2.17448       2.17448       55.8922       58.0667    
  42  0.172238      -1.75888      -7.60230       7.60230       56.3681       63.9703    
  43  0.359079E-01  -3.32680      -14.3792       14.3792       55.3547       69.7339    
  44  0.464923     -0.765884      -3.31033       3.31033       55.6325       58.9429    
  45  0.293512      -1.22584      -5.29836       5.29836       56.4406       61.7390    
  46  0.572788     -0.557239      -2.40852       2.40852       57.3874       59.7959    
  47  0.931713     -0.707300E-01 -0.305712      0.305712       55.6220       55.9277    
  48  0.983012     -0.171340E-01 -0.740573E-01  0.740573E-01   55.6930       55.7670    
  49  0.572194     -0.558278      -2.41301       2.41301       54.3964       56.8094    
  50  0.272189      -1.30126      -5.62435       5.62435       58.0288       63.6532    
  51  0.521081     -0.651849      -2.81745       2.81745       56.1652       58.9827    
  52  0.560075     -0.579685      -2.50554       2.50554       54.2023       56.7079    
loop,thermsimp(1:2)       53   2.34143       5.09020    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201         54.92          1.23          1.01         24.11          0.15          0.05         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202         56.82          0.96          0.99         24.19          0.16          0.05         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    54.925        2.938     -1.311      4.688     -100.0      1.283    
                     -0.6156      2.547     -100.0      2.564      1.347    
                       1.478    -0.8387      1.841      0.000      0.000    
                      -1.454      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.421     -2.693     -5.431     -2.638    
                      -13.84     -2.649      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5061E-01-0.2062E-02  0.000    -0.8012    
                     -0.2019    -0.2792    -0.1516    -0.1628    -0.6930E-01

                      -1.157    -0.6386      0.000    -0.3109E-01-0.2813E-01
                      0.8541E-01-0.3466E-01-0.6306E-01-0.2387    -0.1833    
                      0.1153     0.3628E-01-0.2306    -0.9079      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.283      9.105     -7039.     -4.000    
                     -0.5231     0.3285E-01  9.020      8.530     -4904.    

                      -4.000    -0.8634E-01-0.5176      8.777      9.022    
                      -6912.     -4.000    -0.1886    -0.5636      9.582    
                       8.728     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.92
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       53
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       54
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      201     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218      -2.46030       2.46030       50.8055       53.2658    
   2  0.698829     -0.358349      -1.54887       1.54887       53.7200       55.2688    
   3  0.550231     -0.597418      -2.58218       2.58218       53.8423       56.4245    
   4  0.844966     -0.168459     -0.728119      0.728119       54.6934       55.4215    
   5  0.139804      -1.96751      -8.50405       8.50405       55.1919       63.6960    
   6  0.119451      -2.12485      -9.18410       9.18410       55.6930       64.8771    
   7  0.474112     -0.746312      -3.22574       3.22574       54.8255       58.0513    
   8  0.293024      -1.22750      -5.30554       5.30554       55.6220       60.9276    
   9  0.760137     -0.274256      -1.18540       1.18540       55.4965       56.6819    
  10  0.216376      -1.53074      -6.61621       6.61621       55.3930       62.0092    
  11  0.837069     -0.177849     -0.768704      0.768704       55.9751       56.7438    
  12  0.969258     -0.312245E-01 -0.134960      0.134960       54.2023       54.3373    
  13  0.335918      -1.09089      -4.71508       4.71508       55.4576       60.1727    
  14  0.966643     -0.339265E-01 -0.146638      0.146638       54.3964       54.5431    
  15  0.723887     -0.323119      -1.39660       1.39660       54.3941       55.7907    
  16  0.459929E-01  -3.07927      -13.3093       13.3093       56.3102       69.6195    
  17  0.536724     -0.622271      -2.68960       2.68960       55.9013       58.5909    
  18  0.432574     -0.838001      -3.62204       3.62204       55.5148       59.1369    
  19  0.160308      -1.83066      -7.91254       7.91254       55.2045       63.1170    
  20  0.885158     -0.121989     -0.527265      0.527265       55.8922       56.4195    
  21  0.753783     -0.282650      -1.22168       1.22168       58.1204       59.3421    
  22  0.135562      -1.99832      -8.63723       8.63723       56.3664       65.0037    
  23  0.817964     -0.200937     -0.868496      0.868496       55.0370       55.9055    
  24  0.286617      -1.24961      -5.40111       5.40111       55.2042       60.6053    
  25  0.319126      -1.14217      -4.93673       4.93673       55.4251       60.3618    
  26  0.104479E-01  -4.56135      -19.7152       19.7152       55.0105       74.7258    
  27  0.671407     -0.398379      -1.72189       1.72189       55.6227       57.3446    
  28  0.782955     -0.244680      -1.05757       1.05757       56.7638       57.8214    
  29  0.186689      -1.67831      -7.25407       7.25407       55.6739       62.9280    
  30  0.462519     -0.771067      -3.33273       3.33273       55.6325       58.9653    
  31  0.203171      -1.59371      -6.88838       6.88838       56.1652       63.0536    
  32  0.851762E-01  -2.46303      -10.6458       10.6458       55.0947       65.7405    
  33  0.702824     -0.352649      -1.52423       1.52423       55.5327       57.0569    
  34  0.747923     -0.290456      -1.25542       1.25542       54.4453       55.7007    
  35  0.224450      -1.49410      -6.45787       6.45787       57.3874       63.8452    
  36  0.243563E-02  -6.01755      -26.0093       26.0093       55.9295       81.9387    
  37  0.160790      -1.82766      -7.89957       7.89957       55.6766       63.5762    
  38  0.880431     -0.127343     -0.550408      0.550408       55.4608       56.0112    
  39  0.507306     -0.678640      -2.93324       2.93324       55.4360       58.3692    
  40  0.266019      -1.32419      -5.72346       5.72346       56.4406       62.1641    
  41  0.310751      -1.16876      -5.05167       5.05167       55.6701       60.7218    
  42  0.945006     -0.565640E-01 -0.244483      0.244483       56.8139       57.0584    
  43  0.265699E-01  -3.62797      -15.6810       15.6810       55.8868       71.5678    
  44  0.652842     -0.426420      -1.84309       1.84309       55.3763       57.2194    
  45  0.799409     -0.223882     -0.967672      0.967672       55.8656       56.8333    
  46  0.543529     -0.609672      -2.63515       2.63515       58.0288       60.6640    
  47  0.361947      -1.01626      -4.39250       4.39250       53.3113       57.7038    
  48  0.398721     -0.919492      -3.97426       3.97426       56.3681       60.3423    
  49  0.349489      -1.05128      -4.54389       4.54389       53.9033       58.4472    
  50  0.948739     -0.526212E-01 -0.227441      0.227441       55.9626       56.1901    
  51  0.346176      -1.06081      -4.58506       4.58506       55.3547       59.9398    
  52  0.678244     -0.388248      -1.67810       1.67810       54.9250       56.6031    
loop,thermsimp(1:2)       54   2.46030       1.54887    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203         54.19          1.07          0.99         24.05          0.33          0.06         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     54.19
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       54
neval is:      202
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       55
neval is:      202


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      202     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805      -7.08003       7.08003       50.8055       57.8856    
   2  0.875287     -0.133204     -0.575737      0.575737       54.2023       54.7781    
   3  0.103612      -2.26710      -9.79893       9.79893       54.3964       64.1954    
   4  0.159072      -1.83840      -7.94600       7.94600       53.7200       61.6660    
   5  0.118738      -2.13084      -9.20998       9.20998       54.6934       63.9034    
   6  0.294105      -1.22382      -5.28963       5.28963       54.4453       59.7349    
   7  0.967643     -0.328919E-01 -0.142167      0.142167       54.3941       54.5362    
   8  0.675183     -0.392772      -1.69765       1.69765       55.0370       56.7347    
   9  0.170112      -1.77130      -7.65597       7.65597       55.4608       63.1168    
  10  0.990992     -0.904902E-02 -0.391120E-01  0.391120E-01   55.9626       56.0018    
  11  0.198513      -1.61690      -6.98864       6.98864       55.8922       62.8808    
  12  0.404817E-01  -3.20690      -13.8610       13.8610       53.8423       67.7033    
  13  0.834933E-01  -2.48299      -10.7321       10.7321       54.9250       65.6571    
  14  0.458935     -0.778848      -3.36636       3.36636       55.4965       58.8628    
  15  0.929311     -0.733118E-01 -0.316871      0.316871       55.9751       56.2920    
  16  0.593071     -0.522440      -2.25811       2.25811       55.8656       58.1237    
  17  0.963359E-01  -2.33991      -10.1137       10.1137       55.5327       65.6464    
  18  0.383119E-01  -3.26200      -14.0991       14.0991       56.8139       70.9130    
  19  0.841843     -0.172161     -0.744122      0.744122       55.3763       56.1205    
  20  0.874261     -0.134376     -0.580807      0.580807       55.6227       56.2035    
  21  0.706443     -0.347513      -1.50203       1.50203       53.3113       54.8133    
  22  0.423649E-01  -3.16143      -13.6645       13.6645       56.7638       70.4283    
  23  0.904835     -0.100003     -0.432236      0.432236       54.8255       55.2578    
  24  0.728800     -0.316356      -1.36737       1.36737       55.4360       56.8034    
  25  0.764304     -0.268790      -1.16177       1.16177       53.9033       55.0651    
  26  0.578519     -0.547284      -2.36549       2.36549       55.9013       58.2668    
  27  0.321737      -1.13402      -4.90151       4.90151       55.6325       60.5340    
  28  0.592944     -0.522656      -2.25904       2.25904       55.5148       57.7739    
  29  0.159596      -1.83511      -7.93179       7.93179       58.1204       66.0522    
  30  0.797332     -0.226484     -0.978917      0.978917       55.3547       56.3337    
  31  0.263979      -1.33189      -5.75673       5.75673       55.4576       61.2144    
  32  0.449355     -0.799942      -3.45754       3.45754       56.3681       59.8256    
  33  0.859901     -0.150938     -0.652388      0.652388       55.4251       56.0775    
  34  0.730093     -0.314584      -1.35970       1.35970       55.2042       56.5639    
  35  0.484666     -0.724295      -3.13057       3.13057       58.0288       61.1594    
  36  0.180217      -1.71359      -7.40655       7.40655       55.6701       63.0766    
  37  0.857397     -0.153854     -0.664994      0.664994       55.6220       56.2870    
  38  0.502370     -0.688418      -2.97551       2.97551       55.3930       58.3685    
  39  0.245408      -1.40484      -6.07203       6.07203       56.4406       62.5126    
  40  0.134540      -2.00590      -8.66995       8.66995       55.6739       64.3439    
  41  0.468137     -0.758995      -3.28056       3.28056       56.1652       59.4458    
  42  0.864548E-01  -2.44813      -10.5814       10.5814       55.2045       65.7859    
  43  0.178791      -1.72154      -7.44090       7.44090       55.6766       63.1175    
  44  0.690351     -0.370555      -1.60163       1.60163       55.1919       56.7936    
  45  0.731648     -0.312455      -1.35051       1.35051       57.3874       58.7379    
  46  0.857623     -0.153591     -0.663855      0.663855       55.6930       56.3568    
  47  0.754956     -0.281095      -1.21496       1.21496       56.3664       57.5814    
  48  0.355557      -1.03407      -4.46950       4.46950       55.0947       59.5642    
  49  0.200964      -1.60463      -6.93560       6.93560       56.3102       63.2458    
  50  0.243499      -1.41264      -6.10578       6.10578       55.8868       61.9926    
  51  0.796288     -0.227794     -0.984581      0.984581       55.0105       55.9951    
  52  0.256937      -1.35892      -5.87359       5.87359       54.1850       60.0586    
loop,thermsimp(1:2)       55   7.08003      0.575737    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    204         67.21          1.23          1.03         23.93          0.32          0.05         26.56
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     67.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       55
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       56
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      203     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -8.45810       8.45810       54.3941       62.8522    
   2  0.197548      -1.62177      -7.00969       7.00969       54.2023       61.2120    
   3  0.774000     -0.256183      -1.10728       1.10728       53.3113       54.4185    
   4  0.170284      -1.77029      -7.65161       7.65161       53.9033       61.5549    
   5  0.250636      -1.38376      -5.98092       5.98092       54.8255       60.8065    
   6  0.907951     -0.965652E-01 -0.417378      0.417378       55.0105       55.4279    
   7  0.611678     -0.491549      -2.12459       2.12459       55.9626       58.0872    
   8  0.735945E-02  -4.91177      -21.2298       21.2298       55.4251       76.6549    
   9  0.309131      -1.17399      -5.07426       5.07426       55.3763       60.4506    
  10  0.577854     -0.548434      -2.37046       2.37046       55.6227       57.9931    
  11  0.931529     -0.709274E-01 -0.306565      0.306565       55.6220       55.9286    
  12  0.665703     -0.406912      -1.75877       1.75877       55.9751       57.7339    
  13  0.585695     -0.534955      -2.31220       2.31220       55.3547       57.6669    
  14  0.295001      -1.22078      -5.27648       5.27648       55.6930       60.9695    
  15  0.317712E-01  -3.44920      -14.9082       14.9082       55.2042       70.1124    
  16  0.222963      -1.50075      -6.48660       6.48660       55.0370       61.5236    
  17  0.325931      -1.12107      -4.84553       4.84553       55.1919       60.0375    
  18  0.785098     -0.241947      -1.04575       1.04575       55.4360       56.4818    
  19  0.550467     -0.596988      -2.58032       2.58032       56.3664       58.9468    
  20  0.780222     -0.248176      -1.07268       1.07268       55.5148       56.5875    
  21  0.130712      -2.03476      -8.79470       8.79470       50.8055       59.6002    
  22  0.873397     -0.135365     -0.585079      0.585079       55.8656       56.4507    
  23  0.366975      -1.00246      -4.33287       4.33287       55.9013       60.2341    
  24  0.813244     -0.206724     -0.893510      0.893510       55.3930       56.2865    
  25  0.782660E-01  -2.54764      -11.0115       11.0115       57.3874       68.3989    
  26  0.700327     -0.356208      -1.53961       1.53961       55.4965       57.0361    
  27  0.437766     -0.826071      -3.57047       3.57047       56.1652       59.7357    
  28  0.508966E-01  -2.97796      -12.8714       12.8714       55.0947       67.9661    
  29  0.276850      -1.28428      -5.55095       5.55095       54.4453       59.9962    
  30  0.792031     -0.233154      -1.00775       1.00775       56.3681       57.3758    
  31  0.174747      -1.74441      -7.53977       7.53977       54.1850       61.7248    
  32  0.469718     -0.755623      -3.26598       3.26598       55.6325       58.8985    
  33  0.252316      -1.37707      -5.95203       5.95203       58.0288       63.9808    
  34  0.980061     -0.201409E-01 -0.870535E-01  0.870535E-01   55.4576       55.5447    
  35  0.838300     -0.176379     -0.762354      0.762354       53.7200       54.4823    
  36  0.369385     -0.995915      -4.30458       4.30458       55.8868       60.1914    
  37  0.923139     -0.799751E-01 -0.345671      0.345671       56.4406       56.7863    
  38  0.592446     -0.523496      -2.26267       2.26267       55.8922       58.1549    
  39  0.348787      -1.05329      -4.55258       4.55258       55.6701       60.2227    
  40  0.569584     -0.562850      -2.43277       2.43277       55.4608       57.8936    
  41  0.543034E-01  -2.91317      -12.5914       12.5914       55.6766       68.2680    
  42  0.582662     -0.540148      -2.33465       2.33465       56.3102       58.6448    
  43  0.702825     -0.352648      -1.52423       1.52423       54.6934       56.2176    
  44  0.941375     -0.604140E-01 -0.261124      0.261124       54.3964       54.6575    
  45  0.258857      -1.35148      -5.84141       5.84141       55.6739       61.5154    
  46  0.116535      -2.14956      -9.29092       9.29092       55.5327       64.8236    
  47  0.102671      -2.27622      -9.83838       9.83838       54.9250       64.7634    
  48  0.172023      -1.76013      -7.60768       7.60768       55.2045       62.8122    
  49  0.434982E-01  -3.13504      -13.5504       13.5504       58.1204       71.6708    
  50  0.852122     -0.160026     -0.691671      0.691671       53.8423       54.5340    
  51  0.583521     -0.538675      -2.32828       2.32828       56.7638       59.0921    
  52  0.843374     -0.170345     -0.736271      0.736271       67.2120       67.9482    
loop,thermsimp(1:2)       56   8.45810       7.00969    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205         54.52          1.06          0.99         23.89          0.43          0.06         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    206         53.70          1.02          1.01         24.12          0.20          0.06         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       56
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       57
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      205
neval,tstepnext:      205     205

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083      -1.78112       1.78112       53.3113       55.0924    
   2  0.724212     -0.322671      -1.39466       1.39466       53.7200       55.1146    
   3  0.633711     -0.456163      -1.97164       1.97164       53.8423       55.8139    
   4  0.448566     -0.801700      -3.46514       3.46514       54.3964       57.8616    
   5  0.964228     -0.364273E-01 -0.157448      0.157448       55.0105       55.1680    
   6  0.714306     -0.336444      -1.45419       1.45419       55.4576       56.9118    
   7  0.528330     -0.638035      -2.75774       2.75774       55.6220       58.3798    
   8  0.654127     -0.424453      -1.83459       1.83459       54.6934       56.5280    
   9  0.368899     -0.997232      -4.31027       4.31027       55.3930       59.7032    
  10  0.227697      -1.47974      -6.39579       6.39579       55.8656       62.2614    
  11  0.612266     -0.490588      -2.12044       2.12044       55.4360       57.5564    
  12  0.313777      -1.15907      -5.00979       5.00979       55.5148       60.5246    
  13  0.258526      -1.35276      -5.84695       5.84695       56.4406       62.2876    
  14  0.119298      -2.12613      -9.18965       9.18965       55.4965       64.6861    
  15  0.213331      -1.54491      -6.67746       6.67746       56.3681       63.0455    
  16  0.294218      -1.22343      -5.28798       5.28798       55.3547       60.6427    
  17  0.352988      -1.04132      -4.50084       4.50084       55.9751       60.4759    
  18  0.348706      -1.05353      -4.55359       4.55359       55.4608       60.0144    
  19  0.449249     -0.800179      -3.45856       3.45856       55.6227       59.0812    
  20  0.879121     -0.128833     -0.556846      0.556846       55.9626       56.5195    
  21  0.464081     -0.767695      -3.31816       3.31816       55.8922       59.2104    
  22  0.497582     -0.697995      -3.01690       3.01690       56.3102       59.3271    
  23  0.920207     -0.831566E-01 -0.359423      0.359423       55.6325       55.9920    
  24  0.811773     -0.208535     -0.901338      0.901338       56.3664       57.2678    
  25  0.190651      -1.65731      -7.16328       7.16328       56.7638       63.9271    
  26  0.645174     -0.438235      -1.89416       1.89416       50.8055       52.6997    
  27  0.668343     -0.402954      -1.74166       1.74166       56.1652       57.9069    
  28  0.765111     -0.267735      -1.15721       1.15721       54.4453       55.6025    
  29  0.991779     -0.825499E-02 -0.356800E-01  0.356800E-01   55.1919       55.2276    
  30  0.136888      -1.98859      -8.59518       8.59518       55.8868       64.4820    
  31  0.645145E-01  -2.74086      -11.8467       11.8467       55.6701       67.5168    
  32  0.408515E-01  -3.19781      -13.8217       13.8217       55.9013       69.7230    
  33  0.264109      -1.33140      -5.75460       5.75460       55.3763       61.1309    
  34  0.382737     -0.960407      -4.15110       4.15110       54.8255       58.9766    
  35  0.402738E-02  -5.51464      -23.8356       23.8356       55.6930       79.5285    
  36  0.318074      -1.14547      -4.95099       4.95099       54.2023       59.1533    
  37  0.245237      -1.40553      -6.07504       6.07504       55.6739       61.7490    
  38  0.519766     -0.654377      -2.82837       2.82837       55.0370       57.8654    
  39  0.255147      -1.36592      -5.90381       5.90381       53.9033       59.8071    
  40  0.833841     -0.181712     -0.785402      0.785402       54.1850       54.9705    
  41  0.696242E-01  -2.66464      -11.5172       11.5172       55.2045       66.7217    
  42  0.487295     -0.718886      -3.10720       3.10720       54.3941       57.5013    
  43  0.276229E-01  -3.58911      -15.5130       15.5130       58.0288       73.5418    
  44  0.638327     -0.448905      -1.94027       1.94027       54.9250       56.8653    
  45  0.206684      -1.57657      -6.81429       6.81429       55.5327       62.3470    
  46  0.736003     -0.306521      -1.32486       1.32486       67.2120       68.5368    
  47  0.217444E-01  -3.82840      -16.5472       16.5472       55.0947       71.6419    
  48  0.956929     -0.440260E-01 -0.190291      0.190291       55.6766       55.8669    
  49  0.883561     -0.123795     -0.535070      0.535070       57.3874       57.9224    
  50  0.700901     -0.355388      -1.53607       1.53607       55.2042       56.7402    
  51  0.201997      -1.59950      -6.91342       6.91342       58.1204       65.0338    
  52  0.412152     -0.886362      -3.83107       3.83107       53.7035       57.5346    
loop,thermsimp(1:2)       57   1.78112       1.39466    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207         53.97          1.22          1.02         23.76          0.38          0.06         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    208         52.87          1.01          1.01         23.95          0.32          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.87
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    4.32224               205
loop is:       57
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    4.32224               205
loop is:       58
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    2.16112               256

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      207     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -6.13533       6.13533       50.8055       56.9409    
   2  0.104884      -2.25490      -4.87312       4.87312       54.1850       59.0582    
   3  0.784254     -0.243023     -0.525200      0.525200       53.3113       53.8365    
   4  0.813133     -0.206861     -0.447051      0.447051       53.7200       54.1670    
   5  0.490778     -0.711764      -1.53821       1.53821       55.0105       56.5487    
   6  0.168573      -1.78039      -3.84762       3.84762       55.1919       59.0396    
   7  0.450161     -0.798149      -1.72489       1.72489       54.4453       56.1702    
   8  0.828233     -0.188461     -0.407286      0.407286       53.8423       54.2496    
   9  0.994731     -0.528342E-02 -0.114181E-01  0.114181E-01   55.6766       55.6880    
  10  0.813340     -0.206606     -0.446500      0.446500       55.6325       56.0790    
  11  0.776133     -0.253432     -0.547696      0.547696       55.9626       56.5103    
  12  0.729556     -0.315319     -0.681441      0.681441       54.6934       55.3748    
  13  0.530451     -0.634028      -1.37021       1.37021       55.2042       56.5744    
  14  0.752564E-01  -2.58685      -5.59050       5.59050       54.9250       60.5155    
  15  0.918457     -0.850597E-01 -0.183824      0.183824       55.4576       55.6415    
  16  0.162642      -1.81621      -3.92504       3.92504       56.3664       60.2915    
  17  0.725851     -0.320411     -0.692445      0.692445       54.3941       55.0865    
  18  0.322292      -1.13230      -2.44703       2.44703       53.7035       56.1506    
  19  0.838064     -0.176661     -0.381785      0.381785       55.4360       55.8178    
  20  0.346062E-01  -3.36372      -7.26940       7.26940       54.3964       61.6658    
  21  0.442915     -0.814377      -1.75997       1.75997       55.0370       56.7970    
  22  0.143708      -1.93997      -4.19251       4.19251       56.1652       60.3578    
  23  0.940845     -0.609769E-01 -0.131778      0.131778       57.3874       57.5192    
  24  0.972503     -0.278816E-01 -0.602555E-01  0.602555E-01   55.6220       55.6823    
  25  0.291831      -1.23158      -2.66159       2.66159       54.8255       57.4871    
  26  0.211976      -1.55128      -3.35251       3.35251       55.6227       58.9752    
  27  0.695427     -0.363229     -0.784982      0.784982       54.2023       54.9873    
  28  0.982540E-01  -2.32020      -5.01422       5.01422       55.8922       60.9064    
  29  0.730742     -0.313695     -0.677931      0.677931       56.3102       56.9881    
  30  0.417794     -0.872766      -1.88615       1.88615       55.3930       57.2791    
  31  0.868385     -0.141121     -0.304978      0.304978       53.9033       54.2083    
  32  0.300897      -1.20099      -2.59547       2.59547       55.4608       58.0563    
  33  0.917219     -0.864093E-01 -0.186741      0.186741       55.9751       56.1618    
  34  0.304394      -1.18943      -2.57051       2.57051       55.5148       58.0853    
  35  0.856500     -0.154901     -0.334760      0.334760       55.3547       55.6895    
  36  0.310652      -1.16908      -2.52652       2.52652       55.3763       57.9029    
  37  0.846275     -0.166911     -0.360715      0.360715       55.6739       56.0347    
  38  0.206825      -1.57588      -3.40567       3.40567       55.8656       59.2713    
  39  0.606376     -0.500256      -1.08111       1.08111       56.4406       57.5217    
  40  0.840015     -0.174336     -0.376760      0.376760       55.5327       55.9095    
  41  0.348835      -1.05315      -2.27599       2.27599       56.3681       58.6440    
  42  0.857325     -0.153939     -0.332680      0.332680       56.7638       57.0965    
  43  0.308035E-01  -3.48013      -7.52097       7.52097       55.8868       63.4078    
  44  0.400632     -0.914711      -1.97680       1.97680       55.4965       57.4733    
  45  0.242237      -1.41784      -3.06411       3.06411       58.1204       61.1845    
  46  0.407771     -0.897050      -1.93863       1.93863       55.2045       57.1431    
  47  0.430691     -0.842364      -1.82045       1.82045       55.6701       57.4905    
  48  0.415503     -0.878266      -1.89804       1.89804       67.2120       69.1100    
  49  0.593575     -0.521591      -1.12722       1.12722       55.9013       57.0285    
  50  0.973620     -0.267342E-01 -0.577757E-01  0.577757E-01   55.0947       55.1525    
  51  0.510257     -0.672840      -1.45409       1.45409       58.0288       59.4829    
  52  0.796475     -0.227560     -0.491783      0.491783       52.8723       53.3640    
loop,thermsimp(1:2)       58   6.13533       4.87312    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209         56.64          1.22          1.03         23.81          0.40          0.06         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     56.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       58
neval is:      208
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       59
neval is:      208


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      208     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857      -2.39574       2.39574       52.8723       55.2680    
   2  0.939148     -0.627826E-01 -0.135681      0.135681       53.3113       53.4469    
   3  0.130906      -2.03328      -4.39415       4.39415       53.7200       58.1141    
   4  0.664370     -0.408916     -0.883716      0.883716       53.9033       54.7870    
   5  0.490908     -0.711498      -1.53763       1.53763       53.8423       55.3799    
   6  0.711731     -0.340055     -0.734899      0.734899       54.2023       54.9372    
   7  0.676080     -0.391444     -0.845957      0.845957       54.3941       55.2400    
   8  0.611139     -0.492432      -1.06420       1.06420       55.0947       56.1589    
   9  0.614246     -0.487359      -1.05324       1.05324       54.6934       55.7466    
  10  0.988045     -0.120275E-01 -0.259929E-01  0.259929E-01   55.4576       55.4836    
  11  0.232883      -1.45722      -3.14922       3.14922       55.6220       58.7712    
  12  0.450825     -0.796675      -1.72171       1.72171       55.6766       57.3983    
  13  0.493319     -0.706599      -1.52704       1.52704       55.3547       56.8818    
  14  0.191184      -1.65452      -3.57561       3.57561       55.4360       59.0116    
  15  0.894136     -0.111897     -0.241823      0.241823       55.5327       55.7745    
  16  0.391751     -0.937128      -2.02524       2.02524       55.6739       57.6992    
  17  0.236278      -1.44275      -3.11795       3.11795       55.6325       58.7505    
  18  0.496874E-01  -3.00200      -6.48769       6.48769       53.7035       60.1912    
  19  0.784524     -0.242678     -0.524457      0.524457       55.9751       56.4996    
  20  0.292328      -1.22988      -2.65792       2.65792       54.4453       57.1032    
  21  0.832247E-01  -2.48621      -5.37300       5.37300       55.9626       61.3356    
  22  0.423133     -0.860069      -1.85871       1.85871       55.0105       56.8692    
  23  0.234472      -1.45042      -3.13452       3.13452       55.2042       58.3387    
  24  0.868463     -0.141031     -0.304784      0.304784       55.0370       55.3418    
  25  0.122969      -2.09582      -4.52932       4.52932       50.8055       55.3348    
  26  0.811771     -0.208537     -0.450673      0.450673       56.3102       56.7609    
  27  0.786834     -0.239738     -0.518103      0.518103       55.9013       56.4194    
  28  0.163144      -1.81312      -3.91837       3.91837       56.7638       60.6822    
  29  0.571103     -0.560186      -1.21063       1.21063       55.2045       56.4151    
  30  0.769982     -0.261388     -0.564889      0.564889       55.3930       55.9579    
  31  0.471769     -0.751265      -1.62357       1.62357       55.4965       57.1201    
  32  0.584935     -0.536254      -1.15891       1.15891       54.8255       55.9844    
  33  0.416140     -0.876734      -1.89473       1.89473       55.6701       57.5648    
  34  0.106525E-01  -4.54196      -9.81572       9.81572       57.3874       67.2031    
  35  0.595424     -0.518482      -1.12050       1.12050       56.4406       57.5611    
  36  0.302400      -1.19600      -2.58471       2.58471       55.3763       57.9610    
  37  0.629701     -0.462510     -0.999538      0.999538       55.4608       56.4603    
  38  0.939026E-01  -2.36550      -5.11212       5.11212       55.5148       60.6269    
  39  0.911727     -0.924151E-01 -0.199720      0.199720       56.3681       56.5678    
  40  0.289502      -1.23959      -2.67891       2.67891       55.6227       58.3016    
  41  0.326571      -1.11911      -2.41852       2.41852       55.1919       57.6104    
  42  0.972366     -0.280231E-01 -0.605611E-01  0.605611E-01   54.1850       54.2456    
  43  0.823413     -0.194297     -0.419899      0.419899       55.8656       56.2855    
  44  0.790717     -0.234815     -0.507463      0.507463       58.0288       58.5363    
  45  0.167922      -1.78426      -3.85599       3.85599       56.3664       60.2224    
  46  0.804665     -0.217329     -0.469674      0.469674       56.1652       56.6349    
  47  0.154714      -1.86617      -4.03302       4.03302       54.9250       58.9580    
  48  0.240456      -1.42522      -3.08007       3.08007       55.8922       58.9723    
  49  0.351787      -1.04473      -2.25779       2.25779       58.1204       60.3782    
  50  0.666429E-01  -2.70841      -5.85319       5.85319       54.3964       60.2496    
  51  0.484113     -0.725437      -1.56775       1.56775       55.8868       57.4546    
  52  0.298509      -1.20896      -2.61270       2.61270       56.6395       59.2522    
loop,thermsimp(1:2)       59   2.39574      0.135681    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    210         54.09          1.16          1.00         23.97          0.27          0.07         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    211         54.87          0.96          1.00         24.19          0.14          0.05         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       59
neval is:      210
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       60
neval is:      210


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      210     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028      -2.57234       2.57234       53.3113       55.8836    
   2  0.843344     -0.170380     -0.368211      0.368211       54.1850       54.5533    
   3  0.457815     -0.781289      -1.68846       1.68846       53.9033       55.5918    
   4  0.933709     -0.685899E-01 -0.148231      0.148231       54.2023       54.3506    
   5  0.887159     -0.119731     -0.258752      0.258752       54.3941       54.6528    
   6  0.786211     -0.240530     -0.519814      0.519814       52.8723       53.3921    
   7  0.794803     -0.229661     -0.496325      0.496325       50.8055       51.3019    
   8  0.573435E-01  -2.85870      -6.17798       6.17798       55.0370       61.2150    
   9  0.647106     -0.435245     -0.940615      0.940615       53.8423       54.7829    
  10  0.110118      -2.20620      -4.76787       4.76787       55.4576       60.2255    
  11  0.339548      -1.08014      -2.33431       2.33431       54.6934       57.0277    
  12  0.635246     -0.453742     -0.980591      0.980591       55.5327       56.5133    
  13  0.488392     -0.716638      -1.54874       1.54874       55.3930       56.9417    
  14  0.602571     -0.506549      -1.09471       1.09471       54.8255       55.9202    
  15  0.710041     -0.342433     -0.740039      0.740039       55.0947       55.8347    
  16  0.585763     -0.534840      -1.15585       1.15585       55.8656       57.0214    
  17  0.288010      -1.24476      -2.69007       2.69007       55.2045       57.8945    
  18  0.455238     -0.786934      -1.70066       1.70066       55.9013       57.6019    
  19  0.723984     -0.322986     -0.698011      0.698011       55.4608       56.1588    
  20  0.554067     -0.590470      -1.27608       1.27608       55.9751       57.2512    
  21  0.646516     -0.436157     -0.942587      0.942587       56.3681       57.3106    
  22  0.271985      -1.30201      -2.81379       2.81379       56.1652       58.9790    
  23  0.901636E-02  -4.70871      -10.1761       10.1761       56.3102       66.4863    
  24  0.383616     -0.958114      -2.07060       2.07060       55.0105       57.0811    
  25  0.443516     -0.813022      -1.75704       1.75704       55.3547       57.1118    
  26  0.223023      -1.50048      -3.24272       3.24272       54.4453       57.6880    
  27  0.123255      -2.09350      -4.52430       4.52430       55.4965       60.0208    
  28  0.817485     -0.201523     -0.435515      0.435515       55.6766       56.1121    
  29  0.333893      -1.09693      -2.37060       2.37060       55.8868       58.2574    
  30  0.867877     -0.141706     -0.306243      0.306243       56.4406       56.7468    
  31  0.365747      -1.00581      -2.17368       2.17368       55.6701       57.8438    
  32  0.429445     -0.845262      -1.82671       1.82671       55.1919       57.0186    
  33  0.856620     -0.154761     -0.334457      0.334457       55.6739       56.0084    
  34  0.729532     -0.315352     -0.681514      0.681514       55.3763       56.0579    
  35  0.315845      -1.15251      -2.49070       2.49070       53.7200       56.2107    
  36  0.547596     -0.602217      -1.30146       1.30146       55.6227       56.9241    
  37  0.752130     -0.284846     -0.615587      0.615587       55.2042       55.8198    
  38  0.806451     -0.215112     -0.464883      0.464883       58.0288       58.4937    
  39  0.618613     -0.480275      -1.03793       1.03793       55.6325       56.6705    
  40  0.630350     -0.461480     -0.997312      0.997312       55.6220       56.6193    
  41  0.251741      -1.37935      -2.98095       2.98095       54.9250       57.9059    
  42  0.846504     -0.166640     -0.360128      0.360128       55.8922       56.2523    
  43  0.830791     -0.185377     -0.400621      0.400621       55.4360       55.8366    
  44  0.566838     -0.567681      -1.22683       1.22683       56.6395       57.8663    
  45  0.499450E-01  -2.99683      -6.47651       6.47651       53.7035       60.1801    
  46  0.976301     -0.239838E-01 -0.518319E-01  0.518319E-01   56.3664       56.4183    
  47  0.401049     -0.913672      -1.97455       1.97455       54.3964       56.3710    
  48  0.709931E-01  -2.64517      -5.71653       5.71653       58.1204       63.8369    
  49  0.920370E-02  -4.68815      -10.1316       10.1316       55.5148       65.6465    
  50  0.379723     -0.968314      -2.09264       2.09264       56.7638       58.8564    
  51  0.207569      -1.57229      -3.39791       3.39791       55.9626       59.3606    
  52  0.745673     -0.293468     -0.634219      0.634219       54.0860       54.7202    
loop,thermsimp(1:2)       60   2.57234      0.368211    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    212         53.91          1.02          1.00         24.07          0.29          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.91
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       60
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       61
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      211     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713     -0.403509      0.403509       50.8055       51.2090    
   2  0.735850     -0.306729     -0.662878      0.662878       52.8723       53.5351    
   3  0.828786     -0.187793     -0.405844      0.405844       54.2023       54.6082    
   4  0.592078     -0.524118      -1.13268       1.13268       54.1850       55.3177    
   5  0.691797E-01  -2.67105      -5.77245       5.77245       54.3941       60.1665    
   6  0.772335     -0.258337     -0.558297      0.558297       54.0860       54.6443    
   7  0.504563     -0.684063      -1.47834       1.47834       53.8423       55.3206    
   8  0.700615     -0.355797     -0.768919      0.768919       53.9033       54.6722    
   9  0.764596     -0.268408     -0.580061      0.580061       55.2042       55.7842    
  10  0.459614     -0.777368      -1.67999       1.67999       55.0947       56.7747    
  11  0.931193     -0.712882E-01 -0.154062      0.154062       55.4360       55.5901    
  12  0.502482E-01  -2.99078      -6.46343       6.46343       53.3113       59.7747    
  13  0.498197     -0.696760      -1.50578       1.50578       54.8255       56.3313    
  14  0.551534E-01  -2.89764      -6.26213       6.26213       55.6739       61.9361    
  15  0.172209      -1.75905      -3.80151       3.80151       55.3763       59.1779    
  16  0.238868E-01  -3.73443      -8.07055       8.07055       55.6766       63.7472    
  17  0.699366     -0.357581     -0.772774      0.772774       55.4608       56.2336    
  18  0.764093     -0.269066     -0.581484      0.581484       53.7200       54.3015    
  19  0.465633     -0.764357      -1.65187       1.65187       55.8922       57.5441    
  20  0.209906      -1.56110      -3.37372       3.37372       54.3964       57.7701    
  21  0.216891      -1.52836      -3.30297       3.30297       56.3664       59.6694    
  22  0.795854E-01  -2.53092      -5.46963       5.46963       55.5327       61.0023    
  23  0.701683     -0.354273     -0.765627      0.765627       55.6220       56.3877    
  24  0.574425     -0.554385      -1.19809       1.19809       55.6325       56.8306    
  25  0.674968     -0.393090     -0.849514      0.849514       56.4406       57.2901    
  26  0.684189     -0.379521     -0.820191      0.820191       55.6227       56.4429    
  27  0.541862     -0.612745      -1.32421       1.32421       55.3930       56.7172    
  28  0.668027     -0.403426     -0.871851      0.871851       55.1919       56.0638    
  29  0.353251      -1.04058      -2.24881       2.24881       55.8656       58.1144    
  30  0.778708     -0.250119     -0.540538      0.540538       54.6934       55.2339    
  31  0.829283     -0.187194     -0.404548      0.404548       55.0105       55.4151    
  32  0.679297     -0.386697     -0.835698      0.835698       55.3547       56.1904    
  33  0.536301     -0.623060      -1.34651       1.34651       55.9751       57.3216    
  34  0.247738      -1.39538      -3.01559       3.01559       56.3681       59.3836    
  35  0.271399      -1.30416      -2.81845       2.81845       55.9013       58.7197    
  36  0.284124      -1.25835      -2.71943       2.71943       54.4453       57.1647    
  37  0.664442     -0.408808     -0.883482      0.883482       55.6701       56.5536    
  38  0.874508     -0.134094     -0.289792      0.289792       56.6395       56.9293    
  39  0.916444     -0.872538E-01 -0.188566      0.188566       55.2045       55.3930    
  40  0.295165      -1.22022      -2.63704       2.63704       54.9250       57.5620    
  41  0.242592      -1.41637      -3.06095       3.06095       55.8868       58.9478    
  42  0.396124     -0.926028      -2.00126       2.00126       58.0288       60.0301    
  43  0.509193E-01  -2.97751      -6.43476       6.43476       56.7638       63.1986    
  44  0.778911     -0.249858     -0.539973      0.539973       56.1652       56.7052    
  45  0.351009      -1.04694      -2.26257       2.26257       55.9626       58.2252    
  46  0.480934     -0.732025      -1.58199       1.58199       55.4965       57.0785    
  47  0.908579     -0.958731E-01 -0.207193      0.207193       53.7035       53.9107    
  48  0.898885     -0.106600     -0.230375      0.230375       55.4576       55.6880    
  49  0.561121     -0.577819      -1.24873       1.24873       55.0370       56.2857    
  50  0.851109     -0.161215     -0.348406      0.348406       58.1204       58.4688    
  51  0.975854     -0.244425E-01 -0.528232E-01  0.528232E-01   55.5148       55.5676    
  52  0.187829      -1.67223      -3.61388       3.61388       53.9076       57.5215    
loop,thermsimp(1:2)       61  0.403509      0.662878    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213         53.83          1.06          1.01         24.18          0.07          0.05         26.38
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       61
neval is:      212
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       62
neval is:      212


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      212     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01 -0.186324      0.186324       50.8055       50.9919    
   2  0.899579E-01  -2.40841      -5.20487       5.20487       52.8723       58.0771    
   3  0.997625     -0.237830E-02 -0.513979E-02  0.513979E-02   53.7035       53.7087    
   4  0.224083      -1.49574      -3.23247       3.23247       53.7200       56.9524    
   5  0.120769      -2.11388      -4.56834       4.56834       54.2023       58.7707    
   6  0.302676E-01  -3.49768      -7.55889       7.55889       54.0860       61.6449    
   7  0.315161      -1.15467      -2.49538       2.49538       53.9033       56.3987    
   8  0.155895      -1.85857      -4.01660       4.01660       54.6934       58.7100    
   9  0.467639     -0.760060      -1.64258       1.64258       54.1850       55.8276    
  10  0.277823      -1.28077      -2.76789       2.76789       53.8423       56.6102    
  11  0.712282     -0.339281     -0.733226      0.733226       55.2045       55.9377    
  12  0.929560     -0.730437E-01 -0.157856      0.157856       55.0105       55.1684    
  13  0.499024     -0.695101      -1.50219       1.50219       55.5148       57.0170    
  14  0.940347     -0.615066E-01 -0.132923      0.132923       55.4360       55.5689    
  15  0.714006     -0.336864     -0.728003      0.728003       55.4576       56.1856    
  16  0.162603      -1.81644      -3.92555       3.92555       55.2042       59.1297    
  17  0.663729     -0.409881     -0.885801      0.885801       55.1919       56.0777    
  18  0.314148      -1.15789      -2.50234       2.50234       55.3547       57.8571    
  19  0.497386     -0.698388      -1.50930       1.50930       55.4608       56.9701    
  20  0.368387     -0.998622      -2.15814       2.15814       55.0370       57.1951    
  21  0.326342      -1.11981      -2.42004       2.42004       54.8255       57.2456    
  22  0.442952     -0.814294      -1.75979       1.75979       55.6220       57.3818    
  23  0.929694     -0.729000E-01 -0.157546      0.157546       55.6227       55.7802    
  24  0.945450E-01  -2.35868      -5.09738       5.09738       55.6701       60.7675    
  25  0.407158     -0.898555      -1.94188       1.94188       56.1652       58.1071    
  26  0.706679     -0.347179     -0.750295      0.750295       55.3930       56.1433    
  27  0.657848     -0.418781     -0.905036      0.905036       55.0947       55.9997    
  28  0.968040     -0.324817E-01 -0.701969E-01  0.701969E-01   55.6325       55.7027    
  29  0.330387      -1.10749      -2.39342       2.39342       56.6395       59.0329    
  30  0.756161     -0.279501     -0.604035      0.604035       55.4965       56.1005    
  31  0.307772      -1.17840      -2.54665       2.54665       54.4453       56.9919    
  32  0.759008E-01  -2.57833      -5.57207       5.57207       56.4406       62.0127    
  33  0.615618E-01  -2.78771      -6.02458       6.02458       55.9751       61.9997    
  34  0.545984     -0.605166      -1.30784       1.30784       53.9076       55.2155    
  35  0.339865      -1.07921      -2.33229       2.33229       55.8922       58.2245    
  36  0.816477     -0.202757     -0.438182      0.438182       54.9250       55.3632    
  37  0.932889     -0.694691E-01 -0.150131      0.150131       54.3964       54.5466    
  38  0.667042     -0.404902     -0.875041      0.875041       55.8656       56.7406    
  39  0.583049     -0.539484      -1.16589       1.16589       55.9626       57.1285    
  40  0.210192      -1.55973      -3.37077       3.37077       58.1204       61.4912    
  41  0.158846      -1.83982      -3.97608       3.97608       55.9013       59.8773    
  42  0.360401      -1.02054      -2.20550       2.20550       55.8868       58.0923    
  43  0.508154     -0.676971      -1.46301       1.46301       55.3763       56.8394    
  44  0.873303     -0.135473     -0.292773      0.292773       56.3681       56.6608    
  45  0.650524     -0.429977     -0.929232      0.929232       56.3664       57.2957    
  46  0.805601     -0.216166     -0.467161      0.467161       53.3113       53.7784    
  47  0.312590E-03  -8.07062      -17.4416       17.4416       58.0288       75.4704    
  48  0.892261     -0.113997     -0.246360      0.246360       54.3941       54.6404    
  49  0.504672     -0.683846      -1.47787       1.47787       55.5327       57.0106    
  50  0.269834      -1.30995      -2.83095       2.83095       55.6739       58.5049    
  51  0.752889     -0.283838     -0.613407      0.613407       56.7638       57.3772    
  52  0.952800     -0.483498E-01 -0.104490      0.104490       53.8275       53.9320    
loop,thermsimp(1:2)       62  0.186324       5.20487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    214         53.31          1.05          1.00         24.23          0.01          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    215         57.60          0.96          1.00         24.24          0.20          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       62
neval is:      214
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       63
neval is:      214


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      214     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570      -1.04289       1.04289       50.8055       51.8484    
   2  0.828850     -0.187716     -0.405675      0.405675       53.7035       54.1092    
   3  0.138898      -1.97402      -4.26609       4.26609       53.3113       57.5773    
   4  0.174947      -1.74327      -3.76742       3.76742       53.8275       57.5949    
   5  0.452367E-01  -3.09585      -6.69049       6.69049       54.3964       61.0869    
   6  0.982229     -0.179305E-01 -0.387499E-01  0.387499E-01   54.3941       54.4328    
   7  0.855728     -0.155803     -0.336709      0.336709       55.0105       55.3472    
   8  0.350750      -1.04768      -2.26416       2.26416       53.9076       56.1718    
   9  0.880054     -0.127772     -0.276131      0.276131       54.9250       55.2011    
  10  0.106511      -2.23950      -4.83983       4.83983       55.4360       60.2758    
  11  0.336060      -1.09047      -2.35663       2.35663       55.6325       57.9892    
  12  0.904819     -0.100020     -0.216155      0.216155       55.6227       55.8388    
  13  0.765597     -0.267099     -0.577232      0.577232       54.1850       54.7623    
  14  0.551789     -0.594589      -1.28498       1.28498       55.2045       56.4895    
  15  0.832435     -0.183400     -0.396349      0.396349       55.0947       55.4911    
  16  0.353494      -1.03989      -2.24733       2.24733       55.1919       57.4393    
  17  0.510104     -0.673140      -1.45474       1.45474       55.4965       56.9512    
  18  0.523162     -0.647863      -1.40011       1.40011       55.3930       56.7931    
  19  0.953043     -0.480957E-01 -0.103941      0.103941       55.4576       55.5616    
  20  0.267001E-01  -3.62309      -7.82992       7.82992       53.9033       61.7332    
  21  0.280924      -1.26967      -2.74391       2.74391       53.8423       56.5862    
  22  0.956868     -0.440901E-01 -0.952840E-01  0.952840E-01   56.3681       56.4633    
  23  0.779725     -0.248814     -0.537716      0.537716       55.8656       56.4033    
  24  0.901061     -0.104183     -0.225151      0.225151       55.3763       55.6015    
  25  0.533391     -0.628501      -1.35827       1.35827       53.7200       55.0782    
  26  0.642536     -0.442333     -0.955934      0.955934       55.4608       56.4167    
  27  0.520565E-01  -2.95543      -6.38702       6.38702       54.4453       60.8323    
  28  0.330080      -1.10842      -2.39543       2.39543       55.5327       57.9281    
  29  0.280801      -1.27011      -2.74486       2.74486       55.5148       58.2597    
  30  0.144013      -1.93785      -4.18792       4.18792       55.9626       60.1506    
  31  0.201537      -1.60178      -3.46164       3.46164       55.0370       58.4986    
  32  0.920188     -0.831777E-01 -0.179757      0.179757       54.8255       55.0053    
  33  0.747222     -0.291393     -0.629735      0.629735       56.3664       56.9962    
  34  0.697959     -0.359595     -0.777128      0.777128       56.7638       57.5409    
  35  0.492949     -0.707349      -1.52866       1.52866       55.6220       57.1507    
  36  0.378001     -0.972857      -2.10246       2.10246       55.3547       57.4572    
  37  0.936484     -0.656225E-01 -0.141818      0.141818       52.8723       53.0141    
  38  0.458232     -0.780381      -1.68649       1.68649       55.8868       57.5733    
  39  0.286796      -1.24898      -2.69920       2.69920       56.1652       58.8644    
  40  0.524458     -0.645389      -1.39476       1.39476       55.8922       57.2870    
  41  0.126679      -2.06610      -4.46508       4.46508       55.6739       60.1390    
  42  0.645270     -0.438086     -0.946755      0.946755       54.6934       55.6401    
  43  0.996049     -0.395919E-02 -0.855629E-02  0.855629E-02   54.2023       54.2109    
  44  0.470695     -0.753545      -1.62850       1.62850       56.6395       58.2680    
  45  0.783048     -0.244561     -0.528525      0.528525       55.2042       55.7327    
  46  0.682425     -0.382103     -0.825769      0.825769       55.9013       56.7270    
  47  0.623779     -0.471960      -1.01996       1.01996       55.6701       56.6901    
  48  0.138146      -1.97945      -4.27782       4.27782       58.1204       62.3982    
  49  0.317697      -1.14666      -2.47806       2.47806       54.0860       56.5640    
  50  0.215616      -1.53426      -3.31571       3.31571       55.9751       59.2908    
  51  0.392653     -0.934829      -2.02028       2.02028       56.4406       58.4609    
  52  0.311957      -1.16489      -2.51747       2.51747       53.3087       55.8261    
loop,thermsimp(1:2)       63   1.04289      0.405675    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    216         53.13          1.01          1.01         24.20          0.12          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       63
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       64
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      215     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670     -0.437993      0.437993       50.8055       51.2435    
   2  0.209930      -1.56098      -3.37347       3.37347       52.8723       56.2457    
   3  0.710991     -0.341096     -0.737148      0.737148       53.7035       54.4407    
   4  0.967365     -0.331789E-01 -0.717035E-01  0.717035E-01   54.2023       54.2740    
   5  0.650635E-01  -2.73239      -5.90502       5.90502       54.3941       60.2991    
   6  0.578340     -0.547593      -1.18341       1.18341       54.1850       55.3685    
   7  0.928890E-01  -2.37635      -5.13557       5.13557       54.8255       59.9611    
   8  0.486974     -0.719546      -1.55502       1.55502       53.7200       55.2750    
   9  0.560625     -0.578703      -1.25065       1.25065       54.9250       56.1756    
  10  0.552834     -0.592698      -1.28089       1.28089       55.0105       56.2914    
  11  0.744529E-01  -2.59759      -5.61370       5.61370       55.0947       60.7084    
  12  0.937600     -0.644318E-01 -0.139245      0.139245       55.4576       55.5969    
  13  0.154459      -1.86783      -4.03660       4.03660       55.3763       59.4129    
  14  0.186893E-02  -6.28239      -13.5770       13.5770       54.6934       68.2704    
  15  0.250797      -1.38311      -2.98907       2.98907       55.2042       58.1932    
  16  0.924847E-01  -2.38071      -5.14500       5.14500       53.3087       58.4537    
  17  0.476680     -0.740911      -1.60120       1.60120       55.6227       57.2239    
  18  0.266527      -1.32228      -2.85760       2.85760       53.9076       56.7652    
  19  0.369755     -0.994916      -2.15013       2.15013       55.8656       58.0157    
  20  0.595561     -0.518252      -1.12000       1.12000       55.4608       56.5808    
  21  0.636070     -0.452447     -0.977792      0.977792       56.3681       57.3458    
  22  0.447294     -0.804540      -1.73871       1.73871       55.2045       56.9432    
  23  0.964945     -0.356839E-01 -0.771171E-01  0.771171E-01   54.0860       54.1631    
  24  0.752421     -0.284460     -0.614751      0.614751       53.8423       54.4571    
  25  0.705556     -0.348769     -0.753731      0.753731       55.6701       56.4238    
  26  0.943467     -0.581939E-01 -0.125764      0.125764       55.9013       56.0270    
  27  0.272564      -1.29988      -2.80920       2.80920       55.3930       58.2022    
  28  0.215815      -1.53333      -3.31371       3.31371       55.4965       58.8102    
  29  0.756955     -0.278452     -0.601768      0.601768       56.3664       56.9682    
  30  0.538381     -0.619189      -1.33814       1.33814       55.6220       56.9602    
  31  0.182967      -1.69845      -3.67055       3.67055       55.8922       59.5628    
  32  0.644758     -0.438881     -0.948473      0.948473       55.1919       56.1404    
  33  0.939477     -0.624320E-01 -0.134923      0.134923       55.3547       55.4897    
  34  0.663186     -0.410699     -0.887570      0.887570       56.7638       57.6514    
  35  0.795014     -0.229396     -0.495752      0.495752       55.8868       56.3826    
  36  0.630792     -0.460779     -0.995798      0.995798       53.3113       54.3071    
  37  0.151039      -1.89022      -4.08498       4.08498       53.8275       57.9125    
  38  0.668306     -0.403009     -0.870950      0.870950       55.5327       56.4036    
  39  0.683820     -0.380061     -0.821357      0.821357       55.6325       56.4539    
  40  0.122229      -2.10186      -4.54236       4.54236       55.5148       60.0572    
  41  0.664453     -0.408791     -0.883445      0.883445       56.6395       57.5229    
  42  0.548687     -0.600228      -1.29716       1.29716       56.4406       57.7378    
  43  0.931535     -0.709210E-01 -0.153269      0.153269       55.0370       55.1903    
  44  0.139742      -1.96796      -4.25299       4.25299       56.1652       60.4182    
  45  0.429142     -0.845967      -1.82823       1.82823       55.9751       57.8033    
  46  0.531147     -0.632717      -1.36738       1.36738       55.6739       57.0413    
  47  0.575558     -0.552416      -1.19384       1.19384       55.9626       57.1565    
  48  0.336537      -1.08905      -2.35356       2.35356       55.4360       57.7896    
  49  0.324486      -1.12551      -2.43237       2.43237       54.4453       56.8776    
  50  0.652768     -0.426534     -0.921790      0.921790       54.3964       55.3182    
  51  0.537860     -0.620158      -1.34023       1.34023       53.9033       55.2435    
  52  0.415288     -0.878782      -1.89915       1.89915       53.1301       55.0292    
loop,thermsimp(1:2)       64  0.437993       3.37347    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217         55.90          1.07          1.02         24.09          0.08          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218         72.99          0.95          1.00         24.06          0.22          0.06         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       64
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       65
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      217     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097      -2.16322       2.16322       50.8055       52.9688    
   2  0.298218      -1.20993      -2.61480       2.61480       54.0860       56.7008    
   3  0.374092     -0.983254      -2.12493       2.12493       54.2023       56.3273    
   4  0.417366     -0.873791      -1.88837       1.88837       53.3113       55.1996    
   5  0.299382      -1.20604      -2.60639       2.60639       53.7035       56.3099    
   6  0.373029     -0.986099      -2.13108       2.13108       53.8423       55.9734    
   7  0.628224     -0.464858      -1.00461       1.00461       53.1301       54.1347    
   8  0.111397      -2.19465      -4.74291       4.74291       55.0370       59.7799    
   9  0.983555     -0.165818E-01 -0.358352E-01  0.358352E-01   53.9033       53.9391    
  10  0.394578     -0.929938      -2.00971       2.00971       53.7200       55.7297    
  11  0.410639     -0.890042      -1.92349       1.92349       54.3964       56.3199    
  12  0.700680     -0.355705     -0.768720      0.768720       54.1850       54.9538    
  13  0.223946      -1.49635      -3.23379       3.23379       55.3547       58.5885    
  14  0.651113E-01  -2.73166      -5.90343       5.90343       55.4576       61.3611    
  15  0.704010     -0.350963     -0.758473      0.758473       55.9013       56.6597    
  16  0.172411      -1.75787      -3.79897       3.79897       55.1919       58.9909    
  17  0.567412     -0.566670      -1.22464       1.22464       54.9250       56.1496    
  18  0.186334      -1.68021      -3.63114       3.63114       52.8723       56.5034    
  19  0.677524     -0.389310     -0.841346      0.841346       55.0105       55.8519    
  20  0.362270      -1.01537      -2.19432       2.19432       55.8868       58.0811    
  21  0.603880     -0.504381      -1.09003       1.09003       55.5327       56.6227    
  22  0.782208     -0.245635     -0.530846      0.530846       55.6701       56.2009    
  23  0.129808      -2.04170      -4.41236       4.41236       55.6325       60.0449    
  24  0.284816      -1.25591      -2.71418       2.71418       55.4608       58.1750    
  25  0.246930      -1.39865      -3.02265       3.02265       53.9076       56.9303    
  26  0.256917      -1.35900      -2.93696       2.93696       54.4453       57.3822    
  27  0.240545      -1.42485      -3.07927       3.07927       55.2045       58.2837    
  28  0.218018      -1.52318      -3.29177       3.29177       55.6220       58.9138    
  29  0.235583E-01  -3.74828      -8.10047       8.10047       56.3664       64.4669    
  30  0.114660      -2.16578      -4.68051       4.68051       55.6739       60.3544    
  31  0.119129      -2.12755      -4.59789       4.59789       55.9626       60.5605    
  32  0.471707     -0.751398      -1.62386       1.62386       55.6227       57.2465    
  33  0.607413     -0.498546      -1.07742       1.07742       56.3681       57.4455    
  34  0.568731     -0.564347      -1.21962       1.21962       56.6395       57.8591    
  35  0.587492     -0.531893      -1.14948       1.14948       56.7638       57.9133    
  36  0.411259     -0.888533      -1.92023       1.92023       56.4406       58.3608    
  37  0.836192     -0.178897     -0.386617      0.386617       55.4360       55.8226    
  38  0.152977      -1.87747      -4.05743       4.05743       55.9751       60.0325    
  39  0.941831     -0.599291E-01 -0.129514      0.129514       53.8275       53.9570    
  40  0.936595     -0.655045E-01 -0.141563      0.141563       55.8656       56.0071    
  41  0.856621     -0.154759     -0.334453      0.334453       55.2042       55.5386    
  42  0.484786     -0.724047      -1.56475       1.56475       55.3930       56.9577    
  43  0.188261      -1.66993      -3.60891       3.60891       53.3087       56.9176    
  44  0.957606     -0.433189E-01 -0.936173E-01  0.936173E-01   55.4965       55.5901    
  45  0.234891      -1.44863      -3.13067       3.13067       55.3763       58.5070    
  46  0.758920     -0.275858     -0.596162      0.596162       55.8922       56.4884    
  47  0.135340      -1.99997      -4.32216       4.32216       54.8255       59.1477    
  48  0.779121E-01  -2.55217      -5.51555       5.51555       55.5148       61.0304    
  49  0.573767     -0.555531      -1.20057       1.20057       54.3941       55.5946    
  50  0.982512     -0.176424E-01 -0.381273E-01  0.381273E-01   56.1652       56.2034    
  51  0.109579      -2.21111      -4.77847       4.77847       55.0947       59.8732    
  52  0.714543     -0.336113     -0.726379      0.726379       55.9040       56.6304    
loop,thermsimp(1:2)       65   2.16322       2.61480    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219         53.76          1.15          1.02         24.07          0.18          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    220         55.02          1.02          1.00         24.10          0.14          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       65
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       66
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      219     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468      -2.94924       2.94924       50.8055       53.7548    
   2  0.513427E-01  -2.96923      -6.41686       6.41686       53.9033       60.3202    
   3  0.288453      -1.24322      -2.68676       2.68676       53.8275       56.5143    
   4  0.107044      -2.23452      -4.82905       4.82905       53.1301       57.9591    
   5  0.756779     -0.278684     -0.602269      0.602269       54.1850       54.7873    
   6  0.333762      -1.09733      -2.37146       2.37146       53.3113       55.6827    
   7  0.270335      -1.30809      -2.82695       2.82695       55.2042       58.0311    
   8  0.666278E-01  -2.70863      -5.85368       5.85368       55.4965       61.3502    
   9  0.517510     -0.658727      -1.42359       1.42359       54.3941       55.8177    
  10  0.719680     -0.328949     -0.710897      0.710897       53.7200       54.4309    
  11  0.401542     -0.912442      -1.97190       1.97190       55.4360       57.4079    
  12  0.408125     -0.896181      -1.93675       1.93675       55.0105       56.9473    
  13  0.481086     -0.731710      -1.58131       1.58131       53.8423       55.4236    
  14  0.166952E-01  -4.09263      -8.84466       8.84466       55.8656       64.7102    
  15  0.913266     -0.907286E-01 -0.196075      0.196075       54.9250       55.1211    
  16  0.972084     -0.283134E-01 -0.611886E-01  0.611886E-01   55.6701       55.7313    
  17  0.889421     -0.117184     -0.253249      0.253249       56.1652       56.4185    
  18  0.171754      -1.76169      -3.80723       3.80723       53.7035       57.5108    
  19  0.925876     -0.770155E-01 -0.166440      0.166440       54.3964       54.5629    
  20  0.992897     -0.712866E-02 -0.154059E-01  0.154059E-01   54.2023       54.2177    
  21  0.118575E-01  -4.43479      -9.58411       9.58411       55.8922       65.4763    
  22  0.492413     -0.708438      -1.53102       1.53102       52.8723       54.4033    
  23  0.952433     -0.487360E-01 -0.105324      0.105324       55.5327       55.6380    
  24  0.591826     -0.524543      -1.13360       1.13360       55.9040       57.0376    
  25  0.762199     -0.271548     -0.586847      0.586847       55.9013       56.4881    
  26  0.613492     -0.488588      -1.05590       1.05590       54.0860       55.1419    
  27  0.134863      -2.00350      -4.32980       4.32980       53.3087       57.6385    
  28  0.633670     -0.456227     -0.985960      0.985960       53.9076       54.8936    
  29  0.829625     -0.186782     -0.403657      0.403657       55.3930       55.7966    
  30  0.148219      -1.90906      -4.12571       4.12571       55.6227       59.7484    
  31  0.198093      -1.61902      -3.49889       3.49889       54.4453       57.9442    
  32  0.321318      -1.13532      -2.45357       2.45357       56.3681       58.8216    
  33  0.475408     -0.743582      -1.60697       1.60697       56.6395       58.2465    
  34  0.196520      -1.62699      -3.51612       3.51612       56.7638       60.2799    
  35  0.637413     -0.450337     -0.973233      0.973233       55.8868       56.8600    
  36  0.596751     -0.516255      -1.11569       1.11569       55.4608       56.5765    
  37  0.351361      -1.04594      -2.26040       2.26040       55.2045       57.4649    
  38  0.111764      -2.19136      -4.73579       4.73579       56.4406       61.1764    
  39  0.213579      -1.54375      -3.33622       3.33622       55.3763       58.7126    
  40  0.799647     -0.223585     -0.483195      0.483195       55.3547       55.8379    
  41  0.670682     -0.399460     -0.863281      0.863281       55.6220       56.4853    
  42  0.104235      -2.26111      -4.88652       4.88652       55.1919       60.0784    
  43  0.607160E-01  -2.80155      -6.05448       6.05448       54.8255       60.8800    
  44  0.462312     -0.771516      -1.66734       1.66734       55.0370       56.7043    
  45  0.269658      -1.31060      -2.83236       2.83236       55.0947       57.9271    
  46  0.678606     -0.387714     -0.837896      0.837896       55.9751       56.8130    
  47  0.669051     -0.401895     -0.868543      0.868543       55.6325       56.5011    
  48  0.551912     -0.594367      -1.28450       1.28450       55.6739       56.9584    
  49  0.116070E-01  -4.45614      -9.63026       9.63026       55.9626       65.5929    
  50  0.911337     -0.928428E-01 -0.200644      0.200644       55.5148       55.7155    
  51  0.302404      -1.19599      -2.58468       2.58468       55.4576       58.0423    
  52  0.527926     -0.638800      -1.38052       1.38052       53.7626       55.1431    
loop,thermsimp(1:2)       66   2.94924       6.41686    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221         53.29          0.99          1.00         24.15          0.10          0.05         26.29
Just calling func    0   0         26.29


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    222         52.31          1.00          0.99         24.17          0.12          0.06         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    53.288        2.862     -1.343      5.110     -100.0      1.251    
                     -0.6470      2.627     -100.0      2.641      1.375    
                       1.421    -0.8701      1.841      0.000      0.000    
                      -1.422      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.409     -2.942     -5.336     -3.141    
                      -13.82     -2.611      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.3975E-01 0.2841E-01  0.000    -0.7828    
                     -0.1862    -0.2738    -0.1359    -0.1383    -0.5362E-01

                      -1.125     -1.126      0.000    -0.1541E-01-0.3244E-01
                      0.8541E-01-0.1898E-01-0.4737E-01-0.2216    -0.1617    
                      0.1243     0.3202E-01-0.1798    -0.9250      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.320      9.129     -7039.     -4.000    
                     -0.3699    -0.9608E-01  9.079      8.546     -4904.    

                      -4.000    -0.1041    -0.5401      8.795      9.038    
                      -6912.     -4.000    -0.7736E-01-0.5165      9.634    
                       8.711     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.31
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       66
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       67
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      221     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095      -2.61702       2.61702       50.8055       53.4225    
   2  0.840396     -0.173882     -0.375779      0.375779       54.2023       54.5781    
   3  0.165782      -1.79708      -3.88371       3.88371       52.8723       56.7560    
   4  0.516202E-01  -2.96384      -6.40521       6.40521       53.7200       60.1252    
   5  0.163201      -1.81278      -3.91762       3.91762       54.3964       58.3140    
   6  0.201529      -1.60182      -3.46172       3.46172       54.1850       57.6468    
   7  0.791805     -0.233441     -0.504493      0.504493       53.9076       54.4121    
   8  0.306466      -1.18265      -2.55584       2.55584       54.9250       57.4808    
   9  0.625963     -0.468465      -1.01241       1.01241       54.0860       55.0984    
  10  0.255827      -1.36325      -2.94615       2.94615       53.7626       56.7087    
  11  0.275269      -1.29001      -2.78786       2.78786       53.8423       56.6302    
  12  0.546374     -0.604451      -1.30629       1.30629       55.5327       56.8390    
  13  0.738275E-01  -2.60602      -5.63193       5.63193       53.3113       58.9432    
  14  0.459460     -0.777704      -1.68071       1.68071       55.5148       57.1955    
  15  0.245891      -1.40287      -3.03176       3.03176       55.6701       58.7019    
  16  0.818144E-01  -2.50330      -5.40993       5.40993       55.3930       60.8029    
  17  0.791963     -0.233241     -0.504062      0.504062       54.3941       54.8981    
  18  0.652560     -0.426852     -0.922478      0.922478       55.3547       56.2772    
  19  0.743237     -0.296740     -0.641290      0.641290       56.1652       56.8065    
  20  0.146095      -1.92350      -4.15691       4.15691       55.6220       59.7789    
  21  0.747148     -0.291492     -0.629949      0.629949       55.9013       56.5312    
  22  0.935024E-01  -2.36977      -5.12135       5.12135       55.6325       60.7539    
  23  0.924202     -0.788243E-01 -0.170349      0.170349       53.8275       53.9979    
  24  0.193934      -1.64024      -3.54475       3.54475       55.4608       59.0056    
  25  0.112499      -2.18481      -4.72163       4.72163       55.0370       59.7586    
  26  0.609079     -0.495807      -1.07150       1.07150       55.9751       57.0466    
  27  0.387822     -0.947210      -2.04703       2.04703       55.8868       57.9338    
  28  0.151976      -1.88403      -4.07162       4.07162       55.0105       59.0822    
  29  0.820125     -0.198299     -0.428547      0.428547       55.6739       56.1025    
  30  0.100865      -2.29397      -4.95754       4.95754       55.9040       60.8615    
  31  0.246930      -1.39865      -3.02265       3.02265       55.4360       58.4586    
  32  0.101973      -2.28305      -4.93393       4.93393       55.2045       60.1384    
  33  0.389401     -0.943145      -2.03825       2.03825       53.7035       55.7418    
  34  0.573635     -0.555762      -1.20107       1.20107       53.3087       54.5097    
  35  0.730896E-01  -2.61607      -5.65363       5.65363       55.0947       60.7483    
  36  0.260104      -1.34667      -2.91032       2.91032       54.4453       57.3556    
  37  0.562102     -0.576073      -1.24496       1.24496       53.1301       54.3750    
  38  0.159056      -1.83850      -3.97322       3.97322       55.2042       59.1774    
  39  0.779134E-02  -4.85474      -10.4917       10.4917       55.4576       65.9493    
  40  0.693208     -0.366425     -0.791888      0.791888       56.6395       57.4314    
  41  0.600279     -0.510361      -1.10295       1.10295       55.3763       56.4793    
  42  0.419387     -0.868962      -1.87793       1.87793       56.3681       58.2460    
  43  0.952036     -0.491524E-01 -0.106224      0.106224       55.6227       55.7289    
  44  0.613955     -0.487834      -1.05427       1.05427       55.1919       56.2462    
  45  0.842752     -0.171082     -0.369729      0.369729       56.7638       57.1335    
  46  0.733219     -0.310311     -0.670619      0.670619       53.9033       54.5739    
  47  0.776088     -0.253489     -0.547821      0.547821       54.8255       55.3734    
  48  0.965215     -0.354047E-01 -0.765136E-01  0.765136E-01   56.4406       56.5171    
  49  0.487812     -0.717826      -1.55131       1.55131       55.4965       57.0478    
  50  0.864492     -0.145613     -0.314686      0.314686       55.8656       56.1803    
  51  0.334607      -1.09480      -2.36599       2.36599       55.8922       58.2582    
  52  0.267438      -1.31887      -2.85023       2.85023       52.3116       55.1618    
loop,thermsimp(1:2)       67   2.61702      0.375779    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223         54.68          1.24          1.01         24.17          0.10          0.07         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    224         58.53          1.02          1.01         24.18          0.04          0.06         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.68
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       67
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       68
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      223     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -10.0762       10.0762       50.8055       60.8817    
   2  0.714357     -0.336373     -0.726942      0.726942       53.8275       54.5545    
   3  0.997096     -0.290808E-02 -0.628472E-02  0.628472E-02   53.1301       53.1364    
   4  0.905437     -0.993373E-01 -0.214680      0.214680       53.9076       54.1223    
   5  0.307060      -1.18071      -2.55166       2.55166       53.3087       55.8603    
   6  0.179061      -1.72003      -3.71718       3.71718       53.9033       57.6205    
   7  0.384312     -0.956301      -2.06668       2.06668       54.2023       56.2690    
   8  0.901101     -0.104138     -0.225055      0.225055       54.3941       54.6191    
   9  0.606170     -0.500594      -1.08184       1.08184       54.0860       55.1678    
  10  0.515234     -0.663133      -1.43311       1.43311       52.3116       53.7447    
  11  0.639447     -0.447152     -0.966348      0.966348       54.8255       55.7919    
  12  0.820429     -0.197928     -0.427745      0.427745       55.6227       56.0504    
  13  0.521739     -0.650587      -1.40600       1.40600       53.7035       55.1095    
  14  0.767979     -0.263993     -0.570520      0.570520       55.6739       56.2445    
  15  0.530366     -0.634187      -1.37055       1.37055       55.8656       57.2361    
  16  0.732471     -0.311332     -0.672826      0.672826       55.1919       55.8648    
  17  0.440461     -0.819933      -1.77197       1.77197       55.3547       57.1267    
  18  0.595715     -0.517993      -1.11944       1.11944       55.3763       56.4958    
  19  0.407958     -0.896592      -1.93764       1.93764       56.4406       58.3782    
  20  0.544683     -0.607550      -1.31299       1.31299       55.9013       57.2143    
  21  0.611386E-01  -2.79461      -6.03949       6.03949       53.8423       59.8818    
  22  0.135041      -2.00218      -4.32694       4.32694       53.7626       58.0895    
  23  0.547242     -0.602864      -1.30286       1.30286       52.8723       54.1751    
  24  0.214436      -1.53975      -3.32757       3.32757       56.1652       59.4928    
  25  0.340220      -1.07816      -2.33004       2.33004       55.5327       57.8627    
  26  0.270394      -1.30787      -2.82647       2.82647       55.9751       58.8016    
  27  0.605229     -0.502149      -1.08520       1.08520       55.4965       56.5817    
  28  0.630206     -0.461709     -0.997807      0.997807       56.7638       57.7616    
  29  0.942476     -0.592449E-01 -0.128035      0.128035       55.5148       55.6429    
  30  0.293125      -1.22716      -2.65203       2.65203       54.4453       57.0973    
  31  0.526210     -0.642056      -1.38756       1.38756       56.6395       58.0271    
  32  0.972201     -0.281927E-01 -0.609277E-01  0.609277E-01   54.9250       54.9859    
  33  0.570000     -0.562119      -1.21480       1.21480       54.1850       55.3999    
  34  0.752945     -0.283763     -0.613246      0.613246       55.8868       56.5001    
  35  0.333005      -1.09960      -2.37636       2.37636       56.3681       58.7444    
  36  0.430444     -0.842939      -1.82169       1.82169       55.8922       57.7139    
  37  0.106505      -2.23957      -4.83997       4.83997       54.3964       59.2364    
  38  0.327953      -1.11488      -2.40940       2.40940       55.4360       57.8454    
  39  0.586631     -0.533359      -1.15265       1.15265       55.6701       56.8227    
  40  0.563274     -0.573989      -1.24046       1.24046       53.3113       54.5517    
  41  0.802100     -0.220522     -0.476573      0.476573       55.4608       55.9374    
  42  0.594871     -0.519411      -1.12251       1.12251       55.0105       56.1330    
  43  0.816066     -0.203261     -0.439270      0.439270       55.2042       55.6434    
  44  0.170795E-01  -4.06987      -8.79548       8.79548       55.0370       63.8325    
  45  0.554958     -0.588864      -1.27260       1.27260       55.6220       56.8946    
  46  0.674023     -0.394492     -0.852543      0.852543       53.7200       54.5725    
  47  0.371758     -0.989512      -2.13845       2.13845       55.2045       57.3429    
  48  0.309440      -1.17299      -2.53497       2.53497       55.0947       57.6297    
  49  0.182337      -1.70190      -3.67800       3.67800       55.6325       59.3105    
  50  0.443504     -0.813049      -1.75710       1.75710       55.3930       57.1501    
  51  0.407824     -0.896918      -1.93835       1.93835       55.9040       57.8423    
  52  0.140254      -1.96430      -4.24508       4.24508       54.6827       58.9278    
loop,thermsimp(1:2)       68   10.0762      0.726942    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225         54.49          1.23          1.02         24.09          0.05          0.07         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    226         56.95          1.01          1.00         24.10          0.11          0.06         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.49
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       68
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       69
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      225     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914      -1.40886       1.40886       53.1301       54.5390    
   2  0.554375     -0.589913      -1.27487       1.27487       52.3116       53.5865    
   3  0.404373     -0.905418      -1.95671       1.95671       53.9076       55.8643    
   4  0.632877     -0.457478     -0.988665      0.988665       52.8723       53.8609    
   5  0.395261     -0.928209      -2.00597       2.00597       53.3113       55.3172    
   6  0.715068     -0.335378     -0.724792      0.724792       53.8275       54.5523    
   7  0.918313     -0.852174E-01 -0.184165      0.184165       53.7200       53.9041    
   8  0.529514E-01  -2.93838      -6.35019       6.35019       54.3941       60.7443    
   9  0.284219      -1.25801      -2.71871       2.71871       54.9250       57.6437    
  10  0.809402     -0.211460     -0.456990      0.456990       53.7035       54.1605    
  11  0.604758     -0.502928      -1.08689       1.08689       54.0860       55.1729    
  12  0.624772     -0.470369      -1.01652       1.01652       54.1850       55.2016    
  13  0.622683     -0.473718      -1.02376       1.02376       55.5148       56.5386    
  14  0.491656     -0.709976      -1.53434       1.53434       55.2042       56.7385    
  15  0.823484     -0.194211     -0.419713      0.419713       54.8255       55.2452    
  16  0.185629E-01  -3.98659      -8.61549       8.61549       53.3087       61.9242    
  17  0.911253     -0.929346E-01 -0.200843      0.200843       55.1919       55.3928    
  18  0.825116     -0.192231     -0.415434      0.415434       55.4608       55.8762    
  19  0.902913     -0.102129     -0.220714      0.220714       55.6227       55.8434    
  20  0.869925     -0.139348     -0.301148      0.301148       55.0105       55.3117    
  21  0.135445      -1.99919      -4.32048       4.32048       55.6739       59.9944    
  22  0.516840     -0.660022      -1.42639       1.42639       54.2023       55.6287    
  23  0.127583      -2.05899      -4.44972       4.44972       55.3763       59.8261    
  24  0.237062E-01  -3.74202      -8.08695       8.08695       55.8868       63.9738    
  25  0.456233     -0.784753      -1.69594       1.69594       55.4965       57.1924    
  26  0.547397     -0.602581      -1.30225       1.30225       55.6701       56.9723    
  27  0.231746E-02  -6.06728      -13.1121       13.1121       55.6220       68.7341    
  28  0.467213     -0.760969      -1.64454       1.64454       54.4453       56.0898    
  29  0.397333     -0.922981      -1.99467       1.99467       55.3547       57.3494    
  30  0.291343      -1.23325      -2.66521       2.66521       55.3930       58.0582    
  31  0.964262     -0.363922E-01 -0.786478E-01  0.786478E-01   55.9013       55.9799    
  32  0.260485      -1.34521      -2.90716       2.90716       55.8656       58.7727    
  33  0.868574     -0.140902     -0.304507      0.304507       55.2045       55.5090    
  34  0.832573     -0.183235     -0.395992      0.395992       53.9033       54.2993    
  35  0.240383      -1.42552      -3.08072       3.08072       55.0947       58.1754    
  36  0.878342     -0.129719     -0.280338      0.280338       55.8922       56.1725    
  37  0.168707      -1.77959      -3.84591       3.84591       56.7638       60.6097    
  38  0.348015      -1.05551      -2.28108       2.28108       55.9040       58.1851    
  39  0.846224     -0.166971     -0.360845      0.360845       55.4360       55.7968    
  40  0.842580     -0.171286     -0.370170      0.370170       55.5327       55.9029    
  41  0.230401      -1.46794      -3.17238       3.17238       56.6395       59.8119    
  42  0.441962     -0.816531      -1.76462       1.76462       53.7626       55.5272    
  43  0.772036     -0.258724     -0.559134      0.559134       56.4406       56.9997    
  44  0.970063     -0.303946E-01 -0.656863E-01  0.656863E-01   56.3681       56.4337    
  45  0.610535     -0.493419      -1.06634       1.06634       55.9751       57.0414    
  46  0.548201     -0.601114      -1.29908       1.29908       54.6827       55.9818    
  47  0.322533      -1.13155      -2.44541       2.44541       54.3964       56.8418    
  48  0.194318E-01  -3.94084      -8.51663       8.51663       55.6325       64.1492    
  49  0.219930      -1.51445      -3.27290       3.27290       56.1652       59.4381    
  50  0.538995E-01  -2.92063      -6.31184       6.31184       53.8423       60.1541    
  51  0.189941      -1.66104      -3.58970       3.58970       50.8055       54.3952    
  52  0.339787      -1.07944      -2.33279       2.33279       54.4888       56.8216    
loop,thermsimp(1:2)       69   1.40886       1.27487    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227         54.58          1.22          1.01         24.10          0.08          0.06         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    228         64.10          1.06          1.01         24.10          0.14          0.06         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.58
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       69
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       70
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      227     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809      -3.06465       3.06465       52.3116       55.3762    
   2  0.384023     -0.957054      -2.06831       2.06831       52.8723       54.9406    
   3  0.672379     -0.396933     -0.857819      0.857819       53.7200       54.5778    
   4  0.204591      -1.58674      -3.42914       3.42914       53.7035       57.1327    
   5  0.145151      -1.92998      -4.17091       4.17091       53.9033       58.0742    
   6  0.235757      -1.44495      -3.12271       3.12271       50.8055       53.9282    
   7  0.882595     -0.124889     -0.269900      0.269900       53.1301       53.4000    
   8  0.215562      -1.53451      -3.31625       3.31625       53.8275       57.1438    
   9  0.248905      -1.39068      -3.00543       3.00543       54.0860       57.0914    
  10  0.695481     -0.363152     -0.784814      0.784814       54.1850       54.9699    
  11  0.515786     -0.662063      -1.43080       1.43080       54.8255       56.2563    
  12  0.956817     -0.441428E-01 -0.953978E-01  0.953978E-01   55.0105       55.1059    
  13  0.256477      -1.36072      -2.94067       2.94067       53.3113       56.2519    
  14  0.870409     -0.138792     -0.299946      0.299946       55.1919       55.4919    
  15  0.296335      -1.21627      -2.62849       2.62849       55.2045       57.8330    
  16  0.563087     -0.574322      -1.24118       1.24118       53.7626       55.0037    
  17  0.860973     -0.149692     -0.323502      0.323502       54.2023       54.5258    
  18  0.336353      -1.08959      -2.35474       2.35474       55.4360       57.7907    
  19  0.432238     -0.838780      -1.81270       1.81270       55.6227       57.4354    
  20  0.411587     -0.887734      -1.91850       1.91850       53.9076       55.8261    
  21  0.685679     -0.377346     -0.815488      0.815488       55.4608       56.2763    
  22  0.178038E-01  -4.02835      -8.70573       8.70573       55.5327       64.2384    
  23  0.330516      -1.10710      -2.39258       2.39258       55.9013       58.2938    
  24  0.987115     -0.129685E-01 -0.280264E-01  0.280264E-01   54.6827       54.7108    
  25  0.702947     -0.352474     -0.761738      0.761738       54.4453       55.2070    
  26  0.159040      -1.83860      -3.97343       3.97343       55.8922       59.8656    
  27  0.329714      -1.10953      -2.39783       2.39783       56.3681       58.7659    
  28  0.542452     -0.611656      -1.32186       1.32186       55.5148       56.8367    
  29  0.484074     -0.725518      -1.56793       1.56793       55.2042       56.7721    
  30  0.574330     -0.554551      -1.19845       1.19845       54.4888       55.6873    
  31  0.987944     -0.121288E-01 -0.262119E-01  0.262119E-01   54.3964       54.4226    
  32  0.565195E-01  -2.87317      -6.20926       6.20926       55.6701       61.8794    
  33  0.662626     -0.411545     -0.889397      0.889397       56.4406       57.3300    
  34  0.462195     -0.771769      -1.66788       1.66788       55.9751       57.6430    
  35  0.413957     -0.881994      -1.90609       1.90609       55.4965       57.4026    
  36  0.627825     -0.465493      -1.00599       1.00599       55.3547       56.3607    
  37  0.373783E-01  -3.28667      -7.10287       7.10287       54.9250       62.0279    
  38  0.318481      -1.14419      -2.47274       2.47274       55.3930       57.8657    
  39  0.193037      -1.64487      -3.55477       3.55477       55.0947       58.6495    
  40  0.246573      -1.40010      -3.02578       3.02578       55.9040       58.9298    
  41  0.913643     -0.903152E-01 -0.195182      0.195182       55.8656       56.0608    
  42  0.593287     -0.522077      -1.12827       1.12827       56.1652       57.2935    
  43  0.323913      -1.12728      -2.43618       2.43618       56.6395       59.0757    
  44  0.270579E-01  -3.60978      -7.80115       7.80115       55.3763       63.1775    
  45  0.684823     -0.378595     -0.818189      0.818189       55.6739       56.4921    
  46  0.279340      -1.27532      -2.75613       2.75613       53.8423       56.5984    
  47  0.285511      -1.25348      -2.70891       2.70891       56.7638       59.4727    
  48  0.361874      -1.01646      -2.19669       2.19669       54.3941       56.5908    
  49  0.779291     -0.249370     -0.538919      0.538919       53.3087       53.8476    
  50  0.590933     -0.526053      -1.13686       1.13686       55.8868       57.0237    
  51  0.493821E-01  -3.00817      -6.50100       6.50100       55.6325       62.1335    
  52  0.736348     -0.306053     -0.661417      0.661417       54.5829       55.2443    
loop,thermsimp(1:2)       70   3.06465       2.06831    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229         53.75          1.19          1.00         24.12          0.12          0.07         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230         56.82          1.05          1.02         24.10          0.07          0.06         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.75
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       70
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       71
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      229     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344     -0.454578      0.454578       53.1301       53.5847    
   2  0.601567     -0.508218      -1.09832       1.09832       53.3087       54.4070    
   3  0.190401      -1.65862      -3.58448       3.58448       50.8055       54.3900    
   4  0.827263     -0.189632     -0.409818      0.409818       54.3964       54.8062    
   5  0.581677     -0.541840      -1.17098       1.17098       54.2023       55.3733    
   6  0.680336     -0.385169     -0.832396      0.832396       53.7200       54.5524    
   7  0.641383     -0.444128     -0.959814      0.959814       54.6827       55.6426    
   8  0.593931     -0.520992      -1.12593       1.12593       52.8723       53.9982    
   9  0.326400      -1.11963      -2.41966       2.41966       54.1850       56.6047    
  10  0.964323     -0.363286E-01 -0.785104E-01  0.785104E-01   53.7626       53.8411    
  11  0.481751     -0.730328      -1.57833       1.57833       55.0105       56.5889    
  12  0.230624E-01  -3.76955      -8.14645       8.14645       54.4453       62.5917    
  13  0.214859      -1.53777      -3.32331       3.32331       54.5829       57.9062    
  14  0.325804      -1.12146      -2.42360       2.42360       52.3116       54.7352    
  15  0.668745     -0.402353     -0.869532      0.869532       55.1919       56.0615    
  16  0.803263     -0.219073     -0.473442      0.473442       54.4888       54.9623    
  17  0.465531     -0.764577      -1.65234       1.65234       53.9076       55.5600    
  18  0.589796     -0.527978      -1.14102       1.14102       55.8656       57.0066    
  19  0.783335     -0.244195     -0.527735      0.527735       53.3113       53.8390    
  20  0.937099     -0.649659E-01 -0.140399      0.140399       54.8255       54.9659    
  21  0.504081     -0.685019      -1.48041       1.48041       55.4608       56.9412    
  22  0.368431E-01  -3.30109      -7.13404       7.13404       55.3547       62.4888    
  23  0.462712     -0.770651      -1.66547       1.66547       55.6739       57.3394    
  24  0.172447      -1.75767      -3.79853       3.79853       54.3941       58.1926    
  25  0.361979      -1.01617      -2.19606       2.19606       53.8423       56.0384    
  26  0.616189     -0.484202      -1.04642       1.04642       55.2042       56.2506    
  27  0.495582     -0.702023      -1.51715       1.51715       55.5148       57.0320    
  28  0.492859     -0.707532      -1.52906       1.52906       55.8868       57.4159    
  29  0.189027      -1.66586      -3.60013       3.60013       54.0860       57.6861    
  30  0.336237      -1.08994      -2.35549       2.35549       53.7035       56.0590    
  31  0.997382     -0.262184E-02 -0.566610E-02  0.566610E-02   53.8275       53.8332    
  32  0.629287     -0.463168      -1.00096       1.00096       56.1652       57.1662    
  33  0.226178      -1.48644      -3.21236       3.21236       56.4406       59.6530    
  34  0.522315     -0.649483      -1.40361       1.40361       55.4965       56.9001    
  35  0.238835E-02  -6.03715      -13.0470       13.0470       55.6227       68.6697    
  36  0.123092E-01  -4.39741      -9.50332       9.50332       55.9751       65.4784    
  37  0.488141     -0.717152      -1.54985       1.54985       55.4360       56.9858    
  38  0.925188     -0.777584E-01 -0.168045      0.168045       55.2045       55.3725    
  39  0.676413     -0.390952     -0.844893      0.844893       55.3930       56.2379    
  40  0.638827     -0.448121     -0.968443      0.968443       53.9033       54.8718    
  41  0.789998     -0.235725     -0.509429      0.509429       55.9013       56.4107    
  42  0.453703E-01  -3.09290      -6.68412       6.68412       55.0947       61.7788    
  43  0.866893     -0.142840     -0.308694      0.308694       56.3681       56.6767    
  44  0.122493E-01  -4.40228      -9.51386       9.51386       55.9040       65.4178    
  45  0.172311      -1.75846      -3.80023       3.80023       56.6395       60.4397    
  46  0.899580     -0.105827     -0.228704      0.228704       56.7638       56.9925    
  47  0.857845     -0.153332     -0.331369      0.331369       55.8922       56.2236    
  48  0.176813      -1.73266      -3.74449       3.74449       55.6701       59.4146    
  49  0.795271E-01  -2.53166      -5.47121       5.47121       54.9250       60.3962    
  50  0.461368     -0.773559      -1.67175       1.67175       55.6325       57.3043    
  51  0.727625     -0.317970     -0.687170      0.687170       55.3763       56.0635    
  52  0.106879      -2.23606      -4.83239       4.83239       53.7480       58.5804    
loop,thermsimp(1:2)       71  0.454578       1.09832    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231         53.35          1.23          1.00         24.05          0.20          0.07         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    232         53.82          1.01          1.00         24.12          0.04          0.05         26.22
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       71
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       72
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      231     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883     -0.300142      0.300142       53.1301       53.4302    
   2  0.470451     -0.754063      -1.62962       1.62962       53.8275       55.4571    
   3  0.615627     -0.485114      -1.04839       1.04839       53.3113       54.3596    
   4  0.291899      -1.23135      -2.66109       2.66109       53.7626       56.4237    
   5  0.584822     -0.536448      -1.15933       1.15933       52.8723       54.0316    
   6  0.681731     -0.383120     -0.827969      0.827969       50.8055       51.6335    
   7  0.680149     -0.385444     -0.832989      0.832989       53.3087       54.1417    
   8  0.560478     -0.578966      -1.25121       1.25121       53.7200       54.9712    
   9  0.392299     -0.935730      -2.02222       2.02222       52.3116       54.3338    
  10  0.586793     -0.533083      -1.15206       1.15206       54.3964       55.5485    
  11  0.461418     -0.773452      -1.67152       1.67152       53.9033       55.5748    
  12  0.142886      -1.94571      -4.20491       4.20491       54.4888       58.6937    
  13  0.960325     -0.404831E-01 -0.874888E-01  0.874888E-01   54.8255       54.9130    
  14  0.547176     -0.602984      -1.30312       1.30312       55.2045       56.5076    
  15  0.817596     -0.201386     -0.435220      0.435220       54.2023       54.6375    
  16  0.184065      -1.69247      -3.65762       3.65762       53.9076       57.5652    
  17  0.763954     -0.269247     -0.581875      0.581875       54.6827       55.2646    
  18  0.740640     -0.300240     -0.648854      0.648854       53.8423       54.4912    
  19  0.257299      -1.35751      -2.93375       2.93375       53.7035       56.6373    
  20  0.274950      -1.29117      -2.79037       2.79037       55.1919       57.9823    
  21  0.850599     -0.161814     -0.349700      0.349700       55.3763       55.7260    
  22  0.265651      -1.32557      -2.86472       2.86472       55.8922       58.7569    
  23  0.388810     -0.944665      -2.04153       2.04153       55.3930       57.4345    
  24  0.921262     -0.820106E-01 -0.177235      0.177235       55.2042       55.3814    
  25  0.622168     -0.474545      -1.02555       1.02555       55.9013       56.9268    
  26  0.831499     -0.184526     -0.398781      0.398781       55.0105       55.4093    
  27  0.777776     -0.251317     -0.543125      0.543125       54.1850       54.7282    
  28  0.519638     -0.654624      -1.41472       1.41472       56.3681       57.7828    
  29  0.343480      -1.06863      -2.30943       2.30943       55.4965       57.8059    
  30  0.379182     -0.969738      -2.09572       2.09572       55.4608       57.5565    
  31  0.509964     -0.673415      -1.45533       1.45533       55.4360       56.8913    
  32  0.457294E-01  -3.08501      -6.66708       6.66708       56.7638       63.4309    
  33  0.952238     -0.489400E-01 -0.105765      0.105765       55.8656       55.9714    
  34  0.198116      -1.61890      -3.49864       3.49864       55.5148       59.0135    
  35  0.863922     -0.146273     -0.316114      0.316114       56.1652       56.4814    
  36  0.765944     -0.266646     -0.576254      0.576254       55.6325       56.2088    
  37  0.849389     -0.163238     -0.352777      0.352777       55.6739       56.0267    
  38  0.488339     -0.716745      -1.54897       1.54897       55.8868       57.4358    
  39  0.969632     -0.308388E-01 -0.666463E-01  0.666463E-01   54.0860       54.1526    
  40  0.971690     -0.287184E-01 -0.620638E-01  0.620638E-01   54.5829       54.6449    
  41  0.690522     -0.370307     -0.800278      0.800278       54.3941       55.1943    
  42  0.266028      -1.32415      -2.86165       2.86165       53.7480       56.6096    
  43  0.581296     -0.542495      -1.17240       1.17240       55.6701       56.8425    
  44  0.636654     -0.451529     -0.975808      0.975808       56.4406       57.4164    
  45  0.947680     -0.537383E-01 -0.116135      0.116135       54.9250       55.0411    
  46  0.792806     -0.232176     -0.501761      0.501761       56.6395       57.1413    
  47  0.420588     -0.866101      -1.87175       1.87175       55.0947       56.9664    
  48  0.780043     -0.248407     -0.536836      0.536836       55.3547       55.8916    
  49  0.834700E-01  -2.48327      -5.36664       5.36664       54.4453       59.8119    
  50  0.707823     -0.345562     -0.746800      0.746800       55.9040       56.6508    
  51  0.836500     -0.178529     -0.385823      0.385823       55.9751       56.3609    
  52  0.111614      -2.19271      -4.73870       4.73870       53.3520       58.0907    
loop,thermsimp(1:2)       72  0.300142       1.62962    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233         53.39          1.23          1.01         24.14          0.09          0.06         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       72
neval is:      232
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       73
neval is:      232


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      232     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528     -0.645155      0.645155       50.8055       51.4507    
   2  0.823468     -0.194230     -0.419755      0.419755       53.1301       53.5498    
   3  0.352913      -1.04153      -2.25088       2.25088       52.8723       55.1231    
   4  0.268511      -1.31486      -2.84157       2.84157       53.3087       56.1502    
   5  0.137541      -1.98383      -4.28730       4.28730       54.0860       58.3733    
   6  0.953738     -0.473661E-01 -0.102364      0.102364       52.3116       52.4140    
   7  0.366602      -1.00348      -2.16863       2.16863       53.3113       55.4799    
   8  0.861530     -0.149046     -0.322106      0.322106       53.8423       54.1644    
   9  0.190086      -1.66028      -3.58806       3.58806       54.2023       57.7904    
  10  0.931621     -0.708293E-01 -0.153070      0.153070       54.5829       54.7359    
  11  0.135562      -1.99833      -4.31862       4.31862       54.1850       58.5037    
  12  0.577052     -0.549824      -1.18823       1.18823       54.8255       56.0138    
  13  0.937511     -0.645266E-01 -0.139450      0.139450       53.7200       53.8594    
  14  0.836727     -0.178258     -0.385236      0.385236       54.9250       55.3102    
  15  0.124731      -2.08159      -4.49857       4.49857       54.3941       58.8926    
  16  0.830758     -0.185417     -0.400708      0.400708       54.6827       55.0835    
  17  0.925849     -0.770442E-01 -0.166502      0.166502       55.2042       55.3707    
  18  0.945668     -0.558633E-01 -0.120727      0.120727       55.0105       55.1313    
  19  0.700762     -0.355587     -0.768465      0.768465       53.8275       54.5960    
  20  0.585168E-01  -2.83844      -6.13421       6.13421       54.3964       60.5306    
  21  0.241985      -1.41888      -3.06637       3.06637       53.9033       56.9697    
  22  0.426115     -0.853047      -1.84353       1.84353       55.3763       57.2199    
  23  0.730656     -0.313813     -0.678187      0.678187       55.3547       56.0329    
  24  0.227460      -1.48078      -3.20014       3.20014       55.8656       59.0657    
  25  0.824070     -0.193500     -0.418176      0.418176       55.6739       56.0921    
  26  0.912829     -0.912064E-01 -0.197108      0.197108       55.6325       55.8296    
  27  0.130860      -2.03363      -4.39491       4.39491       55.9751       60.3700    
  28  0.126999      -2.06358      -4.45963       4.45963       53.7626       58.2222    
  29  0.394828E-01  -3.23189      -6.98449       6.98449       56.1652       63.1497    
  30  0.927793     -0.749466E-01 -0.161968      0.161968       55.2045       55.3664    
  31  0.161762      -1.82163      -3.93676       3.93676       53.7480       57.6847    
  32  0.510374     -0.672611      -1.45359       1.45359       53.7035       55.1571    
  33  0.930607     -0.719186E-01 -0.155425      0.155425       55.9040       56.0594    
  34  0.825283E-01  -2.49461      -5.39115       5.39115       55.6701       61.0613    
  35  0.569143     -0.563624      -1.21806       1.21806       55.4360       56.6541    
  36  0.732951     -0.310676     -0.671408      0.671408       55.9013       56.5727    
  37  0.554950     -0.588877      -1.27263       1.27263       55.0947       56.3673    
  38  0.614368     -0.487160      -1.05281       1.05281       56.6395       57.6923    
  39  0.127889      -2.05659      -4.44454       4.44454       56.4406       60.8851    
  40  0.510007     -0.673330      -1.45515       1.45515       55.3930       56.8481    
  41  0.206107      -1.57936      -3.41319       3.41319       55.8868       59.3000    
  42  0.812962E-01  -2.50966      -5.42366       5.42366       55.4608       60.8845    
  43  0.711913     -0.339799     -0.734347      0.734347       53.9076       54.6420    
  44  0.649899     -0.430939     -0.931310      0.931310       56.3681       57.2994    
  45  0.102708      -2.27587      -4.91842       4.91842       55.4965       60.4149    
  46  0.152702      -1.87927      -4.06132       4.06132       55.1919       59.2532    
  47  0.827734     -0.189064     -0.408590      0.408590       53.3520       53.7606    
  48  0.558329     -0.582808      -1.25952       1.25952       54.4888       55.7483    
  49  0.174746      -1.74442      -3.76991       3.76991       55.8922       59.6621    
  50  0.107247      -2.23262      -4.82497       4.82497       55.5148       60.3398    
  51  0.988891     -0.111711E-01 -0.241420E-01  0.241420E-01   54.4453       54.4694    
  52  0.388651     -0.945075      -2.04242       2.04242       53.3896       55.4320    
loop,thermsimp(1:2)       73  0.645155      0.419755    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    234         53.30          1.23          1.01         24.07          0.08          0.07         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    235         54.64          1.02          1.01         24.09          0.05          0.06         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       73
neval is:      234
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       74
neval is:      234


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      234     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175     -0.387218      0.387218       50.8055       51.1927    
   2  0.439366     -0.822423      -1.77735       1.77735       52.3116       54.0889    
   3  0.603094     -0.505682      -1.09284       1.09284       53.1301       54.2229    
   4  0.695854E-01  -2.66520      -5.75981       5.75981       53.3520       59.1118    
   5  0.273021      -1.29821      -2.80558       2.80558       53.7200       56.5256    
   6  0.418319     -0.871511      -1.88344       1.88344       53.8423       55.7257    
   7  0.688437     -0.373331     -0.806813      0.806813       54.4453       55.2521    
   8  0.400930     -0.913969      -1.97520       1.97520       53.8275       55.8027    
   9  0.569492     -0.563010      -1.21673       1.21673       53.9076       55.1244    
  10  0.812441     -0.207712     -0.448890      0.448890       54.5829       55.0318    
  11  0.222094      -1.50465      -3.25173       3.25173       54.6827       57.9345    
  12  0.695761     -0.362749     -0.783945      0.783945       52.8723       53.6562    
  13  0.909536E-01  -2.39741      -5.18108       5.18108       55.0105       60.1916    
  14  0.297191      -1.21338      -2.62225       2.62225       53.7035       56.3258    
  15  0.806729     -0.214767     -0.464137      0.464137       54.9250       55.3891    
  16  0.407021     -0.898891      -1.94261       1.94261       55.2045       57.1471    
  17  0.520426     -0.653107      -1.41144       1.41144       55.2042       56.6156    
  18  0.826852     -0.190129     -0.410892      0.410892       53.3896       53.8005    
  19  0.729268     -0.315714     -0.682295      0.682295       53.3113       53.9936    
  20  0.344086      -1.06687      -2.30562       2.30562       54.4888       56.7945    
  21  0.280849      -1.26994      -2.74449       2.74449       55.6325       58.3770    
  22  0.301244E-01  -3.50242      -7.56915       7.56915       54.8255       62.3947    
  23  0.503253     -0.686663      -1.48396       1.48396       55.3547       56.8387    
  24  0.549007     -0.599644      -1.29590       1.29590       55.9040       57.1999    
  25  0.814230     -0.205513     -0.444137      0.444137       55.6739       56.1181    
  26  0.641489     -0.443963     -0.959457      0.959457       53.3087       54.2681    
  27  0.248696      -1.39152      -3.00725       3.00725       55.0947       58.1019    
  28  0.684472     -0.379107     -0.819295      0.819295       55.9013       56.7206    
  29  0.815126     -0.204413     -0.441760      0.441760       55.4360       55.8778    
  30  0.388210     -0.946208      -2.04487       2.04487       55.3930       57.4378    
  31  0.670538     -0.399675     -0.863745      0.863745       53.9033       54.7671    
  32  0.851104     -0.161221     -0.348417      0.348417       55.3763       55.7248    
  33  0.381078     -0.964752      -2.08494       2.08494       56.3681       58.4530    
  34  0.776256     -0.253273     -0.547353      0.547353       53.7480       54.2953    
  35  0.168040      -1.78355      -3.85447       3.85447       56.6395       60.4940    
  36  0.229069      -1.47373      -3.18491       3.18491       54.2023       57.3872    
  37  0.917563     -0.860337E-01 -0.185929      0.185929       53.7626       53.9485    
  38  0.161815      -1.82130      -3.93605       3.93605       54.0860       58.0220    
  39  0.355170      -1.03516      -2.23710       2.23710       54.1850       56.4222    
  40  0.221709      -1.50639      -3.25548       3.25548       54.3941       57.6496    
  41  0.424436     -0.856993      -1.85206       1.85206       55.8656       57.7177    
  42  0.337698      -1.08560      -2.34612       2.34612       55.1919       57.5380    
  43  0.574481     -0.554289      -1.19788       1.19788       55.8868       57.0847    
  44  0.614536     -0.486888      -1.05222       1.05222       55.8922       56.9444    
  45  0.345602      -1.06247      -2.29612       2.29612       55.5148       57.8109    
  46  0.330006      -1.10864      -2.39591       2.39591       55.9751       58.3710    
  47  0.934389     -0.678626E-01 -0.146659      0.146659       55.4965       55.6431    
  48  0.884466     -0.122771     -0.265323      0.265323       54.3964       54.6617    
  49  0.928979     -0.736686E-01 -0.159207      0.159207       55.4608       55.6200    
  50  0.788461     -0.237672     -0.513637      0.513637       56.4406       56.9542    
  51  0.963462     -0.372219E-01 -0.804409E-01  0.804409E-01   55.6701       55.7505    
  52  0.630201     -0.461716     -0.997822      0.997822       53.2960       54.2938    
loop,thermsimp(1:2)       74  0.387218       1.77735    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    236         53.71          1.23          1.00         24.03          0.14          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       74
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       75
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      235     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426      -2.12098       2.12098       50.8055       52.9265    
   2  0.269095      -1.31269      -2.83688       2.83688       52.8723       55.7091    
   3  0.301960      -1.19746      -2.58785       2.58785       53.3896       55.9775    
   4  0.927593     -0.751619E-01 -0.162434      0.162434       53.7626       53.9250    
   5  0.783450     -0.244048     -0.527416      0.527416       53.3113       53.8387    
   6  0.716705     -0.333091     -0.719850      0.719850       52.3116       53.0314    
   7  0.728578     -0.316661     -0.684342      0.684342       53.1301       53.8144    
   8  0.752541     -0.284300     -0.614405      0.614405       53.3087       53.9231    
   9  0.111710      -2.19185      -4.73684       4.73684       53.2960       58.0329    
  10  0.202752E-01  -3.89836      -8.42481       8.42481       53.7480       62.1728    
  11  0.967738     -0.327937E-01 -0.708711E-01  0.708711E-01   54.3964       54.4673    
  12  0.530869     -0.633240      -1.36851       1.36851       53.9033       55.2718    
  13  0.752699E-01  -2.58668      -5.59011       5.59011       54.5829       60.1730    
  14  0.658334     -0.418043     -0.903441      0.903441       53.9076       54.8111    
  15  0.383542     -0.958305      -2.07101       2.07101       54.4453       56.5163    
  16  0.280803      -1.27010      -2.74484       2.74484       54.9250       57.6698    
  17  0.976909     -0.233616E-01 -0.504871E-01  0.504871E-01   55.4608       55.5113    
  18  0.611898     -0.491189      -1.06152       1.06152       55.4965       56.5580    
  19  0.860469     -0.150278     -0.324769      0.324769       55.3763       55.7011    
  20  0.375446     -0.979641      -2.11712       2.11712       53.8423       55.9594    
  21  0.964573     -0.360702E-01 -0.779520E-01  0.779520E-01   55.6701       55.7480    
  22  0.865663     -0.144259     -0.311761      0.311761       53.8275       54.1393    
  23  0.498009     -0.697137      -1.50660       1.50660       55.4360       56.9426    
  24  0.732547     -0.311228     -0.672600      0.672600       55.6739       56.3465    
  25  0.293766      -1.22497      -2.64731       2.64731       53.7035       56.3508    
  26  0.805097     -0.216793     -0.468516      0.468516       54.1850       54.6536    
  27  0.236791      -1.44058      -3.11326       3.11326       53.7200       56.8332    
  28  0.759809     -0.274688     -0.593634      0.593634       55.2042       55.7978    
  29  0.279804      -1.27367      -2.75254       2.75254       55.9013       58.6538    
  30  0.862550     -0.147862     -0.319548      0.319548       54.4888       54.8084    
  31  0.784800     -0.242327     -0.523696      0.523696       55.3547       55.8784    
  32  0.231425      -1.46350      -3.16279       3.16279       55.8922       59.0550    
  33  0.839725     -0.174681     -0.377507      0.377507       56.4406       56.8181    
  34  0.204862      -1.58542      -3.42628       3.42628       55.8868       59.3131    
  35  0.741170     -0.299525     -0.647310      0.647310       55.2045       55.8518    
  36  0.838703     -0.175898     -0.380137      0.380137       55.9040       56.2841    
  37  0.287711      -1.24580      -2.69231       2.69231       54.2023       56.8946    
  38  0.937479     -0.645611E-01 -0.139524      0.139524       55.3930       55.5325    
  39  0.188655      -1.66783      -3.60439       3.60439       55.1919       58.7963    
  40  0.818317     -0.200505     -0.433315      0.433315       54.3941       54.8274    
  41  0.903487     -0.101493     -0.219339      0.219339       55.8656       56.0849    
  42  0.148828      -1.90496      -4.11685       4.11685       55.5148       59.6317    
  43  0.573616E-01  -2.85838      -6.17730       6.17730       54.6827       60.8600    
  44  0.792726E-01  -2.53486      -5.47814       5.47814       54.0860       59.5641    
  45  0.150401      -1.89445      -4.09414       4.09414       55.0947       59.1888    
  46  0.511444     -0.670518      -1.44907       1.44907       55.9751       57.4242    
  47  0.179810      -1.71585      -3.70816       3.70816       55.6325       59.3407    
  48  0.167282      -1.78808      -3.86425       3.86425       56.3681       60.2323    
  49  0.589016     -0.529302      -1.14388       1.14388       53.3520       54.4959    
  50  0.974997     -0.253206E-01 -0.547209E-01  0.547209E-01   55.0105       55.0653    
  51  0.750240     -0.287363     -0.621025      0.621025       56.6395       57.2605    
  52  0.695153     -0.363624     -0.785834      0.785834       53.7092       54.4950    
loop,thermsimp(1:2)       75   2.12098       2.83688    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237         55.21          0.98          0.98         23.63          0.71          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     55.21
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       75
neval is:      236
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       76
neval is:      236


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      236     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117      -6.48589       6.48589       50.8055       57.2914    
   2  0.604222     -0.503814      -1.08880       1.08880       52.3116       53.4004    
   3  0.106168      -2.24273      -4.84680       4.84680       53.1301       57.9769    
   4  0.342113      -1.07261      -2.31804       2.31804       53.3113       55.6293    
   5  0.473442     -0.747725      -1.61592       1.61592       53.3087       54.9246    
   6  0.100866E-01  -4.59655      -9.93369       9.93369       53.7626       63.6963    
   7  0.911848     -0.922817E-01 -0.199432      0.199432       53.8275       54.0270    
   8  0.633547     -0.456421     -0.986379      0.986379       54.3964       55.3828    
   9  0.729024     -0.316048     -0.683018      0.683018       53.7092       54.3922    
  10  0.620163     -0.477772      -1.03252       1.03252       53.3520       54.3845    
  11  0.867018     -0.142695     -0.308381      0.308381       54.1850       54.4934    
  12  0.969344E-01  -2.33372      -5.04345       5.04345       54.4888       59.5323    
  13  0.358466      -1.02592      -2.21714       2.21714       53.9076       56.1248    
  14  0.953168     -0.479638E-01 -0.103655      0.103655       54.3941       54.4977    
  15  0.684510     -0.379052     -0.819176      0.819176       55.0105       55.8297    
  16  0.482047     -0.729713      -1.57700       1.57700       53.9033       55.4803    
  17  0.974791     -0.255318E-01 -0.551773E-01  0.551773E-01   55.4608       55.5160    
  18  0.978669     -0.215619E-01 -0.465979E-01  0.465979E-01   55.3930       55.4396    
  19  0.929785     -0.728022E-01 -0.157334      0.157334       55.3763       55.5337    
  20  0.715020     -0.335444     -0.724934      0.724934       52.8723       53.5972    
  21  0.598247     -0.513752      -1.11028       1.11028       55.6701       56.7804    
  22  0.107080      -2.23418      -4.82833       4.82833       55.2042       60.0325    
  23  0.559093     -0.581439      -1.25656       1.25656       55.2045       56.4610    
  24  0.933094     -0.692491E-01 -0.149656      0.149656       55.3547       55.5044    
  25  0.470169E-01  -3.05725      -6.60708       6.60708       53.8423       60.4494    
  26  0.166768      -1.79115      -3.87089       3.87089       53.3896       57.2605    
  27  0.331277      -1.10480      -2.38760       2.38760       55.8656       58.2532    
  28  0.961755     -0.389952E-01 -0.842733E-01  0.842733E-01   55.9040       55.9882    
  29  0.464366E-01  -3.06967      -6.63391       6.63391       55.6739       62.3079    
  30  0.966136E-03  -6.94221      -15.0029       15.0029       53.7035       68.7065    
  31  0.941012     -0.607999E-01 -0.131396      0.131396       54.4453       54.5767    
  32  0.201947E-01  -3.90233      -8.43341       8.43341       55.4965       63.9299    
  33  0.679249     -0.386768     -0.835851      0.835851       56.4406       57.2764    
  34  0.318772      -1.14328      -2.47076       2.47076       53.7200       56.1907    
  35  0.388100     -0.946493      -2.04548       2.04548       54.2023       56.2478    
  36  0.658606     -0.417629     -0.902546      0.902546       55.4360       56.3385    
  37  0.774362     -0.255715     -0.552631      0.552631       56.6395       57.1921    
  38  0.704871     -0.349740     -0.755829      0.755829       55.9751       56.7309    
  39  0.274189      -1.29394      -2.79635       2.79635       54.9250       57.7213    
  40  0.881806     -0.125783     -0.271831      0.271831       53.2960       53.5678    
  41  0.198448      -1.61723      -3.49502       3.49502       55.9013       59.3963    
  42  0.342590      -1.07122      -2.31504       2.31504       55.1919       57.5070    
  43  0.603787     -0.504534      -1.09036       1.09036       55.8922       56.9826    
  44  0.667409     -0.404353     -0.873855      0.873855       55.0947       55.9686    
  45  0.317014      -1.14881      -2.48271       2.48271       55.8868       58.3695    
  46  0.368458     -0.998429      -2.15772       2.15772       55.6325       57.7903    
  47  0.139912      -1.96674      -4.25036       4.25036       54.0860       58.3363    
  48  0.537645     -0.620557      -1.34110       1.34110       55.5148       56.8559    
  49  0.159021      -1.83872      -3.97369       3.97369       54.5829       58.5566    
  50  0.729011     -0.316067     -0.683058      0.683058       56.3681       57.0511    
  51  0.802486     -0.220041     -0.475536      0.475536       54.6827       55.1583    
  52  0.249203      -1.38949      -3.00285       3.00285       55.2066       58.2095    
loop,thermsimp(1:2)       76   6.48589       1.08880    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    238         55.25          0.95          0.97         24.01          0.35          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    239         62.58          0.95          0.97         23.84          0.58          0.05         26.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       76
neval is:      238
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       77
neval is:      238


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      238     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238      -1.11565       1.11565       52.3116       53.4272    
   2  0.476930     -0.740385      -1.60006       1.60006       53.2960       54.8961    
   3  0.845382     -0.167966     -0.362995      0.362995       52.8723       53.2353    
   4  0.397814     -0.921770      -1.99205       1.99205       53.8275       55.8196    
   5  0.249923      -1.38660      -2.99661       2.99661       53.3520       56.3486    
   6  0.591552     -0.525005      -1.13460       1.13460       53.7092       54.8438    
   7  0.143111      -1.94414      -4.20151       4.20151       54.1850       58.3866    
   8  0.306099      -1.18385      -2.55843       2.55843       54.3941       56.9525    
   9  0.441827     -0.816836      -1.76528       1.76528       54.4453       56.2106    
  10  0.504521     -0.684146      -1.47852       1.47852       53.3087       54.7872    
  11  0.127660      -2.05839      -4.44842       4.44842       54.6827       59.1312    
  12  0.333524      -1.09804      -2.37300       2.37300       54.3964       56.7694    
  13  0.130890      -2.03340      -4.39441       4.39441       55.3930       59.7874    
  14  0.307732      -1.17853      -2.54693       2.54693       53.9033       56.4502    
  15  0.154434E-01  -4.17057      -9.01310       9.01310       55.3547       64.3678    
  16  0.357863      -1.02761      -2.22078       2.22078       55.4608       57.6816    
  17  0.271898      -1.30233      -2.81448       2.81448       55.3763       58.1908    
  18  0.906228E-01  -2.40105      -5.18895       5.18895       53.3113       58.5002    
  19  0.344142      -1.06670      -2.30527       2.30527       55.0105       57.3158    
  20  0.392886     -0.934237      -2.01900       2.01900       55.0947       57.1137    
  21  0.454318     -0.788958      -1.70503       1.70503       55.9040       57.6090    
  22  0.384129     -0.956778      -2.06771       2.06771       53.9076       55.9753    
  23  0.354037      -1.03835      -2.24400       2.24400       53.7200       55.9640    
  24  0.154212      -1.86943      -4.04006       4.04006       54.2023       58.2424    
  25  0.816320     -0.202949     -0.438597      0.438597       55.4360       55.8746    
  26  0.994970     -0.504291E-02 -0.108983E-01  0.108983E-01   55.2045       55.2154    
  27  0.374719E-01  -3.28416      -7.09747       7.09747       55.9751       63.0726    
  28  0.227113      -1.48231      -3.20344       3.20344       55.6701       58.8735    
  29  0.410587     -0.890167      -1.92376       1.92376       55.5148       57.4386    
  30  0.104540E-01  -4.56077      -9.85637       9.85637       55.8922       65.7486    
  31  0.994826     -0.518730E-02 -0.112104E-01  0.112104E-01   56.3681       56.3793    
  32  0.738930     -0.302553     -0.653852      0.653852       56.6395       57.2934    
  33  0.715904     -0.334209     -0.722265      0.722265       53.3896       54.1119    
  34  0.128324      -2.05320      -4.43720       4.43720       56.4406       60.8778    
  35  0.856095     -0.155374     -0.335781      0.335781       50.8055       51.1413    
  36  0.423967     -0.858099      -1.85445       1.85445       55.1919       57.0464    
  37  0.504650     -0.683890      -1.47797       1.47797       54.9250       56.4030    
  38  0.347036      -1.05833      -2.28717       2.28717       55.6325       57.9197    
  39  0.906779     -0.978566E-01 -0.211480      0.211480       53.1301       53.3416    
  40  0.616911     -0.483030      -1.04389       1.04389       55.2066       56.2505    
  41  0.540209     -0.615800      -1.33082       1.33082       55.8656       57.1964    
  42  0.772932     -0.257564     -0.556626      0.556626       54.0860       54.6426    
  43  0.544989     -0.606989      -1.31178       1.31178       55.8868       57.1986    
  44  0.951523     -0.496917E-01 -0.107390      0.107390       54.5829       54.6903    
  45  0.172505      -1.75733      -3.79780       3.79780       55.9013       59.6991    
  46  0.871391     -0.137665     -0.297510      0.297510       54.4888       54.7863    
  47  0.127604      -2.05882      -4.44936       4.44936       55.2042       59.6535    
  48  0.785934     -0.240882     -0.520575      0.520575       53.8423       54.3629    
  49  0.815977     -0.203369     -0.439505      0.439505       55.6739       56.1134    
  50  0.350587      -1.04815      -2.26517       2.26517       53.7626       56.0277    
  51  0.739645     -0.301584     -0.651760      0.651760       55.4965       56.1482    
  52  0.996274     -0.373345E-02 -0.806842E-02  0.806842E-02   55.2510       55.2590    
loop,thermsimp(1:2)       77   1.11565       1.60006    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    240         52.51          0.98          0.98         23.82          0.58          0.04         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       77
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       78
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      239     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01 -0.129394      0.129394       50.8055       50.9349    
   2  0.368209     -0.999105      -2.15918       2.15918       52.8723       55.0314    
   3  0.508630     -0.676034      -1.46099       1.46099       53.1301       54.5911    
   4  0.744324     -0.295279     -0.638134      0.638134       52.3116       52.9497    
   5  0.401586     -0.912333      -1.97166       1.97166       53.3896       55.3613    
   6  0.712794     -0.338563     -0.731675      0.731675       53.8423       54.5740    
   7  0.186976      -1.67678      -3.62371       3.62371       54.0860       57.7097    
   8  0.688451     -0.373311     -0.806770      0.806770       54.5829       55.3896    
   9  0.668652     -0.402492     -0.869833      0.869833       54.4888       55.3587    
  10  0.656767     -0.420426     -0.908591      0.908591       53.3087       54.2173    
  11  0.853336     -0.158602     -0.342758      0.342758       53.7092       54.0519    
  12  0.556440     -0.586195      -1.26684       1.26684       53.2960       54.5628    
  13  0.258558E-01  -3.65522      -7.89936       7.89936       55.2045       63.1038    
  14  0.121003E-01  -4.41452      -9.54030       9.54030       55.2510       64.7913    
  15  0.150890      -1.89120      -4.08711       4.08711       53.8275       57.9146    
  16  0.820074     -0.198360     -0.428680      0.428680       55.4360       55.8647    
  17  0.151452      -1.88748      -4.07908       4.07908       53.7200       57.7990    
  18  0.305465      -1.18592      -2.56292       2.56292       53.9076       56.4705    
  19  0.533202     -0.628854      -1.35903       1.35903       53.7626       55.1216    
  20  0.143416      -1.94201      -4.19691       4.19691       55.6739       59.8708    
  21  0.687081     -0.375303     -0.811073      0.811073       55.4965       56.3076    
  22  0.546247     -0.604685      -1.30680       1.30680       54.4453       55.7521    
  23  0.356987      -1.03006      -2.22607       2.22607       55.2066       57.4327    
  24  0.545718     -0.605653      -1.30889       1.30889       53.3520       54.6609    
  25  0.789688     -0.236117     -0.510276      0.510276       56.3681       56.8783    
  26  0.752086     -0.284904     -0.615712      0.615712       54.9250       55.5407    
  27  0.388816     -0.944650      -2.04150       2.04150       53.9033       55.9448    
  28  0.988428     -0.116395E-01 -0.251544E-01  0.251544E-01   54.3964       54.4216    
  29  0.124991      -2.07952      -4.49408       4.49408       54.3941       58.8882    
  30  0.568214     -0.565257      -1.22159       1.22159       55.1919       56.4135    
  31  0.551032     -0.595962      -1.28794       1.28794       55.0947       56.3826    
  32  0.423622     -0.858913      -1.85621       1.85621       55.8656       57.7218    
  33  0.647554     -0.434553     -0.939121      0.939121       55.8868       56.8259    
  34  0.686255     -0.376506     -0.813675      0.813675       56.6395       57.4532    
  35  0.548072     -0.601349      -1.29959       1.29959       55.0105       56.3101    
  36  0.880777     -0.126951     -0.274356      0.274356       55.5148       55.7892    
  37  0.894918     -0.111023     -0.239933      0.239933       55.9040       56.1439    
  38  0.241077      -1.42264      -3.07449       3.07449       55.4608       58.5353    
  39  0.546141     -0.604877      -1.30721       1.30721       55.6325       56.9397    
  40  0.266590      -1.32204      -2.85709       2.85709       55.3763       58.2334    
  41  0.575085     -0.553238      -1.19561       1.19561       54.2023       55.3979    
  42  0.907139     -0.974596E-01 -0.210622      0.210622       54.1850       54.3957    
  43  0.469109     -0.756920      -1.63579       1.63579       53.3113       54.9471    
  44  0.738008     -0.303801     -0.656550      0.656550       55.6701       56.3266    
  45  0.557598     -0.584116      -1.26234       1.26234       54.6827       55.9451    
  46  0.305677      -1.18523      -2.56141       2.56141       55.2042       57.7656    
  47  0.392927     -0.934131      -2.01877       2.01877       55.9013       57.9200    
  48  0.121997      -2.10376      -4.54646       4.54646       55.3930       59.9394    
  49  0.712082     -0.339563     -0.733835      0.733835       56.4406       57.1744    
  50  0.342132      -1.07256      -2.31792       2.31792       55.9751       58.2930    
  51  0.288307      -1.24373      -2.68785       2.68785       55.3547       58.0426    
  52  0.554777     -0.589188      -1.27331       1.27331       52.5065       53.7798    
loop,thermsimp(1:2)       78  0.129394       2.15918    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241         53.68          0.93          0.99         24.03          0.45          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    53.683        2.909     -1.392      5.189     -100.0      1.202    
                     -0.6565      2.545     -100.0      2.489      1.400    
                       1.459    -0.9196      1.841      0.000      0.000    
                      -1.373      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.359     -3.629     -5.188     -1.745    
                      -13.70     -2.697      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.2077E-01 0.1203E-01  0.000    -0.7369    
                     -0.1616    -0.2646    -0.1111    -0.1733    -0.2887E-01

                      -1.076    -0.6169      0.000     0.8465E-02 0.1114E-01
                      0.8541E-01 0.5772E-02-0.2262E-01-0.2593    -0.1445    
                      0.6792E-01 0.3172E-01-0.2794    -0.8299      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.269      9.119     -7039.     -4.000    
                     -0.4752     -2.158      9.075      8.571     -4904.    

                      -4.000     0.3118E-01-0.4015      8.813      9.061    
                      -6912.     -4.000    -0.1228    -0.4423      9.628    
                       8.694     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       78
neval is:      240
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       79
neval is:      240


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      240     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673      -5.71990       5.71990       50.8055       56.5254    
   2  0.952063     -0.491245E-01 -0.106164      0.106164       52.3116       52.4178    
   3  0.207928      -1.57057      -3.39418       3.39418       52.5065       55.9007    
   4  0.564009     -0.572686      -1.23764       1.23764       53.7092       54.9468    
   5  0.461636     -0.772979      -1.67050       1.67050       53.3087       54.9792    
   6  0.683812     -0.380072     -0.821380      0.821380       54.1850       55.0064    
   7  0.153569      -1.87360      -4.04908       4.04908       54.3964       58.4455    
   8  0.605650     -0.501453      -1.08370       1.08370       53.2960       54.3797    
   9  0.257296      -1.35753      -2.93378       2.93378       53.8423       56.7761    
  10  0.517987     -0.657805      -1.42159       1.42159       53.1301       54.5517    
  11  0.571129     -0.560140      -1.21053       1.21053       53.3520       54.5625    
  12  0.735134     -0.307703     -0.664982      0.664982       53.3113       53.9762    
  13  0.766340E-02  -4.87130      -10.5275       10.5275       52.8723       63.3997    
  14  0.435932     -0.830269      -1.79431       1.79431       53.7626       55.5569    
  15  0.513945     -0.665639      -1.43853       1.43853       54.4888       55.9274    
  16  0.447046     -0.805095      -1.73990       1.73990       53.3896       55.1295    
  17  0.244813      -1.40726      -3.04125       3.04125       54.5829       57.6241    
  18  0.183933      -1.69318      -3.65917       3.65917       54.2023       57.8615    
  19  0.413164     -0.883910      -1.91023       1.91023       54.9250       56.8352    
  20  0.869613     -0.139707     -0.301924      0.301924       54.4453       54.7472    
  21  0.853260     -0.158691     -0.342949      0.342949       55.5148       55.8578    
  22  0.138067      -1.98001      -4.27904       4.27904       55.4360       59.7150    
  23  0.940528     -0.613134E-01 -0.132505      0.132505       53.9033       54.0358    
  24  0.694939     -0.363931     -0.786498      0.786498       54.6827       55.4692    
  25  0.962776     -0.379346E-01 -0.819812E-01  0.819812E-01   55.9040       55.9860    
  26  0.378266     -0.972158      -2.10095       2.10095       55.4965       57.5974    
  27  0.855922     -0.155576     -0.336218      0.336218       55.0105       55.3468    
  28  0.393452     -0.932797      -2.01588       2.01588       55.6701       57.6860    
  29  0.253590      -1.37204      -2.96514       2.96514       55.0947       58.0598    
  30  0.777948     -0.251096     -0.542648      0.542648       55.1919       55.7346    
  31  0.654890     -0.423288     -0.914776      0.914776       53.9076       54.8224    
  32  0.690016E-01  -2.67363      -5.77802       5.77802       55.8868       61.6648    
  33  0.101034      -2.29229      -4.95392       4.95392       56.3681       61.3220    
  34  0.684533     -0.379019     -0.819104      0.819104       55.6325       56.4516    
  35  0.592603     -0.523230      -1.13076       1.13076       56.4406       57.5714    
  36  0.904830     -0.100009     -0.216130      0.216130       55.2066       55.4228    
  37  0.400244     -0.915681      -1.97889       1.97889       56.6395       58.6184    
  38  0.698191     -0.359263     -0.776410      0.776410       54.0860       54.8624    
  39  0.551449E-01  -2.89779      -6.26247       6.26247       55.8656       62.1281    
  40  0.500493     -0.692161      -1.49584       1.49584       55.2042       56.7000    
  41  0.289592      -1.23928      -2.67824       2.67824       53.7200       56.3982    
  42  0.447163     -0.804833      -1.73934       1.73934       53.8275       55.5669    
  43  0.690940     -0.369702     -0.798969      0.798969       55.9013       56.7002    
  44  0.631068     -0.460341     -0.994852      0.994852       55.3547       56.3496    
  45  0.926041     -0.768363E-01 -0.166052      0.166052       55.3763       55.5424    
  46  0.436187     -0.829684      -1.79305       1.79305       55.9751       57.7681    
  47  0.314139      -1.15792      -2.50240       2.50240       55.4608       57.9632    
  48  0.363110      -1.01305      -2.18932       2.18932       54.3941       56.5834    
  49  0.446982     -0.805238      -1.74021       1.74021       55.6739       57.4142    
  50  0.541529     -0.613360      -1.32554       1.32554       55.3930       56.7185    
  51  0.415529     -0.878202      -1.89790       1.89790       55.2045       57.1024    
  52  0.559792     -0.580190      -1.25386       1.25386       53.6835       54.9373    
loop,thermsimp(1:2)       79   5.71990      0.106164    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    242         57.63          1.01          0.98         23.91          0.51          0.04         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     57.63
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       79
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       80
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      241     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832     -0.870567      0.870567       52.3116       53.1822    
   2  0.238500      -1.43339      -3.09772       3.09772       53.3113       56.4090    
   3  0.689211     -0.372208     -0.804386      0.804386       53.9033       54.7077    
   4  0.540774     -0.614753      -1.32855       1.32855       53.2960       54.6246    
   5  0.178857      -1.72117      -3.71965       3.71965       53.1301       56.8497    
   6  0.884253     -0.123012     -0.265844      0.265844       53.3520       53.6178    
   7  0.755546     -0.280314     -0.605793      0.605793       54.4453       55.0511    
   8  0.654086E-01  -2.72710      -5.89359       5.89359       53.9076       59.8012    
   9  0.802958     -0.219452     -0.474262      0.474262       54.0860       54.5602    
  10  0.840665     -0.173562     -0.375087      0.375087       53.6835       54.0586    
  11  0.864930     -0.145107     -0.313593      0.313593       53.7092       54.0228    
  12  0.728243     -0.317120     -0.685334      0.685334       53.3087       53.9940    
  13  0.453086     -0.791672      -1.71090       1.71090       54.1850       55.8959    
  14  0.702549E-01  -2.65563      -5.73912       5.73912       53.3896       59.1287    
  15  0.610595     -0.493321      -1.06613       1.06613       55.0105       56.0767    
  16  0.728410E-02  -4.92206      -10.6372       10.6372       55.2066       65.8438    
  17  0.913763     -0.901841E-01 -0.194899      0.194899       54.6827       54.8776    
  18  0.165001      -1.80180      -3.89391       3.89391       55.3763       59.2703    
  19  0.917747E-01  -2.38842      -5.16166       5.16166       53.7626       58.9242    
  20  0.338507      -1.08321      -2.34095       2.34095       53.8275       56.1685    
  21  0.357666      -1.02815      -2.22196       2.22196       55.1919       57.4139    
  22  0.389441     -0.943044      -2.03803       2.03803       55.5148       57.5528    
  23  0.879897     -0.127950     -0.276515      0.276515       52.5065       52.7830    
  24  0.418897     -0.870129      -1.88045       1.88045       54.4888       56.3693    
  25  0.838426     -0.176230     -0.380853      0.380853       55.9040       56.2848    
  26  0.185169      -1.68649      -3.64469       3.64469       55.3547       58.9994    
  27  0.200952      -1.60469      -3.46792       3.46792       53.7200       57.1879    
  28  0.877256     -0.130957     -0.283013      0.283013       55.6325       55.9155    
  29  0.386592     -0.950385      -2.05390       2.05390       50.8055       52.8594    
  30  0.888706     -0.117988     -0.254987      0.254987       54.3941       54.6491    
  31  0.105408      -2.24991      -4.86233       4.86233       55.2042       60.0665    
  32  0.994268     -0.574873E-02 -0.124237E-01  0.124237E-01   55.9013       55.9137    
  33  0.764077     -0.269087     -0.581528      0.581528       55.3930       55.9745    
  34  0.812108     -0.208121     -0.449775      0.449775       53.8423       54.2921    
  35  0.121669      -2.10645      -4.55229       4.55229       54.9250       59.4773    
  36  0.637909     -0.449559     -0.971550      0.971550       55.2045       56.1760    
  37  0.316007E-02  -5.75716      -12.4419       12.4419       55.6739       68.1158    
  38  0.229677      -1.47108      -3.17918       3.17918       56.4406       59.6198    
  39  0.521374     -0.651288      -1.40751       1.40751       55.4965       56.9040    
  40  0.391402     -0.938019      -2.02717       2.02717       54.5829       56.6100    
  41  0.327357      -1.11670      -2.41333       2.41333       55.6701       58.0834    
  42  0.963139     -0.375576E-01 -0.811665E-01  0.811665E-01   55.9751       56.0563    
  43  0.174261      -1.74720      -3.77590       3.77590       54.2023       57.9782    
  44  0.331602      -1.10382      -2.38548       2.38548       55.4608       57.8463    
  45  0.526338     -0.641812      -1.38703       1.38703       55.0947       56.4817    
  46  0.413265     -0.883667      -1.90971       1.90971       54.3964       56.3061    
  47  0.541510E-02  -5.21856      -11.2779       11.2779       56.6395       67.9174    
  48  0.781613     -0.246396     -0.532490      0.532490       55.4360       55.9685    
  49  0.656825     -0.420337     -0.908399      0.908399       56.3681       57.2764    
  50  0.584791     -0.536501      -1.15944       1.15944       55.8868       57.0463    
  51  0.811204     -0.209236     -0.452183      0.452183       55.8656       56.3178    
  52  0.421027     -0.865059      -1.86949       1.86949       57.6281       59.4976    
loop,thermsimp(1:2)       80  0.870567       3.09772    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243         53.12          0.93          0.98         23.86          0.50          0.04         26.32
Just calling func    0   0         26.32


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    244         52.80          0.95          0.99         23.78          0.47          0.05         26.25
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       80
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       81
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      243     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925      -2.82944       2.82944       52.5065       55.3359    
   2  0.879265     -0.128669     -0.278068      0.278068       50.8055       51.0836    
   3  0.684902     -0.378479     -0.817938      0.817938       52.3116       53.1295    
   4  0.893896     -0.112166     -0.242403      0.242403       53.3520       53.5944    
   5  0.476761     -0.740739      -1.60083       1.60083       53.3087       54.9095    
   6  0.755167     -0.280817     -0.606878      0.606878       53.7092       54.3161    
   7  0.452407     -0.793173      -1.71414       1.71414       53.6835       55.3976    
   8  0.723906     -0.323093     -0.698243      0.698243       53.8423       54.5405    
   9  0.451260     -0.795711      -1.71963       1.71963       54.0860       55.8056    
  10  0.668265     -0.403071     -0.871084      0.871084       53.2960       54.1671    
  11  0.777249     -0.251995     -0.544591      0.544591       54.3941       54.9387    
  12  0.342240      -1.07224      -2.31725       2.31725       53.9033       56.2206    
  13  0.639156     -0.447606     -0.967330      0.967330       54.6827       55.6501    
  14  0.166924      -1.79022      -3.86887       3.86887       54.4453       58.3142    
  15  0.375260     -0.980137      -2.11819       2.11819       54.1850       56.3032    
  16  0.299730      -1.20487      -2.60387       2.60387       55.9013       58.5051    
  17  0.407119     -0.898650      -1.94209       1.94209       55.6325       57.5746    
  18  0.762992E-01  -2.57309      -5.56076       5.56076       55.4360       60.9968    
  19  0.281066      -1.26917      -2.74282       2.74282       55.3930       58.1358    
  20  0.220512      -1.51180      -3.26718       3.26718       55.9751       59.2423    
  21  0.389846     -0.942004      -2.03578       2.03578       55.0105       57.0463    
  22  0.660048     -0.415443     -0.897822      0.897822       53.8275       54.7253    
  23  0.150026      -1.89695      -4.09953       4.09953       55.2045       59.3040    
  24  0.113767      -2.17360      -4.69741       4.69741       55.9040       60.6014    
  25  0.810589     -0.209994     -0.453822      0.453822       54.3964       54.8502    
  26  0.247911      -1.39468      -3.01408       3.01408       55.8656       58.8797    
  27  0.408875     -0.894345      -1.93279       1.93279       54.4888       56.4216    
  28  0.310528      -1.16948      -2.52739       2.52739       53.3113       55.8386    
  29  0.663027     -0.410939     -0.888089      0.888089       55.0947       55.9828    
  30  0.798362     -0.225193     -0.486668      0.486668       54.5829       55.0695    
  31  0.564885     -0.571133      -1.23429       1.23429       53.1301       54.3644    
  32  0.473510E-02  -5.35275      -11.5679       11.5679       55.4965       67.0644    
  33  0.933475E-01  -2.37143      -5.12493       5.12493       55.8868       61.0117    
  34  0.931702     -0.707423E-01 -0.152882      0.152882       53.7200       53.8729    
  35  0.341741      -1.07370      -2.32040       2.32040       56.3681       58.6885    
  36  0.171330      -1.76417      -3.81257       3.81257       55.1919       59.0045    
  37  0.355860      -1.03322      -2.23291       2.23291       55.5148       57.7477    
  38  0.469639     -0.755790      -1.63335       1.63335       55.4608       57.0942    
  39  0.805376     -0.216446     -0.467765      0.467765       54.2023       54.6701    
  40  0.651615     -0.428301     -0.925610      0.925610       55.6701       56.5957    
  41  0.126831      -2.06490      -4.46249       4.46249       53.7626       58.2251    
  42  0.715737     -0.334442     -0.722769      0.722769       55.3547       56.0775    
  43  0.444007     -0.811915      -1.75464       1.75464       53.3896       55.1442    
  44  0.887105     -0.119791     -0.258883      0.258883       55.3763       55.6352    
  45  0.492139     -0.708993      -1.53222       1.53222       54.9250       56.4572    
  46  0.590315     -0.527098      -1.13912       1.13912       57.6281       58.7672    
  47  0.313130      -1.16114      -2.50935       2.50935       56.4406       58.9500    
  48  0.824070     -0.193500     -0.418177      0.418177       53.9076       54.3258    
  49  0.785026     -0.242039     -0.523075      0.523075       55.2042       55.7272    
  50  0.105781      -2.24638      -4.85469       4.85469       55.2066       60.0613    
  51  0.644933     -0.438608     -0.947885      0.947885       56.6395       57.5874    
  52  0.656932     -0.420175     -0.908049      0.908049       52.8045       53.7126    
loop,thermsimp(1:2)       81   2.82944      0.278068    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245         53.08          0.97          0.99         23.95          0.34          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    246         52.76          1.00          1.00         24.22          0.05          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.76
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       81
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       82
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      245     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -9.38509       9.38509       50.8055       60.1906    
   2  0.906957E-01  -2.40025      -5.18721       5.18721       52.3116       57.4988    
   3  0.973677     -0.266758E-01 -0.576497E-01  0.576497E-01   53.3520       53.4096    
   4  0.764409     -0.268653     -0.580590      0.580590       52.8045       53.3851    
   5  0.647718     -0.434300     -0.938574      0.938574       53.7200       54.6585    
   6  0.450945     -0.796410      -1.72114       1.72114       53.2960       55.0171    
   7  0.342138      -1.07254      -2.31789       2.31789       53.7092       56.0271    
   8  0.491560     -0.710170      -1.53476       1.53476       53.9076       55.4424    
   9  0.728901     -0.316218     -0.683384      0.683384       53.1301       53.8135    
  10  0.361124      -1.01853      -2.20117       2.20117       53.8423       56.0435    
  11  0.187026      -1.67651      -3.62313       3.62313       54.2023       57.8255    
  12  0.560514     -0.578901      -1.25107       1.25107       53.8275       55.0786    
  13  0.218776      -1.51971      -3.28426       3.28426       54.3964       57.6807    
  14  0.109271      -2.21392      -4.78454       4.78454       53.3087       58.0932    
  15  0.263420E-01  -3.63659      -7.85911       7.85911       54.3941       62.2532    
  16  0.654642     -0.423667     -0.915595      0.915595       54.5829       55.4985    
  17  0.975959     -0.243343E-01 -0.525892E-01  0.525892E-01   53.3896       53.4422    
  18  0.107212      -2.23295      -4.82566       4.82566       52.5065       57.3322    
  19  0.972340     -0.280494E-01 -0.606181E-01  0.606181E-01   53.6835       53.7441    
  20  0.259158      -1.35032      -2.91820       2.91820       55.3763       58.2945    
  21  0.889970     -0.116568     -0.251916      0.251916       54.6827       54.9347    
  22  0.956672     -0.442943E-01 -0.957252E-01  0.957252E-01   55.2042       55.2999    
  23  0.299261      -1.20644      -2.60725       2.60725       54.0860       56.6932    
  24  0.114836      -2.16425      -4.67720       4.67720       53.3113       57.9885    
  25  0.728848     -0.316291     -0.683542      0.683542       55.0947       55.7782    
  26  0.650336     -0.430267     -0.929857      0.929857       55.3547       56.2846    
  27  0.816983     -0.202137     -0.436843      0.436843       53.9033       54.3401    
  28  0.507860     -0.677550      -1.46426       1.46426       54.1850       55.6493    
  29  0.920661     -0.826634E-01 -0.178645      0.178645       54.4888       54.6675    
  30  0.253772      -1.37132      -2.96359       2.96359       54.9250       57.8886    
  31  0.667512     -0.404198     -0.873519      0.873519       55.6701       56.5436    
  32  0.772715     -0.257844     -0.557232      0.557232       55.0105       55.5678    
  33  0.757620     -0.277573     -0.599868      0.599868       55.4608       56.0607    
  34  0.776421     -0.253060     -0.546893      0.546893       55.6325       56.1794    
  35  0.886642     -0.120314     -0.260013      0.260013       56.6395       56.8995    
  36  0.238693E-01  -3.73516      -8.07213       8.07213       55.5148       63.5869    
  37  0.303957      -1.19087      -2.57361       2.57361       55.3930       57.9666    
  38  0.875267     -0.133226     -0.287918      0.287918       53.7626       54.0505    
  39  0.144246      -1.93624      -4.18444       4.18444       54.4453       58.6297    
  40  0.993963     -0.605564E-02 -0.130870E-01  0.130870E-01   55.9013       55.9144    
  41  0.172168      -1.75928      -3.80202       3.80202       56.3681       60.1701    
  42  0.979713     -0.204952E-01 -0.442926E-01  0.442926E-01   57.6281       57.6724    
  43  0.938694     -0.632658E-01 -0.136725      0.136725       55.8656       56.0023    
  44  0.716061     -0.333990     -0.721792      0.721792       56.4406       57.1624    
  45  0.764601     -0.268402     -0.580048      0.580048       55.1919       55.7720    
  46  0.546951     -0.603396      -1.30401       1.30401       55.9751       57.2791    
  47  0.104442      -2.25912      -4.88223       4.88223       55.2045       60.0867    
  48  0.669980     -0.400508     -0.865544      0.865544       55.2066       56.0722    
  49  0.255048      -1.36630      -2.95274       2.95274       55.9040       58.8567    
  50  0.761153     -0.272921     -0.589814      0.589814       55.4360       56.0258    
  51  0.273269      -1.29730      -2.80362       2.80362       55.8868       58.6904    
  52  0.789047E-01  -2.53951      -5.48819       5.48819       52.7564       58.2446    
loop,thermsimp(1:2)       82   9.38509       5.18721    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247         52.94          1.00          1.00         24.29          0.17          0.05         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    248         52.83          1.01          1.00         24.09          0.22          0.05         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.83
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       82
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       83
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      247     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717      -1.07130       1.07130       52.8045       53.8758    
   2  0.266275      -1.32323      -2.85965       2.85965       53.3520       56.2116    
   3  0.545538     -0.605984      -1.30960       1.30960       53.3896       54.6992    
   4  0.196234      -1.62845      -3.51926       3.51926       53.6835       57.2028    
   5  0.786411     -0.240275     -0.519264      0.519264       53.1301       53.6494    
   6  0.453912     -0.789853      -1.70696       1.70696       53.7626       55.4695    
   7  0.900549     -0.104751     -0.226379      0.226379       53.9033       54.1297    
   8  0.339919      -1.07905      -2.33195       2.33195       53.7200       56.0519    
   9  0.511643     -0.670128      -1.44823       1.44823       54.4888       55.9371    
  10  0.628202     -0.464894      -1.00469       1.00469       54.6827       55.6874    
  11  0.672886E-01  -2.69876      -5.83235       5.83235       53.2960       59.1284    
  12  0.518493     -0.656829      -1.41949       1.41949       53.8275       55.2470    
  13  0.994926     -0.508642E-02 -0.109923E-01  0.109923E-01   55.2042       55.2152    
  14  0.733191     -0.310349     -0.670701      0.670701       53.9076       54.5783    
  15  0.952818     -0.483318E-01 -0.104451      0.104451       54.5829       54.6873    
  16  0.735955     -0.306586     -0.662569      0.662569       55.0105       55.6731    
  17  0.743149     -0.296859     -0.641547      0.641547       54.1850       54.8266    
  18  0.549375     -0.598975      -1.29446       1.29446       55.1919       56.4864    
  19  0.355140      -1.03524      -2.23728       2.23728       55.0947       57.3320    
  20  0.482165     -0.729469      -1.57647       1.57647       55.9013       57.4777    
  21  0.577197     -0.549571      -1.18769       1.18769       55.8656       57.0533    
  22  0.107316E-01  -4.53456      -9.79973       9.79973       55.4360       65.2357    
  23  0.923969     -0.790764E-01 -0.170893      0.170893       53.7092       53.8801    
  24  0.810451     -0.210164     -0.454189      0.454189       53.8423       54.2965    
  25  0.143346      -1.94249      -4.19795       4.19795       55.4608       59.6588    
  26  0.994184     -0.583318E-02 -0.126062E-01  0.126062E-01   55.2066       55.2192    
  27  0.870737     -0.138415     -0.299131      0.299131       55.6325       55.9317    
  28  0.970691     -0.297469E-01 -0.642866E-01  0.642866E-01   55.3547       55.4190    
  29  0.351269      -1.04620      -2.26097       2.26097       55.6701       57.9311    
  30  0.464982     -0.765756      -1.65489       1.65489       54.0860       55.7409    
  31  0.921785     -0.814432E-01 -0.176008      0.176008       56.6395       56.8155    
  32  0.110512      -2.20263      -4.76014       4.76014       56.4406       61.2007    
  33  0.261408      -1.34167      -2.89951       2.89951       55.9751       58.8746    
  34  0.908908     -0.955118E-01 -0.206412      0.206412       52.5065       52.7129    
  35  0.819412     -0.199168     -0.430425      0.430425       52.3116       52.7420    
  36  0.466482     -0.762536      -1.64793       1.64793       57.6281       59.2760    
  37  0.717237     -0.332349     -0.718245      0.718245       54.3964       55.1147    
  38  0.802331     -0.220234     -0.475951      0.475951       54.2023       54.6783    
  39  0.949390     -0.519355E-01 -0.112239      0.112239       54.9250       55.0372    
  40  0.258511      -1.35282      -2.92360       2.92360       55.3930       58.3166    
  41  0.270423      -1.30777      -2.82624       2.82624       53.3113       56.1375    
  42  0.366439      -1.00392      -2.16960       2.16960       53.3087       55.4783    
  43  0.934403     -0.678476E-01 -0.146627      0.146627       52.7564       52.9030    
  44  0.956654     -0.443133E-01 -0.957663E-01  0.957663E-01   55.3763       55.4721    
  45  0.377790     -0.973417      -2.10367       2.10367       54.4453       56.5490    
  46  0.203667      -1.59127      -3.43893       3.43893       55.8868       59.3257    
  47  0.673892     -0.394685     -0.852961      0.852961       55.9040       56.7569    
  48  0.347380      -1.05734      -2.28503       2.28503       55.2045       57.4895    
  49  0.144339      -1.93559      -4.18304       4.18304       56.3681       60.5511    
  50  0.728571     -0.316670     -0.684361      0.684361       50.8055       51.4899    
  51  0.243065      -1.41443      -3.05674       3.05674       54.3941       57.4508    
  52  0.686711     -0.375841     -0.812237      0.812237       52.8251       53.6374    
loop,thermsimp(1:2)       83   1.07130       2.85965    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249         53.03          1.02          0.99         24.07          0.32          0.04         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       83
neval is:      248
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       84
neval is:      248


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      248     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521      -1.20487       1.20487       50.8055       52.0104    
   2  0.468879     -0.757411      -1.63686       1.63686       52.5065       54.1433    
   3  0.886741E-01  -2.42279      -5.23593       5.23593       52.3116       57.5475    
   4  0.211783      -1.55219      -3.35447       3.35447       52.7564       56.1109    
   5  0.573306     -0.556336      -1.20231       1.20231       52.8251       54.0274    
   6  0.401711     -0.912021      -1.97099       1.97099       53.1301       55.1011    
   7  0.505706     -0.681800      -1.47345       1.47345       52.8045       54.2780    
   8  0.603045     -0.505763      -1.09301       1.09301       53.7092       54.8022    
   9  0.696575     -0.361580     -0.781418      0.781418       53.9033       54.6847    
  10  0.294614      -1.22209      -2.64108       2.64108       53.8423       56.4834    
  11  0.527550     -0.639511      -1.38206       1.38206       53.9076       55.2897    
  12  0.657157     -0.419832     -0.907307      0.907307       54.2023       55.1096    
  13  0.627866     -0.465428      -1.00584       1.00584       54.5829       55.5887    
  14  0.993353E-02  -4.61184      -9.96673       9.96673       53.3896       63.3563    
  15  0.885166E-01  -2.42456      -5.23977       5.23977       54.1850       59.4248    
  16  0.265764      -1.32515      -2.86380       2.86380       54.9250       57.7888    
  17  0.446403     -0.806534      -1.74301       1.74301       54.3964       56.1394    
  18  0.287864      -1.24527      -2.69117       2.69117       55.2042       57.8953    
  19  0.926928E-01  -2.37846      -5.14014       5.14014       55.2066       60.3468    
  20  0.394849     -0.929252      -2.00822       2.00822       53.8275       55.8358    
  21  0.540746     -0.614805      -1.32867       1.32867       55.3547       56.6834    
  22  0.846435     -0.166721     -0.360305      0.360305       53.7626       54.1229    
  23  0.417037     -0.874580      -1.89007       1.89007       55.3763       57.2664    
  24  0.210713      -1.55726      -3.36542       3.36542       53.3087       56.6741    
  25  0.764669     -0.268312     -0.579854      0.579854       55.0105       55.5904    
  26  0.219471E-01  -3.81912      -8.25357       8.25357       54.6827       62.9363    
  27  0.200728      -1.60581      -3.47034       3.47034       54.0860       57.5563    
  28  0.572660     -0.557463      -1.20474       1.20474       55.6325       56.8373    
  29  0.599083E-01  -2.81494      -6.08342       6.08342       54.4888       60.5723    
  30  0.214614      -1.53891      -3.32577       3.32577       53.7200       57.0457    
  31  0.489389     -0.714598      -1.54433       1.54433       53.3113       54.8556    
  32  0.162616      -1.81636      -3.92538       3.92538       53.3520       57.2774    
  33  0.710022     -0.342459     -0.740094      0.740094       55.1919       55.9320    
  34  0.753583     -0.282916     -0.611415      0.611415       54.4453       55.0567    
  35  0.743317     -0.296633     -0.641058      0.641058       55.9040       56.5450    
  36  0.155416      -1.86165      -4.02324       4.02324       56.6395       60.6627    
  37  0.643355     -0.441059     -0.953180      0.953180       55.8656       56.8188    
  38  0.656098     -0.421444     -0.910791      0.910791       53.6835       54.5943    
  39  0.327550      -1.11611      -2.41205       2.41205       55.0947       57.5068    
  40  0.192244      -1.64899      -3.56367       3.56367       54.3941       57.9577    
  41  0.433590     -0.835657      -1.80595       1.80595       55.9013       57.7072    
  42  0.788561     -0.237545     -0.513364      0.513364       55.2045       55.7178    
  43  0.978028     -0.222173E-01 -0.480143E-01  0.480143E-01   55.6701       55.7181    
  44  0.110322      -2.20435      -4.76387       4.76387       55.3930       60.1568    
  45  0.795332     -0.228995     -0.494886      0.494886       55.9751       56.4700    
  46  0.497518E-01  -3.00071      -6.48489       6.48489       53.2960       59.7809    
  47  0.852459     -0.159631     -0.344981      0.344981       57.6281       57.9731    
  48  0.133240      -2.01560      -4.35595       4.35595       55.8868       60.2428    
  49  0.671163     -0.398743     -0.861731      0.861731       55.4608       56.3225    
  50  0.245122      -1.40600      -3.03853       3.03853       56.3681       59.4066    
  51  0.820498     -0.197843     -0.427563      0.427563       56.4406       56.8682    
  52  0.422422     -0.861751      -1.86235       1.86235       53.0280       54.8903    
loop,thermsimp(1:2)       84   1.20487       1.63686    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    250         55.35          0.97          0.99         23.75          0.63          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    251         66.48          1.02          1.00         24.10          0.14          0.05         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     55.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       84
neval is:      250
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       85
neval is:      250


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      250     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202      -3.50538       3.50538       50.8055       54.3109    
   2  0.793097     -0.231809     -0.500967      0.500967       52.8251       53.3261    
   3  0.261081      -1.34293      -2.90222       2.90222       53.7626       56.6648    
   4  0.912198     -0.918984E-01 -0.198603      0.198603       52.5065       52.7051    
   5  0.493539     -0.706153      -1.52608       1.52608       52.8045       54.3306    
   6  0.721001     -0.327115     -0.706933      0.706933       53.6835       54.3904    
   7  0.578790     -0.546816      -1.18173       1.18173       53.9033       55.0850    
   8  0.684127     -0.379612     -0.820386      0.820386       53.7092       54.5296    
   9  0.627712     -0.465674      -1.00638       1.00638       53.3113       54.3176    
  10  0.858540     -0.152522     -0.329618      0.329618       53.0280       53.3576    
  11  0.712254E-01  -2.64191      -5.70947       5.70947       54.4453       60.1548    
  12  0.927250     -0.755316E-01 -0.163233      0.163233       53.1301       53.2933    
  13  0.458073     -0.780727      -1.68724       1.68724       54.2023       55.8896    
  14  0.940004     -0.618714E-01 -0.133711      0.133711       53.9076       54.0413    
  15  0.322549      -1.13150      -2.44531       2.44531       54.5829       57.0282    
  16  0.939473     -0.624358E-01 -0.134931      0.134931       55.0105       55.1455    
  17  0.726080     -0.320095     -0.691764      0.691764       55.2045       55.8962    
  18  0.602088E-02  -5.11252      -11.0488       11.0488       55.6701       66.7189    
  19  0.735289     -0.307492     -0.664527      0.664527       53.8275       54.4921    
  20  0.847617     -0.165326     -0.357290      0.357290       55.1919       55.5492    
  21  0.747190E-01  -2.59402      -5.60598       5.60598       52.7564       58.3624    
  22  0.248374      -1.39282      -3.01004       3.01004       54.3964       57.4065    
  23  0.350184      -1.04930      -2.26765       2.26765       55.4608       57.7285    
  24  0.327739E-03  -8.02329      -17.3393       17.3393       55.9751       73.3144    
  25  0.130012      -2.04013      -4.40896       4.40896       53.8423       58.2513    
  26  0.609791     -0.494639      -1.06897       1.06897       55.9040       56.9729    
  27  0.793414     -0.231410     -0.500105      0.500105       53.3087       53.8088    
  28  0.962567     -0.381519E-01 -0.824508E-01  0.824508E-01   55.3547       55.4372    
  29  0.499469     -0.694211      -1.50027       1.50027       55.8656       57.3659    
  30  0.887491     -0.119357     -0.257945      0.257945       55.6325       55.8905    
  31  0.136374      -1.99236      -4.30572       4.30572       56.4406       60.7463    
  32  0.292356      -1.22978      -2.65771       2.65771       53.7200       56.3777    
  33  0.301564      -1.19877      -2.59069       2.59069       55.3763       57.9670    
  34  0.352543      -1.04258      -2.25314       2.25314       53.3520       55.6051    
  35  0.483726     -0.726236      -1.56948       1.56948       55.0947       56.6642    
  36  0.410499     -0.890381      -1.92422       1.92422       52.3116       54.2358    
  37  0.458111     -0.780644      -1.68706       1.68706       54.0860       55.7730    
  38  0.670071     -0.400372     -0.865252      0.865252       55.9013       56.7665    
  39  0.175486      -1.74020      -3.76077       3.76077       54.9250       58.6858    
  40  0.798907     -0.224511     -0.485194      0.485194       55.2042       55.6894    
  41  0.270487      -1.30753      -2.82573       2.82573       54.3941       57.2198    
  42  0.480368     -0.733202      -1.58454       1.58454       57.6281       59.2127    
  43  0.658406     -0.417933     -0.903203      0.903203       56.3681       57.2713    
  44  0.937976     -0.640304E-01 -0.138377      0.138377       54.1850       54.3234    
  45  0.710083     -0.342373     -0.739908      0.739908       53.2960       54.0359    
  46  0.567340     -0.566797      -1.22492       1.22492       55.3930       56.6179    
  47  0.201426      -1.60233      -3.46283       3.46283       55.8868       59.3496    
  48  0.660313     -0.415042     -0.896954      0.896954       55.2066       56.1036    
  49  0.524008     -0.646249      -1.39662       1.39662       54.4888       55.8855    
  50  0.513616     -0.666280      -1.43991       1.43991       56.6395       58.0794    
  51  0.951218     -0.500122E-01 -0.108082      0.108082       54.6827       54.7908    
  52  0.703465     -0.351737     -0.760146      0.760146       55.3520       56.1121    
loop,thermsimp(1:2)       85   3.50538      0.500967    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    252         52.61          1.00          0.98         23.97          0.36          0.05         26.36
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    253         52.70          1.00          0.99         24.21          0.21          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.61
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       85
neval is:      252
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       86
neval is:      252


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      252     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974      -1.65536       1.65536       52.5065       54.1619    
   2  0.948887     -0.524654E-01 -0.113384      0.113384       53.1301       53.2435    
   3  0.532332     -0.630488      -1.36256       1.36256       52.8251       54.1877    
   4  0.374267     -0.982785      -2.12391       2.12391       53.0280       55.1519    
   5  0.694531     -0.364519     -0.787769      0.787769       53.3087       54.0964    
   6  0.414371     -0.880994      -1.90393       1.90393       53.2960       55.1999    
   7  0.208827E-01  -3.86883      -8.36100       8.36100       53.9076       62.2686    
   8  0.627187     -0.466511      -1.00818       1.00818       52.3116       53.3198    
   9  0.148799E-01  -4.20774      -9.09343       9.09343       50.8055       59.8990    
  10  0.809008     -0.211946     -0.458041      0.458041       53.3113       53.7693    
  11  0.647680     -0.434359     -0.938701      0.938701       54.1850       55.1238    
  12  0.289351      -1.24012      -2.68004       2.68004       52.8045       55.4846    
  13  0.222457      -1.50302      -3.24821       3.24821       53.6835       56.9317    
  14  0.374268     -0.982782      -2.12391       2.12391       53.8275       55.9514    
  15  0.785765     -0.241097     -0.521039      0.521039       53.7092       54.2302    
  16  0.298051      -1.21049      -2.61602       2.61602       54.6827       57.2988    
  17  0.725075     -0.321480     -0.694757      0.694757       53.9033       54.5981    
  18  0.386364     -0.950976      -2.05517       2.05517       55.0105       57.0657    
  19  0.631686     -0.459363     -0.992737      0.992737       55.3547       56.3475    
  20  0.688282     -0.373557     -0.807301      0.807301       55.1919       55.9992    
  21  0.373817     -0.983990      -2.12652       2.12652       53.3520       55.4785    
  22  0.219845      -1.51483      -3.27374       3.27374       55.2042       58.4779    
  23  0.926271     -0.765889E-01 -0.165518      0.165518       54.0860       54.2515    
  24  0.618127     -0.481061      -1.03963       1.03963       54.4888       55.5285    
  25  0.176216      -1.73604      -3.75180       3.75180       54.2023       57.9541    
  26  0.742943     -0.297136     -0.642146      0.642146       55.6325       56.2747    
  27  0.357690      -1.02809      -2.22182       2.22182       55.2045       57.4263    
  28  0.478359     -0.737394      -1.59360       1.59360       55.2066       56.8002    
  29  0.395976     -0.926401      -2.00206       2.00206       55.3520       57.3540    
  30  0.803186     -0.219169     -0.473650      0.473650       53.7200       54.1936    
  31  0.231845      -1.46168      -3.15887       3.15887       55.3930       58.5518    
  32  0.808968     -0.211996     -0.458149      0.458149       55.0947       55.5529    
  33  0.579217     -0.546078      -1.18014       1.18014       53.7626       54.9427    
  34  0.384357     -0.956183      -2.06643       2.06643       55.9013       57.9677    
  35  0.856367     -0.155057     -0.335096      0.335096       55.9040       56.2391    
  36  0.265661      -1.32553      -2.86463       2.86463       54.5829       57.4475    
  37  0.288915      -1.24162      -2.68330       2.68330       54.3941       57.0774    
  38  0.224915      -1.49203      -3.22446       3.22446       56.3681       59.5925    
  39  0.685944     -0.376959     -0.814654      0.814654       55.8656       56.6802    
  40  0.265936      -1.32450      -2.86240       2.86240       54.3964       57.2588    
  41  0.412966     -0.884389      -1.91127       1.91127       55.4608       57.3721    
  42  0.440796     -0.819173      -1.77033       1.77033       55.3763       57.1467    
  43  0.572522     -0.557705      -1.20527       1.20527       56.6395       57.8448    
  44  0.798412     -0.225131     -0.486535      0.486535       53.8423       54.3288    
  45  0.127097      -2.06281      -4.45797       4.45797       52.7564       57.2144    
  46  0.243397      -1.41306      -3.05379       3.05379       54.9250       57.9788    
  47  0.322195      -1.13260      -2.44768       2.44768       57.6281       60.0758    
  48  0.512728     -0.668011      -1.44365       1.44365       55.8868       57.3305    
  49  0.786191     -0.240556     -0.519870      0.519870       54.4453       54.9652    
  50  0.733079     -0.310501     -0.671030      0.671030       56.4406       57.1116    
  51  0.601364     -0.508554      -1.09905       1.09905       55.6701       56.7691    
  52  0.348529      -1.05403      -2.27789       2.27789       52.6144       54.8923    
loop,thermsimp(1:2)       86   1.65536      0.113384    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    254         54.30          1.04          0.98         23.82          0.55          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     54.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       86
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       87
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      253     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843      -3.67051       3.67051       53.1301       56.8006    
   2  0.721345     -0.326637     -0.705902      0.705902       52.3116       53.0175    
   3  0.842493     -0.171390     -0.370393      0.370393       53.3113       53.6817    
   4  0.260540      -1.34500      -2.90670       2.90670       53.3087       56.2154    
   5  0.782605     -0.245127     -0.529749      0.529749       52.5065       53.0362    
   6  0.208492      -1.56785      -3.38832       3.38832       52.8251       56.2134    
   7  0.290568E-01  -3.53850      -7.64712       7.64712       53.7200       61.3671    
   8  0.673682     -0.394997     -0.853635      0.853635       53.7092       54.5628    
   9  0.399393     -0.917808      -1.98349       1.98349       54.0860       56.0695    
  10  0.966971     -0.335863E-01 -0.725840E-01  0.725840E-01   53.8423       53.9149    
  11  0.390645     -0.939956      -2.03136       2.03136       53.9033       55.9347    
  12  0.259548      -1.34881      -2.91495       2.91495       52.6144       55.5293    
  13  0.260765      -1.34413      -2.90483       2.90483       53.7626       56.6674    
  14  0.110601E-01  -4.50441      -9.73457       9.73457       54.4453       64.1799    
  15  0.727710     -0.317852     -0.686916      0.686916       54.1850       54.8720    
  16  0.717076     -0.332574     -0.718732      0.718732       53.0280       53.7467    
  17  0.612129     -0.490811      -1.06070       1.06070       53.2960       54.3567    
  18  0.589376     -0.528691      -1.14256       1.14256       53.3520       54.4946    
  19  0.541615     -0.613199      -1.32520       1.32520       52.8045       54.1297    
  20  0.330403      -1.10744      -2.39331       2.39331       54.4888       56.8821    
  21  0.229530      -1.47172      -3.18056       3.18056       55.0947       58.2753    
  22  0.564010     -0.572684      -1.23764       1.23764       53.8275       55.0652    
  23  0.454226     -0.789161      -1.70547       1.70547       55.1919       56.8974    
  24  0.579528     -0.545541      -1.17898       1.17898       55.9040       57.0830    
  25  0.245500      -1.40446      -3.03520       3.03520       55.6325       58.6677    
  26  0.708019     -0.345284     -0.746199      0.746199       55.3547       56.1009    
  27  0.300215      -1.20326      -2.60038       2.60038       55.8656       58.4660    
  28  0.721461     -0.326478     -0.705557      0.705557       55.6701       56.3757    
  29  0.326772      -1.11849      -2.41720       2.41720       55.2066       57.6238    
  30  0.580879     -0.543212      -1.17395       1.17395       53.6835       54.8574    
  31  0.963075     -0.376241E-01 -0.813102E-01  0.813102E-01   55.0105       55.0918    
  32  0.656935     -0.420170     -0.908036      0.908036       54.3941       55.3021    
  33  0.908335     -0.961416E-01 -0.207773      0.207773       56.4406       56.6484    
  34  0.765938     -0.266654     -0.576272      0.576272       55.3763       55.9526    
  35  0.497301     -0.698561      -1.50967       1.50967       52.7564       54.2661    
  36  0.833603     -0.181997     -0.393318      0.393318       54.3964       54.7897    
  37  0.433057     -0.836886      -1.80861       1.80861       54.6827       56.4914    
  38  0.349547      -1.05112      -2.27159       2.27159       55.8868       58.1584    
  39  0.142838      -1.94604      -4.20563       4.20563       55.3520       59.5576    
  40  0.326780      -1.11847      -2.41714       2.41714       55.4608       57.8779    
  41  0.707709     -0.345723     -0.747148      0.747148       55.2045       55.9516    
  42  0.914339     -0.895538E-01 -0.193536      0.193536       54.5829       54.7764    
  43  0.392800     -0.934454      -2.01947       2.01947       56.6395       58.6590    
  44  0.434772     -0.832933      -1.80007       1.80007       54.2023       56.0024    
  45  0.229545      -1.47165      -3.18042       3.18042       55.9013       59.0817    
  46  0.661281     -0.413577     -0.893789      0.893789       54.9250       55.8188    
  47  0.459966     -0.776602      -1.67833       1.67833       55.2042       56.8825    
  48  0.352439      -1.04288      -2.25378       2.25378       55.3930       57.6468    
  49  0.490345     -0.712647      -1.54011       1.54011       56.3681       57.9082    
  50  0.837788     -0.176990     -0.382496      0.382496       50.8055       51.1880    
  51  0.247493      -1.39637      -3.01773       3.01773       57.6281       60.6458    
  52  0.221382      -1.50787      -3.25868       3.25868       54.3037       57.5624    
loop,thermsimp(1:2)       87   3.67051      0.705902    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255         54.53          1.01          0.98         23.91          0.50          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    256         58.20          1.02          1.00         24.05          0.15          0.05         26.27
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       87
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       88
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      256
neval,tstepnext:      255     256

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331      -3.27044       3.27044       50.8055       54.0760    
   2  0.246752E-01  -3.70196      -8.00037       8.00037       52.3116       60.3120    
   3  0.679039     -0.387076     -0.836518      0.836518       52.5065       53.3430    
   4  0.709027     -0.343862     -0.743125      0.743125       53.3113       54.0544    
   5  0.577754     -0.548608      -1.18561       1.18561       53.0280       54.2136    
   6  0.738694     -0.302871     -0.654541      0.654541       53.8423       54.4968    
   7  0.181723      -1.70527      -3.68530       3.68530       52.8045       56.4898    
   8  0.103748      -2.26579      -4.89664       4.89664       52.7564       57.6530    
   9  0.456811E-02  -5.38866      -11.6455       11.6455       53.2960       64.9415    
  10  0.303247      -1.19321      -2.57866       2.57866       53.3520       55.9307    
  11  0.284736      -1.25619      -2.71478       2.71478       53.7092       56.4240    
  12  0.900494     -0.104812     -0.226511      0.226511       54.5829       54.8094    
  13  0.691792     -0.368470     -0.796307      0.796307       54.3964       55.1927    
  14  0.502714     -0.687735      -1.48628       1.48628       53.6835       55.1698    
  15  0.305219      -1.18673      -2.56466       2.56466       54.1850       56.7497    
  16  0.412005     -0.886720      -1.91631       1.91631       53.8275       55.7438    
  17  0.412225     -0.886186      -1.91515       1.91515       55.0105       56.9257    
  18  0.121697      -2.10622      -4.55180       4.55180       54.3941       58.9459    
  19  0.465374     -0.764915      -1.65307       1.65307       52.6144       54.2674    
  20  0.273016      -1.29823      -2.80562       2.80562       54.9250       57.7306    
  21  0.502763     -0.687636      -1.48606       1.48606       53.9033       55.3894    
  22  0.516442     -0.660793      -1.42805       1.42805       55.2045       56.6325    
  23  0.554333     -0.589990      -1.27504       1.27504       55.3763       56.6514    
  24  0.192397E-01  -3.95078      -8.53810       8.53810       54.2023       62.7404    
  25  0.451279E-01  -3.09825      -6.69570       6.69570       54.0860       60.7817    
  26  0.457340     -0.782327      -1.69070       1.69070       55.3547       57.0454    
  27  0.325184      -1.12336      -2.42772       2.42772       52.8251       55.2528    
  28  0.700952     -0.355315     -0.767878      0.767878       53.3087       54.0766    
  29  0.961087     -0.396906E-01 -0.857761E-01  0.857761E-01   55.6701       55.7559    
  30  0.195966E-02  -6.23498      -13.4745       13.4745       54.6827       68.1573    
  31  0.766376     -0.266082     -0.575036      0.575036       56.4406       57.0156    
  32  0.398846     -0.919180      -1.98646       1.98646       53.7626       55.7490    
  33  0.675249     -0.392674     -0.848615      0.848615       53.1301       53.9787    
  34  0.189468      -1.66354      -3.59510       3.59510       54.4888       58.0839    
  35  0.444608     -0.810562      -1.75172       1.75172       55.2042       56.9559    
  36  0.514006     -0.665520      -1.43827       1.43827       55.1919       56.6302    
  37  0.575199     -0.553039      -1.19518       1.19518       55.9040       57.0992    
  38  0.121449      -2.10826      -4.55621       4.55621       54.3037       58.8599    
  39  0.209130      -1.56480      -3.38171       3.38171       55.2066       58.5883    
  40  0.466284E-01  -3.06555      -6.62501       6.62501       55.3930       62.0180    
  41  0.386630E-01  -3.25287      -7.02984       7.02984       55.4608       62.4906    
  42  0.335751E-01  -3.39397      -7.33477       7.33477       56.3681       63.7028    
  43  0.878126     -0.129965     -0.280870      0.280870       55.8868       56.1677    
  44  0.652938     -0.426273     -0.921225      0.921225       55.0947       56.0159    
  45  0.932456E-01  -2.37252      -5.12729       5.12729       55.8656       60.9929    
  46  0.662683     -0.411458     -0.889210      0.889210       56.6395       57.5287    
  47  0.204704      -1.58619      -3.42795       3.42795       55.6325       59.0605    
  48  0.985446     -0.146609E-01 -0.316840E-01  0.316840E-01   55.9013       55.9330    
  49  0.105847      -2.24576      -4.85335       4.85335       55.3520       60.2053    
  50  0.843201     -0.170550     -0.368578      0.368578       57.6281       57.9967    
  51  0.364087      -1.01036      -2.18351       2.18351       53.7200       55.9035    
  52  0.650651E-01  -2.73237      -5.90497       5.90497       54.5302       60.4352    
loop,thermsimp(1:2)       88   3.27044       8.00037    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257         54.47          1.09          0.99         24.01          0.29          0.06         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    258         64.41          1.03          1.00         24.10          0.11          0.05         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     54.47
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.16112               256
loop is:       88
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    2.16112               256
loop is:       89
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1.08056               307

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      257     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521     -0.142117      0.142117       52.5065       52.6486    
   2  0.765270     -0.267527     -0.289079      0.289079       53.1301       53.4192    
   3  0.215687      -1.53393      -1.65750       1.65750       53.3113       54.9688    
   4  0.999601E-01  -2.30298      -2.48851       2.48851       50.8055       53.2940    
   5  0.706519     -0.347405     -0.375391      0.375391       53.3087       53.6841    
   6  0.201358      -1.60267      -1.73178       1.73178       53.0280       54.7598    
   7  0.450677     -0.797005     -0.861211      0.861211       52.6144       53.4756    
   8  0.897557     -0.108078     -0.116785      0.116785       53.8423       53.9591    
   9  0.161166      -1.82532      -1.97236       1.97236       54.5829       56.5552    
  10  0.972556E-01  -2.33041      -2.51815       2.51815       53.6835       56.2016    
  11  0.742112     -0.298255     -0.322282      0.322282       54.3964       54.7187    
  12  0.172377      -1.75807      -1.89970       1.89970       52.8251       54.7248    
  13  0.658751     -0.417410     -0.451036      0.451036       53.9033       54.3543    
  14  0.725340     -0.321114     -0.346983      0.346983       53.8275       54.1745    
  15  0.501488     -0.690175     -0.745775      0.745775       53.7626       54.5083    
  16  0.845372     -0.167978     -0.181511      0.181511       55.6701       55.8516    
  17  0.132369      -2.02216      -2.18506       2.18506       53.7200       55.9050    
  18  0.734515E-01  -2.61113      -2.82148       2.82148       53.3520       56.1735    
  19  0.391205     -0.938523      -1.01413       1.01413       55.9013       56.9154    
  20  0.376983     -0.975555      -1.05415       1.05415       55.0947       56.1488    
  21  0.315463      -1.15371      -1.24666       1.24666       55.8868       57.1335    
  22  0.267113      -1.32008      -1.42643       1.42643       53.7092       55.1356    
  23  0.965292     -0.353243E-01 -0.381700E-01  0.381700E-01   52.8045       52.8427    
  24  0.954592     -0.464714E-01 -0.502151E-01  0.502151E-01   55.1919       55.2421    
  25  0.992414     -0.761515E-02 -0.822862E-02  0.822862E-02   55.2045       55.2127    
  26  0.867953E-02  -4.74679      -5.12918       5.12918       55.3763       60.5055    
  27  0.829585     -0.186829     -0.201880      0.201880       54.1850       54.3869    
  28  0.349695      -1.05069      -1.13534       1.13534       55.0105       56.1459    
  29  0.673511     -0.395251     -0.427092      0.427092       55.2042       55.6313    
  30  0.340696      -1.07676      -1.16351       1.16351       56.4406       57.6041    
  31  0.558731     -0.582087     -0.628979      0.628979       55.3547       55.9837    
  32  0.747295     -0.291295     -0.314761      0.314761       55.9040       56.2187    
  33  0.123287      -2.09324      -2.26187       2.26187       56.6395       58.9014    
  34  0.355051      -1.03549      -1.11891       1.11891       52.7564       53.8753    
  35  0.511895     -0.669636     -0.723581      0.723581       54.9250       55.6486    
  36  0.571856E-01  -2.86145      -3.09197       3.09197       57.6281       60.7201    
  37  0.507517     -0.678226     -0.732863      0.732863       54.4888       55.2217    
  38  0.326770      -1.11850      -1.20860       1.20860       55.2066       56.4152    
  39  0.736001     -0.306523     -0.331216      0.331216       54.3037       54.6349    
  40  0.970046     -0.304120E-01 -0.328619E-01  0.328619E-01   54.3941       54.4269    
  41  0.673510     -0.395253     -0.427094      0.427094       55.6325       56.0596    
  42  0.335032      -1.09353      -1.18162       1.18162       55.3520       56.5336    
  43  0.872321E-01  -2.43918      -2.63568       2.63568       52.3116       54.9473    
  44  0.749956     -0.287741     -0.310921      0.310921       54.5302       54.8411    
  45  0.159001      -1.83884      -1.98698       1.98698       54.0860       56.0730    
  46  0.529687     -0.635468     -0.686661      0.686661       55.8656       56.5522    
  47  0.142415      -1.94901      -2.10602       2.10602       55.3930       57.4990    
  48  0.803387     -0.218919     -0.236554      0.236554       55.4608       55.6974    
  49  0.709133     -0.343713     -0.371402      0.371402       54.2023       54.5737    
  50  0.261172      -1.34258      -1.45073       1.45073       56.3681       57.8188    
  51  0.106599      -2.23868      -2.41903       2.41903       53.2960       55.7150    
  52  0.955666     -0.453468E-01 -0.489999E-01  0.489999E-01   54.4677       54.5167    
loop,thermsimp(1:2)       89  0.142117      0.289079    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259         52.65          1.02          0.98         23.91          0.41          0.06         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    260         53.57          1.03          1.00         24.19          0.11          0.05         26.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.65
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       89
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       90
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      259     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915      -1.99811       1.99811       52.5065       54.5046    
   2  0.894146     -0.111886     -0.120899      0.120899       52.8045       52.9254    
   3  0.721270     -0.326741     -0.353063      0.353063       50.8055       51.1586    
   4  0.536866     -0.622006     -0.672114      0.672114       53.1301       53.8022    
   5  0.418107     -0.872017     -0.942266      0.942266       52.6144       53.5566    
   6  0.391189     -0.938564      -1.01417       1.01417       53.3087       54.3228    
   7  0.799669     -0.223558     -0.241567      0.241567       52.7564       52.9980    
   8  0.595070     -0.519076     -0.560893      0.560893       53.8423       54.4032    
   9  0.384356E-03  -7.86394      -8.49745       8.49745       53.8275       62.3250    
  10  0.654302     -0.424187     -0.458359      0.458359       53.9033       54.3617    
  11  0.873355     -0.135413     -0.146322      0.146322       54.1850       54.3314    
  12  0.303212      -1.19332      -1.28945       1.28945       54.3941       55.6835    
  13  0.434159     -0.834344     -0.901558      0.901558       53.7626       54.6641    
  14  0.970825     -0.296089E-01 -0.319942E-01  0.319942E-01   54.4677       54.4997    
  15  0.405896     -0.901659     -0.974295      0.974295       54.2023       55.1766    
  16  0.250423      -1.38461      -1.49615       1.49615       54.3037       55.7998    
  17  0.517030     -0.659654     -0.712795      0.712795       54.3964       55.1092    
  18  0.165468      -1.79897      -1.94390       1.94390       52.8251       54.7690    
  19  0.679403     -0.386541     -0.417680      0.417680       53.0280       53.4457    
  20  0.554013     -0.590567     -0.638142      0.638142       54.5302       55.1684    
  21  0.211764E-01  -3.85487      -4.16542       4.16542       52.3116       56.4770    
  22  0.453828     -0.790038     -0.853682      0.853682       53.3113       54.1649    
  23  0.377409     -0.974426      -1.05292       1.05292       53.7092       54.7621    
  24  0.496879     -0.699408     -0.755752      0.755752       55.2045       55.9602    
  25  0.214619      -1.53889      -1.66286       1.66286       54.4888       56.1517    
  26  0.724154     -0.322751     -0.348752      0.348752       55.1919       55.5407    
  27  0.385609     -0.952932      -1.02970       1.02970       55.2042       56.2339    
  28  0.777864     -0.251204     -0.271440      0.271440       54.9250       55.1964    
  29  0.709283     -0.343500     -0.371172      0.371172       55.4608       55.8320    
  30  0.191760      -1.65151      -1.78456       1.78456       53.2960       55.0806    
  31  0.347616      -1.05666      -1.14178       1.14178       55.6701       56.8119    
  32  0.191581      -1.65244      -1.78556       1.78556       53.7200       55.5055    
  33  0.770989     -0.260081     -0.281033      0.281033       55.3547       55.6358    
  34  0.788566E-01  -2.54012      -2.74475       2.74475       55.6325       58.3773    
  35  0.229474      -1.47197      -1.59055       1.59055       54.0860       55.6765    
  36  0.339326      -1.08079      -1.16786       1.16786       55.0105       56.1784    
  37  0.220886      -1.51011      -1.63176       1.63176       55.0947       56.7265    
  38  0.223644      -1.49770      -1.61835       1.61835       53.3520       54.9704    
  39  0.138287      -1.97842      -2.13780       2.13780       53.6835       55.8213    
  40  0.796402     -0.227651     -0.245991      0.245991       55.9040       56.1500    
  41  0.104384      -2.25968      -2.44172       2.44172       55.2066       57.6483    
  42  0.919642     -0.837713E-01 -0.905198E-01  0.905198E-01   55.3520       55.4425    
  43  0.360767      -1.01952      -1.10166       1.10166       55.8656       56.9672    
  44  0.924300     -0.787181E-01 -0.850595E-01  0.850595E-01   54.5829       54.6679    
  45  0.561139     -0.577786     -0.624332      0.624332       55.9013       56.5256    
  46  0.509073E-01  -2.97775      -3.21763       3.21763       55.8868       59.1044    
  47  0.715469     -0.334817     -0.361790      0.361790       55.3930       55.7548    
  48  0.294040E-01  -3.52662      -3.81073       3.81073       56.4406       60.2513    
  49  0.264026E-02  -5.93688      -6.41515       6.41515       56.3681       62.7832    
  50  0.634029     -0.455661     -0.492368      0.492368       56.6395       57.1319    
  51  0.319148      -1.14210      -1.23411       1.23411       55.3763       56.6105    
  52  0.495674     -0.701836     -0.758376      0.758376       52.6465       53.4049    
loop,thermsimp(1:2)       90   1.99811      0.120899    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261         52.70          1.04          1.00         24.14          0.15          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    52.699        2.950     -1.407      5.134     -100.0      1.187    
                     -0.6441      2.670     -100.0      2.626      1.444    
                       1.420    -0.9347      1.841      0.000      0.000    
                      -1.358      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.206     -3.796     -5.457     -2.642    
                      -13.62     -2.696      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5368E-01 0.6921E-02  0.000    -0.7041    
                     -0.1577    -0.2523    -0.1035    -0.1907    -0.2128E-01

                      -1.173    -0.7346      0.000    -0.1967E-01-0.2417E-01
                      0.8541E-01 0.1336E-01-0.2748    -0.2619    -0.1654    
                      0.7318E-01 0.2266E-01-0.2681    -0.8721      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.312      9.151     -7039.     -4.000    
                     -0.3983    -0.1746      9.112      8.555     -4904.    

                      -4.000    -0.8505E-01-0.5281      8.824      9.057    
                      -6912.     -4.000    -0.8185E-01-0.4951      9.669    
                       8.674     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       90
neval is:      260
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       91
neval is:      260


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      260     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415      -2.45735       2.45735       50.8055       53.2629    
   2  0.846291     -0.166892     -0.180337      0.180337       52.8045       52.9849    
   3  0.167054      -1.78944      -1.93359       1.93359       52.7564       54.6900    
   4  0.786038     -0.240750     -0.260145      0.260145       52.6465       52.9067    
   5  0.680218     -0.385341     -0.416384      0.416384       53.0280       53.4444    
   6  0.843894     -0.169729     -0.183402      0.183402       52.6144       52.7978    
   7  0.295559      -1.21889      -1.31708       1.31708       53.1301       54.4472    
   8  0.383493     -0.958433      -1.03564       1.03564       53.3113       54.3469    
   9  0.867247     -0.142431     -0.153905      0.153905       53.3087       53.4626    
  10  0.241960      -1.41898      -1.53329       1.53329       54.1850       55.7183    
  11  0.486925     -0.719645     -0.777619      0.777619       53.9033       54.6809    
  12  0.750166     -0.287460     -0.310618      0.310618       53.8423       54.1529    
  13  0.507045     -0.679156     -0.733868      0.733868       54.4677       55.2016    
  14  0.237743      -1.43656      -1.55229       1.55229       52.5065       54.0588    
  15  0.256837E-01  -3.66190      -3.95690       3.95690       53.7626       57.7195    
  16  0.776460     -0.253010     -0.273392      0.273392       54.5829       54.8563    
  17  0.316300      -1.15106      -1.24379       1.24379       53.7092       54.9530    
  18  0.493161     -0.706919     -0.763868      0.763868       52.8251       53.5890    
  19  0.807271     -0.214096     -0.231343      0.231343       53.3520       53.5833    
  20  0.338915      -1.08201      -1.16917       1.16917       53.2960       54.4652    
  21  0.132986      -2.01751      -2.18004       2.18004       54.3964       56.5765    
  22  0.409975     -0.891659     -0.963490      0.963490       54.5302       55.4937    
  23  0.525021     -0.644317     -0.696223      0.696223       54.2023       54.8985    
  24  0.393064     -0.933783      -1.00901       1.00901       54.9250       55.9340    
  25  0.176068      -1.73689      -1.87681       1.87681       55.3520       57.2288    
  26  0.965490     -0.351191E-01 -0.379483E-01  0.379483E-01   53.7200       53.7579    
  27  0.387767     -0.947350      -1.02367       1.02367       55.1919       56.2156    
  28  0.936248     -0.658753E-01 -0.711821E-01  0.711821E-01   55.3547       55.4259    
  29  0.914720     -0.891370E-01 -0.963178E-01  0.963178E-01   54.0860       54.1823    
  30  0.332171      -1.10211      -1.19089       1.19089       54.3941       55.5850    
  31  0.845314E-01  -2.47063      -2.66966       2.66966       55.3930       58.0626    
  32  0.687741     -0.374343     -0.404500      0.404500       54.3037       54.7082    
  33  0.899776     -0.105610     -0.114117      0.114117       53.6835       53.7976    
  34  0.558791     -0.581980     -0.628863      0.628863       55.4608       56.0897    
  35  0.882799     -0.124658     -0.134700      0.134700       55.2045       55.3392    
  36  0.235569      -1.44575      -1.56222       1.56222       55.9040       57.4662    
  37  0.533400     -0.628484     -0.679114      0.679114       54.4888       55.1679    
  38  0.147169      -1.91617      -2.07054       2.07054       55.0105       57.0811    
  39  0.966208E-01  -2.33696      -2.52522       2.52522       55.2042       57.7294    
  40  0.952887     -0.482588E-01 -0.521465E-01  0.521465E-01   52.3116       52.3637    
  41  0.155551      -1.86078      -2.01068       2.01068       55.9013       57.9120    
  42  0.645067     -0.438401     -0.473719      0.473719       55.3763       55.8501    
  43  0.394254     -0.930759      -1.00574       1.00574       55.0947       56.1004    
  44  0.546893     -0.603501     -0.652119      0.652119       55.6701       56.3222    
  45  0.390314     -0.940803      -1.01659       1.01659       55.8656       56.8822    
  46  0.311561      -1.16616      -1.26011       1.26011       56.6395       57.8996    
  47  0.752427E-01  -2.58704      -2.79545       2.79545       55.2066       58.0021    
  48  0.144673      -1.93328      -2.08903       2.08903       55.6325       57.7216    
  49  0.297567      -1.21212      -1.30976       1.30976       55.8868       57.1966    
  50  0.544131     -0.608565     -0.657591      0.657591       56.4406       57.0982    
  51  0.750603E-01  -2.58946      -2.79807       2.79807       53.8275       56.6256    
  52  0.127547      -2.05927      -2.22516       2.22516       52.6989       54.9241    
loop,thermsimp(1:2)       91   2.45735      0.180337    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    262         53.34          1.01          0.99         24.01          0.34          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.34
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       91
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       92
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      261     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040      -1.64288       1.64288       52.3116       53.9545    
   2  0.389473     -0.942961      -1.01893       1.01893       52.6144       53.6333    
   3  0.919121     -0.843378E-01 -0.911320E-01  0.911320E-01   52.6465       52.7376    
   4  0.970518     -0.299250E-01 -0.323357E-01  0.323357E-01   52.8045       52.8369    
   5  0.713317     -0.337830     -0.365045      0.365045       50.8055       51.1706    
   6  0.639607     -0.446902     -0.482904      0.482904       53.0280       53.5109    
   7  0.712661     -0.338749     -0.366038      0.366038       53.3087       53.6747    
   8  0.212311      -1.54970      -1.67455       1.67455       53.3520       55.0265    
   9  0.831769     -0.184200     -0.199039      0.199039       52.8251       53.0242    
  10  0.794875     -0.229571     -0.248065      0.248065       53.7200       53.9680    
  11  0.909815     -0.945137E-01 -0.102128      0.102128       53.6835       53.7856    
  12  0.753651E-01  -2.58541      -2.79369       2.79369       52.5065       55.3002    
  13  0.676081     -0.391442     -0.422977      0.422977       53.8423       54.2653    
  14  0.597437     -0.515107     -0.556604      0.556604       54.0860       54.6426    
  15  0.146947      -1.91768      -2.07217       2.07217       53.3113       55.3834    
  16  0.854910     -0.156760     -0.169388      0.169388       53.1301       53.2995    
  17  0.984999     -0.151146E-01 -0.163322E-01  0.163322E-01   53.2960       53.3123    
  18  0.533419     -0.628448     -0.679075      0.679075       53.9033       54.5824    
  19  0.383774     -0.957703      -1.03485       1.03485       52.7564       53.7912    
  20  0.691729     -0.368561     -0.398252      0.398252       54.3037       54.7019    
  21  0.313732E-01  -3.46180      -3.74068       3.74068       54.5829       58.3236    
  22  0.415635     -0.877947     -0.948673      0.948673       54.2023       55.1510    
  23  0.288746      -1.24221      -1.34228       1.34228       52.6989       54.0412    
  24  0.176464      -1.73464      -1.87438       1.87438       53.7092       55.5836    
  25  0.881312     -0.126344     -0.136522      0.136522       54.4888       54.6254    
  26  0.962783     -0.379267E-01 -0.409821E-01  0.409821E-01   54.4677       54.5087    
  27  0.415450     -0.878393     -0.949156      0.949156       55.2045       56.1536    
  28  0.271836      -1.30256      -1.40749       1.40749       55.3547       56.7622    
  29  0.926655     -0.761736E-01 -0.823100E-01  0.823100E-01   54.5302       54.6125    
  30  0.277790      -1.28089      -1.38408       1.38408       54.3941       55.7781    
  31  0.189974      -1.66087      -1.79467       1.79467       54.1850       55.9797    
  32  0.410540     -0.890281     -0.962001      0.962001       55.3763       56.3383    
  33  0.952387     -0.487839E-01 -0.527139E-01  0.527139E-01   54.9250       54.9777    
  34  0.896015     -0.109798     -0.118643      0.118643       55.4608       55.5794    
  35  0.121549E-01  -4.41002      -4.76529       4.76529       55.0947       59.8600    
  36  0.723911     -0.323087     -0.349115      0.349115       55.1919       55.5410    
  37  0.759053     -0.275683     -0.297892      0.297892       55.6701       55.9680    
  38  0.969929     -0.305320E-01 -0.329916E-01  0.329916E-01   54.3964       54.4294    
  39  0.852636     -0.159422     -0.172265      0.172265       53.8275       53.9998    
  40  0.730471     -0.314065     -0.339366      0.339366       55.8656       56.2050    
  41  0.528358     -0.637981     -0.689376      0.689376       55.0105       55.6999    
  42  0.404403     -0.905344     -0.978278      0.978278       56.4406       57.4189    
  43  0.232822      -1.45748      -1.57489       1.57489       55.8868       57.4617    
  44  0.847643     -0.165296     -0.178612      0.178612       55.3520       55.5306    
  45  0.429393E-01  -3.14797      -3.40156       3.40156       55.9040       59.3055    
  46  0.673157     -0.395777     -0.427661      0.427661       53.7626       54.1902    
  47  0.806068E-01  -2.51817      -2.72103       2.72103       55.6325       58.3536    
  48  0.926018     -0.768619E-01 -0.830538E-01  0.830538E-01   55.2042       55.2872    
  49  0.167973      -1.78395      -1.92767       1.92767       56.6395       58.5672    
  50  0.780773     -0.247471     -0.267407      0.267407       55.9013       56.1687    
  51  0.565702E-01  -2.87227      -3.10366       3.10366       55.2066       58.3103    
  52  0.646011     -0.436939     -0.472139      0.472139       53.3415       53.8137    
loop,thermsimp(1:2)       92   1.64288       1.01893    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263         53.52          1.09          1.00         24.16          0.16          0.06         26.46
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    264         57.37          0.99          0.99         24.18          0.16          0.05         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.52
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       92
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       93
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      263     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653      -2.06012       2.06012       50.8055       52.8657    
   2  0.695074     -0.363738     -0.393040      0.393040       52.6465       53.0395    
   3  0.541180     -0.614003     -0.663466      0.663466       52.8045       53.4680    
   4  0.189791      -1.66183      -1.79571       1.79571       52.8251       54.6208    
   5  0.245553      -1.40424      -1.51737       1.51737       53.1301       54.6475    
   6  0.641474     -0.443986     -0.479754      0.479754       53.2960       53.7758    
   7  0.308462      -1.17616      -1.27091       1.27091       53.0280       54.2989    
   8  0.478005     -0.738133     -0.797597      0.797597       52.6144       53.4120    
   9  0.395759     -0.926951      -1.00163       1.00163       53.3087       54.3103    
  10  0.438776E-01  -3.12635      -3.37821       3.37821       53.6835       57.0617    
  11  0.294628E-01  -3.52463      -3.80857       3.80857       52.7564       56.5650    
  12  0.331052E-01  -3.40806      -3.68261       3.68261       53.3415       57.0241    
  13  0.916325E-01  -2.38997      -2.58250       2.58250       52.3116       54.8941    
  14  0.985908     -0.141919E-01 -0.153351E-01  0.153351E-01   53.7200       53.7353    
  15  0.511724     -0.669970     -0.723942      0.723942       53.8275       54.5515    
  16  0.185695      -1.68365      -1.81928       1.81928       52.6989       54.5182    
  17  0.830711     -0.185474     -0.200415      0.200415       53.7626       53.9630    
  18  0.765179E-04  -9.47799      -10.2415       10.2415       53.8423       64.0838    
  19  0.129365      -2.04512      -2.20987       2.20987       54.3964       56.6063    
  20  0.796363     -0.227700     -0.246043      0.246043       54.4677       54.7138    
  21  0.589256     -0.528895     -0.571503      0.571503       53.9033       54.4748    
  22  0.770995     -0.260073     -0.281024      0.281024       54.5302       54.8112    
  23  0.685430     -0.377709     -0.408137      0.408137       54.4888       54.8970    
  24  0.487688     -0.718080     -0.775928      0.775928       54.0860       54.8619    
  25  0.114898      -2.16371      -2.33802       2.33802       54.3037       56.6417    
  26  0.165093      -1.80124      -1.94635       1.94635       54.9250       56.8713    
  27  0.302275      -1.19642      -1.29280       1.29280       53.3520       54.6448    
  28  0.123669      -2.09014      -2.25852       2.25852       54.2023       56.4608    
  29  0.960526     -0.402739E-01 -0.435183E-01  0.435183E-01   55.2042       55.2477    
  30  0.744557     -0.294966     -0.318728      0.318728       52.5065       52.8252    
  31  0.418436     -0.871232     -0.941418      0.941418       53.3113       54.2527    
  32  0.624411     -0.470947     -0.508886      0.508886       55.3520       55.8609    
  33  0.920055     -0.833222E-01 -0.900345E-01  0.900345E-01   55.1919       55.2820    
  34  0.330507      -1.10713      -1.19632       1.19632       55.4608       56.6571    
  35  0.889566     -0.117022     -0.126449      0.126449       53.7092       53.8356    
  36  0.269410      -1.31152      -1.41717       1.41717       55.0105       56.4277    
  37  0.458780     -0.779184     -0.841955      0.841955       54.3941       55.2360    
  38  0.952588     -0.485730E-01 -0.524860E-01  0.524860E-01   55.6701       55.7226    
  39  0.213836      -1.54254      -1.66681       1.66681       54.1850       55.8519    
  40  0.460697     -0.775015     -0.837450      0.837450       55.2045       56.0419    
  41  0.571693     -0.559153     -0.604198      0.604198       55.9013       56.5055    
  42  0.201363      -1.60265      -1.73176       1.73176       55.8656       57.5973    
  43  0.707817     -0.345570     -0.373409      0.373409       55.3763       55.7498    
  44  0.927118     -0.756745E-01 -0.817708E-01  0.817708E-01   55.3547       55.4365    
  45  0.288916      -1.24162      -1.34164       1.34164       56.4406       57.7822    
  46  0.702737     -0.352773     -0.381192      0.381192       55.8868       56.2680    
  47  0.253190      -1.37362      -1.48427       1.48427       55.2066       56.6909    
  48  0.709086     -0.343779     -0.371473      0.371473       54.5829       54.9544    
  49  0.399421     -0.917738     -0.991671      0.991671       55.6325       56.6242    
  50  0.837301     -0.177572     -0.191877      0.191877       56.6395       56.8314    
  51  0.906694     -0.979507E-01 -0.105842      0.105842       55.9040       56.0098    
  52  0.479547     -0.734913     -0.794117      0.794117       53.5157       54.3098    
loop,thermsimp(1:2)       93   2.06012      0.393040    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265         53.38          1.02          1.00         24.00          0.37          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    266         52.99          1.02          1.01         24.19          0.12          0.05         26.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       93
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       94
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      265     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638     -0.185465      0.185465       52.5065       52.6920    
   2  0.478368     -0.737375     -0.796778      0.796778       50.8055       51.6023    
   3  0.283498      -1.26055      -1.36210       1.36210       52.6465       54.0086    
   4  0.520516     -0.652935     -0.705535      0.705535       52.6144       53.3199    
   5  0.703282E-01  -2.65458      -2.86843       2.86843       52.8045       55.6730    
   6  0.914137     -0.897748E-01 -0.970070E-01  0.970070E-01   53.7200       53.8170    
   7  0.479535     -0.734938     -0.794144      0.794144       53.2960       54.0902    
   8  0.921875     -0.813456E-01 -0.878987E-01  0.878987E-01   53.7092       53.7971    
   9  0.739547     -0.301718     -0.326024      0.326024       53.7626       54.0886    
  10  0.790753     -0.234770     -0.253683      0.253683       53.3113       53.5649    
  11  0.212247E-01  -3.85259      -4.16295       4.16295       53.0280       57.1909    
  12  0.286971      -1.24837      -1.34894       1.34894       53.5157       54.8646    
  13  0.695666     -0.362886     -0.392120      0.392120       53.3087       53.7008    
  14  0.534590     -0.626255     -0.676705      0.676705       53.9033       54.5800    
  15  0.945577     -0.559603E-01 -0.604684E-01  0.604684E-01   52.6989       52.7594    
  16  0.619446     -0.478930     -0.517512      0.517512       53.8275       54.3450    
  17  0.291083E-01  -3.53673      -3.82165       3.82165       52.8251       56.6468    
  18  0.372584E-01  -3.28988      -3.55491       3.55491       53.3520       56.9069    
  19  0.713241     -0.337936     -0.365160      0.365160       53.1301       53.4952    
  20  0.280281      -1.27196      -1.37443       1.37443       54.4677       55.8422    
  21  0.254796      -1.36729      -1.47744       1.47744       54.5302       56.0076    
  22  0.498598     -0.695955     -0.752020      0.752020       54.0860       54.8380    
  23  0.515261E-01  -2.96567      -3.20458       3.20458       52.3116       55.5162    
  24  0.347627      -1.05662      -1.14174       1.14174       54.4888       55.6306    
  25  0.696212     -0.362102     -0.391272      0.391272       54.5829       54.9742    
  26  0.707749E-01  -2.64825      -2.86159       2.86159       54.3941       57.2557    
  27  0.364523E-01  -3.31175      -3.57854       3.57854       55.2042       58.7827    
  28  0.895087E-02  -4.71600      -5.09592       5.09592       55.1919       60.2878    
  29  0.333194      -1.09903      -1.18757       1.18757       55.3547       56.5423    
  30  0.451375     -0.795457     -0.859538      0.859538       55.6701       56.5296    
  31  0.849961E-01  -2.46515      -2.66374       2.66374       55.3763       58.0401    
  32  0.524791     -0.644756     -0.696697      0.696697       54.1850       54.8817    
  33  0.641068     -0.444619     -0.480438      0.480438       55.3520       55.8324    
  34  0.757376     -0.277895     -0.300282      0.300282       55.9040       56.2043    
  35  0.760597     -0.273651     -0.295696      0.295696       55.2045       55.5002    
  36  0.709070     -0.343801     -0.371497      0.371497       55.8868       56.2583    
  37  0.794718     -0.229768     -0.248278      0.248278       55.0105       55.2588    
  38  0.869679     -0.139632     -0.150880      0.150880       54.2023       54.3532    
  39  0.229100E-01  -3.77618      -4.08039       4.08039       55.9013       59.9817    
  40  0.935590     -0.665776E-01 -0.719410E-01  0.719410E-01   52.7564       52.8283    
  41  0.889453     -0.117149     -0.126586      0.126586       54.3964       54.5230    
  42  0.529054     -0.636665     -0.687954      0.687954       55.6325       56.3205    
  43  0.907902     -0.966186E-01 -0.104402      0.104402       54.3037       54.4081    
  44  0.693802     -0.365568     -0.395018      0.395018       55.4608       55.8558    
  45  0.883803     -0.123521     -0.133472      0.133472       55.2066       55.3401    
  46  0.275134E-01  -3.59308      -3.88254       3.88254       56.6395       60.5220    
  47  0.324767      -1.12465      -1.21525       1.21525       54.9250       56.1402    
  48  0.853326     -0.158614     -0.171392      0.171392       53.3415       53.5129    
  49  0.325639      -1.12197      -1.21235       1.21235       53.6835       54.8958    
  50  0.773280     -0.257115     -0.277828      0.277828       55.8656       56.1434    
  51  0.108890      -2.21741      -2.39605       2.39605       56.4406       58.8366    
  52  0.188532E-01  -3.97107      -4.29098       4.29098       52.9926       57.2836    
loop,thermsimp(1:2)       94  0.185465      0.796778    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267         61.30          1.05          0.98         23.78          0.53          0.06         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    268         53.95          1.04          1.00         23.99          0.20          0.05         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     53.95
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       94
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       95
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      267     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841     -0.318593      0.318593       50.8055       51.1241    
   2  0.739179     -0.302215     -0.326561      0.326561       52.5065       52.8331    
   3  0.131167      -2.03128      -2.19492       2.19492       52.6989       54.8938    
   4  0.523356     -0.647493     -0.699655      0.699655       52.7564       53.4560    
   5  0.660412     -0.414891     -0.448314      0.448314       52.6144       53.0627    
   6  0.433074E-01  -3.13943      -3.39234       3.39234       53.1301       56.5224    
   7  0.480352     -0.733236     -0.792305      0.792305       53.3415       54.1338    
   8  0.808114     -0.213053     -0.230216      0.230216       53.3113       53.5415    
   9  0.723804     -0.323235     -0.349274      0.349274       53.3087       53.6579    
  10  0.322682      -1.13109      -1.22221       1.22221       53.7092       54.9314    
  11  0.898907     -0.106576     -0.115162      0.115162       53.7200       53.8351    
  12  0.359972      -1.02173      -1.10404       1.10404       52.6465       53.7505    
  13  0.879118     -0.128836     -0.139215      0.139215       53.7626       53.9018    
  14  0.963559     -0.371220E-01 -0.401125E-01  0.401125E-01   53.2960       53.3361    
  15  0.662848     -0.411210     -0.444336      0.444336       53.8275       54.2719    
  16  0.648402     -0.433244     -0.468146      0.468146       54.2023       54.6705    
  17  0.375343     -0.979916      -1.05886       1.05886       54.3037       55.3625    
  18  0.812441     -0.207712     -0.224445      0.224445       54.3964       54.6209    
  19  0.248177E-01  -3.69620      -3.99396       3.99396       53.9033       57.8973    
  20  0.653530     -0.425366     -0.459633      0.459633       54.0860       54.5456    
  21  0.712244     -0.339334     -0.366671      0.366671       53.5157       53.8823    
  22  0.358229      -1.02658      -1.10928       1.10928       54.1850       55.2943    
  23  0.325518      -1.12234      -1.21275       1.21275       53.6835       54.8962    
  24  0.770349     -0.260912     -0.281930      0.281930       54.5829       54.8648    
  25  0.633518E-01  -2.75905      -2.98132       2.98132       55.0105       57.9919    
  26  0.168796      -1.77907      -1.92239       1.92239       55.2066       57.1290    
  27  0.562007     -0.576241     -0.622662      0.622662       55.2045       55.8271    
  28  0.156316      -1.85588      -2.00539       2.00539       52.3116       54.3170    
  29  0.967732     -0.328002E-01 -0.354426E-01  0.354426E-01   54.4888       54.5243    
  30  0.538071     -0.619766     -0.669693      0.669693       52.8045       53.4742    
  31  0.967495     -0.330453E-01 -0.357074E-01  0.357074E-01   55.3520       55.3877    
  32  0.771619     -0.259265     -0.280151      0.280151       54.4677       54.7479    
  33  0.246044      -1.40225      -1.51521       1.51521       55.4608       56.9760    
  34  0.700731     -0.355631     -0.384281      0.384281       54.5302       54.9145    
  35  0.382714     -0.960468      -1.03784       1.03784       54.9250       55.9628    
  36  0.580395     -0.544047     -0.587875      0.587875       55.8656       56.4535    
  37  0.305131      -1.18701      -1.28264       1.28264       55.9040       57.1866    
  38  0.624250     -0.471204     -0.509164      0.509164       55.8868       56.3960    
  39  0.575432     -0.552634     -0.597153      0.597153       55.6325       56.2297    
  40  0.701335     -0.354770     -0.383350      0.383350       55.6701       56.0534    
  41  0.290211      -1.23715      -1.33681       1.33681       55.3547       56.6915    
  42  0.140976      -1.95916      -2.11699       2.11699       52.8251       54.9421    
  43  0.275714      -1.28839      -1.39218       1.39218       53.3520       54.7442    
  44  0.856479     -0.154925     -0.167406      0.167406       53.0280       53.1954    
  45  0.994286     -0.573084E-02 -0.619251E-02  0.619251E-02   54.3941       54.4003    
  46  0.913008     -0.910102E-01 -0.983419E-01  0.983419E-01   52.9926       53.0910    
  47  0.204063      -1.58933      -1.71736       1.71736       55.3763       57.0937    
  48  0.388833     -0.944605      -1.02070       1.02070       55.2042       56.2249    
  49  0.781619     -0.246387     -0.266236      0.266236       56.4406       56.7068    
  50  0.373421     -0.985049      -1.06440       1.06440       55.9013       56.9657    
  51  0.834918     -0.180422     -0.194956      0.194956       55.1919       55.3869    
  52  0.174969      -1.74315      -1.88357       1.88357       53.9460       55.8296    
loop,thermsimp(1:2)       95  0.318593      0.326561    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269         53.16          1.05          0.99         23.66          0.64          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       95
neval is:      268
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =   1.18050    

hmean,hstd :    54.0995       1.18050    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    54.0995       1.18050    
h(1),h(best1),h(np1) :    50.8055       50.8055       53.1638    
htherm(1),htherm(best1),htherm(np1) :    51.1241       51.1241       57.9919    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    270         53.51          1.01          0.99         23.92          0.47          0.06         26.45

 EVIDENCE OF CONVERGENCE
 Centroid of last simplex =
    2.9626      -1.3642       5.1333      -100.00       1.2297     -0.62562    
    2.6145      -100.00       2.6087       1.3798       1.4275     -0.87199    
    1.8407       0.0000       0.0000      -1.4007       0.0000       0.0000    
    0.0000      -1.2210      -2.5000       10113.       13790.      -1559.7    

   -34511.      -2.0000      -4.2572      -3.2483      -5.4713      -2.8328    
   -13.796      -2.6486       1521.8       0.0000       2659.4       3281.5    
    4343.7       3225.9       5995.8       2193.2       2108.2      0.54897E-01
   0.90884E-02   0.0000     -0.76703     -0.17788     -0.27098     -0.13643    

  -0.18002     -0.42853E-01  -1.1753     -0.72299       0.0000     -0.27879E-01
  -0.29657E-01  0.85411E-01 -0.82135E-02 -0.48825E-01 -0.23777     -0.17459    
   0.11153      0.37894E-01 -0.22065     -0.89326       0.0000     -0.50000    
   -1.0000       1.7644      -1.2928       0.0000       0.0000       9.3157    

    9.1380      -7039.2      -4.0000     -0.39445     -0.10704       9.0726    
    8.5418      -4903.9      -4.0000     -0.97643E-01 -0.53604       8.8044    
    9.0401      -6912.4      -4.0000     -0.17740     -0.53221       9.6169    
    8.7111      -3546.1      -2.0000    
 Function value at centroid =   53.5146    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        1
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      269     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -4.20298       4.20298       50.8055       55.0085    
   2  0.977100     -0.231667E-01 -0.250329E-01  0.250329E-01   52.5065       52.5315    
   3  0.491467     -0.710361     -0.767587      0.767587       52.6144       53.3820    
   4  0.802113E-01  -2.52309      -2.72635       2.72635       52.9926       55.7190    
   5  0.891044     -0.115361     -0.124655      0.124655       53.0280       53.1526    
   6  0.397551     -0.922433     -0.996744      0.996744       53.2960       54.2928    
   7  0.121203      -2.11029      -2.28029       2.28029       52.7564       55.0367    
   8  0.789985E-01  -2.53833      -2.74281       2.74281       52.8045       55.5473    
   9  0.921855     -0.813679E-01 -0.879228E-01  0.879228E-01   53.3113       53.3992    
  10  0.252671      -1.37567      -1.48649       1.48649       53.3087       54.7952    
  11  0.787271     -0.239182     -0.258451      0.258451       52.6465       52.9050    
  12  0.634653     -0.454676     -0.491304      0.491304       53.7200       54.2113    
  13  0.706648     -0.347222     -0.375194      0.375194       53.5157       53.8909    
  14  0.349740E-01  -3.35315      -3.62328       3.62328       53.7626       57.3858    
  15  0.686787     -0.375731     -0.405999      0.405999       53.3415       53.7475    
  16  0.309348      -1.17329      -1.26781       1.26781       53.8275       55.0953    
  17  0.703748     -0.351336     -0.379639      0.379639       52.3116       52.6912    
  18  0.985092     -0.150207E-01 -0.162308E-01  0.162308E-01   54.3941       54.4103    
  19  0.440741     -0.819298     -0.885300      0.885300       54.4888       55.3741    
  20  0.796112     -0.228015     -0.246384      0.246384       54.0860       54.3324    
  21  0.451938     -0.794210     -0.858191      0.858191       54.3964       55.2546    
  22  0.230902      -1.46576      -1.58384       1.58384       54.2023       55.7862    
  23  0.760212     -0.274159     -0.296245      0.296245       53.3520       53.6482    
  24  0.250434E-02  -5.98973      -6.47226       6.47226       54.4677       60.9400    
  25  0.627913E-01  -2.76794      -2.99092       2.99092       54.5829       57.5738    
  26  0.263128      -1.33511      -1.44267       1.44267       52.6989       54.1416    
  27  0.177986      -1.72605      -1.86510       1.86510       53.6835       55.5486    
  28  0.919776     -0.836247E-01 -0.903614E-01  0.903614E-01   54.5302       54.6206    
  29  0.854272     -0.157506     -0.170195      0.170195       53.7092       53.8794    
  30  0.648187     -0.433576     -0.468504      0.468504       52.8251       53.2936    
  31  0.853797     -0.158061     -0.170795      0.170795       54.1850       54.3558    
  32  0.484551     -0.724533     -0.782901      0.782901       54.3037       55.0866    
  33  0.423817     -0.858454     -0.927610      0.927610       55.1919       56.1195    
  34  0.932015     -0.704065E-01 -0.760784E-01  0.760784E-01   55.3520       55.4280    
  35  0.161906      -1.82074      -1.96742       1.96742       55.2045       57.1719    
  36  0.812519     -0.207617     -0.224342      0.224342       53.9460       54.1703    
  37  0.346838      -1.05890      -1.14420       1.14420       54.9250       56.0692    
  38  0.477141     -0.739943     -0.799552      0.799552       55.6701       56.4696    
  39  0.931946     -0.704808E-01 -0.761587E-01  0.761587E-01   55.2042       55.2803    
  40  0.189794      -1.66182      -1.79569       1.79569       55.6325       57.4282    
  41  0.361902      -1.01638      -1.09826       1.09826       55.8868       56.9851    
  42  0.775630E-02  -4.85925      -5.25071       5.25071       55.8656       61.1163    
  43  0.292497      -1.22930      -1.32833       1.32833       53.1301       54.4584    
  44  0.264300      -1.33067      -1.43787       1.43787       55.3547       56.7926    
  45  0.529597     -0.635638     -0.686845      0.686845       56.4406       57.1274    
  46  0.163272      -1.81234      -1.95834       1.95834       55.9013       57.8596    
  47  0.212593      -1.54838      -1.67311       1.67311       55.4608       57.1339    
  48  0.359173      -1.02395      -1.10644       1.10644       55.3763       56.4828    
  49  0.993707     -0.631295E-02 -0.682152E-02  0.682152E-02   55.2066       55.2134    
  50  0.261479      -1.34140      -1.44946       1.44946       55.9040       57.3534    
  51  0.441392     -0.817822     -0.883705      0.883705       53.9033       54.7870    
  52  0.624656     -0.470554     -0.508462      0.508462       53.1638       53.6723    
loop,thermsimp(1:2)        1   4.20298      0.250329E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271         52.30          1.02          1.00         24.02          0.26          0.05         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272         54.68          1.01          1.00         24.03          0.27          0.05         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.30
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        1
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        2
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      271     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867      -1.60860       1.60860       52.5065       54.1151    
   2  0.726663     -0.319292     -0.345014      0.345014       52.3116       52.6566    
   3  0.929061     -0.735808E-01 -0.795084E-01  0.795084E-01   52.6465       52.7260    
   4  0.764703     -0.268268     -0.289880      0.289880       53.0280       53.3179    
   5  0.119617      -2.12346      -2.29453       2.29453       52.8251       55.1196    
   6  0.369672     -0.995138      -1.07531       1.07531       52.6144       53.6897    
   7  0.875806     -0.132611     -0.143294      0.143294       53.3113       53.4546    
   8  0.657886     -0.418723     -0.452455      0.452455       53.3520       53.8045    
   9  0.387095E-01  -3.25167      -3.51362       3.51362       53.1638       56.6774    
  10  0.454078     -0.789485     -0.853086      0.853086       53.3415       54.1946    
  11  0.890470     -0.116006     -0.125351      0.125351       53.7092       53.8345    
  12  0.118445      -2.13331      -2.30516       2.30516       53.5157       55.8208    
  13  0.190238      -1.65948      -1.79317       1.79317       52.6989       54.4921    
  14  0.435624     -0.830976     -0.897919      0.897919       53.9460       54.8439    
  15  0.768655     -0.263114     -0.284310      0.284310       53.7200       54.0043    
  16  0.870896E-01  -2.44082      -2.63745       2.63745       53.2960       55.9335    
  17  0.936453     -0.656556E-01 -0.709447E-01  0.709447E-01   54.0860       54.1569    
  18  0.159312      -1.83689      -1.98487       1.98487       54.1850       56.1699    
  19  0.988165     -0.119051E-01 -0.128642E-01  0.128642E-01   54.3941       54.4069    
  20  0.713347     -0.337787     -0.364999      0.364999       53.1301       53.4951    
  21  0.417075     -0.874489     -0.944938      0.944938       54.5302       55.4751    
  22  0.719048     -0.329827     -0.356397      0.356397       53.9033       54.2597    
  23  0.785519     -0.241411     -0.260859      0.260859       53.3087       53.5695    
  24  0.356994      -1.03004      -1.11301       1.11301       50.8055       51.9185    
  25  0.357951      -1.02736      -1.11012       1.11012       52.7564       53.8665    
  26  0.154816      -1.86552      -2.01580       2.01580       54.3037       56.3195    
  27  0.246912      -1.39872      -1.51140       1.51140       53.8275       55.3389    
  28  0.553458     -0.591570     -0.639226      0.639226       55.2066       55.8458    
  29  0.729602     -0.315256     -0.340653      0.340653       54.3964       54.7371    
  30  0.605470     -0.501750     -0.542171      0.542171       55.2042       55.7463    
  31  0.278987E-01  -3.57918      -3.86751       3.86751       54.4888       58.3563    
  32  0.187991      -1.67136      -1.80601       1.80601       55.3520       57.1580    
  33  0.543158     -0.610355     -0.659525      0.659525       52.8045       53.4640    
  34  0.996749     -0.325625E-02 -0.351857E-02  0.351857E-02   53.6835       53.6870    
  35  0.540727     -0.614841     -0.664372      0.664372       52.9926       53.6570    
  36  0.833271E-01  -2.48498      -2.68517       2.68517       54.2023       56.8875    
  37  0.404538     -0.905011     -0.977918      0.977918       54.9250       55.9029    
  38  0.147302      -1.91527      -2.06956       2.06956       55.1919       57.2615    
  39  0.364226E-01  -3.31257      -3.57942       3.57942       55.6701       59.2495    
  40  0.381304     -0.964158      -1.04183       1.04183       55.3763       56.4182    
  41  0.737758     -0.304140     -0.328641      0.328641       55.3547       55.6834    
  42  0.179374      -1.71828      -1.85670       1.85670       55.8868       57.7435    
  43  0.281757      -1.26671      -1.36876       1.36876       56.4406       57.8094    
  44  0.192633      -1.64697      -1.77965       1.77965       55.4608       57.2405    
  45  0.954983     -0.460617E-01 -0.497724E-01  0.497724E-01   55.2045       55.2542    
  46  0.710258     -0.342127     -0.369689      0.369689       55.9040       56.2737    
  47  0.831769     -0.184201     -0.199040      0.199040       53.7626       53.9616    
  48  0.912541     -0.915218E-01 -0.988948E-01  0.988948E-01   55.6325       55.7314    
  49  0.221543      -1.50714      -1.62855       1.62855       54.5829       56.2114    
  50  0.690803E-02  -4.97507      -5.37586       5.37586       55.9013       61.2771    
  51  0.162616      -1.81637      -1.96269       1.96269       54.4677       56.4304    
  52  0.869433     -0.139913     -0.151185      0.151185       52.3006       52.4518    
loop,thermsimp(1:2)        2   1.60860      0.345014    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273         52.45          1.07          0.98         23.70          0.70          0.05         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        2
neval is:      272
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        3
neval is:      272


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      272     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194     -0.948940      0.948940       50.8055       51.7545    
   2  0.117190E-02  -6.74913      -7.29283       7.29283       52.3006       59.5935    
   3  0.432199     -0.838870     -0.906448      0.906448       52.3116       53.2180    
   4  0.466381     -0.762753     -0.824200      0.824200       52.6465       53.4707    
   5  0.696685     -0.361422     -0.390538      0.390538       53.0280       53.4185    
   6  0.193714      -1.64137      -1.77360       1.77360       53.3113       55.0849    
   7  0.535145     -0.625217     -0.675584      0.675584       52.8045       53.4801    
   8  0.812984     -0.207044     -0.223724      0.223724       53.1301       53.3538    
   9  0.956789     -0.441723E-01 -0.477308E-01  0.477308E-01   53.3087       53.3564    
  10  0.496711E-01  -3.00233      -3.24420       3.24420       52.9926       56.2368    
  11  0.206308E-01  -3.88097      -4.19362       4.19362       53.6835       57.8771    
  12  0.423434     -0.859358     -0.928588      0.928588       52.6144       53.5430    
  13  0.216826      -1.52866      -1.65181       1.65181       53.3520       55.0038    
  14  0.792422     -0.232661     -0.251404      0.251404       53.7092       53.9606    
  15  0.265940      -1.32449      -1.43118       1.43118       52.7564       54.1876    
  16  0.993400     -0.662201E-02 -0.715548E-02  0.715548E-02   53.7626       53.7697    
  17  0.645200E-01  -2.74078      -2.96158       2.96158       53.7200       56.6815    
  18  0.651527     -0.428436     -0.462950      0.462950       52.5065       52.9694    
  19  0.858875     -0.152131     -0.164387      0.164387       54.0860       54.2504    
  20  0.126056      -2.07103      -2.23787       2.23787       53.3415       55.5794    
  21  0.772661E-01  -2.56050      -2.76677       2.76677       53.9033       56.6701    
  22  0.441429     -0.817737     -0.883613      0.883613       54.3941       55.2777    
  23  0.166586      -1.79224      -1.93662       1.93662       52.6989       54.6355    
  24  0.217490      -1.52560      -1.64851       1.64851       54.3964       56.0449    
  25  0.632871     -0.457488     -0.494343      0.494343       53.9460       54.4404    
  26  0.201694      -1.60100      -1.72998       1.72998       52.8251       54.5551    
  27  0.282690      -1.26341      -1.36519       1.36519       55.2045       56.5697    
  28  0.255086E-01  -3.66874      -3.96429       3.96429       53.8275       57.7918    
  29  0.562308     -0.575706     -0.622084      0.622084       54.5302       55.1523    
  30  0.283366E-01  -3.56360      -3.85068       3.85068       55.3547       59.2054    
  31  0.404254E-01  -3.20830      -3.46675       3.46675       55.6325       59.0993    
  32  0.170475      -1.76917      -1.91169       1.91169       55.2042       57.1159    
  33  0.141712      -1.95396      -2.11136       2.11136       53.5157       55.6270    
  34  0.773173     -0.257253     -0.277977      0.277977       55.2066       55.4846    
  35  0.255978      -1.36266      -1.47244       1.47244       54.9250       56.3974    
  36  0.823739     -0.193902     -0.209522      0.209522       53.2960       53.5055    
  37  0.166307      -1.79392      -1.93844       1.93844       54.1850       56.1235    
  38  0.676319     -0.391090     -0.422596      0.422596       54.5829       55.0055    
  39  0.144546      -1.93416      -2.08997       2.08997       55.9040       57.9939    
  40  0.593436     -0.521826     -0.563864      0.563864       54.3037       54.8675    
  41  0.762921     -0.270600     -0.292400      0.292400       55.3763       55.6687    
  42  0.855796     -0.155724     -0.168269      0.168269       54.4677       54.6360    
  43  0.433555     -0.835737     -0.903063      0.903063       53.1638       54.0669    
  44  0.252891      -1.37480      -1.48555       1.48555       54.2023       55.6879    
  45  0.942909     -0.587850E-01 -0.635207E-01  0.635207E-01   55.3520       55.4155    
  46  0.432313     -0.838605     -0.906162      0.906162       55.4608       56.3670    
  47  0.975713     -0.245869E-01 -0.265676E-01  0.265676E-01   55.1919       55.2185    
  48  0.541226     -0.613919     -0.663376      0.663376       55.8868       56.5502    
  49  0.255057      -1.36627      -1.47633       1.47633       56.4406       57.9169    
  50  0.202141      -1.59879      -1.72758       1.72758       54.4888       56.2164    
  51  0.949562     -0.517549E-01 -0.559242E-01  0.559242E-01   55.6701       55.7260    
  52  0.255660E-01  -3.66649      -3.96186       3.96186       52.4471       56.4089    
loop,thermsimp(1:2)        3  0.948940       7.29283    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    274         55.69          1.01          0.98         23.88          0.54          0.06         26.46
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     55.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        3
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        4
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      273     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640     -0.454526      0.454526       50.8055       51.2601    
   2  0.880966     -0.126736     -0.136946      0.136946       52.5065       52.6434    
   3  0.854972     -0.156687     -0.169309      0.169309       52.3116       52.4809    
   4  0.797101     -0.226774     -0.245043      0.245043       53.1301       53.3751    
   5  0.158477      -1.84214      -1.99055       1.99055       53.3087       55.2992    
   6  0.593839     -0.521148     -0.563131      0.563131       53.0280       53.5911    
   7  0.817101     -0.201993     -0.218265      0.218265       52.6465       52.8648    
   8  0.997190     -0.281377E-02 -0.304044E-02  0.304044E-02   52.8045       52.8076    
   9  0.402857     -0.909174     -0.982417      0.982417       53.2960       54.2784    
  10  0.690455     -0.370405     -0.400245      0.400245       52.6144       53.0146    
  11  0.609635     -0.494895     -0.534763      0.534763       53.7626       54.2973    
  12  0.491117     -0.711073     -0.768356      0.768356       53.7092       54.4775    
  13  0.990676     -0.936814E-02 -0.101228E-01  0.101228E-01   53.1638       53.1739    
  14  0.976919     -0.233519E-01 -0.252331E-01  0.252331E-01   52.7564       52.7816    
  15  0.692556     -0.367366     -0.396961      0.396961       54.0860       54.4829    
  16  0.549694     -0.598394     -0.646600      0.646600       53.9460       54.5926    
  17  0.538267E-01  -2.92199      -3.15738       3.15738       52.8251       55.9825    
  18  0.602193     -0.507178     -0.548036      0.548036       52.6989       53.2469    
  19  0.537276     -0.621243     -0.671290      0.671290       54.4677       55.1390    
  20  0.338220      -1.08406      -1.17139       1.17139       54.3037       55.4751    
  21  0.306772      -1.18165      -1.27684       1.27684       53.3520       54.6288    
  22  0.895389     -0.110497     -0.119399      0.119399       54.5829       54.7023    
  23  0.120096      -2.11946      -2.29020       2.29020       53.3113       55.6015    
  24  0.680166     -0.385418     -0.416467      0.416467       54.5302       54.9467    
  25  0.369434     -0.995782      -1.07600       1.07600       55.1919       56.2679    
  26  0.235484      -1.44611      -1.56261       1.56261       54.3941       55.9567    
  27  0.260836      -1.34386      -1.45212       1.45212       55.3520       56.8041    
  28  0.720259     -0.328144     -0.354579      0.354579       55.2066       55.5612    
  29  0.695069     -0.363744     -0.393047      0.393047       53.3415       53.7346    
  30  0.105076      -2.25307      -2.43458       2.43458       53.5157       55.9502    
  31  0.968349     -0.321628E-01 -0.347538E-01  0.347538E-01   55.3763       55.4111    
  32  0.974131     -0.262091E-01 -0.283205E-01  0.283205E-01   54.2023       54.2306    
  33  0.647785E-01  -2.73678      -2.95725       2.95725       55.6701       58.6274    
  34  0.910402     -0.938690E-01 -0.101431      0.101431       54.3964       54.4979    
  35  0.488733     -0.715939     -0.773614      0.773614       54.1850       54.9587    
  36  0.377436E-01  -3.27694      -3.54093       3.54093       54.4888       58.0298    
  37  0.154608      -1.86686      -2.01726       2.01726       52.9926       55.0099    
  38  0.277804      -1.28084      -1.38402       1.38402       55.4608       56.8448    
  39  0.969547     -0.309263E-01 -0.334177E-01  0.334177E-01   54.9250       54.9584    
  40  0.380083     -0.967367      -1.04530       1.04530       52.4471       53.4924    
  41  0.751822     -0.285256     -0.308236      0.308236       55.8868       56.1950    
  42  0.137692      -1.98274      -2.14247       2.14247       55.2045       57.3469    
  43  0.293470      -1.22598      -1.32475       1.32475       53.9033       55.2281    
  44  0.433705     -0.835390     -0.902688      0.902688       53.7200       54.6227    
  45  0.418034     -0.872194     -0.942457      0.942457       55.2042       56.1466    
  46  0.166728      -1.79139      -1.93571       1.93571       53.8275       55.7632    
  47  0.921960     -0.812537E-01 -0.877995E-01  0.877995E-01   53.6835       53.7713    
  48  0.412601     -0.885275     -0.956592      0.956592       56.4406       57.3972    
  49  0.925181     -0.777655E-01 -0.840303E-01  0.840303E-01   55.9040       55.9880    
  50  0.687711     -0.374386     -0.404547      0.404547       55.6325       56.0371    
  51  0.729890     -0.314862     -0.340227      0.340227       55.3547       55.6950    
  52  0.355028      -1.03556      -1.11898       1.11898       55.6933       56.8122    
loop,thermsimp(1:2)        4  0.454526      0.136946    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275         52.05          1.22          1.03         24.18          0.09          0.05         26.58
Just calling func    0   0         26.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    276         51.69          1.00          1.01         24.11          0.16          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.69
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        4
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        5
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      275     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672     -0.498864      0.498864       50.8055       51.3044    
   2  0.876370     -0.131967     -0.142598      0.142598       52.3116       52.4542    
   3  0.840080     -0.174259     -0.188297      0.188297       52.5065       52.6948    
   4  0.608986E-01  -2.79854      -3.02399       3.02399       52.7564       55.7804    
   5  0.311901      -1.16507      -1.25893       1.25893       52.8045       54.0634    
   6  0.937552E-01  -2.36707      -2.55776       2.55776       52.6465       55.2043    
   7  0.608418     -0.496893     -0.536923      0.536923       52.6144       53.1513    
   8  0.297707      -1.21164      -1.30925       1.30925       53.1638       54.4731    
   9  0.365777      -1.00573      -1.08675       1.08675       52.6989       53.7856    
  10  0.194673      -1.63643      -1.76826       1.76826       53.1301       54.8983    
  11  0.941388     -0.604003E-01 -0.652661E-01  0.652661E-01   52.4471       52.5123    
  12  0.984881     -0.152343E-01 -0.164616E-01  0.164616E-01   53.0280       53.0444    
  13  0.750245     -0.287355     -0.310504      0.310504       53.3415       53.6520    
  14  0.437446     -0.826803     -0.893409      0.893409       53.6835       54.5769    
  15  0.174754      -1.74437      -1.88490       1.88490       54.2023       56.0872    
  16  0.300465E-01  -3.50501      -3.78737       3.78737       53.2960       57.0834    
  17  0.372924     -0.986380      -1.06584       1.06584       53.7626       54.8284    
  18  0.803506     -0.218771     -0.236395      0.236395       53.7092       53.9456    
  19  0.232583      -1.45851      -1.57601       1.57601       54.0860       55.6620    
  20  0.383368     -0.958759      -1.03600       1.03600       54.3964       55.4324    
  21  0.622786     -0.473552     -0.511701      0.511701       53.9460       54.4577    
  22  0.356422      -1.03164      -1.11475       1.11475       53.7200       54.8347    
  23  0.919964     -0.834212E-01 -0.901416E-01  0.901416E-01   53.3520       53.4421    
  24  0.550740     -0.596492     -0.644545      0.644545       54.5829       55.2274    
  25  0.402627     -0.909745     -0.983033      0.983033       54.5302       55.5132    
  26  0.256265      -1.36154      -1.47123       1.47123       54.9250       56.3962    
  27  0.763510     -0.269828     -0.291566      0.291566       54.1850       54.4766    
  28  0.388963     -0.944271      -1.02034       1.02034       52.9926       54.0130    
  29  0.981923     -0.182423E-01 -0.197119E-01  0.197119E-01   54.4677       54.4875    
  30  0.656629     -0.420635     -0.454521      0.454521       53.9033       54.3578    
  31  0.932472     -0.699161E-01 -0.755485E-01  0.755485E-01   53.3087       53.3842    
  32  0.336775      -1.08834      -1.17602       1.17602       55.3763       56.5524    
  33  0.810758     -0.209786     -0.226686      0.226686       54.3037       54.5304    
  34  0.557014     -0.585166     -0.632306      0.632306       55.2066       55.8389    
  35  0.652747     -0.426565     -0.460929      0.460929       53.3113       53.7722    
  36  0.890774     -0.115665     -0.124983      0.124983       55.3547       55.4797    
  37  0.703035     -0.352349     -0.380734      0.380734       53.8275       54.2083    
  38  0.534296     -0.626805     -0.677299      0.677299       53.5157       54.1930    
  39  0.604162     -0.503914     -0.544508      0.544508       54.3941       54.9386    
  40  0.545557     -0.605948     -0.654762      0.654762       52.8251       53.4799    
  41  0.371346     -0.990620      -1.07042       1.07042       55.9040       56.9744    
  42  0.491801     -0.709680     -0.766852      0.766852       55.6325       56.3994    
  43  0.879731     -0.128139     -0.138462      0.138462       55.2042       55.3426    
  44  0.995113     -0.489866E-02 -0.529329E-02  0.529329E-02   55.8868       55.8921    
  45  0.467927     -0.759444     -0.820624      0.820624       55.1919       56.0125    
  46  0.355083      -1.03540      -1.11881       1.11881       55.3520       56.4708    
  47  0.216960      -1.52804      -1.65114       1.65114       55.6933       57.3444    
  48  0.276988      -1.28378      -1.38720       1.38720       55.4608       56.8480    
  49  0.905458     -0.993144E-01 -0.107315      0.107315       55.2045       55.3118    
  50  0.704241     -0.350635     -0.378882      0.378882       56.4406       56.8195    
  51  0.784564     -0.242627     -0.262173      0.262173       54.4888       54.7510    
  52  0.329376      -1.11055      -1.20002       1.20002       51.6934       52.8934    
loop,thermsimp(1:2)        5  0.498864      0.142598    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277         52.12          1.03          0.99         23.71          0.57          0.06         26.36
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    278         54.27          0.98          1.00         24.08          0.34          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        5
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        6
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      277     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259      -1.65605       1.65605       50.8055       52.4616    
   2  0.942431     -0.592928E-01 -0.640694E-01  0.640694E-01   52.3116       52.3757    
   3  0.193824      -1.64081      -1.77299       1.77299       52.4471       54.2201    
   4  0.162512      -1.81700      -1.96338       1.96338       52.5065       54.4699    
   5  0.625243     -0.469616     -0.507447      0.507447       51.6934       52.2008    
   6  0.499178     -0.694793     -0.750765      0.750765       53.0280       53.7788    
   7  0.706095     -0.348006     -0.376041      0.376041       52.6144       52.9904    
   8  0.527414     -0.639770     -0.691309      0.691309       53.3087       54.0000    
   9  0.575748     -0.552085     -0.596560      0.596560       53.3520       53.9486    
  10  0.490522     -0.712286     -0.769667      0.769667       52.8251       53.5948    
  11  0.306517      -1.18248      -1.27774       1.27774       53.3415       54.6193    
  12  0.798470     -0.225057     -0.243188      0.243188       53.3113       53.5544    
  13  0.333550      -1.09796      -1.18641       1.18641       52.6989       53.8853    
  14  0.166731      -1.79138      -1.93569       1.93569       53.7092       55.6449    
  15  0.443580     -0.812878     -0.878363      0.878363       52.9926       53.8710    
  16  0.669985     -0.400500     -0.432764      0.432764       52.8045       53.2373    
  17  0.339921      -1.07904      -1.16597       1.16597       53.5157       54.6816    
  18  0.201260      -1.60316      -1.73231       1.73231       53.8275       55.5598    
  19  0.772250     -0.258447     -0.279267      0.279267       53.9033       54.1826    
  20  0.401372E-01  -3.21545      -3.47449       3.47449       53.9460       57.4205    
  21  0.940962     -0.608526E-01 -0.657549E-01  0.657549E-01   53.1638       53.2296    
  22  0.115324      -2.16001      -2.33402       2.33402       54.1850       56.5191    
  23  0.939991E-01  -2.36447      -2.55495       2.55495       54.4677       57.0227    
  24  0.412221     -0.886196     -0.957587      0.957587       54.3037       55.2613    
  25  0.136462      -1.99171      -2.15216       2.15216       53.6835       55.8356    
  26  0.310095      -1.17088      -1.26520       1.26520       54.4888       55.7540    
  27  0.985727     -0.143755E-01 -0.155336E-01  0.155336E-01   53.7626       53.7781    
  28  0.900161     -0.105182     -0.113655      0.113655       53.7200       53.8336    
  29  0.250220      -1.38542      -1.49702       1.49702       53.1301       54.6271    
  30  0.780405     -0.247942     -0.267916      0.267916       54.3941       54.6620    
  31  0.228719      -1.47526      -1.59410       1.59410       52.6465       54.2406    
  32  0.407088     -0.898727     -0.971128      0.971128       54.5829       55.5540    
  33  0.975627     -0.246749E-01 -0.266627E-01  0.266627E-01   55.2045       55.2311    
  34  0.885140     -0.122009     -0.131838      0.131838       55.2042       55.3360    
  35  0.896135     -0.109664     -0.118499      0.118499       54.3964       54.5149    
  36  0.856661     -0.154713     -0.167177      0.167177       55.3547       55.5219    
  37  0.258643      -1.35231      -1.46125       1.46125       54.5302       55.9915    
  38  0.336283      -1.08980      -1.17759       1.17759       54.0860       55.2636    
  39  0.868205     -0.141327     -0.152712      0.152712       52.7564       52.9091    
  40  0.937935     -0.640747E-01 -0.692365E-01  0.692365E-01   55.2066       55.2759    
  41  0.418906     -0.870109     -0.940205      0.940205       55.8868       56.8270    
  42  0.351040      -1.04685      -1.13119       1.13119       55.1919       56.3231    
  43  0.611628E-01  -2.79422      -3.01932       3.01932       54.2023       57.2216    
  44  0.153518      -1.87394      -2.02490       2.02490       54.9250       56.9499    
  45  0.938341     -0.636423E-01 -0.687693E-01  0.687693E-01   55.6325       55.7013    
  46  0.598133     -0.513942     -0.555345      0.555345       55.3520       55.9073    
  47  0.795771     -0.228444     -0.246848      0.246848       55.3763       55.6232    
  48  0.295375      -1.21951      -1.31775       1.31775       56.4406       57.7584    
  49  0.804738     -0.217239     -0.234740      0.234740       55.4608       55.6955    
  50  0.260094      -1.34671      -1.45520       1.45520       55.9040       57.3592    
  51  0.640517     -0.445479     -0.481366      0.481366       53.2960       53.7774    
  52  0.221872      -1.50566      -1.62695       1.62695       52.1205       53.7475    
loop,thermsimp(1:2)        6   1.65605      0.640694E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279         51.40          1.04          0.99         23.76          0.61          0.07         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    280         52.67          0.99          1.00         24.23          0.12          0.05         26.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.40
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        6
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        7
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      279     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099      -1.43822       1.43822       51.6934       53.1316    
   2  0.401807     -0.911784     -0.985236      0.985236       52.3116       53.2968    
   3  0.418885     -0.870159     -0.940258      0.940258       50.8055       51.7458    
   4  0.753378     -0.283189     -0.306002      0.306002       52.7564       53.0624    
   5  0.792066     -0.233111     -0.251890      0.251890       52.6144       52.8663    
   6  0.868474     -0.141017     -0.152377      0.152377       53.1638       53.3162    
   7  0.318670      -1.14360      -1.23573       1.23573       52.8045       54.0402    
   8  0.863267     -0.147031     -0.158876      0.158876       53.3113       53.4701    
   9  0.589255     -0.528896     -0.571504      0.571504       52.8251       53.3966    
  10  0.632079E-01  -2.76133      -2.98378       2.98378       52.1205       55.1043    
  11  0.992270     -0.775975E-02 -0.838487E-02  0.838487E-02   53.2960       53.3044    
  12  0.466140     -0.763269     -0.824757      0.824757       53.7626       54.5873    
  13  0.177509      -1.72873      -1.86800       1.86800       53.0280       54.8960    
  14  0.933326     -0.690005E-01 -0.745592E-01  0.745592E-01   53.7200       53.7945    
  15  0.876357     -0.131982     -0.142614      0.142614       52.9926       53.1353    
  16  0.673496     -0.395274     -0.427117      0.427117       52.6989       53.1260    
  17  0.648708     -0.432773     -0.467637      0.467637       53.3520       53.8196    
  18  0.400813     -0.914259     -0.987911      0.987911       53.3087       54.2966    
  19  0.763164     -0.270282     -0.292056      0.292056       53.9033       54.1954    
  20  0.196240      -1.62842      -1.75960       1.75960       52.4471       54.2067    
  21  0.923666     -0.794046E-01 -0.858014E-01  0.858014E-01   52.6465       52.7323    
  22  0.999600     -0.400298E-03 -0.432545E-03  0.432545E-03   52.5065       52.5069    
  23  0.379715     -0.968335      -1.04634       1.04634       54.3964       55.4428    
  24  0.197375      -1.62265      -1.75337       1.75337       53.3415       55.0949    
  25  0.760736     -0.273468     -0.295499      0.295499       53.1301       53.4256    
  26  0.392182     -0.936030      -1.01144       1.01144       54.3941       55.4055    
  27  0.256208      -1.36177      -1.47147       1.47147       53.5157       54.9871    
  28  0.251796      -1.37914      -1.49024       1.49024       55.2045       56.6947    
  29  0.332089E-01  -3.40494      -3.67924       3.67924       54.3037       57.9829    
  30  0.970457     -0.299883E-01 -0.324041E-01  0.324041E-01   54.0860       54.1184    
  31  0.467370E-01  -3.06322      -3.30999       3.30999       55.2066       58.5166    
  32  0.716125     -0.333901     -0.360799      0.360799       55.2042       55.5650    
  33  0.757897     -0.277208     -0.299539      0.299539       55.3547       55.6543    
  34  0.765628     -0.267059     -0.288573      0.288573       54.5829       54.8715    
  35  0.323816      -1.12758      -1.21842       1.21842       53.8275       55.0459    
  36  0.909845     -0.944807E-01 -0.102092      0.102092       55.3763       55.4784    
  37  0.515782     -0.662071     -0.715407      0.715407       53.7092       54.4246    
  38  0.464370     -0.767074     -0.828868      0.828868       55.4608       56.2897    
  39  0.445707     -0.808094     -0.873194      0.873194       55.6325       56.5057    
  40  0.786320     -0.240391     -0.259757      0.259757       54.4888       54.7486    
  41  0.631860     -0.459087     -0.496070      0.496070       53.6835       54.1796    
  42  0.672488     -0.396772     -0.428735      0.428735       55.3520       55.7807    
  43  0.251717E-02  -5.98462      -6.46674       6.46674       54.5302       60.9969    
  44  0.245023      -1.40640      -1.51970       1.51970       55.1919       56.7116    
  45  0.252688      -1.37560      -1.48642       1.48642       54.1850       55.6715    
  46  0.268946      -1.31324      -1.41904       1.41904       55.8868       57.3058    
  47  0.550357     -0.597189     -0.645298      0.645298       54.9250       55.5703    
  48  0.826205     -0.190912     -0.206292      0.206292       54.4677       54.6740    
  49  0.964276     -0.363780E-01 -0.393086E-01  0.393086E-01   54.2023       54.2416    
  50  0.415479     -0.878324     -0.949081      0.949081       55.9040       56.8531    
  51  0.599143E-01  -2.81484      -3.04160       3.04160       53.9460       56.9876    
  52  0.348555      -1.05396      -1.13886       1.13886       51.4040       52.5428    
loop,thermsimp(1:2)        7   1.43822      0.985236    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281         52.48          1.15          1.00         23.86          0.40          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    52.479        1.545     -1.360      5.320     -100.0      1.234    
                     -0.6240      2.438     -100.0      2.708      1.553    
                       1.582    -0.8390      1.841      0.000      0.000    
                      -1.405      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.503     -3.547     -5.486     -1.259    
                      -13.80     -2.818      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5349E-01-0.4661E-02  0.000    -0.6606    
                     -0.1797    -0.2846    -0.1551    -0.2255    -0.6662E-01

                      -1.180    -0.6177      0.000    -0.2856E-01-0.2819E-01
                      0.8541E-01-0.3286E-01-0.6887E-01-0.2964    -0.1808    
                      0.3489E-01-0.1927E-01-0.3129    -0.8885      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.240      9.134     -7039.     -4.000    
                     -0.6744    -0.9490E-01  9.085      8.540     -4904.    

                      -4.000    -0.9240E-01-0.5314      8.796      9.040    
                      -6912.     -4.000    -0.3471    -0.5390      9.641    
                       8.614     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        7
neval is:      280
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        8
neval is:      280


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      280     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608      -2.42702       2.42702       50.8055       53.2326    
   2  0.476819     -0.740619     -0.800283      0.800283       52.5065       53.3068    
   3  0.564430     -0.571938     -0.618013      0.618013       51.4040       52.0220    
   4  0.211741      -1.55239      -1.67745       1.67745       52.6465       54.3240    
   5  0.154226E-01  -4.17192      -4.50800       4.50800       52.6144       57.1224    
   6  0.489577     -0.714213     -0.771749      0.771749       52.7564       53.5281    
   7  0.583965     -0.537914     -0.581248      0.581248       52.6989       53.2801    
   8  0.430258     -0.843370     -0.911311      0.911311       51.6934       52.6047    
   9  0.280982      -1.26946      -1.37173       1.37173       52.9926       54.3644    
  10  0.535183     -0.625146     -0.675508      0.675508       52.3116       52.9871    
  11  0.306750      -1.18172      -1.27692       1.27692       53.2960       54.5729    
  12  0.924930     -0.780370E-01 -0.843236E-01  0.843236E-01   53.1638       53.2481    
  13  0.829670E-01  -2.48931      -2.68985       2.68985       52.8251       55.5150    
  14  0.330275      -1.10783      -1.19708       1.19708       53.1301       54.3272    
  15  0.229751      -1.47076      -1.58924       1.58924       53.3113       54.9005    
  16  0.455737     -0.785839     -0.849145      0.849145       53.7200       54.5691    
  17  0.830949     -0.185187     -0.200106      0.200106       53.3520       53.5521    
  18  0.148624      -1.90634      -2.05991       2.05991       52.8045       54.8644    
  19  0.883001     -0.124429     -0.134453      0.134453       54.0860       54.2204    
  20  0.668001     -0.403466     -0.435968      0.435968       53.6835       54.1195    
  21  0.610583     -0.493341     -0.533085      0.533085       53.9033       54.4364    
  22  0.689050     -0.372441     -0.402445      0.402445       52.4471       52.8495    
  23  0.124417      -2.08412      -2.25201       2.25201       54.2023       56.4543    
  24  0.785584E-01  -2.54391      -2.74885       2.74885       53.3087       56.0575    
  25  0.936565     -0.655366E-01 -0.708161E-01  0.708161E-01   53.7092       53.7800    
  26  0.483719     -0.726252     -0.784758      0.784758       53.7626       54.5473    
  27  0.715685     -0.334515     -0.361464      0.361464       54.4677       54.8292    
  28  0.786437     -0.240243     -0.259597      0.259597       54.4888       54.7484    
  29  0.361023      -1.01881      -1.10089       1.10089       54.5829       55.6838    
  30  0.325559      -1.12221      -1.21261       1.21261       53.0280       54.2406    
  31  0.850460     -0.161978     -0.175027      0.175027       53.5157       53.6907    
  32  0.301358      -1.19946      -1.29608       1.29608       53.8275       55.1236    
  33  0.304725      -1.18834      -1.28408       1.28408       53.3415       54.6256    
  34  0.887065     -0.119838     -0.129492      0.129492       52.1205       52.2500    
  35  0.762822     -0.270730     -0.292540      0.292540       54.3941       54.6866    
  36  0.364130      -1.01024      -1.09163       1.09163       54.3964       55.4881    
  37  0.762041     -0.271754     -0.293647      0.293647       55.3763       55.6700    
  38  0.941180     -0.606207E-01 -0.655042E-01  0.655042E-01   55.2042       55.2697    
  39  0.449403     -0.799835     -0.864269      0.864269       54.9250       55.7893    
  40  0.743855     -0.295910     -0.319748      0.319748       55.3547       55.6745    
  41  0.743104     -0.296920     -0.320839      0.320839       54.1850       54.5059    
  42  0.350527      -1.04832      -1.13277       1.13277       55.3520       56.4847    
  43  0.607240     -0.498831     -0.539016      0.539016       55.4608       55.9998    
  44  0.557347     -0.584567     -0.631659      0.631659       55.6325       56.2642    
  45  0.217970      -1.52340      -1.64612       1.64612       55.2045       56.8506    
  46  0.364570      -1.00904      -1.09032       1.09032       55.1919       56.2822    
  47  0.330900      -1.10594      -1.19503       1.19503       55.9040       57.0990    
  48  0.861127     -0.149514     -0.161558      0.161558       53.9460       54.1076    
  49  0.710764E-01  -2.64400      -2.85700       2.85700       55.8868       58.7438    
  50  0.264543      -1.32975      -1.43688       1.43688       54.3037       55.7406    
  51  0.985836     -0.142654E-01 -0.154146E-01  0.154146E-01   55.2066       55.2220    
  52  0.296563      -1.21550      -1.31342       1.31342       52.4794       53.7929    
loop,thermsimp(1:2)        8   2.42702      0.800283    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    282         51.35          1.02          0.98         23.63          0.68          0.05         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    283         51.88          0.97          1.00         24.11          0.20          0.05         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        8
neval is:      282
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:        9
neval is:      282


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      282     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068     -0.479842      0.479842       51.4040       51.8838    
   2  0.805197     -0.216668     -0.234122      0.234122       52.1205       52.3547    
   3  0.976428     -0.238543E-01 -0.257760E-01  0.257760E-01   51.6934       51.7192    
   4  0.599028     -0.512447     -0.553729      0.553729       52.4471       53.0008    
   5  0.591081     -0.525802     -0.568160      0.568160       52.3116       52.8797    
   6  0.151500      -1.88717      -2.03919       2.03919       50.8055       52.8447    
   7  0.565682     -0.569723     -0.615619      0.615619       53.1638       53.7794    
   8  0.345258      -1.06346      -1.14914       1.14914       52.6989       53.8480    
   9  0.658101     -0.418397     -0.452103      0.452103       52.5065       52.9586    
  10  0.691977E-01  -2.67079      -2.88594       2.88594       52.7564       55.6423    
  11  0.289062      -1.24111      -1.34110       1.34110       53.3520       54.6931    
  12  0.949819     -0.514835E-01 -0.556310E-01  0.556310E-01   53.5157       53.5713    
  13  0.791632     -0.233658     -0.252481      0.252481       53.7092       53.9617    
  14  0.400532     -0.914962     -0.988670      0.988670       52.4794       53.4681    
  15  0.241886      -1.41929      -1.53363       1.53363       53.9460       55.4796    
  16  0.383016     -0.959678      -1.03699       1.03699       53.6835       54.7205    
  17  0.993978     -0.604041E-02 -0.652702E-02  0.652702E-02   54.0860       54.0925    
  18  0.807089     -0.214322     -0.231587      0.231587       53.0280       53.2596    
  19  0.732161     -0.311755     -0.336869      0.336869       52.6465       52.9834    
  20  0.176507      -1.73440      -1.87412       1.87412       53.1301       55.0042    
  21  0.628098     -0.465059     -0.502524      0.502524       52.9926       53.4952    
  22  0.383392     -0.958697      -1.03593       1.03593       53.9033       54.9392    
  23  0.906421     -0.982517E-01 -0.106167      0.106167       54.1850       54.2912    
  24  0.329288      -1.11082      -1.20031       1.20031       53.7626       54.9629    
  25  0.869436     -0.139911     -0.151182      0.151182       53.7200       53.8712    
  26  0.354994      -1.03565      -1.11908       1.11908       53.2960       54.4151    
  27  0.127935      -2.05623      -2.22188       2.22188       53.3415       55.5634    
  28  0.840123     -0.174207     -0.188241      0.188241       54.3941       54.5823    
  29  0.625861     -0.468627     -0.506379      0.506379       54.4888       54.9952    
  30  0.488384     -0.716653     -0.774385      0.774385       54.4677       55.2421    
  31  0.888226E-01  -2.42111      -2.61616       2.61616       52.8045       55.4207    
  32  0.262955      -1.33577      -1.44338       1.44338       53.3113       54.7546    
  33  0.153205E-01  -4.17856      -4.51519       4.51519       53.8275       58.3427    
  34  0.432355     -0.838509     -0.906059      0.906059       55.2066       56.1127    
  35  0.225273      -1.49044      -1.61051       1.61051       55.2042       56.8147    
  36  0.812147     -0.208074     -0.224837      0.224837       54.3964       54.6213    
  37  0.832805E-01  -2.48554      -2.68577       2.68577       52.8251       55.5109    
  38  0.442280     -0.815813     -0.881534      0.881534       55.3763       56.2579    
  39  0.106639      -2.23831      -2.41863       2.41863       55.3547       57.7734    
  40  0.143053      -1.94454      -2.10119       2.10119       54.5829       56.6841    
  41  0.871774     -0.137225     -0.148280      0.148280       54.3037       54.4520    
  42  0.137692      -1.98273      -2.14246       2.14246       54.9250       57.0675    
  43  0.366512      -1.00372      -1.08458       1.08458       55.4608       56.5454    
  44  0.617157     -0.482633     -0.521513      0.521513       53.3087       53.8302    
  45  0.420337     -0.866700     -0.936520      0.936520       55.6325       56.5690    
  46  0.935846     -0.663044E-01 -0.716458E-01  0.716458E-01   55.1919       55.2636    
  47  0.979912     -0.202925E-01 -0.219272E-01  0.219272E-01   54.2023       54.2243    
  48  0.692793     -0.367024     -0.396592      0.396592       55.3520       55.7486    
  49  0.155424      -1.86160      -2.01157       2.01157       55.2045       57.2160    
  50  0.703218     -0.352088     -0.380452      0.380452       55.9040       56.2844    
  51  0.396734     -0.924489     -0.998966      0.998966       52.6144       53.6133    
  52  0.247863      -1.39488      -1.50725       1.50725       51.3462       52.8535    
loop,thermsimp(1:2)        9  0.479842      0.234122    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    284         52.37          1.14          0.99         23.58          0.65          0.05         26.41
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:        9
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       10
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      283     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525     -0.197230      0.197230       51.6934       51.8906    
   2  0.367543      -1.00091      -1.08155       1.08155       51.4040       52.4855    
   3  0.528755     -0.637231     -0.688566      0.688566       52.1205       52.8091    
   4  0.776829     -0.252535     -0.272879      0.272879       50.8055       51.0784    
   5  0.149594E-01  -4.20242      -4.54096       4.54096       51.3462       55.8872    
   6  0.892228     -0.114033     -0.123219      0.123219       52.3116       52.4348    
   7  0.191037      -1.65529      -1.78863       1.78863       52.5065       54.2951    
   8  0.516533     -0.660616     -0.713834      0.713834       52.6465       53.3603    
   9  0.273230      -1.29744      -1.40196       1.40196       52.4471       53.8490    
  10  0.822225     -0.195741     -0.211510      0.211510       53.0280       53.2395    
  11  0.359850      -1.02207      -1.10440       1.10440       52.4794       53.5838    
  12  0.611658     -0.491581     -0.531183      0.531183       52.9926       53.5238    
  13  0.249481      -1.38837      -1.50022       1.50022       53.5157       55.0159    
  14  0.441252     -0.818139     -0.884047      0.884047       52.6144       53.4984    
  15  0.910514E-01  -2.39633      -2.58938       2.58938       53.1638       55.7532    
  16  0.745146     -0.294175     -0.317874      0.317874       53.3087       53.6265    
  17  0.758301     -0.276675     -0.298964      0.298964       52.6989       52.9979    
  18  0.638521     -0.448601     -0.484740      0.484740       53.7200       54.2047    
  19  0.150180      -1.89592      -2.04865       2.04865       53.7092       55.7578    
  20  0.144147      -1.93692      -2.09296       2.09296       54.0860       56.1789    
  21  0.104928      -2.25448      -2.43610       2.43610       54.2023       56.6384    
  22  0.398120     -0.921002     -0.995198      0.995198       54.1850       55.1802    
  23  0.802258     -0.220325     -0.238074      0.238074       53.2960       53.5341    
  24  0.399299     -0.918044     -0.992000      0.992000       54.3037       55.2957    
  25  0.493060     -0.707124     -0.764089      0.764089       54.3941       55.1582    
  26  0.504407     -0.684372     -0.739504      0.739504       54.3964       55.1359    
  27  0.762058     -0.271733     -0.293623      0.293623       53.3520       53.6456    
  28  0.430267     -0.843350     -0.911290      0.911290       53.6835       54.5948    
  29  0.993832     -0.618725E-02 -0.668569E-02  0.668569E-02   53.3113       53.3179    
  30  0.705390     -0.349005     -0.377121      0.377121       53.9033       54.2804    
  31  0.969760     -0.307069E-01 -0.331806E-01  0.331806E-01   53.7626       53.7957    
  32  0.245618      -1.40398      -1.51708       1.51708       54.4888       56.0059    
  33  0.685790     -0.377184     -0.407570      0.407570       53.1301       53.5377    
  34  0.905089     -0.997222E-01 -0.107756      0.107756       54.4677       54.5755    
  35  0.414065     -0.881732     -0.952763      0.952763       55.1919       56.1447    
  36  0.714747E-01  -2.63841      -2.85096       2.85096       52.8045       55.6555    
  37  0.694510     -0.364548     -0.393916      0.393916       53.9460       54.3399    
  38  0.770213E-01  -2.56367      -2.77020       2.77020       52.8251       55.5953    
  39  0.846173     -0.167031     -0.180487      0.180487       53.3415       53.5220    
  40  0.485012     -0.723582     -0.781873      0.781873       52.7564       53.5383    
  41  0.345787      -1.06193      -1.14748       1.14748       55.3520       56.4994    
  42  0.851861     -0.160332     -0.173248      0.173248       55.2066       55.3799    
  43  0.774151     -0.255989     -0.276611      0.276611       55.3763       55.6530    
  44  0.512382     -0.668685     -0.722553      0.722553       55.9040       56.6265    
  45  0.839798     -0.174594     -0.188660      0.188660       55.4608       55.6495    
  46  0.430550     -0.842692     -0.910578      0.910578       55.6325       56.5431    
  47  0.988263     -0.118067E-01 -0.127578E-01  0.127578E-01   54.5829       54.5956    
  48  0.349495      -1.05127      -1.13595       1.13595       55.2042       56.3401    
  49  0.290701      -1.23546      -1.33499       1.33499       54.9250       56.2600    
  50  0.210466      -1.55843      -1.68398       1.68398       55.2045       56.8885    
  51  0.361038      -1.01877      -1.10084       1.10084       55.3547       56.4556    
  52  0.168890      -1.77851      -1.92178       1.92178       52.3736       54.2954    
loop,thermsimp(1:2)       10  0.197230       1.08155    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285         52.24          1.03          0.98         23.62          0.75          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.24
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       10
neval is:      284
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       11
neval is:      284


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      284     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01 -0.908075E-01  0.908075E-01   50.8055       50.8963    
   2  0.309089      -1.17413      -1.26871       1.26871       51.6934       52.9621    
   3  0.237901      -1.43590      -1.55157       1.55157       52.3116       53.8632    
   4  0.542467     -0.611627     -0.660899      0.660899       51.4040       52.0649    
   5  0.523672     -0.646889     -0.699002      0.699002       52.1205       52.8195    
   6  0.850058     -0.162450     -0.175537      0.175537       52.6989       52.8744    
   7  0.589343     -0.528746     -0.571342      0.571342       53.0280       53.5993    
   8  0.979269     -0.209490E-01 -0.226366E-01  0.226366E-01   53.3113       53.3339    
   9  0.110419      -2.20347      -2.38098       2.38098       52.6465       55.0275    
  10  0.557914     -0.583550     -0.630560      0.630560       52.6144       53.2449    
  11  0.474464     -0.745569     -0.805631      0.805631       53.3415       54.1471    
  12  0.312482      -1.16321      -1.25691       1.25691       52.9926       54.2496    
  13  0.297011      -1.21399      -1.31178       1.31178       53.2960       54.6078    
  14  0.857571     -0.153651     -0.166029      0.166029       53.1301       53.2961    
  15  0.792567     -0.232479     -0.251207      0.251207       52.7564       53.0076    
  16  0.963006     -0.376958E-01 -0.407326E-01  0.407326E-01   52.4794       52.5202    
  17  0.294103      -1.22382      -1.32241       1.32241       53.3087       54.6311    
  18  0.403484     -0.907618     -0.980735      0.980735       53.3520       54.3327    
  19  0.449313     -0.800035     -0.864485      0.864485       53.7626       54.6271    
  20  0.721912     -0.325852     -0.352102      0.352102       52.4471       52.7992    
  21  0.512488     -0.668479     -0.722331      0.722331       53.7200       54.4423    
  22  0.885190     -0.121953     -0.131777      0.131777       53.9033       54.0351    
  23  0.694751E-01  -2.66679      -2.88162       2.88162       52.5065       55.3881    
  24  0.820879     -0.197380     -0.213281      0.213281       52.3736       52.5869    
  25  0.211527      -1.55340      -1.67855       1.67855       53.9460       55.6246    
  26  0.937420     -0.646236E-01 -0.698296E-01  0.698296E-01   54.4677       54.5376    
  27  0.515756E-01  -2.96471      -3.20354       3.20354       53.6835       56.8870    
  28  0.695222     -0.363525     -0.392810      0.392810       54.5829       54.9757    
  29  0.718776     -0.330205     -0.356806      0.356806       53.5157       53.8725    
  30  0.536080     -0.623471     -0.673697      0.673697       54.3964       55.0701    
  31  0.585855     -0.534682     -0.577756      0.577756       54.3941       54.9718    
  32  0.693572     -0.365900     -0.395377      0.395377       54.1850       54.5804    
  33  0.700823     -0.355500     -0.384138      0.384138       54.3037       54.6878    
  34  0.250985      -1.38236      -1.49372       1.49372       55.2066       56.7003    
  35  0.290600      -1.23581      -1.33536       1.33536       52.8251       54.1605    
  36  0.828609     -0.188007     -0.203153      0.203153       55.4608       55.6640    
  37  0.225820      -1.48802      -1.60789       1.60789       55.3763       56.9842    
  38  0.999674     -0.326354E-03 -0.352645E-03  0.352645E-03   52.8045       52.8049    
  39  0.878216     -0.129862     -0.140324      0.140324       53.1638       53.3041    
  40  0.685898E-01  -2.67961      -2.89548       2.89548       53.7092       56.6047    
  41  0.273860      -1.29514      -1.39947       1.39947       51.3462       52.7457    
  42  0.697655     -0.360030     -0.389034      0.389034       54.4888       54.8779    
  43  0.293168      -1.22701      -1.32585       1.32585       55.1919       56.5178    
  44  0.319476      -1.14107      -1.23300       1.23300       54.0860       55.3190    
  45  0.874681     -0.133896     -0.144683      0.144683       54.9250       55.0697    
  46  0.408697     -0.894781     -0.966863      0.966863       55.2042       56.1710    
  47  0.142130E-01  -4.25360      -4.59626       4.59626       55.3547       59.9510    
  48  0.164528      -1.80468      -1.95006       1.95006       55.3520       57.3020    
  49  0.652669     -0.426685     -0.461058      0.461058       55.6325       56.0936    
  50  0.492107     -0.709060     -0.766181      0.766181       55.9040       56.6702    
  51  0.542705     -0.611189     -0.660426      0.660426       54.2023       54.8628    
  52  0.798603     -0.224891     -0.243008      0.243008       52.2353       52.4783    
loop,thermsimp(1:2)       11  0.908075E-01   1.26871    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    286       1257.30          1.04          0.99         23.78          0.58          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    287         58.93          1.06          1.00         24.09          0.20          0.06         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     58.93
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       11
neval is:      286
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       12
neval is:      286


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      286     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671     -0.292476      0.292476       50.8055       51.0980    
   2  0.482922E-01  -3.03048      -3.27462       3.27462       51.4040       54.6786    
   3  0.612960     -0.489456     -0.528886      0.528886       52.2353       52.7642    
   4  0.910127     -0.941714E-01 -0.101758      0.101758       52.4794       52.5812    
   5  0.362433      -1.01492      -1.09668       1.09668       52.3736       53.4703    
   6  0.476779     -0.740702     -0.800373      0.800373       51.3462       52.1466    
   7  0.179006E-01  -4.02292      -4.34700       4.34700       52.4471       56.7941    
   8  0.589646     -0.528233     -0.570786      0.570786       52.8045       53.3753    
   9  0.926206     -0.766581E-01 -0.828336E-01  0.828336E-01   52.1205       52.2034    
  10  0.492629     -0.707999     -0.765035      0.765035       52.6989       53.4639    
  11  0.661123     -0.413815     -0.447151      0.447151       51.6934       52.1405    
  12  0.542248     -0.612032     -0.661336      0.661336       52.7564       53.4177    
  13  0.216527      -1.53004      -1.65330       1.65330       52.6144       54.2677    
  14  0.549832     -0.598143     -0.646329      0.646329       53.1301       53.7764    
  15  0.429556     -0.845003     -0.913076      0.913076       53.1638       54.0769    
  16  0.264838      -1.32864      -1.43567       1.43567       53.3113       54.7469    
  17  0.251706      -1.37949      -1.49063       1.49063       53.0280       54.5186    
  18  0.701724     -0.354215     -0.382750      0.382750       52.3116       52.6943    
  19  0.324289      -1.12612      -1.21684       1.21684       53.5157       54.7325    
  20  0.160749E-02  -6.43308      -6.95133       6.95133       53.9033       60.8546    
  21  0.533627     -0.628058     -0.678654      0.678654       53.3415       54.0202    
  22  0.883065     -0.124357     -0.134375      0.134375       52.8251       52.9595    
  23  0.484824     -0.723969     -0.782291      0.782291       52.9926       53.7749    
  24  0.724157     -0.322747     -0.348747      0.348747       53.3520       53.7007    
  25  0.847375     -0.165612     -0.178954      0.178954       53.7200       53.8989    
  26  0.167586      -1.78626      -1.93016       1.93016       54.4677       56.3979    
  27  0.890079     -0.116445     -0.125825      0.125825       54.1850       54.3109    
  28  0.235223      -1.44722      -1.56381       1.56381       53.2960       54.8598    
  29  0.206112      -1.57934      -1.70657       1.70657       53.7626       55.4691    
  30  0.463385     -0.769198     -0.831164      0.831164       53.3087       54.1398    
  31  0.487880E-01  -3.02027      -3.26358       3.26358       54.3037       57.5673    
  32  0.244157      -1.40994      -1.52353       1.52353       54.2023       55.7259    
  33  0.770602     -0.260583     -0.281575      0.281575       54.4888       54.7704    
  34  0.264159      -1.33120      -1.43844       1.43844       54.3941       55.8325    
  35  0.189030E-01  -3.96843      -4.28813       4.28813       54.5829       58.8710    
  36  0.635342     -0.453592     -0.490133      0.490133       52.6465       53.1366    
  37  0.139550      -1.96933      -2.12798       2.12798       54.9250       57.0530    
  38  0.561566     -0.577026     -0.623510      0.623510       54.3964       55.0199    
  39  0.951789     -0.494118E-01 -0.533924E-01  0.533924E-01   54.0860       54.1394    
  40  0.527693     -0.639242     -0.690738      0.690738       52.5065       53.1972    
  41  0.925337     -0.775972E-01 -0.838484E-01  0.838484E-01   53.9460       54.0299    
  42  0.795352     -0.228971     -0.247417      0.247417       55.4608       55.7082    
  43  0.530799     -0.633371     -0.684395      0.684395       55.6325       56.3169    
  44  0.642763     -0.441979     -0.477584      0.477584       55.2042       55.6817    
  45  0.485146     -0.723305     -0.781574      0.781574       55.1919       55.9735    
  46  0.795896     -0.228287     -0.246678      0.246678       53.7092       53.9559    
  47  0.519140     -0.655581     -0.708394      0.708394       55.9040       56.6124    
  48  0.694073E-01  -2.66776      -2.88268       2.88268       55.2066       58.0893    
  49  0.401486     -0.912583     -0.986100      0.986100       53.6835       54.6696    
  50  0.587982E-01  -2.83364      -3.06192       3.06192       55.3763       58.4383    
  51  0.752652     -0.284152     -0.307043      0.307043       55.3520       55.6590    
  52  0.139929      -1.96662      -2.12505       2.12505       58.9342       61.0592    
loop,thermsimp(1:2)       12  0.292476       3.27462    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    288         53.90          1.23          1.01         23.96          0.31          0.06         26.57
Just calling func    0   0         26.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    289         56.90          0.98          0.99         24.23          0.16          0.06         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     53.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       12
neval is:      288
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       13
neval is:      288


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      288     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884     -0.565007      0.565007       50.8055       51.3705    
   2  0.691791     -0.368472     -0.398155      0.398155       51.6934       52.0915    
   3  0.688173     -0.373715     -0.403821      0.403821       51.3462       51.7500    
   4  0.439966     -0.821058     -0.887201      0.887201       52.1205       53.0077    
   5  0.945690     -0.558403E-01 -0.603387E-01  0.603387E-01   52.4794       52.5398    
   6  0.238956      -1.43147      -1.54679       1.54679       52.3116       53.8584    
   7  0.280830E-01  -3.57259      -3.86040       3.86040       52.2353       56.0957    
   8  0.902031E-01  -2.40569      -2.59949       2.59949       52.8251       55.4246    
   9  0.198361      -1.61767      -1.74798       1.74798       52.6465       54.3945    
  10  0.201288      -1.60302      -1.73216       1.73216       52.5065       54.2386    
  11  0.710033     -0.342444     -0.370031      0.370031       52.8045       53.1746    
  12  0.182913      -1.69874      -1.83559       1.83559       52.7564       54.5920    
  13  0.817316     -0.201730     -0.217981      0.217981       52.6989       52.9169    
  14  0.894732     -0.111231     -0.120191      0.120191       52.3736       52.4938    
  15  0.854000     -0.157824     -0.170538      0.170538       53.3520       53.5225    
  16  0.248066      -1.39406      -1.50637       1.50637       52.9926       54.4990    
  17  0.670877     -0.399170     -0.431326      0.431326       53.1301       53.5614    
  18  0.701473     -0.354573     -0.383137      0.383137       53.7200       54.1031    
  19  0.199467      -1.61210      -1.74197       1.74197       53.7092       55.4512    
  20  0.391533     -0.937685      -1.01322       1.01322       53.3415       54.3547    
  21  0.586761     -0.533138     -0.576087      0.576087       53.9460       54.5221    
  22  0.163799      -1.80912      -1.95486       1.95486       53.1638       55.1187    
  23  0.955964     -0.450353E-01 -0.486633E-01  0.486633E-01   54.0860       54.1346    
  24  0.365727      -1.00587      -1.08690       1.08690       53.3087       54.3956    
  25  0.733577     -0.309822     -0.334781      0.334781       52.6144       52.9492    
  26  0.111597      -2.19286      -2.36952       2.36952       54.1850       56.5546    
  27  0.714895     -0.335619     -0.362656      0.362656       53.0280       53.3906    
  28  0.816688     -0.202498     -0.218811      0.218811       53.6835       53.9023    
  29  0.480603     -0.732714     -0.791741      0.791741       51.4040       52.1957    
  30  0.573891     -0.555316     -0.600052      0.600052       53.5157       54.1157    
  31  0.204452      -1.58742      -1.71530       1.71530       53.3113       55.0266    
  32  0.845356E-01  -2.47058      -2.66961       2.66961       54.4888       57.1584    
  33  0.524789E-01  -2.94734      -3.18478       3.18478       53.2960       56.4808    
  34  0.631781     -0.459213     -0.496207      0.496207       54.3964       54.8926    
  35  0.620363     -0.477450     -0.515913      0.515913       53.7626       54.2785    
  36  0.553551     -0.591402     -0.639045      0.639045       55.3520       55.9910    
  37  0.546271     -0.604640     -0.653349      0.653349       55.2042       55.8575    
  38  0.402204     -0.910797     -0.984170      0.984170       55.4608       56.4450    
  39  0.735174     -0.307648     -0.332431      0.332431       54.2023       54.5348    
  40  0.359565      -1.02286      -1.10526       1.10526       54.3941       55.4993    
  41  0.564111     -0.572504     -0.618625      0.618625       55.1919       55.8106    
  42  0.412661     -0.885128     -0.956433      0.956433       55.6325       56.5890    
  43  0.795853     -0.228341     -0.246736      0.246736       54.4677       54.7145    
  44  0.909991E-01  -2.39691      -2.59000       2.59000       55.9040       58.4940    
  45  0.830687     -0.185502     -0.200446      0.200446       52.4471       52.6475    
  46  0.592588     -0.523256     -0.565409      0.565409       54.9250       55.4904    
  47  0.489472     -0.714427     -0.771981      0.771981       54.3037       55.0757    
  48  0.992056     -0.797586E-02 -0.861839E-02  0.861839E-02   55.2066       55.2152    
  49  0.808208     -0.212936     -0.230090      0.230090       55.3763       55.6064    
  50  0.212569      -1.54849      -1.67323       1.67323       54.5829       56.2561    
  51  0.214041      -1.54159      -1.66578       1.66578       53.9033       55.5691    
  52  0.586527     -0.533536     -0.576517      0.576517       53.8951       54.4716    
loop,thermsimp(1:2)       13  0.565007      0.398155    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    290         52.41          1.20          1.01         24.02          0.30          0.06         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.41
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       13
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       14
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      289     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181      -1.16896       1.16896       50.8055       51.9745    
   2  0.649641     -0.431335     -0.466083      0.466083       51.3462       51.8123    
   3  0.930116     -0.724456E-01 -0.782818E-01  0.782818E-01   51.6934       51.7717    
   4  0.297326      -1.21293      -1.31064       1.31064       51.4040       52.7146    
   5  0.751734     -0.285373     -0.308362      0.308362       52.3736       52.6819    
   6  0.409056     -0.893902     -0.965915      0.965915       52.4794       53.4454    
   7  0.115094      -2.16201      -2.33618       2.33618       52.4471       54.7832    
   8  0.606681     -0.499753     -0.540012      0.540012       52.6989       53.2389    
   9  0.140571      -1.96204      -2.12010       2.12010       52.6144       54.7345    
  10  0.447669E-01  -3.10629      -3.35653       3.35653       52.1205       55.4771    
  11  0.517394     -0.658951     -0.712036      0.712036       52.8045       53.5166    
  12  0.587057     -0.532633     -0.575542      0.575542       53.0280       53.6035    
  13  0.384993E-01  -3.25712      -3.51951       3.51951       53.3520       56.8715    
  14  0.829105E-01  -2.48999      -2.69058       2.69058       53.1301       55.8207    
  15  0.382179     -0.961866      -1.03935       1.03935       52.3116       53.3509    
  16  0.269516      -1.31113      -1.41675       1.41675       53.6835       55.1002    
  17  0.879580     -0.128311     -0.138647      0.138647       53.7200       53.8586    
  18  0.760503E-01  -2.57636      -2.78391       2.78391       53.5157       56.2996    
  19  0.482544     -0.728684     -0.787386      0.787386       54.0860       54.8734    
  20  0.561499     -0.577145     -0.623640      0.623640       52.5065       53.1301    
  21  0.254621      -1.36798      -1.47818       1.47818       53.7626       55.2407    
  22  0.479261     -0.735511     -0.794763      0.794763       53.3415       54.1363    
  23  0.638455     -0.448704     -0.484852      0.484852       52.6465       53.1314    
  24  0.289082      -1.24105      -1.34102       1.34102       53.3087       54.6497    
  25  0.656024     -0.421558     -0.455518      0.455518       53.8951       54.3506    
  26  0.597431     -0.515117     -0.556614      0.556614       52.9926       53.5493    
  27  0.859562     -0.151333     -0.163524      0.163524       53.9460       54.1095    
  28  0.554826     -0.589100     -0.636557      0.636557       54.2023       54.8389    
  29  0.128413      -2.05250      -2.21785       2.21785       52.7564       54.9742    
  30  0.311170      -1.16742      -1.26146       1.26146       54.4677       55.7292    
  31  0.606679     -0.499755     -0.540015      0.540015       54.3964       54.9364    
  32  0.923238     -0.798686E-01 -0.863027E-01  0.863027E-01   53.3113       53.3976    
  33  0.734154     -0.309037     -0.333933      0.333933       54.3037       54.6376    
  34  0.988670     -0.113947E-01 -0.123127E-01  0.123127E-01   53.1638       53.1761    
  35  0.136308      -1.99284      -2.15338       2.15338       55.2066       57.3600    
  36  0.345839      -1.06178      -1.14732       1.14732       52.8251       53.9724    
  37  0.349440      -1.05142      -1.13613       1.13613       53.7092       54.8453    
  38  0.625658E-01  -2.77154      -2.99481       2.99481       54.9250       57.9198    
  39  0.394804     -0.929365      -1.00423       1.00423       54.3941       55.3983    
  40  0.899667E-02  -4.71090      -5.09041       5.09041       53.9033       58.9937    
  41  0.823946     -0.193651     -0.209251      0.209251       55.3763       55.5856    
  42  0.834235     -0.181240     -0.195841      0.195841       55.1919       55.3878    
  43  0.777534     -0.251627     -0.271898      0.271898       55.2042       55.4761    
  44  0.384993     -0.954531      -1.03143       1.03143       55.3520       56.3834    
  45  0.247443E-01  -3.69916      -3.99716       3.99716       52.2353       56.2324    
  46  0.810695     -0.209863     -0.226769      0.226769       54.5829       54.8096    
  47  0.893618     -0.112477     -0.121538      0.121538       55.4608       55.5823    
  48  0.545617     -0.605837     -0.654643      0.654643       53.2960       53.9507    
  49  0.587193     -0.532402     -0.575292      0.575292       54.1850       54.7603    
  50  0.991207     -0.883185E-02 -0.954334E-02  0.954334E-02   55.6325       55.6421    
  51  0.477440     -0.739316     -0.798875      0.798875       54.4888       55.2877    
  52  0.444858     -0.810000     -0.875252      0.875252       52.4090       53.2842    
loop,thermsimp(1:2)       14   1.16896      0.466083    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291         53.72          1.09          1.00         23.90          0.36          0.05         26.39
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     53.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       14
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       15
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      290     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538      -1.63746       1.63746       51.6934       53.3308    
   2  0.894567E-01  -2.41400      -2.60847       2.60847       51.3462       53.9547    
   3  0.863615     -0.146628     -0.158440      0.158440       50.8055       50.9640    
   4  0.807990     -0.213206     -0.230382      0.230382       52.3736       52.6040    
   5  0.318173      -1.14516      -1.23741       1.23741       51.4040       52.6414    
   6  0.464606     -0.766566     -0.828319      0.828319       52.5065       53.3348    
   7  0.574933     -0.553501     -0.598091      0.598091       52.6465       53.2446    
   8  0.974939     -0.253802E-01 -0.274248E-01  0.274248E-01   53.1638       53.1912    
   9  0.415757     -0.877653     -0.948356      0.948356       52.6989       53.6472    
  10  0.187109      -1.67606      -1.81108       1.81108       52.4090       54.2201    
  11  0.730515E-01  -2.61659      -2.82738       2.82738       52.3116       55.1390    
  12  0.209185      -1.56454      -1.69058       1.69058       53.3113       55.0018    
  13  0.496690     -0.699790     -0.756164      0.756164       52.4794       53.2356    
  14  0.862986     -0.147356     -0.159227      0.159227       52.8045       52.9638    
  15  0.888200     -0.118558     -0.128109      0.128109       52.9926       53.1208    
  16  0.380888     -0.965250      -1.04301       1.04301       53.0280       54.0710    
  17  0.135305      -2.00022      -2.16136       2.16136       53.7200       55.8813    
  18  0.927079     -0.757167E-01 -0.818163E-01  0.818163E-01   53.2960       53.3778    
  19  0.603067     -0.505727     -0.546468      0.546468       52.8251       53.3716    
  20  0.136202      -1.99362      -2.15422       2.15422       53.9460       56.1002    
  21  0.954653     -0.464076E-01 -0.501462E-01  0.501462E-01   53.3415       53.3917    
  22  0.151192      -1.88920      -2.04140       2.04140       53.8951       55.9365    
  23  0.449259     -0.800155     -0.864615      0.864615       54.3037       55.1683    
  24  0.780874     -0.247341     -0.267267      0.267267       53.3087       53.5759    
  25  0.456238     -0.784740     -0.847958      0.847958       52.6144       53.4623    
  26  0.163284      -1.81227      -1.95826       1.95826       54.1850       56.1433    
  27  0.821444     -0.196692     -0.212537      0.212537       52.4471       52.6596    
  28  0.861448     -0.149141     -0.161155      0.161155       54.5829       54.7440    
  29  0.924167     -0.788621E-01 -0.852152E-01  0.852152E-01   54.2023       54.2875    
  30  0.195059      -1.63445      -1.76613       1.76613       53.7092       55.4753    
  31  0.375134     -0.980472      -1.05946       1.05946       54.0860       55.1454    
  32  0.909862     -0.944628E-01 -0.102073      0.102073       54.3964       54.4985    
  33  0.831459     -0.184574     -0.199443      0.199443       52.7564       52.9558    
  34  0.627278     -0.466365     -0.503935      0.503935       53.6835       54.1874    
  35  0.918890     -0.845891E-01 -0.914035E-01  0.914035E-01   53.7626       53.8540    
  36  0.475784     -0.742791     -0.802629      0.802629       54.4888       55.2915    
  37  0.344524      -1.06559      -1.15144       1.15144       55.1919       56.3434    
  38  0.286778      -1.24905      -1.34967       1.34967       54.3941       55.7437    
  39  0.336148      -1.09020      -1.17803       1.17803       55.2042       56.3822    
  40  0.709840     -0.342716     -0.370325      0.370325       52.1205       52.4909    
  41  0.219827      -1.51491      -1.63695       1.63695       55.4608       57.0978    
  42  0.347594      -1.05672      -1.14185       1.14185       55.3763       56.5182    
  43  0.905734     -0.990099E-01 -0.106986      0.106986       55.6325       55.7395    
  44  0.826231     -0.190881     -0.206258      0.206258       54.4677       54.6740    
  45  0.400277     -0.915599     -0.989359      0.989359       53.1301       54.1194    
  46  0.555153     -0.588512     -0.635922      0.635922       52.2353       52.8712    
  47  0.864397     -0.145723     -0.157463      0.157463       53.5157       53.6731    
  48  0.277380E-01  -3.58495      -3.87375       3.87375       55.3520       59.2257    
  49  0.993968     -0.605015E-02 -0.653755E-02  0.653755E-02   53.3520       53.3585    
  50  0.717076     -0.332573     -0.359365      0.359365       55.2066       55.5660    
  51  0.736253     -0.306182     -0.330848      0.330848       54.9250       55.2558    
  52  0.278813      -1.27722      -1.38011       1.38011       53.7173       55.0974    
loop,thermsimp(1:2)       15   1.63746       2.60847    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292         51.95          1.06          0.98         23.39          0.86          0.05         26.35
Just calling func    0   0         26.35


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       15
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       16
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      291     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221      -1.58000       1.58000       50.8055       52.3855    
   2  0.641193     -0.444425     -0.480227      0.480227       52.1205       52.6008    
   3  0.353033      -1.04119      -1.12507       1.12507       52.3736       53.4986    
   4  0.928955     -0.736953E-01 -0.796321E-01  0.796321E-01   51.4040       51.4836    
   5  0.350257      -1.04909      -1.13360       1.13360       52.4471       53.5807    
   6  0.682617     -0.381821     -0.412580      0.412580       52.2353       52.6479    
   7  0.162763      -1.81546      -1.96171       1.96171       52.7564       54.7181    
   8  0.874032     -0.134639     -0.145485      0.145485       52.8045       52.9500    
   9  0.518909     -0.656027     -0.708876      0.708876       52.9926       53.7015    
  10  0.461984     -0.772226     -0.834436      0.834436       53.1638       53.9982    
  11  0.449468     -0.799691     -0.864114      0.864114       52.4794       53.3436    
  12  0.523281     -0.647637     -0.699811      0.699811       52.6465       53.3463    
  13  0.637377     -0.450394     -0.486678      0.486678       51.6934       52.1801    
  14  0.596329     -0.516963     -0.558609      0.558609       52.5065       53.0651    
  15  0.286246      -1.25090      -1.35167       1.35167       53.3520       54.7037    
  16  0.590425     -0.526913     -0.569361      0.569361       52.8251       53.3945    
  17  0.853637     -0.158249     -0.170997      0.170997       53.2960       53.4670    
  18  0.245572      -1.40416      -1.51728       1.51728       53.3415       54.8588    
  19  0.375654     -0.979088      -1.05796       1.05796       52.6144       53.6723    
  20  0.281654      -1.26708      -1.36915       1.36915       53.3087       54.6778    
  21  0.443392     -0.813302     -0.878821      0.878821       52.6989       53.5777    
  22  0.442934     -0.814335     -0.879937      0.879937       53.5157       54.3956    
  23  0.171790      -1.76149      -1.90339       1.90339       53.7626       55.6660    
  24  0.802582     -0.219921     -0.237638      0.237638       51.3462       51.5839    
  25  0.162733      -1.81564      -1.96191       1.96191       53.0280       54.9899    
  26  0.838320     -0.176355     -0.190562      0.190562       53.1301       53.3206    
  27  0.210754      -1.55706      -1.68250       1.68250       53.6835       55.3660    
  28  0.240377      -1.42554      -1.54039       1.54039       52.4090       53.9494    
  29  0.173042E-01  -4.05680      -4.38362       4.38362       54.2023       58.5859    
  30  0.640146     -0.446059     -0.481993      0.481993       54.3964       54.8784    
  31  0.749210     -0.288736     -0.311996      0.311996       54.4677       54.7797    
  32  0.666162     -0.406222     -0.438947      0.438947       54.5829       55.0218    
  33  0.601746     -0.507920     -0.548837      0.548837       53.3113       53.8601    
  34  0.677044     -0.390020     -0.421439      0.421439       53.7173       54.1387    
  35  0.290379      -1.23657      -1.33619       1.33619       52.3116       53.6478    
  36  0.439723     -0.821610     -0.887798      0.887798       54.0860       54.9738    
  37  0.680091     -0.385528     -0.416586      0.416586       54.3037       54.7203    
  38  0.803784     -0.218425     -0.236021      0.236021       54.9250       55.1610    
  39  0.507823     -0.677622     -0.732211      0.732211       54.4888       55.2210    
  40  0.894573     -0.111408     -0.120383      0.120383       53.7092       53.8296    
  41  0.826908     -0.190062     -0.205373      0.205373       55.2066       55.4120    
  42  0.815562     -0.203878     -0.220303      0.220303       55.6325       55.8528    
  43  0.352457      -1.04283      -1.12684       1.12684       54.3941       55.5209    
  44  0.104059      -2.26279      -2.44508       2.44508       53.7200       56.1651    
  45  0.601892     -0.507677     -0.548575      0.548575       53.8951       54.4437    
  46  0.988184     -0.118862E-01 -0.128437E-01  0.128437E-01   53.9460       53.9589    
  47  0.733912     -0.309366     -0.334288      0.334288       54.1850       54.5193    
  48  0.107394      -2.23125      -2.41099       2.41099       55.1919       57.6029    
  49  0.592150     -0.523995     -0.566208      0.566208       55.2042       55.7704    
  50  0.821901     -0.196136     -0.211936      0.211936       55.3763       55.5883    
  51  0.400070E-01  -3.21870      -3.47800       3.47800       55.4608       58.9388    
  52  0.271211      -1.30486      -1.40998       1.40998       51.9477       53.3577    
loop,thermsimp(1:2)       16   1.58000      0.480227    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293         51.94          1.12          1.00         23.87          0.38          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       16
neval is:      292
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       17
neval is:      292


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      292     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427     -0.272762      0.272762       51.4040       51.6767    
   2  0.350417      -1.04863      -1.13311       1.13311       51.3462       52.4793    
   3  0.533846     -0.627648     -0.678211      0.678211       51.6934       52.3716    
   4  0.622955     -0.473280     -0.511407      0.511407       50.8055       51.3169    
   5  0.661091E-01  -2.71645      -2.93528       2.93528       52.1205       55.0558    
   6  0.759206     -0.275482     -0.297675      0.297675       52.2353       52.5330    
   7  0.430535     -0.842727     -0.910616      0.910616       52.8045       53.7151    
   8  0.257678      -1.35604      -1.46529       1.46529       52.5065       53.9718    
   9  0.296561      -1.21550      -1.31342       1.31342       53.1301       54.4435    
  10  0.805929     -0.215760     -0.233141      0.233141       52.4794       52.7126    
  11  0.421616     -0.863661     -0.933236      0.933236       52.6465       53.5797    
  12  0.767803     -0.264223     -0.285508      0.285508       51.9477       52.2332    
  13  0.605260     -0.502097     -0.542546      0.542546       52.8251       53.3677    
  14  0.566784     -0.567776     -0.613516      0.613516       53.2960       53.9095    
  15  0.292740      -1.22847      -1.32743       1.32743       52.3736       53.7010    
  16  0.898463     -0.107069     -0.115695      0.115695       52.6989       52.8146    
  17  0.218067      -1.52295      -1.64564       1.64564       52.4471       54.0927    
  18  0.856756     -0.154603     -0.167057      0.167057       52.3116       52.4786    
  19  0.338883      -1.08210      -1.16927       1.16927       52.6144       53.7836    
  20  0.796034     -0.228113     -0.246490      0.246490       52.9926       53.2391    
  21  0.778636     -0.250212     -0.270368      0.270368       53.7092       53.9796    
  22  0.575989     -0.551667     -0.596109      0.596109       53.3113       53.9074    
  23  0.355531      -1.03414      -1.11745       1.11745       52.4090       53.5264    
  24  0.164949      -1.80212      -1.94730       1.94730       53.9460       55.8933    
  25  0.315998      -1.15202      -1.24483       1.24483       53.1638       54.4086    
  26  0.330933      -1.10584      -1.19492       1.19492       53.7173       54.9122    
  27  0.429436     -0.845283     -0.913379      0.913379       53.5157       54.4290    
  28  0.464808     -0.766130     -0.827849      0.827849       53.8951       54.7230    
  29  0.192211      -1.64916      -1.78202       1.78202       54.1850       55.9671    
  30  0.866849     -0.142891     -0.154402      0.154402       53.3087       53.4631    
  31  0.474973     -0.744498     -0.804474      0.804474       53.3520       54.1565    
  32  0.667713     -0.403897     -0.436434      0.436434       52.7564       53.1928    
  33  0.994155     -0.586200E-02 -0.633424E-02  0.633424E-02   54.3037       54.3100    
  34  0.577739     -0.548634     -0.592831      0.592831       54.4677       55.0606    
  35  0.381919     -0.962546      -1.04009       1.04009       53.3415       54.3816    
  36  0.733204     -0.310331     -0.335331      0.335331       54.3964       54.7318    
  37  0.492382     -0.708500     -0.765576      0.765576       54.0860       54.8516    
  38  0.188899E-01  -3.96913      -4.28888       4.28888       53.0280       57.3169    
  39  0.741920E-01  -2.60110      -2.81064       2.81064       54.5829       57.3935    
  40  0.210592      -1.55783      -1.68333       1.68333       54.9250       56.6083    
  41  0.682838     -0.381498     -0.412231      0.412231       54.4888       54.9011    
  42  0.656831     -0.420328     -0.454190      0.454190       53.6835       54.1377    
  43  0.444670     -0.810424     -0.875711      0.875711       55.2066       56.0823    
  44  0.872301     -0.136621     -0.147627      0.147627       54.3941       54.5417    
  45  0.932741     -0.696282E-01 -0.752374E-01  0.752374E-01   55.3763       55.4516    
  46  0.601727     -0.507951     -0.548872      0.548872       53.7626       54.3114    
  47  0.940344     -0.615097E-01 -0.664649E-01  0.664649E-01   55.2042       55.2706    
  48  0.208477E-01  -3.87051      -4.18232       4.18232       55.6325       59.8148    
  49  0.257831      -1.35545      -1.46464       1.46464       53.7200       55.1846    
  50  0.522803     -0.648550     -0.700796      0.700796       55.1919       55.8927    
  51  0.676437     -0.390915     -0.422407      0.422407       54.2023       54.6247    
  52  0.612346     -0.490458     -0.529968      0.529968       51.9395       52.4695    
loop,thermsimp(1:2)       17  0.272762       1.13311    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    294         51.56          1.05          0.99         23.68          0.66          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    295         54.97          1.06          1.02         24.18          0.10          0.05         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.56
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       17
neval is:      294
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       18
neval is:      294


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      294     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547      -1.54031       1.54031       50.8055       52.3458    
   2  0.711556E-02  -4.94547      -5.34387       5.34387       51.4040       56.7478    
   3  0.909796     -0.945347E-01 -0.102150      0.102150       51.9477       52.0498    
   4  0.659218     -0.416702     -0.450271      0.450271       51.6934       52.1437    
   5  0.833482     -0.182144     -0.196817      0.196817       51.9395       52.1363    
   6  0.726295E-01  -2.62238      -2.83364       2.83364       52.3116       55.1452    
   7  0.687091     -0.375288     -0.405521      0.405521       51.3462       51.7517    
   8  0.860775     -0.149922     -0.161999      0.161999       52.2353       52.3973    
   9  0.846215     -0.166982     -0.180434      0.180434       52.4794       52.6599    
  10  0.398551     -0.919919     -0.994027      0.994027       52.6989       53.6929    
  11  0.416092     -0.876849     -0.947487      0.947487       52.7564       53.7039    
  12  0.463389     -0.769189     -0.831154      0.831154       52.9926       53.8238    
  13  0.207356      -1.57332      -1.70006       1.70006       52.8251       54.5252    
  14  0.133003      -2.01738      -2.17990       2.17990       53.3087       55.4886    
  15  0.464971     -0.765779     -0.827470      0.827470       52.4090       53.2364    
  16  0.568281     -0.565140     -0.610667      0.610667       52.6465       53.2572    
  17  0.638811     -0.448147     -0.484249      0.484249       52.3736       52.8578    
  18  0.865664     -0.144259     -0.155880      0.155880       52.8045       52.9604    
  19  0.475002     -0.744436     -0.804408      0.804408       52.6144       53.4188    
  20  0.537086     -0.621597     -0.671673      0.671673       53.3113       53.9829    
  21  0.782345     -0.245459     -0.265233      0.265233       53.2960       53.5612    
  22  0.725469     -0.320937     -0.346791      0.346791       52.5065       52.8533    
  23  0.701426E-01  -2.65723      -2.87129       2.87129       53.7092       56.5805    
  24  0.297043      -1.21388      -1.31167       1.31167       52.4471       53.7587    
  25  0.444870     -0.809973     -0.875224      0.875224       53.6835       54.5587    
  26  0.685684     -0.377338     -0.407736      0.407736       53.3520       53.7597    
  27  0.651244     -0.428871     -0.463421      0.463421       54.3037       54.7671    
  28  0.269082      -1.31274      -1.41849       1.41849       53.7626       55.1811    
  29  0.177107      -1.73100      -1.87045       1.87045       53.3415       55.2120    
  30  0.766464     -0.265968     -0.287394      0.287394       53.1638       53.4512    
  31  0.801833     -0.220855     -0.238646      0.238646       53.5157       53.7543    
  32  0.759414     -0.275209     -0.297379      0.297379       53.1301       53.4275    
  33  0.566307     -0.568618     -0.614425      0.614425       54.3941       55.0085    
  34  0.297948      -1.21084      -1.30838       1.30838       54.2023       55.5107    
  35  0.430097E-01  -3.14633      -3.39979       3.39979       53.8951       57.2949    
  36  0.529414     -0.635984     -0.687218      0.687218       54.3964       55.0836    
  37  0.717133     -0.332494     -0.359279      0.359279       54.0860       54.4453    
  38  0.209457      -1.56323      -1.68917       1.68917       54.4888       56.1780    
  39  0.732428     -0.311390     -0.336475      0.336475       53.7173       54.0537    
  40  0.697782     -0.359849     -0.388838      0.388838       52.1205       52.5094    
  41  0.977227     -0.230362E-01 -0.248919E-01  0.248919E-01   54.4677       54.4926    
  42  0.744700     -0.294773     -0.318520      0.318520       53.7200       54.0385    
  43  0.713341     -0.337796     -0.365009      0.365009       55.2042       55.5692    
  44  0.497823     -0.697510     -0.753701      0.753701       55.3763       56.1300    
  45  0.968758     -0.317404E-01 -0.342973E-01  0.342973E-01   55.1919       55.2262    
  46  0.287665      -1.24596      -1.34633       1.34633       53.9460       55.2923    
  47  0.964672     -0.359674E-01 -0.388649E-01  0.388649E-01   54.1850       54.2239    
  48  0.733769     -0.309561     -0.334499      0.334499       55.2066       55.5411    
  49  0.692680     -0.367187     -0.396768      0.396768       54.9250       55.3218    
  50  0.328873      -1.11208      -1.20167       1.20167       53.0280       54.2297    
  51  0.744920     -0.294478     -0.318201      0.318201       54.5829       54.9011    
  52  0.655188     -0.422834     -0.456897      0.456897       51.5633       52.0202    
loop,thermsimp(1:2)       18   1.54031       5.34387    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    296         55.83          1.03          1.00         24.03          0.38          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     55.83
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       18
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       19
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      295     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453     -0.351671      0.351671       51.3462       51.6979    
   2  0.240049      -1.42691      -1.54186       1.54186       51.5633       53.1051    
   3  0.365543      -1.00637      -1.08744       1.08744       51.9477       53.0351    
   4  0.399010     -0.918769     -0.992785      0.992785       51.9395       52.9323    
   5  0.685268     -0.377945     -0.408392      0.408392       51.6934       52.1018    
   6  0.335805E-01  -3.39381      -3.66721       3.66721       50.8055       54.4727    
   7  0.820520     -0.197817     -0.213753      0.213753       52.2353       52.4490    
   8  0.756560     -0.278973     -0.301447      0.301447       52.1205       52.4220    
   9  0.869461     -0.139882     -0.151151      0.151151       52.4794       52.6306    
  10  0.787378     -0.239047     -0.258304      0.258304       52.5065       52.7648    
  11  0.330926      -1.10586      -1.19495       1.19495       52.3736       53.5685    
  12  0.339084E-01  -3.38409      -3.65671       3.65671       52.8045       56.4612    
  13  0.672805     -0.396300     -0.428225      0.428225       52.4090       52.8372    
  14  0.822413     -0.195513     -0.211263      0.211263       52.6465       52.8578    
  15  0.928870     -0.737865E-01 -0.797306E-01  0.797306E-01   52.6144       52.6941    
  16  0.778944     -0.249816     -0.269941      0.269941       53.1301       53.4000    
  17  0.301602E-01  -3.50123      -3.78329       3.78329       53.1638       56.9471    
  18  0.292626      -1.22886      -1.32786       1.32786       53.2960       54.6239    
  19  0.149515      -1.90036      -2.05345       2.05345       52.6989       54.7523    
  20  0.500330E-01  -2.99507      -3.23635       3.23635       52.7564       55.9927    
  21  0.759114E-01  -2.57819      -2.78589       2.78589       53.5157       56.3015    
  22  0.613440     -0.488673     -0.528040      0.528040       52.4471       52.9751    
  23  0.132502      -2.02116      -2.18398       2.18398       53.3520       55.5360    
  24  0.189750E-02  -6.26722      -6.77210       6.77210       52.9926       59.7647    
  25  0.507622     -0.678018     -0.732639      0.732639       53.3113       54.0439    
  26  0.378733     -0.970924      -1.04914       1.04914       53.7200       54.7691    
  27  0.139411      -1.97033      -2.12905       2.12905       53.7173       55.8463    
  28  0.298599      -1.20865      -1.30602       1.30602       54.1850       55.4911    
  29  0.767617     -0.264464     -0.285769      0.285769       53.0280       53.3138    
  30  0.656077     -0.421478     -0.455431      0.455431       54.0860       54.5414    
  31  0.701883     -0.353988     -0.382505      0.382505       54.4677       54.8502    
  32  0.940950     -0.608655E-01 -0.657687E-01  0.657687E-01   52.8251       52.8909    
  33  0.621043     -0.476355     -0.514730      0.514730       53.6835       54.1982    
  34  0.622910     -0.473353     -0.511485      0.511485       54.3037       54.8152    
  35  0.525019     -0.644320     -0.696226      0.696226       54.5829       55.2791    
  36  0.871126     -0.137969     -0.149084      0.149084       54.3941       54.5432    
  37  0.475532     -0.743322     -0.803203      0.803203       54.3964       55.1996    
  38  0.320094      -1.13914      -1.23091       1.23091       52.3116       53.5425    
  39  0.688986     -0.372534     -0.402545      0.402545       53.7626       54.1651    
  40  0.831218     -0.184863     -0.199756      0.199756       53.3415       53.5413    
  41  0.639633     -0.446861     -0.482859      0.482859       55.1919       55.6748    
  42  0.628257     -0.464807     -0.502251      0.502251       53.9460       54.4483    
  43  0.925835     -0.770596E-01 -0.832674E-01  0.832674E-01   54.9250       55.0083    
  44  0.611089     -0.492512     -0.532188      0.532188       53.3087       53.8409    
  45  0.423003E-01  -3.16296      -3.41777       3.41777       54.2023       57.6201    
  46  0.430763     -0.842198     -0.910045      0.910045       55.2066       56.1167    
  47  0.374764     -0.981459      -1.06052       1.06052       55.2042       56.2647    
  48  0.109336      -2.21333      -2.39163       2.39163       55.3763       57.7680    
  49  0.642636E-02  -5.04735      -5.45396       5.45396       54.4888       59.9428    
  50  0.232984      -1.45679      -1.57414       1.57414       53.7092       55.2833    
  51  0.169005E-01  -4.08041      -4.40913       4.40913       51.4040       55.8131    
  52  0.183441      -1.69586      -1.83248       1.83248       55.8302       57.6627    
loop,thermsimp(1:2)       19  0.351671       1.54186    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297         52.16          1.07          0.99         24.00          0.43          0.05         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    298         57.15          0.98          1.00         24.00          0.25          0.05         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     52.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       19
neval is:      297
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       20
neval is:      297


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      297     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521      -1.25908       1.25908       51.3462       52.6053    
   2  0.362384      -1.01505      -1.09682       1.09682       51.6934       52.7902    
   3  0.900627     -0.104664     -0.113096      0.113096       52.1205       52.2336    
   4  0.233893      -1.45289      -1.56993       1.56993       52.2353       53.8052    
   5  0.183338      -1.69642      -1.83309       1.83309       52.4794       54.3125    
   6  0.351708      -1.04495      -1.12913       1.12913       52.6144       53.7435    
   7  0.979617     -0.205938E-01 -0.222528E-01  0.222528E-01   52.5065       52.5287    
   8  0.801294     -0.221527     -0.239373      0.239373       52.4090       52.6483    
   9  0.423893     -0.858275     -0.927417      0.927417       52.6465       53.5739    
  10  0.486446     -0.720630     -0.778684      0.778684       52.8251       53.6038    
  11  0.430531     -0.842736     -0.910626      0.910626       51.9395       52.8502    
  12  0.214629      -1.53884      -1.66281       1.66281       52.4471       54.1099    
  13  0.860310     -0.150463     -0.162584      0.162584       51.9477       52.1103    
  14  0.450659     -0.797045     -0.861254      0.861254       51.5633       52.4245    
  15  0.867432     -0.142218     -0.153675      0.153675       53.0280       53.1817    
  16  0.850327     -0.162134     -0.175195      0.175195       53.1301       53.3053    
  17  0.914193     -0.897130E-01 -0.969402E-01  0.969402E-01   53.3415       53.4385    
  18  0.908448     -0.960172E-01 -0.103752      0.103752       52.3116       52.4153    
  19  0.349788E-01  -3.35301      -3.62313       3.62313       52.3736       55.9967    
  20  0.825048     -0.192314     -0.207807      0.207807       53.3087       53.5165    
  21  0.628933     -0.463730     -0.501088      0.501088       53.3113       53.8123    
  22  0.756366     -0.279229     -0.301724      0.301724       53.7626       54.0643    
  23  0.545707     -0.605674     -0.654466      0.654466       53.6835       54.3380    
  24  0.653619     -0.425231     -0.459487      0.459487       53.9460       54.4055    
  25  0.781643     -0.246357     -0.266203      0.266203       50.8055       51.0717    
  26  0.444411     -0.811005     -0.876339      0.876339       54.0860       54.9623    
  27  0.223111      -1.50008      -1.62093       1.62093       54.3941       56.0150    
  28  0.143901      -1.93863      -2.09481       2.09481       53.2960       55.3908    
  29  0.419282E-01  -3.17180      -3.42731       3.42731       52.6989       56.1262    
  30  0.407367     -0.898040     -0.970385      0.970385       53.7200       54.6904    
  31  0.722138     -0.325538     -0.351763      0.351763       54.3037       54.6554    
  32  0.290143      -1.23738      -1.33706       1.33706       54.4677       55.8048    
  33  0.236931E-01  -3.74257      -4.04407       4.04407       54.9250       58.9691    
  34  0.198981      -1.61454      -1.74461       1.74461       54.3964       56.1410    
  35  0.765966     -0.266617     -0.288095      0.288095       54.5829       54.8710    
  36  0.522733     -0.648684     -0.700942      0.700942       53.7092       54.4101    
  37  0.297579E-01  -3.51466      -3.79780       3.79780       54.1850       57.9828    
  38  0.175475      -1.74026      -1.88045       1.88045       53.3520       55.2324    
  39  0.311931      -1.16497      -1.25882       1.25882       55.1919       56.4507    
  40  0.310920      -1.16822      -1.26233       1.26233       51.4040       52.6663    
  41  0.122272      -2.10150      -2.27080       2.27080       53.7173       55.9881    
  42  0.949359     -0.519686E-01 -0.561551E-01  0.561551E-01   52.7564       52.8125    
  43  0.500750     -0.691648     -0.747367      0.747367       55.2066       55.9540    
  44  0.729401E-01  -2.61812      -2.82903       2.82903       55.2042       58.0332    
  45  0.952528     -0.486360E-01 -0.525541E-01  0.525541E-01   53.5157       53.5682    
  46  0.718842     -0.330114     -0.356708      0.356708       52.8045       53.1612    
  47  0.529396     -0.636019     -0.687256      0.687256       53.1638       53.8511    
  48  0.314661      -1.15626      -1.24941       1.24941       54.2023       55.4517    
  49  0.947465     -0.539649E-01 -0.583122E-01  0.583122E-01   55.8302       55.8885    
  50  0.613869     -0.487974     -0.527285      0.527285       55.3763       55.9036    
  51  0.303056      -1.19384      -1.29001       1.29001       52.9926       54.2827    
  52  0.749186     -0.288769     -0.312031      0.312031       52.1572       52.4692    
loop,thermsimp(1:2)       20   1.25908       1.09682    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    299         51.63          1.02          0.98         23.95          0.46          0.06         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    300         54.70          0.98          1.00         24.16          0.17          0.05         26.37
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.63
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       20
neval is:      299
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       21
neval is:      299


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      299     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028      -1.27536       1.27536       50.8055       52.0809    
   2  0.575213     -0.553015     -0.597565      0.597565       51.9477       52.5453    
   3  0.632244     -0.458480     -0.495415      0.495415       52.1205       52.6160    
   4  0.819203     -0.199424     -0.215489      0.215489       52.3116       52.5271    
   5  0.137693E-02  -6.58790      -7.11861       7.11861       51.5633       58.6819    
   6  0.367814      -1.00018      -1.08075       1.08075       52.1572       53.2380    
   7  0.452636     -0.792666     -0.856523      0.856523       52.5065       53.3630    
   8  0.278102      -1.27977      -1.38287       1.38287       51.3462       52.7291    
   9  0.417803     -0.872745     -0.943053      0.943053       52.4090       53.3520    
  10  0.682140     -0.382521     -0.413337      0.413337       51.4040       51.8173    
  11  0.204733      -1.58605      -1.71382       1.71382       51.6934       53.4072    
  12  0.637442     -0.450292     -0.486567      0.486567       52.7564       53.2430    
  13  0.114518      -2.16702      -2.34159       2.34159       51.9395       54.2811    
  14  0.724207     -0.322678     -0.348673      0.348673       52.8045       53.1532    
  15  0.461399     -0.773492     -0.835804      0.835804       53.0280       53.8638    
  16  0.731739     -0.312332     -0.337493      0.337493       53.1301       53.4676    
  17  0.773272     -0.257124     -0.277838      0.277838       53.3415       53.6194    
  18  0.789195     -0.236742     -0.255814      0.255814       53.3087       53.5645    
  19  0.762001     -0.271807     -0.293703      0.293703       53.5157       53.8094    
  20  0.933384     -0.689386E-01 -0.744922E-01  0.744922E-01   52.6465       52.7210    
  21  0.694037     -0.365230     -0.394653      0.394653       52.8251       53.2198    
  22  0.423570     -0.859038     -0.928241      0.928241       52.6144       53.5426    
  23  0.272919      -1.29858      -1.40319       1.40319       52.2353       53.6385    
  24  0.535843     -0.623914     -0.674176      0.674176       53.3113       53.9854    
  25  0.902288     -0.102822     -0.111105      0.111105       53.1638       53.2749    
  26  0.479374     -0.735275     -0.794508      0.794508       53.7626       54.5571    
  27  0.494900E-01  -3.00599      -3.24815       3.24815       52.4471       55.6952    
  28  0.921867     -0.813539E-01 -0.879077E-01  0.879077E-01   52.9926       53.0806    
  29  0.132425      -2.02174      -2.18460       2.18460       52.4794       54.6640    
  30  0.640539     -0.445446     -0.481330      0.481330       53.6835       54.1648    
  31  0.215363      -1.53543      -1.65912       1.65912       53.9460       55.6051    
  32  0.437204E-01  -3.12994      -3.38208       3.38208       53.7092       57.0913    
  33  0.166028      -1.79560      -1.94025       1.94025       54.3037       56.2439    
  34  0.425825     -0.853727     -0.922502      0.922502       53.7200       54.6425    
  35  0.810393     -0.210235     -0.227172      0.227172       54.5829       54.8101    
  36  0.855958     -0.155534     -0.168064      0.168064       54.0860       54.2540    
  37  0.830452     -0.185786     -0.200752      0.200752       53.3520       53.5528    
  38  0.658784     -0.417359     -0.450981      0.450981       53.2960       53.7470    
  39  0.910965     -0.932509E-01 -0.100763      0.100763       54.2023       54.3031    
  40  0.603480     -0.505043     -0.545728      0.545728       54.4677       55.0135    
  41  0.702610     -0.352953     -0.381387      0.381387       55.8302       56.2116    
  42  0.329065      -1.11150      -1.20104       1.20104       55.3763       56.5774    
  43  0.790497     -0.235094     -0.254033      0.254033       55.2066       55.4607    
  44  0.641572     -0.443834     -0.479588      0.479588       53.7173       54.1968    
  45  0.650683     -0.429733     -0.464352      0.464352       52.3736       52.8379    
  46  0.194049E-02  -6.24481      -6.74789       6.74789       54.3941       61.1420    
  47  0.662053     -0.412409     -0.445633      0.445633       52.6989       53.1445    
  48  0.294846      -1.22130      -1.31969       1.31969       54.3964       55.7161    
  49  0.709874     -0.342668     -0.370274      0.370274       55.1919       55.5622    
  50  0.700314     -0.356226     -0.384923      0.384923       54.1850       54.5700    
  51  0.639811E-01  -2.74917      -2.97064       2.97064       55.2042       58.1748    
  52  0.251451      -1.38051      -1.49172       1.49172       51.6333       53.1250    
loop,thermsimp(1:2)       21   1.27536      0.597565    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    301         51.20          0.99          0.99         23.88          0.58          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    302         49.91          1.03          1.00         23.97          0.24          0.06         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    51.200        2.738     -1.455      5.186     -100.0      1.147    
                     -0.6519      2.617     -100.0      2.726      1.718    
                       1.420    -0.9525      1.841      0.000      0.000    
                      -1.263      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.185     -4.726     -5.578     -2.273    
                      -13.30     -2.821      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.6368E-01-0.3777E-02  0.000    -0.5121    
                     -0.1175    -0.2214    -0.1005    -0.2073    -0.8371E-02

                      -1.225    -0.7896      0.000    -0.1936E-01-0.3360E-01
                      0.8541E-01 0.2489E-01-0.1553E-01-0.3159    -0.1591    
                      0.3445E-01-0.4085E-01-0.2987    -0.8421      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.293      9.148     -7039.     -4.000    
                     -0.4501    -0.4380      9.234      8.570     -4904.    

                      -4.000    -0.1206    -0.5516      8.605      9.064    
                      -6912.     -4.000    -0.2637    -0.4511      9.823    
                       8.598     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.91
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       21
neval is:      301
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       22
neval is:      301


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      301     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666     -0.189817      0.189817       51.4040       51.5938    
   2  0.801853     -0.220830     -0.238620      0.238620       50.8055       51.0442    
   3  0.768645     -0.263126     -0.284323      0.284323       52.3116       52.5959    
   4  0.855557     -0.156003     -0.168570      0.168570       51.9477       52.1163    
   5  0.845591     -0.167720     -0.181231      0.181231       52.1205       52.3018    
   6  0.350050      -1.04968      -1.13424       1.13424       52.6465       53.7807    
   7  0.927608     -0.751463E-01 -0.812000E-01  0.812000E-01   51.3462       51.4274    
   8  0.655345E-01  -2.72518      -2.94472       2.94472       52.3736       55.3183    
   9  0.355481      -1.03428      -1.11760       1.11760       52.9926       54.1102    
  10  0.728523     -0.316737     -0.342253      0.342253       51.6333       51.9755    
  11  0.573220     -0.556486     -0.601316      0.601316       52.6989       53.3002    
  12  0.112478      -2.18499      -2.36102       2.36102       52.8045       55.1655    
  13  0.338739      -1.08253      -1.16973       1.16973       52.8251       53.9949    
  14  0.239648      -1.42858      -1.54367       1.54367       52.1572       53.7009    
  15  0.918959     -0.845134E-01 -0.913217E-01  0.913217E-01   52.7564       52.8477    
  16  0.283771      -1.25959      -1.36106       1.36106       53.1638       54.5249    
  17  0.414404     -0.880913     -0.951878      0.951878       52.4090       53.3608    
  18  0.716403     -0.333512     -0.360380      0.360380       52.5065       52.8669    
  19  0.317726      -1.14657      -1.23893       1.23893       51.6934       52.9323    
  20  0.339005      -1.08174      -1.16888       1.16888       53.1301       54.2990    
  21  0.163059      -1.81364      -1.95975       1.95975       52.6144       54.5741    
  22  0.477081     -0.740069     -0.799688      0.799688       53.3520       54.1517    
  23  0.105851      -2.24573      -2.42664       2.42664       53.3087       55.7353    
  24  0.840431     -0.173840     -0.187844      0.187844       53.3415       53.5294    
  25  0.235315      -1.44683      -1.56339       1.56339       52.2353       53.7987    
  26  0.865464     -0.144489     -0.156129      0.156129       53.2960       53.4521    
  27  0.909462     -0.949026E-01 -0.102548      0.102548       53.5157       53.6182    
  28  0.152105E-01  -4.18577      -4.52297       4.52297       53.0280       57.5510    
  29  0.962485     -0.382371E-01 -0.413175E-01  0.413175E-01   53.3113       53.3526    
  30  0.259410      -1.34934      -1.45805       1.45805       53.6835       55.1415    
  31  0.364880      -1.00819      -1.08940       1.08940       53.7173       54.8067    
  32  0.467235     -0.760923     -0.822222      0.822222       54.0860       54.9082    
  33  0.844908     -0.168527     -0.182104      0.182104       51.9395       52.1216    
  34  0.188232      -1.67008      -1.80462       1.80462       54.2023       56.0069    
  35  0.496585     -0.700000     -0.756392      0.756392       53.7626       54.5190    
  36  0.410505     -0.890367     -0.962094      0.962094       54.1850       55.1471    
  37  0.533875     -0.627594     -0.678152      0.678152       53.7200       54.3981    
  38  0.610668     -0.493202     -0.532934      0.532934       52.4794       53.0124    
  39  0.241933      -1.41910      -1.53342       1.53342       54.5829       56.1163    
  40  0.642629     -0.442188     -0.477810      0.477810       54.4677       54.9456    
  41  0.775072     -0.254799     -0.275325      0.275325       55.2066       55.4819    
  42  0.345343      -1.06322      -1.14887       1.14887       55.1919       56.3408    
  43  0.844097     -0.169488     -0.183142      0.183142       53.9460       54.1291    
  44  0.426886     -0.851239     -0.919814      0.919814       52.4471       53.3669    
  45  0.594109     -0.520693     -0.562640      0.562640       54.3964       54.9591    
  46  0.489527     -0.714316     -0.771861      0.771861       55.8302       56.6021    
  47  0.313882      -1.15874      -1.25209       1.25209       54.3037       55.5558    
  48  0.687066     -0.375325     -0.405561      0.405561       55.3763       55.7819    
  49  0.394505     -0.930124      -1.00505       1.00505       53.7092       54.7142    
  50  0.971200     -0.292233E-01 -0.315775E-01  0.315775E-01   55.2042       55.2357    
  51  0.916939     -0.867145E-01 -0.937001E-01  0.937001E-01   51.5633       51.6570    
  52  0.968457     -0.320511E-01 -0.346332E-01  0.346332E-01   49.9081       49.9427    
loop,thermsimp(1:2)       22  0.189817      0.238620    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    303         51.68          1.24          1.02         24.11          0.24          0.06         26.66
Just calling func    0   0         26.66


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.68
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       22
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       23
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      302     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456     -0.177704      0.177704       49.9081       50.0858    
   2  0.848474     -0.164316     -0.177553      0.177553       50.8055       50.9831    
   3  0.146795      -1.91872      -2.07329       2.07329       51.3462       53.4195    
   4  0.398624     -0.919738     -0.993831      0.993831       51.4040       52.3978    
   5  0.888093     -0.118679     -0.128239      0.128239       51.5633       51.6915    
   6  0.475009     -0.744421     -0.804391      0.804391       51.6333       52.4377    
   7  0.120824      -2.11342      -2.28368       2.28368       51.9477       54.2314    
   8  0.270052      -1.30914      -1.41460       1.41460       51.9395       53.3541    
   9  0.201748E-01  -3.90332      -4.21777       4.21777       52.1205       56.3383    
  10  0.999386     -0.614559E-03 -0.664067E-03  0.664067E-03   52.3116       52.3123    
  11  0.212655      -1.54808      -1.67280       1.67280       52.7564       54.4292    
  12  0.197911      -1.61994      -1.75044       1.75044       52.5065       54.2569    
  13  0.786394     -0.240297     -0.259656      0.259656       51.6934       51.9530    
  14  0.781263     -0.246844     -0.266729      0.266729       52.4794       52.7462    
  15  0.788011     -0.238244     -0.257436      0.257436       52.6989       52.9563    
  16  0.956387     -0.445927E-01 -0.481850E-01  0.481850E-01   53.3113       53.3594    
  17  0.717415     -0.332100     -0.358854      0.358854       52.4090       52.7678    
  18  0.808756     -0.212258     -0.229357      0.229357       52.4471       52.6764    
  19  0.756838     -0.278606     -0.301051      0.301051       53.2960       53.5971    
  20  0.570684     -0.560919     -0.606106      0.606106       53.3415       53.9476    
  21  0.946031     -0.554796E-01 -0.599490E-01  0.599490E-01   53.5157       53.5756    
  22  0.678634E-01  -2.69026      -2.90698       2.90698       52.1572       55.0642    
  23  0.631502     -0.459654     -0.496683      0.496683       52.6465       53.1432    
  24  0.114784E-01  -4.46729      -4.82717       4.82717       52.2353       57.0624    
  25  0.549681     -0.598417     -0.646625      0.646625       52.8251       53.4717    
  26  0.846433     -0.166725     -0.180156      0.180156       52.9926       53.1728    
  27  0.441841     -0.816805     -0.882606      0.882606       53.9460       54.8286    
  28  0.299100      -1.20698      -1.30421       1.30421       53.3520       54.6562    
  29  0.378130     -0.972517      -1.05086       1.05086       53.1301       54.1809    
  30  0.830469     -0.185764     -0.200729      0.200729       53.7200       53.9207    
  31  0.675108     -0.392883     -0.424533      0.424533       53.7626       54.1871    
  32  0.997619     -0.238377E-02 -0.257580E-02  0.257580E-02   53.1638       53.1664    
  33  0.897623     -0.108005     -0.116706      0.116706       52.6144       52.7311    
  34  0.591811E-01  -2.82715      -3.05491       3.05491       53.7092       56.7641    
  35  0.229825      -1.47044      -1.58889       1.58889       53.7173       55.3062    
  36  0.654017     -0.424622     -0.458829      0.458829       54.0860       54.5448    
  37  0.305777      -1.18490      -1.28036       1.28036       54.4677       55.7481    
  38  0.936135     -0.659954E-01 -0.713120E-01  0.713120E-01   54.3964       54.4677    
  39  0.698153     -0.359317     -0.388263      0.388263       53.6835       54.0718    
  40  0.829975     -0.186360     -0.201373      0.201373       54.1850       54.3864    
  41  0.951351     -0.498721E-01 -0.538897E-01  0.538897E-01   52.8045       52.8584    
  42  0.883299     -0.124092     -0.134089      0.134089       55.2042       55.3383    
  43  0.910087     -0.942154E-01 -0.101805      0.101805       52.3736       52.4754    
  44  0.590840     -0.526210     -0.568601      0.568601       55.2066       55.7752    
  45  0.146785      -1.91879      -2.07336       2.07336       54.3037       56.3770    
  46  0.830381E-01  -2.48846      -2.68892       2.68892       53.3087       55.9976    
  47  0.289482      -1.23966      -1.33953       1.33953       55.3763       56.7159    
  48  0.594462     -0.520098     -0.561997      0.561997       54.2023       54.7643    
  49  0.241311      -1.42167      -1.53619       1.53619       54.5829       56.1191    
  50  0.612368     -0.490422     -0.529930      0.529930       55.1919       55.7219    
  51  0.952207     -0.489727E-01 -0.529179E-01  0.529179E-01   55.8302       55.8831    
  52  0.857144     -0.154149     -0.166567      0.166567       51.6848       51.8513    
loop,thermsimp(1:2)       23  0.177704      0.177553    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304         52.94          1.01          0.99         23.85          0.48          0.05         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.94
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       23
neval is:      303
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       24
neval is:      303


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      303     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253      -2.46641       2.46641       49.9081       52.3745    
   2  0.372115     -0.988552      -1.06819       1.06819       50.8055       51.8737    
   3  0.732875     -0.310780     -0.335816      0.335816       51.5633       51.8991    
   4  0.341646      -1.07398      -1.16050       1.16050       51.6848       52.8453    
   5  0.406512     -0.900141     -0.972656      0.972656       51.6934       52.6660    
   6  0.271848      -1.30251      -1.40744       1.40744       52.3116       53.7190    
   7  0.738418     -0.303245     -0.327674      0.327674       51.4040       51.7316    
   8  0.903199     -0.101813     -0.110015      0.110015       51.6333       51.7433    
   9  0.511789     -0.669842     -0.723804      0.723804       52.3736       53.0974    
  10  0.202674      -1.59616      -1.72474       1.72474       52.4471       54.1718    
  11  0.325695      -1.12179      -1.21217       1.21217       52.6144       53.8265    
  12  0.719720     -0.328893     -0.355388      0.355388       52.4794       52.8348    
  13  0.715609     -0.334622     -0.361579      0.361579       52.4090       52.7705    
  14  0.973328     -0.270339E-01 -0.292118E-01  0.292118E-01   52.8045       52.8337    
  15  0.373998     -0.983504      -1.06273       1.06273       52.6989       53.7616    
  16  0.977965     -0.222815E-01 -0.240765E-01  0.240765E-01   52.6465       52.6706    
  17  0.105495      -2.24909      -2.43028       2.43028       53.1638       55.5941    
  18  0.729809     -0.314973     -0.340347      0.340347       52.9926       53.3330    
  19  0.378008     -0.972839      -1.05121       1.05121       51.9395       52.9907    
  20  0.678326     -0.388127     -0.419394      0.419394       53.3113       53.7307    
  21  0.671993     -0.397507     -0.429530      0.429530       51.3462       51.7757    
  22  0.515926     -0.661792     -0.715106      0.715106       52.8251       53.5402    
  23  0.363490      -1.01200      -1.09353       1.09353       53.5157       54.6092    
  24  0.206319      -1.57833      -1.70548       1.70548       53.2960       55.0015    
  25  0.755157E-01  -2.58341      -2.79153       2.79153       53.7200       56.5115    
  26  0.413763     -0.882461     -0.953552      0.953552       53.3415       54.2951    
  27  0.279023      -1.27646      -1.37929       1.37929       53.6835       55.0628    
  28  0.506422     -0.680385     -0.735196      0.735196       53.1301       53.8653    
  29  0.643082E-02  -5.04665      -5.45321       5.45321       53.7626       59.2158    
  30  0.285888E-01  -3.55474      -3.84111       3.84111       51.9477       55.7888    
  31  0.660419     -0.414880     -0.448302      0.448302       52.5065       52.9548    
  32  0.739369     -0.301959     -0.326284      0.326284       54.1850       54.5113    
  33  0.270269      -1.30834      -1.41374       1.41374       52.7564       54.1701    
  34  0.663889     -0.409640     -0.442640      0.442640       54.3964       54.8391    
  35  0.898739E-01  -2.40935      -2.60344       2.60344       54.0860       56.6894    
  36  0.832427     -0.183410     -0.198185      0.198185       53.3520       53.5502    
  37  0.723106     -0.324200     -0.350317      0.350317       54.2023       54.5526    
  38  0.986274     -0.138207E-01 -0.149341E-01  0.149341E-01   53.9460       53.9609    
  39  0.812861     -0.207195     -0.223886      0.223886       52.1572       52.3811    
  40  0.553236     -0.591971     -0.639660      0.639660       53.7173       54.3569    
  41  0.693785E-01  -2.66818      -2.88312       2.88312       55.2042       58.0873    
  42  0.117256      -2.14340      -2.31607       2.31607       55.1919       57.5080    
  43  0.807809     -0.213430     -0.230623      0.230623       54.4677       54.6984    
  44  0.900249     -0.105084     -0.113549      0.113549       55.2066       55.3202    
  45  0.753470     -0.283066     -0.305869      0.305869       55.8302       56.1361    
  46  0.127159      -2.06232      -2.22846       2.22846       53.3087       55.5371    
  47  0.535389     -0.624762     -0.675092      0.675092       54.5829       55.2580    
  48  0.957281     -0.436582E-01 -0.471752E-01  0.471752E-01   52.1205       52.1677    
  49  0.227700      -1.47973      -1.59893       1.59893       54.3037       55.9026    
  50  0.636404     -0.451921     -0.488328      0.488328       55.3763       55.8647    
  51  0.905015     -0.998042E-01 -0.107844      0.107844       53.7092       53.8170    
  52  0.555191     -0.588444     -0.635848      0.635848       52.9439       53.5798    
loop,thermsimp(1:2)       24   2.46641       1.06819    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    305         51.80          1.04          0.99         23.73          0.66          0.06         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    306         57.57          1.01          1.00         24.28          0.07          0.05         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       24
neval is:      305
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       25
neval is:      305


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      305     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.409839E-01  0.409839E-01   51.4040       51.4449    
   2  0.355374      -1.03458      -1.11793       1.11793       51.6333       52.7512    
   3  0.294461      -1.22261      -1.32110       1.32110       51.3462       52.6673    
   4  0.644538     -0.439222     -0.474605      0.474605       50.8055       51.2801    
   5  0.741622     -0.298915     -0.322996      0.322996       51.5633       51.8863    
   6  0.805913E-01  -2.51837      -2.72124       2.72124       52.1205       54.8418    
   7  0.498180     -0.696794     -0.752927      0.752927       49.9081       50.6610    
   8  0.771004     -0.260061     -0.281011      0.281011       52.1572       52.4382    
   9  0.753480     -0.283053     -0.305855      0.305855       51.6934       51.9992    
  10  0.460525     -0.775387     -0.837852      0.837852       52.6465       53.4844    
  11  0.918626     -0.848759E-01 -0.917134E-01  0.917134E-01   52.4090       52.5007    
  12  0.355379      -1.03457      -1.11791       1.11791       52.8045       53.9224    
  13  0.664646     -0.408501     -0.441410      0.441410       52.4794       52.9209    
  14  0.328018      -1.11469      -1.20449       1.20449       51.6848       52.8892    
  15  0.529583     -0.635665     -0.686874      0.686874       52.5065       53.1934    
  16  0.259823      -1.34775      -1.45633       1.45633       51.9395       53.3959    
  17  0.463690E-01  -3.07112      -3.31853       3.31853       52.3736       55.6921    
  18  0.366509      -1.00373      -1.08459       1.08459       52.9926       54.0772    
  19  0.794534     -0.229999     -0.248528      0.248528       52.8251       53.0736    
  20  0.669373     -0.401413     -0.433751      0.433751       53.3520       53.7857    
  21  0.798901     -0.224518     -0.242605      0.242605       52.9439       53.1865    
  22  0.610403     -0.493636     -0.533403      0.533403       52.3116       52.8450    
  23  0.267818      -1.31745      -1.42358       1.42358       53.3113       54.7348    
  24  0.663049     -0.410906     -0.444008      0.444008       52.6989       53.1429    
  25  0.782871     -0.244788     -0.264508      0.264508       53.7092       53.9737    
  26  0.706545     -0.347368     -0.375352      0.375352       52.6144       52.9897    
  27  0.120119      -2.11927      -2.29000       2.29000       53.1301       55.4201    
  28  0.270575      -1.30721      -1.41251       1.41251       53.9460       55.3585    
  29  0.505391     -0.682422     -0.737398      0.737398       52.7564       53.4938    
  30  0.665734     -0.406865     -0.439641      0.439641       52.4471       52.8867    
  31  0.836788     -0.178185     -0.192539      0.192539       53.3415       53.5341    
  32  0.866983     -0.142736     -0.154235      0.154235       53.7173       53.8715    
  33  0.552904     -0.592571     -0.640308      0.640308       54.1850       54.8254    
  34  0.554153     -0.590314     -0.637870      0.637870       54.2023       54.8402    
  35  0.592407E-01  -2.82615      -3.05382       3.05382       53.5157       56.5695    
  36  0.902163     -0.102960     -0.111254      0.111254       54.4677       54.5790    
  37  0.266638E-01  -3.62445      -3.91643       3.91643       54.3964       58.3129    
  38  0.897053     -0.108640     -0.117392      0.117392       53.2960       53.4134    
  39  0.840496     -0.173763     -0.187761      0.187761       53.6835       53.8712    
  40  0.288358      -1.24355      -1.34373       1.34373       54.5829       55.9266    
  41  0.835972E-01  -2.48175      -2.68167       2.68167       55.2066       57.8883    
  42  0.412070     -0.886563     -0.957984      0.957984       53.3087       54.2667    
  43  0.725010     -0.321570     -0.347475      0.347475       53.1638       53.5113    
  44  0.316556      -1.15026      -1.24292       1.24292       51.9477       53.1906    
  45  0.486178     -0.721181     -0.779279      0.779279       55.3763       56.1556    
  46  0.143341      -1.94253      -2.09902       2.09902       54.3037       56.4027    
  47  0.956913     -0.440430E-01 -0.475911E-01  0.475911E-01   55.8302       55.8778    
  48  0.362697      -1.01419      -1.09589       1.09589       53.7200       54.8159    
  49  0.951746     -0.494572E-01 -0.534415E-01  0.534415E-01   54.0860       54.1394    
  50  0.511140     -0.671112     -0.725176      0.725176       55.1919       55.9171    
  51  0.364891E-01  -3.31074      -3.57745       3.57745       55.2042       58.7816    
  52  0.377076     -0.975308      -1.05388       1.05388       51.7952       52.8490    
loop,thermsimp(1:2)       25  0.409839E-01   1.11793    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    307         51.77          1.13          1.00         24.00          0.34          0.06         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       25
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       26
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      307
neval,tstepnext:      306     307

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.135663E-01  0.135663E-01   49.9081       49.9217    
   2  0.516099     -0.661457     -0.714744      0.714744       50.8055       51.5203    
   3  0.202206      -1.59847      -1.72724       1.72724       51.4040       53.1312    
   4  0.240260      -1.42603      -1.54091       1.54091       51.5633       53.1042    
   5  0.717263E-01  -2.63490      -2.84716       2.84716       51.6934       54.5405    
   6  0.395382     -0.927902      -1.00265       1.00265       52.1572       53.1599    
   7  0.494348     -0.704516     -0.761272      0.761272       52.4090       53.1702    
   8  0.970815     -0.296196E-01 -0.320058E-01  0.320058E-01   51.3462       51.3782    
   9  0.992795     -0.723105E-02 -0.781358E-02  0.781358E-02   51.6333       51.6411    
  10  0.387320     -0.948503      -1.02491       1.02491       52.3116       53.3365    
  11  0.586568     -0.533466     -0.576442      0.576442       51.7952       52.3716    
  12  0.119144      -2.12742      -2.29881       2.29881       52.4471       54.7459    
  13  0.145144      -1.93003      -2.08551       2.08551       51.6848       53.7703    
  14  0.767931     -0.264056     -0.285328      0.285328       52.4794       52.7648    
  15  0.415014     -0.879442     -0.950289      0.950289       52.6144       53.5647    
  16  0.994477     -0.553801E-02 -0.598414E-02  0.598414E-02   52.8251       52.8311    
  17  0.757243     -0.278071     -0.300473      0.300473       52.6989       52.9994    
  18  0.669290     -0.401537     -0.433885      0.433885       52.9439       53.3778    
  19  0.112026      -2.18903      -2.36537       2.36537       51.9477       54.3131    
  20  0.434244     -0.834148     -0.901347      0.901347       52.5065       53.4078    
  21  0.491828     -0.709627     -0.766794      0.766794       51.9395       52.7063    
  22  0.517535     -0.658677     -0.711740      0.711740       53.2960       54.0078    
  23  0.411147     -0.888804     -0.960406      0.960406       52.6465       53.6069    
  24  0.250164      -1.38564      -1.49726       1.49726       52.7564       54.2537    
  25  0.109742E-01  -4.51221      -4.87571       4.87571       53.1638       58.0395    
  26  0.559459     -0.580786     -0.627573      0.627573       53.3415       53.9691    
  27  0.289677      -1.23899      -1.33880       1.33880       53.3520       54.6908    
  28  0.835809     -0.179356     -0.193804      0.193804       53.6835       53.8773    
  29  0.236182      -1.44315      -1.55941       1.55941       53.7173       55.2767    
  30  0.700988     -0.355264     -0.383884      0.383884       52.8045       53.1884    
  31  0.886914     -0.120007     -0.129675      0.129675       53.7092       53.8389    
  32  0.182911      -1.69875      -1.83560       1.83560       52.9926       54.8282    
  33  0.693089     -0.366597     -0.396130      0.396130       54.0860       54.4821    
  34  0.108523      -2.22079      -2.39969       2.39969       53.3087       55.7084    
  35  0.141600      -1.95475      -2.11222       2.11222       54.4677       56.5800    
  36  0.168348E-01  -4.08431      -4.41334       4.41334       53.3113       57.7246    
  37  0.419419E-01  -3.17147      -3.42696       3.42696       53.7200       57.1469    
  38  0.244896      -1.40692      -1.52026       1.52026       54.1850       55.7053    
  39  0.360662      -1.01981      -1.10197       1.10197       54.2023       55.3043    
  40  0.927013     -0.757879E-01 -0.818933E-01  0.818933E-01   52.1205       52.2024    
  41  0.869067     -0.140335     -0.151640      0.151640       53.9460       54.0976    
  42  0.827083     -0.189851     -0.205145      0.205145       53.1301       53.3352    
  43  0.928403     -0.742893E-01 -0.802740E-01  0.802740E-01   52.3736       52.4538    
  44  0.513193     -0.667103     -0.720845      0.720845       55.8302       56.5511    
  45  0.809080     -0.211858     -0.228925      0.228925       55.1919       55.4209    
  46  0.341224E-02  -5.68039      -6.13799       6.13799       54.5829       60.7209    
  47  0.734431     -0.308659     -0.333524      0.333524       55.3763       55.7099    
  48  0.688454     -0.373307     -0.403381      0.403381       54.3037       54.7071    
  49  0.990614     -0.943067E-02 -0.101904E-01  0.101904E-01   53.5157       53.5259    
  50  0.143408      -1.94206      -2.09851       2.09851       55.2066       57.3051    
  51  0.868596     -0.140878     -0.152227      0.152227       54.3964       54.5487    
  52  0.244103      -1.41016      -1.52377       1.52377       51.7687       53.2924    
loop,thermsimp(1:2)       26  0.135663E-01  0.714744    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308         51.23          1.20          1.01         24.13          0.13          0.07         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    309         52.64          1.03          1.00         24.10          0.21          0.05         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.08056               307
loop is:       26
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:    1.08056               307
loop is:       27
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.540280               358

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      308     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140     -0.870604      0.870604       49.9081       50.7787    
   2  0.983274     -0.168677E-01 -0.911325E-02  0.911325E-02   51.3462       51.3553    
   3  0.569108     -0.563685     -0.304547      0.304547       50.8055       51.1101    
   4  0.411179     -0.888728     -0.480161      0.480161       51.6333       52.1134    
   5  0.889241     -0.117387     -0.634215E-01  0.634215E-01   52.1205       52.1840    
   6  0.109537      -2.21149      -1.19483       1.19483       51.7952       52.9900    
   7  0.658027     -0.418509     -0.226112      0.226112       52.3736       52.5997    
   8  0.427534     -0.849722     -0.459087      0.459087       51.9395       52.3986    
   9  0.277803      -1.28084     -0.692012      0.692012       52.4794       53.1715    
  10  0.568421     -0.564892     -0.305200      0.305200       52.8251       53.1303    
  11  0.368489     -0.998346     -0.539386      0.539386       52.6989       53.2383    
  12  0.100945E-01  -4.59576      -2.48300       2.48300       51.5633       54.0463    
  13  0.811445     -0.208939     -0.112885      0.112885       51.4040       51.5168    
  14  0.135138      -2.00146      -1.08135       1.08135       52.1572       53.2386    
  15  0.600340     -0.510258     -0.275682      0.275682       52.4090       52.6847    
  16  0.537538     -0.620755     -0.335381      0.335381       52.8045       53.1399    
  17  0.923261     -0.798434E-01 -0.431377E-01  0.431377E-01   51.7687       51.8118    
  18  0.296505      -1.21569     -0.656814      0.656814       53.1301       53.7869    
  19  0.975666     -0.246348E-01 -0.133097E-01  0.133097E-01   52.3116       52.3249    
  20  0.102971      -2.27331      -1.22822       1.22822       52.9439       54.1721    
  21  0.110137      -2.20603      -1.19187       1.19187       52.5065       53.6984    
  22  0.874539     -0.134058     -0.724289E-01  0.724289E-01   53.5157       53.5881    
  23  0.887507     -0.119339     -0.644766E-01  0.644766E-01   52.6144       52.6789    
  24  0.811767     -0.208543     -0.112671      0.112671       52.6465       52.7592    
  25  0.304283      -1.18980     -0.642823      0.642823       51.6848       52.3276    
  26  0.304144      -1.19025     -0.643070      0.643070       53.7092       54.3523    
  27  0.854538     -0.157194     -0.849287E-01  0.849287E-01   53.6835       53.7684    
  28  0.543001     -0.610645     -0.329919      0.329919       53.3415       53.6714    
  29  0.808766     -0.212246     -0.114672      0.114672       53.2960       53.4107    
  30  0.286176      -1.25115     -0.675970      0.675970       53.9460       54.6220    
  31  0.328161      -1.11425     -0.602006      0.602006       52.7564       53.3584    
  32  0.563264     -0.574006     -0.310124      0.310124       51.9477       52.2578    
  33  0.180895      -1.70984     -0.923791      0.923791       54.0860       55.0098    
  34  0.977796     -0.224538E-01 -0.121313E-01  0.121313E-01   51.6934       51.7055    
  35  0.650784     -0.429577     -0.232092      0.232092       54.3964       54.6285    
  36  0.350586      -1.04815     -0.566293      0.566293       53.3520       53.9183    
  37  0.852996E-01  -2.46159      -1.32994       1.32994       54.3037       55.6336    
  38  0.363921      -1.01082     -0.546125      0.546125       52.4471       52.9932    
  39  0.715496E-01  -2.63737      -1.42491       1.42491       52.9926       54.4176    
  40  0.540542     -0.615184     -0.332371      0.332371       53.7173       54.0496    
  41  0.458744E-02  -5.38443      -2.90910       2.90910       54.2023       57.1114    
  42  0.684509     -0.379054     -0.204795      0.204795       55.1919       55.3967    
  43  0.827193     -0.189717     -0.102500      0.102500       54.1850       54.2875    
  44  0.430712     -0.842315     -0.455086      0.455086       53.3087       53.7638    
  45  0.925073     -0.778822E-01 -0.420782E-01  0.420782E-01   55.3763       55.4184    
  46  0.139567      -1.96921      -1.06393       1.06393       55.8302       56.8941    
  47  0.905138     -0.996680E-01 -0.538486E-01  0.538486E-01   54.4677       54.5216    
  48  0.230323      -1.46827     -0.793277      0.793277       53.7200       54.5132    
  49  0.854981     -0.156676     -0.846487E-01  0.846487E-01   55.2066       55.2913    
  50  0.526676     -0.641170     -0.346411      0.346411       53.3113       53.6577    
  51  0.425904     -0.853542     -0.461151      0.461151       53.1638       53.6249    
  52  0.770395     -0.260852     -0.140933      0.140933       51.2345       51.3754    
loop,thermsimp(1:2)       27  0.870604      0.911325E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310         51.72          1.03          0.99         23.70          0.64          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       27
neval is:      309
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       28
neval is:      309


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      309     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246     -0.790137      0.790137       49.9081       50.6982    
   2  0.922423     -0.807516E-01 -0.436285E-01  0.436285E-01   50.8055       50.8492    
   3  0.556007     -0.586974     -0.317130      0.317130       51.3462       51.6633    
   4  0.921345     -0.819211E-01 -0.442603E-01  0.442603E-01   51.2345       51.2788    
   5  0.623358     -0.472635     -0.255355      0.255355       51.4040       51.6593    
   6  0.967150     -0.334012E-01 -0.180460E-01  0.180460E-01   51.6934       51.7114    
   7  0.239844      -1.42777     -0.771393      0.771393       51.7687       52.5401    
   8  0.707370     -0.346201     -0.187045      0.187045       51.6333       51.8203    
   9  0.375591     -0.979256     -0.529072      0.529072       52.1205       52.6496    
  10  0.164915      -1.80233     -0.973760      0.973760       51.9477       52.9215    
  11  0.634729     -0.454558     -0.245588      0.245588       52.3116       52.5572    
  12  0.956585     -0.443852E-01 -0.239804E-01  0.239804E-01   51.6848       51.7087    
  13  0.281051      -1.26922     -0.685733      0.685733       51.9395       52.6253    
  14  0.332446      -1.10128     -0.594998      0.594998       52.3736       52.9686    
  15  0.417901     -0.872510     -0.471400      0.471400       52.6144       53.0858    
  16  0.454459     -0.788647     -0.426090      0.426090       52.4090       52.8351    
  17  0.163150      -1.81309     -0.979574      0.979574       52.6465       53.6261    
  18  0.412675     -0.885095     -0.478199      0.478199       51.7952       52.2734    
  19  0.510076     -0.673195     -0.363714      0.363714       52.4471       52.8108    
  20  0.159872E-02  -6.43855      -3.47862       3.47862       52.8251       56.3037    
  21  0.279094      -1.27620     -0.689507      0.689507       52.8045       53.4940    
  22  0.229843E-01  -3.77294      -2.03844       2.03844       52.4794       54.5179    
  23  0.829240E-02  -4.79242      -2.58924       2.58924       52.6989       55.2881    
  24  0.722732     -0.324717     -0.175438      0.175438       52.1572       52.3326    
  25  0.399402     -0.917787     -0.495862      0.495862       52.7564       53.2523    
  26  0.321457      -1.13489     -0.613159      0.613159       53.2960       53.9092    
  27  0.103147      -2.27160      -1.22730       1.22730       53.5157       54.7430    
  28  0.488570     -0.716273     -0.386988      0.386988       53.1638       53.5508    
  29  0.775391     -0.254388     -0.137441      0.137441       53.3113       53.4487    
  30  0.264831      -1.32866     -0.717850      0.717850       53.3415       54.0594    
  31  0.291634      -1.23225     -0.665762      0.665762       52.5065       53.1723    
  32  0.754799E-02  -4.88647      -2.64006       2.64006       53.3087       55.9487    
  33  0.403715     -0.907047     -0.490059      0.490059       53.6835       54.1735    
  34  0.794963     -0.229460     -0.123973      0.123973       53.1301       53.2541    
  35  0.482612E-01  -3.03113      -1.63766       1.63766       53.3520       54.9897    
  36  0.309506      -1.17278     -0.633627      0.633627       51.5633       52.1969    
  37  0.265676      -1.32548     -0.716128      0.716128       53.7173       54.4334    
  38  0.793358     -0.231480     -0.125064      0.125064       52.9439       53.0690    
  39  0.603192E-01  -2.80811      -1.51716       1.51716       54.1850       55.7022    
  40  0.516664     -0.660363     -0.356781      0.356781       53.7092       54.0660    
  41  0.524892E-01  -2.94715      -1.59228       1.59228       52.9926       54.5849    
  42  0.581500     -0.542144     -0.292909      0.292909       53.7200       54.0129    
  43  0.403805     -0.906823     -0.489938      0.489938       54.4677       54.9577    
  44  0.447829     -0.803344     -0.434030      0.434030       53.9460       54.3800    
  45  0.470604     -0.753737     -0.407229      0.407229       54.3964       54.8037    
  46  0.479088     -0.735871     -0.397576      0.397576       54.0860       54.4836    
  47  0.959223     -0.416322E-01 -0.224930E-01  0.224930E-01   55.2066       55.2291    
  48  0.527403     -0.639789     -0.345665      0.345665       55.1919       55.5376    
  49  0.731687     -0.312402     -0.168785      0.168785       55.3763       55.5451    
  50  0.682707     -0.381689     -0.206219      0.206219       54.3037       54.5099    
  51  0.386616     -0.950322     -0.513440      0.513440       55.8302       56.3436    
  52  0.120332      -2.11750      -1.14404       1.14404       51.7185       52.8625    
loop,thermsimp(1:2)       28  0.790137      0.436285E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    311         52.85          1.03          1.00         23.69          0.53          0.05         26.30
Just calling func    0   0         26.30


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.85
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       28
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       29
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      310     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247     -0.595641      0.595641       49.9081       50.5037    
   2  0.991191     -0.884791E-02 -0.478034E-02  0.478034E-02   50.8055       50.8103    
   3  0.752830     -0.283916     -0.153394      0.153394       51.2345       51.3879    
   4  0.718872     -0.330071     -0.178331      0.178331       51.4040       51.5823    
   5  0.362244      -1.01544     -0.548621      0.548621       51.3462       51.8948    
   6  0.993342E-01  -2.30927      -1.24765       1.24765       51.6848       52.9324    
   7  0.734379     -0.308729     -0.166800      0.166800       51.6934       51.8602    
   8  0.190509      -1.65806     -0.895814      0.895814       51.6333       52.5291    
   9  0.113713      -2.17408      -1.17461       1.17461       51.5633       52.7379    
  10  0.582158     -0.541014     -0.292299      0.292299       51.7952       52.0875    
  11  0.100405E-01  -4.60113      -2.48590       2.48590       52.1572       54.6431    
  12  0.614877     -0.486333     -0.262756      0.262756       51.7687       52.0314    
  13  0.996806     -0.319890E-02 -0.172830E-02  0.172830E-02   52.3116       52.3133    
  14  0.439871E-01  -3.12386      -1.68776       1.68776       51.9395       53.6273    
  15  0.610456     -0.493549     -0.266654      0.266654       52.1205       52.3872    
  16  0.676471     -0.390866     -0.211177      0.211177       52.4471       52.6582    
  17  0.263829      -1.33246     -0.719898      0.719898       52.4090       53.1289    
  18  0.761962     -0.271858     -0.146879      0.146879       51.7185       51.8654    
  19  0.405295     -0.903140     -0.487948      0.487948       51.9477       52.4356    
  20  0.184680      -1.68913     -0.912604      0.912604       52.3736       53.2862    
  21  0.695434     -0.363219     -0.196240      0.196240       52.9439       53.1402    
  22  0.597154     -0.515580     -0.278557      0.278557       52.6144       52.8929    
  23  0.254276      -1.36933     -0.739823      0.739823       52.5065       53.2463    
  24  0.777974     -0.251062     -0.135644      0.135644       52.7564       52.8920    
  25  0.597236     -0.515443     -0.278483      0.278483       53.1301       53.4086    
  26  0.658168     -0.418295     -0.225996      0.225996       53.3113       53.5373    
  27  0.917953     -0.856086E-01 -0.462526E-01  0.462526E-01   52.8045       52.8508    
  28  0.167567      -1.78637     -0.965141      0.965141       53.1638       54.1289    
  29  0.867739E-02  -4.74703      -2.56473       2.56473       52.6465       55.2112    
  30  0.157469      -1.84853     -0.998723      0.998723       53.2960       54.2947    
  31  0.947458     -0.539724E-01 -0.291602E-01  0.291602E-01   53.7200       53.7491    
  32  0.883772     -0.123556     -0.667547E-01  0.667547E-01   53.3415       53.4083    
  33  0.873100     -0.135705     -0.733185E-01  0.733185E-01   53.7092       53.7825    
  34  0.138043      -1.98019      -1.06985       1.06985       53.6835       54.7533    
  35  0.833185     -0.182500     -0.986008E-01  0.986008E-01   53.9460       54.0446    
  36  0.907894     -0.966275E-01 -0.522059E-01  0.522059E-01   53.7173       53.7695    
  37  0.858432     -0.152648     -0.824726E-01  0.824726E-01   54.0860       54.1684    
  38  0.192050      -1.65000     -0.891461      0.891461       54.3037       55.1951    
  39  0.890666     -0.115786     -0.625566E-01  0.625566E-01   52.4794       52.5420    
  40  0.389935     -0.941775     -0.508822      0.508822       52.9926       53.5015    
  41  0.842362     -0.171545     -0.926824E-01  0.926824E-01   53.5157       53.6083    
  42  0.143912      -1.93855      -1.04736       1.04736       54.3964       55.4438    
  43  0.678545     -0.387804     -0.209523      0.209523       54.4677       54.6773    
  44  0.621021     -0.476390     -0.257384      0.257384       53.3520       53.6094    
  45  0.533199     -0.628861     -0.339761      0.339761       55.2066       55.5464    
  46  0.891703     -0.114623     -0.619283E-01  0.619283E-01   52.6989       52.7608    
  47  0.675469     -0.392349     -0.211978      0.211978       55.1919       55.4039    
  48  0.757471     -0.277770     -0.150073      0.150073       55.3763       55.5264    
  49  0.855441     -0.156139     -0.843585E-01  0.843585E-01   54.1850       54.2694    
  50  0.737982     -0.303836     -0.164157      0.164157       53.3087       53.4728    
  51  0.630328     -0.461515     -0.249347      0.249347       52.8251       53.0745    
  52  0.701612     -0.354375     -0.191462      0.191462       52.8546       53.0461    
loop,thermsimp(1:2)       29  0.595641      0.478034E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312         51.08          1.02          0.99         23.94          0.41          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    313         56.57          0.99          1.00         24.22          0.06          0.05         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       29
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       30
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      312     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797     -0.998419      0.998419       49.9081       50.9065    
   2  0.553200     -0.592035     -0.319864      0.319864       50.8055       51.1254    
   3  0.825049     -0.192313     -0.103903      0.103903       51.2345       51.3384    
   4  0.767336     -0.264830     -0.143082      0.143082       51.4040       51.5470    
   5  0.966534     -0.340385E-01 -0.183903E-01  0.183903E-01   51.6934       51.7118    
   6  0.954430     -0.466410E-01 -0.251992E-01  0.251992E-01   51.7185       51.7437    
   7  0.780674     -0.247598     -0.133772      0.133772       51.3462       51.4800    
   8  0.312863      -1.16199     -0.627800      0.627800       51.7687       52.3965    
   9  0.990226     -0.982218E-02 -0.530672E-02  0.530672E-02   51.7952       51.8005    
  10  0.893872     -0.112193     -0.606153E-01  0.606153E-01   52.3116       52.3722    
  11  0.322320      -1.13221     -0.611709      0.611709       52.1205       52.7323    
  12  0.927465     -0.752997E-01 -0.406829E-01  0.406829E-01   51.9477       51.9884    
  13  0.539466     -0.617176     -0.333447      0.333447       51.6333       51.9667    
  14  0.461474     -0.773330     -0.417814      0.417814       52.4794       52.8973    
  15  0.745701     -0.293430     -0.158534      0.158534       52.4471       52.6056    
  16  0.703580     -0.351573     -0.189948      0.189948       51.5633       51.7532    
  17  0.917420E-01  -2.38878      -1.29061       1.29061       52.6989       53.9895    
  18  0.671661     -0.398001     -0.215032      0.215032       52.8045       53.0196    
  19  0.845179     -0.168207     -0.908788E-01  0.908788E-01   52.7564       52.8473    
  20  0.283605E-01  -3.56276      -1.92489       1.92489       52.6144       54.5393    
  21  0.108883E-01  -4.52006      -2.44210       2.44210       51.6848       54.1269    
  22  0.506006     -0.681208     -0.368043      0.368043       52.8546       53.2227    
  23  0.353918      -1.03869     -0.561184      0.561184       52.8251       53.3863    
  24  0.656862     -0.420282     -0.227070      0.227070       52.4090       52.6360    
  25  0.691560     -0.368806     -0.199258      0.199258       52.9439       53.1432    
  26  0.445402     -0.808779     -0.436967      0.436967       52.5065       52.9435    
  27  0.832700     -0.183081     -0.989151E-01  0.989151E-01   52.3736       52.4725    
  28  0.963063     -0.376360E-01 -0.203340E-01  0.203340E-01   53.3415       53.3619    
  29  0.422212     -0.862247     -0.465855      0.465855       53.1301       53.5959    
  30  0.917895     -0.856720E-01 -0.462868E-01  0.462868E-01   53.3087       53.3550    
  31  0.767210     -0.264994     -0.143171      0.143171       52.9926       53.1358    
  32  0.360836      -1.01933     -0.550724      0.550724       53.3113       53.8620    
  33  0.635930     -0.452667     -0.244567      0.244567       53.5157       53.7602    
  34  0.687292     -0.374995     -0.202602      0.202602       53.3520       53.5546    
  35  0.833832     -0.181724     -0.981817E-01  0.981817E-01   51.9395       52.0377    
  36  0.362075      -1.01590     -0.548873      0.548873       53.7200       54.2688    
  37  0.385764     -0.952530     -0.514633      0.514633       53.7173       54.2319    
  38  0.752556     -0.284279     -0.153590      0.153590       53.7092       53.8628    
  39  0.547433     -0.602515     -0.325526      0.325526       53.9460       54.2715    
  40  0.171004      -1.76607     -0.954171      0.954171       53.1638       54.1180    
  41  0.159022      -1.83871     -0.993418      0.993418       54.0860       55.0794    
  42  0.850806     -0.161571     -0.872933E-01  0.872933E-01   54.1850       54.2723    
  43  0.926075     -0.768001E-01 -0.414935E-01  0.414935E-01   53.2960       53.3375    
  44  0.584885     -0.536340     -0.289773      0.289773       52.1572       52.4470    
  45  0.547650     -0.602120     -0.325313      0.325313       54.4677       54.7931    
  46  0.864296     -0.145840     -0.787945E-01  0.787945E-01   53.6835       53.7623    
  47  0.384639     -0.955450     -0.516210      0.516210       54.3037       54.8199    
  48  0.359776      -1.02227     -0.552314      0.552314       52.6465       53.1988    
  49  0.147032      -1.91711      -1.03577       1.03577       55.1919       56.2277    
  50  0.649806     -0.431082     -0.232905      0.232905       54.3964       54.6293    
  51  0.909946     -0.943695E-01 -0.509859E-01  0.509859E-01   55.3763       55.4273    
  52  0.740699     -0.300161     -0.162171      0.162171       51.0834       51.2456    
loop,thermsimp(1:2)       30  0.998419      0.319864    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314         51.95          1.02          0.99         23.78          0.57          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.95
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       30
neval is:      313
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       31
neval is:      313


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      313     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189     -0.692579      0.692579       49.9081       50.6007    
   2  0.202445      -1.59728     -0.862980      0.862980       50.8055       51.6685    
   3  0.927152     -0.756373E-01 -0.408653E-01  0.408653E-01   51.0834       51.1243    
   4  0.403144     -0.908460     -0.490823      0.490823       51.2345       51.7253    
   5  0.791838     -0.233398     -0.126100      0.126100       51.3462       51.4723    
   6  0.292576      -1.22903     -0.664019      0.664019       51.4040       52.0680    
   7  0.135578      -1.99821      -1.07959       1.07959       51.6934       52.7730    
   8  0.516570     -0.660545     -0.356879      0.356879       51.7185       52.0754    
   9  0.730579     -0.313918     -0.169603      0.169603       51.5633       51.7329    
  10  0.508248     -0.676786     -0.365654      0.365654       51.7952       52.1608    
  11  0.928455     -0.742338E-01 -0.401070E-01  0.401070E-01   51.6333       51.6734    
  12  0.696477     -0.361721     -0.195430      0.195430       51.9477       52.1431    
  13  0.465556     -0.764522     -0.413056      0.413056       51.9395       52.3526    
  14  0.194653      -1.63654     -0.884187      0.884187       52.3116       53.1958    
  15  0.650312     -0.430303     -0.232484      0.232484       51.7687       52.0012    
  16  0.555802     -0.587343     -0.317329      0.317329       52.1572       52.4745    
  17  0.985517     -0.145893E-01 -0.788230E-02  0.788230E-02   52.3736       52.3815    
  18  0.923066     -0.800544E-01 -0.432517E-01  0.432517E-01   52.4471       52.4903    
  19  0.658765     -0.417388     -0.225506      0.225506       52.4090       52.6345    
  20  0.197878      -1.62010     -0.875309      0.875309       52.1205       52.9959    
  21  0.449673     -0.799236     -0.431811      0.431811       52.7564       53.1882    
  22  0.208093      -1.56977     -0.848116      0.848116       52.4794       53.3276    
  23  0.102791      -2.27506      -1.22917       1.22917       52.5065       53.7357    
  24  0.650538     -0.429955     -0.232296      0.232296       52.8045       53.0368    
  25  0.223365      -1.49895     -0.809851      0.809851       52.9926       53.8025    
  26  0.520729     -0.652525     -0.352546      0.352546       52.9439       53.2965    
  27  0.919707E-01  -2.38629      -1.28926       1.28926       52.6465       53.9358    
  28  0.788427     -0.237716     -0.128433      0.128433       52.8546       52.9831    
  29  0.395754     -0.926961     -0.500818      0.500818       53.2960       53.7968    
  30  0.903388     -0.101603     -0.548942E-01  0.548942E-01   53.3087       53.3636    
  31  0.569415     -0.563145     -0.304256      0.304256       53.3415       53.6458    
  32  0.974677     -0.256496E-01 -0.138580E-01  0.138580E-01   52.8251       52.8390    
  33  0.376411     -0.977073     -0.527893      0.527893       53.3520       53.8799    
  34  0.309090      -1.17412     -0.634355      0.634355       53.1301       53.7644    
  35  0.248039      -1.39417     -0.753242      0.753242       53.5157       54.2689    
  36  0.941329     -0.604621E-01 -0.326665E-01  0.326665E-01   53.6835       53.7162    
  37  0.131879      -2.02587      -1.09454       1.09454       53.3113       54.4058    
  38  0.188022      -1.67120     -0.902914      0.902914       53.7092       54.6121    
  39  0.898649E-01  -2.40945      -1.30178       1.30178       52.6989       54.0007    
  40  0.853893     -0.157949     -0.853366E-01  0.853366E-01   53.1638       53.2491    
  41  0.643577     -0.440714     -0.238109      0.238109       51.6848       51.9229    
  42  0.664391     -0.408885     -0.220912      0.220912       53.7173       53.9382    
  43  0.825262     -0.192054     -0.103763      0.103763       53.7200       53.8237    
  44  0.611498     -0.491843     -0.265733      0.265733       53.9460       54.2117    
  45  0.284000      -1.25878     -0.680093      0.680093       54.1850       54.8651    
  46  0.108174      -2.22402      -1.20159       1.20159       52.6144       53.8160    
  47  0.293070      -1.22734     -0.663109      0.663109       54.3964       55.0595    
  48  0.412045     -0.886623     -0.479024      0.479024       54.4677       54.9468    
  49  0.464041     -0.767783     -0.414818      0.414818       54.3037       54.7185    
  50  0.711768     -0.340003     -0.183697      0.183697       54.0860       54.2697    
  51  0.919970     -0.834138E-01 -0.450668E-01  0.450668E-01   55.3763       55.4214    
  52  0.551321     -0.595437     -0.321703      0.321703       51.9465       52.2682    
loop,thermsimp(1:2)       31  0.692579      0.862980    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    315         50.60          1.02          0.99         23.95          0.36          0.05         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    316         57.32          0.96          0.99         23.95          0.37          0.06         26.33
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.60
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       31
neval is:      315
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       32
neval is:      315


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      315     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759     -0.191669      0.191669       49.9081       50.0998    
   2  0.779682     -0.248869     -0.134459      0.134459       51.0834       51.2179    
   3  0.611645     -0.491604     -0.265604      0.265604       51.3462       51.6118    
   4  0.380626     -0.965937     -0.521876      0.521876       50.8055       51.3274    
   5  0.986599     -0.134915E-01 -0.728917E-02  0.728917E-02   51.6333       51.6405    
   6  0.699021     -0.358075     -0.193460      0.193460       51.2345       51.4280    
   7  0.981217E-01  -2.32155      -1.25428       1.25428       51.5633       52.8176    
   8  0.221199      -1.50869     -0.815115      0.815115       51.6848       52.4999    
   9  0.802460     -0.220073     -0.118901      0.118901       51.7687       51.8876    
  10  0.623430     -0.472519     -0.255292      0.255292       51.4040       51.6592    
  11  0.669862     -0.400684     -0.216481      0.216481       51.7185       51.9350    
  12  0.957999     -0.429090E-01 -0.231828E-01  0.231828E-01   51.9477       51.9709    
  13  0.569879E-01  -2.86492      -1.54786       1.54786       51.7952       53.3430    
  14  0.245244      -1.40550     -0.759364      0.759364       51.9465       52.7059    
  15  0.870123     -0.139121     -0.751642E-01  0.751642E-01   51.9395       52.0147    
  16  0.429679     -0.844716     -0.456383      0.456383       52.3736       52.8300    
  17  0.369880     -0.994577     -0.537350      0.537350       52.1572       52.6946    
  18  0.964882     -0.357490E-01 -0.193145E-01  0.193145E-01   52.4471       52.4664    
  19  0.625983     -0.468432     -0.253084      0.253084       52.4090       52.6621    
  20  0.508652     -0.675991     -0.365224      0.365224       51.6934       52.0586    
  21  0.694697     -0.364279     -0.196812      0.196812       52.8251       53.0219    
  22  0.817819     -0.201114     -0.108658      0.108658       52.8546       52.9633    
  23  0.655732     -0.422003     -0.228000      0.228000       52.1205       52.3485    
  24  0.658757     -0.417401     -0.225513      0.225513       52.8045       53.0300    
  25  0.325934      -1.12106     -0.605686      0.605686       52.7564       53.3621    
  26  0.849137     -0.163535     -0.883545E-01  0.883545E-01   52.3116       52.3999    
  27  0.953435     -0.476843E-01 -0.257629E-01  0.257629E-01   53.1638       53.1896    
  28  0.435049     -0.832297     -0.449673      0.449673       52.9439       53.3936    
  29  0.155341E-01  -4.16472      -2.25011       2.25011       52.4794       54.7296    
  30  0.390095     -0.941364     -0.508600      0.508600       53.3087       53.8173    
  31  0.400867E-02  -5.51929      -2.98196       2.98196       53.3415       56.3235    
  32  0.989750     -0.103025E-01 -0.556624E-02  0.556624E-02   53.6835       53.6891    
  33  0.194149      -1.63913     -0.885587      0.885587       52.5065       53.3921    
  34  0.573547     -0.555915     -0.300349      0.300349       53.1301       53.4304    
  35  0.570216     -0.561740     -0.303497      0.303497       53.2960       53.5995    
  36  0.802122     -0.220494     -0.119129      0.119129       52.9926       53.1118    
  37  0.831214E-01  -2.48745      -1.34392       1.34392       52.6144       53.9583    
  38  0.280368      -1.27165     -0.687047      0.687047       53.7200       54.4070    
  39  0.568263     -0.565171     -0.305350      0.305350       53.3520       53.6573    
  40  0.570544     -0.561165     -0.303186      0.303186       52.6465       52.9497    
  41  0.524202     -0.645877     -0.348954      0.348954       53.7173       54.0662    
  42  0.625335E-01  -2.77205      -1.49768       1.49768       52.6989       54.1966    
  43  0.717146     -0.332476     -0.179630      0.179630       53.9460       54.1256    
  44  0.234175      -1.45169     -0.784317      0.784317       53.5157       54.3000    
  45  0.366320      -1.00425     -0.542575      0.542575       54.0860       54.6286    
  46  0.458915     -0.778891     -0.420819      0.420819       53.3113       53.7321    
  47  0.379536     -0.968806     -0.523426      0.523426       53.7092       54.2326    
  48  0.854466     -0.157278     -0.849743E-01  0.849743E-01   54.3037       54.3887    
  49  0.452738E-01  -3.09503      -1.67218       1.67218       54.1850       55.8572    
  50  0.966525     -0.340477E-01 -0.183953E-01  0.183953E-01   54.4677       54.4861    
  51  0.400949     -0.913920     -0.493772      0.493772       54.3964       54.8902    
  52  0.563096     -0.574305     -0.310285      0.310285       50.6018       50.9120    
loop,thermsimp(1:2)       32  0.191669      0.134459    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    317         51.25          1.20          1.03         24.01          0.23          0.06         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       32
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       33
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      316     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412     -0.489716      0.489716       49.9081       50.3978    
   2  0.598662     -0.513057     -0.277194      0.277194       50.6018       50.8790    
   3  0.165178      -1.80073     -0.972898      0.972898       51.0834       52.0563    
   4  0.785331     -0.241651     -0.130559      0.130559       50.8055       50.9361    
   5  0.422061     -0.862604     -0.466048      0.466048       51.2345       51.7005    
   6  0.343624      -1.06821     -0.577130      0.577130       51.3462       51.9233    
   7  0.988862     -0.112001E-01 -0.605118E-02  0.605118E-02   51.6333       51.6393    
   8  0.586093E-01  -2.83686      -1.53270       1.53270       51.4040       52.9367    
   9  0.324880      -1.12430     -0.607436      0.607436       51.7687       52.3761    
  10  0.869373     -0.139983     -0.756300E-01  0.756300E-01   51.7185       51.7941    
  11  0.314362      -1.15721     -0.625216      0.625216       51.9477       52.5729    
  12  0.635265     -0.453712     -0.245132      0.245132       51.9395       52.1847    
  13  0.800738     -0.222221     -0.120061      0.120061       51.6934       51.8134    
  14  0.234515      -1.45024     -0.783533      0.783533       52.1205       52.9041    
  15  0.818766     -0.199957     -0.108033      0.108033       52.3116       52.4196    
  16  0.480807     -0.732289     -0.395641      0.395641       52.4471       52.8427    
  17  0.173083      -1.75398     -0.947641      0.947641       51.6848       52.6324    
  18  0.544835     -0.607272     -0.328097      0.328097       52.4090       52.7371    
  19  0.955728     -0.452816E-01 -0.244647E-01  0.244647E-01   52.1572       52.1817    
  20  0.909631     -0.947157E-01 -0.511730E-01  0.511730E-01   51.9465       51.9977    
  21  0.538276     -0.619384     -0.334640      0.334640       51.5633       51.8979    
  22  0.640373     -0.445705     -0.240805      0.240805       52.3736       52.6144    
  23  0.588429     -0.530300     -0.286510      0.286510       52.6465       52.9330    
  24  0.954392     -0.466804E-01 -0.252204E-01  0.252204E-01   52.8546       52.8798    
  25  0.976738     -0.235363E-01 -0.127162E-01  0.127162E-01   52.8251       52.8378    
  26  0.801897     -0.220775     -0.119280      0.119280       52.8045       52.9238    
  27  0.679499     -0.386400     -0.208764      0.208764       52.9926       53.2014    
  28  0.303686      -1.19176     -0.643884      0.643884       53.1638       53.8077    
  29  0.907562     -0.969936E-01 -0.524036E-01  0.524036E-01   51.7952       51.8476    
  30  0.117971E-01  -4.43990      -2.39879       2.39879       52.7564       55.1552    
  31  0.324683      -1.12491     -0.607764      0.607764       52.5065       53.1143    
  32  0.662106     -0.412329     -0.222773      0.222773       52.9439       53.1667    
  33  0.334080      -1.09637     -0.592349      0.592349       53.1301       53.7224    
  34  0.307577      -1.17903     -0.637006      0.637006       53.2960       53.9330    
  35  0.539029     -0.617986     -0.333885      0.333885       53.3520       53.6859    
  36  0.822737     -0.195119     -0.105419      0.105419       53.6835       53.7889    
  37  0.973480     -0.268776E-01 -0.145214E-01  0.145214E-01   53.3113       53.3258    
  38  0.918970     -0.845018E-01 -0.456546E-01  0.456546E-01   53.3087       53.3543    
  39  0.203072      -1.59419     -0.861311      0.861311       52.6144       53.4757    
  40  0.467655     -0.760024     -0.410626      0.410626       53.7173       54.1279    
  41  0.323145      -1.12965     -0.610329      0.610329       53.9460       54.5563    
  42  0.505961     -0.681295     -0.368090      0.368090       52.6989       53.0670    
  43  0.699853E-01  -2.65947      -1.43686       1.43686       53.7092       55.1460    
  44  0.188263      -1.66991     -0.902220      0.902220       53.5157       54.4179    
  45  0.663178     -0.410711     -0.221899      0.221899       54.3037       54.5256    
  46  0.680233     -0.385320     -0.208180      0.208180       53.7200       53.9281    
  47  0.717812     -0.331548     -0.179128      0.179128       54.4677       54.6469    
  48  0.319374      -1.14139     -0.616671      0.616671       54.0860       54.7026    
  49  0.667076     -0.404851     -0.218733      0.218733       52.4794       52.6982    
  50  0.755360     -0.280560     -0.151581      0.151581       54.3964       54.5480    
  51  0.105804      -2.24617      -1.21356       1.21356       54.1850       55.3986    
  52  0.432752     -0.837590     -0.452533      0.452533       51.2471       51.6997    
loop,thermsimp(1:2)       33  0.489716      0.277194    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318         52.38          1.23          1.03         23.84          0.32          0.06         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       33
neval is:      317
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       34
neval is:      317


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      317     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437     -0.796570      0.796570       49.9081       50.7047    
   2  0.299376      -1.20605     -0.651607      0.651607       50.6018       51.2534    
   3  0.220114      -1.51361     -0.817772      0.817772       50.8055       51.6233    
   4  0.229209      -1.47312     -0.795898      0.795898       51.6333       52.4292    
   5  0.902477     -0.102612     -0.554394E-01  0.554394E-01   51.2471       51.3026    
   6  0.659052     -0.416953     -0.225271      0.225271       51.2345       51.4598    
   7  0.100321E-01  -4.60197      -2.48635       2.48635       51.7185       54.2048    
   8  0.588837     -0.529606     -0.286135      0.286135       51.6934       51.9795    
   9  0.270943      -1.30585     -0.705523      0.705523       51.7952       52.5007    
  10  0.505518     -0.682171     -0.368563      0.368563       51.5633       51.9318    
  11  0.264565      -1.32967     -0.718393      0.718393       51.3462       52.0646    
  12  0.806386     -0.215193     -0.116265      0.116265       51.9465       52.0628    
  13  0.340560      -1.07716     -0.581970      0.581970       51.0834       51.6654    
  14  0.906186     -0.985106E-01 -0.532232E-01  0.532232E-01   52.1572       52.2104    
  15  0.786070     -0.240709     -0.130050      0.130050       51.9395       52.0696    
  16  0.540508     -0.615247     -0.332405      0.332405       51.7687       52.1011    
  17  0.935065     -0.671392E-01 -0.362739E-01  0.362739E-01   52.3116       52.3479    
  18  0.915359     -0.884391E-01 -0.477819E-01  0.477819E-01   51.9477       51.9955    
  19  0.958261     -0.426353E-01 -0.230350E-01  0.230350E-01   52.3736       52.3966    
  20  0.935110     -0.670907E-01 -0.362478E-01  0.362478E-01   51.6848       51.7210    
  21  0.637755     -0.449800     -0.243018      0.243018       52.4794       52.7225    
  22  0.975714     -0.245861E-01 -0.132834E-01  0.132834E-01   52.4090       52.4223    
  23  0.797424     -0.226369     -0.122303      0.122303       52.8251       52.9474    
  24  0.214179      -1.54094     -0.832541      0.832541       52.4471       53.2796    
  25  0.372145     -0.988472     -0.534051      0.534051       52.8546       53.3887    
  26  0.925208     -0.777367E-01 -0.419995E-01  0.419995E-01   52.1205       52.1625    
  27  0.175897      -1.73786     -0.938928      0.938928       52.8045       53.7435    
  28  0.952033     -0.491554E-01 -0.265577E-01  0.265577E-01   52.6465       52.6731    
  29  0.158274E-01  -4.14601      -2.24000       2.24000       51.4040       53.6440    
  30  0.799308     -0.224008     -0.121027      0.121027       52.6989       52.8199    
  31  0.248227      -1.39341     -0.752831      0.752831       52.5065       53.2593    
  32  0.244914      -1.40685     -0.760091      0.760091       52.9439       53.7040    
  33  0.390842     -0.939452     -0.507567      0.507567       52.9926       53.5002    
  34  0.146784      -1.91879      -1.03668       1.03668       53.3113       54.3479    
  35  0.500975     -0.691199     -0.373441      0.373441       53.3087       53.6821    
  36  0.480131E-01  -3.03628      -1.64044       1.64044       52.6144       54.2548    
  37  0.124503      -2.08343      -1.12563       1.12563       53.3520       54.4776    
  38  0.670304     -0.400024     -0.216125      0.216125       53.1301       53.3462    
  39  0.997449     -0.255468E-02 -0.138024E-02  0.138024E-02   53.6835       53.6849    
  40  0.681761     -0.383076     -0.206968      0.206968       53.1638       53.3708    
  41  0.440529     -0.819778     -0.442909      0.442909       53.7200       54.1629    
  42  0.342489      -1.07152     -0.578919      0.578919       53.2960       53.8749    
  43  0.735753     -0.306861     -0.165791      0.165791       53.7173       53.8830    
  44  0.614752     -0.486537     -0.262866      0.262866       53.5157       53.7785    
  45  0.351660      -1.04509     -0.564641      0.564641       54.3037       54.8683    
  46  0.777165     -0.252103     -0.136206      0.136206       54.3964       54.5326    
  47  0.392618     -0.934919     -0.505117      0.505117       53.9460       54.4511    
  48  0.385647     -0.952832     -0.514796      0.514796       54.4677       54.9825    
  49  0.834392     -0.181052     -0.978189E-01  0.978189E-01   54.0860       54.1838    
  50  0.469158     -0.756815     -0.408892      0.408892       53.7092       54.1181    
  51  0.697320     -0.360511     -0.194777      0.194777       52.7564       52.9512    
  52  0.987150     -0.129333E-01 -0.698758E-02  0.698758E-02   52.3783       52.3853    
loop,thermsimp(1:2)       34  0.796570      0.651607    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    319         50.90          1.18          1.02         24.10          0.20          0.06         26.56
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    320         53.85          1.05          1.01         23.94          0.29          0.06         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.90
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       34
neval is:      319
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       35
neval is:      319


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      319     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775     -0.571480      0.571480       49.9081       50.4796    
   2  0.621479     -0.475653     -0.256986      0.256986       50.6018       50.8587    
   3  0.221273      -1.50836     -0.814936      0.814936       51.2471       52.0621    
   4  0.180626E-01  -4.01391      -2.16864       2.16864       51.2345       53.4031    
   5  0.216093      -1.53205     -0.827735      0.827735       50.8055       51.6333    
   6  0.351343      -1.04599     -0.565128      0.565128       51.0834       51.6485    
   7  0.360847      -1.01930     -0.550708      0.550708       51.6848       52.2355    
   8  0.439525     -0.822061     -0.444143      0.444143       51.5633       52.0074    
   9  0.910616E-01  -2.39622      -1.29463       1.29463       51.6934       52.9880    
  10  0.549745     -0.598300     -0.323249      0.323249       51.9477       52.2709    
  11  0.619825     -0.478318     -0.258425      0.258425       51.9465       52.2049    
  12  0.548169E-01  -2.90376      -1.56884       1.56884       51.3462       52.9151    
  13  0.947163     -0.542842E-01 -0.293287E-01  0.293287E-01   51.9395       51.9689    
  14  0.725459     -0.320951     -0.173403      0.173403       51.7687       51.9421    
  15  0.481613     -0.730615     -0.394736      0.394736       52.1205       52.5153    
  16  0.866286     -0.143540     -0.775520E-01  0.775520E-01   52.1572       52.2348    
  17  0.221988E-01  -3.80772      -2.05723       2.05723       52.3116       54.3688    
  18  0.980823     -0.193630E-01 -0.104615E-01  0.104615E-01   52.3783       52.3888    
  19  0.332549      -1.10097     -0.594830      0.594830       52.3736       52.9684    
  20  0.989035     -0.110256E-01 -0.595691E-02  0.595691E-02   52.4090       52.4149    
  21  0.364016      -1.01056     -0.545983      0.545983       51.6333       52.1792    
  22  0.861799     -0.148733     -0.803575E-01  0.803575E-01   51.7952       51.8755    
  23  0.622306     -0.474324     -0.256267      0.256267       52.6465       52.9028    
  24  0.575476     -0.552558     -0.298536      0.298536       52.4794       52.7780    
  25  0.205536      -1.58213     -0.854794      0.854794       52.6989       53.5537    
  26  0.124037      -2.08718      -1.12766       1.12766       52.8251       53.9528    
  27  0.467008     -0.761408     -0.411373      0.411373       52.7564       53.1678    
  28  0.273870      -1.29510     -0.699717      0.699717       52.5065       53.2062    
  29  0.842780     -0.171050     -0.924146E-01  0.924146E-01   52.4471       52.5395    
  30  0.709315     -0.343455     -0.185562      0.185562       53.1301       53.3156    
  31  0.677144     -0.389871     -0.210639      0.210639       53.1638       53.3744    
  32  0.656062     -0.421500     -0.227728      0.227728       52.8546       53.0823    
  33  0.721592     -0.326295     -0.176291      0.176291       52.9926       53.1689    
  34  0.120172      -2.11883      -1.14476       1.14476       51.4040       52.5487    
  35  0.832403     -0.183439     -0.991083E-01  0.991083E-01   53.3087       53.4078    
  36  0.607577     -0.498276     -0.269208      0.269208       53.6835       53.9527    
  37  0.169814      -1.77305     -0.957943      0.957943       52.9439       53.9019    
  38  0.578085     -0.548034     -0.296092      0.296092       52.8045       53.1006    
  39  0.201144      -1.60373     -0.866465      0.866465       53.5157       54.3821    
  40  0.922823     -0.803178E-01 -0.433941E-01  0.433941E-01   53.2960       53.3394    
  41  0.136644      -1.99038      -1.07536       1.07536       53.7173       54.7926    
  42  0.836366     -0.178689     -0.965418E-01  0.965418E-01   53.7092       53.8057    
  43  0.590669     -0.526499     -0.284457      0.284457       53.7200       54.0044    
  44  0.745946     -0.293102     -0.158357      0.158357       54.0860       54.2443    
  45  0.874736     -0.133833     -0.723072E-01  0.723072E-01   51.7185       51.7908    
  46  0.370232     -0.993625     -0.536835      0.536835       52.6144       53.1512    
  47  0.832293     -0.183570     -0.991793E-01  0.991793E-01   53.3113       53.4104    
  48  0.351566      -1.04536     -0.564786      0.564786       53.9460       54.5108    
  49  0.705870     -0.348324     -0.188192      0.188192       53.3520       53.5402    
  50  0.323816      -1.12758     -0.609209      0.609209       54.3964       55.0056    
  51  0.197269      -1.62319     -0.876976      0.876976       54.3037       55.1807    
  52  0.140686      -1.96123      -1.05961       1.05961       50.9008       51.9604    
loop,thermsimp(1:2)       35  0.571480      0.256986    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    321         50.94          1.16          1.00         24.09          0.20          0.07         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    322         52.38          1.01          1.01         24.00          0.21          0.05         26.28
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    50.939        2.723     -1.459      5.216     -100.0      1.085    
                     -0.6741      2.567     -100.0      2.903      1.808    
                       1.471    -0.9411      1.841      0.000      0.000    
                      -1.272      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.220     -5.222     -5.552     -2.139    
                      -13.22     -2.845      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.3036E-01 0.4312E-02  0.000    -0.4504    
                     -0.1253    -0.2060    -0.1099    -0.1888    -0.1161E-01

                      -1.218    -0.7606      0.000    -0.6803E-02 0.9495E-02
                      0.8541E-01 0.2079E-01-0.2534E-01-0.3223    -0.1464    
                      0.1463E-01-0.2992E-01-0.2678     -1.308      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.271      9.123     -7039.     -4.000    
                     -0.5251    -0.5327      9.276      8.579     -4904.    

                      -4.000    -0.7253E-01-0.4006      8.812      9.068    
                      -6912.     -4.000    -0.3868    -0.3254      9.872    
                       8.597     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       35
neval is:      321
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       36
neval is:      321


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      321     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367     -0.785387      0.785387       49.9081       50.6935    
   2  0.607568     -0.498291     -0.269216      0.269216       50.6018       50.8710    
   3  0.905785     -0.989529E-01 -0.534622E-01  0.534622E-01   50.8055       50.8590    
   4  0.995938E-01  -2.30666      -1.24624       1.24624       51.0834       52.3297    
   5  0.851360     -0.160920     -0.869420E-01  0.869420E-01   51.7185       51.8054    
   6  0.730583     -0.313913     -0.169601      0.169601       51.7952       51.9648    
   7  0.426216     -0.852810     -0.460756      0.460756       51.7687       52.2294    
   8  0.285108      -1.25489     -0.677991      0.677991       50.9008       51.5788    
   9  0.839246     -0.175251     -0.946848E-01  0.946848E-01   51.9395       52.0342    
  10  0.217639      -1.52492     -0.823881      0.823881       51.5633       52.3872    
  11  0.183996E-02  -6.29801      -3.40269       3.40269       51.2471       54.6498    
  12  0.682631     -0.381801     -0.206279      0.206279       51.6333       51.8395    
  13  0.203596      -1.59162     -0.859919      0.859919       51.9465       52.8064    
  14  0.881164     -0.126512     -0.683519E-01  0.683519E-01   52.1572       52.2256    
  15  0.711431     -0.340477     -0.183953      0.183953       51.6848       51.8687    
  16  0.874326     -0.134302     -0.725605E-01  0.725605E-01   51.9477       52.0203    
  17  0.814222     -0.205523     -0.111040      0.111040       52.3783       52.4893    
  18  0.995668     -0.434126E-02 -0.234550E-02  0.234550E-02   52.4090       52.4113    
  19  0.693805     -0.365564     -0.197507      0.197507       52.1205       52.3181    
  20  0.958584     -0.422984E-01 -0.228530E-01  0.228530E-01   52.4471       52.4699    
  21  0.748022     -0.290323     -0.156856      0.156856       51.4040       51.5608    
  22  0.696703     -0.361396     -0.195255      0.195255       52.4794       52.6747    
  23  0.732990     -0.310623     -0.167823      0.167823       52.6465       52.8143    
  24  0.534749     -0.625958     -0.338192      0.338192       51.3462       51.6844    
  25  0.691641     -0.368688     -0.199195      0.199195       52.3736       52.5728    
  26  0.300458      -1.20245     -0.649658      0.649658       51.6934       52.3430    
  27  0.977116     -0.231502E-01 -0.125076E-01  0.125076E-01   52.8546       52.8671    
  28  0.542581     -0.611418     -0.330337      0.330337       52.8045       53.1349    
  29  0.266111      -1.32384     -0.715244      0.715244       52.6144       53.3296    
  30  0.692298     -0.367738     -0.198681      0.198681       52.7564       52.9551    
  31  0.664047     -0.409403     -0.221192      0.221192       52.9926       53.2138    
  32  0.542186     -0.612146     -0.330730      0.330730       52.5065       52.8372    
  33  0.362243      -1.01544     -0.548621      0.548621       53.1301       53.6787    
  34  0.578658     -0.547044     -0.295557      0.295557       53.2960       53.5916    
  35  0.489298     -0.714783     -0.386183      0.386183       53.1638       53.5500    
  36  0.617485     -0.482100     -0.260469      0.260469       51.2345       51.4950    
  37  0.368651     -0.997905     -0.539148      0.539148       53.3087       53.8478    
  38  0.198936      -1.61477     -0.872428      0.872428       53.3113       54.1837    
  39  0.505263     -0.682676     -0.368836      0.368836       53.3520       53.7208    
  40  0.983997     -0.161325E-01 -0.871605E-02  0.871605E-02   52.6989       52.7076    
  41  0.630553     -0.461159     -0.249155      0.249155       53.7092       53.9583    
  42  0.423821E-01  -3.16103      -1.70784       1.70784       52.9439       54.6518    
  43  0.488935     -0.715526     -0.386584      0.386584       53.6835       54.0701    
  44  0.402078     -0.911110     -0.492254      0.492254       52.8251       53.3174    
  45  0.380878     -0.965277     -0.521519      0.521519       53.7200       54.2415    
  46  0.260585E-01  -3.64741      -1.97062       1.97062       54.0860       56.0566    
  47  0.681660     -0.383224     -0.207048      0.207048       52.3116       52.5186    
  48  0.489074     -0.715241     -0.386430      0.386430       53.5157       53.9021    
  49  0.752363     -0.284536     -0.153729      0.153729       53.9460       54.0997    
  50  0.978934     -0.212911E-01 -0.115032E-01  0.115032E-01   53.7173       53.7288    
  51  0.297789      -1.21137     -0.654479      0.654479       54.3964       55.0509    
  52  0.551604     -0.594926     -0.321426      0.321426       50.9387       51.2602    
loop,thermsimp(1:2)       36  0.785387      0.269216    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    323         52.42          1.09          1.00         24.08          0.20          0.06         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     52.42
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       36
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       37
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      322     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432     -0.480002      0.480002       49.9081       50.3881    
   2  0.697205     -0.360676     -0.194866      0.194866       50.8055       51.0004    
   3  0.314648E-01  -3.45889      -1.86877       1.86877       50.6018       52.4705    
   4  0.857269     -0.154003     -0.832047E-01  0.832047E-01   50.9387       51.0220    
   5  0.652165     -0.427457     -0.230947      0.230947       51.2345       51.4654    
   6  0.510145     -0.673060     -0.363640      0.363640       51.4040       51.7676    
   7  0.175175      -1.74197     -0.941150      0.941150       50.9008       51.8419    
   8  0.373803     -0.984025     -0.531649      0.531649       51.3462       51.8779    
   9  0.514972     -0.663642     -0.358552      0.358552       51.7185       52.0770    
  10  0.548235     -0.601051     -0.324735      0.324735       51.6333       51.9580    
  11  0.541310     -0.613763     -0.331604      0.331604       51.6848       52.0164    
  12  0.734083     -0.309133     -0.167018      0.167018       51.7952       51.9622    
  13  0.422599     -0.861332     -0.465360      0.465360       51.9477       52.4131    
  14  0.287055      -1.24808     -0.674312      0.674312       51.9395       52.6138    
  15  0.885133     -0.122017     -0.659234E-01  0.659234E-01   52.1572       52.2231    
  16  0.391075     -0.938857     -0.507245      0.507245       51.7687       52.2759    
  17  0.473784     -0.747003     -0.403591      0.403591       52.1205       52.5241    
  18  0.691812     -0.368440     -0.199061      0.199061       51.0834       51.2825    
  19  0.644447     -0.439363     -0.237379      0.237379       51.6934       51.9308    
  20  0.805933     -0.215754     -0.116568      0.116568       51.5633       51.6798    
  21  0.393766     -0.931998     -0.503540      0.503540       52.4090       52.9125    
  22  0.907098E-01  -2.40009      -1.29672       1.29672       52.4471       53.7438    
  23  0.376515     -0.976796     -0.527743      0.527743       52.3783       52.9060    
  24  0.819190     -0.199439     -0.107753      0.107753       52.3116       52.4193    
  25  0.692438     -0.367536     -0.198572      0.198572       52.3736       52.5721    
  26  0.188370      -1.66935     -0.901915      0.901915       52.4794       53.3814    
  27  0.500532     -0.692083     -0.373919      0.373919       52.6989       53.0728    
  28  0.282311      -1.26475     -0.683317      0.683317       51.9465       52.6298    
  29  0.338061      -1.08453     -0.585948      0.585948       52.6465       53.2325    
  30  0.466208     -0.763123     -0.412300      0.412300       52.5065       52.9188    
  31  0.893084     -0.113075     -0.610920E-01  0.610920E-01   52.8546       52.9157    
  32  0.818806     -0.199908     -0.108006      0.108006       52.7564       52.8644    
  33  0.585066     -0.536031     -0.289607      0.289607       52.8045       53.0941    
  34  0.527412     -0.639774     -0.345657      0.345657       52.9926       53.3383    
  35  0.994295     -0.572143E-02 -0.309117E-02  0.309117E-02   52.8251       52.8282    
  36  0.739278     -0.302082     -0.163209      0.163209       52.6144       52.7776    
  37  0.230995      -1.46536     -0.791703      0.791703       53.1638       53.9555    
  38  0.414929     -0.879648     -0.475256      0.475256       53.2960       53.7713    
  39  0.378446     -0.971682     -0.524980      0.524980       53.1301       53.6551    
  40  0.368620     -0.997990     -0.539193      0.539193       53.3520       53.8912    
  41  0.301312      -1.19961     -0.648124      0.648124       53.7173       54.3654    
  42  0.105882E-01  -4.54801      -2.45720       2.45720       53.3087       55.7659    
  43  0.481885     -0.730049     -0.394431      0.394431       53.5157       53.9101    
  44  0.446716     -0.805833     -0.435375      0.435375       53.7092       54.1446    
  45  0.482098     -0.729608     -0.394192      0.394192       53.6835       54.0777    
  46  0.278892      -1.27693     -0.689900      0.689900       53.9460       54.6359    
  47  0.756484     -0.279074     -0.150778      0.150778       53.3113       53.4620    
  48  0.662766     -0.411334     -0.222235      0.222235       53.7200       53.9422    
  49  0.433861E-01  -3.13762      -1.69519       1.69519       51.2471       52.9423    
  50  0.825649E-02  -4.79676      -2.59159       2.59159       52.9439       55.5355    
  51  0.476679     -0.740911     -0.400299      0.400299       54.3964       54.7967    
  52  0.128614      -2.05094      -1.10808       1.10808       52.4235       53.5316    
loop,thermsimp(1:2)       37  0.480002      0.194866    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324         50.60          1.24          1.02         23.95          0.22          0.07         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    325         49.96          1.04          1.02         23.93          0.22          0.06         26.26
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.96
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       37
neval is:      324
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       38
neval is:      324


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      324     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401     -0.483227      0.483227       49.9081       50.3913    
   2  0.259700      -1.34823     -0.728420      0.728420       50.8055       51.5340    
   3  0.681144E-01  -2.68657      -1.45150       1.45150       50.9387       52.3902    
   4  0.158140      -1.84427     -0.996423      0.996423       51.0834       52.0798    
   5  0.497681     -0.697796     -0.377005      0.377005       51.2345       51.6115    
   6  0.800218     -0.222871     -0.120412      0.120412       51.5633       51.6837    
   7  0.831967     -0.183962     -0.993910E-01  0.993910E-01   51.4040       51.5033    
   8  0.707345     -0.346237     -0.187065      0.187065       50.9008       51.0878    
   9  0.265927      -1.32454     -0.715619      0.715619       51.3462       52.0618    
  10  0.659046     -0.416962     -0.225276      0.225276       51.6934       51.9187    
  11  0.654587E-01  -2.72634      -1.47298       1.47298       51.6333       53.1062    
  12  0.223329      -1.49911     -0.809939      0.809939       51.7952       52.6051    
  13  0.996019     -0.398855E-02 -0.215493E-02  0.215493E-02   51.6848       51.6869    
  14  0.553910     -0.590753     -0.319172      0.319172       51.7185       52.0377    
  15  0.218863      -1.51931     -0.820852      0.820852       52.1572       52.9781    
  16  0.414020     -0.881841     -0.476441      0.476441       51.7687       52.2451    
  17  0.229117      -1.47352     -0.796114      0.796114       51.9477       52.7438    
  18  0.341764      -1.07363     -0.580063      0.580063       52.3116       52.8917    
  19  0.357052      -1.02987     -0.556419      0.556419       50.6018       51.1582    
  20  0.780779     -0.247463     -0.133699      0.133699       52.1205       52.2542    
  21  0.382234     -0.961721     -0.519598      0.519598       52.3736       52.8932    
  22  0.123899      -2.08829      -1.12826       1.12826       51.9395       53.0678    
  23  0.393312     -0.933152     -0.504163      0.504163       51.9465       52.4507    
  24  0.481741     -0.730349     -0.394593      0.394593       52.6144       53.0090    
  25  0.120001      -2.12026      -1.14553       1.14553       52.8251       53.9706    
  26  0.506023     -0.681173     -0.368024      0.368024       52.7564       53.1244    
  27  0.891157     -0.115235     -0.622592E-01  0.622592E-01   52.3783       52.4406    
  28  0.584674     -0.536701     -0.289969      0.289969       52.4090       52.6989    
  29  0.313196      -1.16093     -0.627224      0.627224       52.8546       53.4818    
  30  0.507340     -0.678574     -0.366620      0.366620       52.5065       52.8731    
  31  0.985030     -0.150835E-01 -0.814933E-02  0.814933E-02   51.2471       51.2553    
  32  0.186570      -1.67895     -0.907101      0.907101       52.6989       53.6060    
  33  0.992622     -0.740493E-02 -0.400073E-02  0.400073E-02   52.8045       52.8085    
  34  0.344152      -1.06667     -0.576300      0.576300       52.6465       53.2228    
  35  0.327214      -1.11714     -0.603569      0.603569       52.9926       53.5962    
  36  0.722008     -0.325719     -0.175980      0.175980       52.4794       52.6554    
  37  0.471441     -0.751960     -0.406269      0.406269       53.3113       53.7175    
  38  0.483594     -0.726510     -0.392518      0.392518       52.4235       52.8160    
  39  0.799410     -0.223881     -0.120958      0.120958       53.1301       53.2510    
  40  0.864070     -0.146101     -0.789355E-01  0.789355E-01   52.4471       52.5260    
  41  0.326419      -1.11957     -0.604883      0.604883       53.2960       53.9009    
  42  0.970166E-01  -2.33287      -1.26040       1.26040       53.3520       54.6124    
  43  0.822479     -0.195432     -0.105588      0.105588       53.5157       53.6212    
  44  0.719858     -0.328701     -0.177591      0.177591       53.7200       53.8976    
  45  0.359763      -1.02231     -0.552333      0.552333       53.1638       53.7161    
  46  0.879180     -0.128765     -0.695693E-01  0.695693E-01   53.6835       53.7531    
  47  0.152514      -1.88050      -1.01600       1.01600       53.7092       54.7252    
  48  0.379430     -0.969085     -0.523577      0.523577       53.7173       54.2408    
  49  0.444703     -0.810349     -0.437815      0.437815       53.9460       54.3838    
  50  0.240485      -1.42510     -0.769951      0.769951       54.3964       55.1664    
  51  0.682479     -0.382024     -0.206400      0.206400       52.9439       53.1503    
  52  0.989508     -0.105479E-01 -0.569881E-02  0.569881E-02   49.9640       49.9697    
loop,thermsimp(1:2)       38  0.483227      0.728420    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    326         50.62          1.06          1.01         24.07          0.19          0.06         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    327         56.96          1.04          1.01         24.02          0.23          0.06         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       38
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       39
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      326     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889      -1.12318       1.12318       49.9640       51.0872    
   2  0.274837      -1.29158     -0.697812      0.697812       49.9081       50.6059    
   3  0.305931E-01  -3.48698      -1.88394       1.88394       50.9008       52.7847    
   4  0.929157     -0.734779E-01 -0.396986E-01  0.396986E-01   50.6018       50.6415    
   5  0.995956     -0.405208E-02 -0.218925E-02  0.218925E-02   51.2471       51.2493    
   6  0.904971     -0.998521E-01 -0.539481E-01  0.539481E-01   51.4040       51.4579    
   7  0.189758      -1.66200     -0.897947      0.897947       50.8055       51.7035    
   8  0.134931      -2.00299      -1.08218       1.08218       51.2345       52.3167    
   9  0.302412      -1.19596     -0.646155      0.646155       51.5633       52.2094    
  10  0.389155     -0.943777     -0.509903      0.509903       51.6848       52.1947    
  11  0.947428     -0.540040E-01 -0.291773E-01  0.291773E-01   51.6934       51.7226    
  12  0.338357      -1.08365     -0.585476      0.585476       51.7185       52.3040    
  13  0.937476     -0.645645E-01 -0.348829E-01  0.348829E-01   51.3462       51.3811    
  14  0.399493     -0.917560     -0.495739      0.495739       51.0834       51.5792    
  15  0.527586     -0.639444     -0.345479      0.345479       51.7687       52.1142    
  16  0.297740      -1.21153     -0.654567      0.654567       52.1205       52.7751    
  17  0.557978     -0.583436     -0.315218      0.315218       50.9387       51.2540    
  18  0.267521      -1.31856     -0.712389      0.712389       52.3783       53.0907    
  19  0.637637     -0.449986     -0.243118      0.243118       51.9465       52.1896    
  20  0.838569     -0.176059     -0.951209E-01  0.951209E-01   52.4471       52.5422    
  21  0.132199E-01  -4.32603      -2.33727       2.33727       51.7952       54.1324    
  22  0.745606     -0.293557     -0.158603      0.158603       52.4794       52.6380    
  23  0.334504      -1.09511     -0.591663      0.591663       52.4090       53.0006    
  24  0.118852      -2.12987      -1.15073       1.15073       51.9477       53.0984    
  25  0.319911      -1.13971     -0.615764      0.615764       52.8045       53.4203    
  26  0.638302E-01  -2.75153      -1.48659       1.48659       52.4235       53.9101    
  27  0.173204      -1.75329     -0.947265      0.947265       52.5065       53.4538    
  28  0.885640     -0.121444     -0.656139E-01  0.656139E-01   52.3116       52.3772    
  29  0.710758     -0.341423     -0.184464      0.184464       52.3736       52.5580    
  30  0.938919     -0.630265E-01 -0.340519E-01  0.340519E-01   52.1572       52.1913    
  31  0.217740      -1.52445     -0.823630      0.823630       52.6144       53.4380    
  32  0.130036      -2.03994      -1.10214       1.10214       51.9395       53.0417    
  33  0.331090      -1.10537     -0.597207      0.597207       51.6333       52.2305    
  34  0.453525E-01  -3.09329      -1.67124       1.67124       52.7564       54.4276    
  35  0.494600     -0.704006     -0.380360      0.380360       52.9439       53.3243    
  36  0.488771E-01  -3.01845      -1.63080       1.63080       52.6465       54.2773    
  37  0.262916E-01  -3.63850      -1.96581       1.96581       53.1301       55.0959    
  38  0.975293     -0.250177E-01 -0.135166E-01  0.135166E-01   52.8546       52.8681    
  39  0.521026     -0.651955     -0.352238      0.352238       52.9926       53.3449    
  40  0.210960      -1.55609     -0.840722      0.840722       52.6989       53.5396    
  41  0.475166E-02  -5.34926      -2.89010       2.89010       53.5157       56.4058    
  42  0.675859     -0.391771     -0.211666      0.211666       53.1638       53.3755    
  43  0.691418     -0.369011     -0.199369      0.199369       53.3113       53.5106    
  44  0.425152     -0.855309     -0.462106      0.462106       53.6835       54.1456    
  45  0.141313      -1.95678      -1.05721       1.05721       53.7200       54.7772    
  46  0.902170     -0.102952     -0.556229E-01  0.556229E-01   53.2960       53.3516    
  47  0.794321     -0.230268     -0.124409      0.124409       52.8251       52.9495    
  48  0.685387     -0.377772     -0.204103      0.204103       53.7173       53.9214    
  49  0.273223      -1.29747     -0.700994      0.700994       53.9460       54.6470    
  50  0.784111     -0.243205     -0.131399      0.131399       53.3520       53.4834    
  51  0.824524     -0.192949     -0.104247      0.104247       53.7092       53.8134    
  52  0.855082     -0.156558     -0.845852E-01  0.845852E-01   50.6248       50.7094    
loop,thermsimp(1:2)       39   1.12318      0.697812    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328         51.32          1.23          1.04         23.94          0.25          0.07         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    329         58.56          1.02          1.02         24.07          0.14          0.06         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     51.32
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       39
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       40
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      328     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385     -0.412981      0.412981       49.9081       50.3211    
   2  0.310178      -1.17061     -0.632456      0.632456       50.6018       51.2342    
   3  0.883713     -0.123623     -0.667911E-01  0.667911E-01   50.6248       50.6916    
   4  0.641465     -0.444001     -0.239885      0.239885       49.9640       50.2039    
   5  0.458576E-01  -3.08222      -1.66526       1.66526       51.2471       52.9124    
   6  0.611421     -0.491970     -0.265801      0.265801       50.9387       51.2045    
   7  0.292603      -1.22894     -0.663970      0.663970       51.3462       52.0102    
   8  0.180818      -1.71026     -0.924021      0.924021       51.4040       52.3280    
   9  0.490648     -0.712028     -0.384694      0.384694       51.0834       51.4681    
  10  0.538601     -0.618781     -0.334315      0.334315       50.8055       51.1398    
  11  0.451209     -0.795824     -0.429967      0.429967       51.6934       52.1234    
  12  0.610260     -0.493870     -0.266828      0.266828       51.7687       52.0355    
  13  0.425113     -0.855401     -0.462155      0.462155       51.9465       52.4087    
  14  0.647858     -0.434084     -0.234527      0.234527       52.1572       52.3917    
  15  0.394937     -0.929029     -0.501935      0.501935       51.6848       52.1867    
  16  0.452279E-01  -3.09604      -1.67273       1.67273       51.5633       53.2360    
  17  0.954905     -0.461437E-01 -0.249305E-01  0.249305E-01   51.6333       51.6582    
  18  0.362548      -1.01460     -0.548166      0.548166       51.7185       52.2666    
  19  0.808078     -0.213097     -0.115132      0.115132       51.2345       51.3496    
  20  0.219348      -1.51709     -0.819655      0.819655       52.3116       53.1312    
  21  0.206981      -1.57513     -0.851008      0.851008       52.4471       53.2981    
  22  0.719933     -0.328597     -0.177534      0.177534       52.3736       52.5511    
  23  0.950238     -0.510432E-01 -0.275776E-01  0.275776E-01   52.4794       52.5070    
  24  0.845993     -0.167244     -0.903585E-01  0.903585E-01   52.1205       52.2109    
  25  0.157926      -1.84563     -0.997156      0.997156       50.9008       51.8979    
  26  0.430020     -0.843924     -0.455955      0.455955       52.8546       53.3106    
  27  0.624159     -0.471350     -0.254661      0.254661       52.8251       53.0798    
  28  0.355386      -1.03455     -0.558947      0.558947       52.4090       52.9679    
  29  0.297353      -1.21284     -0.655271      0.655271       51.9395       52.5948    
  30  0.185476      -1.68483     -0.910278      0.910278       52.3783       53.2886    
  31  0.406569     -0.900002     -0.486253      0.486253       51.9477       52.4339    
  32  0.147052      -1.91697      -1.03570       1.03570       52.9439       53.9796    
  33  0.205955      -1.58010     -0.853693      0.853693       52.9926       53.8463    
  34  0.383503     -0.958409     -0.517809      0.517809       53.2960       53.8138    
  35  0.514677E-01  -2.96680      -1.60290       1.60290       53.1638       54.7667    
  36  0.499194     -0.694760     -0.375364      0.375364       52.8045       53.1799    
  37  0.103172E-01  -4.57394      -2.47121       2.47121       52.6144       55.0856    
  38  0.470163     -0.754676     -0.407736      0.407736       52.5065       52.9142    
  39  0.983694     -0.164404E-01 -0.888239E-02  0.888239E-02   53.3520       53.3609    
  40  0.880425     -0.127351     -0.688049E-01  0.688049E-01   53.3113       53.3801    
  41  0.969759     -0.307072E-01 -0.165905E-01  0.165905E-01   52.6989       52.7155    
  42  0.761826E-01  -2.57462      -1.39102       1.39102       53.7092       55.1002    
  43  0.124427      -2.08404      -1.12596       1.12596       52.4235       53.5494    
  44  0.997702     -0.230032E-02 -0.124282E-02  0.124282E-02   53.7173       53.7185    
  45  0.213939      -1.54206     -0.833145      0.833145       51.7952       52.6283    
  46  0.471369     -0.752113     -0.406351      0.406351       53.6835       54.0898    
  47  0.421561E-01  -3.16638      -1.71073       1.71073       52.6465       54.3572    
  48  0.693092     -0.366592     -0.198062      0.198062       52.7564       52.9545    
  49  0.375157     -0.980409     -0.529695      0.529695       53.9460       54.4757    
  50  0.285659      -1.25296     -0.676947      0.676947       53.7200       54.3969    
  51  0.338951      -1.08190     -0.584529      0.584529       53.1301       53.7146    
  52  0.930127E-01  -2.37502      -1.28317       1.28317       51.3244       52.6075    
loop,thermsimp(1:2)       40  0.412981      0.632456    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330         50.53          1.23          1.03         23.97          0.25          0.06         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    331         55.68          1.02          1.01         24.03          0.23          0.06         26.35
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.53
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       40
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       41
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      330     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501     -0.791516      0.791516       49.9640       50.7555    
   2  0.984723     -0.153953E-01 -0.831778E-02  0.831778E-02   49.9081       49.9164    
   3  0.689569     -0.371688     -0.200815      0.200815       50.6248       50.8256    
   4  0.539532     -0.617054     -0.333381      0.333381       50.8055       51.1389    
   5  0.103859      -2.26472      -1.22358       1.22358       50.9387       52.1623    
   6  0.403261     -0.908171     -0.490666      0.490666       50.6018       51.0924    
   7  0.545138     -0.606716     -0.327796      0.327796       51.2345       51.5623    
   8  0.211198      -1.55496     -0.840114      0.840114       51.0834       51.9235    
   9  0.533123     -0.629004     -0.339838      0.339838       51.6333       51.9731    
  10  0.891214     -0.115171     -0.622244E-01  0.622244E-01   50.9008       50.9630    
  11  0.604806     -0.502847     -0.271678      0.271678       51.3462       51.6179    
  12  0.176166      -1.73633     -0.938104      0.938104       51.7687       52.7068    
  13  0.733693     -0.309664     -0.167305      0.167305       51.6934       51.8607    
  14  0.248504      -1.39230     -0.752230      0.752230       51.6848       52.4370    
  15  0.183808      -1.69387     -0.915161      0.915161       52.1205       53.0357    
  16  0.308674E-02  -5.78064      -3.12316       3.12316       51.7185       54.8416    
  17  0.651025     -0.429207     -0.231892      0.231892       51.4040       51.6358    
  18  0.864353     -0.145775     -0.787590E-01  0.787590E-01   52.1572       52.2360    
  19  0.547352     -0.602664     -0.325607      0.325607       51.9465       52.2721    
  20  0.631248     -0.460057     -0.248559      0.248559       51.9477       52.1963    
  21  0.344368E-01  -3.36863      -1.82000       1.82000       52.4794       54.2994    
  22  0.876828     -0.131444     -0.710167E-01  0.710167E-01   52.3736       52.4446    
  23  0.884538     -0.122690     -0.662871E-01  0.662871E-01   51.9395       52.0058    
  24  0.926808     -0.760084E-01 -0.410658E-01  0.410658E-01   51.3244       51.3654    
  25  0.823462     -0.194237     -0.104943      0.104943       51.7952       51.9001    
  26  0.852580     -0.159489     -0.861685E-01  0.861685E-01   52.6989       52.7851    
  27  0.577707     -0.548689     -0.296445      0.296445       51.2471       51.5436    
  28  0.510093     -0.673163     -0.363696      0.363696       52.5065       52.8702    
  29  0.890288     -0.116210     -0.627859E-01  0.627859E-01   52.7564       52.8192    
  30  0.304875      -1.18785     -0.641772      0.641772       52.4090       53.0507    
  31  0.152164      -1.88279      -1.01723       1.01723       52.8251       53.8424    
  32  0.718687     -0.330329     -0.178470      0.178470       52.3116       52.4901    
  33  0.488128     -0.717177     -0.387476      0.387476       52.8045       53.1920    
  34  0.373052     -0.986038     -0.532736      0.532736       51.5633       52.0960    
  35  0.247351      -1.39695     -0.754742      0.754742       52.3783       53.1330    
  36  0.532108     -0.630909     -0.340867      0.340867       52.4471       52.7879    
  37  0.828879E-02  -4.79285      -2.58948       2.58948       52.8546       55.4441    
  38  0.168277      -1.78214     -0.962856      0.962856       53.3520       54.3149    
  39  0.253216      -1.37351     -0.742082      0.742082       53.3113       54.0533    
  40  0.458588     -0.779602     -0.421203      0.421203       52.4235       52.8447    
  41  0.725692     -0.320630     -0.173230      0.173230       53.1301       53.3033    
  42  0.283543      -1.26039     -0.680964      0.680964       53.7173       54.3982    
  43  0.798055     -0.225578     -0.121875      0.121875       53.2960       53.4179    
  44  0.805371     -0.216453     -0.116945      0.116945       52.9926       53.1096    
  45  0.580747     -0.543441     -0.293610      0.293610       52.9439       53.2375    
  46  0.581119     -0.542799     -0.293263      0.293263       53.6835       53.9768    
  47  0.305196      -1.18680     -0.641205      0.641205       52.6465       53.2877    
  48  0.905702     -0.990454E-01 -0.535122E-01  0.535122E-01   53.7200       53.7735    
  49  0.265633E-01  -3.62822      -1.96026       1.96026       53.9460       55.9063    
  50  0.114529E-01  -4.46951      -2.41479       2.41479       53.1638       55.5786    
  51  0.990634     -0.941033E-02 -0.508421E-02  0.508421E-02   52.6144       52.6195    
  52  0.609564     -0.495011     -0.267444      0.267444       50.5262       50.7936    
loop,thermsimp(1:2)       41  0.791516      0.831778E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332         51.82          1.24          1.02         24.03          0.18          0.05         26.52
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.82
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       41
neval is:      331
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       42
neval is:      331


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      331     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686      -1.68398       1.68398       49.9081       51.5921    
   2  0.196215      -1.62854     -0.879868      0.879868       49.9640       50.8439    
   3  0.501152     -0.690846     -0.373250      0.373250       50.5262       50.8994    
   4  0.288339      -1.24362     -0.671902      0.671902       50.6248       51.2967    
   5  0.773132     -0.257306     -0.139017      0.139017       50.9008       51.0398    
   6  0.417683     -0.873033     -0.471682      0.471682       50.6018       51.0734    
   7  0.229479      -1.47195     -0.795262      0.795262       50.8055       51.6008    
   8  0.964123     -0.365367E-01 -0.197400E-01  0.197400E-01   51.3244       51.3441    
   9  0.263782      -1.33263     -0.719994      0.719994       51.2471       51.9671    
  10  0.102960      -2.27342      -1.22828       1.22828       51.2345       52.4628    
  11  0.828790     -0.187788     -0.101458      0.101458       51.3462       51.4477    
  12  0.738697     -0.302868     -0.163633      0.163633       51.4040       51.5676    
  13  0.458595     -0.779589     -0.421196      0.421196       51.6934       52.1146    
  14  0.905176     -0.996260E-01 -0.538259E-01  0.538259E-01   51.7952       51.8490    
  15  0.147067      -1.91687      -1.03564       1.03564       51.0834       52.1191    
  16  0.142365      -1.94936      -1.05320       1.05320       51.6333       52.6865    
  17  0.483147     -0.727435     -0.393018      0.393018       51.9395       52.3325    
  18  0.640417     -0.445636     -0.240768      0.240768       51.5633       51.8040    
  19  0.719349     -0.329408     -0.177973      0.177973       50.9387       51.1167    
  20  0.714234     -0.336545     -0.181828      0.181828       51.9477       52.1295    
  21  0.825507     -0.191757     -0.103602      0.103602       52.1572       52.2608    
  22  0.155188      -1.86312      -1.00660       1.00660       51.9465       52.9531    
  23  0.248874      -1.39081     -0.751426      0.751426       51.6848       52.4362    
  24  0.107953      -2.22606      -1.20270       1.20270       52.3736       53.5763    
  25  0.349169      -1.05220     -0.568481      0.568481       52.3116       52.8801    
  26  0.967311     -0.332356E-01 -0.179565E-01  0.179565E-01   52.6144       52.6323    
  27  0.519506     -0.654877     -0.353817      0.353817       51.7687       52.1225    
  28  0.462662     -0.770758     -0.416425      0.416425       52.6989       53.1153    
  29  0.811438     -0.208948     -0.112890      0.112890       52.4471       52.5600    
  30  0.394710E-01  -3.23219      -1.74629       1.74629       52.7564       54.5027    
  31  0.482930     -0.727884     -0.393261      0.393261       52.4235       52.8167    
  32  0.520883     -0.652231     -0.352387      0.352387       52.5065       52.8589    
  33  0.980978E-01  -2.32179      -1.25442       1.25442       52.1205       53.3750    
  34  0.626549     -0.467529     -0.252596      0.252596       52.4090       52.6616    
  35  0.618402     -0.480616     -0.259667      0.259667       52.9926       53.2523    
  36  0.681438     -0.383550     -0.207224      0.207224       52.3783       52.5855    
  37  0.816820     -0.202336     -0.109318      0.109318       52.8045       52.9138    
  38  0.578487     -0.547340     -0.295717      0.295717       52.9439       53.2396    
  39  0.349734      -1.05058     -0.567608      0.567608       52.6465       53.2141    
  40  0.945672     -0.558596E-01 -0.301798E-01  0.301798E-01   53.1301       53.1603    
  41  0.767680     -0.264382     -0.142840      0.142840       53.2960       53.4389    
  42  0.122064      -2.10321      -1.13632       1.13632       53.7200       54.8563    
  43  0.211623      -1.55295     -0.839026      0.839026       52.8251       53.6641    
  44  0.969992E-01  -2.33305      -1.26050       1.26050       53.6835       54.9440    
  45  0.877482     -0.130699     -0.706141E-01  0.706141E-01   53.3113       53.3819    
  46  0.448991     -0.800752     -0.432630      0.432630       52.4794       52.9121    
  47  0.833113     -0.182586     -0.986477E-01  0.986477E-01   53.3520       53.4506    
  48  0.691765     -0.368508     -0.199098      0.199098       53.7173       53.9164    
  49  0.310664      -1.16904     -0.631611      0.631611       51.7185       52.3501    
  50  0.422283     -0.862080     -0.465764      0.465764       52.8546       53.3204    
  51  0.382184E-01  -3.26444      -1.76371       1.76371       53.1638       54.9275    
  52  0.679614E-01  -2.68882      -1.45271       1.45271       51.8162       53.2689    
loop,thermsimp(1:2)       42   1.68398      0.879868    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    333         50.79          1.14          1.01         23.89          0.30          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    334         55.66          1.03          1.00         24.09          0.23          0.06         26.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       42
neval is:      333
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       43
neval is:      333


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      333     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867     -0.653020      0.653020       49.9640       50.6170    
   2  0.383173     -0.959268     -0.518273      0.518273       50.5262       51.0445    
   3  0.386205     -0.951387     -0.514015      0.514015       50.9008       51.4148    
   4  0.362178      -1.01562     -0.548718      0.548718       50.6018       51.1505    
   5  0.394462     -0.930233     -0.502586      0.502586       50.9387       51.4413    
   6  0.883072     -0.124349     -0.671831E-01  0.671831E-01   50.6248       50.6920    
   7  0.571477     -0.559531     -0.302303      0.302303       51.3244       51.6267    
   8  0.944036     -0.575912E-01 -0.311154E-01  0.311154E-01   51.3462       51.3773    
   9  0.326573      -1.11910     -0.604628      0.604628       51.4040       52.0086    
  10  0.467297     -0.760791     -0.411040      0.411040       49.9081       50.3191    
  11  0.828365     -0.188301     -0.101735      0.101735       50.8055       50.9073    
  12  0.826991     -0.189962     -0.102633      0.102633       51.5633       51.6659    
  13  0.675447E-01  -2.69497      -1.45604       1.45604       51.7952       53.2512    
  14  0.924113     -0.789214E-01 -0.426396E-01  0.426396E-01   51.2471       51.2898    
  15  0.810131     -0.210560     -0.113761      0.113761       51.6934       51.8071    
  16  0.410286     -0.890900     -0.481335      0.481335       51.0834       51.5648    
  17  0.334977      -1.09369     -0.590901      0.590901       51.7687       52.3596    
  18  0.119017      -2.12849      -1.14998       1.14998       51.9477       53.0977    
  19  0.447328     -0.804463     -0.434635      0.434635       52.1572       52.5918    
  20  0.324388E-02  -5.73098      -3.09633       3.09633       51.9395       55.0359    
  21  0.158272      -1.84344     -0.995974      0.995974       51.7185       52.7145    
  22  0.241219      -1.42205     -0.768305      0.768305       51.6848       52.4531    
  23  0.259790      -1.34788     -0.728233      0.728233       51.2345       51.9627    
  24  0.521973     -0.650139     -0.351257      0.351257       52.4471       52.7983    
  25  0.336335      -1.08965     -0.588714      0.588714       52.3783       52.9670    
  26  0.642248     -0.442780     -0.239225      0.239225       52.6144       52.8536    
  27  0.984615     -0.155047E-01 -0.837687E-02  0.837687E-02   52.4090       52.4173    
  28  0.373782     -0.984082     -0.531680      0.531680       51.6333       52.1649    
  29  0.932479     -0.699087E-01 -0.377702E-01  0.377702E-01   52.4235       52.4613    
  30  0.711360     -0.340577     -0.184007      0.184007       52.5065       52.6905    
  31  0.315363      -1.15403     -0.623500      0.623500       52.3116       52.9351    
  32  0.528583     -0.637556     -0.344458      0.344458       52.4794       52.8239    
  33  0.622355E-01  -2.77683      -1.50026       1.50026       52.8045       54.3048    
  34  0.144849      -1.93206      -1.04385       1.04385       51.9465       52.9904    
  35  0.868928     -0.140495     -0.759063E-01  0.759063E-01   52.6989       52.7748    
  36  0.243398      -1.41306     -0.763446      0.763446       53.1301       53.8935    
  37  0.936928     -0.651491E-01 -0.351988E-01  0.351988E-01   52.6465       52.6817    
  38  0.979804E-01  -2.32299      -1.25506       1.25506       52.9439       54.1990    
  39  0.805773     -0.215953     -0.116675      0.116675       52.9926       53.1093    
  40  0.210751      -1.55708     -0.841258      0.841258       51.8162       52.6575    
  41  0.497104     -0.698956     -0.377632      0.377632       52.8546       53.2323    
  42  0.532106     -0.630913     -0.340870      0.340870       52.1205       52.4614    
  43  0.898420     -0.107117     -0.578732E-01  0.578732E-01   53.3113       53.3691    
  44  0.579370     -0.545814     -0.294892      0.294892       53.2960       53.5909    
  45  0.191213      -1.65437     -0.893820      0.893820       53.3520       54.2458    
  46  0.491633     -0.710023     -0.383611      0.383611       52.3736       52.7572    
  47  0.989123     -0.109370E-01 -0.590904E-02  0.590904E-02   52.8251       52.8310    
  48  0.576855     -0.550164     -0.297242      0.297242       53.7173       54.0145    
  49  0.133368      -2.01464      -1.08847       1.08847       52.7564       53.8449    
  50  0.708426     -0.344710     -0.186240      0.186240       53.7200       53.9062    
  51  0.183469      -1.69571     -0.916158      0.916158       53.1638       54.0800    
  52  0.951201     -0.500300E-01 -0.270302E-01  0.270302E-01   50.7879       50.8150    
loop,thermsimp(1:2)       43  0.653020      0.518273    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    335         50.79          1.22          1.04         23.95          0.21          0.06         26.46
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    336         51.23          1.03          1.02         24.04          0.14          0.06         26.29
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.79
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       43
neval is:      335
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       44
neval is:      335


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      335     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812     -0.674334      0.674334       49.9081       50.5824    
   2  0.260243      -1.34614     -0.727291      0.727291       49.9640       50.6913    
   3  0.646915     -0.435540     -0.235313      0.235313       50.6248       50.8601    
   4  0.572447     -0.557835     -0.301387      0.301387       50.7879       51.0893    
   5  0.105907      -2.24520      -1.21303       1.21303       50.8055       52.0186    
   6  0.693038     -0.366671     -0.198105      0.198105       50.5262       50.7243    
   7  0.329408      -1.11046     -0.599958      0.599958       50.6018       51.2017    
   8  0.187221      -1.67546     -0.905219      0.905219       51.2471       52.1524    
   9  0.545731     -0.605630     -0.327209      0.327209       51.3462       51.6734    
  10  0.752820     -0.283930     -0.153401      0.153401       50.9008       51.0542    
  11  0.153542      -1.87378      -1.01236       1.01236       50.9387       51.9511    
  12  0.400659     -0.914645     -0.494164      0.494164       51.0834       51.5776    
  13  0.306182      -1.18357     -0.639461      0.639461       51.3244       51.9638    
  14  0.270957E-01  -3.60838      -1.94953       1.94953       51.5633       53.5128    
  15  0.776765     -0.252618     -0.136484      0.136484       51.6934       51.8299    
  16  0.711945     -0.339755     -0.183563      0.183563       51.2345       51.4181    
  17  0.217190      -1.52698     -0.824998      0.824998       51.4040       52.2290    
  18  0.285226      -1.25447     -0.677767      0.677767       51.6333       52.3110    
  19  0.348904      -1.05296     -0.568892      0.568892       51.7687       52.3376    
  20  0.686414     -0.376275     -0.203294      0.203294       52.4090       52.6123    
  21  0.212825      -1.54729     -0.835967      0.835967       51.6848       52.5207    
  22  0.501697     -0.689760     -0.372663      0.372663       52.4235       52.7961    
  23  0.363771      -1.01123     -0.546347      0.546347       52.1205       52.6669    
  24  0.789273     -0.236642     -0.127853      0.127853       52.1572       52.2851    
  25  0.232884      -1.45721     -0.787302      0.787302       51.8162       52.6035    
  26  0.754896     -0.281175     -0.151913      0.151913       52.6465       52.7984    
  27  0.639358     -0.447290     -0.241662      0.241662       52.5065       52.7482    
  28  0.532505     -0.630163     -0.340464      0.340464       51.7185       52.0589    
  29  0.759813     -0.274683     -0.148406      0.148406       52.3736       52.5220    
  30  0.768360     -0.263497     -0.142362      0.142362       52.6989       52.8413    
  31  0.245116      -1.40602     -0.759645      0.759645       52.4471       53.2067    
  32  0.672517     -0.396727     -0.214344      0.214344       52.4794       52.6938    
  33  0.910675     -0.935691E-01 -0.505535E-01  0.505535E-01   52.8251       52.8757    
  34  0.441618     -0.817310     -0.441576      0.441576       52.6144       53.0560    
  35  0.212980      -1.54656     -0.835574      0.835574       52.3116       53.1472    
  36  0.471690     -0.751434     -0.405984      0.405984       52.3783       52.7843    
  37  0.968545     -0.319606E-01 -0.172677E-01  0.172677E-01   51.9465       51.9638    
  38  0.711169     -0.340845     -0.184151      0.184151       51.9477       52.1318    
  39  0.222170      -1.50431     -0.812750      0.812750       52.9926       53.8054    
  40  0.896100     -0.109703     -0.592705E-01  0.592705E-01   52.8546       52.9139    
  41  0.898054     -0.107525     -0.580935E-01  0.580935E-01   51.7952       51.8533    
  42  0.981364     -0.188122E-01 -0.101638E-01  0.101638E-01   53.3113       53.3214    
  43  0.238126      -1.43496     -0.775277      0.775277       53.2960       54.0713    
  44  0.884882     -0.122301     -0.660769E-01  0.660769E-01   52.7564       52.8225    
  45  0.206421      -1.57784     -0.852475      0.852475       53.1301       53.9826    
  46  0.421939     -0.862894     -0.466204      0.466204       53.7200       54.1862    
  47  0.334170E-01  -3.39869      -1.83624       1.83624       53.7173       55.5535    
  48  0.940374     -0.614772E-01 -0.332149E-01  0.332149E-01   53.1638       53.1970    
  49  0.119361      -2.12561      -1.14842       1.14842       52.9439       54.0923    
  50  0.493355     -0.706527     -0.381722      0.381722       53.3520       53.7337    
  51  0.239498      -1.42921     -0.772174      0.772174       52.8045       53.5767    
  52  0.779094     -0.249623     -0.134866      0.134866       50.7881       50.9230    
loop,thermsimp(1:2)       44  0.674334      0.727291    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    337         51.15          1.21          1.03         24.04          0.19          0.06         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.15
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       44
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       45
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      336     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816     -0.858050      0.858050       49.9081       50.7661    
   2  0.455846E-01  -3.08818      -1.66848       1.66848       49.9640       51.6325    
   3  0.655807     -0.421889     -0.227938      0.227938       50.5262       50.7541    
   4  0.902989     -0.102045     -0.551329E-01  0.551329E-01   50.6248       50.6799    
   5  0.826012     -0.191146     -0.103272      0.103272       50.7881       50.8914    
   6  0.160871      -1.82715     -0.987173      0.987173       50.9008       51.8879    
   7  0.516410     -0.660854     -0.357046      0.357046       50.7879       51.1450    
   8  0.506939     -0.679364     -0.367046      0.367046       50.6018       50.9688    
   9  0.728359     -0.316962     -0.171248      0.171248       51.2345       51.4057    
  10  0.453162     -0.791506     -0.427634      0.427634       51.0834       51.5110    
  11  0.837994     -0.176745     -0.954915E-01  0.954915E-01   51.3462       51.4417    
  12  0.118024      -2.13686      -1.15450       1.15450       51.6934       52.8479    
  13  0.274030      -1.29452     -0.699402      0.699402       51.7952       52.4946    
  14  0.402227     -0.910738     -0.492053      0.492053       50.9387       51.4308    
  15  0.444245     -0.811380     -0.438372      0.438372       51.9465       52.3849    
  16  0.594880     -0.519396     -0.280619      0.280619       51.3244       51.6050    
  17  0.548806     -0.600010     -0.324173      0.324173       50.8055       51.1297    
  18  0.222827      -1.50136     -0.811153      0.811153       51.7185       52.5296    
  19  0.152541      -1.88032      -1.01590       1.01590       51.9477       52.9636    
  20  0.816533     -0.202688     -0.109508      0.109508       51.2471       51.3567    
  21  0.525417     -0.643564     -0.347704      0.347704       51.4040       51.7517    
  22  0.661450     -0.413320     -0.223309      0.223309       52.1572       52.3805    
  23  0.437535     -0.826598     -0.446594      0.446594       51.6333       52.0799    
  24  0.464442     -0.766918     -0.414350      0.414350       51.7687       52.1830    
  25  0.683975     -0.379834     -0.205216      0.205216       51.6848       51.8900    
  26  0.407919     -0.896688     -0.484462      0.484462       52.3736       52.8580    
  27  0.934669     -0.675632E-01 -0.365030E-01  0.365030E-01   51.8162       51.8527    
  28  0.866891     -0.142842     -0.771744E-01  0.771744E-01   52.4090       52.4861    
  29  0.145435E-01  -4.23061      -2.28571       2.28571       52.1205       54.4063    
  30  0.514599     -0.664368     -0.358944      0.358944       52.4794       52.8384    
  31  0.370591     -0.992656     -0.536312      0.536312       52.5065       53.0428    
  32  0.251726      -1.37941     -0.745269      0.745269       52.3783       53.1236    
  33  0.959470     -0.413742E-01 -0.223536E-01  0.223536E-01   52.4235       52.4458    
  34  0.344885E-01  -3.36713      -1.81919       1.81919       52.6465       54.4657    
  35  0.348690      -1.05357     -0.569224      0.569224       52.7564       53.3256    
  36  0.610898     -0.492826     -0.266264      0.266264       52.6989       52.9652    
  37  0.440567     -0.819693     -0.442863      0.442863       52.8251       53.2680    
  38  0.340409      -1.07761     -0.582210      0.582210       52.8546       53.4368    
  39  0.345015E-01  -3.36675      -1.81899       1.81899       52.6144       54.4334    
  40  0.667224     -0.404630     -0.218613      0.218613       52.3116       52.5302    
  41  0.138336      -1.97807      -1.06871       1.06871       53.1638       54.2325    
  42  0.412023     -0.886676     -0.479053      0.479053       52.4471       52.9261    
  43  0.578410     -0.547473     -0.295788      0.295788       53.3113       53.6070    
  44  0.972817     -0.275594E-01 -0.148898E-01  0.148898E-01   51.5633       51.5782    
  45  0.152341      -1.88163      -1.01661       1.01661       52.8045       53.8211    
  46  0.764264     -0.268842     -0.145250      0.145250       53.3520       53.4972    
  47  0.898082E-01  -2.41008      -1.30212       1.30212       52.9926       54.2948    
  48  0.205097      -1.58427     -0.855949      0.855949       53.1301       53.9860    
  49  0.249611E-01  -3.69044      -1.99387       1.99387       53.2960       55.2899    
  50  0.999211     -0.789000E-03 -0.426280E-03  0.426280E-03   52.9439       52.9443    
  51  0.622898E-01  -2.77596      -1.49979       1.49979       53.7200       55.2198    
  52  0.588779     -0.529705     -0.286189      0.286189       51.1539       51.4401    
loop,thermsimp(1:2)       45  0.858050       1.66848    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338         50.46          1.13          1.00         24.16          0.09          0.06         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    339         60.12          1.03          1.02         24.14          0.05          0.05         26.30
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.46
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       45
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       46
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      338     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016     -0.124273      0.124273       50.6248       50.7490    
   2  0.338444      -1.08340     -0.585336      0.585336       50.5262       51.1115    
   3  0.563800     -0.573055     -0.309610      0.309610       49.9081       50.2177    
   4  0.295284      -1.21982     -0.659042      0.659042       50.7881       51.4472    
   5  0.506481     -0.680269     -0.367535      0.367535       50.6018       50.9693    
   6  0.345803      -1.06189     -0.573716      0.573716       50.8055       51.3792    
   7  0.741641     -0.298890     -0.161484      0.161484       50.7879       50.9494    
   8  0.182310      -1.70204     -0.919580      0.919580       51.2471       52.1667    
   9  0.315187      -1.15459     -0.623800      0.623800       51.2345       51.8583    
  10  0.598844     -0.512755     -0.277031      0.277031       50.9387       51.2158    
  11  0.659119     -0.416852     -0.225216      0.225216       51.1539       51.3791    
  12  0.247481      -1.39642     -0.754459      0.754459       51.3462       52.1007    
  13  0.255298      -1.36532     -0.737656      0.737656       51.0834       51.8211    
  14  0.876488     -0.131833     -0.712265E-01  0.712265E-01   51.5633       51.6345    
  15  0.358010      -1.02719     -0.554972      0.554972       51.3244       51.8793    
  16  0.317480      -1.14734     -0.619885      0.619885       49.9640       50.5839    
  17  0.153422      -1.87456      -1.01279       1.01279       51.4040       52.4167    
  18  0.296162      -1.21685     -0.657439      0.657439       51.8162       52.4736    
  19  0.629760     -0.462417     -0.249834      0.249834       50.9008       51.1506    
  20  0.458345E-01  -3.08272      -1.66553       1.66553       51.6848       53.3503    
  21  0.209534      -1.56287     -0.844385      0.844385       51.6333       52.4776    
  22  0.490210E-01  -3.01551      -1.62922       1.62922       51.7687       53.3979    
  23  0.144817      -1.93229      -1.04397       1.04397       52.1572       53.2012    
  24  0.764061     -0.269107     -0.145393      0.145393       51.9465       52.0919    
  25  0.158664      -1.84097     -0.994638      0.994638       52.4235       53.4181    
  26  0.242818      -1.41544     -0.764734      0.764734       52.4090       53.1737    
  27  0.779950     -0.248525     -0.134273      0.134273       51.7952       51.9294    
  28  0.763580     -0.269737     -0.145734      0.145734       51.7185       51.8642    
  29  0.817639     -0.201335     -0.108777      0.108777       52.3116       52.4204    
  30  0.656802     -0.420373     -0.227119      0.227119       52.4794       52.7066    
  31  0.202192      -1.59854     -0.863658      0.863658       51.6934       52.5570    
  32  0.469647     -0.755773     -0.408329      0.408329       52.3736       52.7819    
  33  0.107456      -2.23067      -1.20519       1.20519       52.4471       53.6523    
  34  0.709118     -0.343734     -0.185712      0.185712       52.9439       53.1296    
  35  0.988480     -0.115868E-01 -0.626014E-02  0.626014E-02   51.9477       51.9540    
  36  0.645173     -0.438236     -0.236770      0.236770       52.6989       52.9357    
  37  0.583143     -0.539322     -0.291385      0.291385       52.5065       52.7979    
  38  0.276552E-01  -3.58794      -1.93849       1.93849       52.3783       54.3168    
  39  0.560517     -0.578896     -0.312766      0.312766       52.8251       53.1379    
  40  0.292779      -1.22834     -0.663645      0.663645       52.7564       53.4200    
  41  0.486207     -0.721121     -0.389607      0.389607       52.8546       53.2442    
  42  0.379142E-01  -3.27243      -1.76803       1.76803       53.3520       55.1200    
  43  0.459895     -0.776757     -0.419666      0.419666       53.3113       53.7309    
  44  0.810771     -0.209769     -0.113334      0.113334       52.8045       52.9179    
  45  0.189138      -1.66528     -0.899715      0.899715       53.1301       54.0298    
  46  0.509870     -0.673599     -0.363932      0.363932       53.1638       53.5277    
  47  0.468020E-01  -3.06183      -1.65424       1.65424       52.9926       54.6469    
  48  0.568404     -0.564922     -0.305216      0.305216       52.1205       52.4258    
  49  0.891250     -0.115130     -0.622026E-01  0.622026E-01   52.6144       52.6766    
  50  0.415261     -0.878849     -0.474824      0.474824       52.6465       53.1213    
  51  0.714019     -0.336846     -0.181991      0.181991       53.7200       53.9020    
  52  0.606207     -0.500534     -0.270428      0.270428       50.4602       50.7306    
loop,thermsimp(1:2)       46  0.124273      0.585336    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340         50.04          1.02          1.00         24.12          0.20          0.07         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    341         57.89          1.03          1.03         24.18          0.07          0.06         26.36
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    57.895        2.342     -1.648      5.262     -100.0     0.8627    
                     -0.4721      2.534     -100.0      3.055      2.264    
                       1.493    -0.9643      1.841      0.000      0.000    
                      -1.099      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -3.780     -8.110     -6.975     -1.217    
                      -12.56     -3.225      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.6066E-01-0.3417E-01  0.000     0.5902E-01
                     -0.6181E-02-0.1018    -0.6189E-01-0.2304     0.1299E-01

                      -1.751     -1.171      0.000    -0.8142E-01-0.1216E-01
                      0.8541E-01 0.4091E-01-0.3293E-01-0.4337     0.5659    
                     -0.8510E-01-0.1351    -0.2083    -0.7663      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.195      9.144     -7039.     -4.000    
                     -0.7622     -1.024      9.598      8.537     -4904.    

                      -4.000    -0.3524    -0.4496      8.793      9.045    
                      -6912.     -4.000    -0.9208    -0.2586      10.31    
                       8.321     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       46
neval is:      340
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       47
neval is:      340


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      340     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926     -0.230659      0.230659       49.9081       50.1388    
   2  0.474910     -0.744630     -0.402308      0.402308       49.9640       50.3663    
   3  0.125725      -2.07366      -1.12036       1.12036       50.4602       51.5805    
   4  0.950967     -0.502756E-01 -0.271629E-01  0.271629E-01   50.6248       50.6519    
   5  0.562475     -0.575409     -0.310882      0.310882       50.7879       51.0988    
   6  0.728528     -0.316729     -0.171122      0.171122       50.6018       50.7729    
   7  0.326058      -1.12068     -0.605481      0.605481       50.5262       51.1317    
   8  0.460979     -0.774402     -0.418394      0.418394       50.9008       51.3192    
   9  0.186861      -1.67739     -0.906261      0.906261       50.9387       51.8450    
  10  0.737773     -0.304119     -0.164309      0.164309       51.1539       51.3182    
  11  0.254524      -1.36836     -0.739297      0.739297       50.8055       51.5448    
  12  0.475390     -0.743621     -0.401763      0.401763       50.7881       51.1899    
  13  0.783107     -0.244486     -0.132091      0.132091       51.5633       51.6954    
  14  0.615536     -0.485261     -0.262177      0.262177       51.0834       51.3456    
  15  0.600710E-01  -2.81223      -1.51939       1.51939       51.2345       52.7539    
  16  0.834417     -0.181022     -0.978027E-01  0.978027E-01   51.7185       51.8163    
  17  0.270355      -1.30802     -0.706697      0.706697       51.3244       52.0311    
  18  0.408387     -0.895540     -0.483842      0.483842       51.7952       52.2790    
  19  0.248286      -1.39318     -0.752704      0.752704       51.9477       52.7004    
  20  0.586808E-01  -2.83564      -1.53204       1.53204       51.9465       53.4786    
  21  0.747050     -0.291623     -0.157558      0.157558       51.3462       51.5038    
  22  0.261869E-01  -3.64250      -1.96797       1.96797       51.2471       53.2151    
  23  0.495813     -0.701557     -0.379037      0.379037       51.4040       51.7830    
  24  0.600032     -0.510772     -0.275960      0.275960       52.3116       52.5875    
  25  0.936456     -0.656531E-01 -0.354710E-01  0.354710E-01   52.1205       52.1560    
  26  0.583260     -0.539121     -0.291276      0.291276       51.8162       52.1075    
  27  0.994266     -0.575021E-02 -0.310672E-02  0.310672E-02   51.6333       51.6364    
  28  0.149755      -1.89876      -1.02586       1.02586       51.6934       52.7192    
  29  0.751239     -0.286032     -0.154537      0.154537       52.6144       52.7689    
  30  0.703931     -0.351075     -0.189679      0.189679       52.4794       52.6691    
  31  0.998476     -0.152564E-02 -0.824272E-03  0.824272E-03   52.3736       52.3744    
  32  0.501495     -0.690161     -0.372880      0.372880       52.5065       52.8794    
  33  0.446468     -0.806387     -0.435674      0.435674       52.8045       53.2402    
  34  0.321376      -1.13514     -0.613296      0.613296       52.6989       53.3122    
  35  0.850901     -0.161459     -0.872332E-01  0.872332E-01   52.6465       52.7337    
  36  0.975881     -0.244142E-01 -0.131905E-01  0.131905E-01   52.9439       52.9571    
  37  0.386316     -0.951100     -0.513860      0.513860       52.8251       53.3390    
  38  0.782734     -0.244962     -0.132348      0.132348       52.4090       52.5413    
  39  0.142678      -1.94716      -1.05201       1.05201       52.1572       53.2092    
  40  0.509914     -0.673514     -0.363886      0.363886       52.8546       53.2185    
  41  0.211111      -1.55537     -0.840335      0.840335       51.6848       52.5251    
  42  0.212538      -1.54864     -0.836696      0.836696       51.7687       52.6054    
  43  0.889982     -0.116555     -0.629720E-01  0.629720E-01   52.4235       52.4865    
  44  0.769070     -0.262573     -0.141863      0.141863       52.7564       52.8983    
  45  0.792434     -0.232646     -0.125694      0.125694       53.1638       53.2895    
  46  0.250220E-01  -3.68800      -1.99255       1.99255       52.4471       54.4396    
  47  0.190304      -1.65913     -0.896396      0.896396       53.3113       54.2077    
  48  0.579595     -0.545425     -0.294682      0.294682       53.7200       54.0147    
  49  0.373376     -0.985170     -0.532267      0.532267       53.1301       53.6624    
  50  0.933620E-01  -2.37127      -1.28115       1.28115       52.3783       53.6594    
  51  0.628243     -0.464828     -0.251137      0.251137       52.9926       53.2438    
  52  0.737857     -0.304005     -0.164248      0.164248       50.0390       50.2033    
loop,thermsimp(1:2)       47  0.230659      0.402308    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    342         50.62          1.18          1.04         24.12          0.06          0.06         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    343         57.46          1.02          1.02         24.15          0.06          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     50.62
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       47
neval is:      342
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       48
neval is:      342


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      342     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197     -0.622387      0.622387       49.9081       50.5305    
   2  0.452730     -0.792459     -0.428149      0.428149       50.0390       50.4672    
   3  0.463916     -0.768051     -0.414962      0.414962       49.9640       50.3790    
   4  0.531172E-01  -2.93526      -1.58586       1.58586       50.6248       52.2106    
   5  0.933113     -0.692290E-01 -0.374030E-01  0.374030E-01   50.6018       50.6392    
   6  0.107612      -2.22922      -1.20440       1.20440       50.7879       51.9923    
   7  0.228017      -1.47833     -0.798713      0.798713       50.5262       51.3249    
   8  0.766526     -0.265887     -0.143653      0.143653       50.7881       50.9318    
   9  0.676418     -0.390944     -0.211219      0.211219       51.1539       51.3651    
  10  0.220696      -1.51097     -0.816346      0.816346       50.9008       51.7171    
  11  0.959946E-01  -2.34346      -1.26613       1.26613       51.0834       52.3495    
  12  0.570655     -0.560971     -0.303081      0.303081       51.3462       51.6493    
  13  0.736426     -0.305947     -0.165297      0.165297       50.8055       50.9708    
  14  0.966377     -0.342013E-01 -0.184783E-01  0.184783E-01   50.4602       50.4786    
  15  0.797662     -0.226070     -0.122141      0.122141       51.6333       51.7554    
  16  0.413688     -0.882643     -0.476874      0.476874       51.5633       52.0401    
  17  0.200670      -1.60609     -0.867739      0.867739       51.4040       52.2717    
  18  0.843958E-01  -2.47224      -1.33570       1.33570       51.7185       53.0542    
  19  0.375580     -0.979284     -0.529087      0.529087       50.9387       51.4678    
  20  0.968669     -0.318322E-01 -0.171983E-01  0.171983E-01   51.3244       51.3416    
  21  0.379263     -0.969525     -0.523814      0.523814       51.8162       52.3400    
  22  0.421746     -0.863352     -0.466451      0.466451       52.1205       52.5870    
  23  0.639909     -0.446429     -0.241197      0.241197       51.7952       52.0364    
  24  0.549878     -0.598059     -0.323119      0.323119       52.3736       52.6967    
  25  0.226469      -1.48515     -0.802395      0.802395       52.4235       53.2259    
  26  0.547044E-02  -5.20840      -2.81399       2.81399       51.6848       54.4987    
  27  0.372808     -0.986692     -0.533089      0.533089       52.4090       52.9421    
  28  0.406819E-01  -3.20197      -1.72996       1.72996       52.3116       54.0415    
  29  0.664564     -0.408624     -0.220771      0.220771       51.7687       51.9894    
  30  0.708700     -0.344323     -0.186031      0.186031       52.4794       52.6655    
  31  0.863329     -0.146959     -0.793989E-01  0.793989E-01   51.9477       52.0271    
  32  0.406109     -0.901134     -0.486864      0.486864       51.6934       52.1802    
  33  0.101947      -2.28330      -1.23362       1.23362       52.6465       53.8801    
  34  0.660574     -0.414646     -0.224025      0.224025       51.2345       51.4585    
  35  0.839002     -0.175542     -0.948420E-01  0.948420E-01   52.6144       52.7092    
  36  0.735312E-01  -2.61005      -1.41015       1.41015       52.5065       53.9166    
  37  0.559917     -0.579967     -0.313344      0.313344       52.7564       53.0697    
  38  0.922004     -0.812055E-01 -0.438737E-01  0.438737E-01   52.9439       52.9878    
  39  0.891471     -0.114882     -0.620686E-01  0.620686E-01   52.1572       52.2193    
  40  0.489346     -0.714686     -0.386131      0.386131       51.2471       51.6333    
  41  0.583196     -0.539231     -0.291336      0.291336       52.8546       53.1460    
  42  0.989235     -0.108230E-01 -0.584747E-02  0.584747E-02   52.8045       52.8104    
  43  0.844741     -0.168725     -0.911589E-01  0.911589E-01   52.9926       53.0838    
  44  0.734982     -0.307909     -0.166357      0.166357       53.1638       53.3302    
  45  0.913246     -0.907495E-01 -0.490301E-01  0.490301E-01   52.6989       52.7479    
  46  0.605096     -0.502369     -0.271420      0.271420       52.8251       53.0965    
  47  0.623739     -0.472024     -0.255025      0.255025       51.9465       52.2015    
  48  0.780990     -0.247193     -0.133554      0.133554       52.3783       52.5118    
  49  0.615662E-01  -2.78764      -1.50611       1.50611       53.1301       54.6362    
  50  0.646443E-02  -5.04144      -2.72379       2.72379       53.7200       56.4438    
  51  0.848055     -0.164809     -0.890431E-01  0.890431E-01   53.3113       53.4003    
  52  0.740886     -0.299909     -0.162034      0.162034       50.6159       50.7779    
loop,thermsimp(1:2)       48  0.622387      0.428149    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    344         49.39          1.16          1.01         24.20          0.09          0.07         26.54
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    345         52.35          1.04          1.02         24.12          0.08          0.06         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.39
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       48
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       49
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      344     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.459299E-02  0.459299E-02   49.9640       49.9686    
   2  0.120199      -2.11861      -1.14464       1.14464       50.0390       51.1837    
   3  0.825835     -0.191360     -0.103388      0.103388       50.4602       50.5635    
   4  0.769690     -0.261767     -0.141427      0.141427       49.9081       50.0495    
   5  0.206534      -1.57729     -0.852178      0.852178       50.6018       51.4539    
   6  0.435455     -0.831363     -0.449168      0.449168       50.6159       51.0650    
   7  0.408718     -0.894731     -0.483405      0.483405       50.7881       51.2715    
   8  0.504170E-01  -2.98743      -1.61405       1.61405       50.8055       52.4196    
   9  0.943874     -0.577631E-01 -0.312082E-01  0.312082E-01   50.5262       50.5574    
  10  0.161493      -1.82330     -0.985090      0.985090       51.3244       52.3095    
  11  0.248560      -1.39207     -0.752108      0.752108       51.1539       51.9060    
  12  0.952734     -0.484195E-01 -0.261601E-01  0.261601E-01   51.2345       51.2607    
  13  0.349224      -1.05204     -0.568397      0.568397       50.9387       51.5071    
  14  0.245013      -1.40644     -0.759872      0.759872       51.2471       52.0070    
  15  0.713805     -0.337146     -0.182153      0.182153       51.3462       51.5284    
  16  0.206995      -1.57506     -0.850973      0.850973       50.9008       51.7517    
  17  0.573984     -0.555154     -0.299938      0.299938       51.6333       51.9332    
  18  0.791297     -0.234082     -0.126470      0.126470       51.7687       51.8951    
  19  0.599323     -0.511955     -0.276599      0.276599       50.7879       51.0645    
  20  0.632893     -0.457454     -0.247153      0.247153       51.9477       52.1948    
  21  0.920472     -0.828688E-01 -0.447723E-01  0.447723E-01   51.7952       51.8399    
  22  0.650695     -0.429713     -0.232165      0.232165       51.5633       51.7954    
  23  0.759327     -0.275322     -0.148751      0.148751       51.6934       51.8421    
  24  0.547563     -0.602278     -0.325398      0.325398       51.9465       52.2719    
  25  0.375945     -0.978312     -0.528562      0.528562       50.6248       51.1533    
  26  0.436593     -0.828753     -0.447758      0.447758       52.1572       52.6050    
  27  0.226348      -1.48568     -0.802683      0.802683       51.4040       52.2066    
  28  0.889061     -0.117589     -0.635310E-01  0.635310E-01   51.8162       51.8797    
  29  0.294563      -1.22226     -0.660363      0.660363       51.0834       51.7438    
  30  0.760606     -0.273640     -0.147842      0.147842       52.3783       52.5261    
  31  0.131934      -2.02545      -1.09431       1.09431       52.1205       53.2149    
  32  0.150887      -1.89123      -1.02179       1.02179       52.4794       53.5012    
  33  0.108814      -2.21811      -1.19840       1.19840       52.3736       53.5720    
  34  0.392982     -0.933991     -0.504616      0.504616       52.6144       53.1190    
  35  0.524209     -0.645865     -0.348947      0.348947       52.6989       53.0478    
  36  0.779329     -0.249322     -0.134703      0.134703       52.8045       52.9392    
  37  0.684136     -0.379599     -0.205089      0.205089       52.4090       52.6141    
  38  0.898629     -0.106885     -0.577479E-01  0.577479E-01   52.9439       53.0017    
  39  0.885947E-01  -2.42368      -1.30947       1.30947       51.7185       53.0279    
  40  0.865042     -0.144977     -0.783283E-01  0.783283E-01   52.7564       52.8347    
  41  0.953799     -0.473027E-01 -0.255567E-01  0.255567E-01   52.9926       53.0182    
  42  0.264945      -1.32823     -0.717618      0.717618       52.8251       53.5427    
  43  0.931660     -0.707875E-01 -0.382450E-01  0.382450E-01   52.8546       52.8929    
  44  0.273150      -1.29773     -0.701139      0.701139       52.4235       53.1246    
  45  0.773196     -0.257223     -0.138972      0.138972       53.1638       53.3028    
  46  0.936342     -0.657743E-01 -0.355365E-01  0.355365E-01   53.3113       53.3468    
  47  0.367272      -1.00165     -0.541173      0.541173       52.6465       53.1877    
  48  0.970907     -0.295243E-01 -0.159514E-01  0.159514E-01   52.5065       52.5224    
  49  0.722669     -0.324804     -0.175485      0.175485       52.3116       52.4871    
  50  0.247966      -1.39446     -0.753401      0.753401       51.6848       52.4382    
  51  0.730821     -0.313587     -0.169424      0.169424       53.1301       53.2995    
  52  0.379134     -0.969864     -0.523998      0.523998       49.3934       49.9174    
loop,thermsimp(1:2)       49  0.459299E-02   1.14464    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346         49.97          1.19          1.04         24.16          0.15          0.06         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    347         50.74          1.00          1.00         24.30          0.09          0.06         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       49
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       50
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      346     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949      -2.53364       2.53364       49.3934       51.9270    
   2  0.902150     -0.102974     -0.556349E-01  0.556349E-01   49.9640       50.0196    
   3  0.375868     -0.978517     -0.528673      0.528673       49.9081       50.4368    
   4  0.136549E-01  -4.29366      -2.31978       2.31978       50.5262       52.8460    
   5  0.948329     -0.530533E-01 -0.286636E-01  0.286636E-01   50.4602       50.4888    
   6  0.489379E-01  -3.01720      -1.63013       1.63013       50.7879       52.4181    
   7  0.319400      -1.14131     -0.616627      0.616627       50.6159       51.2325    
   8  0.748008     -0.290342     -0.156866      0.156866       50.6248       50.7816    
   9  0.468015     -0.759255     -0.410210      0.410210       50.0390       50.4493    
  10  0.467420     -0.760527     -0.410897      0.410897       51.2345       51.6454    
  11  0.345085      -1.06396     -0.574838      0.574838       50.7881       51.3630    
  12  0.598981     -0.512526     -0.276907      0.276907       50.6018       50.8787    
  13  0.231496      -1.46319     -0.790532      0.790532       50.9387       51.7293    
  14  0.685496     -0.377613     -0.204016      0.204016       51.3462       51.5502    
  15  0.225803      -1.48809     -0.803985      0.803985       51.0834       51.8874    
  16  0.744991E-01  -2.59697      -1.40309       1.40309       50.9008       52.3039    
  17  0.436777     -0.828332     -0.447531      0.447531       51.5633       52.0108    
  18  0.241074      -1.42265     -0.768630      0.768630       51.7952       52.5638    
  19  0.728071     -0.317357     -0.171462      0.171462       51.6934       51.8648    
  20  0.228500      -1.47622     -0.797571      0.797571       51.8162       52.6138    
  21  0.423678     -0.858781     -0.463982      0.463982       51.7687       52.2327    
  22  0.812855     -0.207202     -0.111947      0.111947       51.1539       51.2659    
  23  0.810546     -0.210047     -0.113484      0.113484       51.6333       51.7467    
  24  0.113500      -2.17595      -1.17562       1.17562       51.2471       52.4228    
  25  0.197385      -1.62260     -0.876658      0.876658       51.9477       52.8244    
  26  0.101018      -2.29246      -1.23857       1.23857       51.4040       52.6425    
  27  0.857009E-01  -2.45689      -1.32741       1.32741       51.9465       53.2739    
  28  0.693668     -0.365762     -0.197614      0.197614       51.3244       51.5220    
  29  0.705918     -0.348256     -0.188156      0.188156       50.8055       50.9937    
  30  0.309793      -1.17185     -0.633127      0.633127       51.6848       52.3179    
  31  0.144843      -1.93210      -1.04388       1.04388       52.3116       53.3555    
  32  0.412916     -0.884511     -0.477883      0.477883       52.5065       52.9844    
  33  0.916661     -0.870180E-01 -0.470141E-01  0.470141E-01   52.3783       52.4253    
  34  0.933384E-01  -2.37152      -1.28129       1.28129       52.1572       53.4385    
  35  0.937330     -0.647200E-01 -0.349669E-01  0.349669E-01   52.4090       52.4439    
  36  0.958012     -0.428952E-01 -0.231754E-01  0.231754E-01   52.7564       52.7796    
  37  0.692877E-01  -2.66949      -1.44227       1.44227       52.8546       54.2969    
  38  0.228520E-01  -3.77872      -2.04156       2.04156       52.8045       54.8461    
  39  0.188135      -1.67060     -0.902589      0.902589       52.9439       53.8465    
  40  0.122595E-01  -4.40146      -2.37802       2.37802       52.9926       55.3707    
  41  0.776693     -0.252710     -0.136534      0.136534       51.7185       51.8550    
  42  0.571957     -0.558691     -0.301849      0.301849       52.6989       53.0007    
  43  0.313016      -1.16150     -0.627535      0.627535       52.6144       53.2419    
  44  0.512360     -0.668728     -0.361300      0.361300       52.4235       52.7848    
  45  0.874954     -0.133584     -0.721727E-01  0.721727E-01   52.6465       52.7187    
  46  0.617920     -0.481397     -0.260089      0.260089       52.1205       52.3806    
  47  0.529196     -0.636396     -0.343832      0.343832       53.1301       53.4739    
  48  0.389261E-02  -5.54867      -2.99784       2.99784       53.1638       56.1616    
  49  0.323386E-01  -3.43149      -1.85397       1.85397       53.3113       55.1652    
  50  0.900641     -0.104648     -0.565393E-01  0.565393E-01   52.4794       52.5360    
  51  0.872638     -0.136235     -0.736050E-01  0.736050E-01   52.8251       52.8987    
  52  0.965349     -0.352660E-01 -0.190535E-01  0.190535E-01   49.9682       49.9873    
loop,thermsimp(1:2)       50   2.53364      0.556349E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348         49.24          1.23          1.04         24.34          0.01          0.07         26.69
Just calling func    0   0         26.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    349         49.06          1.02          1.03         24.37          0.03          0.06         26.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       50
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       51
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      348     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577     -0.548798E-01  0.548798E-01   49.9682       50.0231    
   2  0.808902     -0.212077     -0.114581      0.114581       49.9640       50.0786    
   3  0.762147     -0.271616     -0.146749      0.146749       49.9081       50.0548    
   4  0.287851      -1.24531     -0.672816      0.672816       50.0390       50.7119    
   5  0.212418      -1.54920     -0.837002      0.837002       50.4602       51.2972    
   6  0.380717     -0.965699     -0.521747      0.521747       50.6248       51.1465    
   7  0.877795     -0.130342     -0.704211E-01  0.704211E-01   50.6018       50.6722    
   8  0.836834     -0.178130     -0.962398E-01  0.962398E-01   50.8055       50.9018    
   9  0.435183     -0.831988     -0.449506      0.449506       50.6159       51.0654    
  10  0.900166     -0.105177     -0.568248E-01  0.568248E-01   51.1539       51.2107    
  11  0.175095      -1.74242     -0.941396      0.941396       50.7881       51.7295    
  12  0.322232      -1.13248     -0.611857      0.611857       51.3244       51.9362    
  13  0.706662     -0.347203     -0.187587      0.187587       51.3462       51.5338    
  14  0.494297     -0.704618     -0.380691      0.380691       51.2345       51.6152    
  15  0.324383      -1.12583     -0.608263      0.608263       50.9387       51.5470    
  16  0.777122     -0.252157     -0.136235      0.136235       51.6333       51.7695    
  17  0.499054E-01  -2.99763      -1.61956       1.61956       51.7185       53.3380    
  18  0.489193E-01  -3.01758      -1.63034       1.63034       51.6934       53.3237    
  19  0.480140     -0.733678     -0.396391      0.396391       51.0834       51.4798    
  20  0.914126     -0.897865E-01 -0.485098E-01  0.485098E-01   49.3934       49.4419    
  21  0.613008     -0.489378     -0.264401      0.264401       51.5633       51.8277    
  22  0.470573     -0.753804     -0.407265      0.407265       51.7687       52.1759    
  23  0.614279     -0.487307     -0.263282      0.263282       50.9008       51.1640    
  24  0.410529     -0.890308     -0.481015      0.481015       51.6848       52.1658    
  25  0.582759     -0.539981     -0.291741      0.291741       52.1205       52.4123    
  26  0.422753E-01  -3.16355      -1.70920       1.70920       50.7879       52.4971    
  27  0.717044     -0.332618     -0.179707      0.179707       51.2471       51.4268    
  28  0.420765     -0.865682     -0.467710      0.467710       52.3783       52.8460    
  29  0.801392     -0.221405     -0.119620      0.119620       52.4090       52.5286    
  30  0.426188     -0.852875     -0.460791      0.460791       52.4794       52.9402    
  31  0.338881      -1.08211     -0.584641      0.584641       51.7952       52.3798    
  32  0.398160     -0.920902     -0.497545      0.497545       51.8162       52.3138    
  33  0.938837     -0.631132E-01 -0.340988E-01  0.340988E-01   51.4040       51.4381    
  34  0.411860E-01  -3.18966      -1.72331       1.72331       52.6465       54.3698    
  35  0.180703      -1.71090     -0.924365      0.924365       52.7564       53.6808    
  36  0.617012     -0.482867     -0.260883      0.260883       52.4235       52.6844    
  37  0.788612     -0.237480     -0.128306      0.128306       51.9477       52.0760    
  38  0.381719     -0.963071     -0.520328      0.520328       50.5262       51.0465    
  39  0.376038     -0.978064     -0.528428      0.528428       52.8251       53.3535    
  40  0.105996      -2.24435      -1.21258       1.21258       52.5065       53.7191    
  41  0.769932E-01  -2.56404      -1.38530       1.38530       52.6989       54.0842    
  42  0.365987      -1.00516     -0.543066      0.543066       52.6144       53.1574    
  43  0.731763     -0.312298     -0.168728      0.168728       51.9465       52.1153    
  44  0.447137     -0.804891     -0.434866      0.434866       52.3116       52.7465    
  45  0.273519      -1.29638     -0.700410      0.700410       52.1572       52.8576    
  46  0.870614     -0.138556     -0.748591E-01  0.748591E-01   53.1301       53.2049    
  47  0.822463     -0.195452     -0.105599      0.105599       52.9439       53.0495    
  48  0.456061     -0.785129     -0.424189      0.424189       52.8546       53.2788    
  49  0.603947     -0.504269     -0.272446      0.272446       52.8045       53.0770    
  50  0.342037      -1.07284     -0.579631      0.579631       53.3113       53.8909    
  51  0.693527     -0.365965     -0.197724      0.197724       52.9926       53.1904    
  52  0.958323     -0.425703E-01 -0.229999E-01  0.229999E-01   49.0624       49.0854    
loop,thermsimp(1:2)       51  0.548798E-01  0.114581    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350         51.10          1.23          1.02         24.23          0.19          0.06         26.72
Just calling func    0   0         26.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       51
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       52
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      349     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906     -0.467291      0.467291       49.0624       49.5297    
   2  0.315135      -1.15476     -0.623891      0.623891       49.3934       50.0173    
   3  0.696708     -0.361389     -0.195251      0.195251       49.9682       50.1635    
   4  0.922116     -0.810842E-01 -0.438082E-01  0.438082E-01   49.9081       49.9519    
   5  0.908133     -0.963648E-01 -0.520639E-01  0.520639E-01   49.9640       50.0161    
   6  0.174132      -1.74794     -0.944377      0.944377       50.6018       51.5461    
   7  0.490629     -0.712068     -0.384716      0.384716       50.0390       50.4238    
   8  0.382604     -0.960755     -0.519076      0.519076       50.8055       51.3246    
   9  0.985159     -0.149527E-01 -0.807864E-02  0.807864E-02   50.5262       50.5343    
  10  0.182634      -1.70027     -0.918622      0.918622       50.6159       51.5345    
  11  0.554568     -0.589565     -0.318530      0.318530       50.6248       50.9433    
  12  0.999791     -0.209153E-03 -0.113001E-03  0.113001E-03   50.9008       50.9009    
  13  0.284621      -1.25660     -0.678914      0.678914       51.1539       51.8328    
  14  0.920706E-01  -2.38520      -1.28867       1.28867       50.4602       51.7488    
  15  0.243911      -1.41095     -0.762309      0.762309       51.2471       52.0095    
  16  0.866829     -0.142914     -0.772132E-01  0.772132E-01   51.4040       51.4812    
  17  0.640039     -0.446225     -0.241087      0.241087       51.0834       51.3245    
  18  0.737488E-01  -2.60709      -1.40856       1.40856       51.3462       52.7548    
  19  0.511916     -0.669594     -0.361768      0.361768       50.9387       51.3005    
  20  0.870220     -0.139009     -0.751039E-01  0.751039E-01   51.2345       51.3096    
  21  0.594690     -0.519714     -0.280791      0.280791       50.7881       51.0689    
  22  0.659508     -0.416262     -0.224898      0.224898       51.6333       51.8582    
  23  0.702023     -0.353789     -0.191145      0.191145       51.5633       51.7544    
  24  0.178121      -1.72529     -0.932140      0.932140       51.3244       52.2565    
  25  0.622271     -0.474379     -0.256297      0.256297       51.9477       52.2040    
  26  0.877027     -0.131217     -0.708939E-01  0.708939E-01   51.9465       52.0174    
  27  0.206753      -1.57623     -0.851606      0.851606       51.6848       52.5364    
  28  0.927381     -0.753912E-01 -0.407323E-01  0.407323E-01   51.7687       51.8094    
  29  0.610274     -0.493848     -0.266816      0.266816       51.8162       52.0830    
  30  0.453676     -0.790373     -0.427022      0.427022       51.7952       52.2222    
  31  0.203335      -1.59290     -0.860611      0.860611       52.1205       52.9812    
  32  0.558786     -0.581989     -0.314437      0.314437       50.7879       51.1024    
  33  0.685013     -0.378317     -0.204397      0.204397       52.4090       52.6134    
  34  0.753574     -0.282929     -0.152861      0.152861       52.4235       52.5763    
  35  0.736990E-01  -2.60777      -1.40892       1.40892       52.3116       53.7205    
  36  0.719848     -0.328716     -0.177598      0.177598       52.3783       52.5559    
  37  0.177345E-01  -4.03224      -2.17854       2.17854       52.1572       54.3357    
  38  0.277334E-01  -3.58512      -1.93697       1.93697       52.4794       54.4164    
  39  0.228604      -1.47576     -0.797324      0.797324       52.9439       53.7412    
  40  0.874609     -0.133979     -0.723859E-01  0.723859E-01   52.8045       52.8769    
  41  0.875699     -0.132733     -0.717130E-01  0.717130E-01   52.6144       52.6861    
  42  0.540874     -0.614569     -0.332039      0.332039       52.9926       53.3247    
  43  0.343108E-01  -3.37230      -1.82198       1.82198       53.1301       54.9521    
  44  0.982551     -0.176027E-01 -0.951040E-02  0.951040E-02   52.8546       52.8641    
  45  0.201823      -1.60037     -0.864645      0.864645       51.6934       52.5580    
  46  0.116838      -2.14697      -1.15996       1.15996       51.7185       52.8784    
  47  0.520586     -0.652800     -0.352694      0.352694       52.8251       53.1778    
  48  0.515528     -0.662563     -0.357969      0.357969       52.7564       53.1144    
  49  0.814407     -0.205295     -0.110917      0.110917       52.5065       52.6174    
  50  0.436930     -0.827981     -0.447341      0.447341       53.3113       53.7586    
  51  0.802441     -0.220097     -0.118914      0.118914       52.6989       52.8178    
  52  0.366662      -1.00331     -0.542070      0.542070       51.0956       51.6377    
loop,thermsimp(1:2)       52  0.467291      0.623891    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351         48.89          1.23          1.01         24.36          0.04          0.07         26.71
Just calling func    0   0         26.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    352         53.88          1.00          0.98         24.32          0.11          0.06         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       52
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       53
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      351     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885      -1.82552       1.82552       49.0624       50.8879    
   2  0.714674     -0.335928     -0.181495      0.181495       49.9081       50.0896    
   3  0.977792     -0.224587E-01 -0.121340E-01  0.121340E-01   49.9640       49.9761    
   4  0.771231     -0.259767     -0.140347      0.140347       49.3934       49.5338    
   5  0.265148      -1.32747     -0.717204      0.717204       49.9682       50.6854    
   6  0.559491     -0.580728     -0.313756      0.313756       50.0390       50.3528    
   7  0.934824E-01  -2.36998      -1.28045       1.28045       50.5262       51.8066    
   8  0.928182     -0.745278E-01 -0.402658E-01  0.402658E-01   50.9008       50.9410    
   9  0.464905     -0.765922     -0.413812      0.413812       50.6248       51.0386    
  10  0.871919     -0.137059     -0.740499E-01  0.740499E-01   50.7881       50.8622    
  11  0.982233     -0.179265E-01 -0.968530E-02  0.968530E-02   50.7879       50.7976    
  12  0.426376     -0.852433     -0.460552      0.460552       50.9387       51.3993    
  13  0.471128E-01  -3.05521      -1.65067       1.65067       51.2345       52.8852    
  14  0.686439     -0.376238     -0.203274      0.203274       51.0834       51.2867    
  15  0.117826      -2.13855      -1.15541       1.15541       50.8055       51.9609    
  16  0.756878E-01  -2.58114      -1.39454       1.39454       51.4040       52.7985    
  17  0.196211      -1.62856     -0.879880      0.879880       50.6159       51.4958    
  18  0.431930     -0.839491     -0.453560      0.453560       50.6018       51.0553    
  19  0.707794     -0.345602     -0.186722      0.186722       51.0956       51.2823    
  20  0.174358E-01  -4.04923      -2.18772       2.18772       50.4602       52.6479    
  21  0.267976      -1.31686     -0.711471      0.711471       51.5633       52.2747    
  22  0.793866     -0.230841     -0.124719      0.124719       51.7687       51.8934    
  23  0.135848      -1.99622      -1.07852       1.07852       51.1539       52.2324    
  24  0.663958     -0.409536     -0.221264      0.221264       51.6333       51.8545    
  25  0.281101      -1.26904     -0.685637      0.685637       51.2471       51.9328    
  26  0.606466     -0.500106     -0.270197      0.270197       51.9465       52.2167    
  27  0.940056     -0.618158E-01 -0.333978E-01  0.333978E-01   51.8162       51.8496    
  28  0.124106      -2.08662      -1.12736       1.12736       51.9477       53.0751    
  29  0.205090      -1.58431     -0.855969      0.855969       51.7952       52.6511    
  30  0.852960     -0.159043     -0.859276E-01  0.859276E-01   51.3244       51.4103    
  31  0.241701      -1.42005     -0.767225      0.767225       51.6848       52.4520    
  32  0.744368     -0.295220     -0.159501      0.159501       52.3783       52.5378    
  33  0.279909      -1.27329     -0.687934      0.687934       51.6934       52.3813    
  34  0.142971      -1.94511      -1.05091       1.05091       52.4235       53.4744    
  35  0.367233      -1.00176     -0.541230      0.541230       52.4090       52.9502    
  36  0.839044     -0.175493     -0.948150E-01  0.948150E-01   52.5065       52.6013    
  37  0.762369     -0.271325     -0.146591      0.146591       52.6144       52.7610    
  38  0.414704     -0.880189     -0.475548      0.475548       51.3462       51.8218    
  39  0.294445      -1.22266     -0.660580      0.660580       52.6989       53.3595    
  40  0.296874      -1.21445     -0.656140      0.656140       52.8546       53.5108    
  41  0.834777     -0.180590     -0.975693E-01  0.975693E-01   52.8045       52.9021    
  42  0.399354     -0.917907     -0.495926      0.495926       51.7185       52.2144    
  43  0.948666     -0.526981E-01 -0.284717E-01  0.284717E-01   52.1205       52.1490    
  44  0.306553E-01  -3.48495      -1.88285       1.88285       52.7564       54.6392    
  45  0.768324E-01  -2.56613      -1.38643       1.38643       52.8251       54.2115    
  46  0.723813     -0.323222     -0.174630      0.174630       52.9926       53.1673    
  47  0.912222     -0.918720E-01 -0.496365E-01  0.496365E-01   52.3116       52.3612    
  48  0.846322     -0.166855     -0.901482E-01  0.901482E-01   52.9439       53.0341    
  49  0.704090     -0.350850     -0.189557      0.189557       53.3113       53.5008    
  50  0.443839     -0.812294     -0.438866      0.438866       52.1572       52.5961    
  51  0.790462     -0.235137     -0.127040      0.127040       52.4794       52.6065    
  52  0.134239      -2.00813      -1.08495       1.08495       48.8935       49.9784    
loop,thermsimp(1:2)       53   1.82552      0.181495    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353         49.70          1.23          1.03         24.16          0.14          0.06         26.62
Just calling func    0   0         26.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.70
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       53
neval is:      352
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       54
neval is:      352


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      352     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133     -0.262648      0.262648       49.3934       49.6561    
   2  0.438442     -0.824528     -0.445476      0.445476       49.9640       50.4095    
   3  0.666371     -0.405908     -0.219304      0.219304       48.8935       49.1128    
   4  0.419797     -0.867984     -0.468954      0.468954       49.9081       50.3770    
   5  0.662493     -0.411746     -0.222458      0.222458       50.0390       50.2615    
   6  0.261021      -1.34315     -0.725678      0.725678       49.9682       50.6939    
   7  0.451731     -0.794667     -0.429343      0.429343       50.7879       51.2173    
   8  0.858047     -0.153096     -0.827147E-01  0.827147E-01   50.7881       50.8708    
   9  0.678039     -0.388550     -0.209926      0.209926       49.0624       49.2723    
  10  0.257304      -1.35750     -0.733427      0.733427       50.9008       51.6342    
  11  0.379774     -0.968178     -0.523087      0.523087       50.6248       51.1479    
  12  0.200314      -1.60787     -0.868700      0.868700       50.6018       51.4705    
  13  0.702955E-01  -2.65505      -1.43447       1.43447       51.0956       52.5301    
  14  0.846007     -0.167228     -0.903498E-01  0.903498E-01   51.0834       51.1738    
  15  0.692217     -0.367856     -0.198745      0.198745       50.9387       51.1375    
  16  0.830541     -0.185678     -0.100318      0.100318       51.3244       51.4247    
  17  0.162133E-02  -6.42451      -3.47103       3.47103       50.6159       54.0869    
  18  0.829216     -0.187275     -0.101181      0.101181       50.5262       50.6274    
  19  0.464918     -0.765894     -0.413797      0.413797       51.3462       51.7600    
  20  0.204157      -1.58887     -0.858432      0.858432       51.8162       52.6746    
  21  0.203429      -1.59244     -0.860362      0.860362       51.6333       52.4936    
  22  0.403935     -0.906500     -0.489764      0.489764       51.7687       52.2584    
  23  0.508037     -0.677201     -0.365878      0.365878       51.2471       51.6130    
  24  0.337702      -1.08559     -0.586522      0.586522       50.8055       51.3921    
  25  0.375672     -0.979039     -0.528955      0.528955       52.1205       52.6495    
  26  0.218755      -1.51980     -0.821118      0.821118       51.7185       52.5396    
  27  0.803422     -0.218876     -0.118254      0.118254       51.9465       52.0648    
  28  0.324101      -1.12670     -0.608734      0.608734       51.1539       51.7626    
  29  0.804001     -0.218155     -0.117864      0.117864       51.5633       51.6811    
  30  0.727676     -0.317899     -0.171755      0.171755       52.3116       52.4833    
  31  0.769479     -0.262042     -0.141576      0.141576       51.6934       51.8350    
  32  0.632293     -0.458402     -0.247665      0.247665       51.6848       51.9324    
  33  0.300459      -1.20244     -0.649655      0.649655       52.3783       53.0280    
  34  0.567362     -0.566759     -0.306208      0.306208       52.1572       52.4634    
  35  0.803345     -0.218971     -0.118306      0.118306       52.5065       52.6248    
  36  0.764706     -0.268264     -0.144938      0.144938       52.4794       52.6244    
  37  0.159444      -1.83606     -0.991987      0.991987       50.4602       51.4521    
  38  0.951670     -0.495367E-01 -0.267636E-01  0.267636E-01   51.7952       51.8219    
  39  0.769198     -0.262407     -0.141773      0.141773       52.6144       52.7561    
  40  0.916532     -0.871588E-01 -0.470901E-01  0.470901E-01   51.4040       51.4510    
  41  0.146117E-01  -4.22593      -2.28319       2.28319       51.2345       53.5177    
  42  0.196164      -1.62880     -0.880009      0.880009       52.8045       53.6845    
  43  0.399482     -0.917586     -0.495753      0.495753       52.4090       52.9047    
  44  0.646732     -0.435823     -0.235466      0.235466       52.9439       53.1794    
  45  0.207790      -1.57122     -0.848901      0.848901       51.9477       52.7966    
  46  0.276388      -1.28595     -0.694772      0.694772       52.9926       53.6874    
  47  0.410494     -0.890394     -0.481061      0.481061       52.6989       53.1800    
  48  0.437747     -0.826115     -0.446333      0.446333       52.4235       52.8698    
  49  0.414886     -0.879752     -0.475312      0.475312       53.3113       53.7866    
  50  0.453890     -0.789901     -0.426768      0.426768       52.8546       53.2814    
  51  0.141383      -1.95628      -1.05694       1.05694       52.8251       53.8821    
  52  0.264375      -1.33039     -0.718782      0.718782       49.7016       50.4204    
loop,thermsimp(1:2)       54  0.262648      0.445476    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    354         51.79          1.20          1.03         24.12          0.09          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     51.79
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       54
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       55
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      353     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241     -0.252981      0.252981       48.8935       49.1464    
   2  0.909442     -0.949244E-01 -0.512857E-01  0.512857E-01   49.0624       49.1137    
   3  0.449837     -0.798870     -0.431613      0.431613       49.3934       49.8250    
   4  0.761598     -0.272336     -0.147138      0.147138       50.0390       50.1862    
   5  0.706800     -0.347007     -0.187481      0.187481       49.9081       50.0956    
   6  0.214343      -1.54018     -0.832126      0.832126       49.9640       50.7961    
   7  0.855661     -0.155881     -0.842192E-01  0.842192E-01   49.7016       49.7858    
   8  0.432924E-01  -3.13978      -1.69636       1.69636       50.5262       52.2225    
   9  0.902784     -0.102271     -0.552552E-01  0.552552E-01   49.9682       50.0235    
  10  0.706965     -0.346774     -0.187355      0.187355       50.7881       50.9755    
  11  0.826667     -0.190354     -0.102844      0.102844       50.9387       51.0416    
  12  0.824436     -0.193055     -0.104304      0.104304       50.6248       50.7291    
  13  0.442772     -0.814700     -0.440166      0.440166       51.0834       51.5236    
  14  0.416355     -0.876217     -0.473402      0.473402       50.7879       51.2613    
  15  0.268464      -1.31504     -0.710488      0.710488       50.8055       51.5160    
  16  0.779742     -0.248792     -0.134417      0.134417       51.3244       51.4588    
  17  0.406799E-01  -3.20202      -1.72999       1.72999       51.4040       53.1339    
  18  0.975397     -0.249106E-01 -0.134587E-01  0.134587E-01   50.4602       50.4736    
  19  0.425150E-01  -3.15790      -1.70615       1.70615       50.6018       52.3079    
  20  0.302481      -1.19574     -0.646032      0.646032       51.2471       51.8932    
  21  0.732033     -0.311930     -0.168529      0.168529       50.9008       51.0693    
  22  0.774561     -0.255459     -0.138019      0.138019       51.5633       51.7013    
  23  0.899897     -0.105475     -0.569859E-01  0.569859E-01   51.3462       51.4032    
  24  0.549624     -0.598520     -0.323368      0.323368       51.1539       51.4773    
  25  0.143543      -1.94112      -1.04875       1.04875       51.7952       52.8439    
  26  0.229055      -1.47379     -0.796261      0.796261       51.6934       52.4896    
  27  0.334206      -1.09600     -0.592145      0.592145       51.6848       52.2769    
  28  0.301620      -1.19859     -0.647572      0.647572       51.9465       52.5941    
  29  0.856030     -0.155449     -0.839862E-01  0.839862E-01   51.7687       51.8527    
  30  0.978878     -0.213482E-01 -0.115340E-01  0.115340E-01   52.1572       52.1687    
  31  0.890790E-01  -2.41823      -1.30652       1.30652       52.3116       53.6181    
  32  0.275076      -1.29071     -0.697342      0.697342       51.6333       52.3306    
  33  0.506865     -0.679511     -0.367126      0.367126       51.0956       51.4627    
  34  0.628553     -0.464334     -0.250870      0.250870       51.7185       51.9694    
  35  0.787972     -0.238293     -0.128745      0.128745       52.4794       52.6082    
  36  0.746168     -0.292804     -0.158196      0.158196       52.5065       52.6647    
  37  0.116954      -2.14598      -1.15943       1.15943       52.1205       53.2800    
  38  0.245368      -1.40500     -0.759091      0.759091       51.8162       52.5753    
  39  0.873952     -0.134729     -0.727915E-01  0.727915E-01   52.6144       52.6872    
  40  0.850596     -0.161818     -0.874269E-01  0.874269E-01   51.9477       52.0351    
  41  0.455763     -0.785783     -0.424543      0.424543       52.4235       52.8480    
  42  0.984333     -0.157910E-01 -0.853155E-02  0.853155E-02   52.4090       52.4175    
  43  0.956700     -0.442655E-01 -0.239158E-01  0.239158E-01   52.3783       52.4022    
  44  0.186161      -1.68114     -0.908287      0.908287       52.9439       53.8522    
  45  0.791379     -0.233979     -0.126414      0.126414       52.6989       52.8253    
  46  0.262937      -1.33584     -0.721728      0.721728       52.8546       53.5763    
  47  0.115228E-01  -4.46342      -2.41150       2.41150       51.2345       53.6460    
  48  0.324912      -1.12420     -0.607382      0.607382       52.8045       53.4119    
  49  0.164288      -1.80613     -0.975816      0.975816       52.9926       53.9685    
  50  0.334193E-02  -5.70121      -3.08025       3.08025       53.3113       56.3915    
  51  0.189130      -1.66532     -0.899738      0.899738       52.8251       53.7249    
  52  0.157956      -1.84544     -0.997053      0.997053       51.7884       52.7855    
loop,thermsimp(1:2)       55  0.252981      0.512857E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355         49.42          1.05          1.00         24.14          0.11          0.07         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    356         57.98          1.02          1.00         24.05          0.21          0.06         26.34
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.42
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       55
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       56
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      355     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307     -0.758048      0.758048       49.0624       49.8204    
   2  0.963480     -0.372033E-01 -0.201002E-01  0.201002E-01   48.8935       48.9136    
   3  0.633143     -0.457059     -0.246939      0.246939       49.7016       49.9485    
   4  0.939850E-02  -4.66721      -2.52160       2.52160       49.3934       51.9150    
   5  0.796978     -0.226928     -0.122605      0.122605       49.9682       50.0908    
   6  0.229125      -1.47349     -0.796096      0.796096       49.9081       50.7042    
   7  0.926958     -0.758467E-01 -0.409784E-01  0.409784E-01   50.0390       50.0800    
   8  0.687512     -0.374676     -0.202430      0.202430       50.4602       50.6626    
   9  0.695030     -0.363800     -0.196554      0.196554       50.6248       50.8213    
  10  0.900736     -0.104543     -0.564822E-01  0.564822E-01   49.9640       50.0205    
  11  0.867179     -0.142510     -0.769952E-01  0.769952E-01   50.7881       50.8651    
  12  0.879271     -0.128662     -0.695134E-01  0.695134E-01   50.9387       51.0083    
  13  0.197557      -1.62173     -0.876186      0.876186       50.9008       51.7770    
  14  0.790701     -0.234835     -0.126877      0.126877       50.7879       50.9148    
  15  0.807456     -0.213867     -0.115548      0.115548       51.3462       51.4618    
  16  0.688117     -0.373796     -0.201954      0.201954       51.3244       51.5263    
  17  0.227000      -1.48280     -0.801129      0.801129       51.0956       51.8967    
  18  0.374715     -0.981589     -0.530332      0.530332       51.1539       51.6842    
  19  0.176077      -1.73683     -0.938375      0.938375       50.8055       51.7439    
  20  0.446126E-01  -3.10974      -1.68013       1.68013       51.0834       52.7635    
  21  0.997763E-01  -2.30482      -1.24525       1.24525       51.5633       52.8085    
  22  0.142978E-01  -4.24765      -2.29492       2.29492       51.7687       54.0636    
  23  0.652216     -0.427379     -0.230904      0.230904       51.2471       51.4780    
  24  0.909797     -0.945339E-01 -0.510747E-01  0.510747E-01   51.7185       51.7696    
  25  0.145015      -1.93092      -1.04324       1.04324       51.9477       52.9909    
  26  0.189723      -1.66219     -0.898049      0.898049       52.1572       53.0553    
  27  0.260997      -1.34324     -0.725728      0.725728       50.5262       51.2519    
  28  0.167755      -1.78525     -0.964533      0.964533       51.6848       52.6493    
  29  0.148939      -1.90422      -1.02881       1.02881       50.6018       51.6306    
  30  0.209474      -1.56315     -0.844540      0.844540       51.6333       52.4778    
  31  0.594522     -0.519998     -0.280944      0.280944       52.3783       52.6592    
  32  0.401703     -0.912043     -0.492758      0.492758       52.4090       52.9017    
  33  0.306469      -1.18264     -0.638956      0.638956       51.6934       52.3323    
  34  0.879335     -0.128589     -0.694740E-01  0.694740E-01   51.8162       51.8857    
  35  0.920707     -0.826134E-01 -0.446343E-01  0.446343E-01   51.9465       51.9912    
  36  0.215616      -1.53425     -0.828927      0.828927       52.4794       53.3084    
  37  0.821708     -0.196370     -0.106095      0.106095       52.5065       52.6126    
  38  0.935240     -0.669517E-01 -0.361726E-01  0.361726E-01   52.6144       52.6505    
  39  0.691932     -0.368268     -0.198968      0.198968       51.7884       51.9874    
  40  0.493152     -0.706938     -0.381944      0.381944       52.6989       53.0808    
  41  0.362160      -1.01567     -0.548745      0.548745       51.7952       52.3439    
  42  0.636318     -0.452056     -0.244237      0.244237       52.4235       52.6677    
  43  0.178369      -1.72390     -0.931388      0.931388       51.4040       52.3353    
  44  0.987372     -0.127089E-01 -0.686635E-02  0.686635E-02   52.1205       52.1274    
  45  0.557690     -0.583953     -0.315498      0.315498       52.8045       53.1200    
  46  0.434391     -0.833811     -0.450491      0.450491       52.8546       53.3051    
  47  0.759572     -0.275001     -0.148577      0.148577       52.3116       52.4602    
  48  0.578559     -0.547214     -0.295649      0.295649       51.2345       51.5301    
  49  0.262392      -1.33792     -0.722849      0.722849       52.8251       53.5480    
  50  0.615619     -0.485127     -0.262104      0.262104       52.9439       53.2060    
  51  0.580502     -0.543861     -0.293837      0.293837       52.9926       53.2865    
  52  0.434749     -0.832986     -0.450045      0.450045       49.4180       49.8680    
loop,thermsimp(1:2)       56  0.758048      0.201002E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357         50.30          1.22          1.02         24.12          0.09          0.06         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     50.30
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       56
neval is:      356
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       57
neval is:      356


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      356     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105     -0.643502      0.643502       48.8935       49.5370    
   2  0.729962     -0.314762     -0.170060      0.170060       49.0624       49.2324    
   3  0.788140     -0.238080     -0.128630      0.128630       49.4180       49.5466    
   4  0.718031     -0.331242     -0.178964      0.178964       49.7016       49.8805    
   5  0.603575     -0.504885     -0.272779      0.272779       49.9640       50.2368    
   6  0.287757      -1.24564     -0.672994      0.672994       50.0390       50.7120    
   7  0.690986     -0.369635     -0.199706      0.199706       49.9682       50.1680    
   8  0.976315     -0.239695E-01 -0.129502E-01  0.129502E-01   50.4602       50.4731    
   9  0.983892     -0.162393E-01 -0.877377E-02  0.877377E-02   49.9081       49.9169    
  10  0.858769     -0.152255     -0.822602E-01  0.822602E-01   50.6248       50.7070    
  11  0.968889     -0.316048E-01 -0.170754E-01  0.170754E-01   50.7881       50.8052    
  12  0.364921      -1.00807     -0.544642      0.544642       50.7879       51.3326    
  13  0.540930     -0.614466     -0.331983      0.331983       50.9387       51.2707    
  14  0.812278E-01  -2.51050      -1.35637       1.35637       50.5262       51.8826    
  15  0.919841     -0.835539E-01 -0.451425E-01  0.451425E-01   51.3462       51.3914    
  16  0.275462      -1.28930     -0.696585      0.696585       51.2471       51.9437    
  17  0.704362     -0.350463     -0.189348      0.189348       51.3244       51.5137    
  18  0.896809     -0.108913     -0.588434E-01  0.588434E-01   51.2345       51.2933    
  19  0.166873      -1.79052     -0.967384      0.967384       50.6018       51.5691    
  20  0.927791E-02  -4.68012      -2.52857       2.52857       51.1539       53.6825    
  21  0.906733     -0.979074E-01 -0.528974E-01  0.528974E-01   50.8055       50.8584    
  22  0.575421     -0.552654     -0.298587      0.298587       51.7185       52.0171    
  23  0.975069     -0.252469E-01 -0.136404E-01  0.136404E-01   50.9008       50.9144    
  24  0.610094     -0.494143     -0.266975      0.266975       51.8162       52.0832    
  25  0.823028     -0.194765     -0.105227      0.105227       51.0956       51.2008    
  26  0.709022     -0.343869     -0.185785      0.185785       49.3934       49.5792    
  27  0.956893     -0.440633E-01 -0.238065E-01  0.238065E-01   51.7884       51.8122    
  28  0.897850E-01  -2.41034      -1.30226       1.30226       51.9465       53.2488    
  29  0.836996     -0.177936     -0.961354E-01  0.961354E-01   52.1205       52.2167    
  30  0.688664     -0.373001     -0.201525      0.201525       51.6934       51.8949    
  31  0.587454     -0.531957     -0.287406      0.287406       51.4040       51.6914    
  32  0.880970     -0.126731     -0.684703E-01  0.684703E-01   51.7952       51.8636    
  33  0.506724     -0.679789     -0.367276      0.367276       52.3116       52.6789    
  34  0.802262     -0.220320     -0.119034      0.119034       51.6333       51.7523    
  35  0.764787E-01  -2.57074      -1.38892       1.38892       52.5065       53.8954    
  36  0.907101     -0.975014E-01 -0.526780E-01  0.526780E-01   51.6848       51.7374    
  37  0.797350     -0.226461     -0.122352      0.122352       52.6144       52.7367    
  38  0.257375      -1.35722     -0.733278      0.733278       52.3783       53.1116    
  39  0.643190     -0.441315     -0.238433      0.238433       52.4235       52.6619    
  40  0.513768     -0.665984     -0.359817      0.359817       51.0834       51.4432    
  41  0.850264     -0.162208     -0.876378E-01  0.876378E-01   51.5633       51.6509    
  42  0.200819      -1.60535     -0.867339      0.867339       52.4090       53.2763    
  43  0.331940      -1.10280     -0.595821      0.595821       51.9477       52.5435    
  44  0.900490     -0.104816     -0.566300E-01  0.566300E-01   52.1572       52.2138    
  45  0.618957     -0.479719     -0.259183      0.259183       52.6989       52.9581    
  46  0.395756     -0.926956     -0.500816      0.500816       52.8045       53.3053    
  47  0.528166     -0.638345     -0.344885      0.344885       52.9439       53.2888    
  48  0.586635     -0.533352     -0.288159      0.288159       52.9926       53.2808    
  49  0.705559     -0.348765     -0.188431      0.188431       52.8546       53.0431    
  50  0.191018      -1.65539     -0.894372      0.894372       52.4794       53.3738    
  51  0.581133     -0.542775     -0.293250      0.293250       52.8251       53.1184    
  52  0.297529      -1.21224     -0.654950      0.654950       50.2999       50.9549    
loop,thermsimp(1:2)       57  0.643502      0.170060    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    358         49.80          1.25          1.03         24.02          0.13          0.06         26.48
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    359         56.34          1.02          1.01         24.07          0.15          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.80
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       57
neval is:      358
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       58
neval is:      358


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      358
neval,tstepnext:      358     358

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486     -0.342800      0.342800       49.0624       49.4052    
   2  0.175946E-01  -4.04016      -2.18282       2.18282       48.8935       51.0763    
   3  0.419998     -0.867504     -0.468695      0.468695       49.4180       49.8867    
   4  0.448197E-01  -3.10511      -1.67763       1.67763       49.3934       51.0710    
   5  0.501784     -0.689586     -0.372569      0.372569       49.7016       50.0741    
   6  0.858173     -0.152949     -0.826355E-01  0.826355E-01   49.9081       49.9907    
   7  0.101932      -2.28345      -1.23370       1.23370       49.9682       51.2019    
   8  0.453268     -0.791273     -0.427508      0.427508       49.9640       50.3915    
   9  0.128092      -2.05501      -1.11028       1.11028       50.4602       51.5704    
  10  0.779644     -0.248918     -0.134485      0.134485       50.6248       50.7593    
  11  0.769943E-01  -2.56402      -1.38529       1.38529       50.0390       51.4243    
  12  0.140214      -1.96458      -1.06142       1.06142       50.7881       51.8496    
  13  0.571588     -0.559337     -0.302198      0.302198       50.8055       51.1077    
  14  0.455096     -0.787247     -0.425333      0.425333       50.9008       51.3261    
  15  0.594240     -0.520471     -0.281200      0.281200       50.2999       50.5811    
  16  0.833288     -0.182376     -0.985339E-01  0.985339E-01   51.0956       51.1941    
  17  0.807090E-01  -2.51691      -1.35983       1.35983       50.9387       52.2986    
  18  0.430313     -0.843242     -0.455586      0.455586       51.2345       51.6901    
  19  0.990463     -0.958277E-02 -0.517737E-02  0.517737E-02   50.7879       50.7931    
  20  0.907906     -0.966144E-01 -0.521988E-01  0.521988E-01   51.3462       51.3984    
  21  0.607469     -0.498455     -0.269305      0.269305       51.0834       51.3527    
  22  0.927102     -0.756916E-01 -0.408946E-01  0.408946E-01   51.3244       51.3653    
  23  0.379122     -0.969896     -0.524015      0.524015       50.6018       51.1258    
  24  0.183121E-01  -4.00019      -2.16122       2.16122       51.5633       53.7245    
  25  0.561966     -0.576313     -0.311370      0.311370       51.4040       51.7153    
  26  0.638772     -0.448208     -0.242157      0.242157       51.6848       51.9269    
  27  0.234202      -1.45157     -0.784254      0.784254       51.6333       52.4175    
  28  0.257221      -1.35782     -0.733601      0.733601       51.7884       52.5220    
  29  0.688379     -0.373416     -0.201749      0.201749       51.7952       51.9969    
  30  0.360237E-01  -3.32358      -1.79566       1.79566       50.5262       52.3219    
  31  0.849177     -0.163487     -0.883288E-01  0.883288E-01   51.6934       51.7817    
  32  0.324868E-01  -3.42692      -1.85150       1.85150       51.2471       53.0986    
  33  0.216483E-01  -3.83283      -2.07080       2.07080       51.7185       53.7893    
  34  0.794095     -0.230552     -0.124562      0.124562       51.8162       51.9408    
  35  0.453180     -0.791465     -0.427612      0.427612       52.1572       52.5848    
  36  0.286278      -1.25079     -0.675777      0.675777       52.1205       52.7963    
  37  0.931500     -0.709590E-01 -0.383377E-01  0.383377E-01   51.9477       51.9860    
  38  0.483424     -0.726861     -0.392708      0.392708       52.4235       52.8162    
  39  0.782276     -0.245547     -0.132664      0.132664       52.3116       52.4443    
  40  0.976661     -0.236156E-01 -0.127590E-01  0.127590E-01   52.6144       52.6271    
  41  0.707981     -0.345338     -0.186579      0.186579       52.6989       52.8855    
  42  0.101993      -2.28285      -1.23338       1.23338       52.8546       54.0880    
  43  0.690974E-01  -2.67224      -1.44376       1.44376       52.3783       53.8221    
  44  0.767576E-01  -2.56710      -1.38695       1.38695       52.8251       54.2121    
  45  0.584825     -0.536443     -0.289829      0.289829       51.9465       52.2364    
  46  0.588828     -0.529621     -0.286144      0.286144       52.4090       52.6951    
  47  0.894562     -0.111421     -0.601985E-01  0.601985E-01   52.9926       53.0528    
  48  0.260723      -1.34430     -0.726296      0.726296       52.9439       53.6702    
  49  0.773456E-01  -2.55947      -1.38283       1.38283       52.8045       54.1874    
  50  0.848651E-01  -2.46669      -1.33270       1.33270       52.4794       53.8121    
  51  0.992803     -0.722305E-02 -0.390247E-02  0.390247E-02   51.1539       51.1578    
  52  0.529202     -0.636386     -0.343826      0.343826       49.8022       50.1460    
loop,thermsimp(1:2)       58  0.342800       2.18282    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    360         49.48          1.14          1.01         24.19          0.08          0.06         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    361         54.99          1.02          1.02         24.08          0.05          0.06         26.23
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    54.991        2.538     -1.430      5.271     -100.0      1.040    
                     -0.4875      2.278     -100.0      3.473      2.032    
                       1.574    -0.8666      1.841      0.000      0.000    
                      -1.317      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.305     -5.722      5.643     -2.092    
                      -13.58     -2.833      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5934E-01 0.3536E-01  0.000    -0.1217    
                     -0.1609    -0.1819    -0.1932    -0.1268    -0.1353    

                      -1.535     -1.280      0.000    -0.8210E-01-0.2538E-01
                      0.8541E-01-0.9690E-01-0.1951    -0.2870    -0.1843    
                      0.7509E-01-0.1016     0.2854    -0.7238      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.168      9.042     -7039.     -4.000    
                     -0.5648    -0.8348      9.419      8.371     -4904.    

                      -4.000    -0.3612    -0.5563      8.627      9.058    
                      -6912.     -4.000     -1.471    -0.6009      10.07    
                       8.494     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     49.48
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.540280               358
loop is:       58
neval is:      360
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.540280               358
loop is:       59
neval is:      360


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.270140               409

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      360     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01 -0.147337E-01  0.147337E-01   49.0624       49.0771    
   2  0.224221      -1.49512     -0.403892      0.403892       49.4180       49.8219    
   3  0.699642     -0.357186     -0.964901E-01  0.964901E-01   49.9081       50.0046    
   4  0.490916     -0.711482     -0.192200      0.192200       49.7016       49.8938    
   5  0.204251      -1.58840     -0.429091      0.429091       49.8022       50.2313    
   6  0.356522      -1.03136     -0.278611      0.278611       49.9640       50.2426    
   7  0.745938     -0.293113     -0.791814E-01  0.791814E-01   50.2999       50.3791    
   8  0.451533     -0.795107     -0.214790      0.214790       50.6248       50.8396    
   9  0.101038      -2.29226     -0.619231      0.619231       50.7879       51.4072    
  10  0.826978     -0.189977     -0.513204E-01  0.513204E-01   49.3934       49.4447    
  11  0.212337      -1.54958     -0.418603      0.418603       48.8935       49.3121    
  12  0.490540     -0.712248     -0.192407      0.192407       50.8055       50.9979    
  13  0.672078     -0.397381     -0.107348      0.107348       50.6018       50.7091    
  14  0.690580     -0.370223     -0.100012      0.100012       51.1539       51.2539    
  15  0.513190     -0.667108     -0.180212      0.180212       51.0956       51.2758    
  16  0.268393      -1.31530     -0.355316      0.355316       49.9682       50.3236    
  17  0.896898     -0.108813     -0.293947E-01  0.293947E-01   50.9008       50.9302    
  18  0.911953     -0.921674E-01 -0.248981E-01  0.248981E-01   51.0834       51.1083    
  19  0.355703      -1.03366     -0.279232      0.279232       51.3244       51.6036    
  20  0.293818      -1.22479     -0.330866      0.330866       51.3462       51.6771    
  21  0.713392     -0.337724     -0.912327E-01  0.912327E-01   50.0390       50.1303    
  22  0.660627     -0.414565     -0.111991      0.111991       50.4602       50.5721    
  23  0.795097     -0.229291     -0.619406E-01  0.619406E-01   51.2345       51.2964    
  24  0.919484     -0.839428E-01 -0.226763E-01  0.226763E-01   51.4040       51.4266    
  25  0.976382     -0.239014E-01 -0.645671E-02  0.645671E-02   51.6934       51.6998    
  26  0.922195     -0.809991E-01 -0.218811E-01  0.218811E-01   50.7881       50.8100    
  27  0.436062     -0.829970     -0.224208      0.224208       51.6848       51.9090    
  28  0.271848      -1.30251     -0.351860      0.351860       51.8162       52.1681    
  29  0.389360     -0.943252     -0.254810      0.254810       51.9477       52.2025    
  30  0.314178E-01  -3.46038     -0.934787      0.934787       51.7952       52.7300    
  31  0.545460     -0.606126     -0.163739      0.163739       51.9465       52.1103    
  32  0.925479E-01  -2.38003     -0.642941      0.642941       50.9387       51.5817    
  33  0.971973     -0.284273E-01 -0.767934E-02  0.767934E-02   50.5262       50.5339    
  34  0.403500     -0.907578     -0.245173      0.245173       51.6333       51.8784    
  35  0.392926     -0.934133     -0.252347      0.252347       52.3116       52.5639    
  36  0.718758     -0.330230     -0.892083E-01  0.892083E-01   51.7884       51.8776    
  37  0.746082     -0.292920     -0.791293E-01  0.791293E-01   52.1572       52.2363    
  38  0.353478      -1.03993     -0.280928      0.280928       52.6144       52.8953    
  39  0.843229     -0.170517     -0.460634E-01  0.460634E-01   52.4090       52.4550    
  40  0.388011     -0.946720     -0.255747      0.255747       52.1205       52.3763    
  41  0.969569     -0.309034E-01 -0.834823E-02  0.834823E-02   52.4235       52.4318    
  42  0.441380E-01  -3.12043     -0.842954      0.842954       52.6989       53.5418    
  43  0.533000     -0.629233     -0.169981      0.169981       52.9926       53.1626    
  44  0.288396      -1.24342     -0.335898      0.335898       51.2471       51.5830    
  45  0.683115     -0.381092     -0.102948      0.102948       52.9439       53.0469    
  46  0.339511      -1.08025     -0.291819      0.291819       51.5633       51.8551    
  47  0.150420E-01  -4.19691      -1.13375       1.13375       51.7185       52.8522    
  48  0.141026      -1.95881     -0.529152      0.529152       52.4794       53.0086    
  49  0.421666     -0.863541     -0.233277      0.233277       52.3783       52.6116    
  50  0.953496     -0.476201E-01 -0.128641E-01  0.128641E-01   52.8546       52.8675    
  51  0.966647     -0.339215E-01 -0.916354E-02  0.916354E-02   52.8045       52.8137    
  52  0.365434      -1.00667     -0.271942      0.271942       49.4770       49.7490    
loop,thermsimp(1:2)       59  0.147337E-01  0.403892    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    362         50.11          1.20          1.03         23.99          0.14          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     50.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.270140               409
loop is:       59
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.270140               409
loop is:       60
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      361     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808     -0.285829      0.285829       49.0624       49.3482    
   2  0.605757     -0.501276     -0.135415      0.135415       48.8935       49.0289    
   3  0.690633     -0.370146     -0.999912E-01  0.999912E-01   49.3934       49.4934    
   4  0.400665     -0.914628     -0.247078      0.247078       49.4770       49.7241    
   5  0.862165     -0.148309     -0.400641E-01  0.400641E-01   49.4180       49.4580    
   6  0.874011     -0.134662     -0.363776E-01  0.363776E-01   49.7016       49.7379    
   7  0.389525     -0.942826     -0.254695      0.254695       49.9081       50.1628    
   8  0.102225E-01  -4.58317      -1.23810       1.23810       50.0390       51.2771    
   9  0.102697      -2.27597     -0.614830      0.614830       49.8022       50.4170    
  10  0.818271     -0.200561     -0.541796E-01  0.541796E-01   49.9640       50.0182    
  11  0.888768     -0.117920     -0.318548E-01  0.318548E-01   49.9682       50.0001    
  12  0.539210     -0.617651     -0.166852      0.166852       50.2999       50.4668    
  13  0.317914      -1.14597     -0.309573      0.309573       50.5262       50.8358    
  14  0.437422     -0.826857     -0.223367      0.223367       50.4602       50.6835    
  15  0.925263     -0.776773E-01 -0.209837E-01  0.209837E-01   50.6018       50.6227    
  16  0.422436     -0.861717     -0.232784      0.232784       50.7881       51.0209    
  17  0.965248     -0.353697E-01 -0.955477E-02  0.955477E-02   50.6248       50.6343    
  18  0.771278     -0.259706     -0.701569E-01  0.701569E-01   50.9008       50.9709    
  19  0.902488     -0.102600     -0.277164E-01  0.277164E-01   50.8055       50.8332    
  20  0.512816     -0.667839     -0.180410      0.180410       51.0834       51.2638    
  21  0.915966     -0.877758E-01 -0.237117E-01  0.237117E-01   51.1539       51.1776    
  22  0.612605     -0.490035     -0.132378      0.132378       51.0956       51.2280    
  23  0.323528      -1.12847     -0.304844      0.304844       51.2345       51.5393    
  24  0.206646      -1.57675     -0.425943      0.425943       50.7879       51.2139    
  25  0.481057     -0.731769     -0.197680      0.197680       51.4040       51.6016    
  26  0.287887E-01  -3.54777     -0.958395      0.958395       50.9387       51.8971    
  27  0.996968     -0.303648E-02 -0.820274E-03  0.820274E-03   51.2471       51.2480    
  28  0.132770      -2.01914     -0.545450      0.545450       51.3244       51.8698    
  29  0.716038     -0.334023     -0.902328E-01  0.902328E-01   51.3462       51.4365    
  30  0.229552      -1.47162     -0.397544      0.397544       51.6934       52.0909    
  31  0.236358      -1.44241     -0.389651      0.389651       51.5633       51.9529    
  32  0.542780     -0.611051     -0.165069      0.165069       51.7884       51.9535    
  33  0.875156     -0.133353     -0.360239E-01  0.360239E-01   51.6333       51.6693    
  34  0.988730     -0.113343E-01 -0.306185E-02  0.306185E-02   51.6848       51.6878    
  35  0.244332      -1.40923     -0.380688      0.380688       51.9465       52.3272    
  36  0.659246     -0.416659     -0.112556      0.112556       51.8162       51.9288    
  37  0.457872     -0.781166     -0.211024      0.211024       51.9477       52.1587    
  38  0.380652E-01  -3.26846     -0.882940      0.882940       52.1572       53.0402    
  39  0.358843      -1.02487     -0.276858      0.276858       52.1205       52.3974    
  40  0.846233     -0.166960     -0.451025E-01  0.451025E-01   52.4235       52.4686    
  41  0.359308      -1.02358     -0.276509      0.276509       52.4090       52.6855    
  42  0.533329     -0.628617     -0.169815      0.169815       52.3116       52.4814    
  43  0.645289     -0.438058     -0.118337      0.118337       52.3783       52.4966    
  44  0.311850      -1.16523     -0.314775      0.314775       51.7952       52.1099    
  45  0.270084      -1.30902     -0.353619      0.353619       52.8045       53.1581    
  46  0.530313     -0.634287     -0.171346      0.171346       51.7185       51.8898    
  47  0.975874     -0.244213E-01 -0.659717E-02  0.659717E-02   52.8546       52.8612    
  48  0.313811      -1.15896     -0.313083      0.313083       52.6144       52.9275    
  49  0.932688     -0.696844E-01 -0.188245E-01  0.188245E-01   52.4794       52.4983    
  50  0.357359      -1.02901     -0.277978      0.277978       52.9439       53.2219    
  51  0.545837     -0.605435     -0.163552      0.163552       52.9926       53.1562    
  52  0.954982     -0.460626E-01 -0.124433E-01  0.124433E-01   50.1085       50.1210    
loop,thermsimp(1:2)       60  0.285829      0.135415    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363         50.55          1.17          1.01         24.14          0.12          0.06         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     50.55
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.270140               409
loop is:       60
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.270140               409
loop is:       61
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      362     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597     -0.110649      0.110649       48.8935       49.0041    
   2  0.718953     -0.329960     -0.891352E-01  0.891352E-01   49.0624       49.1515    
   3  0.454275     -0.789053     -0.213155      0.213155       49.4180       49.6311    
   4  0.253407E-01  -3.67534     -0.992856      0.992856       49.3934       50.3863    
   5  0.611947     -0.491110     -0.132668      0.132668       49.4770       49.6097    
   6  0.234016      -1.45237     -0.392342      0.392342       49.7016       50.0939    
   7  0.359481E-01  -3.32568     -0.898398      0.898398       49.9682       50.8666    
   8  0.222118E-01  -3.80713      -1.02846       1.02846       49.9640       50.9925    
   9  0.905838E-01  -2.40148     -0.648735      0.648735       50.1085       50.7573    
  10  0.791683     -0.233594     -0.631030E-01  0.631030E-01   49.9081       49.9712    
  11  0.557734     -0.583873     -0.157727      0.157727       49.8022       49.9599    
  12  0.936048E-01  -2.36867     -0.639873      0.639873       50.2999       50.9398    
  13  0.431059     -0.841510     -0.227325      0.227325       50.6018       50.8291    
  14  0.225758      -1.48829     -0.402047      0.402047       50.6248       51.0268    
  15  0.275181E-01  -3.59291     -0.970589      0.970589       50.4602       51.4307    
  16  0.802517     -0.220002     -0.594314E-01  0.594314E-01   50.8055       50.8650    
  17  0.423872     -0.858323     -0.231867      0.231867       50.5262       50.7581    
  18  0.300971      -1.20074     -0.324368      0.324368       50.9008       51.2251    
  19  0.479556     -0.734895     -0.198524      0.198524       50.7881       50.9867    
  20  0.621838     -0.475076     -0.128337      0.128337       51.1539       51.2822    
  21  0.397654     -0.922172     -0.249115      0.249115       50.7879       51.0370    
  22  0.664976     -0.408004     -0.110218      0.110218       51.0956       51.2058    
  23  0.288358      -1.24355     -0.335933      0.335933       51.2471       51.5831    
  24  0.442017     -0.816406     -0.220544      0.220544       51.0834       51.3040    
  25  0.150763E-01  -4.19463      -1.13314       1.13314       50.0390       51.1722    
  26  0.600886     -0.509350     -0.137596      0.137596       51.3462       51.4838    
  27  0.162927      -1.81446     -0.490157      0.490157       51.2345       51.7247    
  28  0.932743     -0.696251E-01 -0.188085E-01  0.188085E-01   51.4040       51.4228    
  29  0.997186     -0.281799E-02 -0.761252E-03  0.761252E-03   51.6333       51.6340    
  30  0.418339     -0.871463     -0.235417      0.235417       51.6848       51.9202    
  31  0.694800     -0.364132     -0.983664E-01  0.983664E-01   51.3244       51.4227    
  32  0.852711     -0.159334     -0.430426E-01  0.430426E-01   51.7185       51.7615    
  33  0.624847     -0.470249     -0.127033      0.127033       50.9387       51.0658    
  34  0.427649     -0.849453     -0.229471      0.229471       51.8162       52.0457    
  35  0.149871      -1.89798     -0.512720      0.512720       51.5633       52.0760    
  36  0.563430     -0.573713     -0.154983      0.154983       51.7884       51.9434    
  37  0.860100     -0.150706     -0.407117E-01  0.407117E-01   51.6934       51.7341    
  38  0.867090E-01  -2.44520     -0.660545      0.660545       51.7952       52.4557    
  39  0.847848     -0.165054     -0.445876E-01  0.445876E-01   51.9477       51.9923    
  40  0.782599E-01  -2.54772     -0.688240      0.688240       51.9465       52.6348    
  41  0.697889E-01  -2.66228     -0.719188      0.719188       52.1205       52.8397    
  42  0.422765     -0.860939     -0.232574      0.232574       52.4235       52.6561    
  43  0.158365      -1.84286     -0.497829      0.497829       52.3116       52.8094    
  44  0.518935     -0.655976     -0.177205      0.177205       52.3783       52.5555    
  45  0.430406     -0.843027     -0.227735      0.227735       52.4794       52.7072    
  46  0.639805     -0.446592     -0.120642      0.120642       52.4090       52.5296    
  47  0.830453E-01  -2.48837     -0.672207      0.672207       52.8546       53.5268    
  48  0.639384     -0.447250     -0.120820      0.120820       52.6144       52.7352    
  49  0.833791     -0.181773     -0.491041E-01  0.491041E-01   52.1572       52.2063    
  50  0.453972     -0.789720     -0.213335      0.213335       52.9926       53.2060    
  51  0.542088     -0.612327     -0.165414      0.165414       52.8045       52.9699    
  52  0.271321      -1.30445     -0.352384      0.352384       50.5503       50.9026    
loop,thermsimp(1:2)       61  0.110649      0.891352E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    364         49.18          1.22          1.02         24.09          0.11          0.06         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.270140               409
loop is:       61
neval is:      363
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.270140               409
loop is:       62
neval is:      363


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      409
neval,tstepnext:      363     409

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.382720E-02  0.382720E-02   48.8935       48.8973    
   2  0.420912     -0.865330     -0.233760      0.233760       49.0624       49.2961    
   3  0.617210     -0.482545     -0.130355      0.130355       49.4770       49.6074    
   4  0.787846     -0.238453     -0.644157E-01  0.644157E-01   49.4180       49.4824    
   5  0.608770     -0.496315     -0.134074      0.134074       49.8022       49.9363    
   6  0.925975     -0.769083E-01 -0.207760E-01  0.207760E-01   49.9081       49.9289    
   7  0.545822     -0.605462     -0.163559      0.163559       49.7016       49.8651    
   8  0.240142      -1.42653     -0.385361      0.385361       49.3934       49.7788    
   9  0.800257     -0.222822     -0.601931E-01  0.601931E-01   50.1085       50.1687    
  10  0.250149      -1.38570     -0.374333      0.374333       50.5262       50.9005    
  11  0.814044     -0.205741     -0.555789E-01  0.555789E-01   50.6018       50.6573    
  12  0.897552     -0.108084     -0.291978E-01  0.291978E-01   50.8055       50.8347    
  13  0.807530     -0.213775     -0.577492E-01  0.577492E-01   49.9682       50.0260    
  14  0.369031     -0.996874     -0.269295      0.269295       50.5503       50.8195    
  15  0.892620     -0.113594     -0.306863E-01  0.306863E-01   50.2999       50.3306    
  16  0.992736     -0.729054E-02 -0.196947E-02  0.196947E-02   50.7881       50.7901    
  17  0.264259      -1.33083     -0.359509      0.359509       49.9640       50.3235    
  18  0.164586      -1.80432     -0.487420      0.487420       50.6248       51.1122    
  19  0.594739     -0.519633     -0.140374      0.140374       50.7879       50.9283    
  20  0.766319     -0.266156     -0.718994E-01  0.718994E-01   50.9387       51.0106    
  21  0.392663     -0.934804     -0.252528      0.252528       50.0390       50.2916    
  22  0.900399     -0.104917     -0.283424E-01  0.283424E-01   51.0956       51.1239    
  23  0.853164E-01  -2.46139     -0.664919      0.664919       50.9008       51.5657    
  24  0.753181     -0.283450     -0.765712E-01  0.765712E-01   51.1539       51.2305    
  25  0.801958     -0.220699     -0.596195E-01  0.596195E-01   51.0834       51.1430    
  26  0.840206     -0.174108     -0.470336E-01  0.470336E-01   51.3244       51.3714    
  27  0.899787     -0.105597     -0.285261E-01  0.285261E-01   51.4040       51.4325    
  28  0.555629     -0.587654     -0.158749      0.158749       50.4602       50.6189    
  29  0.117481E-01  -4.44406      -1.20052       1.20052       51.3462       52.5467    
  30  0.228476      -1.47632     -0.398813      0.398813       51.2471       51.6460    
  31  0.121877      -2.10474     -0.568575      0.568575       51.6333       52.2018    
  32  0.475375     -0.743652     -0.200890      0.200890       51.2345       51.4354    
  33  0.208734      -1.56669     -0.423226      0.423226       51.6934       52.1166    
  34  0.680231     -0.385322     -0.104091      0.104091       51.7185       51.8226    
  35  0.211647      -1.55284     -0.419483      0.419483       51.6848       52.1042    
  36  0.982763     -0.173870E-01 -0.469693E-02  0.469693E-02   51.7884       51.7931    
  37  0.819904     -0.198568     -0.536412E-01  0.536412E-01   51.9477       52.0013    
  38  0.282339      -1.26465     -0.341632      0.341632       51.8162       52.1578    
  39  0.391986     -0.936529     -0.252994      0.252994       51.5633       51.8163    
  40  0.218050      -1.52303     -0.411431      0.411431       52.1572       52.5686    
  41  0.236244      -1.44289     -0.389782      0.389782       51.7952       52.1849    
  42  0.544673     -0.607570     -0.164129      0.164129       52.4090       52.5731    
  43  0.721937     -0.325818     -0.880163E-01  0.880163E-01   52.3783       52.4663    
  44  0.649728     -0.431202     -0.116485      0.116485       51.9465       52.0630    
  45  0.641823     -0.443443     -0.119791      0.119791       52.4235       52.5433    
  46  0.597293     -0.515347     -0.139216      0.139216       52.4794       52.6187    
  47  0.467405     -0.760558     -0.205457      0.205457       52.6144       52.8198    
  48  0.676900     -0.390232     -0.105417      0.105417       52.3116       52.4170    
  49  0.925913     -0.769750E-01 -0.207940E-01  0.207940E-01   52.1205       52.1413    
  50  0.692551     -0.367374     -0.992423E-01  0.992423E-01   52.8045       52.9038    
  51  0.161390      -1.82393     -0.492717      0.492717       52.9926       53.4854    
  52  0.513279     -0.666936     -0.180166      0.180166       49.1834       49.3635    
loop,thermsimp(1:2)       62  0.382720E-02  0.233760    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    365         71.82          1.20          0.99         24.23          0.09          0.07         26.57
Just calling func    0   0         26.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    366         54.34          1.02          1.02         24.07          0.14          0.05         26.31
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4     52.99
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.270140               409
loop is:       62
neval is:      365
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):     367       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:    367         48.13          1.17          1.03         24.16          0.05          0.06         26.47
iter,obj,time:    368         48.81          1.22          1.05         24.18          0.04          0.06         26.55
iter,obj,time:    369         48.84          1.23          1.05         24.13          0.02          0.06         26.49
iter,obj,time:    370         49.13          1.18          1.04         24.23          0.03          0.05         26.53
iter,obj,time:    371         48.79          1.14          1.02         24.22          0.07          0.06         26.51
iter,obj,time:    372         49.23          1.22          1.05         24.11          0.03          0.05         26.47
iter,obj,time:    373         49.15          1.19          1.04         24.23          0.03          0.06         26.54
iter,obj,time:    374         49.06          1.21          1.05         24.17          0.00          0.06         26.49
iter,obj,time:    375         49.13          1.19          1.05         24.06          0.12          0.06         26.48
iter,obj,time:    376         49.13          1.11          1.01         24.11          0.17          0.06         26.45
iter,obj,time:    377         49.11          1.19          1.03         24.18          0.04          0.06         26.50
iter,obj,time:    378         49.28          1.20          1.04         24.18          0.00          0.05         26.48
iter,obj,time:    379         49.25          1.15          1.04         23.96          0.09          0.06         26.30
iter,obj,time:    380         49.28          1.23          1.04         24.18          0.01          0.05         26.51
iter,obj,time:    381         49.40          1.02          1.01         24.05          0.17          0.06         26.30
iter,obj,time:    382         49.66          1.22          1.05         24.03          0.04          0.06         26.39
iter,obj,time:    383         49.30          1.23          1.05         24.12          0.03          0.05         26.48
iter,obj,time:    384         49.13          1.13          1.04         24.15          0.05          0.06         26.43
iter,obj,time:    385         49.31          1.21          1.05         24.12          0.02          0.06         26.47
iter,obj,time:    386         49.24          1.14          1.04         24.04          0.09          0.06         26.37
iter,obj,time:    387         49.28          1.22          1.05         24.12          0.07          0.06         26.52
iter,obj,time:    388         49.29          1.09          1.02         24.18          0.09          0.06         26.45
iter,obj,time:    389         49.46          1.22          1.05         24.05          0.01          0.06         26.39
iter,obj,time:    390         49.42          1.20          1.05         24.09          0.06          0.05         26.46
iter,obj,time:    391         49.20          1.19          1.04         24.04          0.16          0.06         26.49
iter,obj,time:    392         49.47          1.15          1.02         24.15          0.09          0.06         26.47
iter,obj,time:    393         49.90          1.19          1.03         24.10          0.12          0.06         26.50
iter,obj,time:    394         49.61          1.23          1.05         24.12          0.03          0.05         26.48
iter,obj,time:    395         49.50          1.22          1.06         24.13          0.01          0.06         26.48
iter,obj,time:    396         50.00          1.23          1.05         24.13          0.02          0.05         26.48
iter,obj,time:    397         49.63          1.03          1.03         24.21          0.08          0.06         26.42
iter,obj,time:    398         49.74          1.22          1.06         24.20          0.02          0.05         26.57
iter,obj,time:    399         49.83          1.07          1.04         24.25          0.08          0.06         26.50
iter,obj,time:    400         50.08          1.21          1.05         24.14          0.05          0.06         26.52
iter,obj,time:    401         49.80          1.13          1.02         24.14          0.16          0.06         26.51
iter,obj,time:    402         50.01          1.23          1.05         23.93          0.14          0.06         26.41
iter,obj,time:    403         49.91          1.10          1.02         24.04          0.36          0.06         26.58
iter,obj,time:    404         50.13          1.14          1.03         23.96          0.25          0.06         26.44
iter,obj,time:    405         49.99          1.11          1.02         24.01          0.23          0.06         26.44
iter,obj,time:    406         50.06          1.21          1.05         23.94          0.10          0.06         26.37
iter,obj,time:    407         50.06          1.04          1.03         24.02          0.23          0.06         26.37
iter,obj,time:    408         50.32          1.14          1.04         23.98          0.18          0.05         26.40
iter,obj,time:    409         49.78          1.12          1.05         24.01          0.17          0.05         26.40
iter,obj,time:    410         49.53          1.03          1.02         23.73          0.29          0.06         26.13
iter,obj,time:    411         49.76          1.22          1.05         24.09          0.05          0.06         26.47
iter,obj,time:    412         49.85          1.23          1.05         23.97          0.09          0.06         26.41
iter,obj,time:    413         50.26          1.22          1.06         23.88          0.17          0.06         26.39
iter,obj,time:    414         50.35          1.13          1.04         24.12          0.02          0.06         26.37
iter,obj,time:    415         50.16          1.22          1.05         24.03          0.07          0.05         26.42
iter,obj,time:    416         50.39          1.22          1.05         24.07          0.07          0.05         26.47
iter,obj,time:    417         50.75          1.00          1.04         24.11          0.02          0.06         26.23


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     419      52
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     416




loop,nloop:      62      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.270140               409
loop is:       63
neval is:      416


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.135070               460

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      416     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.204381E-02  0.204381E-02   48.8935       48.8955    
   2  0.760415     -0.273890     -0.369944E-01  0.369944E-01   48.1335       48.1705    
   3  0.328612      -1.11288     -0.150316      0.150316       48.8065       48.9568    
   4  0.164880      -1.80254     -0.243469      0.243469       48.8361       49.0796    
   5  0.706606     -0.347282     -0.469073E-01  0.469073E-01   49.1329       49.1798    
   6  0.832070     -0.183839     -0.248311E-01  0.248311E-01   48.7886       48.8134    
   7  0.231505      -1.46315     -0.197628      0.197628       49.2337       49.4314    
   8  0.802671E-01  -2.52240     -0.340700      0.340700       49.1506       49.4913    
   9  0.116349      -2.15116     -0.290557      0.290557       49.0560       49.3466    
  10  0.874222     -0.134421     -0.181563E-01  0.181563E-01   49.1304       49.1486    
  11  0.729333     -0.315625     -0.426315E-01  0.426315E-01   49.1295       49.1721    
  12  0.301675      -1.19841     -0.161869      0.161869       49.1145       49.2764    
  13  0.496896     -0.699375     -0.944644E-01  0.944644E-01   49.2823       49.3767    
  14  0.692174     -0.367918     -0.496947E-01  0.496947E-01   49.2532       49.3029    
  15  0.717718     -0.331678     -0.447997E-01  0.447997E-01   49.2768       49.3216    
  16  0.867334E-01  -2.44492     -0.330235      0.330235       49.4030       49.7333    
  17  0.762934     -0.270584     -0.365477E-01  0.365477E-01   49.6610       49.6975    
  18  0.966741     -0.338246E-01 -0.456869E-02  0.456869E-02   49.3015       49.3060    
  19  0.375386     -0.979801     -0.132342      0.132342       49.1315       49.2639    
  20  0.878716     -0.129293     -0.174636E-01  0.174636E-01   49.3057       49.3232    
  21  0.238969      -1.43142     -0.193342      0.193342       49.2443       49.4376    
  22  0.939578     -0.623249E-01 -0.841822E-02  0.841822E-02   49.2843       49.2927    
  23  0.694828     -0.364091     -0.491777E-01  0.491777E-01   49.2925       49.3417    
  24  0.869149     -0.140241     -0.189423E-01  0.189423E-01   49.4594       49.4783    
  25  0.310010      -1.17115     -0.158187      0.158187       49.4233       49.5815    
  26  0.831753     -0.184219     -0.248825E-01  0.248825E-01   49.1952       49.2201    
  27  0.621050     -0.476344     -0.643397E-01  0.643397E-01   49.4664       49.5308    
  28  0.902274     -0.102837     -0.138902E-01  0.138902E-01   49.9050       49.9189    
  29  0.341345      -1.07486     -0.145182      0.145182       49.6103       49.7555    
  30  0.718647     -0.330385     -0.446250E-01  0.446250E-01   49.5031       49.5477    
  31  0.489532     -0.714305     -0.964810E-01  0.964810E-01   49.9972       50.0937    
  32  0.387793     -0.947282     -0.127949      0.127949       49.6268       49.7547    
  33  0.576785     -0.550285     -0.743269E-01  0.743269E-01   49.7372       49.8115    
  34  0.454048     -0.789552     -0.106645      0.106645       49.8342       49.9409    
  35  0.532728     -0.629744     -0.850595E-01  0.850595E-01   50.0790       50.1641    
  36  0.459832     -0.776895     -0.104935      0.104935       49.7958       49.9007    
  37  0.784910     -0.242187     -0.327121E-01  0.327121E-01   50.0102       50.0430    
  38  0.842297     -0.171622     -0.231810E-01  0.231810E-01   49.9083       49.9315    
  39  0.967556     -0.329823E-01 -0.445492E-02  0.445492E-02   50.1253       50.1298    
  40  0.126414      -2.06819     -0.279351      0.279351       49.9917       50.2711    
  41  0.407002     -0.898938     -0.121419      0.121419       50.0607       50.1821    
  42  0.903435     -0.101551     -0.137165E-01  0.137165E-01   50.0619       50.0756    
  43  0.430116     -0.843701     -0.113959      0.113959       50.3183       50.4323    
  44  0.675859     -0.391771     -0.529165E-01  0.529165E-01   49.7751       49.8280    
  45  0.444470     -0.810872     -0.109524      0.109524       49.5256       49.6351    
  46  0.728661     -0.316547     -0.427559E-01  0.427559E-01   49.7586       49.8014    
  47  0.143617      -1.94060     -0.262117      0.262117       49.8472       50.1093    
  48  0.729467E-01  -2.61803     -0.353617      0.353617       50.2628       50.6164    
  49  0.720547     -0.327745     -0.442684E-01  0.442684E-01   50.3458       50.3901    
  50  0.742905     -0.297187     -0.401410E-01  0.401410E-01   50.1610       50.2012    
  51  0.807330     -0.214023     -0.289081E-01  0.289081E-01   50.3925       50.4214    
  52  0.387442     -0.948190     -0.128072      0.128072       50.7505       50.8786    
loop,thermsimp(1:2)       63  0.204381E-02  0.369944E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    418         53.11          1.18          1.00         24.11          0.03          0.06         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    419         49.86          1.02          1.00         24.13          0.03          0.05         26.24
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3     49.86
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       63
neval is:      418
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       64
neval is:      418


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      418     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.490866E-02  0.490866E-02   48.1335       48.1384    
   2  0.186231      -1.68077     -0.227021      0.227021       48.7886       49.0156    
   3  0.127308      -2.06115     -0.278399      0.278399       48.8935       49.1719    
   4  0.305661      -1.18528     -0.160096      0.160096       48.8065       48.9666    
   5  0.685804     -0.377164     -0.509435E-01  0.509435E-01   48.8361       48.8871    
   6  0.713250     -0.337923     -0.456433E-01  0.456433E-01   49.1304       49.1761    
   7  0.562604     -0.575180     -0.776895E-01  0.776895E-01   49.1295       49.2072    
   8  0.410540     -0.890283     -0.120250      0.120250       49.1329       49.2531    
   9  0.667633     -0.404017     -0.545705E-01  0.545705E-01   49.1952       49.2498    
  10  0.111237      -2.19609     -0.296625      0.296625       49.1315       49.4282    
  11  0.987129     -0.129550E-01 -0.174983E-02  0.174983E-02   49.1145       49.1163    
  12  0.525481     -0.643442     -0.869096E-01  0.869096E-01   49.2843       49.3712    
  13  0.740553     -0.300358     -0.405693E-01  0.405693E-01   49.2532       49.2937    
  14  0.456748E-01  -3.08621     -0.416854      0.416854       49.3015       49.7183    
  15  0.831796     -0.184168     -0.248756E-01  0.248756E-01   49.2768       49.3017    
  16  0.798422     -0.225118     -0.304067E-01  0.304067E-01   49.3057       49.3361    
  17  0.985535     -0.145708E-01 -0.196807E-02  0.196807E-02   49.2925       49.2945    
  18  0.323340      -1.12905     -0.152501      0.152501       49.0560       49.2085    
  19  0.745026     -0.294336     -0.397559E-01  0.397559E-01   49.2823       49.3220    
  20  0.711871     -0.339858     -0.459046E-01  0.459046E-01   49.2337       49.2796    
  21  0.232875      -1.45725     -0.196831      0.196831       49.2443       49.4411    
  22  0.118192      -2.13545     -0.288435      0.288435       49.4594       49.7478    
  23  0.310641      -1.16912     -0.157912      0.157912       49.1506       49.3086    
  24  0.220899      -1.51005     -0.203963      0.203963       49.4664       49.6704    
  25  0.487797     -0.717856     -0.969607E-01  0.969607E-01   49.5031       49.6000    
  26  0.278848      -1.27709     -0.172496      0.172496       49.4233       49.5958    
  27  0.159355      -1.83662     -0.248072      0.248072       49.5256       49.7736    
  28  0.473156     -0.748329     -0.101077      0.101077       49.6610       49.7620    
  29  0.358980      -1.02449     -0.138377      0.138377       49.4030       49.5414    
  30  0.873266     -0.135515     -0.183040E-01  0.183040E-01   49.6268       49.6451    
  31  0.168201      -1.78260     -0.240775      0.240775       49.6103       49.8511    
  32  0.492581     -0.708096     -0.956424E-01  0.956424E-01   49.7586       49.8543    
  33  0.878329     -0.129734     -0.175232E-01  0.175232E-01   49.7372       49.7547    
  34  0.266147      -1.32371     -0.178793      0.178793       49.7751       49.9539    
  35  0.510485     -0.672394     -0.908202E-01  0.908202E-01   49.7958       49.8866    
  36  0.810074     -0.210630     -0.284498E-01  0.284498E-01   49.9050       49.9334    
  37  0.950614     -0.506467E-01 -0.684084E-02  0.684084E-02   49.9083       49.9151    
  38  0.329006      -1.11168     -0.150155      0.150155       49.8342       49.9844    
  39  0.934893E-01  -2.36991     -0.320103      0.320103       50.0102       50.3303    
  40  0.686671     -0.375900     -0.507728E-01  0.507728E-01   50.0619       50.1127    
  41  0.888060     -0.118716     -0.160350E-01  0.160350E-01   49.9972       50.0132    
  42  0.749618     -0.288192     -0.389260E-01  0.389260E-01   49.8472       49.8861    
  43  0.433754     -0.835279     -0.112821      0.112821       50.1253       50.2381    
  44  0.630341     -0.461494     -0.623339E-01  0.623339E-01   50.0790       50.1414    
  45  0.569388     -0.563194     -0.760705E-01  0.760705E-01   50.0607       50.1367    
  46  0.965872     -0.347242E-01 -0.469019E-02  0.469019E-02   50.1610       50.1657    
  47  0.797995     -0.225653     -0.304789E-01  0.304789E-01   49.9917       50.0222    
  48  0.716091     -0.333948     -0.451063E-01  0.451063E-01   50.3458       50.3910    
  49  0.339849      -1.07925     -0.145775      0.145775       50.3925       50.5382    
  50  0.202757      -1.59575     -0.215537      0.215537       50.3183       50.5339    
  51  0.266068      -1.32400     -0.178833      0.178833       50.2628       50.4417    
  52  0.985546E-01  -2.31715     -0.312977      0.312977       49.8635       50.1765    
loop,thermsimp(1:2)       64  0.490866E-02  0.227021    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    420         48.92          1.21          1.01         24.10          0.06          0.06         26.45
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.92
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       64
neval is:      419
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       65
neval is:      419


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      419     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.424550     -0.856726     -0.115718      0.115718       48.1335       48.2492    
   2  0.350039      -1.04971     -0.141784      0.141784       48.8361       48.9779    
   3  0.872911     -0.135921     -0.183589E-01  0.183589E-01   48.8065       48.8249    
   4  0.829005     -0.187529     -0.253295E-01  0.253295E-01   48.7886       48.8139    
   5  0.201827      -1.60035     -0.216159      0.216159       49.1145       49.3307    
   6  0.735791     -0.306809     -0.414407E-01  0.414407E-01   48.8935       48.9349    
   7  0.985788     -0.143135E-01 -0.193332E-02  0.193332E-02   49.1304       49.1324    
   8  0.962727     -0.379858E-01 -0.513074E-02  0.513074E-02   49.1295       49.1346    
   9  0.796954     -0.226958     -0.306553E-01  0.306553E-01   49.0560       49.0867    
  10  0.563149     -0.574211     -0.775586E-01  0.775586E-01   49.1952       49.2728    
  11  0.776846     -0.252513     -0.341070E-01  0.341070E-01   49.1329       49.1670    
  12  0.921010     -0.822839E-01 -0.111141E-01  0.111141E-01   49.2337       49.2449    
  13  0.884938     -0.122238     -0.165107E-01  0.165107E-01   49.2532       49.2697    
  14  0.850974     -0.161373     -0.217967E-01  0.217967E-01   49.2925       49.3143    
  15  0.391065     -0.938882     -0.126815      0.126815       49.2768       49.4036    
  16  0.150921      -1.89100     -0.255417      0.255417       49.1506       49.4061    
  17  0.295162      -1.22023     -0.164816      0.164816       49.2823       49.4471    
  18  0.662567     -0.411634     -0.555994E-01  0.555994E-01   49.3057       49.3613    
  19  0.893994     -0.112056     -0.151354E-01  0.151354E-01   49.2843       49.2994    
  20  0.103282      -2.27029     -0.306648      0.306648       49.1315       49.4382    
  21  0.416341     -0.876251     -0.118355      0.118355       49.2443       49.3627    
  22  0.986101E-01  -2.31658     -0.312900      0.312900       49.4030       49.7159    
  23  0.617817E-01  -2.78415     -0.376055      0.376055       49.4233       49.7994    
  24  0.371945     -0.989010     -0.133585      0.133585       49.5031       49.6367    
  25  0.884755     -0.122444     -0.165385E-01  0.165385E-01   49.6268       49.6433    
  26  0.584237     -0.537449     -0.725932E-01  0.725932E-01   49.4664       49.5390    
  27  0.239981      -1.42719     -0.192771      0.192771       49.3015       49.4942    
  28  0.106477      -2.23982     -0.302533      0.302533       49.4594       49.7619    
  29  0.142954      -1.94523     -0.262742      0.262742       49.7372       50.0000    
  30  0.802284     -0.220292     -0.297548E-01  0.297548E-01   49.6610       49.6907    
  31  0.373571     -0.984648     -0.132996      0.132996       49.5256       49.6586    
  32  0.617091     -0.482739     -0.652035E-01  0.652035E-01   49.6103       49.6755    
  33  0.813617     -0.206266     -0.278603E-01  0.278603E-01   49.7586       49.7865    
  34  0.219787E-01  -3.81768     -0.515654      0.515654       49.8472       50.3628    
  35  0.398995     -0.918807     -0.124103      0.124103       49.7958       49.9199    
  36  0.906985     -0.976296E-01 -0.131868E-01  0.131868E-01   49.9083       49.9215    
  37  0.259146E-01  -3.65295     -0.493403      0.493403       49.9050       50.3984    
  38  0.347543      -1.05687     -0.142751      0.142751       49.7751       49.9178    
  39  0.879549     -0.128346     -0.173356E-01  0.173356E-01   49.8342       49.8516    
  40  0.618015     -0.481242     -0.650013E-01  0.650013E-01   49.9972       50.0622    
  41  0.173348      -1.75246     -0.236704      0.236704       49.9917       50.2284    
  42  0.324418      -1.12572     -0.152051      0.152051       50.0619       50.2139    
  43  0.426503     -0.852135     -0.115098      0.115098       50.0607       50.1757    
  44  0.672650     -0.396530     -0.535593E-01  0.535593E-01   50.0790       50.1326    
  45  0.500711     -0.691727     -0.934315E-01  0.934315E-01   50.1610       50.2545    
  46  0.457446     -0.782097     -0.105638      0.105638       49.8635       49.9692    
  47  0.408507     -0.895245     -0.120921      0.120921       50.1253       50.2462    
  48  0.649058     -0.432234     -0.583818E-01  0.583818E-01   50.0102       50.0686    
  49  0.275220      -1.29018     -0.174265      0.174265       50.3458       50.5201    
  50  0.706820     -0.346979     -0.468664E-01  0.468664E-01   50.2628       50.3097    
  51  0.596044     -0.517441     -0.698906E-01  0.698906E-01   50.3183       50.3882    
  52  0.362601      -1.01445     -0.137022      0.137022       48.9203       49.0574    
loop,thermsimp(1:2)       65  0.115718      0.141784    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    421         49.64          1.21          1.02         24.13          0.03          0.06         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  420    49.642        3.123     -1.574      5.145     -100.0     0.9796    
                     -0.6045      2.677     -100.0      2.843      1.931    
                       1.401     -1.076      1.841      0.000      0.000    
                      -1.183      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.016     -6.527     -6.101     -2.398    
                      -12.93     -2.884      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.6030E-01-0.3779E-01  0.000    -0.2159    
                     -0.9284E-01-0.1501    -0.5726E-01-0.1960     0.7742E-02

                      -1.410     -1.153      0.000    -0.2709E-01-0.2163E-01
                      0.8541E-01 0.5353E-01-0.2660E-02-0.3456    -0.1515    
                     -0.1211E-01-0.6824E-01-0.1449    -0.8431      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.260      9.150     -7039.     -4.000    
                     -0.4046    -0.7856      9.409      8.558     -4904.    

                      -4.000     0.1364    -0.5378      8.795      9.057    
                      -6912.     -4.000    -0.5153    -0.2513      10.08    
                       8.478     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.64
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       65
neval is:      420
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       66
neval is:      420


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      420     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.474155     -0.746220     -0.100792      0.100792       48.1335       48.2343    
   2  0.162949E-01  -4.11691     -0.556070      0.556070       48.7886       49.3446    
   3  0.560104     -0.579632     -0.782909E-01  0.782909E-01   48.8065       48.8848    
   4  0.583629     -0.538490     -0.727337E-01  0.727337E-01   48.8935       48.9662    
   5  0.794243     -0.230366     -0.311155E-01  0.311155E-01   48.8361       48.8673    
   6  0.183626E-01  -3.99744     -0.539933      0.539933       48.9203       49.4603    
   7  0.642495     -0.442397     -0.597545E-01  0.597545E-01   49.0560       49.1158    
   8  0.611061E-02  -5.09773     -0.688550      0.688550       49.1304       49.8190    
   9  0.974115E-01  -2.32881     -0.314552      0.314552       49.1295       49.4440    
  10  0.817249E-01  -2.50440     -0.338269      0.338269       49.1329       49.4711    
  11  0.644422     -0.439401     -0.593498E-01  0.593498E-01   49.2337       49.2931    
  12  0.378181     -0.972383     -0.131340      0.131340       49.2532       49.3845    
  13  0.105422      -2.24978     -0.303878      0.303878       49.1952       49.4991    
  14  0.713647     -0.337367     -0.455681E-01  0.455681E-01   49.2843       49.3298    
  15  0.602100     -0.507333     -0.685254E-01  0.685254E-01   49.2925       49.3610    
  16  0.746624     -0.292194     -0.394666E-01  0.394666E-01   49.1145       49.1540    
  17  0.687673     -0.374442     -0.505759E-01  0.505759E-01   49.3057       49.3563    
  18  0.356323      -1.03192     -0.139381      0.139381       49.2443       49.3837    
  19  0.631203     -0.460128     -0.621495E-01  0.621495E-01   49.2768       49.3390    
  20  0.348432      -1.05431     -0.142406      0.142406       49.1506       49.2930    
  21  0.200848      -1.60521     -0.216815      0.216815       49.1315       49.3484    
  22  0.863860     -0.146345     -0.197668E-01  0.197668E-01   49.2823       49.3020    
  23  0.278415      -1.27864     -0.172706      0.172706       49.3015       49.4742    
  24  0.871038     -0.138069     -0.186490E-01  0.186490E-01   49.4664       49.4851    
  25  0.581010     -0.542987     -0.733412E-01  0.733412E-01   49.5031       49.5764    
  26  0.960519     -0.402815E-01 -0.544082E-02  0.544082E-02   49.6268       49.6322    
  27  0.104828      -2.25543     -0.304641      0.304641       49.5256       49.8302    
  28  0.907238     -0.973501E-01 -0.131491E-01  0.131491E-01   49.6103       49.6235    
  29  0.685005     -0.378330     -0.511009E-01  0.511009E-01   49.6610       49.7121    
  30  0.239566E-01  -3.73151     -0.504015      0.504015       49.4030       49.9071    
  31  0.643900     -0.440211     -0.594593E-01  0.594593E-01   49.4594       49.5188    
  32  0.526819     -0.640898     -0.865661E-01  0.865661E-01   49.7586       49.8452    
  33  0.463387     -0.769192     -0.103895      0.103895       49.4233       49.5272    
  34  0.847158E-01  -2.46845     -0.333414      0.333414       49.8342       50.1677    
  35  0.134368E-01  -4.30976     -0.582119      0.582119       49.7751       50.3572    
  36  0.141068      -1.95851     -0.264536      0.264536       49.7958       50.0603    
  37  0.239867      -1.42767     -0.192835      0.192835       49.9083       50.1011    
  38  0.317049      -1.14870     -0.155155      0.155155       49.8635       50.0187    
  39  0.925847     -0.770459E-01 -0.104066E-01  0.104066E-01   49.7372       49.7476    
  40  0.939258     -0.626649E-01 -0.846414E-02  0.846414E-02   49.9972       50.0056    
  41  0.111598      -2.19286     -0.296189      0.296189       50.0102       50.3064    
  42  0.357545      -1.02849     -0.138918      0.138918       50.0790       50.2180    
  43  0.902640     -0.102432     -0.138355E-01  0.138355E-01   50.0607       50.0745    
  44  0.914421     -0.894640E-01 -0.120839E-01  0.120839E-01   50.0619       50.0740    
  45  0.320420      -1.13812     -0.153726      0.153726       49.9917       50.1455    
  46  0.341333      -1.07490     -0.145186      0.145186       50.1253       50.2705    
  47  0.509727     -0.673879     -0.910208E-01  0.910208E-01   50.1610       50.2520    
  48  0.130581E-02  -6.64093     -0.896989      0.896989       50.2628       51.1598    
  49  0.105413      -2.24987     -0.303889      0.303889       49.8472       50.1510    
  50  0.743306     -0.296647     -0.400681E-01  0.400681E-01   50.3183       50.3584    
  51  0.114013      -2.17144     -0.293297      0.293297       49.9050       50.1983    
  52  0.225326      -1.49021     -0.201282      0.201282       49.6417       49.8429    
loop,thermsimp(1:2)       66  0.100792      0.556070    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    422         48.96          1.23          1.02         24.09          0.06          0.06         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       66
neval is:      421
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       67
neval is:      421


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      421     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.711215     -0.340780     -0.460291E-01  0.460291E-01   48.1335       48.1796    
   2  0.492413     -0.708438     -0.956886E-01  0.956886E-01   48.8361       48.9318    
   3  0.156563      -1.85430     -0.250460      0.250460       48.8065       49.0570    
   4  0.185270      -1.68594     -0.227720      0.227720       48.8935       49.1212    
   5  0.685983     -0.376903     -0.509082E-01  0.509082E-01   49.0560       49.1069    
   6  0.518581     -0.656659     -0.886949E-01  0.886949E-01   49.1145       49.2032    
   7  0.430667     -0.842421     -0.113786      0.113786       49.1506       49.2644    
   8  0.748228     -0.290047     -0.391767E-01  0.391767E-01   49.2337       49.2729    
   9  0.348167      -1.05507     -0.142509      0.142509       49.2823       49.4248    
  10  0.281980E-01  -3.56850     -0.481998      0.481998       49.2843       49.7663    
  11  0.670749     -0.399360     -0.539415E-01  0.539415E-01   49.2768       49.3308    
  12  0.225031      -1.49152     -0.201459      0.201459       48.7886       48.9900    
  13  0.258016      -1.35474     -0.182984      0.182984       49.1315       49.3145    
  14  0.122388      -2.10056     -0.283722      0.283722       49.3057       49.5894    
  15  0.556210     -0.586609     -0.792332E-01  0.792332E-01   49.2925       49.3717    
  16  0.938933     -0.630108E-01 -0.851087E-02  0.851087E-02   49.2443       49.2528    
  17  0.440352     -0.820180     -0.110782      0.110782       49.2532       49.3640    
  18  0.779048     -0.249683     -0.337247E-01  0.337247E-01   49.1295       49.1632    
  19  0.929725     -0.728667E-01 -0.984209E-02  0.984209E-02   48.9203       48.9302    
  20  0.330740      -1.10642     -0.149445      0.149445       49.1329       49.2823    
  21  0.214890      -1.53763     -0.207687      0.207687       49.3015       49.5091    
  22  0.363221      -1.01274     -0.136791      0.136791       49.4664       49.6032    
  23  0.681309     -0.383740     -0.518317E-01  0.518317E-01   49.1952       49.2471    
  24  0.107313      -2.23200     -0.301477      0.301477       49.4594       49.7608    
  25  0.622524     -0.473973     -0.640195E-01  0.640195E-01   49.4233       49.4874    
  26  0.532378     -0.630402     -0.851483E-01  0.851483E-01   49.5031       49.5882    
  27  0.298562      -1.20878     -0.163270      0.163270       49.6103       49.7736    
  28  0.432099     -0.839100     -0.113337      0.113337       49.6268       49.7401    
  29  0.243978      -1.41068     -0.190540      0.190540       49.6610       49.8515    
  30  0.581243     -0.542587     -0.732871E-01  0.732871E-01   49.7372       49.8105    
  31  0.897127E-01  -2.41114     -0.325673      0.325673       49.1304       49.4561    
  32  0.738124     -0.303644     -0.410131E-01  0.410131E-01   49.5256       49.5666    
  33  0.462727     -0.770619     -0.104087      0.104087       49.6417       49.7457    
  34  0.984641E-01  -2.31806     -0.313101      0.313101       49.7586       50.0717    
  35  0.641923     -0.443287     -0.598748E-01  0.598748E-01   49.4030       49.4629    
  36  0.334628      -1.09474     -0.147866      0.147866       49.9972       50.1450    
  37  0.482851     -0.728048     -0.983374E-01  0.983374E-01   49.8635       49.9619    
  38  0.826279     -0.190822     -0.257744E-01  0.257744E-01   49.7958       49.8215    
  39  0.966417     -0.341596E-01 -0.461394E-02  0.461394E-02   50.0619       50.0665    
  40  0.236833      -1.44040     -0.194555      0.194555       50.0607       50.2552    
  41  0.274744      -1.29192     -0.174499      0.174499       49.9083       50.0828    
  42  0.310307      -1.17019     -0.158058      0.158058       49.9917       50.1498    
  43  0.697298     -0.360543     -0.486985E-01  0.486985E-01   49.8472       49.8959    
  44  0.239072      -1.43099     -0.193284      0.193284       49.8342       50.0275    
  45  0.809729     -0.211055     -0.285072E-01  0.285072E-01   49.9050       49.9335    
  46  0.651880     -0.427895     -0.577957E-01  0.577957E-01   50.0790       50.1368    
  47  0.515020     -0.663550     -0.896256E-01  0.896256E-01   50.1610       50.2506    
  48  0.359059      -1.02427     -0.138348      0.138348       50.1253       50.2637    
  49  0.516010E-02  -5.26680     -0.711386      0.711386       50.0102       50.7216    
  50  0.321807      -1.13380     -0.153143      0.153143       49.7751       49.9282    
  51  0.787972     -0.238293     -0.321863E-01  0.321863E-01   50.3183       50.3505    
  52  0.842264     -0.171662     -0.231864E-01  0.231864E-01   48.9557       48.9789    
loop,thermsimp(1:2)       67  0.460291E-01  0.956886E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    423         48.78          1.20          1.02         24.12          0.12          0.06         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.78
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       67
neval is:      422
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       68
neval is:      422


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      422     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.595062     -0.519089     -0.701133E-01  0.701133E-01   48.1335       48.2036    
   2  0.204294      -1.58819     -0.214517      0.214517       48.9203       49.1349    
   3  0.902141     -0.102985     -0.139101E-01  0.139101E-01   48.8361       48.8501    
   4  0.317306      -1.14789     -0.155045      0.155045       48.9557       49.1107    
   5  0.914914E-01  -2.39151     -0.323021      0.323021       48.7886       49.1116    
   6  0.362439      -1.01490     -0.137082      0.137082       48.8065       48.9436    
   7  0.284546      -1.25686     -0.169764      0.169764       49.0560       49.2258    
   8  0.752727     -0.284053     -0.383670E-01  0.383670E-01   48.8935       48.9318    
   9  0.972148     -0.282475E-01 -0.381538E-02  0.381538E-02   49.1295       49.1333    
  10  0.312417      -1.16342     -0.157142      0.157142       49.1145       49.2717    
  11  0.772549E-01  -2.56064     -0.345866      0.345866       49.1952       49.5411    
  12  0.190763      -1.65672     -0.223774      0.223774       49.2443       49.4681    
  13  0.829036     -0.187492     -0.253245E-01  0.253245E-01   49.1506       49.1760    
  14  0.309766      -1.17194     -0.158294      0.158294       49.2337       49.3920    
  15  0.691616     -0.368724     -0.498036E-01  0.498036E-01   49.1329       49.1827    
  16  0.177510      -1.72873     -0.233499      0.233499       49.1315       49.3650    
  17  0.848561     -0.164214     -0.221803E-01  0.221803E-01   49.2768       49.2990    
  18  0.464945     -0.765836     -0.103441      0.103441       49.2532       49.3566    
  19  0.626682     -0.467316     -0.631203E-01  0.631203E-01   49.2925       49.3556    
  20  0.451266     -0.795699     -0.107475      0.107475       49.2823       49.3898    
  21  0.161179E-01  -4.12783     -0.557545      0.557545       49.1304       49.6880    
  22  0.848853     -0.163869     -0.221338E-01  0.221338E-01   49.4030       49.4252    
  23  0.565946     -0.569256     -0.768894E-01  0.768894E-01   49.4233       49.5002    
  24  0.798567     -0.224937     -0.303822E-01  0.303822E-01   49.3015       49.3318    
  25  0.282371      -1.26453     -0.170800      0.170800       49.5256       49.6964    
  26  0.887219     -0.119663     -0.161629E-01  0.161629E-01   49.5031       49.5192    
  27  0.311981      -1.16481     -0.157331      0.157331       49.3057       49.4631    
  28  0.454937     -0.787596     -0.106380      0.106380       49.4664       49.5728    
  29  0.200774E-01  -3.90816     -0.527875      0.527875       49.6268       50.1546    
  30  0.549692     -0.598397     -0.808254E-01  0.808254E-01   49.6417       49.7225    
  31  0.928164     -0.745470E-01 -0.100691E-01  0.100691E-01   49.4594       49.4694    
  32  0.876026     -0.132360     -0.178778E-01  0.178778E-01   49.2843       49.3021    
  33  0.360538      -1.02016     -0.137793      0.137793       49.6103       49.7481    
  34  0.810484     -0.210124     -0.283814E-01  0.283814E-01   49.7372       49.7656    
  35  0.350387      -1.04872     -0.141650      0.141650       49.7958       49.9374    
  36  0.609257     -0.495514     -0.669291E-01  0.669291E-01   49.6610       49.7279    
  37  0.847473     -0.165497     -0.223536E-01  0.223536E-01   49.8472       49.8695    
  38  0.459433     -0.777763     -0.105052      0.105052       49.7751       49.8801    
  39  0.213778      -1.54282     -0.208388      0.208388       49.9050       50.1134    
  40  0.983077     -0.170677E-01 -0.230533E-02  0.230533E-02   49.8635       49.8658    
  41  0.719533     -0.329153     -0.444586E-01  0.444586E-01   49.8342       49.8787    
  42  0.317292      -1.14793     -0.155051      0.155051       50.0619       50.2169    
  43  0.300670      -1.20174     -0.162319      0.162319       49.7586       49.9210    
  44  0.486388     -0.720748     -0.973514E-01  0.973514E-01   49.9083       50.0056    
  45  0.309580      -1.17254     -0.158374      0.158374       50.0790       50.2374    
  46  0.111802      -2.19103     -0.295942      0.295942       49.9972       50.2931    
  47  0.913484     -0.904897E-01 -0.122224E-01  0.122224E-01   49.9917       50.0040    
  48  0.438377     -0.824676     -0.111389      0.111389       50.1610       50.2724    
  49  0.773114     -0.257329     -0.347575E-01  0.347575E-01   50.0607       50.0954    
  50  0.248259      -1.39328     -0.188191      0.188191       50.1253       50.3135    
  51  0.502855     -0.687454     -0.928544E-01  0.928544E-01   50.3183       50.4112    
  52  0.827610E-01  -2.49180     -0.336567      0.336567       48.7819       49.1184    
loop,thermsimp(1:2)       68  0.701133E-01  0.214517    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    424         49.48          1.24          1.04         24.10          0.09          0.06         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.48
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       68
neval is:      423
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       69
neval is:      423


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      423     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440626     -0.819560     -0.110698      0.110698       48.1335       48.2442    
   2  0.752309     -0.284608     -0.384419E-01  0.384419E-01   48.8361       48.8746    
   3  0.209108      -1.56490     -0.211371      0.211371       48.8935       49.1048    
   4  0.842922     -0.170881     -0.230809E-01  0.230809E-01   48.8065       48.8296    
   5  0.161148      -1.82543     -0.246561      0.246561       48.9557       49.2023    
   6  0.601748     -0.507917     -0.686043E-01  0.686043E-01   48.7886       48.8572    
   7  0.890912     -0.115510     -0.156019E-01  0.156019E-01   48.7819       48.7975    
   8  0.631939     -0.458963     -0.619921E-01  0.619921E-01   49.1295       49.1915    
   9  0.144759E-01  -4.23527     -0.572057      0.572057       48.9203       49.4924    
  10  0.653698     -0.425110     -0.574196E-01  0.574196E-01   49.1506       49.2081    
  11  0.401463     -0.912639     -0.123270      0.123270       49.1329       49.2561    
  12  0.906126     -0.985765E-01 -0.133147E-01  0.133147E-01   49.0560       49.0693    
  13  0.480601E-01  -3.03530     -0.409978      0.409978       49.1145       49.5245    
  14  0.264260      -1.33082     -0.179754      0.179754       49.2768       49.4566    
  15  0.586033     -0.534379     -0.721785E-01  0.721785E-01   49.2843       49.3564    
  16  0.323072      -1.12988     -0.152613      0.152613       49.3015       49.4541    
  17  0.785147     -0.241884     -0.326712E-01  0.326712E-01   49.2925       49.3252    
  18  0.139165      -1.97210     -0.266371      0.266371       49.2532       49.5195    
  19  0.105818E-01  -4.54862     -0.614381      0.614381       49.1315       49.7459    
  20  0.896943     -0.108763     -0.146907E-01  0.146907E-01   49.2823       49.2970    
  21  0.854239     -0.157544     -0.212794E-01  0.212794E-01   49.2337       49.2550    
  22  0.566003     -0.569157     -0.768759E-01  0.768759E-01   49.4030       49.4799    
  23  0.566387     -0.568477     -0.767841E-01  0.767841E-01   49.3057       49.3825    
  24  0.414905     -0.879707     -0.118822      0.118822       49.2443       49.3631    
  25  0.173772      -1.75001     -0.236374      0.236374       49.4594       49.6957    
  26  0.884308E-01  -2.42554     -0.327617      0.327617       49.4233       49.7510    
  27  0.417457     -0.873573     -0.117993      0.117993       49.5031       49.6211    
  28  0.334615      -1.09477     -0.147871      0.147871       49.1952       49.3431    
  29  0.706024E-01  -2.65069     -0.358029      0.358029       49.4664       49.8245    
  30  0.996422     -0.358418E-02 -0.484114E-03  0.484114E-03   49.1304       49.1309    
  31  0.894500     -0.111491     -0.150590E-01  0.150590E-01   49.5256       49.5406    
  32  0.827855     -0.188917     -0.255170E-01  0.255170E-01   49.6417       49.6672    
  33  0.434964     -0.832492     -0.112445      0.112445       49.6610       49.7734    
  34  0.121450      -2.10825     -0.284761      0.284761       49.6103       49.8951    
  35  0.498977     -0.695195     -0.938999E-01  0.938999E-01   49.7372       49.8311    
  36  0.117961      -2.13740     -0.288699      0.288699       49.8635       50.1522    
  37  0.309211      -1.17373     -0.158536      0.158536       49.8472       50.0057    
  38  0.786265     -0.240461     -0.324791E-01  0.324791E-01   49.8342       49.8667    
  39  0.614330     -0.487222     -0.658091E-01  0.658091E-01   49.7751       49.8409    
  40  0.820857     -0.197407     -0.266637E-01  0.266637E-01   49.7586       49.7853    
  41  0.670448     -0.399809     -0.540021E-01  0.540021E-01   49.7958       49.8498    
  42  0.742403     -0.297863     -0.402323E-01  0.402323E-01   49.9917       50.0320    
  43  0.760912E-01  -2.57582     -0.347916      0.347916       49.9083       50.2562    
  44  0.709677     -0.342945     -0.463215E-01  0.463215E-01   50.0607       50.1070    
  45  0.943449     -0.582133E-01 -0.786287E-02  0.786287E-02   49.9050       49.9128    
  46  0.176370      -1.73517     -0.234370      0.234370       49.6268       49.8611    
  47  0.866890     -0.142843     -0.192938E-01  0.192938E-01   50.0619       50.0812    
  48  0.711056     -0.341004     -0.460594E-01  0.460594E-01   50.0790       50.1251    
  49  0.929667E-01  -2.37551     -0.320860      0.320860       50.1610       50.4819    
  50  0.960091     -0.407270E-01 -0.550099E-02  0.550099E-02   49.9972       50.0027    
  51  0.948380     -0.530000E-01 -0.715870E-02  0.715870E-02   50.1253       50.1325    
  52  0.257449      -1.35693     -0.183281      0.183281       49.4762       49.6595    
loop,thermsimp(1:2)       69  0.110698      0.384419E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    425         48.96          1.24          1.04         24.10          0.19          0.06         26.63
Just calling func    0   0         26.63


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.96
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       69
neval is:      424
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       70
neval is:      424


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      424     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.988390     -0.116781E-01 -0.157736E-02  0.157736E-02   48.1335       48.1351    
   2  0.482301     -0.729186     -0.984911E-01  0.984911E-01   48.7819       48.8804    
   3  0.546964     -0.603372     -0.814974E-01  0.814974E-01   48.8065       48.8880    
   4  0.543918     -0.608957     -0.822518E-01  0.822518E-01   48.7886       48.8708    
   5  0.427641     -0.849472     -0.114738      0.114738       48.8361       48.9509    
   6  0.498345     -0.696462     -0.940710E-01  0.940710E-01   49.0560       49.1501    
   7  0.989308     -0.107494E-01 -0.145192E-02  0.145192E-02   48.8935       48.8949    
   8  0.658822     -0.417302     -0.563649E-01  0.563649E-01   49.1304       49.1868    
   9  0.917808     -0.857673E-01 -0.115846E-01  0.115846E-01   49.1295       49.1411    
  10  0.914490E-04  -9.29973      -1.25611       1.25611       48.9557       50.2118    
  11  0.989901     -0.101499E-01 -0.137095E-02  0.137095E-02   49.1506       49.1520    
  12  0.558183     -0.583069     -0.787551E-01  0.787551E-01   49.2337       49.3125    
  13  0.706994     -0.346733     -0.468332E-01  0.468332E-01   49.1329       49.1797    
  14  0.599152     -0.512240     -0.691882E-01  0.691882E-01   49.2823       49.3515    
  15  0.845909     -0.167343     -0.226030E-01  0.226030E-01   49.2925       49.3151    
  16  0.655384     -0.422534     -0.570716E-01  0.570716E-01   49.1952       49.2523    
  17  0.412232E-01  -3.18875     -0.430705      0.430705       49.2843       49.7150    
  18  0.495401     -0.702387     -0.948713E-01  0.948713E-01   49.2443       49.3392    
  19  0.378829     -0.970671     -0.131108      0.131108       49.3057       49.4368    
  20  0.653665E-02  -5.03033     -0.679446      0.679446       49.3015       49.9809    
  21  0.782670     -0.245045     -0.330982E-01  0.330982E-01   49.2768       49.3099    
  22  0.945547     -0.559921E-01 -0.756285E-02  0.756285E-02   49.4030       49.4106    
  23  0.969857     -0.306063E-01 -0.413400E-02  0.413400E-02   48.9203       48.9245    
  24  0.822249     -0.195712     -0.264348E-01  0.264348E-01   49.2532       49.2796    
  25  0.265012E-01  -3.63056     -0.490380      0.490380       49.1145       49.6049    
  26  0.360432E-01  -3.32304     -0.448842      0.448842       49.5256       49.9744    
  27  0.796418     -0.227631     -0.307460E-01  0.307460E-01   49.5031       49.5338    
  28  0.292313E-01  -3.53252     -0.477136      0.477136       49.4762       49.9533    
  29  0.227321      -1.48139     -0.200092      0.200092       49.6417       49.8417    
  30  0.812637     -0.207471     -0.280230E-01  0.280230E-01   49.4594       49.4874    
  31  0.930544     -0.719857E-01 -0.972311E-02  0.972311E-02   49.1315       49.1413    
  32  0.674873     -0.393231     -0.531137E-01  0.531137E-01   49.4233       49.4764    
  33  0.264030      -1.33169     -0.179871      0.179871       49.6610       49.8408    
  34  0.807464     -0.213856     -0.288856E-01  0.288856E-01   49.7586       49.7875    
  35  0.653731     -0.425060     -0.574128E-01  0.574128E-01   49.4664       49.5238    
  36  0.858536     -0.152527     -0.206018E-01  0.206018E-01   49.7372       49.7578    
  37  0.538887     -0.618250     -0.835070E-01  0.835070E-01   49.7751       49.8586    
  38  0.468049     -0.759182     -0.102543      0.102543       49.7958       49.8983    
  39  0.401324     -0.912987     -0.123317      0.123317       49.6268       49.7501    
  40  0.363356      -1.01237     -0.136741      0.136741       49.8342       49.9710    
  41  0.924933     -0.780342E-01 -0.105401E-01  0.105401E-01   49.6103       49.6209    
  42  0.797289     -0.226538     -0.305985E-01  0.305985E-01   49.9050       49.9356    
  43  0.200097      -1.60895     -0.217321      0.217321       49.9972       50.2145    
  44  0.686219     -0.376559     -0.508617E-01  0.508617E-01   49.8472       49.8980    
  45  0.895629     -0.110230     -0.148887E-01  0.148887E-01   49.9917       50.0066    
  46  0.331830      -1.10313     -0.149000      0.149000       50.0619       50.2109    
  47  0.967018     -0.335379E-01 -0.452995E-02  0.452995E-02   50.0607       50.0652    
  48  0.268282      -1.31572     -0.177714      0.177714       50.0790       50.2568    
  49  0.472399     -0.749931     -0.101293      0.101293       50.1253       50.2266    
  50  0.399276E-01  -3.22069     -0.435018      0.435018       49.8635       50.2985    
  51  0.956493     -0.444820E-01 -0.600819E-02  0.600819E-02   49.9083       49.9143    
  52  0.444161     -0.811569     -0.109619      0.109619       48.9551       49.0647    
loop,thermsimp(1:2)       70  0.157736E-02  0.984911E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    426         49.27          1.22          1.04         23.94          0.19          0.06         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.27
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       70
neval is:      425
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       71
neval is:      425


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      425     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.860213     -0.150575     -0.203382E-01  0.203382E-01   48.1335       48.1539    
   2  0.573661     -0.555717     -0.750606E-01  0.750606E-01   48.7886       48.8636    
   3  0.499290     -0.694569     -0.938153E-01  0.938153E-01   48.7819       48.8757    
   4  0.677563     -0.389253     -0.525764E-01  0.525764E-01   48.8065       48.8591    
   5  0.476566     -0.741149     -0.100107      0.100107       48.8935       48.9936    
   6  0.153036      -1.87708     -0.253537      0.253537       48.9203       49.1739    
   7  0.626270     -0.467973     -0.632091E-01  0.632091E-01   48.8361       48.8994    
   8  0.794744     -0.229735     -0.310303E-01  0.310303E-01   48.9551       48.9861    
   9  0.111868E-01  -4.49302     -0.606872      0.606872       49.1295       49.7364    
  10  0.643880     -0.440243     -0.594636E-01  0.594636E-01   49.1315       49.1910    
  11  0.634705     -0.454595     -0.614021E-01  0.614021E-01   49.0560       49.1174    
  12  0.653568     -0.425308     -0.574464E-01  0.574464E-01   49.1506       49.2081    
  13  0.888231     -0.118524     -0.160090E-01  0.160090E-01   49.1329       49.1489    
  14  0.681775E-01  -2.68564     -0.362749      0.362749       49.1304       49.4932    
  15  0.241248      -1.42193     -0.192060      0.192060       49.1952       49.3873    
  16  0.208857      -1.56610     -0.211534      0.211534       49.2532       49.4647    
  17  0.652439     -0.427038     -0.576799E-01  0.576799E-01   49.2768       49.3345    
  18  0.489833     -0.713691     -0.963981E-01  0.963981E-01   49.2337       49.3301    
  19  0.719225     -0.329581     -0.445164E-01  0.445164E-01   49.2925       49.3370    
  20  0.924762     -0.782189E-01 -0.105650E-01  0.105650E-01   49.2443       49.2549    
  21  0.845502     -0.167825     -0.226681E-01  0.226681E-01   49.2823       49.3049    
  22  0.665989     -0.406482     -0.549035E-01  0.549035E-01   49.4030       49.4579    
  23  0.378562     -0.971376     -0.131204      0.131204       49.3057       49.4369    
  24  0.396889     -0.924098     -0.124818      0.124818       49.4233       49.5482    
  25  0.158089      -1.84460     -0.249150      0.249150       49.4594       49.7085    
  26  0.590577     -0.526655     -0.711353E-01  0.711353E-01   49.4664       49.5376    
  27  0.949513     -0.518061E-01 -0.699744E-02  0.699744E-02   49.5031       49.5101    
  28  0.518198     -0.657398     -0.887946E-01  0.887946E-01   49.1145       49.2033    
  29  0.551080     -0.595875     -0.804847E-01  0.804847E-01   49.6103       49.6908    
  30  0.986285     -0.138097E-01 -0.186528E-02  0.186528E-02   49.2843       49.2861    
  31  0.920142     -0.832276E-01 -0.112415E-01  0.112415E-01   49.6268       49.6380    
  32  0.133201      -2.01590     -0.272287      0.272287       49.7372       50.0095    
  33  0.584507     -0.536987     -0.725307E-01  0.725307E-01   49.7586       49.8312    
  34  0.790583     -0.234984     -0.317393E-01  0.317393E-01   49.6610       49.6927    
  35  0.702664     -0.352876     -0.476629E-01  0.476629E-01   49.6417       49.6893    
  36  0.148885      -1.90458     -0.257251      0.257251       49.7751       50.0323    
  37  0.290436      -1.23637     -0.166997      0.166997       49.8472       50.0142    
  38  0.638249     -0.449027     -0.606501E-01  0.606501E-01   49.7958       49.8564    
  39  0.381605     -0.963369     -0.130122      0.130122       49.9083       50.0384    
  40  0.823069     -0.194716     -0.263002E-01  0.263002E-01   49.9050       49.9313    
  41  0.492318     -0.708630     -0.957145E-01  0.957145E-01   49.4762       49.5719    
  42  0.773199     -0.257218     -0.347425E-01  0.347425E-01   49.8342       49.8690    
  43  0.289475E-01  -3.54227     -0.478454      0.478454       49.5256       50.0040    
  44  0.355683      -1.03371     -0.139624      0.139624       49.3015       49.4411    
  45  0.160396      -1.83011     -0.247193      0.247193       49.9917       50.2389    
  46  0.972861     -0.275140E-01 -0.371632E-02  0.371632E-02   50.0607       50.0644    
  47  0.781938E-02  -4.85115     -0.655244      0.655244       50.0619       50.7171    
  48  0.225299      -1.49033     -0.201299      0.201299       48.9557       49.1570    
  49  0.631686     -0.459363     -0.620461E-01  0.620461E-01   49.9972       50.0592    
  50  0.212316      -1.54968     -0.209315      0.209315       50.1253       50.3346    
  51  0.673664     -0.395024     -0.533559E-01  0.533559E-01   50.0790       50.1324    
  52  0.728322     -0.317012     -0.428188E-01  0.428188E-01   49.2694       49.3122    
loop,thermsimp(1:2)       71  0.203382E-01  0.750606E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    427         48.86          1.25          1.04         23.99          0.18          0.06         26.52
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       71
neval is:      426
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       72
neval is:      426


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      426     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.440770     -0.819232     -0.110654      0.110654       48.1335       48.2442    
   2  0.202294      -1.59803     -0.215846      0.215846       48.8065       49.0224    
   3  0.873786     -0.134920     -0.182237E-01  0.182237E-01   48.7886       48.8068    
   4  0.262141      -1.33887     -0.180842      0.180842       48.7819       48.9627    
   5  0.342005      -1.07293     -0.144920      0.144920       48.8361       48.9811    
   6  0.421217     -0.864607     -0.116782      0.116782       48.9551       49.0719    
   7  0.618489     -0.480477     -0.648979E-01  0.648979E-01   48.8935       48.9584    
   8  0.412552     -0.885393     -0.119590      0.119590       49.0560       49.1756    
   9  0.951192     -0.500396E-01 -0.675884E-02  0.675884E-02   49.1329       49.1396    
  10  0.298546      -1.20883     -0.163277      0.163277       48.9557       49.1190    
  11  0.805120     -0.216763     -0.292782E-01  0.292782E-01   48.9203       48.9496    
  12  0.208146      -1.56951     -0.211994      0.211994       49.1315       49.3435    
  13  0.924021     -0.790209E-01 -0.106734E-01  0.106734E-01   49.1145       49.1252    
  14  0.447624     -0.803802     -0.108569      0.108569       49.1506       49.2592    
  15  0.667709     -0.403903     -0.545552E-01  0.545552E-01   49.2443       49.2989    
  16  0.767295E-01  -2.56747     -0.346788      0.346788       49.2843       49.6311    
  17  0.301582      -1.19871     -0.161910      0.161910       49.2823       49.4442    
  18  0.788580     -0.237522     -0.320820E-01  0.320820E-01   49.2694       49.3015    
  19  0.887020     -0.119888     -0.161932E-01  0.161932E-01   49.2337       49.2499    
  20  0.233035E-01  -3.75915     -0.507748      0.507748       49.2768       49.7846    
  21  0.899320     -0.106116     -0.143331E-01  0.143331E-01   49.2925       49.3068    
  22  0.144480      -1.93461     -0.261308      0.261308       49.1952       49.4565    
  23  0.274629      -1.29233     -0.174555      0.174555       49.3057       49.4803    
  24  0.831597     -0.184407     -0.249078E-01  0.249078E-01   49.3015       49.3264    
  25  0.388827     -0.944620     -0.127590      0.127590       49.4030       49.5306    
  26  0.257578      -1.35643     -0.183213      0.183213       49.2532       49.4364    
  27  0.427791     -0.849120     -0.114691      0.114691       49.1304       49.2451    
  28  0.837664E-01  -2.47972     -0.334936      0.334936       49.5031       49.8380    
  29  0.782727     -0.244972     -0.330883E-01  0.330883E-01   49.4664       49.4995    
  30  0.259676E-01  -3.65091     -0.493128      0.493128       49.4233       49.9165    
  31  0.166181      -1.79468     -0.242407      0.242407       49.4762       49.7186    
  32  0.360749      -1.01957     -0.137714      0.137714       49.6268       49.7645    
  33  0.369697     -0.995071     -0.134404      0.134404       49.6417       49.7761    
  34  0.959392     -0.414553E-01 -0.559936E-02  0.559936E-02   49.6103       49.6159    
  35  0.449170     -0.800353     -0.108104      0.108104       49.6610       49.7691    
  36  0.655790E-02  -5.02708     -0.679008      0.679008       49.4594       50.1384    
  37  0.133569      -2.01313     -0.271914      0.271914       49.1295       49.4014    
  38  0.282061      -1.26563     -0.170949      0.170949       49.7586       49.9296    
  39  0.431813     -0.839762     -0.113427      0.113427       49.7958       49.9092    
  40  0.713174     -0.338031     -0.456577E-01  0.456577E-01   49.8342       49.8799    
  41  0.511305     -0.670790     -0.906035E-01  0.906035E-01   49.9050       49.9956    
  42  0.264485      -1.32997     -0.179639      0.179639       49.5256       49.7052    
  43  0.779298     -0.249362     -0.336813E-01  0.336813E-01   49.7372       49.7709    
  44  0.709352E-02  -4.94857     -0.668403      0.668403       49.8472       50.5156    
  45  0.770402     -0.260843     -0.352320E-01  0.352320E-01   49.7751       49.8103    
  46  0.694393     -0.364718     -0.492624E-01  0.492624E-01   49.9083       49.9575    
  47  0.589268E-01  -2.83146     -0.382445      0.382445       49.9972       50.3796    
  48  0.817644     -0.201328     -0.271933E-01  0.271933E-01   50.0607       50.0878    
  49  0.990168     -0.988073E-02 -0.133459E-02  0.133459E-02   50.0790       50.0804    
  50  0.733536E-01  -2.61246     -0.352865      0.352865       49.9917       50.3446    
  51  0.781472     -0.246575     -0.333049E-01  0.333049E-01   50.1253       50.1586    
  52  0.582548     -0.540344     -0.729843E-01  0.729843E-01   48.8592       48.9322    
loop,thermsimp(1:2)       72  0.110654      0.215846    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    428         48.81          1.23          1.04         24.07          0.14          0.06         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.81
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       72
neval is:      427
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       73
neval is:      427


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      427     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.807892     -0.213326     -0.288140E-01  0.288140E-01   48.1335       48.1623    
   2  0.554495     -0.589697     -0.796503E-01  0.796503E-01   48.7886       48.8682    
   3  0.997056     -0.294851E-02 -0.398255E-03  0.398255E-03   48.8592       48.8596    
   4  0.901183E-01  -2.40663     -0.325064      0.325064       48.9203       49.2454    
   5  0.296736      -1.21491     -0.164098      0.164098       48.8935       49.0576    
   6  0.907820     -0.967094E-01 -0.130625E-01  0.130625E-01   48.7819       48.7949    
   7  0.325542      -1.12226     -0.151584      0.151584       48.8361       48.9877    
   8  0.947537     -0.538896E-01 -0.727887E-02  0.727887E-02   48.8065       48.8138    
   9  0.378276     -0.972130     -0.131306      0.131306       48.9551       49.0864    
  10  0.985613     -0.144920E-01 -0.195743E-02  0.195743E-02   48.9557       48.9577    
  11  0.167434      -1.78717     -0.241392      0.241392       49.1145       49.3559    
  12  0.693849E-01  -2.66809     -0.360378      0.360378       49.1329       49.4932    
  13  0.434983     -0.832447     -0.112439      0.112439       49.0560       49.1685    
  14  0.998656     -0.134491E-02 -0.181657E-03  0.181657E-03   49.1304       49.1306    
  15  0.650302     -0.430318     -0.581230E-01  0.581230E-01   49.2337       49.2919    
  16  0.152610      -1.87987     -0.253914      0.253914       49.1506       49.4046    
  17  0.273947      -1.29482     -0.174891      0.174891       49.2443       49.4192    
  18  0.990471     -0.957469E-02 -0.129325E-02  0.129325E-02   49.2694       49.2707    
  19  0.684493     -0.379077     -0.512019E-01  0.512019E-01   49.2925       49.3437    
  20  0.864467E-01  -2.44823     -0.330682      0.330682       49.3015       49.6321    
  21  0.546085     -0.604980     -0.817146E-01  0.817146E-01   49.1315       49.2133    
  22  0.246642      -1.39982     -0.189073      0.189073       49.1295       49.3186    
  23  0.484505     -0.724627     -0.978753E-01  0.978753E-01   49.2532       49.3510    
  24  0.567359     -0.566763     -0.765526E-01  0.765526E-01   49.2823       49.3588    
  25  0.564371     -0.572043     -0.772658E-01  0.772658E-01   49.1952       49.2725    
  26  0.825604     -0.191640     -0.258849E-01  0.258849E-01   49.3057       49.3316    
  27  0.302493      -1.19570     -0.161503      0.161503       49.4664       49.6279    
  28  0.630396     -0.461407     -0.623222E-01  0.623222E-01   49.4030       49.4654    
  29  0.886734     -0.120210     -0.162368E-01  0.162368E-01   49.6103       49.6266    
  30  0.389345     -0.943288     -0.127410      0.127410       49.2843       49.4117    
  31  0.181391      -1.70710     -0.230578      0.230578       49.5256       49.7561    
  32  0.933221     -0.691132E-01 -0.933511E-02  0.933511E-02   49.4762       49.4855    
  33  0.169237E-01  -4.07904     -0.550956      0.550956       49.6268       50.1777    
  34  0.757788     -0.277351     -0.374618E-01  0.374618E-01   49.6610       49.6984    
  35  0.300993E-01  -3.50325     -0.473184      0.473184       49.7372       50.2104    
  36  0.395621     -0.927300     -0.125250      0.125250       49.6417       49.7669    
  37  0.459505     -0.777605     -0.105031      0.105031       49.2768       49.3818    
  38  0.733176     -0.310370     -0.419216E-01  0.419216E-01   49.7751       49.8170    
  39  0.575459     -0.552587     -0.746379E-01  0.746379E-01   49.5031       49.5777    
  40  0.560889     -0.578233     -0.781018E-01  0.781018E-01   49.8342       49.9123    
  41  0.428351     -0.847812     -0.114514      0.114514       49.7958       49.9103    
  42  0.553832     -0.590895     -0.798121E-01  0.798121E-01   49.4233       49.5031    
  43  0.581118     -0.542801     -0.733161E-01  0.733161E-01   49.7586       49.8320    
  44  0.319195E-01  -3.44454     -0.465254      0.465254       49.9083       50.3735    
  45  0.224512E-01  -3.79641     -0.512781      0.512781       49.9050       50.4178    
  46  0.113637E-01  -4.47733     -0.604753      0.604753       50.0790       50.6838    
  47  0.889134     -0.117508     -0.158718E-01  0.158718E-01   50.0607       50.0765    
  48  0.422937     -0.860531     -0.116232      0.116232       49.4594       49.5756    
  49  0.479928     -0.734119     -0.991574E-01  0.991574E-01   50.1253       50.2245    
  50  0.813133     -0.206861     -0.279407E-01  0.279407E-01   49.9917       50.0197    
  51  0.544683     -0.607551     -0.820618E-01  0.820618E-01   49.9972       50.0792    
  52  0.694184E-01  -2.66760     -0.360313      0.360313       48.8115       49.1719    
loop,thermsimp(1:2)       73  0.288140E-01  0.796503E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    429         49.39          1.24          1.04         24.07          0.16          0.06         26.57
Just calling func    0   0         26.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.39
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       73
neval is:      428
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       74
neval is:      428


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      428     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.889684     -0.116889     -0.157882E-01  0.157882E-01   48.1335       48.1493    
   2  0.480213     -0.733525     -0.990772E-01  0.990772E-01   48.7819       48.8810    
   3  0.226156      -1.48653     -0.200786      0.200786       48.8065       49.0073    
   4  0.633402     -0.456651     -0.616797E-01  0.616797E-01   48.8592       48.9209    
   5  0.925311     -0.776258E-01 -0.104849E-01  0.104849E-01   48.7886       48.7991    
   6  0.498405     -0.696343     -0.940549E-01  0.940549E-01   48.9557       49.0498    
   7  0.133283      -2.01528     -0.272204      0.272204       48.8361       49.1083    
   8  0.657074E-01  -2.72254     -0.367734      0.367734       48.8935       49.2612    
   9  0.726758     -0.319162     -0.431092E-01  0.431092E-01   48.9551       48.9982    
  10  0.398365     -0.920388     -0.124317      0.124317       49.1304       49.2548    
  11  0.321047E-01  -3.43875     -0.464472      0.464472       49.0560       49.5205    
  12  0.276307      -1.28624     -0.173733      0.173733       48.8115       48.9853    
  13  0.483740     -0.726208     -0.980889E-01  0.980889E-01   49.1315       49.2296    
  14  0.224589      -1.49348     -0.201725      0.201725       48.9203       49.1221    
  15  0.832041     -0.183874     -0.248358E-01  0.248358E-01   49.2694       49.2942    
  16  0.939301     -0.626192E-01 -0.845797E-02  0.845797E-02   49.1952       49.2037    
  17  0.624052     -0.471522     -0.636884E-01  0.636884E-01   49.2337       49.2974    
  18  0.172753      -1.75589     -0.237169      0.237169       49.1295       49.3667    
  19  0.468323     -0.758597     -0.102464      0.102464       49.3057       49.4082    
  20  0.963461     -0.372229E-01 -0.502769E-02  0.502769E-02   49.2925       49.2975    
  21  0.812092     -0.208142     -0.281137E-01  0.281137E-01   49.2532       49.2813    
  22  0.376764     -0.976137     -0.131847      0.131847       49.1145       49.2464    
  23  0.791872E-01  -2.53594     -0.342529      0.342529       49.2823       49.6248    
  24  0.237003      -1.43968     -0.194458      0.194458       49.2768       49.4713    
  25  0.320094      -1.13914     -0.153864      0.153864       49.1506       49.3045    
  26  0.821410E-01  -2.49932     -0.337583      0.337583       49.2843       49.6218    
  27  0.789147     -0.236802     -0.319848E-01  0.319848E-01   49.2443       49.2763    
  28  0.734353E-01  -2.61135     -0.352715      0.352715       49.4030       49.7558    
  29  0.226401      -1.48545     -0.200639      0.200639       49.4762       49.6768    
  30  0.380831     -0.965399     -0.130396      0.130396       49.1329       49.2633    
  31  0.264857      -1.32857     -0.179449      0.179449       49.4233       49.6028    
  32  0.246167      -1.40174     -0.189333      0.189333       49.4594       49.6487    
  33  0.142133      -1.95099     -0.263521      0.263521       49.5031       49.7666    
  34  0.123438E-01  -4.39460     -0.593578      0.593578       49.6103       50.2039    
  35  0.853289     -0.158657     -0.214297E-01  0.214297E-01   49.4664       49.4879    
  36  0.418603     -0.870831     -0.117623      0.117623       49.3015       49.4191    
  37  0.235242      -1.44714     -0.195465      0.195465       49.6610       49.8564    
  38  0.841712     -0.172317     -0.232748E-01  0.232748E-01   49.5256       49.5488    
  39  0.113373      -2.17707     -0.294057      0.294057       49.6417       49.9357    
  40  0.617966     -0.481322     -0.650121E-01  0.650121E-01   49.7751       49.8401    
  41  0.149268      -1.90202     -0.256905      0.256905       49.7586       50.0155    
  42  0.811010     -0.209475     -0.282938E-01  0.282938E-01   49.7958       49.8241    
  43  0.571477     -0.559531     -0.755758E-01  0.755758E-01   49.8342       49.9098    
  44  0.105494      -2.24911     -0.303786      0.303786       49.9917       50.2955    
  45  0.709548     -0.343127     -0.463461E-01  0.463461E-01   50.0607       50.1070    
  46  0.535895     -0.623816     -0.842588E-01  0.842588E-01   49.9972       50.0814    
  47  0.137736      -1.98242     -0.267765      0.267765       49.6268       49.8945    
  48  0.666779     -0.405297     -0.547435E-01  0.547435E-01   49.7372       49.7920    
  49  0.326487      -1.11936     -0.151192      0.151192       50.1253       50.2765    
  50  0.461090     -0.774162     -0.104566      0.104566       49.9083       50.0128    
  51  0.246088      -1.40207     -0.189377      0.189377       49.9050       50.0944    
  52  0.308348      -1.17653     -0.158913      0.158913       49.3915       49.5505    
loop,thermsimp(1:2)       74  0.157882E-01  0.990772E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    430         49.49          1.25          1.05         24.17          0.14          0.06         26.67
Just calling func    0   0         26.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       74
neval is:      429
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       75
neval is:      429


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      429     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.645801     -0.437264     -0.590612E-01  0.590612E-01   48.1335       48.1926    
   2  0.108032      -2.22533     -0.300575      0.300575       48.7886       49.0891    
   3  0.908790     -0.956413E-01 -0.129183E-01  0.129183E-01   48.7819       48.7948    
   4  0.987883     -0.121914E-01 -0.164669E-02  0.164669E-02   48.8592       48.8608    
   5  0.318380      -1.14451     -0.154589      0.154589       48.8115       48.9661    
   6  0.924426     -0.785824E-01 -0.106141E-01  0.106141E-01   48.9551       48.9657    
   7  0.965220     -0.353996E-01 -0.478141E-02  0.478141E-02   48.8065       48.8113    
   8  0.852248     -0.159878     -0.215947E-01  0.215947E-01   48.9557       48.9773    
   9  0.329186      -1.11113     -0.150081      0.150081       48.8361       48.9862    
  10  0.282479      -1.26415     -0.170749      0.170749       48.9203       49.0911    
  11  0.818943     -0.199740     -0.269789E-01  0.269789E-01   49.1952       49.2222    
  12  0.842569     -0.171300     -0.231374E-01  0.231374E-01   49.1315       49.1547    
  13  0.370966     -0.991644     -0.133941      0.133941       49.1145       49.2485    
  14  0.362233      -1.01547     -0.137159      0.137159       49.1304       49.2676    
  15  0.356944E-01  -3.33276     -0.450156      0.450156       48.8935       49.3436    
  16  0.149119      -1.90301     -0.257039      0.257039       49.1329       49.3899    
  17  0.127170      -2.06223     -0.278546      0.278546       49.2443       49.5228    
  18  0.589256     -0.528895     -0.714377E-01  0.714377E-01   49.2532       49.3246    
  19  0.702139     -0.353624     -0.477639E-01  0.477639E-01   49.2694       49.3171    
  20  0.713819     -0.337127     -0.455356E-01  0.455356E-01   49.2337       49.2793    
  21  0.121783      -2.10552     -0.284392      0.284392       49.2925       49.5769    
  22  0.992321     -0.770837E-02 -0.104117E-02  0.104117E-02   49.1506       49.1517    
  23  0.622746     -0.473616     -0.639713E-01  0.639713E-01   49.1295       49.1935    
  24  0.388486     -0.945499     -0.127708      0.127708       49.3057       49.4334    
  25  0.365204      -1.00730     -0.136056      0.136056       49.3015       49.4375    
  26  0.416566     -0.875710     -0.118282      0.118282       49.2768       49.3951    
  27  0.250735      -1.38336     -0.186850      0.186850       49.4664       49.6533    
  28  0.243824      -1.41131     -0.190626      0.190626       49.0560       49.2467    
  29  0.177195      -1.73050     -0.233739      0.233739       49.5256       49.7593    
  30  0.723685     -0.323399     -0.436815E-01  0.436815E-01   49.3915       49.4352    
  31  0.157256      -1.84988     -0.249863      0.249863       49.4233       49.6732    
  32  0.941988     -0.597623E-01 -0.807209E-02  0.807209E-02   49.2843       49.2923    
  33  0.110785      -2.20016     -0.297176      0.297176       49.2823       49.5795    
  34  0.200758      -1.60566     -0.216876      0.216876       49.4594       49.6762    
  35  0.873323     -0.135450     -0.182952E-01  0.182952E-01   49.4762       49.4945    
  36  0.842283     -0.171639     -0.231832E-01  0.231832E-01   49.4030       49.4262    
  37  0.326633      -1.11892     -0.151132      0.151132       49.5031       49.6542    
  38  0.648559     -0.433003     -0.584857E-01  0.584857E-01   49.7372       49.7957    
  39  0.460689E-01  -3.07762     -0.415693      0.415693       49.7958       50.2115    
  40  0.676614     -0.390654     -0.527656E-01  0.527656E-01   49.7751       49.8278    
  41  0.863029     -0.147307     -0.198967E-01  0.198967E-01   49.6610       49.6809    
  42  0.646727     -0.435831     -0.588676E-01  0.588676E-01   49.6268       49.6856    
  43  0.310616      -1.16920     -0.157923      0.157923       49.8342       49.9922    
  44  0.521840     -0.650394     -0.878487E-01  0.878487E-01   49.6417       49.7295    
  45  0.381245     -0.964312     -0.130250      0.130250       49.9083       50.0385    
  46  0.815908     -0.203453     -0.274804E-01  0.274804E-01   49.7586       49.7861    
  47  0.209395E-01  -3.86612     -0.522196      0.522196       49.9972       50.5194    
  48  0.800991E-01  -2.52449     -0.340983      0.340983       49.9050       50.2460    
  49  0.824204     -0.193337     -0.261140E-01  0.261140E-01   50.0607       50.0868    
  50  0.828636     -0.187975     -0.253897E-01  0.253897E-01   49.6103       49.6357    
  51  0.609810     -0.494608     -0.668066E-01  0.668066E-01   50.1253       50.1921    
  52  0.793631     -0.231137     -0.312197E-01  0.312197E-01   49.4938       49.5250    
loop,thermsimp(1:2)       75  0.590612E-01  0.300575    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    431         48.99          1.25          1.04         24.26          0.08          0.06         26.69
Just calling func    0   0         26.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       75
neval is:      430
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       76
neval is:      430


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      430     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.202436      -1.59733     -0.215751      0.215751       48.1335       48.3493    
   2  0.337724      -1.08553     -0.146622      0.146622       48.7819       48.9285    
   3  0.870295     -0.138923     -0.187644E-01  0.187644E-01   48.8065       48.8253    
   4  0.837087     -0.177827     -0.240191E-01  0.240191E-01   48.8592       48.8832    
   5  0.512110     -0.669215     -0.903909E-01  0.903909E-01   48.9551       49.0455    
   6  0.998742     -0.125879E-02 -0.170025E-03  0.170025E-03   48.8115       48.8117    
   7  0.203490      -1.59214     -0.215050      0.215050       48.9557       49.1708    
   8  0.525951E-01  -2.94513     -0.397799      0.397799       48.8361       49.2339    
   9  0.474810     -0.744841     -0.100606      0.100606       48.7886       48.8892    
  10  0.440755     -0.819266     -0.110658      0.110658       48.9203       49.0310    
  11  0.225689      -1.48860     -0.201065      0.201065       49.1506       49.3517    
  12  0.902704     -0.102360     -0.138258E-01  0.138258E-01   49.1315       49.1454    
  13  0.663331     -0.410481     -0.554436E-01  0.554436E-01   49.1295       49.1849    
  14  0.511480     -0.670447     -0.905572E-01  0.905572E-01   49.1952       49.2858    
  15  0.625297     -0.469528     -0.634192E-01  0.634192E-01   49.0560       49.1195    
  16  0.812907     -0.207139     -0.279783E-01  0.279783E-01   49.1145       49.1425    
  17  0.979453     -0.207607E-01 -0.280414E-02  0.280414E-02   49.1304       49.1332    
  18  0.255329      -1.36520     -0.184398      0.184398       49.2337       49.4181    
  19  0.856654     -0.154722     -0.208982E-01  0.208982E-01   49.2843       49.3052    
  20  0.610394     -0.493650     -0.666773E-01  0.666773E-01   49.2694       49.3360    
  21  0.703614     -0.351525     -0.474804E-01  0.474804E-01   49.2532       49.3007    
  22  0.623403     -0.472562     -0.638289E-01  0.638289E-01   48.8935       48.9573    
  23  0.375727     -0.978893     -0.132219      0.132219       49.1329       49.2651    
  24  0.870528     -0.138656     -0.187282E-01  0.187282E-01   49.2768       49.2955    
  25  0.175838E-01  -4.04078     -0.545787      0.545787       49.4030       49.9488    
  26  0.237914      -1.43585     -0.193939      0.193939       49.3057       49.4997    
  27  0.464352     -0.767112     -0.103614      0.103614       49.3915       49.4952    
  28  0.776873     -0.252478     -0.341022E-01  0.341022E-01   49.3015       49.3356    
  29  0.380679     -0.965800     -0.130450      0.130450       49.4762       49.6066    
  30  0.391295     -0.938295     -0.126735      0.126735       49.2443       49.3710    
  31  0.369488     -0.995636     -0.134481      0.134481       49.4938       49.6283    
  32  0.302398      -1.19601     -0.161545      0.161545       49.2925       49.4541    
  33  0.809138     -0.211786     -0.286059E-01  0.286059E-01   49.2823       49.3109    
  34  0.675473     -0.392342     -0.529936E-01  0.529936E-01   49.6103       49.6633    
  35  0.486217     -0.721100     -0.973989E-01  0.973989E-01   49.4664       49.5638    
  36  0.937468     -0.645730E-01 -0.872187E-02  0.872187E-02   49.5031       49.5118    
  37  0.741025     -0.299721     -0.404832E-01  0.404832E-01   49.4233       49.4638    
  38  0.155236      -1.86281     -0.251609      0.251609       49.4594       49.7110    
  39  0.407249     -0.898331     -0.121338      0.121338       49.6610       49.7823    
  40  0.348550E-01  -3.35656     -0.453370      0.453370       49.6268       50.0801    
  41  0.178548      -1.72290     -0.232712      0.232712       49.6417       49.8744    
  42  0.127429      -2.06020     -0.278271      0.278271       49.5256       49.8038    
  43  0.919888     -0.835037E-01 -0.112788E-01  0.112788E-01   49.7586       49.7699    
  44  0.520080     -0.653772     -0.883049E-01  0.883049E-01   49.7372       49.8255    
  45  0.574092     -0.554965     -0.749591E-01  0.749591E-01   49.7751       49.8500    
  46  0.893427     -0.112690     -0.152211E-01  0.152211E-01   49.8342       49.8495    
  47  0.658991     -0.417045     -0.563303E-01  0.563303E-01   49.9083       49.9646    
  48  0.803744     -0.218475     -0.295093E-01  0.295093E-01   50.0607       50.0902    
  49  0.499877     -0.693392     -0.936564E-01  0.936564E-01   50.1253       50.2190    
  50  0.723109     -0.324195     -0.437889E-01  0.437889E-01   49.7958       49.8396    
  51  0.477842     -0.738475     -0.997457E-01  0.997457E-01   49.9050       50.0047    
  52  0.946108     -0.553980E-01 -0.748261E-02  0.748261E-02   48.9945       49.0020    
loop,thermsimp(1:2)       76  0.215751      0.146622    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    432         48.93          1.23          1.03         24.21          0.06          0.06         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.93
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       76
neval is:      431
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       77
neval is:      431


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      431     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.608851     -0.496181     -0.670192E-01  0.670192E-01   48.1335       48.2005    
   2  0.437836     -0.825911     -0.111556      0.111556       48.8115       48.9231    
   3  0.123560      -2.09103     -0.282435      0.282435       48.8065       49.0890    
   4  0.943438     -0.582242E-01 -0.786434E-02  0.786434E-02   48.8592       48.8671    
   5  0.215054      -1.53686     -0.207584      0.207584       48.7886       48.9962    
   6  0.984763     -0.153546E-01 -0.207394E-02  0.207394E-02   48.7819       48.7840    
   7  0.154160E-01  -4.17235     -0.563559      0.563559       48.8935       49.4570    
   8  0.231957      -1.46120     -0.197365      0.197365       48.9945       49.1918    
   9  0.476349     -0.741605     -0.100169      0.100169       48.9203       49.0205    
  10  0.620436     -0.477333     -0.644733E-01  0.644733E-01   48.9551       49.0196    
  11  0.456145     -0.784945     -0.106022      0.106022       49.0560       49.1621    
  12  0.507296     -0.678660     -0.916665E-01  0.916665E-01   49.1304       49.2221    
  13  0.910123     -0.941755E-01 -0.127203E-01  0.127203E-01   49.1145       49.1272    
  14  0.323556      -1.12838     -0.152411      0.152411       49.1315       49.2840    
  15  0.666279     -0.406046     -0.548446E-01  0.548446E-01   48.9557       49.0105    
  16  0.781920     -0.246002     -0.332275E-01  0.332275E-01   49.1295       49.1627    
  17  0.921689     -0.815478E-01 -0.110146E-01  0.110146E-01   48.8361       48.8472    
  18  0.152544      -1.88030     -0.253972      0.253972       49.1329       49.3868    
  19  0.265926      -1.32454     -0.178905      0.178905       49.1952       49.3741    
  20  0.812409     -0.207751     -0.280609E-01  0.280609E-01   49.2768       49.3049    
  21  0.517560E-01  -2.96121     -0.399971      0.399971       49.2532       49.6531    
  22  0.559187     -0.581271     -0.785122E-01  0.785122E-01   49.2843       49.3628    
  23  0.708792     -0.344194     -0.464902E-01  0.464902E-01   49.2823       49.3288    
  24  0.287762      -1.24562     -0.168246      0.168246       49.3015       49.4697    
  25  0.896953     -0.108752     -0.146892E-01  0.146892E-01   49.2694       49.2841    
  26  0.305048      -1.18729     -0.160367      0.160367       49.1506       49.3110    
  27  0.752428     -0.284450     -0.384206E-01  0.384206E-01   49.2443       49.2827    
  28  0.248159      -1.39369     -0.188245      0.188245       49.2337       49.4220    
  29  0.997822     -0.217989E-02 -0.294438E-03  0.294438E-03   49.2925       49.2928    
  30  0.706427     -0.347535     -0.469415E-01  0.469415E-01   49.4233       49.4703    
  31  0.885217     -0.121923     -0.164681E-01  0.164681E-01   49.3915       49.4080    
  32  0.448301     -0.802290     -0.108365      0.108365       49.3057       49.4141    
  33  0.316275      -1.15114     -0.155485      0.155485       49.5031       49.6586    
  34  0.682241     -0.382372     -0.516469E-01  0.516469E-01   49.4664       49.5181    
  35  0.655896     -0.421752     -0.569661E-01  0.569661E-01   49.4762       49.5332    
  36  0.129575      -2.04350     -0.276015      0.276015       49.4938       49.7698    
  37  0.236133      -1.44336     -0.194955      0.194955       49.6103       49.8053    
  38  0.481338     -0.731186     -0.987612E-01  0.987612E-01   49.4594       49.5581    
  39  0.825902     -0.191279     -0.258360E-01  0.258360E-01   49.7586       49.7845    
  40  0.818029     -0.200857     -0.271297E-01  0.271297E-01   49.6610       49.6881    
  41  0.135951E-01  -4.29805     -0.580536      0.580536       49.5256       50.1061    
  42  0.535484     -0.624585     -0.843626E-01  0.843626E-01   49.7372       49.8216    
  43  0.451882     -0.794334     -0.107291      0.107291       49.7958       49.9031    
  44  0.591282     -0.525463     -0.709742E-01  0.709742E-01   49.8342       49.9052    
  45  0.220584      -1.51148     -0.204155      0.204155       49.7751       49.9792    
  46  0.217569      -1.52524     -0.206014      0.206014       49.6417       49.8477    
  47  0.541669     -0.613101     -0.828114E-01  0.828114E-01   49.4030       49.4859    
  48  0.927891     -0.748411E-01 -0.101088E-01  0.101088E-01   49.9083       49.9184    
  49  0.888902     -0.117768     -0.159069E-01  0.159069E-01   49.9050       49.9209    
  50  0.391529     -0.937694     -0.126654      0.126654       49.6268       49.7534    
  51  0.611187     -0.492353     -0.665020E-01  0.665020E-01   50.0607       50.1272    
  52  0.475002     -0.744437     -0.100551      0.100551       48.9287       49.0292    
loop,thermsimp(1:2)       77  0.670192E-01  0.111556    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    433         48.72          1.21          1.03         24.17          0.07          0.06         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.72
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       77
neval is:      432
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       78
neval is:      432


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      432     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.980204E-01  -2.32258     -0.313711      0.313711       48.1335       48.4472    
   2  0.700279     -0.356277     -0.481223E-01  0.481223E-01   48.7819       48.8300    
   3  0.681564     -0.383366     -0.517812E-01  0.517812E-01   48.8361       48.8879    
   4  0.838213E-01  -2.47907     -0.334848      0.334848       48.8592       49.1940    
   5  0.708687     -0.344341     -0.465101E-01  0.465101E-01   48.8115       48.8581    
   6  0.253966      -1.37055     -0.185120      0.185120       48.7886       48.9737    
   7  0.210796      -1.55686     -0.210285      0.210285       48.9557       49.1660    
   8  0.967741     -0.327906E-01 -0.442902E-02  0.442902E-02   48.9551       48.9595    
   9  0.901331     -0.103882     -0.140314E-01  0.140314E-01   48.9203       48.9344    
  10  0.985067     -0.150452E-01 -0.203215E-02  0.203215E-02   48.9287       48.9307    
  11  0.153899      -1.87146     -0.252778      0.252778       48.8065       49.0593    
  12  0.297572      -1.21210     -0.163718      0.163718       49.1145       49.2782    
  13  0.111036      -2.19790     -0.296870      0.296870       49.0560       49.3529    
  14  0.489011     -0.715370     -0.966249E-01  0.966249E-01   49.1295       49.2261    
  15  0.970731     -0.297058E-01 -0.401237E-02  0.401237E-02   48.9945       48.9985    
  16  0.246322      -1.40112     -0.189249      0.189249       49.1304       49.3197    
  17  0.293332      -1.22645     -0.165656      0.165656       49.2443       49.4100    
  18  0.545752     -0.605591     -0.817971E-01  0.817971E-01   49.1315       49.2133    
  19  0.455999     -0.785265     -0.106066      0.106066       49.2694       49.3754    
  20  0.427211     -0.850477     -0.114874      0.114874       49.2925       49.4074    
  21  0.185046E-01  -3.98974     -0.538893      0.538893       49.2768       49.8157    
  22  0.768936     -0.262748     -0.354893E-01  0.354893E-01   49.1506       49.1861    
  23  0.870591     -0.138583     -0.187184E-01  0.187184E-01   49.2823       49.3010    
  24  0.563023     -0.574436     -0.775889E-01  0.775889E-01   49.2843       49.3619    
  25  0.132150E-01  -4.32640     -0.584367      0.584367       49.1952       49.7796    
  26  0.890415     -0.116068     -0.156773E-01  0.156773E-01   49.1329       49.1485    
  27  0.163417      -1.81145     -0.244673      0.244673       49.3915       49.6362    
  28  0.360288      -1.02085     -0.137886      0.137886       49.3057       49.4436    
  29  0.622131     -0.474604     -0.641047E-01  0.641047E-01   49.2337       49.2978    
  30  0.942630     -0.590811E-01 -0.798008E-02  0.798008E-02   48.8935       48.9014    
  31  0.135626      -1.99785     -0.269850      0.269850       49.3015       49.5713    
  32  0.369646     -0.995208     -0.134423      0.134423       49.4233       49.5578    
  33  0.501457     -0.690237     -0.932303E-01  0.932303E-01   49.4030       49.4963    
  34  0.459762     -0.777047     -0.104956      0.104956       49.4664       49.5714    
  35  0.489970     -0.713411     -0.963603E-01  0.963603E-01   49.4762       49.5726    
  36  0.504194     -0.684794     -0.924950E-01  0.924950E-01   49.4594       49.5518    
  37  0.543102E-01  -2.91304     -0.393464      0.393464       49.2532       49.6466    
  38  0.873609     -0.135122     -0.182509E-01  0.182509E-01   49.5031       49.5213    
  39  0.425787     -0.853816     -0.115325      0.115325       49.6610       49.7763    
  40  0.792406     -0.232682     -0.314283E-01  0.314283E-01   49.6268       49.6582    
  41  0.691102     -0.369469     -0.499041E-01  0.499041E-01   49.4938       49.5437    
  42  0.752290     -0.284633     -0.384454E-01  0.384454E-01   49.7586       49.7971    
  43  0.279962      -1.27310     -0.171958      0.171958       49.6103       49.7823    
  44  0.315915E-01  -3.45487     -0.466648      0.466648       49.7372       50.2039    
  45  0.266419      -1.32269     -0.178655      0.178655       49.6417       49.8203    
  46  0.949868     -0.514319E-01 -0.694690E-02  0.694690E-02   49.7958       49.8027    
  47  0.520560     -0.652850     -0.881804E-01  0.881804E-01   49.8342       49.9224    
  48  0.805351     -0.216477     -0.292396E-01  0.292396E-01   49.9083       49.9375    
  49  0.281582      -1.26733     -0.171178      0.171178       49.9050       50.0762    
  50  0.365228      -1.00723     -0.136047      0.136047       49.7751       49.9111    
  51  0.961426     -0.393382E-01 -0.531341E-02  0.531341E-02   49.5256       49.5309    
  52  0.176024      -1.73713     -0.234634      0.234634       48.7177       48.9523    
loop,thermsimp(1:2)       78  0.313711      0.481223E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    434         48.55          1.21          1.02         24.19          0.10          0.06         26.58
Just calling func    0   0         26.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    435         49.21          1.03          1.00         24.25          0.05          0.06         26.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.55
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       78
neval is:      434
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       79
neval is:      434


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      434     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.190215      -1.65960     -0.224162      0.224162       48.1335       48.3577    
   2  0.812983     -0.207045     -0.279656E-01  0.279656E-01   48.7819       48.8098    
   3  0.820046E-01  -2.50098     -0.337807      0.337807       48.8115       49.1493    
   4  0.863006     -0.147333     -0.199003E-01  0.199003E-01   48.8361       48.8560    
   5  0.647901     -0.434017     -0.586227E-01  0.586227E-01   48.8935       48.9521    
   6  0.650063E-01  -2.73327     -0.369183      0.369183       48.9287       49.2979    
   7  0.407685E-02  -5.50243     -0.743213      0.743213       48.9203       49.6636    
   8  0.935930     -0.662149E-01 -0.894364E-02  0.894364E-02   48.7177       48.7266    
   9  0.158531      -1.84180     -0.248772      0.248772       48.9551       49.2039    
  10  0.846482     -0.166666     -0.225116E-01  0.225116E-01   48.7886       48.8111    
  11  0.252208      -1.37750     -0.186059      0.186059       48.9945       49.1805    
  12  0.781651E-02  -4.85152     -0.655294      0.655294       48.8065       49.4618    
  13  0.990286     -0.976134E-02 -0.131846E-02  0.131846E-02   49.1329       49.1342    
  14  0.550116     -0.597625     -0.807212E-01  0.807212E-01   48.9557       49.0364    
  15  0.483066     -0.727601     -0.982770E-01  0.982770E-01   49.1506       49.2489    
  16  0.196160      -1.62883     -0.220005      0.220005       48.8592       49.0792    
  17  0.469455     -0.756184     -0.102138      0.102138       49.1315       49.2337    
  18  0.624392     -0.470977     -0.636148E-01  0.636148E-01   49.1295       49.1931    
  19  0.743593     -0.296262     -0.400160E-01  0.400160E-01   49.1145       49.1545    
  20  0.348439      -1.05429     -0.142403      0.142403       49.2337       49.3761    
  21  0.779083     -0.249637     -0.337185E-01  0.337185E-01   49.2823       49.3160    
  22  0.989010     -0.110506E-01 -0.149260E-02  0.149260E-02   49.1304       49.1319    
  23  0.655432E-01  -2.72505     -0.368072      0.368072       49.0560       49.4241    
  24  0.470908     -0.753092     -0.101720      0.101720       49.2843       49.3860    
  25  0.685537     -0.377553     -0.509960E-01  0.509960E-01   49.2694       49.3204    
  26  0.863060E-02  -4.75244     -0.641912      0.641912       49.2925       49.9344    
  27  0.526195     -0.642084     -0.867262E-01  0.867262E-01   49.2443       49.3310    
  28  0.767692     -0.264367     -0.357080E-01  0.357080E-01   49.3057       49.3414    
  29  0.380048     -0.967459     -0.130675      0.130675       49.4030       49.5337    
  30  0.337508E-01  -3.38875     -0.457718      0.457718       49.5031       49.9608    
  31  0.683667     -0.380285     -0.513650E-01  0.513650E-01   49.5256       49.5769    
  32  0.245511      -1.40441     -0.189694      0.189694       49.4938       49.6835    
  33  0.294388      -1.22286     -0.165171      0.165171       49.4594       49.6245    
  34  0.159040      -1.83860     -0.248339      0.248339       49.4233       49.6717    
  35  0.613798     -0.488089     -0.659261E-01  0.659261E-01   49.3015       49.3674    
  36  0.863839E-01  -2.44895     -0.330780      0.330780       49.4664       49.7972    
  37  0.118930      -2.12922     -0.287594      0.287594       49.4762       49.7638    
  38  0.961460     -0.393026E-01 -0.530860E-02  0.530860E-02   49.3915       49.3968    
  39  0.457884     -0.781140     -0.105509      0.105509       49.2532       49.3587    
  40  0.312963      -1.16167     -0.156907      0.156907       49.6268       49.7837    
  41  0.892553     -0.113669     -0.153533E-01  0.153533E-01   49.6610       49.6763    
  42  0.448774     -0.801235     -0.108223      0.108223       49.1952       49.3034    
  43  0.942987E-01  -2.36129     -0.318939      0.318939       49.6103       49.9293    
  44  0.848599     -0.164169     -0.221742E-01  0.221742E-01   49.7586       49.7808    
  45  0.665342     -0.407455     -0.550349E-01  0.550349E-01   49.7958       49.8508    
  46  0.894010     -0.112039     -0.151330E-01  0.151330E-01   49.2768       49.2919    
  47  0.403928     -0.906518     -0.122443      0.122443       49.6417       49.7641    
  48  0.612812     -0.489696     -0.661432E-01  0.661432E-01   49.7751       49.8412    
  49  0.726279     -0.319821     -0.431982E-01  0.431982E-01   49.8342       49.8774    
  50  0.694767     -0.364179     -0.491896E-01  0.491896E-01   49.9083       49.9575    
  51  0.849471     -0.163141     -0.220355E-01  0.220355E-01   49.9050       49.9270    
  52  0.615908     -0.484657     -0.654626E-01  0.654626E-01   48.5513       48.6167    
loop,thermsimp(1:2)       79  0.224162      0.279656E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    436         48.87          1.18          1.02         24.16          0.12          0.05         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.87
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       79
neval is:      435
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       80
neval is:      435


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      435     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.337114      -1.08733     -0.146866      0.146866       48.1335       48.2804    
   2  0.744737     -0.294724     -0.398083E-01  0.398083E-01   48.5513       48.5911    
   3  0.361564E-01  -3.31990     -0.448419      0.448419       48.7177       49.1661    
   4  0.312099      -1.16444     -0.157280      0.157280       48.7819       48.9392    
   5  0.119132      -2.12752     -0.287365      0.287365       48.7886       49.0759    
   6  0.617735     -0.481696     -0.650626E-01  0.650626E-01   48.8361       48.9012    
   7  0.117626      -2.14025     -0.289083      0.289083       48.8935       49.1825    
   8  0.258570      -1.35259     -0.182694      0.182694       48.9557       49.1384    
   9  0.851854E-01  -2.46293     -0.332667      0.332667       48.8592       49.1919    
  10  0.220620      -1.51131     -0.204133      0.204133       49.1304       49.3346    
  11  0.648876     -0.432513     -0.584195E-01  0.584195E-01   49.1329       49.1913    
  12  0.958689     -0.421884E-01 -0.569839E-02  0.569839E-02   48.8115       48.8172    
  13  0.240652      -1.42440     -0.192394      0.192394       49.1145       49.3069    
  14  0.975871     -0.244252E-01 -0.329911E-02  0.329911E-02   48.9945       48.9978    
  15  0.467835     -0.759639     -0.102604      0.102604       49.1295       49.2321    
  16  0.398205     -0.920788     -0.124371      0.124371       48.9551       49.0795    
  17  0.757338E-01  -2.58053     -0.348552      0.348552       49.1315       49.4801    
  18  0.654643     -0.423666     -0.572245E-01  0.572245E-01   49.1506       49.2079    
  19  0.305298      -1.18647     -0.160256      0.160256       49.2768       49.4371    
  20  0.435768     -0.830645     -0.112195      0.112195       48.9287       49.0409    
  21  0.689410     -0.371920     -0.502352E-01  0.502352E-01   49.1952       49.2455    
  22  0.267500      -1.31864     -0.178108      0.178108       49.2823       49.4604    
  23  0.590747     -0.526367     -0.710964E-01  0.710964E-01   49.2694       49.3405    
  24  0.108947E-01  -4.51948     -0.610445      0.610445       49.2443       49.8547    
  25  0.236025      -1.44382     -0.195016      0.195016       49.3057       49.5007    
  26  0.590760     -0.526345     -0.710934E-01  0.710934E-01   49.2532       49.3243    
  27  0.782443     -0.245334     -0.331372E-01  0.331372E-01   49.3015       49.3346    
  28  0.702257     -0.353456     -0.477412E-01  0.477412E-01   49.2337       49.2815    
  29  0.764991     -0.267891     -0.361841E-01  0.361841E-01   49.2843       49.3205    
  30  0.753362     -0.283210     -0.382531E-01  0.382531E-01   49.3915       49.4298    
  31  0.961949E-01  -2.34138     -0.316250      0.316250       49.0560       49.3723    
  32  0.541564     -0.613294     -0.828375E-01  0.828375E-01   48.8065       48.8894    
  33  0.474786     -0.744891     -0.100612      0.100612       49.4030       49.5037    
  34  0.242842      -1.41534     -0.191170      0.191170       49.5256       49.7167    
  35  0.495414     -0.702361     -0.948678E-01  0.948678E-01   49.4594       49.5542    
  36  0.636645     -0.451543     -0.609899E-01  0.609899E-01   48.9203       48.9813    
  37  0.758087     -0.276957     -0.374086E-01  0.374086E-01   49.4233       49.4607    
  38  0.209321      -1.56389     -0.211234      0.211234       49.6610       49.8722    
  39  0.484343     -0.724961     -0.979204E-01  0.979204E-01   49.4938       49.5918    
  40  0.499790     -0.693567     -0.936800E-01  0.936800E-01   49.4762       49.5699    
  41  0.316628      -1.15003     -0.155334      0.155334       49.6417       49.7970    
  42  0.705469     -0.348892     -0.471248E-01  0.471248E-01   49.7586       49.8058    
  43  0.514591     -0.664383     -0.897382E-01  0.897382E-01   49.6268       49.7165    
  44  0.869006     -0.140406     -0.189646E-01  0.189646E-01   49.4664       49.4854    
  45  0.112600      -2.18392     -0.294981      0.294981       49.7751       50.0701    
  46  0.511991     -0.669449     -0.904224E-01  0.904224E-01   49.7958       49.8862    
  47  0.477456     -0.739283     -0.998549E-01  0.998549E-01   49.8342       49.9341    
  48  0.494460     -0.704290     -0.951284E-01  0.951284E-01   49.9050       50.0001    
  49  0.698938     -0.358193     -0.483812E-01  0.483812E-01   49.6103       49.6587    
  50  0.430212     -0.843478     -0.113929      0.113929       49.2925       49.4064    
  51  0.474243E-01  -3.04862     -0.411777      0.411777       49.9083       50.3201    
  52  0.167497      -1.78679     -0.241341      0.241341       48.8655       49.1068    
loop,thermsimp(1:2)       80  0.146866      0.398083E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    437         48.51          1.04          1.02         24.18          0.03          0.07         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    438         48.72          1.02          1.01         24.19          0.05          0.05         26.32
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1     48.51
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       80
neval is:      437
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       81
neval is:      437


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      437     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.343927      -1.06733     -0.144164      0.144164       48.1335       48.2777    
   2  0.822787     -0.195058     -0.263464E-01  0.263464E-01   48.5513       48.5776    
   3  0.320831E-01  -3.43942     -0.464563      0.464563       48.8115       49.2761    
   4  0.224034      -1.49596     -0.202059      0.202059       48.8065       49.0086    
   5  0.200770      -1.60559     -0.216867      0.216867       48.8361       49.0530    
   6  0.983846     -0.162863E-01 -0.219978E-02  0.219978E-02   48.7819       48.7841    
   7  0.762274     -0.271449     -0.366646E-01  0.366646E-01   48.9203       48.9570    
   8  0.872649     -0.136221     -0.183994E-01  0.183994E-01   48.9945       49.0129    
   9  0.366891      -1.00269     -0.135433      0.135433       48.9287       49.0641    
  10  0.800852     -0.222079     -0.299962E-01  0.299962E-01   48.7886       48.8186    
  11  0.755695     -0.280117     -0.378354E-01  0.378354E-01   48.9551       48.9929    
  12  0.595174     -0.518902     -0.700880E-01  0.700880E-01   48.8655       48.9356    
  13  0.316509      -1.15040     -0.155385      0.155385       48.9557       49.1111    
  14  0.847901     -0.164991     -0.222853E-01  0.222853E-01   48.7177       48.7399    
  15  0.116195      -2.15248     -0.290736      0.290736       48.8935       49.1842    
  16  0.121963      -2.10403     -0.284192      0.284192       49.1329       49.4170    
  17  0.298485      -1.20903     -0.163304      0.163304       48.8592       49.0225    
  18  0.698751     -0.358461     -0.484173E-01  0.484173E-01   49.1506       49.1991    
  19  0.248186      -1.39358     -0.188230      0.188230       49.1295       49.3177    
  20  0.717251     -0.332329     -0.448876E-01  0.448876E-01   49.1952       49.2401    
  21  0.591856     -0.524491     -0.708430E-01  0.708430E-01   49.2337       49.3046    
  22  0.780177E-01  -2.55082     -0.344539      0.344539       49.1145       49.4591    
  23  0.314281      -1.15747     -0.156339      0.156339       49.2843       49.4406    
  24  0.565423E-01  -2.87277     -0.388024      0.388024       49.2532       49.6412    
  25  0.964829     -0.358044E-01 -0.483610E-02  0.483610E-02   49.1304       49.1353    
  26  0.900157     -0.105186     -0.142075E-01  0.142075E-01   49.3015       49.3157    
  27  0.656998     -0.420074     -0.567393E-01  0.567393E-01   49.2694       49.3261    
  28  0.888436E-01  -2.42088     -0.326988      0.326988       49.0560       49.3830    
  29  0.853838     -0.158014     -0.213429E-01  0.213429E-01   49.2925       49.3138    
  30  0.704842     -0.349782     -0.472450E-01  0.472450E-01   49.3915       49.4388    
  31  0.890111     -0.116409     -0.157233E-01  0.157233E-01   49.2768       49.2925    
  32  0.424397     -0.857087     -0.115767      0.115767       49.2823       49.3980    
  33  0.959371     -0.414778E-01 -0.560241E-02  0.560241E-02   49.4233       49.4289    
  34  0.323832      -1.12753     -0.152296      0.152296       49.1315       49.2838    
  35  0.943913     -0.577217E-01 -0.779646E-02  0.779646E-02   49.4664       49.4742    
  36  0.119048      -2.12823     -0.287459      0.287459       49.3057       49.5932    
  37  0.427842E-01  -3.15159     -0.425684      0.425684       49.4030       49.8287    
  38  0.433544     -0.835761     -0.112886      0.112886       49.4594       49.5722    
  39  0.773173     -0.257253     -0.347471E-01  0.347471E-01   49.4762       49.5109    
  40  0.455657     -0.786014     -0.106167      0.106167       49.4938       49.6000    
  41  0.362132      -1.01575     -0.137197      0.137197       49.6103       49.7475    
  42  0.775394     -0.254384     -0.343596E-01  0.343596E-01   49.6268       49.6611    
  43  0.889906     -0.116639     -0.157545E-01  0.157545E-01   49.5256       49.5413    
  44  0.415923     -0.877255     -0.118491      0.118491       49.6417       49.7601    
  45  0.374532E-01  -3.28466     -0.443659      0.443659       49.7586       50.2023    
  46  0.904805     -0.100036     -0.135118E-01  0.135118E-01   49.2443       49.2578    
  47  0.130905      -2.03328     -0.274635      0.274635       49.6610       49.9356    
  48  0.951733     -0.494710E-01 -0.668204E-02  0.668204E-02   49.7958       49.8024    
  49  0.720673     -0.327570     -0.442448E-01  0.442448E-01   49.8342       49.8785    
  50  0.425150     -0.855314     -0.115527      0.115527       49.9050       50.0205    
  51  0.464059     -0.767744     -0.103699      0.103699       49.7751       49.8788    
  52  0.822031     -0.195978     -0.264707E-01  0.264707E-01   48.5101       48.5365    
loop,thermsimp(1:2)       81  0.144164      0.263464E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    439         48.47          1.21          1.03         24.17          0.01          0.05         26.48
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.47
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       81
neval is:      438
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       82
neval is:      438


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      438     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.556446     -0.586184     -0.791759E-01  0.791759E-01   48.1335       48.2127    
   2  0.926592     -0.762421E-01 -0.102980E-01  0.102980E-01   48.5101       48.5203    
   3  0.766762     -0.265579     -0.358717E-01  0.358717E-01   48.5513       48.5872    
   4  0.627980     -0.465247     -0.628409E-01  0.628409E-01   48.7177       48.7805    
   5  0.647527     -0.434594     -0.587006E-01  0.587006E-01   48.7819       48.8406    
   6  0.639464     -0.447125     -0.603931E-01  0.603931E-01   48.7886       48.8490    
   7  0.168437      -1.78119     -0.240586      0.240586       48.8655       49.1061    
   8  0.725133     -0.321400     -0.434115E-01  0.434115E-01   48.9203       48.9638    
   9  0.620073     -0.477917     -0.645522E-01  0.645522E-01   48.9551       49.0196    
  10  0.837394     -0.177461     -0.239696E-01  0.239696E-01   48.8065       48.8305    
  11  0.763326     -0.270070     -0.364783E-01  0.364783E-01   48.9945       49.0310    
  12  0.216703      -1.52923     -0.206553      0.206553       48.8592       49.0657    
  13  0.846730     -0.166373     -0.224720E-01  0.224720E-01   48.8361       48.8586    
  14  0.712127     -0.339499     -0.458561E-01  0.458561E-01   48.9287       48.9746    
  15  0.731222     -0.313039     -0.422821E-01  0.422821E-01   48.9557       48.9980    
  16  0.131329      -2.03005     -0.274199      0.274199       49.1304       49.4046    
  17  0.946517     -0.549662E-01 -0.742428E-02  0.742428E-02   48.8935       48.9009    
  18  0.303743      -1.19157     -0.160946      0.160946       49.1506       49.3116    
  19  0.452199     -0.793633     -0.107196      0.107196       49.1952       49.3024    
  20  0.176302      -1.73556     -0.234421      0.234421       49.2443       49.4787    
  21  0.569871     -0.562345     -0.759558E-01  0.759558E-01   48.8115       48.8875    
  22  0.267873      -1.31724     -0.177920      0.177920       49.1315       49.3095    
  23  0.295877      -1.21781     -0.164489      0.164489       49.2768       49.4413    
  24  0.658567     -0.417689     -0.564172E-01  0.564172E-01   49.2337       49.2902    
  25  0.633120     -0.457096     -0.617399E-01  0.617399E-01   49.2925       49.3542    
  26  0.655522     -0.422324     -0.570432E-01  0.570432E-01   49.3015       49.3585    
  27  0.532295     -0.630558     -0.851694E-01  0.851694E-01   49.1295       49.2147    
  28  0.611209     -0.492317     -0.664972E-01  0.664972E-01   49.2694       49.3359    
  29  0.768812E-01  -2.56549     -0.346521      0.346521       49.0560       49.4026    
  30  0.845132     -0.168262     -0.227271E-01  0.227271E-01   49.2823       49.3050    
  31  0.133696      -2.01219     -0.271786      0.271786       49.1329       49.4046    
  32  0.850522E-01  -2.46449     -0.332878      0.332878       49.4233       49.7562    
  33  0.901960     -0.103185     -0.139372E-01  0.139372E-01   49.3915       49.4055    
  34  0.394454E-01  -3.23284     -0.436659      0.436659       49.2843       49.7209    
  35  0.152819      -1.87850     -0.253729      0.253729       49.1145       49.3683    
  36  0.951369     -0.498538E-01 -0.673374E-02  0.673374E-02   49.4664       49.4732    
  37  0.909075     -0.953273E-01 -0.128759E-01  0.128759E-01   49.4762       49.4891    
  38  0.552964     -0.592462     -0.800238E-01  0.800238E-01   49.5256       49.6056    
  39  0.904748     -0.100099     -0.135204E-01  0.135204E-01   49.4594       49.4729    
  40  0.434860     -0.832731     -0.112477      0.112477       49.3057       49.4182    
  41  0.807557E-01  -2.51633     -0.339880      0.339880       49.4938       49.8337    
  42  0.245089      -1.40614     -0.189927      0.189927       49.2532       49.4431    
  43  0.566857     -0.567648     -0.766721E-01  0.766721E-01   49.6268       49.7034    
  44  0.154441      -1.86794     -0.252303      0.252303       49.6103       49.8626    
  45  0.961849     -0.388974E-01 -0.525387E-02  0.525387E-02   49.6417       49.6469    
  46  0.267234      -1.31963     -0.178243      0.178243       49.7958       49.9740    
  47  0.170042      -1.77171     -0.239304      0.239304       49.4030       49.6423    
  48  0.796608     -0.227393     -0.307139E-01  0.307139E-01   49.8342       49.8650    
  49  0.474137     -0.746260     -0.100797      0.100797       49.7751       49.8759    
  50  0.164737      -1.80340     -0.243586      0.243586       49.6610       49.9045    
  51  0.728428     -0.316867     -0.427992E-01  0.427992E-01   49.9050       49.9478    
  52  0.259284      -1.34983     -0.182322      0.182322       48.4748       48.6571    
loop,thermsimp(1:2)       82  0.791759E-01  0.102980E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    440         48.51          1.12          1.00         24.12          0.14          0.06         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.51
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       82
neval is:      439
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       83
neval is:      439


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      439     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.620562     -0.477129     -0.644458E-01  0.644458E-01   48.1335       48.1980    
   2  0.835522     -0.179699     -0.242719E-01  0.242719E-01   48.5101       48.5343    
   3  0.626661     -0.467350     -0.631249E-01  0.631249E-01   48.5513       48.6144    
   4  0.197939      -1.61980     -0.218786      0.218786       48.4748       48.6936    
   5  0.842637     -0.171219     -0.231265E-01  0.231265E-01   48.7177       48.7408    
   6  0.873669     -0.135053     -0.182417E-01  0.182417E-01   48.8065       48.8248    
   7  0.298180E-01  -3.51264     -0.474452      0.474452       48.7819       49.2563    
   8  0.548374     -0.600797     -0.811496E-01  0.811496E-01   48.7886       48.8697    
   9  0.407469E-01  -3.20037     -0.432274      0.432274       48.8361       49.2684    
  10  0.210105E-02  -6.16532     -0.832749      0.832749       48.8115       49.6443    
  11  0.631577     -0.459536     -0.620695E-01  0.620695E-01   48.8935       48.9555    
  12  0.944026     -0.576013E-01 -0.778020E-02  0.778020E-02   48.9203       48.9281    
  13  0.492775     -0.707703     -0.955893E-01  0.955893E-01   48.9287       49.0243    
  14  0.195107      -1.63421     -0.220732      0.220732       48.9557       49.1764    
  15  0.775688     -0.254005     -0.343084E-01  0.343084E-01   48.9551       48.9894    
  16  0.763907     -0.269310     -0.363756E-01  0.363756E-01   48.9945       49.0309    
  17  0.797499     -0.226275     -0.305629E-01  0.305629E-01   48.8592       48.8898    
  18  0.639217     -0.447511     -0.604453E-01  0.604453E-01   48.8655       48.9259    
  19  0.775225     -0.254602     -0.343891E-01  0.343891E-01   49.1295       49.1639    
  20  0.680633     -0.384733     -0.519658E-01  0.519658E-01   49.2337       49.2857    
  21  0.532184     -0.630766     -0.851975E-01  0.851975E-01   49.1952       49.2804    
  22  0.843009     -0.170778     -0.230670E-01  0.230670E-01   49.2823       49.3053    
  23  0.943186     -0.584913E-01 -0.790041E-02  0.790041E-02   49.1315       49.1394    
  24  0.601611     -0.508143     -0.686349E-01  0.686349E-01   49.1506       49.2193    
  25  0.259021      -1.35084     -0.182458      0.182458       49.2694       49.4518    
  26  0.855132     -0.156500     -0.211384E-01  0.211384E-01   49.2925       49.3136    
  27  0.351229      -1.04632     -0.141326      0.141326       49.3015       49.4428    
  28  0.950362     -0.509122E-01 -0.687670E-02  0.687670E-02   49.1145       49.1214    
  29  0.447301     -0.804524     -0.108667      0.108667       49.0560       49.1647    
  30  0.325509      -1.12237     -0.151598      0.151598       49.1304       49.2820    
  31  0.717010     -0.332666     -0.449332E-01  0.449332E-01   49.1329       49.1778    
  32  0.676718     -0.390500     -0.527448E-01  0.527448E-01   49.3915       49.4443    
  33  0.493623     -0.705983     -0.953571E-01  0.953571E-01   49.3057       49.4011    
  34  0.155805E-01  -4.16174     -0.562125      0.562125       49.2768       49.8389    
  35  0.417708     -0.872973     -0.117912      0.117912       49.2532       49.3711    
  36  0.395067     -0.928699     -0.125439      0.125439       49.4594       49.5848    
  37  0.977835     -0.224139E-01 -0.302744E-02  0.302744E-02   49.4664       49.4695    
  38  0.603414     -0.505151     -0.682307E-01  0.682307E-01   49.2443       49.3125    
  39  0.173810      -1.74979     -0.236344      0.236344       49.4762       49.7125    
  40  0.979719     -0.204895E-01 -0.276751E-02  0.276751E-02   49.5256       49.5283    
  41  0.234071      -1.45213     -0.196139      0.196139       49.4030       49.5992    
  42  0.264051      -1.33161     -0.179861      0.179861       49.6417       49.8215    
  43  0.756353     -0.279247     -0.377179E-01  0.377179E-01   49.6268       49.6645    
  44  0.980782     -0.194046E-01 -0.262098E-02  0.262098E-02   49.2843       49.2869    
  45  0.444591E-01  -3.11319     -0.420498      0.420498       49.4233       49.8438    
  46  0.276895      -1.28412     -0.173446      0.173446       49.4938       49.6673    
  47  0.754338     -0.281915     -0.380783E-01  0.380783E-01   49.6103       49.6484    
  48  0.288496      -1.24308     -0.167902      0.167902       49.8342       50.0021    
  49  0.945547     -0.559915E-01 -0.756277E-02  0.756277E-02   49.7751       49.7826    
  50  0.698722     -0.358502     -0.484228E-01  0.484228E-01   49.6610       49.7094    
  51  0.586821     -0.533035     -0.719970E-01  0.719970E-01   49.9050       49.9770    
  52  0.173241      -1.75307     -0.236787      0.236787       48.5080       48.7448    
loop,thermsimp(1:2)       83  0.644458E-01  0.242719E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    441         48.49          1.22          1.02         24.16          0.02          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  440    48.492        2.467     -1.584      5.237     -100.0     0.9803    
                     -0.5961      2.582     -100.0      2.861      1.955    
                       1.250     -1.090      1.841      0.000      0.000    
                      -1.224      0.000      0.000      0.000     -1.221    

                      -2.500     0.1011E+05 0.1379E+05 -1560.    -0.3451E+05
                      -2.000     -4.204     -6.727     -6.147     -1.358    
                      -12.98     -2.961      1522.      0.000      2659.    

                       3281.      4344.      3226.      5996.      2193.    
                       2108.     0.5183E-01-0.3972E-01  0.000    -0.1390    
                     -0.1123    -0.1739    -0.6149E-01-0.2188    -0.2550E-02

                      -1.412     -1.070      0.000    -0.2329E-01-0.2333E-01
                      0.8541E-01 0.3459E-01-0.1768E-01-0.3585    -0.1518    
                     -0.4682E-01-0.9508E-01-0.1927    -0.8659      0.000    

                     -0.5000     -1.000      1.764     -1.293      0.000    
                       0.000      9.185      9.154     -7039.     -4.000    
                     -0.5930    -0.6773      9.401      8.559     -4904.    

                      -4.000     0.1421    -0.5617      8.758      9.060    
                      -6912.     -4.000    -0.7006    -0.2884      10.08    
                       8.404     -3546.     -2.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.49
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       83
neval is:      440
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       84
neval is:      440


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      440     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.573743     -0.555573     -0.750412E-01  0.750412E-01   48.1335       48.2086    
   2  0.583943E-01  -2.84054     -0.383671      0.383671       48.5101       48.8937    
   3  0.377108     -0.975224     -0.131723      0.131723       48.5513       48.6830    
   4  0.117758      -2.13912     -0.288931      0.288931       48.4748       48.7637    
   5  0.531627     -0.631812     -0.853388E-01  0.853388E-01   48.7177       48.8030    
   6  0.348101      -1.05526     -0.142534      0.142534       48.5080       48.6506    
   7  0.713050     -0.338204     -0.456812E-01  0.456812E-01   48.8065       48.8522    
   8  0.895286     -0.110612     -0.149404E-01  0.149404E-01   48.7886       48.8035    
   9  0.873863     -0.134831     -0.182116E-01  0.182116E-01   48.8592       48.8774    
  10  0.225074      -1.49132     -0.201433      0.201433       48.8655       49.0669    
  11  0.542220     -0.612083     -0.826740E-01  0.826740E-01   48.9203       49.0030    
  12  0.262707      -1.33672     -0.180550      0.180550       48.8935       49.0740    
  13  0.864358E-01  -2.44835     -0.330699      0.330699       48.9551       49.2858    
  14  0.468331     -0.758581     -0.102461      0.102461       48.9287       49.0312    
  15  0.896509     -0.109247     -0.147560E-01  0.147560E-01   48.9945       49.0092    
  16  0.169842E-01  -4.07547     -0.550473      0.550473       49.1145       49.6650    
  17  0.980158     -0.200410E-01 -0.270694E-02  0.270694E-02   49.1315       49.1343    
  18  0.252821      -1.37507     -0.185731      0.185731       49.1295       49.3152    
  19  0.556823     -0.585507     -0.790844E-01  0.790844E-01   49.0560       49.1351    
  20  0.520304     -0.653342     -0.882468E-01  0.882468E-01   48.9557       49.0439    
  21  0.956705E-01  -2.34685     -0.316988      0.316988       49.1329       49.4498    
  22  0.458762     -0.779224     -0.105250      0.105250       49.1506       49.2559    
  23  0.684654     -0.378842     -0.511701E-01  0.511701E-01   48.7819       48.8331    
  24  0.749393     -0.288492     -0.389666E-01  0.389666E-01   48.8361       48.8751    
  25  0.112724      -2.18282     -0.294833      0.294833       49.1952       49.4901    
  26  0.642114     -0.442989     -0.598345E-01  0.598345E-01   49.1304       49.1903    
  27  0.881888     -0.125691     -0.169770E-01  0.169770E-01   49.2337       49.2507    
  28  0.933845     -0.684452E-01 -0.924488E-02  0.924488E-02   49.2843       49.2935    
  29  0.124482      -2.08359     -0.281431      0.281431       49.2823       49.5637    
  30  0.189487      -1.66344     -0.224680      0.224680       49.2443       49.4690    
  31  0.526869     -0.640804     -0.865534E-01  0.865534E-01   49.2925       49.3791    
  32  0.490162     -0.713020     -0.963076E-01  0.963076E-01   49.2532       49.3495    
  33  0.292049      -1.23083     -0.166249      0.166249       49.3057       49.4720    
  34  0.646685     -0.435896     -0.588764E-01  0.588764E-01   49.3015       49.3603    
  35  0.738289     -0.303420     -0.409829E-01  0.409829E-01   49.3915       49.4325    
  36  0.379268     -0.969513     -0.130952      0.130952       49.2694       49.4003    
  37  0.691037     -0.369562     -0.499167E-01  0.499167E-01   49.4664       49.5164    
  38  0.566288     -0.568653     -0.768079E-01  0.768079E-01   49.5256       49.6024    
  39  0.130734      -2.03459     -0.274812      0.274812       49.4594       49.7342    
  40  0.298876      -1.20773     -0.163127      0.163127       49.4030       49.5662    
  41  0.369194     -0.996434     -0.134588      0.134588       48.8115       48.9461    
  42  0.291325      -1.23331     -0.166584      0.166584       49.6103       49.7769    
  43  0.828296     -0.188384     -0.254451E-01  0.254451E-01   49.6268       49.6522    
  44  0.540492E-01  -2.91786     -0.394115      0.394115       49.4938       49.8879    
  45  0.979889     -0.203162E-01 -0.274411E-02  0.274411E-02   49.6610       49.6637    
  46  0.411533     -0.887866     -0.119924      0.119924       49.4762       49.5961    
  47  0.430635     -0.842495     -0.113796      0.113796       49.7751       49.8889    
  48  0.948338     -0.530447E-01 -0.716474E-02  0.716474E-02   49.6417       49.6488    
  49  0.400713E-02  -5.51968     -0.745542      0.745542       49.2768       50.0224    
  50  0.963092     -0.376065E-01 -0.507950E-02  0.507950E-02   49.4233       49.4284    
  51  0.101802      -2.28472     -0.308597      0.308597       49.9050       50.2136    
  52  0.161305      -1.82446     -0.246430      0.246430       48.4917       48.7381    
loop,thermsimp(1:2)       84  0.750412E-01  0.383671    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    442         49.00          1.19          1.02         24.20          0.00          0.06         26.48
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.00
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       84
neval is:      441
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       85
neval is:      441


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      441     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.936701     -0.653915E-01 -0.883242E-02  0.883242E-02   48.1335       48.1424    
   2  0.765516     -0.267206     -0.360914E-01  0.360914E-01   48.5080       48.5441    
   3  0.899266     -0.106176     -0.143412E-01  0.143412E-01   48.5513       48.5656    
   4  0.953341     -0.477822E-01 -0.645394E-02  0.645394E-02   48.4917       48.4981    
   5  0.642356     -0.442612     -0.597836E-01  0.597836E-01   48.4748       48.5346    
   6  0.265713      -1.32534     -0.179014      0.179014       48.7177       48.8967    
   7  0.379937     -0.967749     -0.130714      0.130714       48.7886       48.9193    
   8  0.449606     -0.799384     -0.107973      0.107973       48.7819       48.8899    
   9  0.810725     -0.209826     -0.283412E-01  0.283412E-01   48.8065       48.8349    
  10  0.218977      -1.51879     -0.205143      0.205143       48.8361       49.0413    
  11  0.456613     -0.783919     -0.105884      0.105884       48.8592       48.9651    
  12  0.439289E-02  -5.42777     -0.733128      0.733128       48.5101       49.2432    
  13  0.710409     -0.341914     -0.461823E-01  0.461823E-01   48.8115       48.8577    
  14  0.385315     -0.953695     -0.128816      0.128816       48.9203       49.0492    
  15  0.116701      -2.14814     -0.290150      0.290150       48.9945       49.2846    
  16  0.985237     -0.148728E-01 -0.200886E-02  0.200886E-02   48.9287       48.9307    
  17  0.856588     -0.154798     -0.209085E-01  0.209085E-01   48.9557       48.9766    
  18  0.155419      -1.86163     -0.251450      0.251450       48.8655       49.1169    
  19  0.257525      -1.35664     -0.183241      0.183241       48.8935       49.0767    
  20  0.548716     -0.600174     -0.810655E-01  0.810655E-01   49.1315       49.2126    
  21  0.589698     -0.528145     -0.713365E-01  0.713365E-01   49.0560       49.1274    
  22  0.884364     -0.122887     -0.165983E-01  0.165983E-01   49.1304       49.1470    
  23  0.871018E-01  -2.44068     -0.329662      0.329662       49.2337       49.5634    
  24  0.486795     -0.719912     -0.972385E-01  0.972385E-01   49.1506       49.2479    
  25  0.161417      -1.82376     -0.246336      0.246336       48.9551       49.2014    
  26  0.598774     -0.512871     -0.692734E-01  0.692734E-01   49.2843       49.3535    
  27  0.483527     -0.726647     -0.981482E-01  0.981482E-01   49.1295       49.2276    
  28  0.715961     -0.334130     -0.451309E-01  0.451309E-01   49.2532       49.2983    
  29  0.771801     -0.259029     -0.349870E-01  0.349870E-01   49.3015       49.3364    
  30  0.458713     -0.779330     -0.105264      0.105264       49.2925       49.3978    
  31  0.235181      -1.44740     -0.195500      0.195500       49.2694       49.4649    
  32  0.488220     -0.716988     -0.968436E-01  0.968436E-01   49.4233       49.5202    
  33  0.365473      -1.00656     -0.135956      0.135956       49.3915       49.5275    
  34  0.191311      -1.65386     -0.223386      0.223386       49.1329       49.3562    
  35  0.484999     -0.723609     -0.977378E-01  0.977378E-01   49.2443       49.3420    
  36  0.799086     -0.224286     -0.302943E-01  0.302943E-01   49.3057       49.3360    
  37  0.811458     -0.208923     -0.282192E-01  0.282192E-01   49.1952       49.2234    
  38  0.829885E-01  -2.48905     -0.336196      0.336196       49.4664       49.8026    
  39  0.731085     -0.313226     -0.423074E-01  0.423074E-01   49.2823       49.3246    
  40  0.854012     -0.157810     -0.213153E-01  0.213153E-01   49.4030       49.4244    
  41  0.699629     -0.357205     -0.482477E-01  0.482477E-01   49.4762       49.5244    
  42  0.918965     -0.845069E-01 -0.114143E-01  0.114143E-01   49.5256       49.5370    
  43  0.463498     -0.768952     -0.103862      0.103862       49.6417       49.7455    
  44  0.758690E-01  -2.57875     -0.348311      0.348311       49.6268       49.9751    
  45  0.577757     -0.548602     -0.740995E-01  0.740995E-01   49.6610       49.7351    
  46  0.897332     -0.108329     -0.146320E-01  0.146320E-01   49.1145       49.1292    
  47  0.522547     -0.649040     -0.876658E-01  0.876658E-01   49.4594       49.5470    
  48  0.408730E-01  -3.19729     -0.431857      0.431857       49.6103       50.0422    
  49  0.244793      -1.40734     -0.190089      0.190089       49.4938       49.6839    
  50  0.503867     -0.685443     -0.925827E-01  0.925827E-01   49.7751       49.8677    
  51  0.268075      -1.31649     -0.177818      0.177818       49.2768       49.4546    
  52  0.502965     -0.687236     -0.928248E-01  0.928248E-01   49.0032       49.0960    
loop,thermsimp(1:2)       85  0.883242E-02  0.360914E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    443         49.02          1.11          1.02         24.18          0.00          0.05         26.36
Just calling func    0   0         26.36


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       85
neval is:      442
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       86
neval is:      442


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      442     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.334399      -1.09542     -0.147958      0.147958       48.1335       48.2815    
   2  0.140144      -1.96508     -0.265424      0.265424       48.4917       48.7571    
   3  0.520913     -0.652172     -0.880888E-01  0.880888E-01   48.4748       48.5629    
   4  0.628337     -0.464678     -0.627641E-01  0.627641E-01   48.5080       48.5708    
   5  0.203324      -1.59296     -0.215160      0.215160       48.5513       48.7664    
   6  0.481205     -0.731462     -0.987985E-01  0.987985E-01   48.8065       48.9053    
   7  0.948759     -0.526009E-01 -0.710480E-02  0.710480E-02   48.8115       48.8186    
   8  0.251825      -1.37902     -0.186264      0.186264       48.7819       48.9681    
   9  0.363806      -1.01114     -0.136574      0.136574       48.7177       48.8542    
  10  0.465077     -0.765552     -0.103403      0.103403       48.7886       48.8920    
  11  0.580920     -0.543143     -0.733623E-01  0.733623E-01   48.9287       49.0021    
  12  0.957129     -0.438167E-01 -0.591831E-02  0.591831E-02   48.8592       48.8651    
  13  0.345007      -1.06419     -0.143740      0.143740       48.9557       49.0994    
  14  0.177852E-01  -4.02939     -0.544249      0.544249       48.8361       49.3804    
  15  0.843779     -0.169864     -0.229435E-01  0.229435E-01   48.9203       48.9433    
  16  0.765452     -0.267288     -0.361026E-01  0.361026E-01   48.8935       48.9296    
  17  0.453925     -0.789824     -0.106681      0.106681       49.0032       49.1099    
  18  0.378234     -0.972243     -0.131321      0.131321       48.8655       48.9968    
  19  0.167312      -1.78790     -0.241491      0.241491       49.0560       49.2975    
  20  0.240345      -1.42568     -0.192566      0.192566       49.1145       49.3071    
  21  0.868226     -0.141303     -0.190858E-01  0.190858E-01   49.1304       49.1495    
  22  0.907002     -0.976102E-01 -0.131842E-01  0.131842E-01   48.9551       48.9683    
  23  0.433040     -0.836925     -0.113043      0.113043       49.1315       49.2446    
  24  0.291080      -1.23416     -0.166697      0.166697       49.1952       49.3619    
  25  0.391091     -0.938815     -0.126806      0.126806       49.1295       49.2563    
  26  0.541803     -0.612853     -0.827780E-01  0.827780E-01   48.5101       48.5928    
  27  0.494251     -0.704711     -0.951853E-01  0.951853E-01   49.1506       49.2458    
  28  0.617376     -0.482277     -0.651411E-01  0.651411E-01   48.9945       49.0596    
  29  0.919515     -0.839094E-01 -0.113336E-01  0.113336E-01   49.2532       49.2645    
  30  0.836216     -0.178868     -0.241597E-01  0.241597E-01   49.2823       49.3064    
  31  0.436173     -0.829716     -0.112070      0.112070       49.3057       49.4178    
  32  0.175211      -1.74176     -0.235260      0.235260       49.3015       49.5367    
  33  0.304297      -1.18975     -0.160699      0.160699       49.2443       49.4050    
  34  0.996125     -0.388259E-02 -0.524421E-03  0.524421E-03   49.2843       49.2848    
  35  0.146253      -1.92242     -0.259661      0.259661       49.1329       49.3925    
  36  0.110666      -2.20124     -0.297321      0.297321       49.2925       49.5898    
  37  0.481190E-01  -3.03408     -0.409813      0.409813       49.4030       49.8129    
  38  0.342728      -1.07082     -0.144635      0.144635       49.2768       49.4215    
  39  0.998409E-01  -2.30418     -0.311225      0.311225       49.2694       49.5806    
  40  0.509248     -0.674821     -0.911480E-01  0.911480E-01   49.4233       49.5145    
  41  0.974159     -0.261804E-01 -0.353619E-02  0.353619E-02   49.4762       49.4797    
  42  0.950347     -0.509279E-01 -0.687883E-02  0.687883E-02   49.3915       49.3984    
  43  0.333494      -1.09813     -0.148324      0.148324       49.5256       49.6739    
  44  0.914660     -0.892024E-01 -0.120486E-01  0.120486E-01   49.4594       49.4714    
  45  0.249678      -1.38758     -0.187421      0.187421       49.2337       49.4212    
  46  0.512508     -0.668440     -0.902861E-01  0.902861E-01   49.4938       49.5841    
  47  0.592185     -0.523937     -0.707681E-01  0.707681E-01   49.6610       49.7317    
  48  0.931089     -0.714008E-01 -0.964410E-02  0.964410E-02   49.6417       49.6513    
  49  0.638700     -0.448321     -0.605546E-01  0.605546E-01   49.4664       49.5270    
  50  0.563786     -0.573081     -0.774060E-01  0.774060E-01   49.7751       49.8525    
  51  0.136824      -1.98906     -0.268662      0.268662       49.6268       49.8954    
  52  0.806361     -0.215224     -0.290702E-01  0.290702E-01   49.0200       49.0491    
loop,thermsimp(1:2)       86  0.147958      0.265424    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    444         48.86          1.16          1.03         24.18          0.01          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.86
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       86
neval is:      443
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       87
neval is:      443


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      443     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.447127E-01  -3.10750     -0.419730      0.419730       48.1335       48.5533    
   2  0.682805     -0.381545     -0.515353E-01  0.515353E-01   48.4748       48.5263    
   3  0.699780     -0.356989     -0.482185E-01  0.482185E-01   48.5080       48.5562    
   4  0.515086     -0.663422     -0.896083E-01  0.896083E-01   48.5101       48.5997    
   5  0.402461     -0.910157     -0.122935      0.122935       48.4917       48.6146    
   6  0.652803     -0.426480     -0.576047E-01  0.576047E-01   48.5513       48.6089    
   7  0.483213     -0.727297     -0.982360E-01  0.982360E-01   48.8115       48.9098    
   8  0.873684     -0.135037     -0.182394E-01  0.182394E-01   48.7177       48.7359    
   9  0.142648      -1.94738     -0.263032      0.263032       48.8592       49.1222    
  10  0.844357     -0.169180     -0.228512E-01  0.228512E-01   48.7886       48.8114    
  11  0.154187      -1.86959     -0.252525      0.252525       48.8065       49.0590    
  12  0.437314E-01  -3.12969     -0.422727      0.422727       48.8935       49.3162    
  13  0.455393E-02  -5.39176     -0.728265      0.728265       48.9203       49.6486    
  14  0.236800      -1.44054     -0.194574      0.194574       48.7819       48.9765    
  15  0.660181     -0.415241     -0.560866E-01  0.560866E-01   48.9551       49.0112    
  16  0.652586     -0.426813     -0.576495E-01  0.576495E-01   48.8655       48.9231    
  17  0.153101      -1.87666     -0.253480      0.253480       48.9287       49.1822    
  18  0.753412     -0.283143     -0.382440E-01  0.382440E-01   49.0200       49.0582    
  19  0.240839      -1.42363     -0.192289      0.192289       48.9945       49.1868    
  20  0.684622     -0.378888     -0.511764E-01  0.511764E-01   48.9557       49.0069    
  21  0.243018      -1.41462     -0.191073      0.191073       49.0032       49.1942    
  22  0.815539     -0.203906     -0.275416E-01  0.275416E-01   49.1304       49.1580    
  23  0.589355     -0.528726     -0.714150E-01  0.714150E-01   49.1315       49.2030    
  24  0.243009      -1.41466     -0.191078      0.191078       49.1506       49.3417    
  25  0.821886     -0.196154     -0.264945E-01  0.264945E-01   49.1295       49.1560    
  26  0.261401      -1.34170     -0.181223      0.181223       49.2532       49.4344    
  27  0.571134     -0.560131     -0.756569E-01  0.756569E-01   49.2843       49.3599    
  28  0.406429E-01  -3.20293     -0.432620      0.432620       49.0560       49.4887    
  29  0.341463      -1.07451     -0.145135      0.145135       49.2823       49.4274    
  30  0.252643      -1.37578     -0.185826      0.185826       49.1145       49.3004    
  31  0.503366     -0.686439     -0.927172E-01  0.927172E-01   49.1952       49.2879    
  32  0.247804      -1.39512     -0.188438      0.188438       48.8361       49.0246    
  33  0.902392     -0.102706     -0.138725E-01  0.138725E-01   49.1329       49.1467    
  34  0.198330E-01  -3.92041     -0.529529      0.529529       49.3915       49.9211    
  35  0.695627     -0.362942     -0.490225E-01  0.490225E-01   49.2443       49.2933    
  36  0.833441     -0.182192     -0.246087E-01  0.246087E-01   49.3057       49.3303    
  37  0.720954     -0.327181     -0.441922E-01  0.441922E-01   49.2337       49.2779    
  38  0.155604      -1.86044     -0.251290      0.251290       49.2768       49.5281    
  39  0.496580E-01  -3.00260     -0.405560      0.405560       49.4594       49.8649    
  40  0.804644     -0.217356     -0.293582E-01  0.293582E-01   49.4762       49.5056    
  41  0.329241      -1.11097     -0.150058      0.150058       49.4233       49.5734    
  42  0.889596     -0.116988     -0.158016E-01  0.158016E-01   49.4664       49.4822    
  43  0.857341     -0.153920     -0.207899E-01  0.207899E-01   49.3015       49.3222    
  44  0.238258      -1.43440     -0.193744      0.193744       49.2694       49.4631    
  45  0.998437     -0.156448E-02 -0.211314E-03  0.211314E-03   49.4938       49.4940    
  46  0.280889      -1.26979     -0.171511      0.171511       49.2925       49.4640    
  47  0.518450     -0.656912     -0.887291E-01  0.887291E-01   49.6417       49.7304    
  48  0.348786      -1.05330     -0.142269      0.142269       49.5256       49.6678    
  49  0.250207      -1.38547     -0.187135      0.187135       49.6610       49.8481    
  50  0.442136     -0.816138     -0.110236      0.110236       49.4030       49.5133    
  51  0.881002     -0.126696     -0.171128E-01  0.171128E-01   49.7751       49.7922    
  52  0.903963     -0.100967     -0.136376E-01  0.136376E-01   48.8603       48.8740    
loop,thermsimp(1:2)       87  0.419730      0.515353E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    445         49.18          0.99          0.98         23.85          0.47          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       87
neval is:      444
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       88
neval is:      444


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      444     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.471068     -0.752752     -0.101674      0.101674       48.4748       48.5765    
   2  0.531040     -0.632917     -0.854880E-01  0.854880E-01   48.1335       48.2190    
   3  0.592986E-01  -2.82517     -0.381595      0.381595       48.5080       48.8896    
   4  0.247694      -1.39556     -0.188499      0.188499       48.5101       48.6986    
   5  0.131832      -2.02623     -0.273682      0.273682       48.5513       48.8250    
   6  0.928797E-01  -2.37645     -0.320987      0.320987       48.4917       48.8127    
   7  0.638590     -0.448492     -0.605778E-01  0.605778E-01   48.7177       48.7782    
   8  0.220145      -1.51347     -0.204424      0.204424       48.7886       48.9930    
   9  0.764323     -0.268765     -0.363021E-01  0.363021E-01   48.8603       48.8966    
  10  0.223429      -1.49866     -0.202424      0.202424       48.8115       49.0140    
  11  0.705665     -0.348615     -0.470873E-01  0.470873E-01   48.8655       48.9126    
  12  0.812667     -0.207434     -0.280181E-01  0.280181E-01   48.7819       48.8099    
  13  0.344167      -1.06663     -0.144069      0.144069       48.9557       49.0998    
  14  0.691720     -0.368573     -0.497832E-01  0.497832E-01   48.9551       49.0049    
  15  0.601584     -0.508189     -0.686410E-01  0.686410E-01   48.8361       48.9048    
  16  0.323598      -1.12825     -0.152393      0.152393       49.0200       49.1724    
  17  0.536181     -0.623284     -0.841869E-01  0.841869E-01   48.8065       48.8907    
  18  0.224445      -1.49412     -0.201811      0.201811       48.8592       49.0610    
  19  0.967837     -0.326916E-01 -0.441564E-02  0.441564E-02   49.1329       49.1373    
  20  0.982234     -0.179257E-01 -0.242123E-02  0.242123E-02   49.1295       49.1319    
  21  0.656459     -0.420894     -0.568502E-01  0.568502E-01   49.1304       49.1873    
  22  0.138036      -1.98024     -0.267471      0.267471       48.9287       49.1962    
  23  0.698821     -0.358360     -0.484037E-01  0.484037E-01   48.9945       49.0429    
  24  0.603237     -0.505446     -0.682705E-01  0.682705E-01   49.0032       49.0714    
  25  0.253585      -1.37205     -0.185323      0.185323       49.1315       49.3169    
  26  0.404885     -0.904153     -0.122124      0.122124       49.2337       49.3559    
  27  0.802083     -0.220543     -0.297887E-01  0.297887E-01   49.1952       49.2250    
  28  0.756447     -0.279123     -0.377011E-01  0.377011E-01   49.2443       49.2820    
  29  0.390929     -0.939231     -0.126862      0.126862       49.1145       49.2414    
  30  0.260757      -1.34417     -0.181557      0.181557       48.8935       49.0750    
  31  0.177681      -1.72776     -0.233369      0.233369       49.3015       49.5348    
  32  0.806362     -0.215223     -0.290701E-01  0.290701E-01   49.3057       49.3348    
  33  0.222380      -1.50337     -0.203059      0.203059       49.1506       49.3537    
  34  0.969986     -0.304736E-01 -0.411607E-02  0.411607E-02   49.2843       49.2884    
  35  0.417166     -0.874272     -0.118088      0.118088       49.2823       49.4004    
  36  0.212672      -1.54800     -0.209089      0.209089       49.2532       49.4623    
  37  0.141187      -1.95767     -0.264422      0.264422       49.2694       49.5338    
  38  0.750343     -0.287224     -0.387953E-01  0.387953E-01   49.2925       49.3313    
  39  0.628172     -0.464941     -0.627995E-01  0.627995E-01   49.4664       49.5292    
  40  0.466629     -0.762221     -0.102953      0.102953       49.0560       49.1590    
  41  0.120425      -2.11672     -0.285906      0.285906       49.4938       49.7797    
  42  0.179567      -1.71721     -0.231943      0.231943       49.4762       49.7081    
  43  0.209268      -1.56414     -0.211268      0.211268       49.4030       49.6143    
  44  0.730304E-01  -2.61688     -0.353462      0.353462       49.2768       49.6303    
  45  0.985392     -0.147157E-01 -0.198765E-02  0.198765E-02   49.4233       49.4253    
  46  0.726759E-01  -2.62175     -0.354119      0.354119       48.9203       49.2745    
  47  0.205943      -1.58016     -0.213432      0.213432       49.5256       49.7390    
  48  0.198791      -1.61550     -0.218206      0.218206       49.6417       49.8599    
  49  0.320500      -1.13787     -0.153693      0.153693       49.7751       49.9288    
  50  0.911267     -0.929191E-01 -0.125506E-01  0.125506E-01   49.6610       49.6735    
  51  0.153842      -1.87183     -0.252828      0.252828       49.4594       49.7122    
  52  0.152265      -1.88213     -0.254219      0.254219       49.1824       49.4366    
loop,thermsimp(1:2)       88  0.101674      0.854880E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    446         48.45          0.95          0.99         24.06          0.34          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.45
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       88
neval is:      445
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       89
neval is:      445


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      445     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.350369      -1.04877     -0.141657      0.141657       48.1335       48.2752    
   2  0.650675     -0.429745     -0.580456E-01  0.580456E-01   48.4748       48.5328    
   3  0.849247     -0.163405     -0.220711E-01  0.220711E-01   48.5101       48.5321    
   4  0.910703     -0.935381E-01 -0.126342E-01  0.126342E-01   48.7177       48.7303    
   5  0.188892      -1.66658     -0.225104      0.225104       48.7819       49.0070    
   6  0.256564      -1.36038     -0.183746      0.183746       48.4917       48.6754    
   7  0.465488E-01  -3.06725     -0.414294      0.414294       48.5513       48.9656    
   8  0.824855     -0.192548     -0.260075E-01  0.260075E-01   48.5080       48.5340    
   9  0.730565     -0.313937     -0.424034E-01  0.424034E-01   48.8065       48.8489    
  10  0.888077     -0.118697     -0.160324E-01  0.160324E-01   48.8603       48.8764    
  11  0.898172     -0.107394     -0.145057E-01  0.145057E-01   48.8361       48.8507    
  12  0.314974      -1.15527     -0.156042      0.156042       48.8655       49.0215    
  13  0.247979      -1.39441     -0.188343      0.188343       48.7886       48.9769    
  14  0.330032E-01  -3.41115     -0.460744      0.460744       48.9551       49.4158    
  15  0.570783E-01  -2.86333     -0.386750      0.386750       48.8115       49.1983    
  16  0.694187     -0.365014     -0.493023E-01  0.493023E-01   48.9945       49.0438    
  17  0.314834      -1.15571     -0.156101      0.156101       48.8592       49.0153    
  18  0.917621     -0.859711E-01 -0.116121E-01  0.116121E-01   49.0032       49.0148    
  19  0.613858     -0.487991     -0.659129E-01  0.659129E-01   48.8935       48.9594    
  20  0.744084E-01  -2.59819     -0.350937      0.350937       48.9557       49.3066    
  21  0.454198     -0.789221     -0.106600      0.106600       49.1295       49.2361    
  22  0.118203E-01  -4.43793     -0.599431      0.599431       49.1329       49.7323    
  23  0.746996     -0.291695     -0.393992E-01  0.393992E-01   49.0560       49.0954    
  24  0.416160     -0.876686     -0.118414      0.118414       49.0200       49.1384    
  25  0.339178E-01  -3.38381     -0.457051      0.457051       49.1304       49.5875    
  26  0.824080     -0.193487     -0.261343E-01  0.261343E-01   48.9287       48.9548    
  27  0.589652     -0.528223     -0.713470E-01  0.713470E-01   49.1952       49.2666    
  28  0.680293     -0.385231     -0.520331E-01  0.520331E-01   49.1145       49.1666    
  29  0.864872E-01  -2.44776     -0.330619      0.330619       48.9203       49.2510    
  30  0.672988     -0.396027     -0.534914E-01  0.534914E-01   49.2443       49.2978    
  31  0.797049E-01  -2.52942     -0.341649      0.341649       49.2843       49.6259    
  32  0.831708     -0.184273     -0.248898E-01  0.248898E-01   49.1315       49.1564    
  33  0.280253E-01  -3.57465     -0.482827      0.482827       49.2925       49.7753    
  34  0.131717      -2.02710     -0.273800      0.273800       49.3057       49.5795    
  35  0.343675      -1.06806     -0.144263      0.144263       49.1506       49.2949    
  36  0.280745      -1.27031     -0.171581      0.171581       49.2337       49.4053    
  37  0.322275      -1.13235     -0.152946      0.152946       49.2823       49.4352    
  38  0.769830E-01  -2.56417     -0.346342      0.346342       49.4233       49.7697    
  39  0.851798     -0.160406     -0.216660E-01  0.216660E-01   49.1824       49.2041    
  40  0.864683     -0.145392     -0.196381E-01  0.196381E-01   49.2532       49.2728    
  41  0.157880      -1.84592     -0.249328      0.249328       49.4664       49.7158    
  42  0.371895     -0.989143     -0.133603      0.133603       49.2694       49.4030    
  43  0.861425     -0.149167     -0.201480E-01  0.201480E-01   49.3015       49.3216    
  44  0.778275E-01  -2.55326     -0.344869      0.344869       49.4030       49.7479    
  45  0.450106     -0.798272     -0.107823      0.107823       49.2768       49.3846    
  46  0.188928      -1.66639     -0.225079      0.225079       49.6610       49.8860    
  47  0.225391      -1.48992     -0.201243      0.201243       49.4762       49.6774    
  48  0.814689     -0.204949     -0.276824E-01  0.276824E-01   49.4594       49.4870    
  49  0.556109     -0.586791     -0.792577E-01  0.792577E-01   49.5256       49.6048    
  50  0.860351     -0.150415     -0.203166E-01  0.203166E-01   49.4938       49.5141    
  51  0.124594      -2.08269     -0.281309      0.281309       49.6417       49.9230    
  52  0.924630     -0.783615E-01 -0.105843E-01  0.105843E-01   48.4529       48.4635    
loop,thermsimp(1:2)       89  0.141657      0.580456E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    447         49.22          1.20          1.03         24.13          0.09          0.05         26.52
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.22
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       89
neval is:      446
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       90
neval is:      446


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      446     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.131617      -2.02786     -0.273902      0.273902       48.1335       48.4074    
   2  0.314760      -1.15594     -0.156133      0.156133       48.4529       48.6090    
   3  0.748375     -0.289851     -0.391501E-01  0.391501E-01   48.5101       48.5492    
   4  0.632472     -0.458119     -0.618780E-01  0.618780E-01   48.4748       48.5367    
   5  0.677472     -0.389387     -0.525944E-01  0.525944E-01   48.5080       48.5606    
   6  0.433475     -0.835921     -0.112908      0.112908       48.4917       48.6046    
   7  0.458976     -0.778758     -0.105187      0.105187       48.7177       48.8228    
   8  0.411427E-02  -5.49329     -0.741979      0.741979       48.8065       49.5485    
   9  0.904989     -0.998322E-01 -0.134843E-01  0.134843E-01   48.8361       48.8496    
  10  0.480311     -0.733322     -0.990497E-01  0.990497E-01   48.8603       48.9594    
  11  0.277870      -1.28060     -0.172971      0.172971       48.9287       49.1017    
  12  0.958372     -0.425196E-01 -0.574312E-02  0.574312E-02   48.8935       48.8992    
  13  0.321639      -1.13432     -0.153213      0.153213       48.5513       48.7045    
  14  0.562333     -0.575660     -0.777544E-01  0.777544E-01   48.7886       48.8663    
  15  0.665565     -0.407119     -0.549895E-01  0.549895E-01   48.7819       48.8369    
  16  0.307614      -1.17891     -0.159235      0.159235       49.0032       49.1624    
  17  0.504790E-01  -2.98620     -0.403345      0.403345       48.8592       49.2625    
  18  0.361959      -1.01622     -0.137261      0.137261       48.8655       49.0027    
  19  0.470787     -0.753350     -0.101755      0.101755       48.9945       49.0962    
  20  0.312221      -1.16404     -0.157227      0.157227       49.0560       49.2133    
  21  0.156792      -1.85283     -0.250262      0.250262       49.0200       49.2703    
  22  0.445216     -0.809196     -0.109298      0.109298       49.1315       49.2408    
  23  0.999492     -0.508321E-03 -0.686589E-04  0.686589E-04   49.1145       49.1146    
  24  0.167067      -1.78936     -0.241689      0.241689       48.8115       49.0532    
  25  0.435083     -0.832219     -0.112408      0.112408       49.1824       49.2948    
  26  0.110403      -2.20362     -0.297642      0.297642       49.1295       49.4271    
  27  0.704194     -0.350701     -0.473692E-01  0.473692E-01   48.9203       48.9677    
  28  0.767816     -0.264205     -0.356862E-01  0.356862E-01   49.1952       49.2309    
  29  0.231293      -1.46407     -0.197752      0.197752       49.2532       49.4509    
  30  0.965513     -0.350953E-01 -0.474032E-02  0.474032E-02   49.1506       49.1554    
  31  0.674440     -0.393873     -0.532003E-01  0.532003E-01   49.2443       49.2975    
  32  0.248626      -1.39181     -0.187991      0.187991       48.9557       49.1437    
  33  0.461218     -0.773884     -0.104528      0.104528       49.3015       49.4060    
  34  0.778910     -0.249859     -0.337485E-01  0.337485E-01   49.2768       49.3106    
  35  0.665530     -0.407172     -0.549967E-01  0.549967E-01   49.2694       49.3244    
  36  0.383296     -0.958947     -0.129525      0.129525       49.2337       49.3633    
  37  0.492311     -0.708645     -0.957166E-01  0.957166E-01   48.9551       49.0508    
  38  0.631911     -0.459006     -0.619980E-01  0.619980E-01   49.2823       49.3443    
  39  0.150454E-01  -4.19668     -0.566846      0.566846       49.4594       50.0262    
  40  0.958677     -0.422006E-01 -0.570003E-02  0.570003E-02   49.4938       49.4995    
  41  0.411899     -0.886977     -0.119804      0.119804       49.3057       49.4255    
  42  0.466999     -0.761428     -0.102846      0.102846       49.1304       49.2333    
  43  0.622674     -0.473731     -0.639868E-01  0.639868E-01   49.5256       49.5896    
  44  0.497710     -0.697737     -0.942433E-01  0.942433E-01   49.2843       49.3785    
  45  0.763352E-01  -2.57262     -0.347484      0.347484       49.4762       49.8237    
  46  0.192360      -1.64839     -0.222647      0.222647       49.4664       49.6891    
  47  0.444368     -0.811101     -0.109555      0.109555       49.1329       49.2424    
  48  0.617268     -0.482452     -0.651648E-01  0.651648E-01   49.4030       49.4682    
  49  0.898554     -0.106968     -0.144482E-01  0.144482E-01   49.4233       49.4378    
  50  0.382850     -0.960111     -0.129682      0.129682       49.2925       49.4222    
  51  0.769319     -0.262250     -0.354220E-01  0.354220E-01   49.6610       49.6964    
  52  0.356805      -1.03057     -0.139199      0.139199       49.2153       49.3545    
loop,thermsimp(1:2)       90  0.273902      0.156133    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    448         48.77          0.98          0.99         23.99          0.35          0.05         26.37
Just calling func    0   0         26.37


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.77
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       90
neval is:      447
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       91
neval is:      447


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      447     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.920377     -0.829717E-01 -0.112070E-01  0.112070E-01   48.1335       48.1447    
   2  0.393393     -0.932946     -0.126013      0.126013       48.4748       48.6008    
   3  0.317218      -1.14817     -0.155083      0.155083       48.5101       48.6651    
   4  0.324247      -1.12625     -0.152122      0.152122       48.5080       48.6601    
   5  0.515746E-01  -2.96473     -0.400445      0.400445       48.4917       48.8921    
   6  0.143224      -1.94335     -0.262487      0.262487       48.4529       48.7154    
   7  0.512136     -0.669164     -0.903839E-01  0.903839E-01   48.5513       48.6417    
   8  0.993896     -0.612239E-02 -0.826951E-03  0.826951E-03   48.7177       48.7185    
   9  0.440900     -0.818937     -0.110614      0.110614       48.7819       48.8925    
  10  0.861233     -0.149390     -0.201781E-01  0.201781E-01   48.8361       48.8563    
  11  0.690005     -0.371056     -0.501186E-01  0.501186E-01   48.7886       48.8387    
  12  0.192792      -1.64614     -0.222344      0.222344       48.8935       49.1158    
  13  0.975175     -0.251388E-01 -0.339549E-02  0.339549E-02   48.8603       48.8637    
  14  0.595327E-01  -2.82123     -0.381063      0.381063       48.9203       49.3014    
  15  0.142661      -1.94729     -0.263020      0.263020       48.8655       49.1285    
  16  0.141610      -1.95468     -0.264018      0.264018       48.9551       49.2191    
  17  0.976591     -0.236872E-01 -0.319943E-02  0.319943E-02   48.8115       48.8147    
  18  0.894748     -0.111213     -0.150216E-01  0.150216E-01   48.9945       49.0095    
  19  0.747310     -0.291275     -0.393425E-01  0.393425E-01   48.9287       48.9680    
  20  0.434887     -0.832670     -0.112469      0.112469       49.1145       49.2270    
  21  0.673581     -0.395146     -0.533724E-01  0.533724E-01   48.9557       49.0091    
  22  0.624944     -0.470094     -0.634956E-01  0.634956E-01   49.1506       49.2141    
  23  0.617967     -0.481321     -0.650120E-01  0.650120E-01   49.0032       49.0682    
  24  0.659853     -0.415739     -0.561538E-01  0.561538E-01   49.0560       49.1122    
  25  0.963159E-01  -2.34012     -0.316080      0.316080       49.1952       49.5113    
  26  0.179190      -1.71931     -0.232227      0.232227       49.1304       49.3627    
  27  0.251042      -1.38213     -0.186685      0.186685       49.1315       49.3182    
  28  0.116711      -2.14806     -0.290138      0.290138       49.1329       49.4230    
  29  0.890376     -0.116112     -0.156832E-01  0.156832E-01   48.8592       48.8749    
  30  0.880065E-02  -4.73293     -0.639276      0.639276       49.0200       49.6593    
  31  0.613810     -0.488070     -0.659236E-01  0.659236E-01   49.1824       49.2483    
  32  0.960436E-01  -2.34295     -0.316462      0.316462       49.2443       49.5608    
  33  0.768907E-02  -4.86796     -0.657514      0.657514       49.2768       49.9343    
  34  0.316163      -1.15150     -0.155532      0.155532       49.2694       49.4249    
  35  0.195769      -1.63082     -0.220274      0.220274       49.2823       49.5026    
  36  0.813020     -0.207000     -0.279594E-01  0.279594E-01   49.2153       49.2433    
  37  0.578245     -0.547758     -0.739857E-01  0.739857E-01   49.2337       49.3077    
  38  0.711511     -0.340365     -0.459730E-01  0.459730E-01   49.2843       49.3302    
  39  0.565886     -0.569362     -0.769036E-01  0.769036E-01   49.3015       49.3784    
  40  0.874556     -0.134039     -0.181046E-01  0.181046E-01   49.2925       49.3106    
  41  0.335685      -1.09158     -0.147440      0.147440       49.3057       49.4532    
  42  0.861776     -0.148759     -0.200929E-01  0.200929E-01   49.1295       49.1496    
  43  0.634500     -0.454918     -0.614458E-01  0.614458E-01   49.4233       49.4848    
  44  0.211879      -1.55174     -0.209593      0.209593       49.2532       49.4628    
  45  0.789454     -0.236414     -0.319325E-01  0.319325E-01   49.4030       49.4350    
  46  0.726316E-01  -2.62235     -0.354201      0.354201       49.4938       49.8480    
  47  0.344022      -1.06705     -0.144126      0.144126       48.8065       48.9506    
  48  0.367544      -1.00091     -0.135193      0.135193       49.5256       49.6608    
  49  0.634223     -0.455355     -0.615047E-01  0.615047E-01   49.4664       49.5279    
  50  0.462643     -0.770799     -0.104112      0.104112       49.6610       49.7651    
  51  0.904061     -0.100859     -0.136230E-01  0.136230E-01   49.4762       49.4898    
  52  0.183754      -1.69416     -0.228830      0.228830       48.7744       49.0033    
loop,thermsimp(1:2)       91  0.112070E-01  0.126013    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    449         48.54          1.02          0.99         23.79          0.60          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.54
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       91
neval is:      448
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       92
neval is:      448


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      448     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.313932      -1.15858     -0.156489      0.156489       48.1335       48.2900    
   2  0.484866     -0.723883     -0.977747E-01  0.977747E-01   48.4748       48.5726    
   3  0.743257     -0.296713     -0.400770E-01  0.400770E-01   48.5513       48.5914    
   4  0.476659     -0.740953     -0.100080      0.100080       48.5080       48.6081    
   5  0.895662E-01  -2.41278     -0.325894      0.325894       48.5101       48.8359    
   6  0.100541      -2.29719     -0.310281      0.310281       48.4529       48.7632    
   7  0.394309     -0.930621     -0.125699      0.125699       48.7177       48.8434    
   8  0.856201     -0.155250     -0.209696E-01  0.209696E-01   48.8115       48.8325    
   9  0.903325     -0.101673     -0.137330E-01  0.137330E-01   48.7886       48.8023    
  10  0.849389     -0.163238     -0.220485E-01  0.220485E-01   48.8361       48.8582    
  11  0.245876      -1.40293     -0.189494      0.189494       48.8603       49.0498    
  12  0.535664     -0.624247     -0.843170E-01  0.843170E-01   48.8592       48.9435    
  13  0.509317     -0.674685     -0.911296E-01  0.911296E-01   48.4917       48.5828    
  14  0.103141      -2.27166     -0.306833      0.306833       48.7819       49.0887    
  15  0.822327     -0.195617     -0.264219E-01  0.264219E-01   48.8065       48.8329    
  16  0.293454      -1.22603     -0.165600      0.165600       48.9287       49.0943    
  17  0.610098E-01  -2.79672     -0.377753      0.377753       48.7744       49.1522    
  18  0.467864E-01  -3.06216     -0.413606      0.413606       48.9557       49.3693    
  19  0.888641     -0.118062     -0.159466E-01  0.159466E-01   48.9945       49.0104    
  20  0.371769     -0.989482     -0.133649      0.133649       49.0032       49.1368    
  21  0.770202     -0.261103     -0.352671E-01  0.352671E-01   49.0560       49.0913    
  22  0.752967E-01  -2.58632     -0.349334      0.349334       48.8935       49.2428    
  23  0.787365E-01  -2.54165     -0.343300      0.343300       48.8655       49.2088    
  24  0.516026     -0.661597     -0.893619E-01  0.893619E-01   49.1295       49.2188    
  25  0.133613      -2.01281     -0.271870      0.271870       49.1506       49.4225    
  26  0.705575     -0.348742     -0.471046E-01  0.471046E-01   48.9551       49.0022    
  27  0.747326     -0.291254     -0.393397E-01  0.393397E-01   49.1145       49.1539    
  28  0.941066E-01  -2.36333     -0.319214      0.319214       49.2153       49.5345    
  29  0.243001      -1.41469     -0.191082      0.191082       49.1824       49.3735    
  30  0.186020      -1.68190     -0.227174      0.227174       48.9203       49.1475    
  31  0.707073     -0.346621     -0.468181E-01  0.468181E-01   49.2337       49.2806    
  32  0.820399     -0.197964     -0.267390E-01  0.267390E-01   49.2925       49.3192    
  33  0.169787E-01  -4.07580     -0.550517      0.550517       49.1315       49.6821    
  34  0.196118      -1.62904     -0.220034      0.220034       49.2843       49.5043    
  35  0.910420E-01  -2.39643     -0.323686      0.323686       49.1304       49.4541    
  36  0.101963      -2.28314     -0.308384      0.308384       49.3015       49.6098    
  37  0.816143     -0.203166     -0.274415E-01  0.274415E-01   49.1329       49.1603    
  38  0.921931     -0.812847E-01 -0.109791E-01  0.109791E-01   49.2694       49.2803    
  39  0.867385     -0.142273     -0.192168E-01  0.192168E-01   49.4030       49.4223    
  40  0.534867     -0.625737     -0.845183E-01  0.845183E-01   49.3057       49.3902    
  41  0.354961      -1.03575     -0.139898      0.139898       49.2532       49.3931    
  42  0.707205     -0.346435     -0.467930E-01  0.467930E-01   49.4233       49.4701    
  43  0.341296      -1.07501     -0.145201      0.145201       49.4762       49.6214    
  44  0.615332     -0.485594     -0.655891E-01  0.655891E-01   49.2823       49.3479    
  45  0.100325      -2.29934     -0.310571      0.310571       49.1952       49.5058    
  46  0.218012      -1.52321     -0.205739      0.205739       49.4664       49.6722    
  47  0.346044      -1.06119     -0.143335      0.143335       49.2443       49.3876    
  48  0.313706      -1.15930     -0.156586      0.156586       49.0200       49.1766    
  49  0.884226     -0.123043     -0.166194E-01  0.166194E-01   49.5256       49.5422    
  50  0.562231     -0.575842     -0.777789E-01  0.777789E-01   49.6610       49.7387    
  51  0.208749      -1.56662     -0.211603      0.211603       49.4938       49.7054    
  52  0.553752     -0.591038     -0.798315E-01  0.798315E-01   48.5422       48.6220    
loop,thermsimp(1:2)       92  0.156489      0.977747E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    450         49.08          1.00          0.98         23.87          0.48          0.05         26.39
Just calling func    0   0         26.39


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.08
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       92
neval is:      449
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       93
neval is:      449


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      449     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.642285E-02  -5.04789     -0.681818      0.681818       48.1335       48.8153    
   2  0.977343     -0.229176E-01 -0.309548E-02  0.309548E-02   48.4748       48.4779    
   3  0.515611     -0.662402     -0.894706E-01  0.894706E-01   48.4917       48.5812    
   4  0.985018     -0.150949E-01 -0.203887E-02  0.203887E-02   48.5513       48.5533    
   5  0.909744E-01  -2.39718     -0.323787      0.323787       48.5080       48.8318    
   6  0.163485      -1.81103     -0.244616      0.244616       48.5422       48.7868    
   7  0.709610     -0.343039     -0.463343E-01  0.463343E-01   48.4529       48.4992    
   8  0.639309     -0.447368     -0.604259E-01  0.604259E-01   48.7886       48.8490    
   9  0.500633     -0.691882     -0.934525E-01  0.934525E-01   48.8115       48.9050    
  10  0.623218     -0.472859     -0.638691E-01  0.638691E-01   48.8065       48.8704    
  11  0.974620     -0.257075E-01 -0.347231E-02  0.347231E-02   48.5101       48.5135    
  12  0.940866     -0.609540E-01 -0.823306E-02  0.823306E-02   48.7177       48.7259    
  13  0.268848      -1.31361     -0.177429      0.177429       48.8361       49.0136    
  14  0.131404      -2.02948     -0.274121      0.274121       48.8592       49.1333    
  15  0.242045      -1.41863     -0.191615      0.191615       48.9551       49.1467    
  16  0.333489      -1.09815     -0.148326      0.148326       48.9945       49.1428    
  17  0.540917     -0.614489     -0.829990E-01  0.829990E-01   48.8603       48.9433    
  18  0.935945     -0.661981E-01 -0.894138E-02  0.894138E-02   48.7819       48.7908    
  19  0.948265     -0.531218E-01 -0.717515E-02  0.717515E-02   49.0560       49.0632    
  20  0.306672      -1.18198     -0.159650      0.159650       48.9287       49.0883    
  21  0.674766E-01  -2.69597     -0.364145      0.364145       49.0032       49.3673    
  22  0.304885      -1.18782     -0.160439      0.160439       48.9203       49.0808    
  23  0.987276     -0.128055E-01 -0.172963E-02  0.172963E-02   48.7744       48.7762    
  24  0.866309     -0.143514     -0.193844E-01  0.193844E-01   49.1145       49.1339    
  25  0.325072      -1.12371     -0.151779      0.151779       49.1329       49.2846    
  26  0.882651     -0.124826     -0.168602E-01  0.168602E-01   49.0200       49.0368    
  27  0.608994E-02  -5.10112     -0.689007      0.689007       48.8655       49.5545    
  28  0.956776     -0.441859E-01 -0.596818E-02  0.596818E-02   49.1295       49.1355    
  29  0.680690E-01  -2.68723     -0.362964      0.362964       48.8935       49.2564    
  30  0.870194     -0.139039     -0.187800E-01  0.187800E-01   49.2694       49.2881    
  31  0.154954      -1.86463     -0.251855      0.251855       49.2337       49.4856    
  32  0.533144     -0.628963     -0.849540E-01  0.849540E-01   49.2925       49.3775    
  33  0.848128     -0.164724     -0.222492E-01  0.222492E-01   49.2823       49.3045    
  34  0.302343E-01  -3.49878     -0.472580      0.472580       48.9557       49.4283    
  35  0.670768     -0.399332     -0.539377E-01  0.539377E-01   49.1824       49.2363    
  36  0.575709     -0.552152     -0.745792E-01  0.745792E-01   49.2443       49.3189    
  37  0.961243     -0.395278E-01 -0.533902E-02  0.533902E-02   49.3057       49.3111    
  38  0.174287      -1.74705     -0.235974      0.235974       49.2532       49.4891    
  39  0.450902     -0.796506     -0.107584      0.107584       49.4030       49.5106    
  40  0.807155     -0.214240     -0.289374E-01  0.289374E-01   49.1506       49.1796    
  41  0.245094E-01  -3.70870     -0.500933      0.500933       49.1304       49.6314    
  42  0.840819     -0.173379     -0.234182E-01  0.234182E-01   49.4233       49.4468    
  43  0.418157     -0.871899     -0.117767      0.117767       49.2843       49.4020    
  44  0.795491     -0.228796     -0.309034E-01  0.309034E-01   49.1952       49.2261    
  45  0.675445E-01  -2.69497     -0.364009      0.364009       49.2153       49.5793    
  46  0.158617      -1.84126     -0.248699      0.248699       49.5256       49.7743    
  47  0.538475     -0.619015     -0.836102E-01  0.836102E-01   49.3015       49.3851    
  48  0.318292      -1.14479     -0.154626      0.154626       49.4762       49.6308    
  49  0.427160     -0.850596     -0.114890      0.114890       49.4664       49.5813    
  50  0.485422     -0.722737     -0.976200E-01  0.976200E-01   49.1315       49.2292    
  51  0.603579     -0.504879     -0.681940E-01  0.681940E-01   49.4938       49.5620    
  52  0.151674      -1.88602     -0.254745      0.254745       49.0760       49.3307    
loop,thermsimp(1:2)       93  0.681818      0.309548E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    451         48.76          0.98          0.99         23.81          0.54          0.05         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     48.76
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       93
neval is:      450
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       94
neval is:      450


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      450     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415683     -0.877831     -0.118569      0.118569       48.4748       48.5934    
   2  0.262668E-01  -3.63945     -0.491580      0.491580       48.4529       48.9445    
   3  0.620248     -0.477636     -0.645143E-01  0.645143E-01   48.5101       48.5746    
   4  0.249183      -1.38957     -0.187689      0.187689       48.5513       48.7390    
   5  0.999872     -0.128438E-03 -0.173481E-04  0.173481E-04   48.4917       48.4917    
   6  0.933252     -0.690802E-01 -0.933065E-02  0.933065E-02   48.7177       48.7270    
   7  0.857047     -0.154263     -0.208363E-01  0.208363E-01   48.7744       48.7953    
   8  0.365787      -1.00570     -0.135840      0.135840       48.5422       48.6780    
   9  0.499682     -0.693784     -0.937094E-01  0.937094E-01   48.7819       48.8756    
  10  0.761560     -0.272387     -0.367912E-01  0.367912E-01   48.1335       48.1703    
  11  0.793904E-01  -2.53338     -0.342183      0.342183       48.5080       48.8502    
  12  0.514449     -0.664659     -0.897754E-01  0.897754E-01   48.7886       48.8783    
  13  0.678176     -0.388349     -0.524543E-01  0.524543E-01   48.8065       48.8590    
  14  0.257558      -1.35651     -0.183224      0.183224       48.8115       48.9948    
  15  0.832067E-01  -2.48643     -0.335841      0.335841       48.8603       49.1962    
  16  0.272851      -1.29883     -0.175433      0.175433       48.8361       49.0116    
  17  0.255245      -1.36553     -0.184442      0.184442       49.0200       49.2044    
  18  0.419883     -0.867779     -0.117211      0.117211       49.0560       49.1732    
  19  0.870346     -0.138865     -0.187565E-01  0.187565E-01   48.9203       48.9391    
  20  0.814510E-01  -2.50775     -0.338722      0.338722       48.9287       49.2674    
  21  0.560000     -0.579819     -0.783161E-01  0.783161E-01   48.8592       48.9375    
  22  0.860285     -0.150492     -0.203269E-01  0.203269E-01   49.1145       49.1349    
  23  0.538601     -0.618780     -0.835786E-01  0.835786E-01   49.1295       49.2131    
  24  0.542321     -0.611898     -0.826490E-01  0.826490E-01   48.9945       49.0771    
  25  0.836575     -0.178440     -0.241018E-01  0.241018E-01   48.9551       48.9792    
  26  0.705694     -0.348574     -0.470819E-01  0.470819E-01   49.1506       49.1977    
  27  0.301063      -1.20043     -0.162143      0.162143       49.1952       49.3574    
  28  0.125899      -2.07227     -0.279902      0.279902       49.1315       49.4114    
  29  0.476747     -0.740770     -0.100056      0.100056       49.1824       49.2825    
  30  0.676103     -0.391410     -0.528677E-01  0.528677E-01   48.8935       48.9463    
  31  0.385349     -0.953606     -0.128803      0.128803       49.1329       49.2617    
  32  0.141470      -1.95567     -0.264152      0.264152       49.2694       49.5335    
  33  0.146971      -1.91752     -0.258999      0.258999       49.2823       49.5413    
  34  0.616396     -0.483866     -0.653557E-01  0.653557E-01   49.3057       49.3711    
  35  0.962361     -0.383659E-01 -0.518208E-02  0.518208E-02   49.2443       49.2495    
  36  0.618266     -0.480836     -0.649465E-01  0.649465E-01   49.0760       49.1409    
  37  0.369072     -0.996763     -0.134633      0.134633       49.0032       49.1378    
  38  0.312675      -1.16259     -0.157031      0.157031       49.2925       49.4495    
  39  0.367326      -1.00150     -0.135273      0.135273       49.3015       49.4367    
  40  0.184422      -1.69053     -0.228340      0.228340       49.2843       49.5126    
  41  0.113088      -2.17959     -0.294397      0.294397       48.9557       49.2501    
  42  0.333487      -1.09815     -0.148327      0.148327       49.4233       49.5717    
  43  0.407562     -0.897562     -0.121234      0.121234       49.2337       49.3550    
  44  0.443434     -0.813206     -0.109840      0.109840       49.2532       49.3630    
  45  0.265046      -1.32785     -0.179353      0.179353       49.4030       49.5824    
  46  0.444603     -0.810573     -0.109484      0.109484       48.8655       48.9750    
  47  0.689395E-01  -2.67453     -0.361248      0.361248       49.4938       49.8551    
  48  0.862417     -0.148017     -0.199926E-01  0.199926E-01   49.2153       49.2353    
  49  0.541063     -0.614219     -0.829625E-01  0.829625E-01   49.4664       49.5494    
  50  0.885208     -0.121933     -0.164694E-01  0.164694E-01   49.4762       49.4927    
  51  0.808718     -0.212305     -0.286760E-01  0.286760E-01   49.1304       49.1591    
  52  0.238877E-01  -3.73439     -0.504404      0.504404       48.7577       49.2621    
loop,thermsimp(1:2)       94  0.118569      0.491580    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    452         49.03          1.20          1.03         24.03          0.05          0.05         26.38
Just calling func    0   0         26.38


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2     49.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.135070               460
loop is:       94
neval is:      451
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    17.2889      0.500000    
T0,tstep,tfreq (these do not change):             51
current SAtemp,tstepnext are:   0.135070               460
loop is:       95
neval is:      451


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      460
neval,tstepnext:      451     460

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.292887      -1.22797     -0.165862      0.165862       48.1335       48.2994    
   2  0.225242      -1.49058     -0.201332      0.201332       48.4917       48.6930    
   3  0.946430E-01  -2.35764     -0.318447      0.318447       48.5101       48.8285    
   4  0.371694     -0.989684     -0.133676      0.133676       48.4748       48.6085    
   5  0.933291     -0.690381E-01 -0.932497E-02  0.932497E-02   48.5422       48.5515    
   6  0.926571     -0.762651E-01 -0.103011E-01  0.103011E-01   48.7177       48.7280    
   7  0.138048      -1.98015     -0.267459      0.267459       48.5513       48.8187    
   8  0.113008E-01  -4.48288     -0.605503      0.605503       48.7744       49.3800    
   9  0.405736     -0.902053     -0.121840      0.121840       48.5080       48.6299    
  10  0.390885     -0.939341     -0.126877      0.126877       48.8065       48.9334    
  11  0.873008     -0.135810     -0.183439E-01  0.183439E-01   48.7819       48.8002    
  12  0.945037     -0.565316E-01 -0.763571E-02  0.763571E-02   48.7886       48.7962    
  13  0.642194E-01  -2.74545     -0.370828      0.370828       48.8592       49.2300    
  14  0.322052E-01  -3.43563     -0.464050      0.464050       48.9203       49.3844    
  15  0.521559     -0.650933     -0.879214E-01  0.879214E-01   48.4529       48.5408    
  16  0.271788      -1.30273     -0.175960      0.175960       48.8935       49.0694    
  17  0.153503      -1.87403     -0.253126      0.253126       48.8655       49.1186    
  18  0.219303      -1.51730     -0.204942      0.204942       48.9551       49.1600    
  19  0.476616     -0.741044     -0.100093      0.100093       48.8115       48.9116    
  20  0.510024     -0.673297     -0.909421E-01  0.909421E-01   48.8361       48.9271    
  21  0.393388     -0.932959     -0.126015      0.126015       48.9945       49.1205    
  22  0.947927     -0.534776E-01 -0.722322E-02  0.722322E-02   49.1145       49.1218    
  23  0.472009     -0.750758     -0.101405      0.101405       49.0032       49.1046    
  24  0.678717     -0.387551     -0.523464E-01  0.523464E-01   49.0760       49.1283    
  25  0.617620     -0.481882     -0.650878E-01  0.650878E-01   49.1304       49.1955    
  26  0.138594E-01  -4.27879     -0.577936      0.577936       49.0560       49.6340    
  27  0.588445     -0.530273     -0.716239E-01  0.716239E-01   48.8603       48.9320    
  28  0.950805     -0.504465E-01 -0.681380E-02  0.681380E-02   49.1506       49.1575    
  29  0.444108     -0.811687     -0.109634      0.109634       49.0200       49.1296    
  30  0.299195      -1.20666     -0.162983      0.162983       49.1295       49.2925    
  31  0.808517E-01  -2.51514     -0.339719      0.339719       49.2153       49.5550    
  32  0.493903     -0.705415     -0.952804E-01  0.952804E-01   49.2443       49.3396    
  33  0.973584     -0.267710E-01 -0.361595E-02  0.361595E-02   48.9557       48.9593    
  34  0.219889      -1.51463     -0.204581      0.204581       49.1329       49.3374    
  35  0.872114     -0.136835     -0.184823E-01  0.184823E-01   48.7577       48.7761    
  36  0.413991     -0.881912     -0.119120      0.119120       48.9287       49.0478    
  37  0.155656      -1.86011     -0.251245      0.251245       49.1824       49.4336    
  38  0.744603     -0.294905     -0.398327E-01  0.398327E-01   49.2337       49.2736    
  39  0.627736     -0.465635     -0.628932E-01  0.628932E-01   49.1952       49.2581    
  40  0.137880      -1.98137     -0.267623      0.267623       49.2532       49.5208    
  41  0.270817      -1.30631     -0.176443      0.176443       49.3057       49.4822    
  42  0.271872      -1.30243     -0.175918      0.175918       49.1315       49.3075    
  43  0.988104     -0.119670E-01 -0.161638E-02  0.161638E-02   49.3015       49.3031    
  44  0.837729E-01  -2.47965     -0.334925      0.334925       49.2925       49.6274    
  45  0.731806     -0.312240     -0.421743E-01  0.421743E-01   49.4762       49.5184    
  46  0.520356     -0.653242     -0.882333E-01  0.882333E-01   49.2843       49.3725    
  47  0.158934      -1.83927     -0.248430      0.248430       49.2694       49.5178    
  48  0.724534     -0.322226     -0.435231E-01  0.435231E-01   49.2823       49.3258    
  49  0.895315     -0.110580     -0.149360E-01  0.149360E-01   49.4664       49.4814    
  50  0.850194     -0.162291     -0.219206E-01  0.219206E-01   49.4233       49.4453    
  51  0.428755     -0.846869     -0.114386      0.114386       49.4030       49.5174    
  52  0.523907     -0.646440     -0.873146E-01  0.873146E-01   49.0288       49.1161    
loop,thermsimp(1:2)       95  0.165862      0.201332    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    453         48.51          0.98          0.99         23.82          0.50          0.05         26.34
Just calling func    0   0         26.34


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

