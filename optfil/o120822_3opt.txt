nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    2.43931      0.500000    
Tfreq:   69
nop,maxfn,iprint,nloop,iquad:   938000  20  95   0
stopcr,simp:    5.00000       0.00000    
T0,Tstep:    2.43931      0.500000    
Tfreq:   69
 Estimating   69 parameters on   1 communicators
 Progress Report every  20 function evaluations
 EVAL.   FUNC.VALUE.          PARAMETER VALUES
iter,obj,time:      2          8.13          4.31          1.10         24.43          0.25          0.04         30.12
iter,obj,time:      3          8.19          0.86          1.12         24.36          0.07          0.05         26.46
iter,obj,time:      4          8.12          0.86          1.13         24.62          0.03          0.05         26.69
iter,obj,time:      5          8.14          0.87          1.12         24.62          0.02          0.04         26.68
iter,obj,time:      6          8.34          0.86          1.13         24.41          0.03          0.05         26.48
iter,obj,time:      7          8.19          0.86          1.13         24.39          0.05          0.05         26.49
iter,obj,time:      8          8.15          0.86          1.13         24.38          0.06          0.05         26.47
iter,obj,time:      9          8.17          0.86          1.12         24.48          0.04          0.05         26.55
iter,obj,time:     10          8.31          0.86          1.13         24.41          0.05          0.05         26.49
iter,obj,time:     11          8.14          0.87          1.13         24.39          0.05          0.04         26.48
iter,obj,time:     12          8.18          0.86          1.12         24.41          0.04          0.04         26.48
iter,obj,time:     13          8.36          0.86          1.12         24.44          0.02          0.05         26.50
iter,obj,time:     14          8.14          0.86          1.13         24.37          0.07          0.05         26.48
iter,obj,time:     15          8.12          0.86          1.13         24.50          0.03          0.05         26.56
iter,obj,time:     16          8.16          0.87          1.12         24.47          0.04          0.04         26.54
iter,obj,time:     17          8.16          0.87          1.13         24.72          0.03          0.05         26.79
iter,obj,time:     18          8.13          0.87          1.12         24.43          0.05          0.05         26.53
iter,obj,time:     19          8.14          0.86          1.12         24.41          0.03          0.05         26.47
iter,obj,time:     20          8.13          0.86          1.12         24.46          0.05          0.05         26.55
iter,obj,time:     21          8.13          0.86          1.13         24.39          0.05          0.04         26.48
iter,obj,time:     22          8.13          0.86          1.13         24.42          0.04          0.05         26.50
iter,obj,time:     23          8.14          0.86          1.13         24.39          0.04          0.05         26.47
iter,obj,time:     24          8.62          0.86          1.13         24.36          0.07          0.05         26.47
iter,obj,time:     25          8.74          0.86          1.13         24.41          0.03          0.05         26.48
iter,obj,time:     26          8.14          0.86          1.13         24.37          0.04          0.05         26.45
iter,obj,time:     27          8.65          0.86          1.13         24.57          0.03          0.05         26.62
iter,obj,time:     28          8.35          0.86          1.12         24.38          0.08          0.04         26.48
iter,obj,time:     29          8.63          0.86          1.13         24.44          0.06          0.05         26.53
iter,obj,time:     30          8.78          0.86          1.12         24.38          0.07          0.05         26.48
iter,obj,time:     31          8.78          0.86          1.13         24.44          0.05          0.04         26.53
iter,obj,time:     32          8.27          0.86          1.13         24.73          0.03          0.05         26.80
iter,obj,time:     33          8.23          0.87          1.12         24.45          0.05          0.05         26.54
iter,obj,time:     34          8.21          0.86          1.13         24.41          0.04          0.05         26.48
iter,obj,time:     35          8.20          0.86          1.13         24.39          0.06          0.05         26.48
iter,obj,time:     36          8.00          0.86          1.13         24.41          0.03          0.05         26.48
iter,obj,time:     37          8.41          0.86          1.13         24.38          0.05          0.05         26.47
iter,obj,time:     38          8.28          0.86          1.12         24.50          0.02          0.05         26.55
iter,obj,time:     39          8.16          0.88          1.13         24.69          0.07          0.05         26.80
iter,obj,time:     40          8.16          0.86          1.12         24.74          0.03          0.05         26.80
iter,obj,time:     41          8.40          0.86          1.12         24.52          0.02          0.04         26.57
iter,obj,time:     42          8.33          0.86          1.12         24.32          0.05          0.05         26.41
iter,obj,time:     43          8.13          0.86          1.13         24.53          0.02          0.04         26.58
iter,obj,time:     44          8.26          0.86          1.12         24.41          0.05          0.05         26.49
iter,obj,time:     45          8.22          0.86          1.13         24.45          0.06          0.05         26.54
iter,obj,time:     46          8.01          0.86          1.12         24.39          0.02          0.05         26.44
iter,obj,time:     47          8.17          0.86          1.12         24.42          0.04          0.05         26.49
iter,obj,time:     48          8.26          0.86          1.13         24.55          0.04          0.05         26.63
iter,obj,time:     49          8.11          0.86          1.12         24.42          0.04          0.05         26.48
iter,obj,time:     50          8.11          0.86          1.13         24.40          0.02          0.04         26.45
iter,obj,time:     51          8.26          0.86          1.12         24.55          0.03          0.05         26.61
iter,obj,time:     52          8.21          0.86          1.13         24.71          0.04          0.05         26.78
iter,obj,time:     53         10.36          0.86          1.13         24.36          0.03          0.05         26.43
iter,obj,time:     54          9.22          0.86          1.12         24.47          0.03          0.05         26.53
iter,obj,time:     55          8.11          0.86          1.12         24.38          0.02          0.05         26.44
iter,obj,time:     56          8.17          0.86          1.13         24.46          0.04          0.05         26.53
iter,obj,time:     57          8.27          0.86          1.12         24.41          0.03          0.05         26.47
iter,obj,time:     58          8.46          0.86          1.12         24.38          0.05          0.05         26.46
iter,obj,time:     59          8.37          0.86          1.12         24.38          0.05          0.05         26.46
iter,obj,time:     60          8.17          0.86          1.12         24.51          0.02          0.05         26.56
iter,obj,time:     61          8.12          0.86          1.12         24.43          0.04          0.05         26.51
iter,obj,time:     62          8.11          0.86          1.13         24.59          0.01          0.05         26.64
iter,obj,time:     63          8.26          0.86          1.13         24.61          0.05          0.04         26.70
iter,obj,time:     64          8.76          0.86          1.11         24.32          0.19          0.04         26.52
iter,obj,time:     65          8.11          0.86          1.11         24.34          0.14          0.05         26.50
iter,obj,time:     66          8.67          0.86          1.12         24.42          0.02          0.05         26.47
iter,obj,time:     67          8.82          0.86          1.13         24.42          0.02          0.05         26.48
iter,obj,time:     68          8.14          0.86          1.12         24.39          0.04          0.05         26.46
iter,obj,time:     69          8.15          0.86          1.12         24.39          0.03          0.04         26.43
iter,obj,time:     70          8.15          0.86          1.13         24.43          0.04          0.05         26.51
iter,obj,time:     71          8.19          0.86          1.12         24.39          0.02          0.05         26.44

    1    8.1310        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    2    8.1914       0.1627     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    3    8.1244        1.163     -2.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    4    8.1376        1.163     -1.836      2.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    5    8.3412        1.163     -1.836      3.211     -102.6      2.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    6    8.1859        1.163     -1.836      3.211     -102.6      1.360    
                       1.322      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    7    8.1501        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      2.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    8    8.1741        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      2.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

    9    8.3129        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731     -1.022    

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   10    8.1443        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       3.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   11    8.1847        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209    -0.8658E-01  1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   12    8.3629        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530     0.1382E+05  3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   13    8.1428        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      6899.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   14    8.1219        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                      0.8217      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   15    8.1569        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      9161.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   16    8.1564        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.     -1480.    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   17    8.1329        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -3.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   18    8.1351        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -2.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   19    8.1310        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -6.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   20    8.1313        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      8.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   21    8.1310        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -12.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   22    8.1407        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -2.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   23    8.6233        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603     0.4286E+05  0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   24    8.7411        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.5651E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   25    8.1388        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       6858.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   26    8.6545        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.5545E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   27    8.3487        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05-0.1773E+05 0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   28    8.6330        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.5314E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   29    8.7761        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05 0.2653E+05

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   30    8.7842        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                      0.2559E+05 0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   31    8.2698        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.3175     0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   32    8.2349        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.4832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   33    8.2132        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832     0.3000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   34    8.2040        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.4109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   35    8.0040        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486     0.2079     0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   36    8.4114        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.4799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   37    8.2781        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.4094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   38    8.1634        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.3570    



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   39    8.1580        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                      0.3114E-01-0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   40    8.4019        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.2886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   41    8.3331        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.3829    -0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   42    8.1346        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01 0.2215    

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   43    8.2603        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                      0.3000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   44    8.2204        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.3996    -0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   45    8.0110        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116     0.1478     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   46    8.1706        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.3407    

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   47    8.2644        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.3452    -0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   48    8.1141        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01 0.2700    -0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   49    8.1051        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.3685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   50    8.2643        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685    -0.9115      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   51    8.2089        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211     0.1418E+05



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   52    10.355        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                     -0.6415E-01 -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   53    9.2186        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064    -0.2185     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   54    8.1069        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -1.759     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   55    8.1678        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -1.827    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   56    8.2740        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.515      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   57    8.4609        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.975    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   58    8.3685        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.2908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   59    8.1728        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                      0.4109     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   60    8.1184        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -1.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   61    8.1061        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.593      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   62    8.2591        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      9.164    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   63    8.7635        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000      1.455    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   64    8.1087        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546     0.5244      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   65    8.6684        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      9.155      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   66    8.8158        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.378    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   67    8.1424        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000     0.2180    -0.7016      9.034    

                       8.767    -0.1908E+05 -7.000    

   68    8.1519        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820     0.2984      9.034    

                       8.767    -0.1908E+05 -7.000    

   69    8.1525        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.334    

                       8.767    -0.1908E+05 -7.000    

   70    8.1864        1.163     -1.836      3.211     -102.6      1.360    
                      0.3215      1.303     -99.70      3.731    -0.2243E-01

                       2.209     -1.087      1.530      6909.      3450.    

                     -0.1783      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6107.      520.5    

                       1.433     -5.910     -4.129     -8.511      6.619    

                      -14.89     -3.603      8572.      0.000     0.1130E+05



                       1372.     0.1109E+05 -3546.     0.1063E+05  5305.    

                       5119.     0.1748E-01 0.1832      0.000     0.1109    

                     -0.2486    -0.9209E-01 0.1799     0.1094     0.5705E-01



                     -0.4689    -0.7886      0.000     0.8286E-01-0.7850E-01

                       0.000     0.9956E-01-0.7116    -0.1522     0.4071E-01

                      0.4515E-01-0.3001E-01-0.6685     -1.211      7089.    



                      -1.064     -1.219     -2.259     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1908E+05 -4.000    

                     -0.5891     -2.180      9.293      8.864    -0.1908E+05



                      -4.000     0.4546    -0.4756      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7820    -0.7016      9.034    

                       9.067    -0.1908E+05 -7.000    
 finished setting up initial simplex
 count number of function evaluations which here is neval=np1          70          70

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        1
neval is:       70


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       70     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228570      -1.47591      -3.60022       3.60022       8.13105       11.7313    
   2  0.709707     -0.342904     -0.836450      0.836450       8.19144       9.02789    
   3  0.151889      -1.88460      -4.59714       4.59714       8.12442       12.7216    
   4  0.456170E-01  -3.08747      -7.53132       7.53132       8.13759       15.6689    
   5  0.882557     -0.124932     -0.304748      0.304748       8.34119       8.64594    
   6  0.711292     -0.340672     -0.831006      0.831006       8.18586       9.01686    
   7  0.241669      -1.42019      -3.46428       3.46428       8.15009       11.6144    
   8  0.682871     -0.381450     -0.930476      0.930476       8.17411       9.10459    
   9  0.500657     -0.691834      -1.68760       1.68760       8.31291       10.0005    
  10  0.494633     -0.703939      -1.71713       1.71713       8.14433       9.86146    
  11  0.437126     -0.827535      -2.01862       2.01862       8.18467       10.2033    
  12  0.462981     -0.770069      -1.87844       1.87844       8.36292       10.2414    
  13  0.988878     -0.111840E-01 -0.272813E-01  0.272813E-01   8.14279       8.17007    
  14  0.878158     -0.129929     -0.316938      0.316938       8.12192       8.43885    
  15  0.825605     -0.191638     -0.467466      0.467466       8.15693       8.62439    
  16  0.966665     -0.339033E-01 -0.827009E-01  0.827009E-01   8.15644       8.23915    
  17  0.340930      -1.07608      -2.62489       2.62489       8.13285       10.7577    
  18  0.288920      -1.24161      -3.02867       3.02867       8.13507       11.1637    
  19  0.442843     -0.814539      -1.98692       1.98692       8.13105       10.1180    
  20  0.878635     -0.129386     -0.315612      0.315612       8.13134       8.44695    
  21  0.198777E-01  -3.91816      -9.55762       9.55762       8.13105       17.6887    
  22  0.315829      -1.15255      -2.81144       2.81144       8.14074       10.9522    
  23  0.208690      -1.56690      -3.82217       3.82217       8.62330       12.4455    
  24  0.849393     -0.163234     -0.398178      0.398178       8.74110       9.13928    
  25  0.945818     -0.557056E-01 -0.135883      0.135883       8.13879       8.27467    
  26  0.567839     -0.565917      -1.38045       1.38045       8.65449       10.0349    
  27  0.718388     -0.330745     -0.806791      0.806791       8.34870       9.15550    
  28  0.115406      -2.15930      -5.26720       5.26720       8.63304       13.9002    
  29  0.659869E-01  -2.71830      -6.63079       6.63079       8.77612       15.4069    
  30  0.171393      -1.76380      -4.30246       4.30246       8.78420       13.0867    
  31  0.161953      -1.82045      -4.44065       4.44065       8.26978       12.7104    
  32  0.455406     -0.786566      -1.91868       1.91868       8.23487       10.1536    
  33  0.788693     -0.237378     -0.579038      0.579038       8.21319       8.79223    
  34  0.157754      -1.84672      -4.50473       4.50473       8.20399       12.7087    
  35  0.126279      -2.06926      -5.04757       5.04757       8.00399       13.0516    
  36  0.646962     -0.435467      -1.06224       1.06224       8.41137       9.47361    
  37  0.730769     -0.313658     -0.765110      0.765110       8.27811       9.04322    
  38  0.443446E-01  -3.11577      -7.60033       7.60033       8.16337       15.7637    
  39  0.219048      -1.51847      -3.70401       3.70401       8.15803       11.8620    
  40  0.311223E-01  -3.46983      -8.46401       8.46401       8.40191       16.8659    
  41  0.864417     -0.145700     -0.355409      0.355409       8.33310       8.68851    
  42  0.372606     -0.987233      -2.40817       2.40817       8.13456       10.5427    
  43  0.599250E-01  -2.81466      -6.86584       6.86584       8.26030       15.1261    
  44  0.250528      -1.38418      -3.37646       3.37646       8.22045       11.5969    
  45  0.404968E-01  -3.20653      -7.82174       7.82174       8.01098       15.8327    
  46  0.792822     -0.232156     -0.566302      0.566302       8.17061       8.73691    
  47  0.826691     -0.190324     -0.464260      0.464260       8.26438       8.72864    
  48  0.258424      -1.35316      -3.30077       3.30077       8.11412       11.4149    
  49  0.713620     -0.337405     -0.823038      0.823038       8.10508       8.92812    
  50  0.936186     -0.659413E-01 -0.160851      0.160851       8.26433       8.42518    
  51  0.655367E-01  -2.72514      -6.64749       6.64749       8.20895       14.8564    
  52  0.178790      -1.72154      -4.19939       4.19939       10.3553       14.5546    
  53  0.110644E-01  -4.50403      -10.9867       10.9867       9.21859       20.2053    
  54  0.459577     -0.777448      -1.89644       1.89644       8.10690       10.0033    
  55  0.210706      -1.55729      -3.79873       3.79873       8.16780       11.9665    
  56  0.667378     -0.404399     -0.986456      0.986456       8.27399       9.26045    
  57  0.787749     -0.238575     -0.581960      0.581960       8.46086       9.04282    
  58  0.774339E-01  -2.55833      -6.24057       6.24057       8.36855       14.6091    
  59  0.154999      -1.86434      -4.54771       4.54771       8.17280       12.7205    
  60  0.510712     -0.671950      -1.63910       1.63910       8.11836       9.75746    
  61  0.628107     -0.465044      -1.13439       1.13439       8.10606       9.24045    
  62  0.850273     -0.162197     -0.395650      0.395650       8.25909       8.65474    
  63  0.355976      -1.03289      -2.51955       2.51955       8.76353       11.2831    
  64  0.531318     -0.632394      -1.54261       1.54261       8.10868       9.65129    
  65  0.404575     -0.904917      -2.20738       2.20738       8.66843       10.8758    
  66  0.240103      -1.42669      -3.48014       3.48014       8.81582       12.2960    
  67  0.288602      -1.24271      -3.03136       3.03136       8.14239       11.1737    
  68  0.870493     -0.138695     -0.338321      0.338321       8.15194       8.49026    
  69  0.453038     -0.791780      -1.93140       1.93140       8.15253       10.0839    
  70  0.259221      -1.35008      -3.29326       3.29326       8.18645       11.4797    
loop,thermsimp(1:2)        1   3.60022      0.836450    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     72          8.22          0.83          1.12         24.54          0.03          0.05         26.58
Just calling func    0   0         26.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     73          8.36          0.87          1.12         24.34          0.03          0.05         26.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.22
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.43931               139
loop is:        1
neval is:       72
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        2
neval is:       72


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       72     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352733      -1.04204      -2.54187       2.54187       8.14279       10.6847    
   2  0.440787     -0.819193      -1.99827       1.99827       8.15644       10.1547    
   3  0.685789     -0.377185     -0.920073      0.920073       8.13879       9.05886    
   4  0.673104     -0.395856     -0.965617      0.965617       8.26433       9.22994    
   5  0.655536     -0.422301      -1.03013       1.03013       8.12192       9.15204    
   6  0.422838     -0.860766      -2.09968       2.09968       8.13134       10.2310    
   7  0.300870      -1.20108      -2.92981       2.92981       8.15194       11.0817    
   8  0.776987     -0.252331     -0.615515      0.615515       8.15693       8.77244    
   9  0.170551      -1.76872      -4.31447       4.31447       8.34119       12.6557    
  10  0.587497     -0.531884      -1.29743       1.29743       8.25909       9.55652    
  11  0.250425      -1.38459      -3.37746       3.37746       8.33310       11.7106    
  12  0.776362E-01  -2.55572      -6.23421       6.23421       8.26438       14.4986    
  13  0.766647     -0.265729     -0.648197      0.648197       8.17061       8.81881    
  14  0.480193     -0.733568      -1.78940       1.78940       8.21319       10.0026    
  15  0.434643     -0.833231      -2.03251       2.03251       8.10508       10.1376    
  16  0.815924E-01  -2.50602      -6.11297       6.11297       8.18586       14.2988    
  17  0.724257E-01  -2.62519      -6.40367       6.40367       8.19144       14.5951    
  18  0.573795     -0.555483      -1.35500       1.35500       8.46086       9.81586    
  19  0.196096      -1.62915      -3.97401       3.97401       8.27811       12.2521    
  20  0.240673      -1.42432      -3.47435       3.47435       8.17411       11.6485    
  21  0.194228      -1.63872      -3.99736       3.99736       8.74110       12.7385    
  22  0.236387      -1.44229      -3.51819       3.51819       8.34870       11.8669    
  23  0.261662      -1.34070      -3.27039       3.27039       8.10606       11.3765    
  24  0.146321      -1.92195      -4.68825       4.68825       8.27399       12.9622    
  25  0.169637      -1.77410      -4.32758       4.32758       8.41137       12.7389    
  26  0.886717     -0.120229     -0.293277      0.293277       8.10868       8.40196    
  27  0.253412      -1.37274      -3.34854       3.34854       8.11836       11.4669    
  28  0.470820     -0.753279      -1.83748       1.83748       8.14433       9.98182    
  29  0.329871      -1.10905      -2.70533       2.70533       8.31291       11.0182    
  30  0.726784     -0.319126     -0.778448      0.778448       8.10690       8.88535    
  31  0.612351     -0.490450      -1.19636       1.19636       8.65449       9.85085    
  32  0.146573      -1.92023      -4.68405       4.68405       8.15253       12.8366    
  33  0.812633     -0.207476     -0.506099      0.506099       8.13105       8.63715    
  34  0.486789     -0.719925      -1.75612       1.75612       8.23487       9.99099    
  35  0.653508     -0.425400      -1.03769       1.03769       8.18467       9.22236    
  36  0.180127      -1.71409      -4.18121       4.18121       8.36292       12.5441    
  37  0.155218      -1.86292      -4.54426       4.54426       8.13456       12.6788    
  38  0.830615     -0.185589     -0.452710      0.452710       8.13285       8.58556    
  39  0.728345     -0.316980     -0.773214      0.773214       8.66843       9.44164    
  40  0.262318      -1.33820      -3.26429       3.26429       8.14074       11.4050    
  41  0.234222      -1.45148      -3.54063       3.54063       8.13507       11.6757    
  42  0.250201      -1.38549      -3.37965       3.37965       8.14239       11.5220    
  43  0.898433     -0.107103     -0.261259      0.261259       8.76353       9.02479    
  44  0.580277     -0.544250      -1.32760       1.32760       8.11412       9.44172    
  45  0.823617     -0.194050     -0.473348      0.473348       8.18645       8.65980    
  46  0.820676     -0.197627     -0.482074      0.482074       8.22045       8.70252    
  47  0.502494     -0.688171      -1.67866       1.67866       8.15009       9.82875    
  48  0.751016     -0.286329     -0.698446      0.698446       8.13105       8.82950    
  49  0.360461      -1.02037      -2.48901       2.48901       8.15803       10.6470    
  50  0.948712     -0.526497E-01 -0.128429      0.128429       8.16780       8.29623    
  51  0.452918     -0.792045      -1.93205       1.93205       8.81582       10.7479    
  52  0.182886      -1.69889      -4.14414       4.14414       8.62330       12.7674    
  53  0.986780     -0.133085E-01 -0.324637E-01  0.324637E-01   8.20399       8.23645    
  54  0.720276     -0.328121     -0.800391      0.800391       8.26978       9.07017    
  55  0.999574     -0.426396E-03 -0.104011E-02  0.104011E-02   8.17280       8.17384    
  56  0.573447     -0.556089      -1.35648       1.35648       8.12442       9.48090    
  57  0.441160E-01  -3.12093      -7.61294       7.61294       8.00399       15.6169    
  58  0.596470     -0.516726      -1.26046       1.26046       8.78420       10.0447    
  59  0.561679E-01  -2.87941      -7.02379       7.02379       8.63304       15.6568    
  60  0.664610     -0.408554     -0.996592      0.996592       10.3553       11.3518    
  61  0.875363     -0.133117     -0.324713      0.324713       8.36855       8.69326    
  62  0.969943     -0.305184E-01 -0.744439E-01  0.744439E-01   8.20895       8.28339    
  63  0.692714     -0.367138     -0.895565      0.895565       8.26030       9.15587    
  64  0.107969      -2.22591      -5.42969       5.42969       8.77612       14.2058    
  65  0.530030     -0.634822      -1.54853       1.54853       8.13759       9.68612    
  66  0.246082      -1.40209      -3.42014       3.42014       8.16337       11.5835    
  67  0.561065     -0.577919      -1.40973       1.40973       8.01098       9.42070    
  68  0.888085     -0.118688     -0.289517      0.289517       8.40191       8.69143    
  69  0.180192      -1.71373      -4.18033       4.18033       8.13105       12.3114    
  70  0.259121      -1.35046      -3.29419       3.29419       8.22013       11.5143    
loop,thermsimp(1:2)        2   2.54187       1.99827    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     74          8.16          0.86          1.12         24.65          0.04          0.05         26.73
Just calling func    0   0         26.72


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     75          8.34          0.86          1.12         24.53          0.03          0.05         26.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.43931               139
loop is:        2
neval is:       74
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        3
neval is:       74


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       74     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.167898      -1.78440      -4.35271       4.35271       8.17280       12.5255    
   2  0.274399      -1.29317      -3.15445       3.15445       8.20399       11.3584    
   3  0.597410E-01  -2.81774      -6.87335       6.87335       8.20895       15.0823    
   4  0.283115E-01  -3.56449      -8.69491       8.69491       8.16780       16.8627    
   5  0.901069     -0.104174     -0.254113      0.254113       8.10868       8.36280    
   6  0.717939     -0.331371     -0.808318      0.808318       8.13285       8.94117    
   7  0.294866      -1.22123      -2.97897       2.97897       8.13105       11.1100    
   8  0.935651     -0.665127E-01 -0.162245      0.162245       8.18645       8.34870    
   9  0.314362      -1.15721      -2.82280       2.82280       8.40191       11.2247    
  10  0.807729     -0.213529     -0.520865      0.520865       8.36855       8.88941    
  11  0.757191     -0.278140     -0.678470      0.678470       8.22045       8.89892    
  12  0.508654     -0.675987      -1.64895       1.64895       8.15693       9.80587    
  13  0.722060     -0.325647     -0.794354      0.794354       8.17061       8.96497    
  14  0.424032     -0.857947      -2.09280       2.09280       8.13105       10.2239    
  15  0.786154     -0.240602     -0.586905      0.586905       8.10690       8.69381    
  16  0.399894     -0.916557      -2.23577       2.23577       8.76353       10.9993    
  17  0.757416     -0.277843     -0.677747      0.677747       8.13879       8.81654    
  18  0.637270     -0.450563      -1.09906       1.09906       8.26978       9.36884    
  19  0.586055     -0.534342      -1.30343       1.30343       8.12192       9.42534    
  20  0.821724     -0.196351     -0.478962      0.478962       8.26030       8.73926    
  21  0.921558     -0.816897E-01 -0.199267      0.199267       8.18467       8.38394    
  22  0.985596     -0.145083E-01 -0.353904E-01  0.353904E-01   8.26433       8.29972    
  23  0.257194      -1.35793      -3.31241       3.31241       8.01098       11.3234    
  24  0.921438E-01  -2.38440      -5.81631       5.81631       8.66843       14.4847    
  25  0.114653      -2.16584      -5.28318       5.28318       8.11412       13.3973    
  26  0.379827     -0.968040      -2.36136       2.36136       8.12442       10.4858    
  27  0.541451     -0.613503      -1.49653       1.49653       8.25909       9.75561    
  28  0.544274     -0.608302      -1.48384       1.48384       8.13759       9.62143    
  29  0.934365     -0.678883E-01 -0.165601      0.165601       8.46086       8.62646    
  30  0.266419E-01  -3.62527      -8.84317       8.84317       8.15009       16.9933    
  31  0.919572     -0.838466E-01 -0.204528      0.204528       8.65449       8.85901    
  32  0.864639     -0.145444     -0.354783      0.354783       8.14433       8.49912    
  33  0.341156      -1.07542      -2.62328       2.62328       8.23487       10.8581    
  34  0.803175     -0.219182     -0.534655      0.534655       8.21319       8.74784    
  35  0.699424     -0.357498     -0.872051      0.872051       8.78420       9.65625    
  36  0.223868E-01  -3.79928      -9.26765       9.26765       8.10508       17.3727    
  37  0.605689     -0.501389      -1.22305       1.22305       8.15644       9.37949    
  38  0.312349      -1.16363      -2.83847       2.83847       8.13134       10.9698    
  39  0.437501     -0.826675      -2.01652       2.01652       8.15803       10.1745    
  40  0.303330      -1.19293      -2.90994       2.90994       8.14279       11.0527    
  41  0.129735      -2.04226      -4.98171       4.98171       8.81582       13.7975    
  42  0.954352     -0.467224E-01 -0.113971      0.113971       8.31291       8.42688    
  43  0.519807     -0.654297      -1.59604       1.59604       8.15194       9.74798    
  44  0.950560     -0.507036E-01 -0.123682      0.123682       10.3553       10.4789    
  45  0.443941     -0.812064      -1.98088       1.98088       8.10606       10.0869    
  46  0.911446     -0.927229E-01 -0.226180      0.226180       8.14074       8.36692    
  47  0.782475     -0.245293     -0.598347      0.598347       8.11836       8.71671    
  48  0.412534     -0.885438      -2.15986       2.15986       8.22013       10.3800    
  49  0.843850     -0.169780     -0.414147      0.414147       8.14239       8.55654    
  50  0.149432      -1.90091      -4.63693       4.63693       8.16337       12.8003    
  51  0.292747      -1.22845      -2.99657       2.99657       8.17411       11.1707    
  52  0.579908E-02  -5.15006      -12.5626       12.5626       8.13507       20.6977    
  53  0.164431      -1.80526      -4.40360       4.40360       8.33310       12.7367    
  54  0.963795     -0.368765E-01 -0.899535E-01  0.899535E-01   8.34870       8.43866    
  55  0.536638     -0.622432      -1.51831       1.51831       8.27811       9.79641    
  56  0.231620      -1.46266      -3.56788       3.56788       8.13105       11.6989    
  57  0.452632E-01  -3.09526      -7.55031       7.55031       8.36292       15.9132    
  58  0.241294      -1.42174      -3.46807       3.46807       8.34119       11.8093    
  59  0.757653     -0.277529     -0.676981      0.676981       8.13456       8.81154    
  60  0.504715     -0.683762      -1.66791       1.66791       8.74110       10.4090    
  61  0.878562     -0.129469     -0.315816      0.315816       8.41137       8.72719    
  62  0.874452     -0.134158     -0.327254      0.327254       8.62330       8.95055    
  63  0.370953     -0.991680      -2.41902       2.41902       8.15253       10.5716    
  64  0.757717     -0.277446     -0.676777      0.676777       8.27399       8.95077    
  65  0.642844     -0.441853      -1.07782       1.07782       8.77612       9.85394    
  66  0.616137     -0.484286      -1.18133       1.18133       8.18586       9.36718    
  67  0.551578     -0.594972      -1.45132       1.45132       8.26438       9.71571    
  68  0.483778E-01  -3.02871      -7.38799       7.38799       8.19144       15.5794    
  69  0.839664     -0.174753     -0.426278      0.426278       8.00399       8.43027    
  70  0.334065      -1.09642      -2.67452       2.67452       8.16117       10.8357    
loop,thermsimp(1:2)        3   4.35271       3.15445    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     76          8.09          0.86          1.12         24.31          0.06          0.04         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     77          8.08          0.87          1.13         24.38          0.06          0.04         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.43931               139
loop is:        3
neval is:       76
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        4
neval is:       76


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       76     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.883237     -0.124162     -0.302870      0.302870       8.26433       8.56720    
   2  0.114178      -2.16999      -5.29330       5.29330       8.18645       13.4797    
   3  0.217017      -1.52778      -3.72673       3.72673       8.10868       11.8354    
   4  0.138317      -1.97821      -4.82547       4.82547       8.14074       12.9662    
   5  0.832728     -0.183048     -0.446512      0.446512       8.18467       8.63118    
   6  0.390825     -0.939496      -2.29173       2.29173       8.31291       10.6046    
   7  0.283633      -1.26007      -3.07372       3.07372       8.00399       11.0777    
   8  0.725809     -0.320468     -0.781723      0.781723       8.34870       9.13043    
   9  0.506121     -0.680979      -1.66112       1.66112       8.14433       9.80546    
  10  0.216234      -1.53139      -3.73555       3.73555       8.14239       11.8779    
  11  0.637942     -0.449509      -1.09649       1.09649       8.46086       9.55735    
  12  0.536707     -0.622302      -1.51799       1.51799       8.10690       9.62489    
  13  0.231844      -1.46169      -3.56553       3.56553       8.11836       11.6839    
  14  0.491379     -0.710540      -1.73323       1.73323       8.41137       10.1446    
  15  0.825774     -0.191434     -0.466969      0.466969       8.26030       8.72727    
  16  0.671593     -0.398102     -0.971097      0.971097       8.21319       9.18429    
  17  0.549103     -0.599470      -1.46229       1.46229       8.13456       9.59685    
  18  0.659287     -0.416597      -1.01621       1.01621       8.13879       9.15500    
  19  0.205012      -1.58469      -3.86555       3.86555       8.65449       12.5200    
  20  0.400541E-02  -5.52011      -13.4653       13.4653       8.36855       21.8338    
  21  0.750831     -0.286575     -0.699046      0.699046       8.22045       8.91949    
  22  0.619921     -0.478162      -1.16639       1.16639       8.13285       9.29924    
  23  0.435226     -0.831889      -2.02924       2.02924       8.62330       10.6525    
  24  0.460974     -0.774414      -1.88904       1.88904       8.27399       10.1630    
  25  0.891582E-01  -2.41734      -5.89666       5.89666       8.17061       14.0673    
  26  0.589618E-01  -2.83087      -6.90537       6.90537       8.18586       15.0912    
  27  0.541391     -0.613613      -1.49680       1.49680       8.26978       9.76657    
  28  0.545108E-01  -2.90936      -7.09683       7.09683       8.15644       15.2533    
  29  0.744722     -0.294744     -0.718974      0.718974       8.12192       8.84089    
  30  0.712477     -0.339008     -0.826947      0.826947       8.13759       8.96454    
  31  0.563836     -0.572992      -1.39771       1.39771       8.78420       10.1819    
  32  0.161455      -1.82353      -4.44816       4.44816       8.26438       12.7125    
  33  0.640738     -0.445135      -1.08583       1.08583       8.15194       9.23776    
  34  0.157494      -1.84837      -4.50875       4.50875       8.25909       12.7678    
  35  0.695323     -0.363378     -0.886394      0.886394       8.27811       9.16450    
  36  0.792798     -0.232186     -0.566376      0.566376       8.15693       8.72330    
  37  0.940634     -0.612017E-01 -0.149290      0.149290       8.77612       8.92541    
  38  0.750008     -0.287672     -0.701722      0.701722       8.10606       8.80778    
  39  0.298939E-01  -3.51010      -8.56224       8.56224       8.15803       16.7203    
  40  0.633510     -0.456480      -1.11350       1.11350       8.13105       9.24455    
  41  0.465723     -0.764164      -1.86404       1.86404       8.22013       10.0842    
  42  0.916259     -0.874560E-01 -0.213333      0.213333       8.74110       8.95444    
  43  0.451376     -0.795456      -1.94037       1.94037       10.3553       12.2956    
  44  0.414090     -0.881672      -2.15068       2.15068       8.12442       10.2751    
  45  0.273092      -1.29795      -3.16610       3.16610       8.15253       11.3186    
  46  0.361379      -1.01783      -2.48280       2.48280       8.16117       10.6440    
  47  0.548848     -0.599934      -1.46343       1.46343       8.23487       9.69830    
  48  0.832309     -0.183552     -0.447741      0.447741       8.13134       8.57908    
  49  0.673017     -0.395985     -0.965932      0.965932       8.76353       9.72946    
  50  0.692516     -0.367425     -0.896264      0.896264       8.14279       9.03905    
  51  0.354468E-01  -3.33972      -8.14664       8.14664       8.13105       16.2777    
  52  0.987850     -0.122240E-01 -0.298181E-01  0.298181E-01   8.17411       8.20393    
  53  0.659676     -0.416007      -1.01477       1.01477       8.40191       9.41668    
  54  0.276145      -1.28683      -3.13899       3.13899       8.01098       11.1500    
  55  0.426927     -0.851141      -2.07620       2.07620       8.20399       10.2802    
  56  0.221817      -1.50590      -3.67337       3.67337       8.13105       11.8044    
  57  0.911956     -0.921634E-01 -0.224816      0.224816       8.34119       8.56601    
  58  0.791973     -0.233228     -0.568916      0.568916       8.17280       8.74171    
  59  0.805447     -0.216358     -0.527765      0.527765       8.33310       8.86087    
  60  0.887840     -0.118963     -0.290189      0.290189       8.16337       8.45356    
  61  0.978176     -0.220657E-01 -0.538251E-01  0.538251E-01   8.11412       8.16795    
  62  0.539899     -0.616372      -1.50353       1.50353       8.81582       10.3193    
  63  0.313742      -1.15918      -2.82761       2.82761       8.66843       11.4960    
  64  0.355768      -1.03348      -2.52097       2.52097       8.20895       10.7299    
  65  0.413366     -0.883423      -2.15495       2.15495       8.19144       10.3464    
  66  0.352288      -1.04331      -2.54495       2.54495       8.36292       10.9079    
  67  0.269512      -1.31114      -3.19829       3.19829       8.16780       11.3661    
  68  0.841976E-01  -2.47459      -6.03630       6.03630       8.15009       14.1864    
  69  0.964450     -0.361976E-01 -0.882972E-01  0.882972E-01   8.10508       8.19338    
  70  0.554883     -0.588998      -1.43675       1.43675       8.08348       9.52023    
loop,thermsimp(1:2)        4  0.302870       5.29330    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     78          8.00          0.86          1.12         24.38          0.06          0.07         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     79          9.93          0.84          1.12         24.45          0.03          0.05         26.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.00
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.43931               139
loop is:        4
neval is:       78
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        5
neval is:       78


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       78     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.968189     -0.323278E-01 -0.788577E-01  0.788577E-01   8.11412       8.19298    
   2  0.384676     -0.955353      -2.33041       2.33041       8.10508       10.4355    
   3  0.472770     -0.749146      -1.82740       1.82740       8.17411       10.0015    
   4  0.131186      -2.03114      -4.95458       4.95458       8.16337       13.1179    
   5  0.387497     -0.948046      -2.31258       2.31258       8.34119       10.6538    
   6  0.474858     -0.744739      -1.81665       1.81665       8.26433       10.0810    
   7  0.654056     -0.424563      -1.03564       1.03564       8.13134       9.16698    
   8  0.375266     -0.980119      -2.39082       2.39082       8.18467       10.5755    
   9  0.605577     -0.501574      -1.22350       1.22350       8.15693       9.38042    
  10  0.485605     -0.722360      -1.76206       1.76206       8.26030       10.0224    
  11  0.503843     -0.685490      -1.67213       1.67213       8.17280       9.84492    
  12  0.374521     -0.982108      -2.39567       2.39567       8.10606       10.5017    
  13  0.955542E-01  -2.34806      -5.72766       5.72766       8.12192       13.8496    
  14  0.902567     -0.102512     -0.250059      0.250059       8.33310       8.58316    
  15  0.347215      -1.05781      -2.58033       2.58033       8.22045       10.8008    
  16  0.893138     -0.113014     -0.275677      0.275677       8.77612       9.05180    
  17  0.561145     -0.577776      -1.40938       1.40938       8.74110       10.1505    
  18  0.667287     -0.404536     -0.986790      0.986790       8.13759       9.12438    
  19  0.601102     -0.508991      -1.24159       1.24159       8.14279       9.38437    
  20  0.569928     -0.562245      -1.37149       1.37149       8.34870       9.72020    
  21  0.655926     -0.421708      -1.02868       1.02868       8.13879       9.16747    
  22  0.355892      -1.03313      -2.52012       2.52012       8.27811       10.7982    
  23  0.208013      -1.57015      -3.83010       3.83010       8.21319       12.0433    
  24  0.879772     -0.128093     -0.312459      0.312459       8.15194       8.46440    
  25  0.114206E-01  -4.47233      -10.9094       10.9094       8.13105       19.0405    
  26  0.950245     -0.510357E-01 -0.124492      0.124492       8.13285       8.25734    
  27  0.321268      -1.13548      -2.76979       2.76979       8.40191       11.1717    
  28  0.379005     -0.970207      -2.36664       2.36664       8.08348       10.4501    
  29  0.117960      -2.13741      -5.21382       5.21382       8.46086       13.6747    
  30  0.822558     -0.195337     -0.476488      0.476488       8.13456       8.61104    
  31  0.671085     -0.398860     -0.972945      0.972945       8.10690       9.07985    
  32  0.220279      -1.51286      -3.69034       3.69034       8.23487       11.9252    
  33  0.836335     -0.178727     -0.435970      0.435970       8.76353       9.19950    
  34  0.982442E-01  -2.32030      -5.65994       5.65994       8.26978       13.9297    
  35  0.912526     -0.915389E-01 -0.223292      0.223292       8.14433       8.36763    
  36  0.758802     -0.276015     -0.673286      0.673286       8.22013       8.89342    
  37  0.562651     -0.575096      -1.40284       1.40284       8.41137       9.81421    
  38  0.248142      -1.39375      -3.39981       3.39981       8.27399       11.6738    
  39  0.864881     -0.145163     -0.354098      0.354098       8.78420       9.13829    
  40  0.495151     -0.702893      -1.71458       1.71458       8.12442       9.83900    
  41  0.112352E-01  -4.48870      -10.9494       10.9494       8.20399       19.1533    
  42  0.745500     -0.293700     -0.716426      0.716426       8.81582       9.53224    
  43  0.405071     -0.903693      -2.20439       2.20439       8.19144       10.3958    
  44  0.617259     -0.482466      -1.17689       1.17689       8.31291       9.48980    
  45  0.992755     -0.727089E-02 -0.177360E-01  0.177360E-01   8.16117       8.17891    
  46  0.888739     -0.117952     -0.287722      0.287722       8.62330       8.91102    
  47  0.976701     -0.235748E-01 -0.575063E-01  0.575063E-01   8.20895       8.26645    
  48  0.461976     -0.772242      -1.88374       1.88374       8.36292       10.2467    
  49  0.150581      -1.89325      -4.61824       4.61824       8.00399       12.6222    
  50  0.726286E-01  -2.62240      -6.39685       6.39685       8.01098       14.4078    
  51  0.280837      -1.26998      -3.09788       3.09788       8.15253       11.2504    
  52  0.727959     -0.317510     -0.774507      0.774507       8.16780       8.94230    
  53  0.565225     -0.570532      -1.39171       1.39171       8.66843       10.0601    
  54  0.884775     -0.122422     -0.298627      0.298627       8.11836       8.41699    
  55  0.289837      -1.23844      -3.02094       3.02094       8.13105       11.1520    
  56  0.282389      -1.26447      -3.08444       3.08444       8.10868       11.1931    
  57  0.737455     -0.304550     -0.742893      0.742893       8.14239       8.88528    
  58  0.436668E-02  -5.43375      -13.2546       13.2546       10.3553       23.6099    
  59  0.809492     -0.211348     -0.515545      0.515545       8.65449       9.17003    
  60  0.957786E-01  -2.34572      -5.72194       5.72194       8.26438       13.9863    
  61  0.335750      -1.09139      -2.66224       2.66224       8.25909       10.9213    
  62  0.687327     -0.374945     -0.914608      0.914608       8.14074       9.05535    
  63  0.340103      -1.07851      -2.63081       2.63081       8.18645       10.8173    
  64  0.902520     -0.102564     -0.250186      0.250186       8.17061       8.42080    
  65  0.872595     -0.136284     -0.332438      0.332438       8.15009       8.48253    
  66  0.773535     -0.256784     -0.626378      0.626378       8.18586       8.81224    
  67  0.627340     -0.466267      -1.13737       1.13737       8.15644       9.29382    
  68  0.918418     -0.851028E-01 -0.207592      0.207592       8.13105       8.33864    
  69  0.347451      -1.05713      -2.57868       2.57868       8.15803       10.7367    
  70  0.962049     -0.386898E-01 -0.943766E-01  0.943766E-01   7.99923       8.09361    
loop,thermsimp(1:2)        5  0.788577E-01   2.33041    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     80          8.71          0.87          1.12         24.46          0.02          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.71
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.43931               139
loop is:        5
neval is:       79
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        6
neval is:       79


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       79     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.806234     -0.215382     -0.525384      0.525384       7.99923       8.52462    
   2  0.337878      -1.08507      -2.64683       2.64683       8.16117       10.8080    
   3  0.930612     -0.719127E-01 -0.175418      0.175418       8.11412       8.28954    
   4  0.843645     -0.170024     -0.414742      0.414742       8.13285       8.54759    
   5  0.757799     -0.277337     -0.676511      0.676511       8.20895       8.88546    
   6  0.627925     -0.465335      -1.13510       1.13510       8.13105       9.26615    
   7  0.412314     -0.885971      -2.16116       2.16116       8.14433       10.3055    
   8  0.282274      -1.26488      -3.08543       3.08543       8.11836       11.2038    
   9  0.426609E-01  -3.15447      -7.69475       7.69475       8.17061       15.8654    
  10  0.484876     -0.723862      -1.76573       1.76573       8.15194       9.91767    
  11  0.372210     -0.988296      -2.41077       2.41077       8.15009       10.5609    
  12  0.740507     -0.300421     -0.732821      0.732821       8.33310       9.06592    
  13  0.361519      -1.01744      -2.48186       2.48186       8.13456       10.6164    
  14  0.421034     -0.865042      -2.11011       2.11011       8.18586       10.2960    
  15  0.780595     -0.247699     -0.604217      0.604217       8.14239       8.74661    
  16  0.758410     -0.276531     -0.674546      0.674546       8.22013       8.89467    
  17  0.522921E-01  -2.95091      -7.19820       7.19820       8.62330       15.8215    
  18  0.609673     -0.494833      -1.20705       1.20705       8.16780       9.37485    
  19  0.204029      -1.58949      -3.87727       3.87727       8.77612       12.6534    
  20  0.516385     -0.660902      -1.61215       1.61215       8.14074       9.75289    
  21  0.323918      -1.12726      -2.74975       2.74975       8.10690       10.8567    
  22  0.671820     -0.397765     -0.970275      0.970275       8.13759       9.10787    
  23  0.850344     -0.162114     -0.395447      0.395447       8.78420       9.17964    
  24  0.515631     -0.662364      -1.61571       1.61571       8.13134       9.74705    
  25  0.919408     -0.840249E-01 -0.204963      0.204963       8.13879       8.34375    
  26  0.516519     -0.660643      -1.61152       1.61152       8.65449       10.2660    
  27  0.986900     -0.131869E-01 -0.321669E-01  0.321669E-01   8.76353       8.79569    
  28  0.127351      -2.06081      -5.02696       5.02696       8.15644       13.1834    
  29  0.775028E-01  -2.55744      -6.23840       6.23840       8.15693       14.3953    
  30  0.778307     -0.250634     -0.611375      0.611375       8.14279       8.75416    
  31  0.548570     -0.600441      -1.46466       1.46466       8.31291       9.77757    
  32  0.191672      -1.65197      -4.02967       4.02967       8.81582       12.8455    
  33  0.593733     -0.521326      -1.27168       1.27168       8.34870       9.62038    
  34  0.612853     -0.489631      -1.19436       1.19436       8.41137       9.60574    
  35  0.872749     -0.136107     -0.332007      0.332007       8.12442       8.45643    
  36  0.291105E-01  -3.53666      -8.62702       8.62702       8.17280       16.7998    
  37  0.310804      -1.16859      -2.85056       2.85056       8.17411       11.0247    
  38  0.238051      -1.43527      -3.50108       3.50108       8.26030       11.7614    
  39  0.600295     -0.510334      -1.24486       1.24486       8.66843       9.91329    
  40  0.856575     -0.154813     -0.377638      0.377638       8.26433       8.64196    
  41  0.127990      -2.05580      -5.01475       5.01475       8.74110       13.7559    
  42  0.390396E-01  -3.24318      -7.91113       7.91113       8.36292       16.2740    
  43  0.469298E-01  -3.05910      -7.46212       7.46212       8.19144       15.6536    
  44  0.170208      -1.77073      -4.31938       4.31938       8.10508       12.4245    
  45  0.457801     -0.781320      -1.90588       1.90588       8.08348       9.98937    
  46  0.451589     -0.794982      -1.93921       1.93921       8.10606       10.0453    
  47  0.601844     -0.507757      -1.23858       1.23858       8.18467       9.42325    
  48  0.923684     -0.793857E-01 -0.193647      0.193647       8.34119       8.53484    
  49  0.113154      -2.17901      -5.31528       5.31528       8.15803       13.4733    
  50  0.652894     -0.426340      -1.03998       1.03998       8.27811       9.31809    
  51  0.600010     -0.510809      -1.24602       1.24602       8.22045       9.46647    
  52  0.768679     -0.263082     -0.641740      0.641740       8.18645       8.82819    
  53  0.999310     -0.690144E-03 -0.168348E-02  0.168348E-02   8.25909       8.26077    
  54  0.798907     -0.224511     -0.547652      0.547652       8.13105       8.67870    
  55  0.246243      -1.40144      -3.41855       3.41855       8.40191       11.8205    
  56  0.798424     -0.225115     -0.549128      0.549128       8.10868       8.65781    
  57  0.120926      -2.11257      -5.15323       5.15323       8.15253       13.3058    
  58  0.771675     -0.259192     -0.632251      0.632251       8.27399       8.90625    
  59  0.670629     -0.399540     -0.974603      0.974603       8.23487       9.20947    
  60  0.127505      -2.05960      -5.02401       5.02401       8.21319       13.2372    
  61  0.375387     -0.979799      -2.39004       2.39004       8.00399       10.3940    
  62  0.572534E-01  -2.86027      -6.97710       6.97710       8.16337       15.1405    
  63  0.358654      -1.02540      -2.50126       2.50126       8.46086       10.9621    
  64  0.903087     -0.101937     -0.248656      0.248656       8.12192       8.37057    
  65  0.112925      -2.18103      -5.32021       5.32021       8.26978       13.5900    
  66  0.727950     -0.317523     -0.774539      0.774539       8.26438       9.03892    
  67  0.703618E-01  -2.65411      -6.47420       6.47420       8.01098       14.4852    
  68  0.461106     -0.774128      -1.88834       1.88834       8.13105       10.0194    
  69  0.546854     -0.603573      -1.47231       1.47231       8.20399       9.67629    
  70  0.264522      -1.32983      -3.24388       3.24388       8.70933       11.9532    
loop,thermsimp(1:2)        6  0.525384       2.64683    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     81          8.13          0.86          1.13         24.38          0.06          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     82          8.15          0.86          1.13         24.32          0.04          0.05         26.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

   80    8.1324        1.128     -1.870      3.177     -102.6      1.394    
                      0.3559      1.337     -99.70      3.696    -0.5681E-01

                       2.243     -1.052      1.530      7147.      3568.    

                     -0.1440      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6212.      451.7    

                       1.433     -5.842     -4.309     -8.442      6.688    

                      -14.82     -3.569      9751.      0.000     0.1286E+05



                       1560.     0.1262E+05 -4034.      9289.      6035.    

                       5823.     0.2779E-01 0.1935     0.1031E-01 0.1213    

                     -0.2486    -0.8178E-01 0.1903     0.1197     0.6736E-01



                     -0.4517    -0.7714      0.000     0.9317E-01-0.6819E-01

                      0.1031E-01 0.1099    -0.7116    -0.1419     0.5102E-01

                      0.5547E-01-0.1970E-01-0.6581     -1.201      7333.    



                      -1.089     -1.252     -2.241     -2.310    -0.3807    

                     -0.3252      9.225      8.685    -0.1881E+05 -4.000    

                      -1.584     -2.146      9.304      8.874    -0.1908E+05



                      -4.000     0.4890    -0.4412      8.865      9.088    

                     -0.1908E+05 -7.000    -0.7477    -0.6672      9.044    

                       8.778    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.43931               139
loop is:        6
neval is:       81
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        7
neval is:       81


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       81     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.117714      -2.13949      -5.21890       5.21890       8.25909       13.4780    
   2  0.421875     -0.863045      -2.10524       2.10524       8.11412       10.2194    
   3  0.700103     -0.356528     -0.869685      0.869685       8.13879       9.00847    
   4  0.209367      -1.56367      -3.81428       3.81428       8.12192       11.9362    
   5  0.117251      -2.14344      -5.22852       5.22852       8.12442       13.3529    
   6  0.898330     -0.107218     -0.261538      0.261538       7.99923       8.26077    
   7  0.209806      -1.56157      -3.80917       3.80917       8.34119       12.1504    
   8  0.917155     -0.864790E-01 -0.210949      0.210949       8.13285       8.34380    
   9  0.120514E-01  -4.41857      -10.7783       10.7783       8.26433       19.0426    
  10  0.189983      -1.66082      -4.05127       4.05127       8.10868       12.1600    
  11  0.257131      -1.35817      -3.31300       3.31300       8.13105       11.4440    
  12  0.913158E-01  -2.39343      -5.83833       5.83833       8.14239       13.9807    
  13  0.336531      -1.08906      -2.65657       2.65657       8.14279       10.7994    
  14  0.318351      -1.14460      -2.79204       2.79204       8.76353       11.5556    
  15  0.919606     -0.838101E-01 -0.204439      0.204439       8.18645       8.39089    
  16  0.719771E-01  -2.63141      -6.41883       6.41883       8.20895       14.6278    
  17  0.788730E-01  -2.53992      -6.19566       6.19566       8.22013       14.4158    
  18  0.905929     -0.987941E-01 -0.240990      0.240990       8.27399       8.51498    
  19  0.665501     -0.407215     -0.993326      0.993326       8.26438       9.25771    
  20  0.812159     -0.208059     -0.507523      0.507523       8.33310       8.84062    
  21  0.412726E-01  -3.18756      -7.77546       7.77546       8.13759       15.9130    
  22  0.256064      -1.36233      -3.32315       3.32315       8.78420       12.1073    
  23  0.277519      -1.28187      -3.12687       3.12687       8.23487       11.3617    
  24  0.279550      -1.27457      -3.10909       3.10909       8.13105       11.2401    
  25  0.857884     -0.153286     -0.373913      0.373913       8.27811       8.65202    
  26  0.205158      -1.58398      -3.86381       3.86381       8.16780       12.0316    
  27  0.482085     -0.729635      -1.77981       1.77981       8.18467       9.96448    
  28  0.494966E-01  -3.00585      -7.33222       7.33222       8.22045       15.5527    
  29  0.338791      -1.08237      -2.64025       2.64025       8.41137       11.0516    
  30  0.249491E-01  -3.69092      -9.00331       9.00331       8.34870       17.3520    
  31  0.480710     -0.732491      -1.78678       1.78678       8.20399       9.99076    
  32  0.908951E-01  -2.39805      -5.84960       5.84960       8.13134       13.9809    
  33  0.283223      -1.26152      -3.07725       3.07725       8.14074       11.2180    
  34  0.277734      -1.28109      -3.12498       3.12498       8.31291       11.4379    
  35  0.504407     -0.684372      -1.66940       1.66940       8.66843       10.3378    
  36  0.251881      -1.37880      -3.36332       3.36332       8.15194       11.5153    
  37  0.568193     -0.565294      -1.37893       1.37893       8.08348       9.46241    
  38  0.186135      -1.68128      -4.10117       4.10117       8.13105       12.2322    
  39  0.964582     -0.360604E-01 -0.879627E-01  0.879627E-01   8.10606       8.19402    
  40  0.493045     -0.707155      -1.72497       1.72497       8.65449       10.3795    
  41  0.477950     -0.738248      -1.80082       1.80082       8.18586       9.98668    
  42  0.114879      -2.16388      -5.27837       5.27837       8.14433       13.4227    
  43  0.324003      -1.12700      -2.74911       2.74911       8.00399       10.7531    
  44  0.720573     -0.327708     -0.799384      0.799384       8.15009       8.94947    
  45  0.934913     -0.673019E-01 -0.164171      0.164171       8.13456       8.29873    
  46  0.516467     -0.660745      -1.61176       1.61176       8.16117       9.77294    
  47  0.351513      -1.04551      -2.55032       2.55032       8.10690       10.6572    
  48  0.310221      -1.17047      -2.85515       2.85515       8.46086       11.3160    
  49  0.467571     -0.760204      -1.85438       1.85438       8.17411       10.0285    
  50  0.700644     -0.355756     -0.867800      0.867800       8.11836       8.98616    
  51  0.608579E-01  -2.79921      -6.82816       6.82816       8.26030       15.0885    
  52  0.360106      -1.02136      -2.49141       2.49141       8.40191       10.8933    
  53  0.355744      -1.03354      -2.52114       2.52114       8.70933       11.2305    
  54  0.356778      -1.03064      -2.51406       2.51406       8.10508       10.6191    
  55  0.209214      -1.56440      -3.81606       3.81606       8.77612       12.5922    
  56  0.513034     -0.667413      -1.62803       1.62803       8.81582       10.4438    
  57  0.131750      -2.02685      -4.94412       4.94412       8.15644       13.1006    
  58  0.860948     -0.149721     -0.365216      0.365216       8.21319       8.57841    
  59  0.245301      -1.40527      -3.42789       3.42789       8.15253       11.5804    
  60  0.411604     -0.887695      -2.16537       2.16537       8.15803       10.3234    
  61  0.444838     -0.810046      -1.97596       1.97596       8.26978       10.2457    
  62  0.173997      -1.74872      -4.26567       4.26567       8.74110       13.0068    
  63  0.616177     -0.484222      -1.18117       1.18117       8.15693       9.33810    
  64  0.794601     -0.229915     -0.560835      0.560835       8.01098       8.57181    
  65  0.926158     -0.767101E-01 -0.187120      0.187120       8.16337       8.35049    
  66  0.614053     -0.487673      -1.18959       1.18959       8.19144       9.38102    
  67  0.228742      -1.47516      -3.59838       3.59838       8.62330       12.2217    
  68  0.162916      -1.81452      -4.42619       4.42619       8.17061       12.5968    
  69  0.437909     -0.825744      -2.01425       2.01425       8.36292       10.3772    
  70  0.966188     -0.343970E-01 -0.839051E-01  0.839051E-01   8.13243       8.21634    
loop,thermsimp(1:2)        7   5.21890       2.10524    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     83          8.09          0.86          1.13         24.38          0.05          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     84          8.14          0.86          1.12         24.73          0.05          0.05         26.82
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.43931               139
loop is:        7
neval is:       83
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        8
neval is:       83


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      139
neval,tstepnext:       83     139

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.487401     -0.718668      -1.75306       1.75306       8.10606       9.85912    
   2  0.568497     -0.564760      -1.37763       1.37763       8.13243       9.51006    
   3  0.632037E-01  -2.76139      -6.73591       6.73591       7.99923       14.7351    
   4  0.184325      -1.69105      -4.12501       4.12501       8.13456       12.2596    
   5  0.949772     -0.515332E-01 -0.125706      0.125706       8.13285       8.25856    
   6  0.512179     -0.669081      -1.63210       1.63210       8.16337       9.79547    
   7  0.573767     -0.555532      -1.35512       1.35512       8.18645       9.54157    
   8  0.590189     -0.527312      -1.28628       1.28628       8.27399       9.56027    
   9  0.323917      -1.12727      -2.74976       2.74976       8.01098       10.7607    
  10  0.246420E-01  -3.70330      -9.03352       9.03352       8.21319       17.2467    
  11  0.923153E-01  -2.38255      -5.81178       5.81178       8.27811       14.0899    
  12  0.236043      -1.44374      -3.52174       3.52174       8.33310       11.8548    
  13  0.885388     -0.121730     -0.296937      0.296937       8.15009       8.44703    
  14  0.617726     -0.481710      -1.17504       1.17504       8.11836       9.29340    
  15  0.349992      -1.04985      -2.56090       2.56090       8.13879       10.6997    
  16  0.892028     -0.114257     -0.278710      0.278710       8.26438       8.54309    
  17  0.382423     -0.961227      -2.34474       2.34474       8.15693       10.5017    
  18  0.850527     -0.161899     -0.394924      0.394924       8.19144       8.58636    
  19  0.653461     -0.425472      -1.03786       1.03786       8.08348       9.12134    
  20  0.413959     -0.881988      -2.15145       2.15145       8.16117       10.3126    
  21  0.807813     -0.213424     -0.520609      0.520609       8.18467       8.70528    
  22  0.348045      -1.05542      -2.57451       2.57451       8.18586       10.7604    
  23  0.435267     -0.831795      -2.02901       2.02901       8.20399       10.2330    
  24  0.434284     -0.834056      -2.03452       2.03452       8.17411       10.2086    
  25  0.983564     -0.165728E-01 -0.404264E-01  0.404264E-01   8.11412       8.15455    
  26  0.545923     -0.605277      -1.47646       1.47646       8.26978       9.74624    
  27  0.227140      -1.48219      -3.61552       3.61552       8.15803       11.7735    
  28  0.965085     -0.355395E-01 -0.866921E-01  0.866921E-01   8.66843       8.75512    
  29  0.183882      -1.69346      -4.13088       4.13088       8.36292       12.4938    
  30  0.187300E-02  -6.28022      -15.3194       15.3194       8.65449       23.9739    
  31  0.428736     -0.846914      -2.06589       2.06589       8.81582       10.8817    
  32  0.459764     -0.777041      -1.89545       1.89545       8.10508       10.0005    
  33  0.914786     -0.890649E-01 -0.217257      0.217257       8.10690       8.32416    
  34  0.872236     -0.136696     -0.333444      0.333444       8.00399       8.33744    
  35  0.789367     -0.236524     -0.576956      0.576956       8.14279       8.71974    
  36  0.619233E-01  -2.78186      -6.78583       6.78583       8.40191       15.1877    
  37  0.138004E-01  -4.28306      -10.4477       10.4477       8.41137       18.8591    
  38  0.287035      -1.24815      -3.04463       3.04463       8.14074       11.1854    
  39  0.138758E-01  -4.27761      -10.4344       10.4344       8.70933       19.1438    
  40  0.593330     -0.522005      -1.27333       1.27333       8.13105       9.40438    
  41  0.399445     -0.917679      -2.23851       2.23851       8.46086       10.6994    
  42  0.982947     -0.172001E-01 -0.419566E-01  0.419566E-01   8.23487       8.27683    
  43  0.259534      -1.34887      -3.29031       3.29031       8.31291       11.6032    
  44  0.816592E-01  -2.50520      -6.11097       6.11097       8.13105       14.2420    
  45  0.166083      -1.79527      -4.37922       4.37922       8.15194       12.5312    
  46  0.967370     -0.331741E-01 -0.809221E-01  0.809221E-01   8.76353       8.84445    
  47  0.371024     -0.991488      -2.41855       2.41855       8.15253       10.5711    
  48  0.941964     -0.597885E-01 -0.145843      0.145843       8.12192       8.26776    
  49  0.130219      -2.03854      -4.97263       4.97263       8.16780       13.1404    
  50  0.599455     -0.511734      -1.24828       1.24828       8.78420       10.0325    
  51  0.519323     -0.655230      -1.59831       1.59831       8.34119       9.93951    
  52  0.829175     -0.187324     -0.456943      0.456943       8.10868       8.56563    
  53  0.341525      -1.07433      -2.62064       2.62064       8.62330       11.2439    
  54  0.686480     -0.376178     -0.917616      0.917616       8.13105       9.04867    
  55  0.273157      -1.29771      -3.16552       3.16552       8.77612       11.9416    
  56  0.472999     -0.748662      -1.82622       1.82622       8.17061       9.99683    
  57  0.591611     -0.524905      -1.28041       1.28041       8.74110       10.0215    
  58  0.253673      -1.37171      -3.34603       3.34603       8.15644       11.5025    
  59  0.522398     -0.649326      -1.58391       1.58391       8.12442       9.70833    
  60  0.927744     -0.749995E-01 -0.182947      0.182947       8.14433       8.32728    
  61  0.470581     -0.753787      -1.83872       1.83872       8.25909       10.0978    
  62  0.365015      -1.00782      -2.45838       2.45838       8.14239       10.6008    
  63  0.732288     -0.311582     -0.760046      0.760046       8.13134       8.89138    
  64  0.536772E-01  -2.92477      -7.13443       7.13443       8.22013       15.3546    
  65  0.725826     -0.320444     -0.781664      0.781664       8.20895       8.99061    
  66  0.806822     -0.214652     -0.523604      0.523604       8.26030       8.78391    
  67  0.104580E-01  -4.56039      -11.1242       11.1242       8.22045       19.3447    
  68  0.818881     -0.199816     -0.487414      0.487414       8.13759       8.62501    
  69  0.330445      -1.10732      -2.70109       2.70109       8.34870       11.0498    
  70  0.316989      -1.14889      -2.80250       2.80250       8.08979       10.8923    
loop,thermsimp(1:2)        8   1.75306       1.37763    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:     85       2032.83          0.86          1.12         24.45          0.07          0.05         26.56
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:     86        611.28          0.86          1.12         24.42          0.04          0.05         26.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4      8.65
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    2.43931               139
loop is:        8
neval is:       85
 ............
 ............
 ............
 ............
 All the processors had case 4
 ---> shrink the simplex by replacing each point other than the current minimum
      by a point mid-way between its current position and the minimum




 after shrink
before func_dist: nevalp,nrounds (this is a value left from share outcome loop so 1 or 2):      86       2
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)
 ............
 ............
iter,obj,time:     87          8.11          0.86          1.12         24.39          0.04          0.05         26.45
iter,obj,time:     88          8.10          0.86          1.12         24.37          0.12          0.05         26.52
iter,obj,time:     89          8.13          0.86          1.12         24.41          0.06          0.05         26.50
iter,obj,time:     90          8.05          0.86          1.12         24.45          0.06          0.05         26.55
iter,obj,time:     91          8.11          0.86          1.12         24.43          0.03          0.05         26.48
iter,obj,time:     92          8.01          0.86          1.12         24.70          0.09          0.05         26.82
iter,obj,time:     93          8.12          0.87          1.13         24.41          0.07          0.05         26.52
iter,obj,time:     94          8.10          0.86          1.12         24.41          0.07          0.04         26.52
iter,obj,time:     95          8.09          0.86          1.12         24.34          0.16          0.05         26.53
iter,obj,time:     96          8.12          0.86          1.12         24.34          0.07          0.05         26.44
iter,obj,time:     97          8.11          0.86          1.12         24.40          0.06          0.05         26.50
iter,obj,time:     98          8.12          0.86          1.12         24.39          0.06          0.05         26.48
iter,obj,time:     99          8.11          0.86          1.12         24.42          0.07          0.05         26.53
iter,obj,time:    100          8.20          0.86          1.12         24.48          0.07          0.04         26.57
iter,obj,time:    101          8.10          0.86          1.12         24.72          0.09          0.05         26.84
iter,obj,time:    102          8.33          0.86          1.11         24.29          0.16          0.04         26.47
iter,obj,time:    103          8.11          0.86          1.12         24.35          0.04          0.05         26.43
iter,obj,time:    104          8.15          0.87          1.12         24.43          0.10          0.05         26.57
iter,obj,time:    105          8.11          0.86          1.12         24.30          0.11          0.04         26.43
iter,obj,time:    106          8.07          0.86          1.12         24.40          0.05          0.04         26.48
iter,obj,time:    107          8.10          0.86          1.12         24.55          0.10          0.05         26.68
iter,obj,time:    108          8.11          0.86          1.13         24.57          0.11          0.05         26.71
iter,obj,time:    109          8.09          0.86          1.13         24.32          0.08          0.04         26.44
iter,obj,time:    110          8.12          0.86          1.12         24.42          0.05          0.05         26.51
iter,obj,time:    111          8.14          0.87          1.12         24.50          0.09          0.05         26.62
iter,obj,time:    112          8.10          0.86          1.12         24.38          0.07          0.05         26.48
iter,obj,time:    113          8.15          0.86          1.12         24.45          0.07          0.05         26.56
iter,obj,time:    114          8.09          0.86          1.12         24.34          0.03          0.05         26.40
iter,obj,time:    115          8.07          0.86          1.12         24.43          0.06          0.05         26.53
iter,obj,time:    116          8.20          0.86          1.13         24.69          0.07          0.05         26.80
iter,obj,time:    117          8.05          0.87          1.12         24.35          0.14          0.05         26.52
iter,obj,time:    118          8.10          0.86          1.12         24.34          0.11          0.05         26.48
iter,obj,time:    119          8.71          0.86          1.13         24.35          0.06          0.05         26.45
iter,obj,time:    120          8.26          0.86          1.13         24.39          0.07          0.05         26.51
iter,obj,time:    121          8.17          0.86          1.12         24.34          0.05          0.05         26.42
iter,obj,time:    122          8.12          0.86          1.13         24.48          0.07          0.05         26.58
iter,obj,time:    123          8.10          0.86          1.12         24.38          0.05          0.05         26.45
iter,obj,time:    124          8.09          0.86          1.12         24.38          0.08          0.05         26.49
iter,obj,time:    125          8.10          0.86          1.12         24.39          0.03          0.05         26.45
iter,obj,time:    126          8.10          0.86          1.12         24.44          0.18          0.05         26.65
iter,obj,time:    127          8.10          0.86          1.12         24.28          0.20          0.05         26.50
iter,obj,time:    128          8.20          0.86          1.12         24.34          0.09          0.05         26.46
iter,obj,time:    129          8.09          0.86          1.12         24.52          0.08          0.05         26.64
iter,obj,time:    130          8.07          0.86          1.13         24.64          0.09          0.05         26.77
iter,obj,time:    131          8.03          0.86          1.13         24.37          0.06          0.05         26.47
iter,obj,time:    132          8.35          0.86          1.12         24.38          0.05          0.05         26.46
iter,obj,time:    133          8.05          0.86          1.13         24.43          0.09          0.05         26.55
iter,obj,time:    134          8.21          0.86          1.13         24.55          0.09          0.05         26.68
iter,obj,time:    135          8.11          0.86          1.13         24.51          0.07          0.05         26.61
iter,obj,time:    136          8.59          0.86          1.12         24.34          0.09          0.05         26.46
iter,obj,time:    137          8.11          0.86          1.12         24.37          0.09          0.05         26.49
iter,obj,time:    138          8.18          0.86          1.13         24.57          0.07          0.05         26.67
iter,obj,time:    139          8.11          0.86          1.12         24.38          0.05          0.05         26.46
iter,obj,time:    140          8.15          0.86          1.13         24.37          0.08          0.05         26.48
iter,obj,time:    141          8.32          0.86          1.13         24.35          0.04          0.05         26.42
iter,obj,time:    142          8.09          0.86          1.12         24.69          0.05          0.05         26.78
iter,obj,time:    143          8.22          0.87          1.12         24.52          0.06          0.04         26.61
iter,obj,time:    144          8.11          0.86          1.12         24.34          0.14          0.04         26.50
iter,obj,time:    145          8.09          0.86          1.13         24.36          0.11          0.05         26.51
iter,obj,time:    146          8.13          0.86          1.13         24.34          0.07          0.05         26.45
iter,obj,time:    147          8.11          0.86          1.13         24.57          0.06          0.05         26.67
iter,obj,time:    148          8.00          0.86          1.13         24.37          0.07          0.05         26.48
iter,obj,time:    149          8.17          0.86          1.12         24.43          0.05          0.05         26.52
iter,obj,time:    150          8.09          0.86          1.13         24.32          0.10          0.05         26.46
iter,obj,time:    151          8.11          0.86          1.13         24.71          0.07          0.05         26.81
iter,obj,time:    152          8.12          0.86          1.12         24.43          0.07          0.05         26.54
iter,obj,time:    153          8.33          0.86          1.12         24.41          0.07          0.04         26.51
iter,obj,time:    154          8.11          0.86          1.13         24.36          0.12          0.05         26.52
iter,obj,time:    155          8.63          0.86          1.13         24.32          0.09          0.05         26.44


 after func_dist
 increase count of number of evals per procesor (nevalp=nevalp+nrounds) 
after func_dist: nevalp,nrounds:     156      70
 note that before this the last time nrounds was assigned a value was in the share outcome loop (1 or 2)




 starting do loop for updating neval=neval+1 within do i=1,np1 which has some printing (now commented out)

after updating neval in do loop, neval:     154




loop,nloop:       8      95
 CHECK loop<?nloop
-----IF loop<nloop, repeat main cycle
-----IF loop=nloop, calc hmean&stdev, write best of h so far and test for convergence (there are other conditions so see code) 
--------------------------------------------------IF not convgd cond then repeat main cycle

 right before: 250 IF (loop < nloop) CYCLE Main_loop 


beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    2.43931               139
loop is:        9
neval is:      154


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :    1.21966               208

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      154     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.878288E-01  -2.43237      -2.96665       2.96665       8.11412       11.0808    
   2  0.192227      -1.64908      -2.01131       2.01131       8.10666       10.1180    
   3  0.872733     -0.136126     -0.166027      0.166027       8.10022       8.26625    
   4  0.444113     -0.811675     -0.989966      0.989966       8.12653       9.11650    
   5  0.194382      -1.63793      -1.99772       1.99772       8.04995       10.0477    
   6  0.358074      -1.02702      -1.25261       1.25261       8.10859       9.36120    
   7  0.461693     -0.772855     -0.942618      0.942618       8.01041       8.95303    
   8  0.180202      -1.71368      -2.09010       2.09010       8.11627       10.2064    
   9  0.944954     -0.566187E-01 -0.690555E-01  0.690555E-01   8.10151       8.17056    
  10  0.738770     -0.302769     -0.369274      0.369274       8.09048       8.45975    
  11  0.822491E-01  -2.49800      -3.04671       3.04671       8.12070       11.1674    
  12  0.313602      -1.15963      -1.41435       1.41435       8.10753       9.52188    
  13  0.978185     -0.220567E-01 -0.269016E-01  0.269016E-01   8.11639       8.14329    
  14  0.540591E-01  -2.91768      -3.55857       3.55857       8.10725       11.6658    
  15  0.872885     -0.135951     -0.165814      0.165814       8.20333       8.36914    
  16  0.209079      -1.56504      -1.90881       1.90881       8.09541       10.0042    
  17  0.789205E-01  -2.53931      -3.09709       3.09709       8.32632       11.4234    
  18  0.746404     -0.292489     -0.356736      0.356736       8.10615       8.46289    
  19  0.110219      -2.20529      -2.68970       2.68970       8.14939       10.8391    
  20  0.656016     -0.421570     -0.514170      0.514170       8.10621       8.62038    
  21  0.665675     -0.406953     -0.496343      0.496343       8.06820       8.56454    
  22  0.563292     -0.573957     -0.700030      0.700030       8.10197       8.80200    
  23  0.615044     -0.486062     -0.592829      0.592829       8.10621       8.69904    
  24  0.128081      -2.05509      -2.50651       2.50651       8.09139       10.5979    
  25  0.459916     -0.776711     -0.947321      0.947321       8.12132       9.06864    
  26  0.433297     -0.836332      -1.02004       1.02004       8.13794       9.15798    
  27  0.225675      -1.48866      -1.81566       1.81566       8.10206       9.91771    
  28  0.808805     -0.212197     -0.258808      0.258808       8.15194       8.41075    
  29  0.578238     -0.547770     -0.668091      0.668091       8.09118       8.75927    
  30  0.569572     -0.562871     -0.686509      0.686509       8.07122       8.75773    
  31  0.291272      -1.23350      -1.50444       1.50444       8.20225       9.70669    
  32  0.144426      -1.93499      -2.36002       2.36002       8.05410       10.4141    
  33  0.908321     -0.961572E-01 -0.117279      0.117279       8.09629       8.21356    
  34  0.593166     -0.522281     -0.637004      0.637004       8.71362       9.35062    
  35  0.327630      -1.11587      -1.36098       1.36098       8.25932       9.62030    
  36  0.823214E-01  -2.49712      -3.04564       3.04564       8.17237       11.2180    
  37  0.742531     -0.297691     -0.363081      0.363081       8.12153       8.48461    
  38  0.476201E-01  -3.04450      -3.71325       3.71325       8.09862       11.8119    
  39  0.183829      -1.69375      -2.06580       2.06580       8.09327       10.1591    
  40  0.417257     -0.874053      -1.06605       1.06605       8.10246       9.16850    
  41  0.647723E-01  -2.73688      -3.33805       3.33805       8.09847       11.4365    
  42  0.123950E-01  -4.39046      -5.35486       5.35486       8.10297       13.4578    
  43  0.281372E-01  -3.57066      -4.35499       4.35499       8.19746       12.5524    
  44  0.883044     -0.124380     -0.151701      0.151701       8.09096       8.24266    
  45  0.445413     -0.808754     -0.986403      0.986403       8.06918       9.05559    
  46  0.418101     -0.872031      -1.06358       1.06358       8.02972       9.09329    
  47  0.301534      -1.19887      -1.46221       1.46221       8.35386       9.81607    
  48  0.674500     -0.393783     -0.480281      0.480281       8.04862       8.52890    
  49  0.732783     -0.310905     -0.379198      0.379198       8.21185       8.59105    
  50  0.970355     -0.300929E-01 -0.367031E-01  0.367031E-01   8.10953       8.14623    
  51  0.981589     -0.185824E-01 -0.226642E-01  0.226642E-01   8.59370       8.61636    
  52  0.677253     -0.389711     -0.475313      0.475313       8.11494       8.59025    
  53  0.800731     -0.222230     -0.271045      0.271045       8.17798       8.44903    
  54  0.529544     -0.635738     -0.775383      0.775383       8.11497       8.89036    
  55  0.814619     -0.205035     -0.250072      0.250072       8.15023       8.40031    
  56  0.909218     -0.951702E-01 -0.116075      0.116075       8.31668       8.43275    
  57  0.269472      -1.31129      -1.59933       1.59933       8.09126       9.69059    
  58  0.166504      -1.79274      -2.18652       2.18652       8.22182       10.4083    
  59  0.328775      -1.11238      -1.35672       1.35672       8.10547       9.46220    
  60  0.333602      -1.09781      -1.33895       1.33895       8.09102       9.42996    
  61  0.213893      -1.54228      -1.88105       1.88105       8.12933       10.0104    
  62  0.401720     -0.911999      -1.11233       1.11233       8.10621       9.21854    
  63  0.453769     -0.790168     -0.963734      0.963734       8.00020       8.96393    
  64  0.649690E-01  -2.73384      -3.33435       3.33435       8.16648       11.5008    
  65  0.510128     -0.673093     -0.820943      0.820943       8.08929       8.91023    
  66  0.430053     -0.843847      -1.02920       1.02920       8.11383       9.14303    
  67  0.528469E-01  -2.94036      -3.58623       3.58623       8.11654       11.7028    
  68  0.887506     -0.119339     -0.145553      0.145553       8.32928       8.47483    
  69  0.499442     -0.694264     -0.846764      0.846764       8.11426       8.96103    
  70  0.432451     -0.838287      -1.02242       1.02242       8.62600       9.64842    
loop,thermsimp(1:2)        9   2.96665       2.01131    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    156          8.07          0.86          1.12         24.53          0.02          0.05         26.58
Just calling func    0   0         26.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    157          8.09          0.86          1.13         24.40          0.02          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:        9
neval is:      156
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       10
neval is:      156


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      156     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.611807     -0.491339     -0.599265      0.599265       8.11639       8.71565    
   2  0.877337     -0.130865     -0.159610      0.159610       8.10953       8.26914    
   3  0.821280     -0.196891     -0.240140      0.240140       8.10151       8.34165    
   4  0.989636     -0.104181E-01 -0.127065E-01  0.127065E-01   8.09629       8.10899    
   5  0.492813     -0.707625     -0.863060      0.863060       8.09096       8.95402    
   6  0.904083     -0.100835     -0.122984      0.122984       8.10022       8.22320    
   7  0.490620     -0.712086     -0.868501      0.868501       8.20333       9.07183    
   8  0.572439     -0.557850     -0.680385      0.680385       8.15023       8.83062    
   9  0.588753     -0.529749     -0.646113      0.646113       8.15194       8.79805    
  10  0.341799      -1.07353      -1.30934       1.30934       8.31668       9.62602    
  11  0.449605     -0.799385     -0.974976      0.974976       8.17798       9.15296    
  12  0.740720     -0.300132     -0.366059      0.366059       8.09048       8.45654    
  13  0.173164E-01  -4.05610      -4.94705       4.94705       8.10615       13.0532    
  14  0.828389     -0.188272     -0.229627      0.229627       8.32928       8.55890    
  15  0.110451      -2.20318      -2.68713       2.68713       8.12153       10.8087    
  16  0.646816     -0.435693     -0.531397      0.531397       8.04862       8.58001    
  17  0.857676     -0.153529     -0.187252      0.187252       8.06820       8.25545    
  18  0.691202E-02  -4.97449      -6.06718       6.06718       8.11494       14.1821    
  19  0.530885     -0.633210     -0.772299      0.772299       8.21185       8.98415    
  20  0.742957     -0.297117     -0.362382      0.362382       8.59370       8.95608    
  21  0.883526E-01  -2.42642      -2.95940       2.95940       8.10621       11.0656    
  22  0.599138     -0.512263     -0.624785      0.624785       8.10621       8.73100    
  23  0.476407     -0.741482     -0.904354      0.904354       8.07122       8.97558    
  24  0.509994E-01  -2.97594      -3.62963       3.62963       8.09118       11.7208    
  25  0.669768     -0.400824     -0.488868      0.488868       8.10197       8.59084    
  26  0.874430     -0.134183     -0.163657      0.163657       8.11497       8.27863    
  27  0.830739     -0.185440     -0.226173      0.226173       8.08929       8.31546    
  28  0.166673      -1.79172      -2.18529       2.18529       8.01041       10.1957    
  29  0.578742     -0.546898     -0.667028      0.667028       8.11426       8.78129    
  30  0.433531     -0.835791      -1.01938       1.01938       8.00020       9.01958    
  31  0.979127     -0.210935E-01 -0.257268E-01  0.257268E-01   8.06918       8.09491    
  32  0.310252      -1.17037      -1.42745       1.42745       8.12132       9.54877    
  33  0.686879     -0.375597     -0.458100      0.458100       8.02972       8.48782    
  34  0.243104      -1.41427      -1.72492       1.72492       8.12653       9.85145    
  35  0.459407     -0.777818     -0.948672      0.948672       8.11383       9.06250    
  36  0.332163      -1.10213      -1.34422       1.34422       8.13794       9.48216    
  37  0.512243     -0.668956     -0.815897      0.815897       8.10246       8.91835    
  38  0.323240      -1.12936      -1.37743       1.37743       8.10621       9.48365    
  39  0.667455     -0.404284     -0.493088      0.493088       8.71362       9.20671    
  40  0.460037     -0.776449     -0.947001      0.947001       8.10859       9.05559    
  41  0.227415      -1.48098      -1.80628       1.80628       8.09102       9.89730    
  42  0.636494     -0.451780     -0.551017      0.551017       8.10547       8.65649    
  43  0.432078     -0.839149      -1.02347       1.02347       8.10753       9.13100    
  44  0.609015     -0.495913     -0.604844      0.604844       8.25932       8.86416    
  45  0.427755     -0.849205      -1.03574       1.03574       8.62600       9.66174    
  46  0.496712     -0.699745     -0.853450      0.853450       8.09126       8.94471    
  47  0.295308      -1.21974      -1.48766       1.48766       8.20225       9.68991    
  48  0.928979     -0.736692E-01 -0.898512E-01  0.898512E-01   8.35386       8.44371    
  49  0.245696E-01  -3.70625      -4.52035       4.52035       8.10206       12.6224    
  50  0.833617E-01  -2.48457      -3.03032       3.03032       8.09541       11.1257    
  51  0.499690     -0.693767     -0.846158      0.846158       8.12933       8.97549    
  52  0.320552      -1.13771      -1.38762       1.38762       8.04995       9.43757    
  53  0.151030E-01  -4.19286      -5.11385       5.11385       8.10666       13.2205    
  54  0.551054     -0.595922     -0.726820      0.726820       8.09327       8.82009    
  55  0.786630     -0.239997     -0.292714      0.292714       8.11627       8.40898    
  56  0.793760E-01  -2.53356      -3.09007       3.09007       8.22182       11.3119    
  57  0.456771     -0.783574     -0.955692      0.955692       8.05410       9.00979    
  58  0.613263     -0.488962     -0.596366      0.596366       8.09139       8.68775    
  59  0.407581     -0.897515      -1.09466       1.09466       8.14939       9.24405    
  60  0.214329      -1.54024      -1.87857       1.87857       8.11412       9.99269    
  61  0.543052     -0.610551     -0.744663      0.744663       8.12070       8.86536    
  62  0.861407     -0.149188     -0.181958      0.181958       8.17237       8.35433    
  63  0.727563     -0.318055     -0.387918      0.387918       8.32632       8.71424    
  64  0.954867     -0.461830E-01 -0.563274E-01  0.563274E-01   8.09847       8.15480    
  65  0.209413      -1.56345      -1.90687       1.90687       8.16648       10.0734    
  66  0.218233E-02  -6.12736      -7.47328       7.47328       8.10725       15.5805    
  67  0.990675     -0.936839E-02 -0.114262E-01  0.114262E-01   8.11654       8.12796    
  68  0.874543     -0.134054     -0.163500      0.163500       8.09862       8.26212    
  69  0.276161      -1.28677      -1.56942       1.56942       8.19746       9.76688    
  70  0.319398      -1.14132      -1.39201       1.39201       8.06816       9.46017    
loop,thermsimp(1:2)       10  0.599265      0.159610    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    158          8.06          0.86          1.13         24.57          0.04          0.05         26.64
Just calling func    0   0         26.64


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    159          8.08          0.86          1.12         24.38          0.03          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       10
neval is:      158
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       11
neval is:      158


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      158     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.356780      -1.03064      -1.25702       1.25702       8.06918       9.32621    
   2  0.318207      -1.14505      -1.39657       1.39657       8.09629       9.49286    
   3  0.410972E-01  -3.19181      -3.89292       3.89292       8.11654       12.0095    
   4  0.217948      -1.52350      -1.85814       1.85814       8.09847       9.95662    
   5  0.460755     -0.774888     -0.945098      0.945098       8.10022       9.04532    
   6  0.694214     -0.364975     -0.445144      0.445144       8.06820       8.51334    
   7  0.237764      -1.43648      -1.75201       1.75201       8.09862       9.85063    
   8  0.635477     -0.453379     -0.552967      0.552967       8.10953       8.66249    
   9  0.882831E-01  -2.42721      -2.96036       2.96036       8.11497       11.0753    
  10  0.889613     -0.116969     -0.142662      0.142662       8.08929       8.23195    
  11  0.236395      -1.44225      -1.75905       1.75905       8.10151       9.86056    
  12  0.785560     -0.241359     -0.294375      0.294375       8.17237       8.46675    
  13  0.253594      -1.37202      -1.67340       1.67340       8.11627       9.78966    
  14  0.767743     -0.264300     -0.322356      0.322356       8.35386       8.67621    
  15  0.425111     -0.855405      -1.04330       1.04330       8.09048       9.13378    
  16  0.334680E-01  -3.39717      -4.14338       4.14338       8.02972       12.1731    
  17  0.737903     -0.303943     -0.370706      0.370706       8.32928       8.69998    
  18  0.530906     -0.633170     -0.772251      0.772251       8.04862       8.82087    
  19  0.811772     -0.208536     -0.254343      0.254343       8.10197       8.35632    
  20  0.781494     -0.246548     -0.300704      0.300704       8.10547       8.40618    
  21  0.668871     -0.402164     -0.490503      0.490503       8.09139       8.58189    
  22  0.609633     -0.494898     -0.603605      0.603605       8.32632       8.92992    
  23  0.732795E-01  -2.61347      -3.18754       3.18754       8.11639       11.3039    
  24  0.999755     -0.244962E-03 -0.298770E-03  0.298770E-03   8.10621       8.10651    
  25  0.556911     -0.585350     -0.713927      0.713927       8.11426       8.82819    
  26  0.381942     -0.962485      -1.17390       1.17390       8.15194       9.32584    
  27  0.230973      -1.46546      -1.78735       1.78735       8.09327       9.88062    
  28  0.791084     -0.234351     -0.285828      0.285828       8.15023       8.43606    
  29  0.122039      -2.10341      -2.56544       2.56544       8.25932       10.8248    
  30  0.411383     -0.888231      -1.08334       1.08334       8.12070       9.20403    
  31  0.753656     -0.282819     -0.344943      0.344943       8.10246       8.44740    
  32  0.846821     -0.166266     -0.202788      0.202788       8.09126       8.29405    
  33  0.577745     -0.548622     -0.669131      0.669131       8.09096       8.76009    
  34  0.859903     -0.150936     -0.184090      0.184090       8.59370       8.77779    
  35  0.915816     -0.879395E-01 -0.107256      0.107256       8.12933       8.23659    
  36  0.220499      -1.51186      -1.84395       1.84395       8.07122       9.91517    
  37  0.539962     -0.616256     -0.751621      0.751621       8.21185       8.96347    
  38  0.810725     -0.209827     -0.255917      0.255917       8.05410       8.31002    
  39  0.901567     -0.103621     -0.126382      0.126382       8.00020       8.12658    
  40  0.196148      -1.62888      -1.98668       1.98668       8.10859       10.0953    
  41  0.413437     -0.883250      -1.07726       1.07726       8.11383       9.19109    
  42  0.192892      -1.64562      -2.00710       2.00710       8.20333       10.2104    
  43  0.194290      -1.63840      -1.99829       1.99829       8.10753       10.1058    
  44  0.988313     -0.117563E-01 -0.143387E-01  0.143387E-01   8.17798       8.19232    
  45  0.917980     -0.855792E-01 -0.104377      0.104377       8.71362       8.81800    
  46  0.136083      -1.99449      -2.43259       2.43259       8.14939       10.5820    
  47  0.847126     -0.165905     -0.202348      0.202348       8.04995       8.25230    
  48  0.513003     -0.667474     -0.814089      0.814089       8.06816       8.88225    
  49  0.562161     -0.575967     -0.702482      0.702482       8.13794       8.84042    
  50  0.926079     -0.767957E-01 -0.936644E-01  0.936644E-01   8.10621       8.19988    
  51  0.890313     -0.116182     -0.141702      0.141702       8.12132       8.26302    
  52  0.857665     -0.153542     -0.187268      0.187268       8.31668       8.50394    
  53  0.599877     -0.511031     -0.623283      0.623283       8.62600       9.24928    
  54  0.835330     -0.179929     -0.219451      0.219451       8.20225       8.42170    
  55  0.323336      -1.12906      -1.37707       1.37707       8.19746       9.57453    
  56  0.305042      -1.18731      -1.44811       1.44811       8.12653       9.57464    
  57  0.980883     -0.193016E-01 -0.235414E-01  0.235414E-01   8.09102       8.11456    
  58  0.129682      -2.04267      -2.49136       2.49136       8.11412       10.6055    
  59  0.738352     -0.303335     -0.369964      0.369964       8.16648       8.53645    
  60  0.383117     -0.959416      -1.17016       1.17016       8.01041       9.18057    
  61  0.524900     -0.644547     -0.786127      0.786127       8.12153       8.90765    
  62  0.594829     -0.519481     -0.633588      0.633588       8.10621       8.73980    
  63  0.596925     -0.515963     -0.629298      0.629298       8.09541       8.72471    
  64  0.462523     -0.771060     -0.940429      0.940429       8.22182       9.16225    
  65  0.837977     -0.176764     -0.215592      0.215592       8.09118       8.30677    
  66  0.380204     -0.967046      -1.17947       1.17947       8.10206       9.28152    
  67  0.135974E-01  -4.29788      -5.24194       5.24194       8.10615       13.3481    
  68  0.816466     -0.202771     -0.247311      0.247311       8.10666       8.35397    
  69  0.877970     -0.130143     -0.158729      0.158729       8.11494       8.27366    
  70  0.468378     -0.758480     -0.925086      0.925086       8.05853       8.98362    
loop,thermsimp(1:2)       11   1.25702       1.39657    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    160          8.06          0.86          1.12         24.42          0.03          0.06         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    161          8.04          0.84          1.12         24.33          0.03          0.05         26.38
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  160    8.0433        1.124     -1.874      3.173     -102.6      1.398    
                      0.3601      1.341     -99.70      3.692    -0.6098E-01

                       2.247     -1.048      1.530      7176.      3380.    

                     -0.1398      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6225.      443.4    

                       1.433     -5.833     -4.331     -8.434      3.638    

                      -14.81     -3.565      9893.      0.000     0.1305E+05



                       1583.     0.1280E+05 -4093.      9126.      6123.    

                       5908.     0.2904E-01 0.1948     0.1156E-01 0.1225    

                     -0.2486    -0.8053E-01 0.1915     0.1210     0.6861E-01



                     -0.4496    -0.7694      0.000     0.9442E-01-0.6694E-01

                      0.1156E-01 0.1111    -0.7116    -0.1406     0.5227E-01

                      0.5672E-01 0.1315    -0.6569     -1.219      7363.    



                      -1.092     -1.256     -2.239     -2.308    -0.3807    

                     -0.3252      9.226      8.686    -0.1878E+05 -4.000    

                     -0.6146     -2.141      9.305      8.875    -0.1908E+05



                      -4.000     0.4932    -0.4371      8.866      9.090    

                     -0.1908E+05 -7.000    -0.8040    -0.6631      9.045    

                       8.779    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       11
neval is:      160
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       12
neval is:      160


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      160     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.759790E-01  -2.57730      -3.14342       3.14342       8.10621       11.2496    
   2  0.804470     -0.217571     -0.265362      0.265362       8.09102       8.35638    
   3  0.984017     -0.161120E-01 -0.196511E-01  0.196511E-01   8.00020       8.01985    
   4  0.587639     -0.531643     -0.648422      0.648422       8.17798       8.82641    
   5  0.523810     -0.646626     -0.788662      0.788662       8.10621       8.89487    
   6  0.930607     -0.719181E-01 -0.877154E-01  0.877154E-01   8.08929       8.17700    
   7  0.360114E-01  -3.32392      -4.05404       4.05404       8.12933       12.1834    
   8  0.963815     -0.368556E-01 -0.449512E-01  0.449512E-01   8.04995       8.09490    
   9  0.201264E-01  -3.90572      -4.76364       4.76364       8.12132       12.8850    
  10  0.954897     -0.461522E-01 -0.562899E-01  0.562899E-01   8.11494       8.17123    
  11  0.374160     -0.983071      -1.19901       1.19901       8.09126       9.29027    
  12  0.174967      -1.74316      -2.12605       2.12605       8.09118       10.2172    
  13  0.381618     -0.963335      -1.17494       1.17494       8.05410       9.22904    
  14  0.191097      -1.65498      -2.01850       2.01850       8.10666       10.1252    
  15  0.425287     -0.854991      -1.04280       1.04280       8.10197       9.14477    
  16  0.426180     -0.852893      -1.04024       1.04024       8.10547       9.14571    
  17  0.615671     -0.485042     -0.591585      0.591585       8.20225       8.79384    
  18  0.787264     -0.239192     -0.291732      0.291732       8.15023       8.44197    
  19  0.812636     -0.207472     -0.253045      0.253045       8.10246       8.35550    
  20  0.917241E-01  -2.38897      -2.91373       2.91373       8.17237       11.0861    
  21  0.671310     -0.398525     -0.486064      0.486064       8.31668       8.80274    
  22  0.548174     -0.601162     -0.733211      0.733211       8.06820       8.80141    
  23  0.134851      -2.00359      -2.44369       2.44369       8.16648       10.6102    
  24  0.373236     -0.985545      -1.20203       1.20203       8.09139       9.29342    
  25  0.578774     -0.546843     -0.666961      0.666961       8.10953       8.77649    
  26  0.910021     -0.942872E-01 -0.114998      0.114998       8.35386       8.46885    
  27  0.192323      -1.64858      -2.01070       2.01070       8.32928       10.3400    
  28  0.366342      -1.00419      -1.22477       1.22477       8.09541       9.32018    
  29  0.686994     -0.375430     -0.457896      0.457896       8.10621       8.56411    
  30  0.486551     -0.720414     -0.878659      0.878659       8.09096       8.96962    
  31  0.256801      -1.35945      -1.65807       1.65807       8.59370       10.2518    
  32  0.284977      -1.25535      -1.53109       1.53109       8.71362       10.2447    
  33  0.903072     -0.101953     -0.124347      0.124347       8.04862       8.17296    
  34  0.226450      -1.48523      -1.81147       1.81147       8.11426       9.92574    
  35  0.446078     -0.807261     -0.984581      0.984581       8.13794       9.12252    
  36  0.152634      -1.87971      -2.29261       2.29261       8.06816       10.3608    
  37  0.511955     -0.669518     -0.816583      0.816583       8.12153       8.93811    
  38  0.513138     -0.667210     -0.813767      0.813767       8.32632       9.14009    
  39  0.637309     -0.450501     -0.549457      0.549457       8.21185       8.76131    
  40  0.861477     -0.149107     -0.181859      0.181859       8.05853       8.24039    
  41  0.817364     -0.201671     -0.245969      0.245969       8.10022       8.34619    
  42  0.793820     -0.230898     -0.281616      0.281616       8.09048       8.37209    
  43  0.253309      -1.37315      -1.67477       1.67477       8.22182       9.89659    
  44  0.702532     -0.353065     -0.430618      0.430618       8.01041       8.44103    
  45  0.822324     -0.195620     -0.238590      0.238590       8.11383       8.35242    
  46  0.720485     -0.327831     -0.399841      0.399841       8.12070       8.52054    
  47  0.881589     -0.126029     -0.153713      0.153713       8.62600       8.77971    
  48  0.584479     -0.537035     -0.654999      0.654999       8.10206       8.75705    
  49  0.697197     -0.360688     -0.439916      0.439916       8.15194       8.59186    
  50  0.320931      -1.13653      -1.38618       1.38618       8.06918       9.45536    
  51  0.780071     -0.248371     -0.302927      0.302927       8.09629       8.39921    
  52  0.318322E-01  -3.44728      -4.20450       4.20450       8.19746       12.4020    
  53  0.693387     -0.366167     -0.446598      0.446598       8.12653       8.57313    
  54  0.332128      -1.10223      -1.34435       1.34435       8.11627       9.46062    
  55  0.891883E-01  -2.41701      -2.94792       2.94792       8.09862       11.0465    
  56  0.960735     -0.400567E-01 -0.488555E-01  0.488555E-01   8.10151       8.15036    
  57  0.726634     -0.319332     -0.389476      0.389476       8.09327       8.48274    
  58  0.867850     -0.141737     -0.172870      0.172870       8.07122       8.24409    
  59  0.960075     -0.407444E-01 -0.496942E-01  0.496942E-01   8.09847       8.14817    
  60  0.303374E-01  -3.49537      -4.26316       4.26316       8.10859       12.3718    
  61  0.159557      -1.83535      -2.23850       2.23850       8.10753       10.3460    
  62  0.487506     -0.718453     -0.876266      0.876266       8.20333       9.07959    
  63  0.978612E-01  -2.32420      -2.83473       2.83473       8.14939       10.9841    
  64  0.405010     -0.903843      -1.10238       1.10238       8.11412       9.21650    
  65  0.199088      -1.61401      -1.96854       1.96854       8.25932       10.2279    
  66  0.621424     -0.475741     -0.580242      0.580242       8.11497       8.69522    
  67  0.630612     -0.461065     -0.562342      0.562342       8.11639       8.67873    
  68  0.842429     -0.171466     -0.209130      0.209130       8.11654       8.32567    
  69  0.887493     -0.119355     -0.145572      0.145572       8.02972       8.17529    
  70  0.813538     -0.206363     -0.251692      0.251692       8.04326       8.29496    
loop,thermsimp(1:2)       12   3.14342      0.265362    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    162          8.05          0.86          1.13         24.39          0.02          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    163          8.06          0.86          1.13         24.36          0.05          0.04         26.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       12
neval is:      162
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       13
neval is:      162


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      162     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872435     -0.136467     -0.166443      0.166443       8.00020       8.16664    
   2  0.311340      -1.16687      -1.42318       1.42318       8.04995       9.47313    
   3  0.293828      -1.22476      -1.49379       1.49379       8.09847       9.59226    
   4  0.586668     -0.533296     -0.650439      0.650439       8.10151       8.75195    
   5  0.360311      -1.02079      -1.24501       1.24501       8.11494       9.35995    
   6  0.315643      -1.15314      -1.40644       1.40644       8.04862       9.45506    
   7  0.481464     -0.730923     -0.891476      0.891476       8.02972       8.92119    
   8  0.720279     -0.328116     -0.400190      0.400190       8.08929       8.48948    
   9  0.551471     -0.595166     -0.725899      0.725899       8.05853       8.78443    
  10  0.524434     -0.645435     -0.787210      0.787210       8.07122       8.85843    
  11  0.781600     -0.246412     -0.300538      0.300538       8.04326       8.34380    
  12  0.353648      -1.03945      -1.26778       1.26778       8.11654       9.38431    
  13  0.451044     -0.796190     -0.971079      0.971079       8.10022       9.07130    
  14  0.325353      -1.12284      -1.36948       1.36948       8.11383       9.48331    
  15  0.312157      -1.16425      -1.41998       1.41998       8.10246       9.52244    
  16  0.432418     -0.838362      -1.02251       1.02251       8.09102       9.11353    
  17  0.296543      -1.21556      -1.48257       1.48257       8.09048       9.57305    
  18  0.705416     -0.348967     -0.425621      0.425621       8.09629       8.52191    
  19  0.146505      -1.92069      -2.34259       2.34259       8.01041       10.3530    
  20  0.471608     -0.751607     -0.916703      0.916703       8.15023       9.06694    
  21  0.633095     -0.457134     -0.557547      0.557547       8.35386       8.91140    
  22  0.754855     -0.281230     -0.343004      0.343004       8.09327       8.43627    
  23  0.444501E-01  -3.11339      -3.79727       3.79727       8.12070       11.9180    
  24  0.160973      -1.82652      -2.22773       2.22773       8.10621       10.3339    
  25  0.943694     -0.579536E-01 -0.706835E-01  0.706835E-01   8.12653       8.19722    
  26  0.187304      -1.67502      -2.04296       2.04296       8.15194       10.1949    
  27  0.840922     -0.173257     -0.211314      0.211314       8.11639       8.32770    
  28  0.888648     -0.118054     -0.143985      0.143985       8.11497       8.25896    
  29  0.920614E-01  -2.38530      -2.90925       2.90925       8.10206       11.0113    
  30  0.906493     -0.981722E-01 -0.119736      0.119736       8.21185       8.33159    
  31  0.221761      -1.50616      -1.83700       1.83700       8.10953       9.94652    
  32  0.248725      -1.39141      -1.69704       1.69704       8.62600       10.3230    
  33  0.315928      -1.15224      -1.40534       1.40534       8.20225       9.60759    
  34  0.949967     -0.513283E-01 -0.626030E-01  0.626030E-01   8.06820       8.13080    
  35  0.802748     -0.219715     -0.267977      0.267977       8.31668       8.58465    
  36  0.558987     -0.581628     -0.709387      0.709387       8.17798       8.88737    
  37  0.638133     -0.449209     -0.547881      0.547881       8.10621       8.65409    
  38  0.637852     -0.449648     -0.548417      0.548417       8.12153       8.66994    
  39  0.382908     -0.959961      -1.17082       1.17082       8.09096       9.26179    
  40  0.982834     -0.173149E-01 -0.211183E-01  0.211183E-01   8.20333       8.22444    
  41  0.497022     -0.699120     -0.852687      0.852687       8.13794       8.99063    
  42  0.263620      -1.33325      -1.62610       1.62610       8.32632       9.95242    
  43  0.296939      -1.21423      -1.48094       1.48094       8.10197       9.58292    
  44  0.784161     -0.243141     -0.296549      0.296549       8.10547       8.40202    
  45  0.545321     -0.606380     -0.739576      0.739576       8.11412       8.85370    
  46  0.770080     -0.261260     -0.318648      0.318648       8.05410       8.37275    
  47  0.358755      -1.02511      -1.25029       1.25029       8.09126       9.34155    
  48  0.325126      -1.12354      -1.37034       1.37034       8.09139       9.46173    
  49  0.599396     -0.511832     -0.624260      0.624260       8.09541       8.71967    
  50  0.323708      -1.12791      -1.37567       1.37567       8.06918       9.44485    
  51  0.329142      -1.11127      -1.35536       1.35536       8.11627       9.47163    
  52  0.685661     -0.377371     -0.460264      0.460264       8.22182       8.68209    
  53  0.360361      -1.02065      -1.24484       1.24484       8.11426       9.35910    
  54  0.665281     -0.407545     -0.497066      0.497066       8.10666       8.60373    
  55  0.983321     -0.168196E-01 -0.205142E-01  0.205142E-01   8.09118       8.11170    
  56  0.644247     -0.439672     -0.536250      0.536250       8.25932       8.79557    
  57  0.735645     -0.307008     -0.374444      0.374444       8.71362       9.08806    
  58  0.680276     -0.385257     -0.469882      0.469882       8.59370       9.06358    
  59  0.864073     -0.146098     -0.178189      0.178189       8.32928       8.50747    
  60  0.788785     -0.237262     -0.289378      0.289378       8.10753       8.39691    
  61  0.429383     -0.845405      -1.03111       1.03111       8.06816       9.09927    
  62  0.798857     -0.224573     -0.273902      0.273902       8.16648       8.44038    
  63  0.946983     -0.544737E-01 -0.664392E-01  0.664392E-01   8.14939       8.21583    
  64  0.229664      -1.47114      -1.79428       1.79428       8.09862       9.89291    
  65  0.655912     -0.421729     -0.514365      0.514365       8.17237       8.68674    
  66  0.236982      -1.43977      -1.75603       1.75603       8.10621       9.86224    
  67  0.588628     -0.529960     -0.646370      0.646370       8.12933       8.77570    
  68  0.430113     -0.843707      -1.02903       1.02903       8.10859       9.13762    
  69  0.384455     -0.955929      -1.16591       1.16591       8.19746       9.36337    
  70  0.162044E-01  -4.12247      -5.02800       5.02800       8.05043       13.0784    
loop,thermsimp(1:2)       13  0.166443       1.42318    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    164          8.12          0.86          1.12         24.37          0.05          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    165          8.20          0.86          1.13         24.39          0.04          0.05         26.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       13
neval is:      164
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       14
neval is:      164


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      164     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.344597      -1.06538      -1.29940       1.29940       8.09118       9.39058    
   2  0.267720      -1.31781      -1.60728       1.60728       8.06820       9.67548    
   3  0.279825      -1.27359      -1.55335       1.55335       8.00020       9.55354    
   4  0.281095      -1.26906      -1.54782       1.54782       8.12653       9.67435    
   5  0.245867      -1.40297      -1.71114       1.71114       8.14939       9.86053    
   6  0.914239     -0.896636E-01 -0.109359      0.109359       8.20333       8.31268    
   7  0.180116      -1.71415      -2.09068       2.09068       8.11497       10.2057    
   8  0.567917     -0.565780     -0.690058      0.690058       8.11639       8.80645    
   9  0.431941     -0.839465      -1.02386       1.02386       8.21185       9.23571    
  10  0.877920     -0.130199     -0.158799      0.158799       8.04326       8.20206    
  11  0.280355      -1.27170      -1.55104       1.55104       8.05410       9.60513    
  12  0.486947     -0.719601     -0.877666      0.877666       8.10753       8.98519    
  13  0.216546      -1.52995      -1.86602       1.86602       8.10547       9.97149    
  14  0.483718E-02  -5.33142      -6.50251       6.50251       8.09327       14.5958    
  15  0.785152E-03  -7.14963      -8.72010       8.72010       8.16648       16.8866    
  16  0.300781      -1.20137      -1.46526       1.46526       8.08929       9.55455    
  17  0.869691     -0.139618     -0.170286      0.170286       8.32928       8.49956    
  18  0.694261E-01  -2.66749      -3.25343       3.25343       8.09629       11.3497    
  19  0.635475     -0.453382     -0.552971      0.552971       8.31668       8.86965    
  20  0.894977     -0.110958     -0.135330      0.135330       8.10666       8.24199    
  21  0.442267     -0.815841     -0.995046      0.995046       8.10621       9.10126    
  22  0.283362      -1.26103      -1.53802       1.53802       8.12153       9.65955    
  23  0.518611     -0.656601     -0.800828      0.800828       8.22182       9.02265    
  24  0.858122E-01  -2.45559      -2.99498       2.99498       8.17237       11.1674    
  25  0.461153     -0.774026     -0.944047      0.944047       8.09541       9.03946    
  26  0.180026      -1.71465      -2.09129       2.09129       8.10151       10.1928    
  27  0.446938E-01  -3.10792      -3.79060       3.79060       8.12933       11.9199    
  28  0.152352      -1.88156      -2.29486       2.29486       8.05853       10.3534    
  29  0.163937E-01  -4.11086      -5.01384       5.01384       8.25932       13.2732    
  30  0.721347     -0.326635     -0.398383      0.398383       8.11412       8.51251    
  31  0.813323     -0.206626     -0.252013      0.252013       8.07122       8.32324    
  32  0.569343     -0.563273     -0.687000      0.687000       8.17798       8.86498    
  33  0.275899      -1.28772      -1.57058       1.57058       8.35386       9.92443    
  34  0.933187     -0.691492E-01 -0.843384E-01  0.843384E-01   8.02972       8.11405    
  35  0.716570     -0.333279     -0.406486      0.406486       8.13794       8.54443    
  36  0.405413     -0.902848      -1.10117       1.10117       8.59370       9.69487    
  37  0.907528     -0.970314E-01 -0.118345      0.118345       8.15023       8.26858    
  38  0.554651     -0.589416     -0.718885      0.718885       8.10022       8.81910    
  39  0.419962     -0.867592      -1.05816       1.05816       8.71362       9.77178    
  40  0.824173     -0.193375     -0.235851      0.235851       8.06816       8.30401    
  41  0.865647     -0.144278     -0.175970      0.175970       8.09102       8.26699    
  42  0.300944      -1.20083      -1.46460       1.46460       8.10859       9.57319    
  43  0.339688      -1.07973      -1.31690       1.31690       8.09096       9.40786    
  44  0.217032      -1.52771      -1.86329       1.86329       8.09126       9.95454    
  45  0.792618E-01  -2.53500      -3.09183       3.09183       8.11426       11.2061    
  46  0.997677     -0.232582E-02 -0.283670E-02  0.283670E-02   8.11494       8.11777    
  47  0.174239      -1.74733      -2.13114       2.13114       8.19746       10.3286    
  48  0.834084     -0.181422     -0.221272      0.221272       8.11654       8.33781    
  49  0.324404      -1.12577      -1.37305       1.37305       8.06918       9.44223    
  50  0.927598     -0.751564E-01 -0.916651E-01  0.916651E-01   8.04862       8.14028    
  51  0.981384     -0.187911E-01 -0.229187E-01  0.229187E-01   8.09139       8.11431    
  52  0.849105     -0.163572     -0.199502      0.199502       8.11627       8.31577    
  53  0.148698      -1.90584      -2.32447       2.32447       8.04995       10.3744    
  54  0.389930     -0.941789      -1.14866       1.14866       8.11383       9.26249    
  55  0.183568      -1.69517      -2.06753       2.06753       8.10246       10.1700    
  56  0.661220     -0.413669     -0.504534      0.504534       8.09048       8.59501    
  57  0.242183      -1.41806      -1.72955       1.72955       8.10197       9.83152    
  58  0.182262      -1.70231      -2.07624       2.07624       8.09847       10.1747    
  59  0.299801      -1.20464      -1.46924       1.46924       8.20225       9.67149    
  60  0.950117     -0.511698E-01 -0.624096E-01  0.624096E-01   8.10621       8.16862    
  61  0.184593      -1.68960      -2.06074       2.06074       8.09862       10.1594    
  62  0.730970     -0.313382     -0.382219      0.382219       8.10953       8.49174    
  63  0.753232E-01  -2.58597      -3.15399       3.15399       8.32632       11.4803    
  64  0.501460     -0.690231     -0.841845      0.841845       8.15194       8.99379    
  65  0.513248E-01  -2.96958      -3.62187       3.62187       8.62600       12.2479    
  66  0.931416     -0.710492E-01 -0.866557E-01  0.866557E-01   8.10621       8.19287    
  67  0.637420E-01  -2.75291      -3.35761       3.35761       8.01041       11.3680    
  68  0.322234E-01  -3.43506      -4.18960       4.18960       8.10206       12.2917    
  69  0.791156     -0.234260     -0.285717      0.285717       8.12070       8.40641    
  70  0.606746     -0.499645     -0.609396      0.609396       8.12132       8.73071    
loop,thermsimp(1:2)       14   1.29940       1.60728    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    166          8.11          0.86          1.12         24.36          0.04          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    167          8.46          0.86          1.12         24.56          0.02          0.05         26.61
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       14
neval is:      166
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       15
neval is:      166


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      166     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.229949      -1.46990      -1.79277       1.79277       8.02972       9.82249    
   2  0.322822      -1.13066      -1.37901       1.37901       8.09139       9.47040    
   3  0.327586      -1.11601      -1.36114       1.36114       8.11494       9.47608    
   4  0.799078     -0.224296     -0.273565      0.273565       8.04862       8.32218    
   5  0.698072     -0.359433     -0.438385      0.438385       8.10621       8.54460    
   6  0.733871     -0.309421     -0.377388      0.377388       8.10621       8.48360    
   7  0.823872     -0.193740     -0.236297      0.236297       8.04326       8.27956    
   8  0.800045     -0.223087     -0.272090      0.272090       8.10666       8.37875    
   9  0.162010      -1.82010      -2.21989       2.21989       8.09102       10.3109    
  10  0.113138      -2.17915      -2.65781       2.65781       8.15023       10.8080    
  11  0.973966     -0.263784E-01 -0.321726E-01  0.321726E-01   8.06816       8.10033    
  12  0.998107     -0.189521E-02 -0.231150E-02  0.231150E-02   8.20333       8.20564    
  13  0.631351     -0.459893     -0.560912      0.560912       8.11627       8.67718    
  14  0.698229     -0.359208     -0.438111      0.438111       8.07122       8.50933    
  15  0.359252      -1.02373      -1.24860       1.24860       8.11654       9.36514    
  16  0.936266     -0.658562E-01 -0.803220E-01  0.803220E-01   8.12070       8.20102    
  17  0.843107     -0.170662     -0.208149      0.208149       8.10953       8.31767    
  18  0.181284      -1.70769      -2.08280       2.08280       8.32928       10.4121    
  19  0.354246      -1.03777      -1.26572       1.26572       8.11412       9.37984    
  20  0.981540     -0.186324E-01 -0.227252E-01  0.227252E-01   8.13794       8.16067    
  21  0.582284E-01  -2.84338      -3.46795       3.46795       8.09048       11.5584    
  22  0.935088     -0.671143E-01 -0.818565E-01  0.818565E-01   8.12132       8.20317    
  23  0.682144     -0.382515     -0.466537      0.466537       8.11639       8.58293    
  24  0.441439     -0.817715     -0.997332      0.997332       8.10022       9.09755    
  25  0.325829      -1.12138      -1.36770       1.36770       8.17798       9.54569    
  26  0.956968E-01  -2.34657      -2.86201       2.86201       8.31668       11.1787    
  27  0.465124E-01  -3.06804      -3.74195       3.74195       8.10753       11.8495    
  28  0.645503     -0.437726     -0.533876      0.533876       8.15194       8.68582    
  29  0.184751      -1.68875      -2.05969       2.05969       8.22182       10.2815    
  30  0.676303     -0.391115     -0.477026      0.477026       8.09541       8.57244    
  31  0.408248     -0.895880      -1.09267       1.09267       8.10621       9.19888    
  32  0.215511      -1.53474      -1.87186       1.87186       8.21185       10.0837    
  33  0.762109     -0.271666     -0.331340      0.331340       8.11383       8.44517    
  34  0.445022     -0.809632     -0.987473      0.987473       8.09118       9.07866    
  35  0.667113     -0.404797     -0.493713      0.493713       8.09096       8.58468    
  36  0.995785     -0.422376E-02 -0.515154E-02  0.515154E-02   8.06918       8.07434    
  37  0.278840      -1.27712      -1.55765       1.55765       8.00020       9.55785    
  38  0.624255     -0.471196     -0.574698      0.574698       8.08929       8.66398    
  39  0.368212     -0.999097      -1.21856       1.21856       8.10859       9.32715    
  40  0.330266      -1.10786      -1.35121       1.35121       8.05410       9.40531    
  41  0.969155     -0.313304E-01 -0.382124E-01  0.382124E-01   8.12153       8.15974    
  42  0.686816     -0.375688     -0.458211      0.458211       8.20225       8.66046    
  43  0.201053      -1.60419      -1.95656       1.95656       8.12653       10.0831    
  44  0.481166     -0.731544     -0.892233      0.892233       8.06820       8.96043    
  45  0.992829     -0.719725E-02 -0.877818E-02  0.877818E-02   8.59370       8.60248    
  46  0.665697     -0.406921     -0.496304      0.496304       8.71362       9.20992    
  47  0.991934E-02  -4.61327      -5.62661       5.62661       8.10197       13.7286    
  48  0.211644      -1.55285      -1.89395       1.89395       8.14939       10.0433    
  49  0.908243E-01  -2.39883      -2.92575       2.92575       8.35386       11.2796    
  50  0.643762     -0.440426     -0.537169      0.537169       8.09126       8.62843    
  51  0.568794E-01  -2.86682      -3.49654       3.49654       8.10547       11.6020    
  52  0.159466      -1.83592      -2.23920       2.23920       8.09862       10.3378    
  53  0.918851     -0.846310E-01 -0.103221      0.103221       8.10246       8.20568    
  54  0.865178     -0.144820     -0.176631      0.176631       8.09847       8.27510    
  55  0.826009     -0.191150     -0.233138      0.233138       8.10151       8.33464    
  56  0.665816E-02  -5.01191      -6.11281       6.11281       8.11497       14.2278    
  57  0.998155     -0.184716E-02 -0.225290E-02  0.225290E-02   8.19746       8.19972    
  58  0.875957E-01  -2.43502      -2.96989       2.96989       8.05853       11.0284    
  59  0.546955     -0.603388     -0.735927      0.735927       8.04995       8.78587    
  60  0.953933     -0.471617E-01 -0.575212E-01  0.575212E-01   8.17237       8.22989    
  61  0.131488      -2.02884      -2.47449       2.47449       8.11426       10.5888    
  62  0.415197     -0.879003      -1.07208       1.07208       8.09629       9.16837    
  63  0.543800E-02  -5.21434      -6.35971       6.35971       8.01041       14.3701    
  64  0.821907     -0.196128     -0.239209      0.239209       8.32632       8.56553    
  65  0.590302     -0.527122     -0.642908      0.642908       8.12933       8.77224    
  66  0.380117     -0.967276      -1.17975       1.17975       8.62600       9.80574    
  67  0.640684     -0.445218     -0.543014      0.543014       8.10206       8.64507    
  68  0.268290      -1.31569      -1.60469       1.60469       8.25932       9.86400    
  69  0.625870     -0.468612     -0.571546      0.571546       8.09327       8.66481    
  70  0.937362     -0.646862E-01 -0.788951E-01  0.788951E-01   8.11344       8.19234    
loop,thermsimp(1:2)       15   1.79277       1.37901    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    168          8.21          0.85          1.12         24.73          0.04          0.05         26.79
Just calling func    0   0         26.78


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    169          8.62          0.86          1.12         24.45          0.03          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.21
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       15
neval is:      168
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       16
neval is:      168


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      168     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.557805     -0.583747     -0.711971      0.711971       8.06918       8.78116    
   2  0.850944     -0.161409     -0.196864      0.196864       8.06816       8.26502    
   3  0.343999      -1.06712      -1.30152       1.30152       8.12153       9.42304    
   4  0.481777E-02  -5.33544      -6.50741       6.50741       8.13794       14.6454    
   5  0.146991      -1.91738      -2.33855       2.33855       8.11344       10.4520    
   6  0.545677     -0.605728     -0.738780      0.738780       8.19746       8.93624    
   7  0.761940     -0.271888     -0.331610      0.331610       8.12070       8.45231    
   8  0.944477     -0.571238E-01 -0.696715E-01  0.696715E-01   8.12132       8.19099    
   9  0.965249     -0.353688E-01 -0.431378E-01  0.431378E-01   8.20333       8.24646    
  10  0.634176     -0.455429     -0.555468      0.555468       8.10246       8.65792    
  11  0.793205     -0.231673     -0.282562      0.282562       8.17237       8.45493    
  12  0.743605     -0.296246     -0.361318      0.361318       8.09847       8.45979    
  13  0.983069E-01  -2.31966      -2.82919       2.82919       8.04326       10.8725    
  14  0.618437     -0.480560     -0.586118      0.586118       8.10953       8.69564    
  15  0.429182     -0.845875      -1.03168       1.03168       8.04862       9.08029    
  16  0.771528     -0.259382     -0.316357      0.316357       8.10151       8.41786    
  17  0.218286      -1.52195      -1.85625       1.85625       8.10666       9.96292    
  18  0.556408     -0.586254     -0.715029      0.715029       8.11383       8.82886    
  19  0.526292     -0.641899     -0.782897      0.782897       8.10621       8.88911    
  20  0.665532     -0.407169     -0.496607      0.496607       8.07122       8.56783    
  21  0.261756      -1.34034      -1.63476       1.63476       8.10621       9.74097    
  22  0.975508     -0.247971E-01 -0.302440E-01  0.302440E-01   8.32632       8.35656    
  23  0.257613      -1.35630      -1.65422       1.65422       8.09541       9.74963    
  24  0.981555E-01  -2.32120      -2.83107       2.83107       8.11639       10.9475    
  25  0.955054     -0.459870E-01 -0.560884E-01  0.560884E-01   8.09096       8.14705    
  26  0.887906     -0.118890     -0.145005      0.145005       8.59370       8.73870    
  27  0.407043     -0.898837      -1.09627       1.09627       8.09126       9.18753    
  28  0.876870     -0.131396     -0.160258      0.160258       8.10206       8.26231    
  29  0.957152     -0.437935E-01 -0.534131E-01  0.534131E-01   8.20225       8.25566    
  30  0.827730     -0.189068     -0.230598      0.230598       8.08929       8.31988    
  31  0.289027      -1.24124      -1.51388       1.51388       8.09327       9.60715    
  32  0.125230      -2.07760      -2.53396       2.53396       8.11627       10.6502    
  33  0.242443      -1.41699      -1.72824       1.72824       8.15194       9.88018    
  34  0.654103     -0.424490     -0.517733      0.517733       8.12933       8.64707    
  35  0.811871     -0.208414     -0.254193      0.254193       8.04995       8.30414    
  36  0.145201E-01  -4.23222      -5.16186       5.16186       8.06820       13.2301    
  37  0.344449      -1.06581      -1.29992       1.29992       8.09118       9.39110    
  38  0.265532      -1.32602      -1.61729       1.61729       8.10022       9.71751    
  39  0.811851     -0.208438     -0.254223      0.254223       8.09629       8.35051    
  40  0.983290E-01  -2.31944      -2.82892       2.82892       8.10621       10.9351    
  41  0.347314      -1.05753      -1.28982       1.28982       8.71362       10.0034    
  42  0.923773     -0.792888E-01 -0.967052E-01  0.967052E-01   8.10859       8.20530    
  43  0.690375     -0.370520     -0.451908      0.451908       8.11654       8.56845    
  44  0.227523      -1.48051      -1.80571       1.80571       8.11412       9.91983    
  45  0.652275     -0.427289     -0.521146      0.521146       8.05410       8.57525    
  46  0.669640     -0.401014     -0.489100      0.489100       8.09139       8.58049    
  47  0.288804      -1.24201      -1.51482       1.51482       8.11494       9.62976    
  48  0.404648     -0.904738      -1.10347       1.10347       8.17798       9.28145    
  49  0.371042     -0.991440      -1.20922       1.20922       8.00020       9.20942    
  50  0.308424      -1.17628      -1.43466       1.43466       8.62600       10.0607    
  51  0.911221     -0.929703E-01 -0.113392      0.113392       8.02972       8.14311    
  52  0.615436     -0.485425     -0.592052      0.592052       8.25932       8.85137    
  53  0.780328     -0.248041     -0.302525      0.302525       8.14939       8.45191    
  54  0.127539      -2.05933      -2.51168       2.51168       8.12653       10.6382    
  55  0.709081     -0.343786     -0.419301      0.419301       8.21185       8.63115    
  56  0.974925     -0.253942E-01 -0.309723E-01  0.309723E-01   8.22182       8.25279    
  57  0.834943     -0.180392     -0.220016      0.220016       8.09102       8.31103    
  58  0.696274     -0.362013     -0.441531      0.441531       8.09862       8.54016    
  59  0.623965     -0.471660     -0.575264      0.575264       8.32928       8.90454    
  60  0.620467     -0.477282     -0.582121      0.582121       8.11426       8.69638    
  61  0.983840E-01  -2.31888      -2.82824       2.82824       8.15023       10.9785    
  62  0.452904     -0.792074     -0.966059      0.966059       8.05853       9.02459    
  63  0.731276     -0.312965     -0.381710      0.381710       8.31668       8.69838    
  64  0.136630      -1.99048      -2.42770       2.42770       8.35386       10.7816    
  65  0.819737     -0.198772     -0.242434      0.242434       8.09048       8.33291    
  66  0.415452     -0.878387      -1.07133       1.07133       8.10547       9.17681    
  67  0.931580     -0.708731E-01 -0.864409E-01  0.864409E-01   8.10753       8.19397    
  68  0.763119     -0.270341     -0.329724      0.329724       8.10197       8.43170    
  69  0.214680      -1.53861      -1.87657       1.87657       8.11497       9.99155    
  70  0.548736     -0.600138     -0.731963      0.731963       8.20747       8.93943    
loop,thermsimp(1:2)       16  0.711971      0.196864    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    170          8.20          0.86          1.13         24.36          0.02          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    171          8.72          0.86          1.12         24.36          0.04          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.20
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       16
neval is:      170
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       17
neval is:      170


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      170     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.739792     -0.301387     -0.367588      0.367588       8.02972       8.39730    
   2  0.527958     -0.638738     -0.779042      0.779042       8.09096       8.87001    
   3  0.326119      -1.12049      -1.36662       1.36662       8.12132       9.48793    
   4  0.647061     -0.435314     -0.530934      0.530934       8.10753       8.63846    
   5  0.419805     -0.867966      -1.05862       1.05862       8.10859       9.16721    
   6  0.218417      -1.52135      -1.85552       1.85552       8.20333       10.0588    
   7  0.168864      -1.77866      -2.16936       2.16936       8.22182       10.3912    
   8  0.761417     -0.272575     -0.332448      0.332448       8.20225       8.53470    
   9  0.383989     -0.957143      -1.16739       1.16739       8.10206       9.26944    
  10  0.104774      -2.25595      -2.75149       2.75149       8.06816       10.8196    
  11  0.167912      -1.78432      -2.17626       2.17626       8.04995       10.2262    
  12  0.997930     -0.207190E-02 -0.252701E-02  0.252701E-02   8.09102       8.09354    
  13  0.493294     -0.706650     -0.861871      0.861871       8.08929       8.95116    
  14  0.483048     -0.727639     -0.887471      0.887471       8.09048       8.97795    
  15  0.715967     -0.334121     -0.407514      0.407514       8.09629       8.50380    
  16  0.595423E-01  -2.82107      -3.44074       3.44074       8.32632       11.7671    
  17  0.636569     -0.451662     -0.550873      0.550873       8.10151       8.65238    
  18  0.482980     -0.727779     -0.887641      0.887641       8.10197       8.98962    
  19  0.500121     -0.692905     -0.845107      0.845107       8.14939       8.99450    
  20  0.426980     -0.851018      -1.03795       1.03795       8.12070       9.15865    
  21  0.546576     -0.604082     -0.736774      0.736774       8.17237       8.90915    
  22  0.142720      -1.94687      -2.37452       2.37452       8.09847       10.4730    
  23  0.473622     -0.747346     -0.911506      0.911506       8.09862       9.01013    
  24  0.892718E-01  -2.41607      -2.94678       2.94678       8.07122       11.0180    
  25  0.660659     -0.414518     -0.505569      0.505569       8.11654       8.62211    
  26  0.328755      -1.11244      -1.35680       1.35680       8.05410       9.41090    
  27  0.544150     -0.608530     -0.742198      0.742198       8.09139       8.83359    
  28  0.199068      -1.61411      -1.96866       1.96866       8.21185       10.1805    
  29  0.685070     -0.378234     -0.461316      0.461316       8.12933       8.59065    
  30  0.500258     -0.692632     -0.844774      0.844774       8.10246       8.94723    
  31  0.130607      -2.03556      -2.48269       2.48269       8.10953       10.5922    
  32  0.982013E-01  -2.32074      -2.83050       2.83050       8.11426       10.9448    
  33  0.581494E-01  -2.84474      -3.46961       3.46961       8.31668       11.7863    
  34  0.841391     -0.172699     -0.210634      0.210634       8.59370       8.80433    
  35  0.838937E-01  -2.47820      -3.02256       3.02256       8.06918       11.0917    
  36  0.729848     -0.314919     -0.384093      0.384093       8.11383       8.49792    
  37  0.748292     -0.289962     -0.353654      0.353654       8.25932       8.61297    
  38  0.229216      -1.47309      -1.79667       1.79667       8.10621       9.90288    
  39  0.710713     -0.341487     -0.416497      0.416497       8.32928       8.74577    
  40  0.511506     -0.670395     -0.817653      0.817653       8.19746       9.01512    
  41  0.106756      -2.23721      -2.72862       2.72862       8.20747       10.9361    
  42  0.583466     -0.538770     -0.657115      0.657115       8.05853       8.71564    
  43  0.993140E-01  -2.30947      -2.81676       2.81676       8.04862       10.8654    
  44  0.461224     -0.773871     -0.943857      0.943857       8.10547       9.04933    
  45  0.574465     -0.554316     -0.676075      0.676075       8.09126       8.76733    
  46  0.715977     -0.334107     -0.407497      0.407497       8.00020       8.40770    
  47  0.877584     -0.130583     -0.159266      0.159266       8.17798       8.33725    
  48  0.492354     -0.708558     -0.864198      0.864198       8.09118       8.95538    
  49  0.874926     -0.133616     -0.162966      0.162966       8.12153       8.28449    
  50  0.800367     -0.222685     -0.271599      0.271599       8.09327       8.36487    
  51  0.507308     -0.678636     -0.827704      0.827704       8.11494       8.94264    
  52  0.727831     -0.317686     -0.387468      0.387468       8.10022       8.48769    
  53  0.899777E-01  -2.40819      -2.93717       2.93717       8.10621       11.0434    
  54  0.392780     -0.934505      -1.13978       1.13978       8.09541       9.23519    
  55  0.585301     -0.535629     -0.653284      0.653284       8.15194       8.80522    
  56  0.522884     -0.648395     -0.790820      0.790820       8.11412       8.90494    
  57  0.559213     -0.581225     -0.708895      0.708895       8.10666       8.81556    
  58  0.116989      -2.14568      -2.61699       2.61699       8.11497       10.7320    
  59  0.411020     -0.889113      -1.08441       1.08441       8.71362       9.79803    
  60  0.484202     -0.725253     -0.884560      0.884560       8.62600       9.51056    
  61  0.771761     -0.259080     -0.315989      0.315989       8.11344       8.42943    
  62  0.908486     -0.959755E-01 -0.117057      0.117057       8.12653       8.24359    
  63  0.340814      -1.07642      -1.31286       1.31286       8.11627       9.42913    
  64  0.519873     -0.654172     -0.797865      0.797865       8.35386       9.15172    
  65  0.516320     -0.661029     -0.806229      0.806229       8.04326       8.84949    
  66  0.495555     -0.702076     -0.856292      0.856292       8.10621       8.96250    
  67  0.291626      -1.23228      -1.50296       1.50296       8.11639       9.61935    
  68  0.492590     -0.708077     -0.863612      0.863612       8.15023       9.01385    
  69  0.545663E-01  -2.90834      -3.54718       3.54718       8.06820       11.6154    
  70  0.200869      -1.60510      -1.95767       1.95767       8.19747       10.1551    
loop,thermsimp(1:2)       17  0.367588      0.779042    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    172          8.17          0.87          1.13         24.35          0.07          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    173          8.29          0.86          1.12         24.31          0.08          0.05         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.17
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       17
neval is:      172
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       18
neval is:      172


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      172     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.382860     -0.960086      -1.17098       1.17098       8.09102       9.26199    
   2  0.293468      -1.22599      -1.49529       1.49529       8.12653       9.62182    
   3  0.954036     -0.470539E-01 -0.573896E-01  0.573896E-01   8.12153       8.17892    
   4  0.452934     -0.792010     -0.965981      0.965981       8.17798       9.14397    
   5  0.251692      -1.37955      -1.68258       1.68258       8.09327       9.77584    
   6  0.881081     -0.126605     -0.154415      0.154415       8.02972       8.18413    
   7  0.855311     -0.156290     -0.190620      0.190620       8.00020       8.19082    
   8  0.576474     -0.550824     -0.671817      0.671817       8.11344       8.78526    
   9  0.433835     -0.835090      -1.01852       1.01852       8.10022       9.11874    
  10  0.298626      -1.20856      -1.47404       1.47404       8.11383       9.58786    
  11  0.269991      -1.30937      -1.59698       1.59698       8.09629       9.69327    
  12  0.884826     -0.122364     -0.149242      0.149242       8.20225       8.35149    
  13  0.664124     -0.409287     -0.499190      0.499190       8.12933       8.62852    
  14  0.580836     -0.543287     -0.662624      0.662624       8.25932       8.92194    
  15  0.285501      -1.25351      -1.52885       1.52885       8.11654       9.64539    
  16  0.690757     -0.369967     -0.451233      0.451233       8.10753       8.55876    
  17  0.578320     -0.547628     -0.667919      0.667919       8.10151       8.76943    
  18  0.563230     -0.574067     -0.700165      0.700165       8.05853       8.75869    
  19  0.681565     -0.383363     -0.467572      0.467572       8.32928       8.79685    
  20  0.453362     -0.791065     -0.964828      0.964828       8.09126       9.05609    
  21  0.645457     -0.437797     -0.533963      0.533963       8.59370       9.12766    
  22  0.982222E-01  -2.32052      -2.83024       2.83024       8.15194       10.9822    
  23  0.843064     -0.170712     -0.208211      0.208211       8.10666       8.31487    
  24  0.505683     -0.681845     -0.831618      0.831618       8.09139       8.92301    
  25  0.350376      -1.04875      -1.27912       1.27912       8.04326       9.32238    
  26  0.367167      -1.00194      -1.22202       1.22202       8.09096       9.31299    
  27  0.268175      -1.31611      -1.60521       1.60521       8.11412       9.71933    
  28  0.989085E-01  -2.31356      -2.82175       2.82175       8.17237       10.9941    
  29  0.349392      -1.05156      -1.28255       1.28255       8.11494       9.39748    
  30  0.945468     -0.560755E-01 -0.683928E-01  0.683928E-01   8.10246       8.17085    
  31  0.305400      -1.18613      -1.44667       1.44667       8.08929       9.53596    
  32  0.942706     -0.590006E-01 -0.719606E-01  0.719606E-01   8.09118       8.16314    
  33  0.778346     -0.250584     -0.305627      0.305627       8.10621       8.41184    
  34  0.256449      -1.36083      -1.65974       1.65974       8.09048       9.75022    
  35  0.338120      -1.08436      -1.32254       1.32254       8.10197       9.42452    
  36  0.644609     -0.439112     -0.535566      0.535566       8.14939       8.68496    
  37  0.420837     -0.865509      -1.05562       1.05562       8.09862       9.15425    
  38  0.793406     -0.231421     -0.282254      0.282254       8.15023       8.43249    
  39  0.685561     -0.377517     -0.460442      0.460442       8.19746       8.65790    
  40  0.278740      -1.27748      -1.55808       1.55808       8.10547       9.66356    
  41  0.414078     -0.881700      -1.07537       1.07537       8.35386       9.42923    
  42  0.999720     -0.280334E-03 -0.341911E-03  0.341911E-03   8.12070       8.12104    
  43  0.714259     -0.336509     -0.410426      0.410426       8.10859       8.51902    
  44  0.713371     -0.337753     -0.411944      0.411944       8.09541       8.50736    
  45  0.451360     -0.795490     -0.970226      0.970226       8.10206       9.07228    
  46  0.887280     -0.119595     -0.145865      0.145865       8.05410       8.19996    
  47  0.234319      -1.45107      -1.76981       1.76981       8.11627       9.88608    
  48  0.277567E-01  -3.58428      -4.37159       4.37159       8.12132       12.4929    
  49  0.582411     -0.540579     -0.659321      0.659321       8.62600       9.28532    
  50  0.969019     -0.314707E-01 -0.383835E-01  0.383835E-01   8.11639       8.15477    
  51  0.441889     -0.816696     -0.996089      0.996089       8.71362       9.70971    
  52  0.150247      -1.89548      -2.31183       2.31183       8.10621       10.4180    
  53  0.901555E-01  -2.40622      -2.93476       2.93476       8.20333       11.1381    
  54  0.274120      -1.29419      -1.57847       1.57847       8.19747       9.77594    
  55  0.166801      -1.79095      -2.18435       2.18435       8.21185       10.3962    
  56  0.783053     -0.244555     -0.298274      0.298274       8.04995       8.34822    
  57  0.541655     -0.613126     -0.747803      0.747803       8.22182       8.96963    
  58  0.113786      -2.17344      -2.65085       2.65085       8.09847       10.7493    
  59  0.794080     -0.230571     -0.281217      0.281217       8.10953       8.39074    
  60  0.266758      -1.32141      -1.61167       1.61167       8.11497       9.72664    
  61  0.637690     -0.449903     -0.548727      0.548727       8.06816       8.61689    
  62  0.912681     -0.913685E-01 -0.111438      0.111438       8.04862       8.16006    
  63  0.303728      -1.19162      -1.45337       1.45337       8.20747       9.66084    
  64  0.318303      -1.14475      -1.39620       1.39620       8.11426       9.51047    
  65  0.255833      -1.36323      -1.66267       1.66267       8.07122       9.73389    
  66  0.988998     -0.110626E-01 -0.134926E-01  0.134926E-01   8.10621       8.11970    
  67  0.335641      -1.09171      -1.33151       1.33151       8.06918       9.40070    
  68  0.575346     -0.552784     -0.674207      0.674207       8.06820       8.74240    
  69  0.439298E-01  -3.12516      -3.81163       3.81163       8.32632       12.1379    
  70  0.179935      -1.71516      -2.09190       2.09190       8.16632       10.2582    
loop,thermsimp(1:2)       18   1.17098       1.49529    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    174          8.06          0.86          1.12         24.39          0.07          0.05         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    175          8.08          0.87          1.12         24.32          0.08          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       18
neval is:      174
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       19
neval is:      174


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      174     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.352992      -1.04131      -1.27004       1.27004       8.10621       9.37625    
   2  0.270835E-01  -3.60883      -4.40154       4.40154       8.12070       12.5222    
   3  0.923755     -0.793087E-01 -0.967295E-01  0.967295E-01   8.11639       8.21312    
   4  0.535520     -0.624517     -0.761697      0.761697       8.04862       8.81031    
   5  0.629344     -0.463078     -0.564796      0.564796       8.09118       8.65598    
   6  0.572648E-01  -2.86007      -3.48830       3.48830       8.10246       11.5908    
   7  0.353113E-01  -3.34355      -4.07799       4.07799       8.12153       12.1995    
   8  0.580838     -0.543283     -0.662619      0.662619       8.02972       8.69233    
   9  0.370403     -0.993164      -1.21132       1.21132       8.00020       9.21152    
  10  0.443010     -0.814162     -0.992999      0.992999       8.05410       9.04710    
  11  0.188704      -1.66757      -2.03387       2.03387       8.10666       10.1405    
  12  0.177608      -1.72818      -2.10779       2.10779       8.04995       10.1577    
  13  0.694998     -0.363847     -0.443768      0.443768       8.20225       8.64602    
  14  0.160742      -1.82796      -2.22948       2.22948       8.10953       10.3390    
  15  0.290050      -1.23770      -1.50957       1.50957       8.10621       9.61579    
  16  0.441138E-01  -3.12098      -3.80653       3.80653       8.15023       11.9568    
  17  0.372461     -0.987622      -1.20456       1.20456       8.09541       9.29997    
  18  0.652779     -0.426517     -0.520205      0.520205       8.10859       8.62880    
  19  0.998108     -0.189387E-02 -0.230988E-02  0.230988E-02   8.10753       8.10984    
  20  0.741140     -0.299566     -0.365368      0.365368       8.06816       8.43353    
  21  0.623042     -0.473141     -0.577070      0.577070       8.12933       8.70640    
  22  0.504617     -0.683955     -0.834191      0.834191       8.19746       9.03165    
  23  0.872499     -0.136394     -0.166354      0.166354       8.14939       8.31574    
  24  0.142620      -1.94757      -2.37537       2.37537       8.06820       10.4436    
  25  0.580285     -0.544236     -0.663782      0.663782       8.05853       8.72231    
  26  0.860063E-01  -2.45334      -2.99223       2.99223       8.10151       11.0937    
  27  0.401846     -0.911687      -1.11195       1.11195       8.11344       9.22539    
  28  0.161242      -1.82485      -2.22569       2.22569       8.32928       10.5550    
  29  0.550753     -0.596469     -0.727488      0.727488       8.25932       8.98681    
  30  0.815012     -0.204553     -0.249484      0.249484       8.09139       8.34087    
  31  0.438663     -0.824024      -1.00503       1.00503       8.22182       9.22685    
  32  0.542283     -0.611968     -0.746391      0.746391       8.09126       8.83765    
  33  0.943132E-01  -2.36113      -2.87978       2.87978       8.10206       10.9818    
  34  0.236587      -1.44144      -1.75806       1.75806       8.10022       9.85828    
  35  0.283068      -1.26207      -1.53929       1.53929       8.59370       10.1330    
  36  0.973178     -0.271886E-01 -0.331608E-01  0.331608E-01   8.17798       8.21115    
  37  0.596723     -0.516302     -0.629711      0.629711       8.09862       8.72834    
  38  0.595114     -0.519003     -0.633005      0.633005       8.09102       8.72402    
  39  0.948736     -0.526250E-01 -0.641845E-01  0.641845E-01   8.62600       8.69018    
  40  0.216072E-01  -3.83473      -4.67706       4.67706       8.09096       12.7680    
  41  0.440213     -0.820496      -1.00072       1.00072       8.04326       9.04399    
  42  0.905197     -0.996023E-01 -0.121481      0.121481       8.11494       8.23642    
  43  0.158396      -1.84266      -2.24741       2.24741       8.06918       10.3166    
  44  0.287789      -1.24553      -1.51912       1.51912       8.10197       9.62109    
  45  0.238244      -1.43446      -1.74955       1.74955       8.35386       10.1034    
  46  0.363881      -1.01093      -1.23299       1.23299       8.11426       9.34725    
  47  0.828805     -0.187771     -0.229016      0.229016       8.08929       8.31830    
  48  0.587140     -0.532492     -0.649458      0.649458       8.11383       8.76328    
  49  0.141687      -1.95414      -2.38338       2.38338       8.12653       10.5099    
  50  0.879115     -0.128839     -0.157139      0.157139       8.11654       8.27368    
  51  0.742190     -0.298150     -0.363641      0.363641       8.20747       8.57111    
  52  0.218958      -1.51887      -1.85251       1.85251       8.10547       9.95798    
  53  0.333192      -1.09904      -1.34045       1.34045       8.09629       9.43674    
  54  0.356774      -1.03065      -1.25704       1.25704       8.71362       9.97066    
  55  0.739597     -0.301650     -0.367910      0.367910       8.11412       8.48203    
  56  0.224658E-01  -3.79576      -4.62953       4.62953       8.11497       12.7445    
  57  0.338214      -1.08408      -1.32220       1.32220       8.07122       9.39342    
  58  0.227014      -1.48275      -1.80844       1.80844       8.09048       9.89892    
  59  0.289792E-01  -3.54118      -4.31902       4.31902       8.09327       12.4123    
  60  0.871226     -0.137854     -0.168135      0.168135       8.19747       8.36560    
  61  0.159622      -1.83495      -2.23801       2.23801       8.11627       10.3543    
  62  0.581826     -0.541584     -0.660547      0.660547       8.16632       8.82686    
  63  0.733467E-02  -4.91514      -5.99479       5.99479       8.21185       14.2066    
  64  0.646078     -0.436835     -0.532789      0.532789       8.10621       8.63900    
  65  0.976710     -0.235653E-01 -0.287415E-01  0.287415E-01   8.09847       8.12721    
  66  0.390127     -0.941284      -1.14804       1.14804       8.15194       9.29998    
  67  0.394291     -0.930666      -1.13509       1.13509       8.17237       9.30747    
  68  0.796004     -0.228151     -0.278266      0.278266       8.20333       8.48159    
  69  0.393786     -0.931948      -1.13666       1.13666       8.32632       9.46298    
  70  0.672353     -0.396971     -0.484169      0.484169       8.06414       8.54831    
loop,thermsimp(1:2)       19   1.27004       4.40154    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    176          8.01          0.86          1.13         24.40          0.08          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    177          8.05          0.86          1.13         24.34          0.12          0.05         26.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       19
neval is:      176
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       20
neval is:      176


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      176     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.534746     -0.625963     -0.763460      0.763460       8.10753       8.87099    
   2  0.288348      -1.24359      -1.51675       1.51675       8.09847       9.61522    
   3  0.910112E-01  -2.39677      -2.92324       2.92324       8.17798       11.1012    
   4  0.213812      -1.54266      -1.88151       1.88151       8.11639       9.99790    
   5  0.575222     -0.552999     -0.674469      0.674469       8.11494       8.78940    
   6  0.855707     -0.155827     -0.190056      0.190056       8.11654       8.30659    
   7  0.818692     -0.200047     -0.243989      0.243989       8.14939       8.39338    
   8  0.309911      -1.17147      -1.42879       1.42879       8.08929       9.51808    
   9  0.773438     -0.256910     -0.313342      0.313342       8.09139       8.40473    
  10  0.440502E-01  -3.12243      -3.80829       3.80829       8.19747       12.0058    
  11  0.211655      -1.55280      -1.89388       1.89388       8.06816       9.96204    
  12  0.713577     -0.337465     -0.411592      0.411592       8.20333       8.61492    
  13  0.927405     -0.753650E-01 -0.919195E-01  0.919195E-01   8.11412       8.20604    
  14  0.360229      -1.02101      -1.24529       1.24529       8.06414       9.30943    
  15  0.911872     -0.922553E-01 -0.112520      0.112520       8.20747       8.31999    
  16  0.800691     -0.222280     -0.271106      0.271106       8.10859       8.37970    
  17  0.169830      -1.77296      -2.16240       2.16240       8.10621       10.2686    
  18  0.581014     -0.542980     -0.662250      0.662250       8.20225       8.86450    
  19  0.869395     -0.139958     -0.170700      0.170700       8.09118       8.26188    
  20  0.773880     -0.256338     -0.312645      0.312645       8.62600       8.93864    
  21  0.496085     -0.701008     -0.854990      0.854990       8.02972       8.88471    
  22  0.530037     -0.634809     -0.774249      0.774249       8.12933       8.90358    
  23  0.239414      -1.42956      -1.74358       1.74358       8.05853       9.80211    
  24  0.595728     -0.517972     -0.631748      0.631748       8.09102       8.72276    
  25  0.170793      -1.76730      -2.15551       2.15551       8.09862       10.2541    
  26  0.983027     -0.171183E-01 -0.208784E-01  0.208784E-01   8.11383       8.13470    
  27  0.608714     -0.496407     -0.605446      0.605446       8.04862       8.65406    
  28  0.518727     -0.656378     -0.800557      0.800557       8.16632       8.96687    
  29  0.887918     -0.118876     -0.144988      0.144988       8.09126       8.23625    
  30  0.140498      -1.96256      -2.39365       2.39365       8.25932       10.6530    
  31  0.256308      -1.36138      -1.66041       1.66041       8.19746       9.85787    
  32  0.887238     -0.119642     -0.145922      0.145922       8.04326       8.18919    
  33  0.306042      -1.18403      -1.44411       1.44411       8.05410       9.49821    
  34  0.993873     -0.614632E-02 -0.749640E-02  0.749640E-02   8.00020       8.00770    
  35  0.275412E-01  -3.59207      -4.38110       4.38110       8.11344       12.4945    
  36  0.698960     -0.358161     -0.436834      0.436834       8.22182       8.65866    
  37  0.268424      -1.31519      -1.60408       1.60408       8.09541       9.69949    
  38  0.580935E-01  -2.84570      -3.47078       3.47078       8.15194       11.6227    
  39  0.242705      -1.41591      -1.72692       1.72692       8.17237       9.89930    
  40  0.443517     -0.813019     -0.991605      0.991605       8.11426       9.10587    
  41  0.904179     -0.100728     -0.122853      0.122853       8.10621       8.22907    
  42  0.454025     -0.789603     -0.963045      0.963045       8.07122       9.03427    
  43  0.592994     -0.522572     -0.637358      0.637358       8.09629       8.73364    
  44  0.401796     -0.911812      -1.11210       1.11210       8.32632       9.43842    
  45  0.130776      -2.03427      -2.48111       2.48111       8.10621       10.5873    
  46  0.709753     -0.342839     -0.418146      0.418146       8.10197       8.52012    
  47  0.388071     -0.946568      -1.15449       1.15449       8.10022       9.25471    
  48  0.362521      -1.01467      -1.23755       1.23755       8.09048       9.32803    
  49  0.285379      -1.25394      -1.52937       1.52937       8.10547       9.63485    
  50  0.286508      -1.24999      -1.52456       1.52456       8.71362       10.2382    
  51  0.951542     -0.496714E-01 -0.605821E-01  0.605821E-01   8.35386       8.41444    
  52  0.122933      -2.09612      -2.55655       2.55655       8.59370       11.1502    
  53  0.210928      -1.55624      -1.89808       1.89808       8.10666       10.0047    
  54  0.860093     -0.150715     -0.183821      0.183821       8.04995       8.23377    
  55  0.997563     -0.243951E-02 -0.297537E-02  0.297537E-02   8.06918       8.07216    
  56  0.750720     -0.286722     -0.349703      0.349703       8.10953       8.45923    
  57  0.667101     -0.404814     -0.493734      0.493734       8.11627       8.61000    
  58  0.508750E-01  -2.97838      -3.63261       3.63261       8.06820       11.7008    
  59  0.552474     -0.593349     -0.723683      0.723683       8.12653       8.85021    
  60  0.514478     -0.664602     -0.810587      0.810587       8.32928       9.13986    
  61  0.539834     -0.616494     -0.751911      0.751911       8.10206       8.85397    
  62  0.610888     -0.492841     -0.601097      0.601097       8.10151       8.70260    
  63  0.328075      -1.11451      -1.35932       1.35932       8.10246       9.46178    
  64  0.894692     -0.111276     -0.135719      0.135719       8.15023       8.28595    
  65  0.810283     -0.210372     -0.256581      0.256581       8.12153       8.37811    
  66  0.691642     -0.368687     -0.449672      0.449672       8.09327       8.54294    
  67  0.896896     -0.108815     -0.132717      0.132717       8.12070       8.25341    
  68  0.742287     -0.298020     -0.363482      0.363482       8.11497       8.47846    
  69  0.974450     -0.258821E-01 -0.315673E-01  0.315673E-01   8.09096       8.12253    
  70  0.339669      -1.07978      -1.31696       1.31696       8.01090       9.32786    
loop,thermsimp(1:2)       20  0.763460       1.51675    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    178          8.15          0.86          1.12         24.67          0.10          0.05         26.80
Just calling func    0   0         26.80


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    179          8.71          0.87          1.14         24.59          0.04          0.05         26.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.15
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       20
neval is:      178
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       21
neval is:      178


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      178     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297422      -1.21260      -1.47896       1.47896       8.00020       9.47916    
   2  0.663536     -0.410173     -0.500270      0.500270       8.06918       8.56945    
   3  0.263982      -1.33188      -1.62443       1.62443       8.09096       9.71540    
   4  0.792402     -0.232686     -0.283798      0.283798       8.11383       8.39762    
   5  0.624731     -0.470434     -0.573768      0.573768       8.04326       8.61703    
   6  0.170977      -1.76622      -2.15419       2.15419       8.11412       10.2683    
   7  0.362487      -1.01477      -1.23767       1.23767       8.10621       9.34388    
   8  0.659245     -0.416659     -0.508182      0.508182       8.04995       8.55813    
   9  0.746481E-03  -7.20014      -8.78170       8.78170       8.09126       16.8730    
  10  0.690046     -0.370998     -0.452490      0.452490       8.12070       8.57319    
  11  0.905636     -0.991173E-01 -0.120889      0.120889       8.09118       8.21207    
  12  0.317643      -1.14683      -1.39874       1.39874       8.15023       9.54897    
  13  0.321948      -1.13336      -1.38232       1.38232       8.11654       9.49885    
  14  0.293974      -1.22426      -1.49318       1.49318       8.20747       9.70065    
  15  0.679275     -0.386729     -0.471677      0.471677       8.12153       8.59320    
  16  0.180340      -1.71291      -2.08917       2.08917       8.10859       10.1978    
  17  0.539600     -0.616927     -0.752440      0.752440       8.14939       8.90183    
  18  0.260315      -1.34586      -1.64149       1.64149       8.09139       9.73288    
  19  0.256777      -1.35955      -1.65818       1.65818       8.35386       10.0120    
  20  0.518851     -0.656138     -0.800264      0.800264       8.10953       8.90979    
  21  0.485887     -0.721780     -0.880324      0.880324       8.11497       8.99530    
  22  0.562814     -0.574805     -0.701065      0.701065       8.10197       8.80304    
  23  0.906369     -0.983082E-01 -0.119902      0.119902       8.09327       8.21317    
  24  0.332143      -1.10219      -1.34429       1.34429       8.11627       9.46056    
  25  0.912001E-01  -2.39470      -2.92071       2.92071       8.20333       11.1240    
  26  0.302569      -1.19545      -1.45803       1.45803       8.04862       9.50665    
  27  0.362040      -1.01600      -1.23917       1.23917       8.22182       9.46099    
  28  0.630870     -0.460656     -0.561842      0.561842       8.10151       8.66335    
  29  0.685312     -0.377881     -0.460885      0.460885       8.09102       8.55190    
  30  0.329910      -1.10894      -1.35252       1.35252       8.09629       9.44881    
  31  0.906630E-01  -2.40061      -2.92792       2.92792       8.11494       11.0429    
  32  0.339749      -1.07955      -1.31668       1.31668       8.12653       9.44321    
  33  0.783039     -0.244573     -0.298295      0.298295       8.10206       8.40035    
  34  0.322673      -1.13112      -1.37958       1.37958       8.20225       9.58183    
  35  0.255311      -1.36527      -1.66516       1.66516       8.10753       9.77269    
  36  0.645921     -0.437078     -0.533085      0.533085       8.02972       8.56280    
  37  0.240122      -1.42661      -1.73997       1.73997       8.12933       9.86931    
  38  0.224638      -1.49326      -1.82127       1.82127       8.62600       10.4473    
  39  0.682659     -0.381760     -0.465616      0.465616       8.16632       8.63193    
  40  0.533856     -0.627629     -0.765492      0.765492       8.07122       8.83671    
  41  0.439620E-02  -5.42701      -6.61910       6.61910       8.11426       14.7334    
  42  0.409891     -0.891863      -1.08777       1.08777       8.32928       9.41704    
  43  0.379406     -0.969149      -1.18203       1.18203       8.10022       9.28225    
  44  0.982111     -0.180514E-01 -0.220165E-01  0.220165E-01   8.06414       8.08616    
  45  0.243530      -1.41251      -1.72278       1.72278       8.01090       9.73368    
  46  0.709323     -0.343445     -0.418885      0.418885       8.09048       8.50936    
  47  0.212014      -1.55110      -1.89181       1.89181       8.32632       10.2181    
  48  0.530919     -0.633146     -0.772222      0.772222       8.10246       8.87468    
  49  0.439600     -0.821890      -1.00242       1.00242       8.05410       9.05652    
  50  0.304385      -1.18946      -1.45074       1.45074       8.08929       9.54002    
  51  0.850253     -0.162221     -0.197854      0.197854       8.09847       8.29633    
  52  0.686564     -0.376055     -0.458658      0.458658       8.10547       8.56413    
  53  0.894299     -0.111715     -0.136254      0.136254       8.09541       8.23167    
  54  0.724097E-02  -4.92800      -6.01047       6.01047       8.05853       14.0690    
  55  0.666382     -0.405892     -0.495049      0.495049       8.19746       8.69251    
  56  0.216072      -1.53214      -1.86869       1.86869       8.17237       10.0411    
  57  0.481454     -0.730944     -0.891501      0.891501       8.06816       8.95966    
  58  0.107413      -2.23107      -2.72114       2.72114       8.11639       10.8375    
  59  0.943557     -0.580990E-01 -0.708609E-01  0.708609E-01   8.10666       8.17752    
  60  0.259811      -1.34780      -1.64385       1.64385       8.71362       10.3575    
  61  0.526852     -0.640836     -0.781600      0.781600       8.09862       8.88023    
  62  0.306319E-01  -3.48571      -4.25138       4.25138       8.10621       12.3576    
  63  0.180513      -1.71195      -2.08800       2.08800       8.10621       10.1942    
  64  0.901495     -0.103701     -0.126480      0.126480       8.25932       8.38580    
  65  0.274530      -1.29269      -1.57665       1.57665       8.17798       9.75463    
  66  0.773836     -0.256395     -0.312714      0.312714       8.59370       8.90641    
  67  0.158774      -1.84027      -2.24450       2.24450       8.15194       10.3964    
  68  0.514226     -0.665093     -0.811185      0.811185       8.06820       8.87938    
  69  0.312978      -1.16162      -1.41678       1.41678       8.19747       9.61425    
  70  0.917534     -0.860656E-01 -0.104971      0.104971       8.14970       8.25467    
loop,thermsimp(1:2)       21   1.47896      0.500270    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    180          8.13          0.86          1.13         24.36          0.08          0.05         26.48
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    181          8.38          0.86          1.12         24.40          0.08          0.05         26.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  180    8.3766        1.115     -1.883      3.164     -102.6      1.407    
                      0.3689      1.350     -99.70      3.683    -0.6984E-01

                       2.256     -1.039      1.530      7237.      3364.    

                     -0.1309      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6252.      425.6    

                       1.433     -5.816     -4.378     -8.416      6.440    

                      -14.79     -3.556     0.1020E+05  0.000     0.1345E+05



                       1632.     0.1319E+05 -3360.      8781.      4952.    

                       6089.     0.3170E-01 0.1974     0.1422E-01 0.1252    

                     -0.2486    -0.9822E-01 0.1942     0.1236     0.7127E-01



                     -0.4452    -0.7696      0.000     0.9708E-01-0.5230    

                      0.1422E-01 0.1138    -0.7116    -0.1379     0.5493E-01

                      0.5938E-01 0.1342    -0.6542     -1.220      7425.    



                      -1.098     -1.265     -2.235     -2.304    -0.3807    

                     -0.3252      9.209      8.689    -0.1872E+05 -4.000    

                     -0.6205     -2.133      9.308      8.878    -0.1908E+05



                      -4.000     0.5020    -0.4282      8.869      9.092    

                     -0.1908E+05 -7.000    -0.8091    -0.6542      9.048    

                       8.763    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       21
neval is:      180
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       22
neval is:      180


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      180     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.383671     -0.957969      -1.16839       1.16839       8.06414       9.23254    
   2  0.741480     -0.299107     -0.364808      0.364808       8.10666       8.47147    
   3  0.138898      -1.97401      -2.40762       2.40762       8.09118       10.4988    
   4  0.751974E-01  -2.58764      -3.15603       3.15603       8.09327       11.2493    
   5  0.824485     -0.192996     -0.235389      0.235389       8.09541       8.33080    
   6  0.982900     -0.172482E-01 -0.210369E-01  0.210369E-01   8.14970       8.17073    
   7  0.693409     -0.366136     -0.446560      0.446560       8.09847       8.54503    
   8  0.941572     -0.602045E-01 -0.734288E-01  0.734288E-01   8.25932       8.33275    
   9  0.812713     -0.207378     -0.252930      0.252930       8.11383       8.36676    
  10  0.879507     -0.128393     -0.156596      0.156596       8.10206       8.25865    
  11  0.418958     -0.869984      -1.06108       1.06108       8.09048       9.15156    
  12  0.314952      -1.15533      -1.40911       1.40911       8.09102       9.50013    
  13  0.812426     -0.207731     -0.253361      0.253361       8.04995       8.30331    
  14  0.213788      -1.54277      -1.88165       1.88165       8.02972       9.91137    
  15  0.521629     -0.650798     -0.793751      0.793751       8.10547       8.89922    
  16  0.287143      -1.24777      -1.52186       1.52186       8.06918       9.59104    
  17  0.518340     -0.657125     -0.801467      0.801467       8.12070       8.92216    
  18  0.712802E-02  -4.94372      -6.02965       6.02965       8.12153       14.1512    
  19  0.579935     -0.544838     -0.664516      0.664516       8.04326       8.70778    
  20  0.508101E-02  -5.28224      -6.44253       6.44253       8.16632       14.6088    
  21  0.984466     -0.156557E-01 -0.190946E-01  0.190946E-01   8.10151       8.12060    
  22  0.394325     -0.930579      -1.13499       1.13499       8.19746       9.33245    
  23  0.837309     -0.177562     -0.216565      0.216565       8.10197       8.31854    
  24  0.683519     -0.380501     -0.464081      0.464081       8.07122       8.53530    
  25  0.892337     -0.113912     -0.138933      0.138933       8.10246       8.24139    
  26  0.297675      -1.21175      -1.47792       1.47792       8.06820       9.54612    
  27  0.566054     -0.569065     -0.694065      0.694065       8.09862       8.79269    
  28  0.325499E-01  -3.42498      -4.17730       4.17730       8.14939       12.3267    
  29  0.721169     -0.326882     -0.398684      0.398684       8.59370       8.99238    
  30  0.370449     -0.993040      -1.21117       1.21117       8.10953       9.32069    
  31  0.398952     -0.918913      -1.12076       1.12076       8.06816       9.18892    
  32  0.942469     -0.592518E-01 -0.722669E-01  0.722669E-01   8.11497       8.18724    
  33  0.379045     -0.970101      -1.18319       1.18319       8.05410       9.23729    
  34  0.218373      -1.52155      -1.85577       1.85577       8.10022       9.95599    
  35  0.413944     -0.882024      -1.07577       1.07577       8.10621       9.18198    
  36  0.452532     -0.792896     -0.967062      0.967062       8.32928       9.29634    
  37  0.938896     -0.630505E-01 -0.769000E-01  0.769000E-01   8.12653       8.20343    
  38  0.389299     -0.943409      -1.15064       1.15064       8.09629       9.24692    
  39  0.943794     -0.578471E-01 -0.705537E-01  0.705537E-01   8.11627       8.18682    
  40  0.706887     -0.346884     -0.423080      0.423080       8.22182       8.64490    
  41  0.274873      -1.29145      -1.57512       1.57512       8.00020       9.57532    
  42  0.343864      -1.06751      -1.30200       1.30200       8.11654       9.41853    
  43  0.869527E-01  -2.44239      -2.97888       2.97888       8.04862       11.0275    
  44  0.859615     -0.151271     -0.184498      0.184498       8.08929       8.27378    
  45  0.264079      -1.33151      -1.62398       1.62398       8.15023       9.77422    
  46  0.494871     -0.703457     -0.857977      0.857977       8.20225       9.06023    
  47  0.112943      -2.18087      -2.65992       2.65992       8.19747       10.8574    
  48  0.358273      -1.02646      -1.25193       1.25193       8.20747       9.45940    
  49  0.215257      -1.53592      -1.87330       1.87330       8.09096       9.96426    
  50  0.441681     -0.817166     -0.996663      0.996663       8.09139       9.08805    
  51  0.888276     -0.118473     -0.144497      0.144497       8.01090       8.15540    
  52  0.780286     -0.248095     -0.302591      0.302591       8.17798       8.48058    
  53  0.488747     -0.715911     -0.873166      0.873166       8.10753       8.98069    
  54  0.683795     -0.380097     -0.463589      0.463589       8.12933       8.59292    
  55  0.466986     -0.761456     -0.928715      0.928715       8.35386       9.28257    
  56  0.900497     -0.104809     -0.127831      0.127831       8.17237       8.30020    
  57  0.876058     -0.132323     -0.161388      0.161388       8.10621       8.26760    
  58  0.413808     -0.882354      -1.07617       1.07617       8.10859       9.18476    
  59  0.268165      -1.31615      -1.60526       1.60526       8.32632       9.93157    
  60  0.637465     -0.450255     -0.549157      0.549157       8.11412       8.66328    
  61  0.476344     -0.741616     -0.904517      0.904517       8.71362       9.61814    
  62  0.878474     -0.129569     -0.158030      0.158030       8.15194       8.30997    
  63  0.185973      -1.68216      -2.05165       2.05165       8.62600       10.6777    
  64  0.802667E-03  -7.12757      -8.69319       8.69319       8.11639       16.8096    
  65  0.480758     -0.732390     -0.893265      0.893265       8.11494       9.00820    
  66  0.789279     -0.236635     -0.288613      0.288613       8.20333       8.49194    
  67  0.174217      -1.74745      -2.13129       2.13129       8.10621       10.2375    
  68  0.825561     -0.191692     -0.233798      0.233798       8.05853       8.29233    
  69  0.532291     -0.630566     -0.769074      0.769074       8.11426       8.88334    
  70  0.118632E-01  -4.43431      -5.40834       5.40834       8.12578       13.5341    
loop,thermsimp(1:2)       22   1.16839      0.364808    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    182          8.07          0.86          1.12         24.33          0.07          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    183          8.09          0.87          1.12         24.41          0.07          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       22
neval is:      182
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       23
neval is:      182


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      182     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.327656      -1.11579      -1.36088       1.36088       8.10151       9.46239    
   2  0.736029     -0.306486     -0.373808      0.373808       8.01090       8.38471    
   3  0.608436     -0.496864     -0.606004      0.606004       8.14970       8.75570    
   4  0.584882     -0.536346     -0.654158      0.654158       8.11627       8.77043    
   5  0.617514     -0.482053     -0.587939      0.587939       8.11497       8.70291    
   6  0.376473     -0.976909      -1.19149       1.19149       8.12653       9.31803    
   7  0.535145     -0.625218     -0.762552      0.762552       8.10246       8.86501    
   8  0.341783      -1.07358      -1.30940       1.30940       8.10206       9.41145    
   9  0.804208E-01  -2.52048      -3.07412       3.07412       8.10621       11.1803    
  10  0.660499     -0.414760     -0.505865      0.505865       8.08929       8.59515    
  11  0.739860E-01  -2.60388      -3.17584       3.17584       8.05853       11.2344    
  12  0.203251      -1.59331      -1.94329       1.94329       8.17237       10.1157    
  13  0.637025     -0.450946     -0.550000      0.550000       8.04995       8.59995    
  14  0.687460     -0.374752     -0.457068      0.457068       8.15194       8.60901    
  15  0.663581     -0.410105     -0.500188      0.500188       8.10197       8.60216    
  16  0.579690     -0.545263     -0.665034      0.665034       8.09541       8.76045    
  17  0.775653     -0.254050     -0.309854      0.309854       8.25932       8.56917    
  18  0.284124      -1.25834      -1.53475       1.53475       8.11383       9.64857    
  19  0.317710      -1.14662      -1.39848       1.39848       8.10666       9.50514    
  20  0.958871     -0.419990E-01 -0.512244E-01  0.512244E-01   8.17798       8.22921    
  21  0.582932     -0.539685     -0.658231      0.658231       8.20333       8.86156    
  22  0.905476     -0.992942E-01 -0.121105      0.121105       8.07122       8.19233    
  23  0.225214      -1.49070      -1.81815       1.81815       8.09847       9.91662    
  24  0.618260     -0.480846     -0.586467      0.586467       8.12933       8.71580    
  25  0.608706     -0.496420     -0.605463      0.605463       8.22182       8.82728    
  26  0.651052     -0.429165     -0.523434      0.523434       8.11412       8.63756    
  27  0.138439E-02  -6.58249      -8.02839       8.02839       8.04326       16.0717    
  28  0.157375      -1.84913      -2.25530       2.25530       8.09862       10.3539    
  29  0.168063      -1.78342      -2.17516       2.17516       8.11426       10.2894    
  30  0.924354     -0.786598E-01 -0.959381E-01  0.959381E-01   8.10547       8.20141    
  31  0.985585     -0.145204E-01 -0.177099E-01  0.177099E-01   8.12070       8.13841    
  32  0.540844E-01  -2.91721      -3.55800       3.55800       8.10753       11.6655    
  33  0.535345     -0.624843     -0.762095      0.762095       8.59370       9.35579    
  34  0.736351     -0.306048     -0.373274      0.373274       8.11494       8.48821    
  35  0.283062E-01  -3.56467      -4.34768       4.34768       8.20225       12.5499    
  36  0.690743     -0.369987     -0.451257      0.451257       8.09139       8.54265    
  37  0.260994      -1.34326      -1.63831       1.63831       8.09048       9.72879    
  38  0.243637      -1.41208      -1.72225       1.72225       8.10621       9.82846    
  39  0.850226     -0.162253     -0.197893      0.197893       8.10859       8.30648    
  40  0.589307     -0.528809     -0.644965      0.644965       8.06816       8.71313    
  41  0.515087     -0.663420     -0.809145      0.809145       8.06414       8.87329    
  42  0.348855      -1.05310      -1.28442       1.28442       8.05410       9.33852    
  43  0.791407     -0.233943     -0.285331      0.285331       8.09629       8.38162    
  44  0.370775     -0.992160      -1.21009       1.21009       8.35386       9.56395    
  45  0.676021     -0.391531     -0.477534      0.477534       8.32928       8.80681    
  46  0.125601      -2.07465      -2.53036       2.53036       8.10953       10.6399    
  47  0.582904     -0.539733     -0.658289      0.658289       8.19746       8.85575    
  48  0.818994     -0.199679     -0.243540      0.243540       8.11654       8.36008    
  49  0.291406      -1.23304      -1.50388       1.50388       8.20747       9.71135    
  50  0.887104     -0.119794     -0.146107      0.146107       8.09102       8.23712    
  51  0.666242     -0.406102     -0.495305      0.495305       8.06820       8.56350    
  52  0.931047     -0.714460E-01 -0.871397E-01  0.871397E-01   8.00020       8.08734    
  53  0.169651      -1.77401      -2.16369       2.16369       8.06918       10.2329    
  54  0.228429      -1.47653      -1.80086       1.80086       8.71362       10.5145    
  55  0.453181     -0.791463     -0.965314      0.965314       8.15023       9.11555    
  56  0.376518     -0.976789      -1.19135       1.19135       8.02972       9.22106    
  57  0.551543     -0.595035     -0.725739      0.725739       8.32632       9.05206    
  58  0.837469     -0.177371     -0.216332      0.216332       8.10022       8.31655    
  59  0.436148     -0.829773      -1.01204       1.01204       8.09096       9.10300    
  60  0.245765      -1.40338      -1.71164       1.71164       8.10621       9.81785    
  61  0.727782     -0.317754     -0.387551      0.387551       8.09118       8.47873    
  62  0.677441     -0.389433     -0.474974      0.474974       8.62600       9.10097    
  63  0.835222     -0.180057     -0.219608      0.219608       8.19747       8.41707    
  64  0.964839     -0.357941E-01 -0.436565E-01  0.436565E-01   8.04862       8.09227    
  65  0.799790     -0.223406     -0.272478      0.272478       8.09327       8.36575    
  66  0.274169      -1.29401      -1.57825       1.57825       8.14939       9.72764    
  67  0.342685      -1.07094      -1.30619       1.30619       8.12578       9.43197    
  68  0.688325     -0.373494     -0.455535      0.455535       8.12153       8.57706    
  69  0.683936     -0.379890     -0.463336      0.463336       8.16632       8.62965    
  70  0.779136     -0.249570     -0.304390      0.304390       8.07180       8.37619    
loop,thermsimp(1:2)       23   1.36088      0.373808    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    184          8.09          0.86          1.13         24.34          0.08          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    185          8.37          0.86          1.12         24.55          0.06          0.04         26.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       23
neval is:      184
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       24
neval is:      184


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      184     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.291502      -1.23271      -1.50348       1.50348       8.00020       9.50368    
   2  0.991852     -0.818183E-02 -0.997903E-02  0.997903E-02   8.04862       8.05860    
   3  0.317368      -1.14769      -1.39979       1.39979       8.12070       9.52049    
   4  0.737330     -0.304720     -0.371654      0.371654       8.07122       8.44288    
   5  0.834641     -0.180753     -0.220457      0.220457       8.10547       8.32593    
   6  0.464401     -0.767007     -0.935486      0.935486       8.17798       9.11347    
   7  0.592116     -0.524053     -0.639165      0.639165       8.09102       8.73018    
   8  0.464372     -0.767069     -0.935561      0.935561       8.10859       9.04415    
   9  0.636055E-01  -2.75505      -3.36022       3.36022       8.10022       11.4604    
  10  0.712927     -0.338376     -0.412703      0.412703       8.11654       8.52924    
  11  0.265597      -1.32578      -1.61699       1.61699       8.09327       9.71026    
  12  0.152318      -1.88178      -2.29513       2.29513       8.07180       10.3669    
  13  0.629580     -0.462703     -0.564339      0.564339       8.09629       8.66062    
  14  0.849464     -0.163150     -0.198987      0.198987       8.01090       8.20989    
  15  0.487816     -0.717817     -0.875491      0.875491       8.19747       9.07296    
  16  0.374667     -0.981718      -1.19736       1.19736       8.09118       9.28854    
  17  0.657383     -0.419488     -0.511632      0.511632       8.11494       8.62657    
  18  0.846901     -0.166172     -0.202672      0.202672       8.09139       8.29406    
  19  0.201185      -1.60353      -1.95576       1.95576       8.06820       10.0240    
  20  0.771980     -0.258797     -0.315644      0.315644       8.25932       8.57496    
  21  0.507739     -0.677788     -0.826669      0.826669       8.12153       8.94820    
  22  0.280262      -1.27203      -1.55144       1.55144       8.08929       9.64073    
  23  0.285359      -1.25401      -1.52946       1.52946       8.04995       9.57941    
  24  0.246191      -1.40165      -1.70953       1.70953       8.10197       9.81150    
  25  0.559989E-01  -2.88242      -3.51557       3.51557       8.15194       11.6675    
  26  0.330462      -1.10726      -1.35048       1.35048       8.16632       9.51680    
  27  0.899405     -0.106022     -0.129311      0.129311       8.11412       8.24343    
  28  0.637003     -0.450981     -0.550042      0.550042       8.11497       8.66502    
  29  0.699726E-01  -2.65965      -3.24386       3.24386       8.06816       11.3120    
  30  0.677191     -0.389802     -0.475425      0.475425       8.12933       8.60476    
  31  0.649507     -0.431542     -0.526333      0.526333       8.14970       8.67603    
  32  0.527986     -0.638685     -0.778977      0.778977       8.09541       8.87439    
  33  0.374870E-01  -3.28376      -4.00506       4.00506       8.11627       12.1213    
  34  0.448697     -0.801407     -0.977442      0.977442       8.32928       9.30672    
  35  0.809612     -0.211200     -0.257591      0.257591       8.22182       8.47941    
  36  0.836235     -0.178846     -0.218131      0.218131       8.19746       8.41559    
  37  0.198161      -1.61867      -1.97423       1.97423       8.20333       10.1776    
  38  0.222702      -1.50192      -1.83183       1.83183       8.10246       9.93428    
  39  0.888863     -0.117812     -0.143690      0.143690       8.06414       8.20783    
  40  0.868267     -0.141256     -0.172284      0.172284       8.32632       8.49860    
  41  0.164066      -1.80749      -2.20451       2.20451       8.62600       10.8305    
  42  0.163797      -1.80912      -2.20651       2.20651       8.09096       10.2975    
  43  0.883498     -0.123867     -0.151075      0.151075       8.15023       8.30131    
  44  0.749983     -0.287705     -0.350902      0.350902       8.02972       8.38062    
  45  0.666691     -0.405428     -0.494483      0.494483       8.12653       8.62101    
  46  0.978530     -0.217038E-01 -0.264712E-01  0.264712E-01   8.05410       8.08057    
  47  0.442024     -0.816391     -0.995718      0.995718       8.59370       9.58942    
  48  0.228080      -1.47806      -1.80273       1.80273       8.10206       9.90478    
  49  0.226174      -1.48645      -1.81296       1.81296       8.12578       9.93874    
  50  0.388394     -0.945736      -1.15347       1.15347       8.10151       9.25498    
  51  0.257425      -1.35703      -1.65511       1.65511       8.10666       9.76177    
  52  0.707288     -0.346317     -0.422389      0.422389       8.35386       8.77624    
  53  0.518387     -0.657032     -0.801354      0.801354       8.11383       8.91518    
  54  0.628700     -0.464102     -0.566045      0.566045       8.20747       8.77351    
  55  0.981249     -0.189295E-01 -0.230875E-01  0.230875E-01   8.14939       8.17248    
  56  0.928260     -0.744431E-01 -0.907951E-01  0.907951E-01   8.09048       8.18127    
  57  0.752004E-02  -4.89018      -5.96435       5.96435       8.10621       14.0706    
  58  0.930611     -0.719140E-01 -0.877105E-01  0.877105E-01   8.10621       8.19392    
  59  0.552686     -0.592965     -0.723214      0.723214       8.09847       8.82169    
  60  0.695877     -0.362583     -0.442227      0.442227       8.17237       8.61460    
  61  0.432533     -0.838096      -1.02219       1.02219       8.06918       9.09137    
  62  0.127859      -2.05683      -2.50863       2.50863       8.11426       10.6229    
  63  0.304427      -1.18932      -1.45057       1.45057       8.09862       9.54919    
  64  0.938376     -0.636043E-01 -0.775755E-01  0.775755E-01   8.71362       8.79120    
  65  0.958131     -0.427711E-01 -0.521661E-01  0.521661E-01   8.10953       8.16169    
  66  0.177025      -1.73147      -2.11180       2.11180       8.10621       10.2180    
  67  0.352264      -1.04338      -1.27256       1.27256       8.05853       9.33109    
  68  0.915612     -0.881621E-01 -0.107528      0.107528       8.10753       8.21506    
  69  0.891986     -0.114305     -0.139413      0.139413       8.20225       8.34166    
  70  0.754865     -0.281216     -0.342987      0.342987       8.08867       8.43166    
loop,thermsimp(1:2)       24   1.50348      0.997903E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    186          8.07          0.87          1.13         24.35          0.09          0.04         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    187          8.07          0.86          1.12         24.40          0.09          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       24
neval is:      186
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       25
neval is:      186


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      186     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.145902      -1.92482      -2.34762       2.34762       8.04862       10.3962    
   2  0.438196     -0.825090      -1.00633       1.00633       8.05410       9.06043    
   3  0.637359     -0.450422     -0.549361      0.549361       8.10953       8.65889    
   4  0.122813      -2.09709      -2.55773       2.55773       8.14939       10.7071    
   5  0.926899     -0.759107E-01 -0.925850E-01  0.925850E-01   8.09048       8.18306    
   6  0.456580     -0.783992     -0.956202      0.956202       8.10621       9.06241    
   7  0.988763     -0.113008E-01 -0.137832E-01  0.137832E-01   8.06414       8.07793    
   8  0.499609     -0.693930     -0.846357      0.846357       8.01090       8.85726    
   9  0.432617     -0.837902      -1.02195       1.02195       8.10753       9.12948    
  10  0.403570     -0.907406      -1.10672       1.10672       8.11412       9.22085    
  11  0.435824     -0.830517      -1.01295       1.01295       8.09139       9.10434    
  12  0.504807     -0.683579     -0.833732      0.833732       8.15023       8.98397    
  13  0.778763     -0.250048     -0.304973      0.304973       8.10547       8.41045    
  14  0.429140     -0.845972      -1.03180       1.03180       8.20225       9.23405    
  15  0.597763     -0.514562     -0.627589      0.627589       8.02972       8.65730    
  16  0.425932     -0.853476      -1.04095       1.04095       8.19746       9.23841    
  17  0.825778     -0.191430     -0.233479      0.233479       8.08867       8.32215    
  18  0.448772     -0.801241     -0.977239      0.977239       8.07122       9.04846    
  19  0.701335     -0.354770     -0.432697      0.432697       8.22182       8.65452    
  20  0.425857     -0.853651      -1.04116       1.04116       8.32632       9.36748    
  21  0.800815     -0.222126     -0.270917      0.270917       8.11654       8.38746    
  22  0.724239     -0.322634     -0.393503      0.393503       8.25932       8.65282    
  23  0.312194      -1.16413      -1.41984       1.41984       8.12933       9.54917    
  24  0.796592     -0.227412     -0.277365      0.277365       8.17237       8.44974    
  25  0.164146      -1.80700      -2.20392       2.20392       8.12653       10.3305    
  26  0.503041     -0.687083     -0.838006      0.838006       8.11494       8.95294    
  27  0.640838     -0.444978     -0.542721      0.542721       8.09629       8.63901    
  28  0.327752      -1.11550      -1.36053       1.36053       8.11497       9.47550    
  29  0.720325     -0.328053     -0.400113      0.400113       8.14970       8.54981    
  30  0.447570     -0.803922     -0.980509      0.980509       8.09102       9.07152    
  31  0.377461     -0.974289      -1.18830       1.18830       8.20747       9.39577    
  32  0.951264     -0.499633E-01 -0.609381E-01  0.609381E-01   8.35386       8.41479    
  33  0.610405     -0.493632     -0.602062      0.602062       8.71362       9.31568    
  34  0.564697     -0.571466     -0.696993      0.696993       8.09847       8.79546    
  35  0.993998     -0.601974E-02 -0.734202E-02  0.734202E-02   8.09541       8.10275    
  36  0.908032     -0.964757E-01 -0.117667      0.117667       8.11383       8.23149    
  37  0.731210     -0.313055     -0.381820      0.381820       8.12153       8.50335    
  38  0.818812     -0.199901     -0.243811      0.243811       8.10859       8.35240    
  39  0.423172     -0.859976      -1.04888       1.04888       8.19747       9.24634    
  40  0.554414     -0.589843     -0.719407      0.719407       8.06918       8.78859    
  41  0.244903E-01  -3.70948      -4.52429       4.52429       8.17798       12.7023    
  42  0.337898      -1.08501      -1.32334       1.32334       8.10151       9.42485    
  43  0.634521E-01  -2.75747      -3.36317       3.36317       8.09118       11.4544    
  44  0.824978     -0.192398     -0.234660      0.234660       8.32928       8.56394    
  45  0.954123     -0.469622E-01 -0.572778E-01  0.572778E-01   8.05853       8.11581    
  46  0.807852     -0.213376     -0.260246      0.260246       8.00020       8.26044    
  47  0.335430      -1.09234      -1.33228       1.33228       8.16632       9.49860    
  48  0.266194      -1.32353      -1.61426       1.61426       8.12070       9.73495    
  49  0.797818     -0.225874     -0.275490      0.275490       8.09862       8.37411    
  50  0.710601     -0.341644     -0.416688      0.416688       8.04995       8.46664    
  51  0.469059     -0.757026     -0.923313      0.923313       8.59370       9.51701    
  52  0.256457E-01  -3.66338      -4.46807       4.46807       8.08929       12.5574    
  53  0.620630     -0.477020     -0.581801      0.581801       8.09327       8.67507    
  54  0.600237     -0.510431     -0.622551      0.622551       8.10666       8.72921    
  55  0.959467     -0.413769E-01 -0.504656E-01  0.504656E-01   8.10197       8.15244    
  56  0.541492     -0.613428     -0.748172      0.748172       8.10206       8.85023    
  57  0.577789     -0.548547     -0.669040      0.669040       8.10246       8.77150    
  58  0.701570     -0.354435     -0.432289      0.432289       8.12578       8.55807    
  59  0.274557E-01  -3.59518      -4.38489       4.38489       8.06820       12.4531    
  60  0.584746     -0.536578     -0.654441      0.654441       8.20333       8.85777    
  61  0.131184      -2.03115      -2.47731       2.47731       8.10621       10.5835    
  62  0.986883     -0.132037E-01 -0.161040E-01  0.161040E-01   8.09096       8.10707    
  63  0.257198      -1.35791      -1.65618       1.65618       8.07180       9.72799    
  64  0.831173     -0.184917     -0.225536      0.225536       8.11426       8.33980    
  65  0.332503      -1.10111      -1.34297       1.34297       8.62600       9.96897    
  66  0.123451      -2.09191      -2.55141       2.55141       8.06816       10.6196    
  67  0.545729     -0.605633     -0.738665      0.738665       8.10022       8.83888    
  68  0.194995      -1.63478      -1.99387       1.99387       8.15194       10.1458    
  69  0.811658     -0.208676     -0.254514      0.254514       8.11627       8.37078    
  70  0.610911     -0.492804     -0.601052      0.601052       8.06768       8.66873    
loop,thermsimp(1:2)       25   2.34762       1.00633    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    188          8.05          0.87          1.12         24.36          0.07          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    189          8.04          0.86          1.12         24.33          0.10          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       25
neval is:      188
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       26
neval is:      188


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      188     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.781042     -0.247126     -0.301409      0.301409       8.06414       8.36555    
   2  0.928800     -0.738619E-01 -0.900863E-01  0.900863E-01   8.09541       8.18550    
   3  0.727994     -0.317462     -0.387195      0.387195       8.09096       8.47816    
   4  0.109723E-01  -4.51238      -5.50356       5.50356       8.05853       13.5621    
   5  0.160096      -1.83198      -2.23439       2.23439       8.10197       10.3364    
   6  0.497079     -0.699006     -0.852548      0.852548       8.09048       8.94302    
   7  0.789473     -0.236389     -0.288314      0.288314       8.11383       8.40214    
   8  0.763780     -0.269476     -0.328668      0.328668       8.00020       8.32887    
   9  0.217288      -1.52653      -1.86185       1.86185       8.08867       9.95052    
  10  0.867642     -0.141976     -0.173163      0.173163       8.11426       8.28743    
  11  0.740966     -0.299800     -0.365654      0.365654       8.10859       8.47424    
  12  0.999757     -0.242662E-03 -0.295965E-03  0.295965E-03   8.11627       8.11656    
  13  0.587476     -0.531920     -0.648760      0.648760       8.09862       8.74738    
  14  0.703619     -0.351518     -0.428732      0.428732       8.11654       8.54527    
  15  0.740946     -0.299828     -0.365687      0.365687       8.10547       8.47116    
  16  0.335927      -1.09086      -1.33048       1.33048       8.35386       9.68433    
  17  0.736553     -0.305774     -0.372939      0.372939       8.17237       8.54531    
  18  0.597397     -0.515174     -0.628335      0.628335       8.04995       8.67828    
  19  0.126601      -2.06672      -2.52069       2.52069       8.12153       10.6422    
  20  0.990194     -0.985477E-02 -0.120194E-01  0.120194E-01   8.14970       8.16171    
  21  0.716453     -0.333443     -0.406687      0.406687       8.12578       8.53247    
  22  0.279233E-01  -3.57829      -4.36429       4.36429       8.32928       12.6936    
  23  0.413932     -0.882054      -1.07580       1.07580       8.09629       9.17209    
  24  0.109516      -2.21168      -2.69749       2.69749       8.25932       10.9568    
  25  0.440749     -0.819279     -0.999240      0.999240       8.22182       9.22106    
  26  0.412115     -0.886453      -1.08117       1.08117       8.02972       9.11088    
  27  0.146963      -1.91758      -2.33879       2.33879       8.10953       10.4483    
  28  0.345919      -1.06155      -1.29473       1.29473       8.06768       9.36240    
  29  0.343614      -1.06824      -1.30288       1.30288       8.09327       9.39615    
  30  0.600334E-01  -2.81285      -3.43072       3.43072       8.10666       11.5374    
  31  0.751538     -0.285634     -0.348375      0.348375       8.10246       8.45083    
  32  0.878119     -0.129973     -0.158523      0.158523       8.06918       8.22771    
  33  0.544046     -0.608721     -0.742431      0.742431       8.09847       8.84090    
  34  0.931023     -0.714714E-01 -0.871707E-01  0.871707E-01   8.10022       8.18739    
  35  0.131968      -2.02520      -2.47005       2.47005       8.10206       10.5721    
  36  0.826694E-01  -2.49291      -3.04049       3.04049       8.01090       11.0514    
  37  0.174702E-02  -6.34984      -7.74463       7.74463       8.20333       15.9480    
  38  0.233470      -1.45470      -1.77424       1.77424       8.11494       9.88918    
  39  0.232927      -1.45703      -1.77708       1.77708       8.15023       9.92731    
  40  0.958279     -0.426163E-01 -0.519773E-01  0.519773E-01   8.07122       8.12320    
  41  0.820100     -0.198330     -0.241894      0.241894       8.05410       8.29599    
  42  0.305797      -1.18483      -1.44509       1.44509       8.10621       9.55130    
  43  0.260853      -1.34380      -1.63897       1.63897       8.09102       9.72999    
  44  0.960408     -0.403967E-01 -0.492702E-01  0.492702E-01   8.09139       8.14066    
  45  0.318957      -1.14270      -1.39370       1.39370       8.10753       9.50123    
  46  0.146887      -1.91809      -2.33942       2.33942       8.11412       10.4535    
  47  0.787623     -0.238735     -0.291175      0.291175       8.20225       8.49343    
  48  0.452412     -0.793163     -0.967387      0.967387       8.19746       9.16485    
  49  0.218339      -1.52170      -1.85596       1.85596       8.19747       10.0534    
  50  0.177672      -1.72782      -2.10735       2.10735       8.71362       10.8210    
  51  0.928922     -0.737304E-01 -0.899259E-01  0.899259E-01   8.32632       8.41624    
  52  0.341447      -1.07456      -1.31060       1.31060       8.20747       9.51807    
  53  0.462674     -0.770732     -0.940029      0.940029       8.10151       9.04154    
  54  0.125513      -2.07534      -2.53121       2.53121       8.11497       10.6462    
  55  0.354899      -1.03592      -1.26347       1.26347       8.16632       9.42979    
  56  0.341830      -1.07344      -1.30923       1.30923       8.59370       9.90293    
  57  0.604983     -0.502555     -0.612945      0.612945       8.12933       8.74228    
  58  0.223932      -1.49641      -1.82511       1.82511       8.07180       9.89691    
  59  0.146473      -1.92091      -2.34285       2.34285       8.12070       10.4635    
  60  0.997224     -0.277992E-02 -0.339054E-02  0.339054E-02   8.62600       8.62939    
  61  0.430465     -0.842888      -1.02803       1.02803       8.15194       9.17998    
  62  0.712472     -0.339015     -0.413482      0.413482       8.12653       8.54001    
  63  0.303370      -1.19280      -1.45481       1.45481       8.04862       9.50343    
  64  0.676458E-01  -2.69347      -3.28511       3.28511       8.10621       11.3913    
  65  0.226497      -1.48502      -1.81122       1.81122       8.06816       9.87938    
  66  0.590955     -0.526015     -0.641559      0.641559       8.14939       8.79095    
  67  0.914813     -0.890359E-01 -0.108593      0.108593       8.09118       8.19978    
  68  0.157483      -1.84844      -2.25446       2.25446       8.06820       10.3227    
  69  0.117954E-01  -4.44005      -5.41534       5.41534       8.08929       13.5046    
  70  0.589104     -0.529153     -0.645385      0.645385       8.03969       8.68507    
loop,thermsimp(1:2)       26  0.301409      0.900863E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    190          8.25          0.86          1.12         24.57          0.08          0.05         26.69
Just calling func    0   0         26.69


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       26
neval is:      189
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       27
neval is:      189


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      189     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.818509     -0.200271     -0.244262      0.244262       8.11627       8.36053    
   2  0.309452      -1.17295      -1.43060       1.43060       8.07122       9.50182    
   3  0.303638      -1.19192      -1.45373       1.45373       8.09139       9.54512    
   4  0.754457     -0.281757     -0.343647      0.343647       8.14970       8.49334    
   5  0.623133     -0.472996     -0.576893      0.576893       8.09541       8.67231    
   6  0.989422E-01  -2.31322      -2.82134       2.82134       8.10022       10.9216    
   7  0.695126     -0.363662     -0.443543      0.443543       8.09118       8.53473    
   8  0.832210E-01  -2.48626      -3.03238       3.03238       8.06918       11.1016    
   9  0.869521     -0.139813     -0.170524      0.170524       8.11426       8.28479    
  10  0.488136     -0.717160     -0.874690      0.874690       8.05410       8.92879    
  11  0.579877     -0.544940     -0.664640      0.664640       8.00020       8.66484    
  12  0.480435     -0.733064     -0.894087      0.894087       8.06414       8.95823    
  13  0.792626     -0.232404     -0.283453      0.283453       8.11383       8.39728    
  14  0.870230     -0.138998     -0.169530      0.169530       8.32632       8.49585    
  15  0.886361     -0.120631     -0.147128      0.147128       8.10246       8.24958    
  16  0.358181      -1.02672      -1.25224       1.25224       8.10547       9.35772    
  17  0.560125     -0.579594     -0.706907      0.706907       8.10859       8.81550    
  18  0.546151     -0.604859     -0.737721      0.737721       8.09096       8.82868    
  19  0.732086     -0.311858     -0.380360      0.380360       8.20225       8.58261    
  20  0.590102     -0.527460     -0.643320      0.643320       8.12578       8.76910    
  21  0.867355     -0.142307     -0.173566      0.173566       8.12653       8.30010    
  22  0.749758     -0.288005     -0.351268      0.351268       8.11654       8.46781    
  23  0.721970     -0.325772     -0.397330      0.397330       8.17237       8.56970    
  24  0.596865     -0.516065     -0.629423      0.629423       8.62600       9.25542    
  25  0.878161     -0.129925     -0.158464      0.158464       8.04995       8.20841    
  26  0.558752E-01  -2.88463      -3.51827       3.51827       8.03969       11.5580    
  27  0.555543     -0.587810     -0.716927      0.716927       8.12933       8.84626    
  28  0.597562     -0.514897     -0.627997      0.627997       8.09862       8.72662    
  29  0.995329     -0.468202E-02 -0.571046E-02  0.571046E-02   8.14939       8.15510    
  30  0.206787      -1.57606      -1.92226       1.92226       8.09847       10.0207    
  31  0.645457     -0.437797     -0.533963      0.533963       8.09048       8.62444    
  32  0.871352     -0.137710     -0.167958      0.167958       8.10151       8.26947    
  33  0.701360     -0.354733     -0.432653      0.432653       8.02972       8.46237    
  34  0.936151     -0.659784E-01 -0.804711E-01  0.804711E-01   8.19746       8.27793    
  35  0.590091     -0.527478     -0.643343      0.643343       8.09629       8.73963    
  36  0.750433     -0.287105     -0.350170      0.350170       8.15194       8.50211    
  37  0.326255      -1.12007      -1.36611       1.36611       8.22182       9.58793    
  38  0.873133     -0.135668     -0.165468      0.165468       8.06768       8.23314    
  39  0.621627     -0.475415     -0.579843      0.579843       8.09327       8.67311    
  40  0.153041      -1.87705      -2.28936       2.28936       8.16632       10.4557    
  41  0.196696      -1.62610      -1.98328       1.98328       8.10753       10.0908    
  42  0.365028      -1.00778      -1.22915       1.22915       8.04862       9.27776    
  43  0.398429     -0.920226      -1.12236       1.12236       8.20747       9.32983    
  44  0.549691     -0.598399     -0.729842      0.729842       8.10621       8.83605    
  45  0.994179     -0.583795E-02 -0.712030E-02  0.712030E-02   8.35386       8.36098    
  46  0.147335E-01  -4.21763      -5.14407       5.14407       8.09102       13.2351    
  47  0.224737      -1.49282      -1.82073       1.82073       8.06816       9.88889    
  48  0.182172      -1.70281      -2.07684       2.07684       8.11494       10.1918    
  49  0.230919      -1.46569      -1.78764       1.78764       8.07180       9.85944    
  50  0.491818     -0.709647     -0.865526      0.865526       8.59370       9.45923    
  51  0.370754     -0.992217      -1.21016       1.21016       8.15023       9.36040    
  52  0.785622     -0.241279     -0.294278      0.294278       8.08867       8.38295    
  53  0.476284     -0.741742     -0.904671      0.904671       8.19747       9.10214    
  54  0.958799     -0.420736E-01 -0.513153E-01  0.513153E-01   8.06820       8.11951    
  55  0.305133      -1.18701      -1.44774       1.44774       8.10197       9.54972    
  56  0.270329      -1.30812      -1.59545       1.59545       8.10953       9.70498    
  57  0.130426      -2.03695      -2.48438       2.48438       8.11412       10.5985    
  58  0.222171      -1.50431      -1.83474       1.83474       8.12070       9.95544    
  59  0.233872      -1.45298      -1.77214       1.77214       8.10206       9.87420    
  60  0.916355E-02  -4.69252      -5.72327       5.72327       8.12153       13.8448    
  61  0.400634     -0.914708      -1.11563       1.11563       8.11497       9.23060    
  62  0.354647E-01  -3.33922      -4.07270       4.07270       8.71362       12.7863    
  63  0.453450     -0.790870     -0.964590      0.964590       8.25932       9.22391    
  64  0.411527     -0.887880      -1.08291       1.08291       8.01090       9.09381    
  65  0.607753     -0.497987     -0.607373      0.607373       8.10621       8.71359    
  66  0.157481      -1.84845      -2.25448       2.25448       8.10666       10.3611    
  67  0.260711E-01  -3.64693      -4.44800       4.44800       8.32928       12.7773    
  68  0.183987      -1.69289      -2.06475       2.06475       8.08929       10.1540    
  69  0.704951     -0.349627     -0.426425      0.426425       8.05853       8.48495    
  70  0.337767      -1.08540      -1.32381       1.32381       8.24674       9.57055    
loop,thermsimp(1:2)       27  0.244262       1.43060    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    191          8.05          0.86          1.12         24.35          0.08          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    192          8.03          0.86          1.12         24.38          0.10          0.05         26.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       27
neval is:      191
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       28
neval is:      191


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      191     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.808657     -0.212380     -0.259031      0.259031       8.06820       8.32723    
   2  0.162004E-01  -4.12272      -5.02831       5.02831       8.14939       13.1777    
   3  0.446841E-01  -3.10814      -3.79086       3.79086       8.04995       11.8408    
   4  0.757954     -0.277132     -0.338007      0.338007       8.06768       8.40568    
   5  0.525315     -0.643757     -0.785163      0.785163       8.10246       8.88762    
   6  0.229940      -1.46994      -1.79282       1.79282       8.10151       9.89433    
   7  0.273310E-01  -3.59973      -4.39044       4.39044       8.19746       12.5879    
   8  0.228047      -1.47820      -1.80290       1.80290       8.11426       9.91716    
   9  0.963384E-01  -2.33989      -2.85386       2.85386       8.12653       10.9804    
  10  0.495504     -0.702179     -0.856418      0.856418       8.11627       8.97268    
  11  0.930436     -0.721018E-01 -0.879395E-01  0.879395E-01   8.35386       8.44179    
  12  0.138744      -1.97513      -2.40898       2.40898       8.08867       10.4976    
  13  0.676381     -0.390999     -0.476885      0.476885       8.11383       8.59071    
  14  0.763696     -0.269586     -0.328802      0.328802       8.02972       8.35852    
  15  0.282468      -1.26419      -1.54188       1.54188       8.11654       9.65842    
  16  0.359172      -1.02395      -1.24887       1.24887       8.05853       9.30740    
  17  0.392258     -0.935834      -1.14140       1.14140       8.14970       9.29109    
  18  0.524686     -0.644955     -0.786624      0.786624       8.32632       9.11294    
  19  0.850465     -0.161972     -0.197550      0.197550       8.15194       8.34949    
  20  0.227056      -1.48256      -1.80821       1.80821       8.09118       9.89939    
  21  0.942039     -0.597082E-01 -0.728235E-01  0.728235E-01   8.17237       8.24520    
  22  0.807336     -0.214016     -0.261026      0.261026       8.20225       8.46328    
  23  0.345853      -1.06174      -1.29496       1.29496       8.09048       9.38544    
  24  0.762940     -0.270575     -0.330009      0.330009       8.00020       8.33021    
  25  0.589959     -0.527702     -0.643615      0.643615       8.09541       8.73903    
  26  0.563539     -0.573518     -0.699496      0.699496       8.09327       8.79276    
  27  0.812044     -0.208201     -0.253934      0.253934       8.10621       8.36015    
  28  0.735850     -0.306729     -0.374105      0.374105       8.09862       8.47273    
  29  0.396292     -0.925605      -1.12892       1.12892       8.09629       9.22521    
  30  0.623568     -0.472298     -0.576042      0.576042       8.12578       8.70182    
  31  0.925937     -0.769486E-01 -0.938509E-01  0.938509E-01   8.10859       8.20244    
  32  0.880074     -0.127749     -0.155811      0.155811       8.09096       8.24677    
  33  0.379958     -0.967693      -1.18025       1.18025       8.10621       9.28647    
  34  0.842940E-01  -2.47344      -3.01675       3.01675       8.12933       11.1461    
  35  0.199092      -1.61399      -1.96851       1.96851       8.05410       10.0226    
  36  0.625899     -0.468566     -0.571490      0.571490       8.06414       8.63563    
  37  0.888337     -0.118405     -0.144413      0.144413       8.01090       8.15531    
  38  0.959633     -0.412048E-01 -0.502558E-01  0.502558E-01   8.19747       8.24772    
  39  0.289813      -1.23852      -1.51057       1.51057       8.25932       9.76989    
  40  0.889440     -0.117163     -0.142899      0.142899       8.11497       8.25787    
  41  0.797260     -0.226575     -0.276343      0.276343       8.62600       8.90234    
  42  0.451097     -0.796073     -0.970936      0.970936       8.04862       9.01955    
  43  0.609578     -0.494989     -0.603717      0.603717       8.20747       8.81118    
  44  0.910850     -0.933770E-01 -0.113888      0.113888       8.10547       8.21936    
  45  0.448191     -0.802536     -0.978819      0.978819       8.15023       9.12905    
  46  0.831229     -0.184850     -0.225453      0.225453       8.59370       8.81915    
  47  0.246260      -1.40137      -1.70919       1.70919       8.07122       9.78041    
  48  0.280480      -1.27125      -1.55049       1.55049       8.09139       9.64188    
  49  0.161513      -1.82317      -2.22364       2.22364       8.10197       10.3256    
  50  0.337020      -1.08761      -1.32652       1.32652       8.24674       9.57325    
  51  0.160136      -1.83173      -2.23408       2.23408       8.22182       10.4559    
  52  0.268039      -1.31662      -1.60583       1.60583       8.10953       9.71536    
  53  0.907744     -0.967928E-01 -0.118054      0.118054       8.07180       8.18986    
  54  0.237998      -1.43549      -1.75081       1.75081       8.10206       9.85287    
  55  0.932063     -0.703547E-01 -0.858086E-01  0.858086E-01   8.06816       8.15397    
  56  0.304233      -1.18996      -1.45135       1.45135       8.12070       9.57204    
  57  0.471578     -0.751672     -0.916782      0.916782       8.09847       9.01525    
  58  0.985625     -0.144798E-01 -0.176604E-01  0.176604E-01   8.10753       8.12519    
  59  0.576194     -0.551311     -0.672411      0.672411       8.08929       8.76170    
  60  0.561463     -0.577209     -0.703998      0.703998       8.11494       8.81893    
  61  0.762775     -0.270792     -0.330274      0.330274       8.10666       8.43694    
  62  0.728042     -0.317397     -0.387115      0.387115       8.16632       8.55343    
  63  0.246589      -1.40003      -1.70756       1.70756       8.11412       9.82168    
  64  0.128678      -2.05044      -2.50084       2.50084       8.10022       10.6011    
  65  0.646131     -0.436753     -0.532689      0.532689       8.06918       8.60187    
  66  0.520849E-01  -2.95488      -3.60394       3.60394       8.03969       11.6436    
  67  0.103665      -2.26659      -2.76446       2.76446       8.32928       11.0937    
  68  0.209683      -1.56216      -1.90530       1.90530       8.71362       10.6189    
  69  0.401865     -0.911640      -1.11189       1.11189       8.09102       9.20290    
  70  0.111589      -2.19294      -2.67463       2.67463       8.02986       10.7045    
loop,thermsimp(1:2)       28  0.259031       5.02831    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    193          8.06          0.86          1.12         24.33          0.09          0.05         26.45
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    194          8.19          0.86          1.12         24.54          0.08          0.05         26.66
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       28
neval is:      193
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       29
neval is:      193


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      193     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.115886      -2.15515      -2.62855       2.62855       8.10753       10.7361    
   2  0.685048     -0.378267     -0.461356      0.461356       8.06816       8.52952    
   3  0.739526     -0.301746     -0.368027      0.368027       8.01090       8.37893    
   4  0.161448      -1.82357      -2.22413       2.22413       8.07180       10.2959    
   5  0.819608     -0.198929     -0.242625      0.242625       8.10859       8.35122    
   6  0.750679     -0.286777     -0.349769      0.349769       8.10547       8.45524    
   7  0.797409     -0.226388     -0.276115      0.276115       8.17237       8.44849    
   8  0.193123      -1.64443      -2.00564       2.00564       8.09096       10.0966    
   9  0.189346E-01  -3.96676      -4.83809       4.83809       8.19747       13.0356    
  10  0.715264     -0.335103     -0.408711      0.408711       8.11497       8.52369    
  11  0.384856     -0.954886      -1.16463       1.16463       8.06820       9.23283    
  12  0.268023      -1.31668      -1.60590       1.60590       8.00020       9.60610    
  13  0.777164     -0.252104     -0.307480      0.307480       8.15194       8.45942    
  14  0.707495E-01  -2.64861      -3.23040       3.23040       8.02972       11.2601    
  15  0.233610      -1.45410      -1.77351       1.77351       8.10621       9.87972    
  16  0.193057      -1.64477      -2.00606       2.00606       8.06768       10.0737    
  17  0.486879     -0.719739     -0.877836      0.877836       8.10666       8.98450    
  18  0.735370     -0.307381     -0.374900      0.374900       8.35386       8.72876    
  19  0.147509      -1.91387      -2.33426       2.33426       8.20225       10.5365    
  20  0.739111     -0.302308     -0.368712      0.368712       8.09862       8.46734    
  21  0.886241     -0.120766     -0.147293      0.147293       8.16632       8.31361    
  22  0.158672      -1.84092      -2.24529       2.24529       8.11383       10.3591    
  23  0.143658      -1.94032      -2.36653       2.36653       8.06918       10.4357    
  24  0.637431E-02  -5.05548      -6.16595       6.16595       8.06414       14.2301    
  25  0.753372     -0.283196     -0.345403      0.345403       8.12578       8.47118    
  26  0.555831     -0.587292     -0.716295      0.716295       8.09541       8.81171    
  27  0.280013      -1.27292      -1.55252       1.55252       8.08929       9.64181    
  28  0.811304     -0.209112     -0.255046      0.255046       8.09327       8.34831    
  29  0.972296E-02  -4.63327      -5.65100       5.65100       8.20747       13.8585    
  30  0.713459     -0.337631     -0.411794      0.411794       8.11494       8.52673    
  31  0.194621      -1.63670      -1.99621       1.99621       8.59370       10.5899    
  32  0.492587     -0.708083     -0.863619      0.863619       8.10246       8.96608    
  33  0.759094E-01  -2.57821      -3.14454       3.14454       8.62600       11.7705    
  34  0.494544     -0.704119     -0.858784      0.858784       8.11627       8.97505    
  35  0.297023      -1.21395      -1.48060       1.48060       8.09847       9.57907    
  36  0.429878E-01  -3.14684      -3.83807       3.83807       8.04862       11.8867    
  37  0.490931     -0.711452     -0.867727      0.867727       8.32632       9.19405    
  38  0.534417     -0.626578     -0.764211      0.764211       8.15023       8.91444    
  39  0.254967      -1.36662      -1.66681       1.66681       8.09102       9.75782    
  40  0.995945     -0.406335E-02 -0.495589E-02  0.495589E-02   8.09629       8.10124    
  41  0.428814E-01  -3.14932      -3.84109       3.84109       8.10621       11.9473    
  42  0.332915      -1.09987      -1.34146       1.34146       8.14970       9.49116    
  43  0.657266     -0.419666     -0.511849      0.511849       8.05853       8.57038    
  44  0.301071      -1.20041      -1.46409       1.46409       8.09048       9.55456    
  45  0.998178     -0.182349E-02 -0.222404E-02  0.222404E-02   8.12070       8.12292    
  46  0.533372     -0.628536     -0.766598      0.766598       8.24674       9.01333    
  47  0.244746      -1.40753      -1.71671       1.71671       8.09139       9.80810    
  48  0.345321      -1.06328      -1.29684       1.29684       8.11654       9.41338    
  49  0.339541      -1.08016      -1.31743       1.31743       8.10953       9.42695    
  50  0.456434     -0.784311     -0.956591      0.956591       8.25932       9.21591    
  51  0.510210     -0.672933     -0.820748      0.820748       8.07122       8.89197    
  52  0.678441     -0.387958     -0.473176      0.473176       8.11412       8.58730    
  53  0.802552     -0.219958     -0.268273      0.268273       8.10206       8.37033    
  54  0.542503     -0.611562     -0.745897      0.745897       8.10151       8.84740    
  55  0.887113     -0.119783     -0.146094      0.146094       8.09118       8.23728    
  56  0.631934     -0.458971     -0.559787      0.559787       8.11426       8.67405    
  57  0.776760     -0.252624     -0.308115      0.308115       8.05410       8.36221    
  58  0.764990     -0.267893     -0.326737      0.326737       8.10197       8.42871    
  59  0.329328      -1.11070      -1.35467       1.35467       8.22182       9.57650    
  60  0.304425      -1.18933      -1.45058       1.45058       8.08867       9.53924    
  61  0.992863     -0.716266E-02 -0.873600E-02  0.873600E-02   8.10022       8.10896    
  62  0.545111     -0.606767     -0.740047      0.740047       8.71362       9.45367    
  63  0.215175      -1.53630      -1.87376       1.87376       8.02986       9.90362    
  64  0.486479     -0.720562     -0.878839      0.878839       8.12653       9.00537    
  65  0.323711      -1.12790      -1.37566       1.37566       8.32928       9.70493    
  66  0.339000      -1.08176      -1.31937       1.31937       8.12933       9.44871    
  67  0.494013     -0.705193     -0.860094      0.860094       8.03969       8.89978    
  68  0.496084     -0.701011     -0.854993      0.854993       8.04995       8.90494    
  69  0.736144     -0.306329     -0.373617      0.373617       8.19746       8.57108    
  70  0.106083E-01  -4.54612      -5.54471       5.54471       8.06063       13.6053    
loop,thermsimp(1:2)       29   2.62855      0.461356    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    195          8.09          0.87          1.12         24.59          0.08          0.05         26.71
Just calling func    0   0         26.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    196          8.18          0.86          1.13         24.34          0.09          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       29
neval is:      195
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       30
neval is:      195


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      195     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.396389E-01  -3.22794      -3.93699       3.93699       8.09629       12.0333    
   2  0.712690     -0.338709     -0.413109      0.413109       8.10022       8.51333    
   3  0.284498      -1.25703      -1.53315       1.53315       8.12070       9.65384    
   4  0.132414      -2.02182      -2.46593       2.46593       8.09118       10.5571    
   5  0.868558     -0.140920     -0.171875      0.171875       8.16632       8.33819    
   6  0.695240     -0.363498     -0.443343      0.443343       8.09327       8.53661    
   7  0.777362     -0.251849     -0.307170      0.307170       8.10859       8.41576    
   8  0.302494      -1.19569      -1.45834       1.45834       8.05410       9.51244    
   9  0.710188     -0.342225     -0.417398      0.417398       8.10206       8.51945    
  10  0.884530     -0.122698     -0.149650      0.149650       8.01090       8.16055    
  11  0.146421E-01  -4.22386      -5.15166       5.15166       8.10197       13.2536    
  12  0.834801     -0.180562     -0.220223      0.220223       8.17237       8.39260    
  13  0.414011     -0.881863      -1.07557       1.07557       8.10547       9.18105    
  14  0.655777     -0.421935     -0.514616      0.514616       8.15194       8.66656    
  15  0.530106     -0.634679     -0.774091      0.774091       8.09862       8.87272    
  16  0.325231      -1.12322      -1.36994       1.36994       8.12578       9.49573    
  17  0.293550      -1.22571      -1.49494       1.49494       8.11497       9.60992    
  18  0.194161      -1.63907      -1.99910       1.99910       8.11494       10.1140    
  19  0.589029E-01  -2.83186      -3.45390       3.45390       8.06816       11.5221    
  20  0.385142     -0.954143      -1.16373       1.16373       8.05853       9.22226    
  21  0.287461      -1.24667      -1.52051       1.52051       8.19746       9.71797    
  22  0.528518     -0.637678     -0.777749      0.777749       8.11412       8.89187    
  23  0.517042     -0.659630     -0.804523      0.804523       8.11426       8.91879    
  24  0.453375     -0.791035     -0.964791      0.964791       8.35386       9.31865    
  25  0.695596     -0.362986     -0.442718      0.442718       8.09541       8.53813    
  26  0.645178     -0.438228     -0.534488      0.534488       8.10151       8.63600    
  27  0.696076     -0.362297     -0.441878      0.441878       8.07122       8.51310    
  28  0.483522     -0.726659     -0.886275      0.886275       8.03969       8.92596    
  29  0.155396E-01  -4.16436      -5.07909       5.07909       8.04995       13.1290    
  30  0.883154     -0.124256     -0.151550      0.151550       8.15023       8.30178    
  31  0.525944     -0.642561     -0.783705      0.783705       8.10246       8.88616    
  32  0.746799     -0.291959     -0.356090      0.356090       8.11627       8.47236    
  33  0.458658     -0.779449     -0.950661      0.950661       8.10666       9.05733    
  34  0.614284     -0.487298     -0.594337      0.594337       8.12653       8.72087    
  35  0.581412     -0.542295     -0.661415      0.661415       8.24674       8.90815    
  36  0.820935     -0.197312     -0.240653      0.240653       8.32632       8.56697    
  37  0.852366     -0.159739     -0.194827      0.194827       8.25932       8.45415    
  38  0.527059     -0.640443     -0.781121      0.781121       8.06820       8.84932    
  39  0.376404     -0.977092      -1.19172       1.19172       8.11654       9.30826    
  40  0.729525E-01  -2.61795      -3.19300       3.19300       8.10953       11.3025    
  41  0.342258      -1.07219      -1.30771       1.30771       8.12933       9.43704    
  42  0.955065     -0.459761E-01 -0.560751E-01  0.560751E-01   8.71362       8.76970    
  43  0.508654E-01  -2.97857      -3.63284       3.63284       8.14970       11.7825    
  44  0.471716     -0.751379     -0.916424      0.916424       8.08867       9.00509    
  45  0.137118      -1.98691      -2.42336       2.42336       8.09048       10.5138    
  46  0.844826     -0.168625     -0.205664      0.205664       8.22182       8.42749    
  47  0.841708     -0.172322     -0.210174      0.210174       8.09847       8.30864    
  48  0.360396E-01  -3.32314      -4.05309       4.05309       8.00020       12.0533    
  49  0.953282     -0.478444E-01 -0.583537E-01  0.583537E-01   8.08929       8.14764    
  50  0.503408     -0.686355     -0.837117      0.837117       8.32928       9.16639    
  51  0.593854     -0.521122     -0.635591      0.635591       8.09102       8.72661    
  52  0.524910     -0.644528     -0.786103      0.786103       8.09139       8.87749    
  53  0.730244     -0.314377     -0.383432      0.383432       8.10621       8.48964    
  54  0.828919     -0.187632     -0.228847      0.228847       8.02986       8.25870    
  55  0.151629      -1.88632      -2.30066       2.30066       8.06768       10.3683    
  56  0.431672     -0.840089      -1.02462       1.02462       8.09096       9.11558    
  57  0.449333     -0.799990     -0.975714      0.975714       8.07180       9.04752    
  58  0.116759      -2.14764      -2.61939       2.61939       8.11383       10.7332    
  59  0.578588     -0.547165     -0.667354      0.667354       8.06918       8.73654    
  60  0.119282      -2.12627      -2.59332       2.59332       8.20225       10.7956    
  61  0.643272E-01  -2.74377      -3.34646       3.34646       8.59370       11.9402    
  62  0.906211     -0.984834E-01 -0.120116      0.120116       8.10753       8.22764    
  63  0.811859     -0.208429     -0.254212      0.254212       8.02972       8.28393    
  64  0.119821      -2.12175      -2.58781       2.58781       8.62600       11.2138    
  65  0.827508     -0.189336     -0.230925      0.230925       8.04862       8.27954    
  66  0.597713     -0.514645     -0.627690      0.627690       8.10621       8.73390    
  67  0.408976     -0.894099      -1.09049       1.09049       8.19747       9.28796    
  68  0.889044     -0.117608     -0.143442      0.143442       8.06063       8.20407    
  69  0.623536     -0.472349     -0.576104      0.576104       8.20747       8.78357    
  70  0.477389     -0.739423     -0.901843      0.901843       8.09050       8.99234    
loop,thermsimp(1:2)       30   3.93699      0.413109    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    197          8.06          0.86          1.12         24.34          0.10          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    198          8.06          0.86          1.12         24.30          0.09          0.05         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       30
neval is:      197
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       31
neval is:      197


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      197     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.248581      -1.39199      -1.69775       1.69775       8.08929       9.78703    
   2  0.247647      -1.39575      -1.70234       1.70234       8.01090       9.71324    
   3  0.396263     -0.925678      -1.12901       1.12901       8.06063       9.18964    
   4  0.386461     -0.950723      -1.15956       1.15956       8.10753       9.26708    
   5  0.729285     -0.315691     -0.385034      0.385034       8.02986       8.41489    
   6  0.665866     -0.406667     -0.495995      0.495995       8.04862       8.54461    
   7  0.385122     -0.954194      -1.16379       1.16379       8.02972       9.19351    
   8  0.625701     -0.468883     -0.571876      0.571876       8.15023       8.72211    
   9  0.392668     -0.934792      -1.14013       1.14013       8.09847       9.23860    
  10  0.698356     -0.359026     -0.437889      0.437889       8.16632       8.60421    
  11  0.537534E-01  -2.92335      -3.56548       3.56548       8.17237       11.7379    
  12  0.289307      -1.24027      -1.51270       1.51270       8.10859       9.62129    
  13  0.138460E-01  -4.27976      -5.21984       5.21984       8.22182       13.4417    
  14  0.824110     -0.193451     -0.235944      0.235944       8.25932       8.49526    
  15  0.560983     -0.578065     -0.705041      0.705041       8.11627       8.82131    
  16  0.116087E-01  -4.45600      -5.43479       5.43479       8.10621       13.5410    
  17  0.218033      -1.52311      -1.85767       1.85767       8.07122       9.92889    
  18  0.893705E-01  -2.41497      -2.94543       2.94543       8.10022       11.0456    
  19  0.304886      -1.18782      -1.44873       1.44873       8.10206       9.55078    
  20  0.179833      -1.71573      -2.09260       2.09260       8.09327       10.1859    
  21  0.867378     -0.142281     -0.173534      0.173534       8.09541       8.26895    
  22  0.243287      -1.41351      -1.72400       1.72400       8.32632       10.0503    
  23  0.772489     -0.258138     -0.314839      0.314839       8.10151       8.41635    
  24  0.321011      -1.13628      -1.38587       1.38587       8.15194       9.53781    
  25  0.499417     -0.694314     -0.846825      0.846825       8.12653       8.97336    
  26  0.396806     -0.924307      -1.12734       1.12734       8.09102       9.21835    
  27  0.580203E-01  -2.84696      -3.47232       3.47232       8.10621       11.5785    
  28  0.854206     -0.157583     -0.192197      0.192197       8.06918       8.26138    
  29  0.914649     -0.892145E-01 -0.108811      0.108811       8.71362       8.82243    
  30  0.167601      -1.78617      -2.17851       2.17851       8.20747       10.3860    
  31  0.350137      -1.04943      -1.27995       1.27995       8.06820       9.34814    
  32  0.522932     -0.648304     -0.790708      0.790708       8.09862       8.88933    
  33  0.538779     -0.618450     -0.754297      0.754297       8.09139       8.84569    
  34  0.693066     -0.366629     -0.447162      0.447162       8.10246       8.54962    
  35  0.361961      -1.01622      -1.23944       1.23944       8.11412       9.35356    
  36  0.310665      -1.16904      -1.42583       1.42583       8.24674       9.67256    
  37  0.818669     -0.200076     -0.244024      0.244024       8.11426       8.35829    
  38  0.582861     -0.539807     -0.658379      0.658379       8.03969       8.69807    
  39  0.401728     -0.911979      -1.11230       1.11230       8.09050       9.20280    
  40  0.171089      -1.76557      -2.15339       2.15339       8.08867       10.2421    
  41  0.980174     -0.200248E-01 -0.244234E-01  0.244234E-01   8.07180       8.09623    
  42  0.495496     -0.702196     -0.856439      0.856439       8.10666       8.96310    
  43  0.436683     -0.828549      -1.01055       1.01055       8.09096       9.10151    
  44  0.910411     -0.938588E-01 -0.114476      0.114476       8.32928       8.44375    
  45  0.649932     -0.430887     -0.525535      0.525535       8.10547       8.63101    
  46  0.755226     -0.280738     -0.342404      0.342404       8.05853       8.40093    
  47  0.927352     -0.754221E-01 -0.919891E-01  0.919891E-01   8.19747       8.28946    
  48  0.848028     -0.164842     -0.201051      0.201051       8.11654       8.31759    
  49  0.146193      -1.92283      -2.34519       2.34519       8.35386       10.6991    
  50  0.571278     -0.559879     -0.682861      0.682861       8.12933       8.81219    
  51  0.244418      -1.40888      -1.71835       1.71835       8.12578       9.84413    
  52  0.979014     -0.212091E-01 -0.258678E-01  0.258678E-01   8.05410       8.07997    
  53  0.235747      -1.44500      -1.76240       1.76240       8.11497       9.87737    
  54  0.486927     -0.719642     -0.877717      0.877717       8.12070       8.99841    
  55  0.694010     -0.365269     -0.445503      0.445503       8.19746       8.64297    
  56  0.392305     -0.935716      -1.14125       1.14125       8.11494       9.25619    
  57  0.334373      -1.09550      -1.33613       1.33613       8.06768       9.40381    
  58  0.526166     -0.642138     -0.783188      0.783188       8.09048       8.87366    
  59  0.701539     -0.354479     -0.432342      0.432342       8.09118       8.52353    
  60  0.447845     -0.803307     -0.979759      0.979759       8.11383       9.09359    
  61  0.927856     -0.748784E-01 -0.913260E-01  0.913260E-01   8.20225       8.29358    
  62  0.453274     -0.791258     -0.965064      0.965064       8.62600       9.59106    
  63  0.291736      -1.23190      -1.50250       1.50250       8.10953       9.61203    
  64  0.497643E-02  -5.30304      -6.46790       6.46790       8.06816       14.5361    
  65  0.972200E-01  -2.33078      -2.84275       2.84275       8.14970       10.9924    
  66  0.821987     -0.196031     -0.239090      0.239090       8.59370       8.83279    
  67  0.652134     -0.427506     -0.521410      0.521410       8.09629       8.61770    
  68  0.774447     -0.255606     -0.311752      0.311752       8.00020       8.31195    
  69  0.103131      -2.27176      -2.77077       2.77077       8.04995       10.8207    
  70  0.767617E-01  -2.56705      -3.13092       3.13092       8.05958       11.1905    
loop,thermsimp(1:2)       31   1.69775       1.70234    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    199          8.07          0.86          1.12         24.43          0.07          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    200          8.13          0.86          1.11         24.40          0.02          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       31
neval is:      199
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       32
neval is:      199


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      199     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.996070     -0.393760E-02 -0.480252E-02  0.480252E-02   8.05410       8.05890    
   2  0.758684E-02  -4.88134      -5.95356       5.95356       8.07180       14.0254    
   3  0.404439     -0.905254      -1.10410       1.10410       8.06918       9.17328    
   4  0.947917E-01  -2.35607      -2.87360       2.87360       8.09541       10.9690    
   5  0.834417     -0.181022     -0.220785      0.220785       8.19747       8.41825    
   6  0.891274     -0.115104     -0.140387      0.140387       8.20225       8.34264    
   7  0.744451     -0.295108     -0.359931      0.359931       8.00020       8.36013    
   8  0.559638     -0.580466     -0.707969      0.707969       8.11654       8.82451    
   9  0.821724     -0.196351     -0.239481      0.239481       8.11426       8.35374    
  10  0.847292     -0.165710     -0.202109      0.202109       8.05853       8.26064    
  11  0.661676     -0.412979     -0.503693      0.503693       8.02986       8.53355    
  12  0.993427     -0.659478E-02 -0.804337E-02  0.804337E-02   8.10151       8.10955    
  13  0.425996     -0.853326      -1.04077       1.04077       8.32928       9.37004    
  14  0.673132     -0.395813     -0.482756      0.482756       8.25932       8.74208    
  15  0.234810      -1.44898      -1.76726       1.76726       8.09118       9.85844    
  16  0.122926      -2.09617      -2.55661       2.55661       8.04862       10.6052    
  17  0.523553     -0.647118     -0.789262      0.789262       8.10246       8.89172    
  18  0.959317     -0.415333E-01 -0.506564E-01  0.506564E-01   8.16632       8.21697    
  19  0.321726      -1.13406      -1.38316       1.38316       8.09629       9.47945    
  20  0.493112     -0.707018     -0.862320      0.862320       8.10547       8.96779    
  21  0.416134     -0.876748      -1.06933       1.06933       8.19746       9.26679    
  22  0.409432     -0.892985      -1.08914       1.08914       8.03969       9.12882    
  23  0.657956     -0.418617     -0.510570      0.510570       8.15023       8.66080    
  24  0.904324     -0.100567     -0.122658      0.122658       8.12933       8.25199    
  25  0.714426     -0.336276     -0.410142      0.410142       8.11627       8.52641    
  26  0.150521      -1.89365      -2.30960       2.30960       8.71362       11.0232    
  27  0.758740     -0.276096     -0.336743      0.336743       8.59370       8.93044    
  28  0.359105      -1.02414      -1.24910       1.24910       8.09139       9.34049    
  29  0.666937     -0.405060     -0.494034      0.494034       8.09048       8.58451    
  30  0.343213      -1.06940      -1.30431       1.30431       8.09862       9.40293    
  31  0.484849     -0.723918     -0.882932      0.882932       8.10666       8.98960    
  32  0.874661     -0.133919     -0.163335      0.163335       8.12653       8.28987    
  33  0.994710     -0.530415E-02 -0.646925E-02  0.646925E-02   8.12070       8.12717    
  34  0.821923     -0.196109     -0.239186      0.239186       8.11383       8.35301    
  35  0.954096E-02  -4.65216      -5.67404       5.67404       8.09096       13.7650    
  36  0.240030      -1.42699      -1.74044       1.74044       8.06063       9.80107    
  37  0.279003      -1.27653      -1.55693       1.55693       8.02972       9.58665    
  38  0.553830     -0.590898     -0.720693      0.720693       8.09050       8.81119    
  39  0.400809     -0.914271      -1.11510       1.11510       8.09102       9.20611    
  40  0.146125      -1.92330      -2.34576       2.34576       8.09847       10.4442    
  41  0.811879     -0.208403     -0.254181      0.254181       8.11494       8.36912    
  42  0.349149      -1.05226      -1.28339       1.28339       8.10753       9.39092    
  43  0.897422     -0.108229     -0.132002      0.132002       8.06820       8.20020    
  44  0.114492      -2.16725      -2.64330       2.64330       8.11412       10.7574    
  45  0.831901E-01  -2.48663      -3.03283       3.03283       8.06768       11.1005    
  46  0.721169     -0.326882     -0.398684      0.398684       8.15194       8.55063    
  47  0.801724     -0.220991     -0.269533      0.269533       8.10206       8.37159    
  48  0.466569     -0.762349     -0.929805      0.929805       8.62600       9.55580    
  49  0.103404      -2.26911      -2.76754       2.76754       8.10953       10.8771    
  50  0.417206     -0.874175      -1.06619       1.06619       8.10859       9.17478    
  51  0.267666      -1.31802      -1.60753       1.60753       8.24674       9.85426    
  52  0.670232     -0.400131     -0.488023      0.488023       8.01090       8.49892    
  53  0.161265      -1.82470      -2.22551       2.22551       8.08929       10.3148    
  54  0.414706     -0.880185      -1.07352       1.07352       8.12578       9.19931    
  55  0.501015     -0.691119     -0.842929      0.842929       8.11497       8.95790    
  56  0.516090     -0.661474     -0.806772      0.806772       8.07122       8.87799    
  57  0.424740     -0.856278      -1.04437       1.04437       8.32632       9.37068    
  58  0.303796      -1.19140      -1.45310       1.45310       8.09327       9.54636    
  59  0.803455     -0.218834     -0.266903      0.266903       8.08867       8.35557    
  60  0.416256     -0.876456      -1.06898       1.06898       8.20747       9.27644    
  61  0.760689     -0.273531     -0.333614      0.333614       8.35386       8.68747    
  62  0.995587     -0.442238E-02 -0.539379E-02  0.539379E-02   8.04995       8.05534    
  63  0.961804     -0.389449E-01 -0.474994E-01  0.474994E-01   8.14970       8.19719    
  64  0.321618      -1.13439      -1.38357       1.38357       8.10022       9.48379    
  65  0.850055     -0.162454     -0.198138      0.198138       8.05958       8.25772    
  66  0.408700     -0.894773      -1.09132       1.09132       8.10621       9.19753    
  67  0.204039E-01  -3.89203      -4.74694       4.74694       8.17237       12.9193    
  68  0.195538      -1.63200      -1.99048       1.99048       8.22182       10.2123    
  69  0.577737     -0.548636     -0.669148      0.669148       8.10621       8.77536    
  70  0.958394     -0.424960E-01 -0.518305E-01  0.518305E-01   8.06856       8.12039    
loop,thermsimp(1:2)       32  0.480252E-02   5.95356    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    201          8.10          0.86          1.12         24.43          0.08          0.05         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    202          8.18          0.86          1.13         24.36          0.07          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  200    8.1024        1.157     -1.841      3.206     -102.6      1.365    
                      0.3270      1.308     -99.70      3.793     0.4591E-01

                       2.214    -0.5942      1.530      6947.      3434.    

                     -0.1729      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6124.      509.5    

                       1.433     -5.899     -4.158     -8.500      6.827    

                      -14.88     -3.598      8759.      0.000     0.1155E+05



                       1402.     0.1133E+05 -3421.     0.1042E+05  5141.    

                       5231.     0.1911E-01 0.1848     0.1637E-02 0.1126    

                     -0.2486    -0.9465E-01 0.1816     0.1110     0.5868E-01



                     -0.4661    -0.7860      0.000     0.8449E-01-0.8090E-01

                      0.1637E-02 0.1012    -0.7116    -0.1505     0.4234E-01

                      0.4679E-01 0.1216    -0.6668     -1.212      6894.    



                      -1.068     -1.224     -2.256     -2.325    -0.3807    

                     -0.3252      9.212      8.676    -0.1903E+05 -4.000    

                     -0.5927     -2.235      9.295      8.865    -0.1908E+05



                      -4.000     0.4601    -0.4702      8.846      9.080    

                     -0.1908E+05 -7.000    -0.7566    -0.6962      9.035    

                       8.774    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       32
neval is:      201
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       33
neval is:      201


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      201     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.455591     -0.786160     -0.958846      0.958846       8.04995       9.00879    
   2  0.588265E-01  -2.83316      -3.45549       3.45549       8.05410       11.5096    
   3  0.787103E-01  -2.54198      -3.10035       3.10035       8.10151       11.2019    
   4  0.597713     -0.514644     -0.627689      0.627689       8.06856       8.69624    
   5  0.110741      -2.20056      -2.68393       2.68393       8.12070       10.8046    
   6  0.677861     -0.388813     -0.474218      0.474218       8.14970       8.62391    
   7  0.307724      -1.17855      -1.43743       1.43743       8.06820       9.50563    
   8  0.550587     -0.596770     -0.727855      0.727855       8.16632       8.89417    
   9  0.601295     -0.508669     -0.620402      0.620402       8.12933       8.74974    
  10  0.487121     -0.719243     -0.877230      0.877230       8.05958       8.93681    
  11  0.146295      -1.92213      -2.34434       2.34434       8.05853       10.4029    
  12  0.714050     -0.336802     -0.410783      0.410783       8.12653       8.53731    
  13  0.723089     -0.324223     -0.395441      0.395441       8.20225       8.59769    
  14  0.805432     -0.216376     -0.263905      0.263905       8.11383       8.37773    
  15  0.123280      -2.09329      -2.55310       2.55310       8.11426       10.6674    
  16  0.853039     -0.158950     -0.193865      0.193865       8.08867       8.28253    
  17  0.288289      -1.24379      -1.51700       1.51700       8.00020       9.51720    
  18  0.705126     -0.349379     -0.426123      0.426123       8.11494       8.54106    
  19  0.772420     -0.258227     -0.314948      0.314948       8.10206       8.41700    
  20  0.962845     -0.378631E-01 -0.461800E-01  0.461800E-01   8.19747       8.24365    
  21  0.245802      -1.40323      -1.71146       1.71146       8.01090       9.72236    
  22  0.752702     -0.284087     -0.346488      0.346488       8.11627       8.46276    
  23  0.729896     -0.314853     -0.384012      0.384012       8.02986       8.41387    
  24  0.869278     -0.140092     -0.170865      0.170865       8.15194       8.32281    
  25  0.597817E-01  -2.81706      -3.43584       3.43584       8.09048       11.5263    
  26  0.984108     -0.160195E-01 -0.195383E-01  0.195383E-01   8.15023       8.16977    
  27  0.278288      -1.27910      -1.56006       1.56006       8.35386       9.91392    
  28  0.588278     -0.530555     -0.647095      0.647095       8.25932       8.90641    
  29  0.807614     -0.213671     -0.260606      0.260606       8.10621       8.36682    
  30  0.428679     -0.847047      -1.03311       1.03311       8.09050       9.12361    
  31  0.452991     -0.791883     -0.965826      0.965826       8.11654       9.08236    
  32  0.678742     -0.387514     -0.472635      0.472635       8.07122       8.54386    
  33  0.504500     -0.684188     -0.834475      0.834475       8.10246       8.93693    
  34  0.894800     -0.111155     -0.135571      0.135571       8.59370       8.72927    
  35  0.854311     -0.157461     -0.192048      0.192048       8.11497       8.30702    
  36  0.756230     -0.279410     -0.340784      0.340784       8.10547       8.44626    
  37  0.744369     -0.295219     -0.360066      0.360066       8.10666       8.46673    
  38  0.435758     -0.830668      -1.01313       1.01313       8.03969       9.05282    
  39  0.677387     -0.389513     -0.475072      0.475072       8.06918       8.54426    
  40  0.504989     -0.683219     -0.833293      0.833293       8.10859       8.94188    
  41  0.325676      -1.12185      -1.36827       1.36827       8.10621       9.47449    
  42  0.147207      -1.91591      -2.33676       2.33676       8.12578       10.4625    
  43  0.432041     -0.839234      -1.02358       1.02358       8.09102       9.11459    
  44  0.615972     -0.484555     -0.590991      0.590991       8.19746       8.78845    
  45  0.150867      -1.89136      -2.30681       2.30681       8.20747       10.5143    
  46  0.464307     -0.767210     -0.935733      0.935733       8.09139       9.02712    
  47  0.379753     -0.968234      -1.18091       1.18091       8.32928       9.51019    
  48  0.886192     -0.120822     -0.147361      0.147361       8.32632       8.47368    
  49  0.231751E-01  -3.76468      -4.59162       4.59162       8.10753       12.6991    
  50  0.257662      -1.35611      -1.65398       1.65398       8.09862       9.75261    
  51  0.470381E-01  -3.05680      -3.72825       3.72825       8.09629       11.8245    
  52  0.972366     -0.280233E-01 -0.341789E-01  0.341789E-01   8.10022       8.13440    
  53  0.242054      -1.41860      -1.73020       1.73020       8.09327       9.82347    
  54  0.660577     -0.414642     -0.505722      0.505722       8.62600       9.13172    
  55  0.234396      -1.45074      -1.76941       1.76941       8.02972       9.79912    
  56  0.891547     -0.114797     -0.140013      0.140013       8.06063       8.20064    
  57  0.408879E-01  -3.19692      -3.89915       3.89915       8.24674       12.1459    
  58  0.577007     -0.549901     -0.670690      0.670690       8.09118       8.76187    
  59  0.851462     -0.160801     -0.196122      0.196122       8.22182       8.41794    
  60  0.733240     -0.310283     -0.378439      0.378439       8.08929       8.46772    
  61  0.219002E-01  -3.82126      -4.66063       4.66063       8.09847       12.7591    
  62  0.293643      -1.22539      -1.49456       1.49456       8.04862       9.54317    
  63  0.552105     -0.594017     -0.724497      0.724497       8.11412       8.83862    
  64  0.638007E-01  -2.75199      -3.35649       3.35649       8.10953       11.4660    
  65  0.332554      -1.10095      -1.34278       1.34278       8.09541       9.43820    
  66  0.365239      -1.00720      -1.22844       1.22844       8.71362       9.94206    
  67  0.160984      -1.82645      -2.22764       2.22764       8.06768       10.2953    
  68  0.149423      -1.90098      -2.31854       2.31854       8.17237       10.4909    
  69  0.142989      -1.94499      -2.37222       2.37222       8.09096       10.4632    
  70  0.516056     -0.661540     -0.806852      0.806852       8.10237       8.90922    
loop,thermsimp(1:2)       33  0.958846       3.45549    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    203          8.10          0.86          1.12         24.42          0.09          0.05         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    204          8.20          0.86          1.12         24.46          0.09          0.05         26.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       33
neval is:      203
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       34
neval is:      203


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      203     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.961594E-01  -2.34175      -2.85613       2.85613       8.10022       10.9563    
   2  0.298819      -1.20792      -1.47325       1.47325       8.15023       9.62348    
   3  0.706385     -0.347595     -0.423947      0.423947       8.06063       8.48458    
   4  0.958764     -0.421100E-01 -0.513597E-01  0.513597E-01   8.19747       8.24883    
   5  0.306496      -1.18255      -1.44231       1.44231       8.08867       9.53098    
   6  0.905447     -0.993270E-01 -0.121145      0.121145       8.11497       8.23612    
   7  0.234113      -1.45195      -1.77088       1.77088       8.15194       9.92282    
   8  0.704141     -0.350777     -0.427828      0.427828       8.10621       8.53404    
   9  0.908200     -0.962902E-01 -0.117441      0.117441       8.11383       8.23127    
  10  0.656383     -0.421011     -0.513489      0.513489       8.02986       8.54335    
  11  0.967894     -0.326327E-01 -0.398007E-01  0.398007E-01   8.10206       8.14186    
  12  0.754670     -0.281475     -0.343303      0.343303       8.22182       8.56512    
  13  0.488960     -0.715475     -0.872634      0.872634       8.10547       8.97811    
  14  0.451577     -0.795009     -0.969638      0.969638       8.11627       9.08591    
  15  0.387599E-01  -3.25037      -3.96434       3.96434       8.10666       12.0710    
  16  0.210942E-02  -6.16134      -7.51472       7.51472       8.08929       15.6040    
  17  0.656530     -0.420787     -0.513216      0.513216       8.32632       8.83953    
  18  0.181246      -1.70790      -2.08305       2.08305       8.12653       10.2096    
  19  0.758879     -0.275913     -0.336519      0.336519       8.11494       8.45145    
  20  0.392052     -0.936362      -1.14204       1.14204       8.07122       9.21326    
  21  0.406710     -0.899654      -1.09727       1.09727       8.06918       9.16645    
  22  0.830107     -0.186201     -0.227101      0.227101       8.20225       8.42935    
  23  0.311833      -1.16529      -1.42125       1.42125       8.14970       9.57095    
  24  0.945407     -0.561396E-01 -0.684711E-01  0.684711E-01   8.06856       8.13703    
  25  0.303319      -1.19297      -1.45501       1.45501       8.59370       10.0487    
  26  0.284230      -1.25797      -1.53429       1.53429       8.12933       9.66363    
  27  0.292492      -1.22932      -1.49935       1.49935       8.09118       9.59053    
  28  0.401496     -0.912557      -1.11301       1.11301       8.19746       9.31047    
  29  0.379648     -0.968510      -1.18125       1.18125       8.11412       9.29537    
  30  0.723496E-01  -2.62625      -3.20312       3.20312       8.16632       11.3694    
  31  0.940338     -0.615157E-01 -0.750281E-01  0.750281E-01   8.25932       8.33435    
  32  0.766237     -0.266264     -0.324750      0.324750       8.10237       8.42712    
  33  0.984920     -0.151946E-01 -0.185322E-01  0.185322E-01   8.05958       8.07811    
  34  0.552546     -0.593218     -0.723523      0.723523       8.10246       8.82598    
  35  0.735557     -0.307128     -0.374591      0.374591       8.10859       8.48318    
  36  0.142195      -1.95056      -2.37901       2.37901       8.04995       10.4290    
  37  0.304783      -1.18816      -1.44914       1.44914       8.09139       9.54053    
  38  0.868582     -0.140894     -0.171842      0.171842       8.03969       8.21153    
  39  0.382741     -0.960397      -1.17136       1.17136       8.11654       9.28789    
  40  0.273812      -1.29531      -1.57984       1.57984       8.09102       9.67085    
  41  0.601920     -0.507631     -0.619136      0.619136       8.09050       8.70964    
  42  0.827744     -0.189051     -0.230578      0.230578       8.62600       8.85657    
  43  0.881186E-01  -2.42907      -2.96263       2.96263       8.09541       11.0580    
  44  0.386744     -0.949994      -1.15867       1.15867       8.10621       9.26488    
  45  0.852312     -0.159803     -0.194905      0.194905       8.06820       8.26310    
  46  0.830189     -0.186102     -0.226981      0.226981       8.32928       8.55626    
  47  0.216531      -1.53002      -1.86610       1.86610       8.00020       9.86630    
  48  0.835540     -0.179677     -0.219145      0.219145       8.04862       8.26776    
  49  0.962152     -0.385824E-01 -0.470574E-01  0.470574E-01   8.01090       8.05796    
  50  0.866477     -0.143320     -0.174801      0.174801       8.09862       8.27343    
  51  0.640111     -0.446114     -0.544106      0.544106       8.02972       8.57382    
  52  0.103467      -2.26850      -2.76680       2.76680       8.09327       10.8601    
  53  0.746080     -0.292923     -0.357265      0.357265       8.35386       8.71112    
  54  0.154266      -1.86908      -2.27964       2.27964       8.71362       10.9933    
  55  0.479981     -0.734008     -0.895239      0.895239       8.06768       8.96291    
  56  0.641740     -0.443572     -0.541006      0.541006       8.05853       8.59953    
  57  0.282342      -1.26463      -1.54242       1.54242       8.12578       9.66820    
  58  0.691857     -0.368376     -0.449293      0.449293       8.09096       8.54026    
  59  0.774818     -0.255127     -0.311168      0.311168       8.17237       8.48354    
  60  0.950647     -0.506124E-01 -0.617298E-01  0.617298E-01   8.20747       8.26920    
  61  0.946272E-01  -2.35781      -2.87572       2.87572       8.11426       10.9900    
  62  0.936976     -0.650979E-01 -0.793971E-01  0.793971E-01   8.12070       8.20009    
  63  0.339755      -1.07953      -1.31666       1.31666       8.10151       9.41817    
  64  0.781991     -0.245913     -0.299929      0.299929       8.10953       8.40945    
  65  0.524538     -0.645237     -0.786968      0.786968       8.05410       8.84107    
  66  0.740186     -0.300853     -0.366938      0.366938       8.09048       8.45741    
  67  0.713516     -0.337550     -0.411695      0.411695       8.09629       8.50798    
  68  0.760009     -0.274425     -0.334705      0.334705       8.24674       8.58144    
  69  0.813040     -0.206975     -0.252438      0.252438       8.10753       8.35997    
  70  0.177817E-01  -4.02959      -4.91471       4.91471       8.09754       13.0122    
loop,thermsimp(1:2)       34   2.85613       1.47325    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    205          8.26          0.87          1.13         24.58          0.08          0.05         26.71
Just calling func    0   0         26.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    206         10.86          0.86          1.13         24.55          0.09          0.05         26.68
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.26
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       34
neval is:      205
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       35
neval is:      205


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      205     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.348096      -1.05528      -1.28708       1.28708       8.01090       9.29798    
   2  0.175000      -1.74297      -2.12583       2.12583       8.05958       10.1854    
   3  0.131587      -2.02809      -2.47358       2.47358       8.06856       10.5421    
   4  0.301717      -1.19826      -1.46147       1.46147       8.10206       9.56353    
   5  0.166877      -1.79050      -2.18380       2.18380       8.12070       10.3045    
   6  0.481073     -0.731736     -0.892467      0.892467       8.03969       8.93215    
   7  0.706381     -0.347600     -0.423953      0.423953       8.11383       8.53778    
   8  0.702617     -0.352943     -0.430469      0.430469       8.11497       8.54544    
   9  0.552795     -0.592767     -0.722973      0.722973       8.19747       8.92044    
  10  0.495420     -0.702349     -0.856625      0.856625       8.06820       8.92482    
  11  0.479343     -0.735339     -0.896862      0.896862       8.04862       8.94548    
  12  0.462659     -0.770765     -0.940070      0.940070       8.20747       9.14754    
  13  0.631315E-01  -2.76253      -3.36935       3.36935       8.09862       11.4680    
  14  0.785681     -0.241205     -0.294187      0.294187       8.25932       8.55351    
  15  0.767932     -0.264055     -0.322056      0.322056       8.10753       8.42958    
  16  0.262689E-01  -3.63937      -4.43878       4.43878       8.10953       12.5483    
  17  0.871353     -0.137708     -0.167957      0.167957       8.10237       8.27033    
  18  0.618350     -0.480701     -0.586291      0.586291       8.20225       8.78854    
  19  0.196090      -1.62918      -1.98705       1.98705       8.11494       10.1020    
  20  0.925050     -0.779078E-01 -0.950209E-01  0.950209E-01   8.09048       8.18550    
  21  0.903269     -0.101735     -0.124082      0.124082       8.10859       8.23267    
  22  0.958828     -0.420436E-01 -0.512788E-01  0.512788E-01   8.17237       8.22365    
  23  0.969274     -0.312081E-01 -0.380632E-01  0.380632E-01   8.06063       8.09869    
  24  0.313932      -1.15858      -1.41307       1.41307       8.09629       9.50936    
  25  0.106324      -2.24126      -2.73357       2.73357       8.10621       10.8398    
  26  0.718705     -0.330304     -0.402858      0.402858       8.09096       8.49382    
  27  0.751116     -0.286195     -0.349060      0.349060       8.02986       8.37892    
  28  0.996391     -0.361592E-02 -0.441018E-02  0.441018E-02   8.32928       8.33369    
  29  0.313387      -1.16032      -1.41519       1.41519       8.22182       9.63701    
  30  0.305057      -1.18726      -1.44805       1.44805       8.02972       9.47776    
  31  0.408833     -0.894447      -1.09092       1.09092       8.24674       9.33766    
  32  0.589856     -0.527877     -0.643829      0.643829       8.05853       8.70236    
  33  0.808683     -0.212349     -0.258993      0.258993       8.09050       8.34949    
  34  0.481635     -0.730569     -0.891044      0.891044       8.35386       9.24490    
  35  0.677481     -0.389374     -0.474903      0.474903       8.10246       8.57736    
  36  0.673605     -0.395111     -0.481900      0.481900       8.32632       8.80822    
  37  0.409374E-01  -3.19571      -3.89767       3.89767       8.05410       11.9518    
  38  0.362144      -1.01571      -1.23882       1.23882       8.62600       9.86482    
  39  0.364718E-01  -3.31122      -4.03855       4.03855       8.06768       12.1062    
  40  0.280272      -1.27199      -1.55140       1.55140       8.10547       9.65687    
  41  0.532528     -0.630120     -0.768531      0.768531       8.11627       8.88480    
  42  0.901591     -0.103595     -0.126350      0.126350       8.06918       8.19553    
  43  0.262858      -1.33614      -1.62963       1.62963       8.07122       9.70085    
  44  0.168755      -1.77931      -2.17015       2.17015       8.10621       10.2764    
  45  0.504619     -0.683952     -0.834187      0.834187       8.11654       8.95073    
  46  0.900650     -0.104639     -0.127623      0.127623       8.11412       8.24175    
  47  0.438495     -0.824406      -1.00549       1.00549       8.19746       9.20296    
  48  0.984597     -0.155233E-01 -0.189332E-01  0.189332E-01   8.10151       8.12044    
  49  0.469739     -0.755579     -0.921548      0.921548       8.08867       9.01022    
  50  0.252111      -1.37789      -1.68055       1.68055       8.09139       9.77194    
  51  0.764692     -0.268282     -0.327213      0.327213       8.14970       8.47691    
  52  0.848445     -0.164351     -0.200451      0.200451       8.09118       8.29163    
  53  0.705739     -0.348509     -0.425062      0.425062       8.15023       8.57530    
  54  0.449895     -0.798741     -0.974191      0.974191       8.12933       9.10352    
  55  0.742135     -0.298224     -0.363732      0.363732       8.12578       8.48951    
  56  0.305311      -1.18642      -1.44703       1.44703       8.09102       9.53805    
  57  0.798408     -0.225136     -0.274589      0.274589       8.00020       8.27479    
  58  0.807590     -0.213700     -0.260641      0.260641       8.15194       8.41258    
  59  0.768432     -0.263404     -0.321262      0.321262       8.59370       8.91496    
  60  0.895397     -0.110488     -0.134758      0.134758       8.12653       8.26129    
  61  0.585964     -0.534497     -0.651904      0.651904       8.04995       8.70185    
  62  0.785258     -0.241743     -0.294843      0.294843       8.09327       8.38811    
  63  0.311021      -1.16790      -1.42443       1.42443       8.10022       9.52465    
  64  0.803571     -0.218690     -0.266727      0.266727       8.11426       8.38099    
  65  0.879509     -0.128391     -0.156593      0.156593       8.71362       8.87021    
  66  0.605375     -0.501907     -0.612155      0.612155       8.09541       8.70757    
  67  0.774979     -0.254920     -0.310915      0.310915       8.16632       8.47723    
  68  0.621445     -0.475708     -0.580200      0.580200       8.10666       8.68686    
  69  0.755932     -0.279804     -0.341265      0.341265       8.09754       8.43880    
  70  0.211323E-01  -3.85695      -4.70416       4.70416       8.25522       12.9594    
loop,thermsimp(1:2)       35   1.28708       2.12583    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    207          8.09          0.86          1.12         24.32          0.07          0.05         26.43
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    208          8.33          0.86          1.13         24.41          0.08          0.05         26.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       35
neval is:      207
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       36
neval is:      207


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      208
neval,tstepnext:      207     208

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.757905E-01  -2.57978      -3.14645       3.14645       8.06063       11.2071    
   2  0.962370     -0.383559E-01 -0.467810E-01  0.467810E-01   8.10151       8.14829    
   3  0.356737      -1.03076      -1.25717       1.25717       8.09048       9.34765    
   4  0.884319     -0.122937     -0.149941      0.149941       8.06918       8.21913    
   5  0.919725E-01  -2.38627      -2.91043       2.91043       8.17237       11.0828    
   6  0.900184     -0.105156     -0.128254      0.128254       8.10859       8.23684    
   7  0.390055     -0.941468      -1.14827       1.14827       8.11412       9.26239    
   8  0.263976      -1.33190      -1.62446       1.62446       8.12653       9.75099    
   9  0.898455     -0.107078     -0.130599      0.130599       8.10237       8.23297    
  10  0.697674E-01  -2.66259      -3.24745       3.24745       8.00020       11.2476    
  11  0.888938     -0.117727     -0.143587      0.143587       8.09118       8.23477    
  12  0.824147     -0.193406     -0.235889      0.235889       8.32928       8.56517    
  13  0.941109     -0.606968E-01 -0.740293E-01  0.740293E-01   8.09050       8.16453    
  14  0.885654     -0.121429     -0.148102      0.148102       8.02986       8.17796    
  15  0.798208     -0.225386     -0.274893      0.274893       8.11426       8.38916    
  16  0.365331      -1.00695      -1.22814       1.22814       8.09327       9.32140    
  17  0.519490     -0.654907     -0.798762      0.798762       8.15194       8.95070    
  18  0.922741     -0.804065E-01 -0.980684E-01  0.980684E-01   8.10753       8.20560    
  19  0.877443     -0.130744     -0.159462      0.159462       8.09754       8.25700    
  20  0.584844     -0.536410     -0.654237      0.654237       8.14970       8.80393    
  21  0.671390     -0.398406     -0.485919      0.485919       8.16632       8.65224    
  22  0.203335      -1.59290      -1.94279       1.94279       8.12578       10.0686    
  23  0.330236E-01  -3.41053      -4.15968       4.15968       8.09096       12.2506    
  24  0.879725     -0.128146     -0.156295      0.156295       8.11383       8.27012    
  25  0.833976     -0.181550     -0.221429      0.221429       8.11497       8.33640    
  26  0.901698     -0.103475     -0.126204      0.126204       8.25932       8.38552    
  27  0.692847     -0.366946     -0.447549      0.447549       8.15023       8.59778    
  28  0.550572     -0.596797     -0.727888      0.727888       8.10246       8.83034    
  29  0.158383E-01  -4.14532      -5.05587       5.05587       8.10666       13.1625    
  30  0.503246     -0.686677     -0.837511      0.837511       8.04995       8.88746    
  31  0.648812     -0.432612     -0.527639      0.527639       8.05853       8.58617    
  32  0.306980      -1.18097      -1.44038       1.44038       8.09541       9.53580    
  33  0.205188      -1.58383      -1.93173       1.93173       8.20225       10.1340    
  34  0.265146      -1.32748      -1.61907       1.61907       8.32632       9.94538    
  35  0.272730E-01  -3.60186      -4.39303       4.39303       8.71362       13.1067    
  36  0.262990E-01  -3.63823      -4.43739       4.43739       8.11627       12.5537    
  37  0.492753     -0.707748     -0.863210      0.863210       8.59370       9.45691    
  38  0.255065      -1.36624      -1.66634       1.66634       8.19747       9.86381    
  39  0.623259     -0.472794     -0.576647      0.576647       8.06820       8.64484    
  40  0.949296     -0.520343E-01 -0.634641E-01  0.634641E-01   8.03969       8.10315    
  41  0.982394     -0.177630E-01 -0.216648E-01  0.216648E-01   8.04862       8.07028    
  42  0.566450     -0.568366     -0.693211      0.693211       8.11654       8.80975    
  43  0.557613     -0.584090     -0.712390      0.712390       8.08867       8.80106    
  44  0.900731     -0.104549     -0.127514      0.127514       8.12933       8.25685    
  45  0.671339     -0.398481     -0.486010      0.486010       8.20747       8.69348    
  46  0.650454     -0.430084     -0.524555      0.524555       8.19746       8.72202    
  47  0.749315     -0.288595     -0.351988      0.351988       8.35386       8.70584    
  48  0.667497     -0.404220     -0.493010      0.493010       8.01090       8.50391    
  49  0.132870      -2.01838      -2.46174       2.46174       8.24674       10.7085    
  50  0.964787     -0.358480E-01 -0.437223E-01  0.437223E-01   8.02972       8.07344    
  51  0.835780     -0.179390     -0.218794      0.218794       8.09629       8.31508    
  52  0.601609     -0.508148     -0.619766      0.619766       8.10022       8.71999    
  53  0.937321     -0.647298E-01 -0.789482E-01  0.789482E-01   8.09102       8.16996    
  54  0.467877     -0.759550     -0.926391      0.926391       8.10206       9.02845    
  55  0.953249     -0.478789E-01 -0.583958E-01  0.583958E-01   8.22182       8.28022    
  56  0.827724     -0.189076     -0.230608      0.230608       8.10547       8.33608    
  57  0.624780     -0.470355     -0.573672      0.573672       8.07122       8.64489    
  58  0.821535     -0.196581     -0.239761      0.239761       8.09139       8.33115    
  59  0.625285     -0.469548     -0.572688      0.572688       8.62600       9.19868    
  60  0.581213     -0.542638     -0.661832      0.661832       8.11494       8.77677    
  61  0.855886E-01  -2.45820      -2.99817       2.99817       8.05958       11.0577    
  62  0.262334      -1.33814      -1.63207       1.63207       8.10621       9.73828    
  63  0.978265     -0.219749E-01 -0.268019E-01  0.268019E-01   8.12070       8.14750    
  64  0.600842     -0.509423     -0.621322      0.621322       8.06856       8.68988    
  65  0.476413     -0.741470     -0.904340      0.904340       8.10621       9.01055    
  66  0.922813     -0.803282E-01 -0.979729E-01  0.979729E-01   8.09862       8.19660    
  67  0.468949     -0.757261     -0.923599      0.923599       8.05410       8.97770    
  68  0.832153E-01  -2.48632      -3.03246       3.03246       8.06768       11.1001    
  69  0.927485     -0.752786E-01 -0.918141E-01  0.918141E-01   8.10953       8.20134    
  70  0.487372     -0.718728     -0.876601      0.876601       8.08929       8.96589    
loop,thermsimp(1:2)       36   3.14645      0.467810E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    209          8.06          0.86          1.12         24.32          0.08          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    210          8.07          0.86          1.12         24.41          0.08          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:    1.21966               208
loop is:       36
neval is:      209
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:    1.21966               208
loop is:       37
neval is:      209


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.609829               277

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      209     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.939165     -0.627646E-01 -0.382756E-01  0.382756E-01   8.04862       8.08689    
   2  0.112532E-01  -4.48710      -2.73636       2.73636       8.02972       10.7661    
   3  0.907929     -0.965891E-01 -0.589028E-01  0.589028E-01   8.03969       8.09859    
   4  0.478640     -0.736807     -0.449326      0.449326       8.12070       8.57002    
   5  0.737686     -0.304237     -0.185533      0.185533       8.10151       8.28704    
   6  0.114880      -2.16387      -1.31959       1.31959       8.09050       9.41009    
   7  0.309837      -1.17171     -0.714542      0.714542       8.09102       8.80556    
   8  0.469091     -0.756958     -0.461615      0.461615       8.02986       8.49147    
   9  0.721151     -0.326907     -0.199357      0.199357       8.09862       8.29798    
  10  0.557251     -0.584740     -0.356591      0.356591       8.10953       8.46612    
  11  0.581534     -0.542085     -0.330579      0.330579       8.10753       8.43811    
  12  0.501412     -0.690326     -0.420981      0.420981       8.06918       8.49017    
  13  0.783062     -0.244543     -0.149130      0.149130       8.10237       8.25150    
  14  0.571322     -0.559803     -0.341384      0.341384       8.09118       8.43257    
  15  0.902729E-01  -2.40492      -1.46659       1.46659       8.10859       9.57518    
  16  0.695403E-01  -2.66585      -1.62571       1.62571       8.12933       9.75505    
  17  0.128872      -2.04894      -1.24950       1.24950       8.09754       9.34704    
  18  0.940828E-01  -2.36358      -1.44138       1.44138       8.11383       9.55521    
  19  0.326350      -1.11979     -0.682877      0.682877       8.22182       8.90470    
  20  0.102915      -2.27385      -1.38666       1.38666       8.09629       9.48295    
  21  0.324524      -1.12540     -0.686299      0.686299       8.09139       8.77769    
  22  0.259454      -1.34918     -0.822767      0.822767       8.10547       8.92824    
  23  0.782812     -0.244863     -0.149324      0.149324       8.11497       8.26430    
  24  0.383591     -0.958178     -0.584325      0.584325       8.25932       8.84364    
  25  0.626880     -0.466999     -0.284790      0.284790       8.11426       8.39905    
  26  0.292269      -1.23008     -0.750138      0.750138       8.01090       8.76104    
  27  0.448852     -0.801062     -0.488511      0.488511       8.32928       8.81779    
  28  0.685432     -0.377706     -0.230336      0.230336       8.05853       8.28887    
  29  0.995399     -0.461118E-02 -0.281203E-02  0.281203E-02   8.15023       8.15305    
  30  0.163323      -1.81203      -1.10503       1.10503       8.06820       9.17322    
  31  0.952940     -0.482038E-01 -0.293960E-01  0.293960E-01   8.07122       8.10062    
  32  0.861306     -0.149306     -0.910509E-01  0.910509E-01   8.16632       8.25737    
  33  0.587276     -0.532261     -0.324588      0.324588       8.06856       8.39314    
  34  0.908704     -0.957357E-01 -0.583824E-01  0.583824E-01   8.20747       8.26585    
  35  0.585935     -0.534546     -0.325981      0.325981       8.35386       8.67984    
  36  0.429836     -0.844352     -0.514910      0.514910       8.10022       8.61513    
  37  0.726203     -0.319926     -0.195100      0.195100       8.19746       8.39256    
  38  0.151145E-01  -4.19210      -2.55646       2.55646       8.11494       10.6714    
  39  0.927869     -0.748646E-01 -0.456546E-01  0.456546E-01   8.08867       8.13432    
  40  0.961645     -0.391099E-01 -0.238503E-01  0.238503E-01   8.14970       8.17355    
  41  0.253977      -1.37051     -0.835776      0.835776       8.11654       8.95231    
  42  0.768038     -0.263917     -0.160944      0.160944       8.10246       8.26340    
  43  0.569441E-01  -2.86569      -1.74758       1.74758       8.04995       9.79753    
  44  0.103919      -2.26415      -1.38074       1.38074       8.15194       9.53268    
  45  0.312226      -1.16403     -0.709858      0.709858       8.08929       8.79914    
  46  0.473636E-02  -5.35249      -3.26410       3.26410       8.05410       11.3182    
  47  0.192099      -1.64975      -1.00606       1.00606       8.10621       9.11227    
  48  0.799429     -0.223858     -0.136515      0.136515       8.10206       8.23857    
  49  0.164379      -1.80558      -1.10110       1.10110       8.62600       9.72709    
  50  0.421896     -0.862996     -0.526280      0.526280       8.11412       8.64040    
  51  0.361660      -1.01705     -0.620227      0.620227       8.09327       8.71349    
  52  0.346541      -1.05975     -0.646269      0.646269       8.09048       8.73675    
  53  0.728715     -0.316473     -0.192994      0.192994       8.59370       8.78669    
  54  0.305329      -1.18637     -0.723480      0.723480       8.09541       8.81889    
  55  0.547244     -0.602861     -0.367642      0.367642       8.10621       8.47385    
  56  0.942790     -0.589122E-01 -0.359263E-01  0.359263E-01   8.12653       8.16246    
  57  0.846801     -0.166290     -0.101408      0.101408       8.19747       8.29887    
  58  0.961806     -0.389424E-01 -0.237482E-01  0.237482E-01   8.32632       8.35007    
  59  0.101104      -2.29161      -1.39749       1.39749       8.12578       9.52327    
  60  0.181736      -1.70520      -1.03988       1.03988       8.20225       9.24213    
  61  0.298004      -1.21065     -0.738289      0.738289       8.24674       8.98503    
  62  0.840699E-01  -2.47611      -1.51000       1.51000       8.05958       9.56958    
  63  0.796444     -0.227598     -0.138796      0.138796       8.17237       8.31117    
  64  0.294043      -1.22403     -0.746448      0.746448       8.06768       8.81412    
  65  0.156591      -1.85412      -1.13069       1.13069       8.06063       9.19132    
  66  0.973381     -0.269794E-01 -0.164528E-01  0.164528E-01   8.00020       8.01665    
  67  0.515799     -0.662038     -0.403729      0.403729       8.09096       8.49469    
  68  0.211924      -1.55153     -0.946167      0.946167       8.11627       9.06243    
  69  0.830172     -0.186122     -0.113503      0.113503       8.71362       8.82712    
  70  0.666225     -0.406128     -0.247669      0.247669       8.06479       8.31246    
loop,thermsimp(1:2)       37  0.382756E-01   2.73636    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    211          8.13          0.86          1.13         24.35          0.09          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    212          8.47          0.86          1.13         24.40          0.09          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       37
neval is:      211
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       38
neval is:      211


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      211     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.371753     -0.989525     -0.603441      0.603441       8.00020       8.60364    
   2  0.687927     -0.374072     -0.228120      0.228120       8.04862       8.27674    
   3  0.288957      -1.24148     -0.757088      0.757088       8.03969       8.79678    
   4  0.192838      -1.64590      -1.00372       1.00372       8.07122       9.07494    
   5  0.369869     -0.994607     -0.606540      0.606540       8.08867       8.69521    
   6  0.735973     -0.306562     -0.186950      0.186950       8.15023       8.33718    
   7  0.637144     -0.450760     -0.274886      0.274886       8.12653       8.40142    
   8  0.703934     -0.351071     -0.214093      0.214093       8.14970       8.36379    
   9  0.864279     -0.145859     -0.889491E-01  0.889491E-01   8.10206       8.19100    
  10  0.473452     -0.747705     -0.455972      0.455972       8.10237       8.55834    
  11  0.242010      -1.41877     -0.865210      0.865210       8.16632       9.03153    
  12  0.510769     -0.671838     -0.409706      0.409706       8.10246       8.51216    
  13  0.829624     -0.186782     -0.113905      0.113905       8.11497       8.22888    
  14  0.228911      -1.47442     -0.899146      0.899146       8.20747       9.10661    
  15  0.310006      -1.17116     -0.714210      0.714210       8.10151       8.81572    
  16  0.248341      -1.39295     -0.849463      0.849463       8.05853       8.90799    
  17  0.723214     -0.324050     -0.197615      0.197615       8.09862       8.29624    
  18  0.420900     -0.865360     -0.527722      0.527722       8.19747       8.72519    
  19  0.133903      -2.01064      -1.22614       1.22614       8.17237       9.39852    
  20  0.571916     -0.558763     -0.340750      0.340750       8.06479       8.40554    
  21  0.609104     -0.495766     -0.302332      0.302332       8.32632       8.62865    
  22  0.582057     -0.541186     -0.330031      0.330031       8.19746       8.52749    
  23  0.440731     -0.819321     -0.499646      0.499646       8.06856       8.56820    
  24  0.211006      -1.55587     -0.948814      0.948814       8.11426       9.06308    
  25  0.665769     -0.406813     -0.248086      0.248086       8.09118       8.33927    
  26  0.766062     -0.266493     -0.162515      0.162515       8.10753       8.27004    
  27  0.321416E-01  -3.43760      -2.09635       2.09635       8.10953       10.2059    
  28  0.165897E-01  -4.09897      -2.49967       2.49967       8.10621       10.6059    
  29  0.634553     -0.454835     -0.277371      0.277371       8.06918       8.34656    
  30  0.981834     -0.183335E-01 -0.111803E-01  0.111803E-01   8.02986       8.04104    
  31  0.511720     -0.669978     -0.408572      0.408572       8.09096       8.49954    
  32  0.426358     -0.852477     -0.519865      0.519865       8.12070       8.64056    
  33  0.500527     -0.692094     -0.422059      0.422059       8.10022       8.52228    
  34  0.100483      -2.29777      -1.40125       1.40125       8.11412       9.51537    
  35  0.837324     -0.177545     -0.108272      0.108272       8.35386       8.46213    
  36  0.257741      -1.35580     -0.826806      0.826806       8.09327       8.92007    
  37  0.437184     -0.827401     -0.504573      0.504573       8.09048       8.59505    
  38  0.707529     -0.345976     -0.210986      0.210986       8.01090       8.22189    
  39  0.538379     -0.619193     -0.377602      0.377602       8.09139       8.46899    
  40  0.611820     -0.491317     -0.299619      0.299619       8.59370       8.89332    
  41  0.404533     -0.905022     -0.551908      0.551908       8.08929       8.64119    
  42  0.902499     -0.102588     -0.625612E-01  0.625612E-01   8.09102       8.15358    
  43  0.704299     -0.350552     -0.213777      0.213777       8.06768       8.28145    
  44  0.511818     -0.669786     -0.408455      0.408455       8.32928       8.73773    
  45  0.748131     -0.290178     -0.176959      0.176959       8.09541       8.27237    
  46  0.296598      -1.21538     -0.741173      0.741173       8.71362       9.45479    
  47  0.805122     -0.216762     -0.132188      0.132188       8.25932       8.39151    
  48  0.525063     -0.644236     -0.392874      0.392874       8.22182       8.61470    
  49  0.192567      -1.64731      -1.00458       1.00458       8.10547       9.11005    
  50  0.991898     -0.813527E-02 -0.496112E-02  0.496112E-02   8.11654       8.12150    
  51  0.238175      -1.43475     -0.874951      0.874951       8.24674       9.12169    
  52  0.627675     -0.465733     -0.284017      0.284017       8.11627       8.40028    
  53  0.328849      -1.11216     -0.678224      0.678224       8.10621       8.78444    
  54  0.697651     -0.360037     -0.219561      0.219561       8.06820       8.28776    
  55  0.154345      -1.86857      -1.13951       1.13951       8.06063       9.20014    
  56  0.196838      -1.62537     -0.991200      0.991200       8.20225       9.19345    
  57  0.397903     -0.921546     -0.561985      0.561985       8.09754       8.65952    
  58  0.746135E-01  -2.59543      -1.58277       1.58277       8.09050       9.67327    
  59  0.283843      -1.25934     -0.767979      0.767979       8.09629       8.86426    
  60  0.540853E-02  -5.21978      -3.18317       3.18317       8.12578       11.3090    
  61  0.534720     -0.626011     -0.381760      0.381760       8.15194       8.53370    
  62  0.909816     -0.945126E-01 -0.576365E-01  0.576365E-01   8.11383       8.17146    
  63  0.190142      -1.65998      -1.01231       1.01231       8.05958       9.07188    
  64  0.150854      -1.89144      -1.15346       1.15346       8.10859       9.26205    
  65  0.385455     -0.953330     -0.581368      0.581368       8.62600       9.20737    
  66  0.655101     -0.422966     -0.257937      0.257937       8.12933       8.38727    
  67  0.527025     -0.640508     -0.390600      0.390600       8.04995       8.44055    
  68  0.110501      -2.20273      -1.34329       1.34329       8.11494       9.45822    
  69  0.206094      -1.57942     -0.963176      0.963176       8.02972       8.99289    
  70  0.961998     -0.387429E-01 -0.236265E-01  0.236265E-01   8.13016       8.15379    
loop,thermsimp(1:2)       38  0.603441      0.228120    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    213          8.07          0.86          1.12         24.35          0.09          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    214          8.15          0.86          1.12         24.37          0.07          0.05         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       38
neval is:      213
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       39
neval is:      213


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      213     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.724264     -0.322600     -0.196731      0.196731       8.02986       8.22659    
   2  0.309663      -1.17227     -0.714884      0.714884       8.11654       8.83142    
   3  0.688114     -0.373801     -0.227954      0.227954       8.09102       8.31897    
   4  0.677876     -0.388791     -0.237096      0.237096       8.13016       8.36726    
   5  0.283701      -1.25984     -0.768284      0.768284       8.11383       8.88211    
   6  0.183733      -1.69427      -1.03321       1.03321       8.10206       9.13527    
   7  0.243414      -1.41299     -0.861683      0.861683       8.01090       8.87258    
   8  0.785389     -0.241576     -0.147320      0.147320       8.11497       8.26229    
   9  0.258033      -1.35467     -0.826116      0.826116       8.10753       8.93364    
  10  0.137887      -1.98132      -1.20827       1.20827       8.09541       9.30368    
  11  0.386520     -0.950573     -0.579686      0.579686       8.04862       8.62830    
  12  0.882934     -0.124505     -0.759269E-01  0.759269E-01   8.06768       8.14360    
  13  0.395106     -0.928602     -0.566288      0.566288       8.06820       8.63449    
  14  0.107633      -2.22903      -1.35933       1.35933       8.09862       9.45795    
  15  0.434094     -0.834495     -0.508899      0.508899       8.15023       8.65913    
  16  0.558484     -0.582529     -0.355243      0.355243       8.09118       8.44643    
  17  0.102706      -2.27589      -1.38790       1.38790       8.06918       9.45709    
  18  0.325804      -1.12146     -0.683897      0.683897       8.14970       8.83359    
  19  0.693871     -0.365469     -0.222873      0.222873       8.12933       8.35221    
  20  0.832622     -0.183176     -0.111706      0.111706       8.25932       8.37102    
  21  0.691207     -0.369316     -0.225219      0.225219       8.11627       8.34149    
  22  0.903946     -0.100985     -0.615837E-01  0.615837E-01   8.12653       8.18812    
  23  0.258785E-01  -3.65434      -2.22852       2.22852       8.06479       10.2933    
  24  0.247338      -1.39700     -0.851930      0.851930       8.04995       8.90188    
  25  0.861464     -0.149122     -0.909390E-01  0.909390E-01   8.35386       8.44479    
  26  0.954919     -0.461290E-01 -0.281308E-01  0.281308E-01   8.09139       8.11952    
  27  0.579638     -0.545352     -0.332571      0.332571       8.09096       8.42353    
  28  0.537182     -0.621418     -0.378959      0.378959       8.10246       8.48141    
  29  0.407710     -0.897199     -0.547138      0.547138       8.10022       8.64736    
  30  0.958466     -0.424211E-01 -0.258696E-01  0.258696E-01   8.19746       8.22333    
  31  0.884674     -0.122536     -0.747260E-01  0.747260E-01   8.15194       8.22667    
  32  0.395055     -0.928731     -0.566367      0.566367       8.10237       8.66874    
  33  0.325425      -1.12262     -0.684607      0.684607       8.06856       8.75316    
  34  0.679842     -0.385895     -0.235330      0.235330       8.09048       8.32581    
  35  0.765292     -0.267498     -0.163128      0.163128       8.00020       8.16333    
  36  0.217460      -1.52574     -0.930440      0.930440       8.22182       9.15226    
  37  0.181189      -1.70822      -1.04172       1.04172       8.32632       9.36804    
  38  0.518456     -0.656899     -0.400596      0.400596       8.12070       8.52129    
  39  0.249864E-01  -3.68942      -2.24992       2.24992       8.08929       10.3392    
  40  0.336654      -1.08870     -0.663921      0.663921       8.09754       8.76146    
  41  0.873801     -0.134903     -0.822676E-01  0.822676E-01   8.08867       8.17094    
  42  0.478904     -0.736255     -0.448989      0.448989       8.19747       8.64646    
  43  0.819950     -0.198512     -0.121058      0.121058       8.32928       8.45033    
  44  0.966813     -0.337500E-01 -0.205817E-01  0.205817E-01   8.10621       8.12679    
  45  0.514109     -0.665319     -0.405731      0.405731       8.03969       8.44542    
  46  0.483734     -0.726221     -0.442870      0.442870       8.10151       8.54438    
  47  0.227743E-01  -3.78212      -2.30645       2.30645       8.09629       10.4027    
  48  0.409495     -0.892830     -0.544473      0.544473       8.59370       9.13817    
  49  0.198361      -1.61767     -0.986501      0.986501       8.05853       9.04503    
  50  0.925767     -0.771331E-01 -0.470380E-01  0.470380E-01   8.09327       8.14030    
  51  0.842113     -0.171842     -0.104794      0.104794       8.02972       8.13451    
  52  0.347114E-01  -3.36069      -2.04944       2.04944       8.16632       10.2158    
  53  0.215814      -1.53334     -0.935074      0.935074       8.11426       9.04934    
  54  0.219309      -1.51727     -0.925277      0.925277       8.05958       8.98486    
  55  0.940126     -0.617416E-01 -0.376518E-01  0.376518E-01   8.07122       8.10887    
  56  0.663408     -0.410365     -0.250253      0.250253       8.20747       8.45772    
  57  0.630947     -0.460533     -0.280846      0.280846       8.10547       8.38632    
  58  0.719671     -0.328961     -0.200610      0.200610       8.24674       8.44735    
  59  0.939094     -0.628392E-01 -0.383211E-01  0.383211E-01   8.20225       8.24057    
  60  0.901520     -0.103673     -0.632229E-01  0.632229E-01   8.06063       8.12385    
  61  0.771028     -0.260031     -0.158574      0.158574       8.62600       8.78457    
  62  0.320616      -1.13751     -0.693686      0.693686       8.10859       8.80228    
  63  0.893890     -0.112173     -0.684061E-01  0.684061E-01   8.17237       8.24078    
  64  0.874332     -0.134295     -0.818969E-01  0.818969E-01   8.71362       8.79552    
  65  0.363931      -1.01079     -0.616410      0.616410       8.11494       8.73135    
  66  0.140534      -1.96231      -1.19667       1.19667       8.11412       9.31080    
  67  0.432559     -0.838038     -0.511059      0.511059       8.09050       8.60156    
  68  0.446579     -0.806139     -0.491607      0.491607       8.10953       8.60113    
  69  0.830196     -0.186093     -0.113485      0.113485       8.10621       8.21970    
  70  0.324418      -1.12572     -0.686498      0.686498       8.06512       8.75162    
loop,thermsimp(1:2)       39  0.196731      0.714884    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    215          8.08          0.86          1.13         24.37          0.07          0.04         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    216          8.12          0.87          1.13         24.31          0.08          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       39
neval is:      215
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       40
neval is:      215


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      215     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.954632     -0.464296E-01 -0.283141E-01  0.283141E-01   8.07122       8.09954    
   2  0.450411     -0.797594     -0.486396      0.486396       8.09139       8.57779    
   3  0.691912E-01  -2.67088      -1.62878       1.62878       8.06063       9.68941    
   4  0.740935     -0.299842     -0.182852      0.182852       8.10621       8.28906    
   5  0.452531     -0.792898     -0.483532      0.483532       8.02972       8.51325    
   6  0.461330     -0.773642     -0.471789      0.471789       8.09327       8.56506    
   7  0.102999      -2.27303      -1.38616       1.38616       8.06768       9.45384    
   8  0.475106     -0.744217     -0.453845      0.453845       8.00020       8.45404    
   9  0.240275      -1.42597     -0.869597      0.869597       8.08867       8.95827    
  10  0.276707E-01  -3.58738      -2.18769       2.18769       8.12653       10.3142    
  11  0.132701E-01  -4.32224      -2.63583       2.63583       8.10621       10.7420    
  12  0.997219     -0.278509E-02 -0.169843E-02  0.169843E-02   8.19746       8.19916    
  13  0.563305     -0.573934     -0.350001      0.350001       8.02986       8.37986    
  14  0.347949      -1.05570     -0.643796      0.643796       8.15194       8.79574    
  15  0.546018     -0.605103     -0.369009      0.369009       8.20225       8.57126    
  16  0.343968      -1.06721     -0.650813      0.650813       8.17237       8.82319    
  17  0.945234     -0.563230E-01 -0.343474E-01  0.343474E-01   8.11497       8.14932    
  18  0.346208      -1.06072     -0.646855      0.646855       8.09102       8.73787    
  19  0.406433     -0.900337     -0.549051      0.549051       8.09048       8.63953    
  20  0.632259     -0.458455     -0.279579      0.279579       8.11627       8.39585    
  21  0.983930     -0.162002E-01 -0.987934E-02  0.987934E-02   8.12933       8.13921    
  22  0.200798      -1.60546     -0.979054      0.979054       8.13016       9.10922    
  23  0.223962      -1.49628     -0.912473      0.912473       8.25932       9.17179    
  24  0.594322     -0.520335     -0.317315      0.317315       8.10547       8.42279    
  25  0.875298     -0.133191     -0.812237E-01  0.812237E-01   8.09096       8.17219    
  26  0.327822      -1.11529     -0.680133      0.680133       8.35386       9.03399    
  27  0.215105      -1.53663     -0.937080      0.937080       8.03969       8.97677    
  28  0.905181     -0.996198E-01 -0.607510E-01  0.607510E-01   8.09118       8.15193    
  29  0.699086     -0.357981     -0.218307      0.218307       8.24674       8.46504    
  30  0.747401     -0.291154     -0.177554      0.177554       8.32928       8.50683    
  31  0.699189     -0.357834     -0.218217      0.218217       8.20747       8.42569    
  32  0.563488     -0.573610     -0.349804      0.349804       8.10246       8.45226    
  33  0.155576      -1.86062      -1.13466       1.13466       8.12070       9.25536    
  34  0.380593     -0.966025     -0.589110      0.589110       8.10151       8.69062    
  35  0.626112     -0.468226     -0.285537      0.285537       8.10953       8.39506    
  36  0.372369     -0.987870     -0.602431      0.602431       8.09050       8.69293    
  37  0.517531     -0.658686     -0.401686      0.401686       8.04862       8.45030    
  38  0.673247     -0.395643     -0.241274      0.241274       8.06820       8.30947    
  39  0.741527     -0.299044     -0.182366      0.182366       8.19747       8.37983    
  40  0.280982      -1.26947     -0.774156      0.774156       8.10022       8.87438    
  41  0.331745      -1.10339     -0.672878      0.672878       8.15023       8.82311    
  42  0.712030     -0.339635     -0.207119      0.207119       8.10237       8.30949    
  43  0.200581      -1.60654     -0.979712      0.979712       8.11494       9.09465    
  44  0.989915     -0.101357E-01 -0.618104E-02  0.618104E-02   8.06512       8.07131    
  45  0.808031     -0.213155     -0.129988      0.129988       8.06856       8.19854    
  46  0.893446     -0.112670     -0.687093E-01  0.687093E-01   8.09754       8.16624    
  47  0.364885      -1.00817     -0.614812      0.614812       8.62600       9.24081    
  48  0.923731     -0.793347E-01 -0.483806E-01  0.483806E-01   8.71362       8.76200    
  49  0.504880     -0.683434     -0.416777      0.416777       8.10859       8.52537    
  50  0.724988     -0.321600     -0.196121      0.196121       8.11654       8.31266    
  51  0.927322     -0.754540E-01 -0.460140E-01  0.460140E-01   8.14970       8.19571    
  52  0.857721     -0.153476     -0.935943E-01  0.935943E-01   8.01090       8.10449    
  53  0.943333     -0.583361E-01 -0.355750E-01  0.355750E-01   8.11383       8.14940    
  54  0.794551     -0.229978     -0.140247      0.140247       8.04995       8.19020    
  55  0.732400     -0.311429     -0.189918      0.189918       8.10753       8.29745    
  56  0.143434      -1.94188      -1.18421       1.18421       8.05958       9.24379    
  57  0.859384     -0.151540     -0.924132E-01  0.924132E-01   8.05853       8.15094    
  58  0.677471     -0.389389     -0.237460      0.237460       8.11426       8.35172    
  59  0.258745      -1.35191     -0.824434      0.824434       8.10206       8.92649    
  60  0.380926E-01  -3.26773      -1.99276       1.99276       8.59370       10.5865    
  61  0.563373     -0.573814     -0.349928      0.349928       8.22182       8.57175    
  62  0.985538     -0.145678E-01 -0.888384E-02  0.888384E-02   8.09541       8.10430    
  63  0.647297     -0.434951     -0.265245      0.265245       8.11412       8.37937    
  64  0.608092     -0.497430     -0.303347      0.303347       8.32632       8.62967    
  65  0.944821     -0.567601E-01 -0.346139E-01  0.346139E-01   8.06918       8.10380    
  66  0.458402E-01  -3.08259      -1.87985       1.87985       8.09862       9.97848    
  67  0.573743E-01  -2.85816      -1.74299       1.74299       8.16632       9.90931    
  68  0.755011     -0.281022     -0.171376      0.171376       8.06479       8.23617    
  69  0.199134      -1.61378     -0.984129      0.984129       8.08929       9.07341    
  70  0.364851      -1.00827     -0.614870      0.614870       8.07678       8.69165    
loop,thermsimp(1:2)       40  0.283141E-01  0.486396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    217          8.07          0.86          1.12         24.43          0.06          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    218          8.08          0.87          1.12         24.64          0.07          0.05         26.75
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       40
neval is:      217
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       41
neval is:      217


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      217     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.357965      -1.02732     -0.626489      0.626489       8.06512       8.69161    
   2  0.414955     -0.879585     -0.536396      0.536396       8.07122       8.60762    
   3  0.407443     -0.897854     -0.547537      0.547537       8.06918       8.61672    
   4  0.883897     -0.123414     -0.752616E-01  0.752616E-01   8.09541       8.17067    
   5  0.520045     -0.653840     -0.398731      0.398731       8.01090       8.40963    
   6  0.634521     -0.454885     -0.277402      0.277402       8.12933       8.40674    
   7  0.344406      -1.06594     -0.650038      0.650038       8.11497       8.76501    
   8  0.545595     -0.605879     -0.369482      0.369482       8.11383       8.48331    
   9  0.766876     -0.265430     -0.161867      0.161867       8.05853       8.22040    
  10  0.639043     -0.447783     -0.273071      0.273071       8.09118       8.36425    
  11  0.850701     -0.161694     -0.986059E-01  0.986059E-01   8.09754       8.19614    
  12  0.832060     -0.183851     -0.112118      0.112118       8.09096       8.20308    
  13  0.728209     -0.317167     -0.193417      0.193417       8.04995       8.24337    
  14  0.531327     -0.632378     -0.385642      0.385642       8.14970       8.53534    
  15  0.188974E-01  -3.96873      -2.42024       2.42024       8.06856       10.4888    
  16  0.246817      -1.39911     -0.853215      0.853215       8.19746       9.05068    
  17  0.935336     -0.668496E-01 -0.407668E-01  0.407668E-01   8.06479       8.10556    
  18  0.730823     -0.313585     -0.191233      0.191233       8.10621       8.29745    
  19  0.482288     -0.729213     -0.444695      0.444695       8.10753       8.55222    
  20  0.782974E-04  -9.45500      -5.76593       5.76593       8.06820       13.8341    
  21  0.258744      -1.35192     -0.824438      0.824438       8.10237       8.92681    
  22  0.389044     -0.944063     -0.575716      0.575716       8.11654       8.69225    
  23  0.611459E-01  -2.79449      -1.70416       1.70416       8.11426       9.81843    
  24  0.124922      -2.08006      -1.26848       1.26848       8.11412       9.38261    
  25  0.253683      -1.37167     -0.836484      0.836484       8.19747       9.03395    
  26  0.781437     -0.246621     -0.150396      0.150396       8.02986       8.18025    
  27  0.835634     -0.179565     -0.109504      0.109504       8.10953       8.21903    
  28  0.542030     -0.612434     -0.373480      0.373480       8.11627       8.48975    
  29  0.463443     -0.769071     -0.469002      0.469002       8.10547       8.57448    
  30  0.120587      -2.11538      -1.29002       1.29002       8.20747       9.49749    
  31  0.733316     -0.310178     -0.189156      0.189156       8.04862       8.23777    
  32  0.955530     -0.454889E-01 -0.277404E-01  0.277404E-01   8.10246       8.13020    
  33  0.419735     -0.868132     -0.529412      0.529412       8.00020       8.52961    
  34  0.284829      -1.25587     -0.765863      0.765863       8.24674       9.01260    
  35  0.924079     -0.789582E-01 -0.481510E-01  0.481510E-01   8.32928       8.37743    
  36  0.432674     -0.837770     -0.510896      0.510896       8.02972       8.54061    
  37  0.155293      -1.86244      -1.13577       1.13577       8.10859       9.24436    
  38  0.634342     -0.455168     -0.277574      0.277574       8.09327       8.37084    
  39  0.935635     -0.665293E-01 -0.405715E-01  0.405715E-01   8.20225       8.24282    
  40  0.931832     -0.706024E-01 -0.430554E-01  0.430554E-01   8.22182       8.26488    
  41  0.875970     -0.132424     -0.807558E-01  0.807558E-01   8.09139       8.17214    
  42  0.273544      -1.29629     -0.790516      0.790516       8.32632       9.11683    
  43  0.799596     -0.223649     -0.136388      0.136388       8.09048       8.22686    
  44  0.772883     -0.257628     -0.157109      0.157109       8.10151       8.25862    
  45  0.274276      -1.29362     -0.788887      0.788887       8.07678       8.86567    
  46  0.116034      -2.15387      -1.31349       1.31349       8.09050       9.40399    
  47  0.700214     -0.356369     -0.217324      0.217324       8.09102       8.30834    
  48  0.704184E-01  -2.65330      -1.61806       1.61806       8.71362       10.3317    
  49  0.699980E-01  -2.65929      -1.62171       1.62171       8.15194       9.77365    
  50  0.186964      -1.67684      -1.02258       1.02258       8.15023       9.17282    
  51  0.342641      -1.07107     -0.653170      0.653170       8.17237       8.82554    
  52  0.989806     -0.102462E-01 -0.624841E-02  0.624841E-02   8.10022       8.10647    
  53  0.216227      -1.53143     -0.933908      0.933908       8.10206       9.03596    
  54  0.233793      -1.45332     -0.886276      0.886276       8.08867       8.97495    
  55  0.404477     -0.905159     -0.551992      0.551992       8.03969       8.59168    
  56  0.164502      -1.80483      -1.10064       1.10064       8.35386       9.45449    
  57  0.561765E-01  -2.87926      -1.75585       1.75585       8.08929       9.84514    
  58  0.169196E-01  -4.07928      -2.48766       2.48766       8.11494       10.6026    
  59  0.486948     -0.719597     -0.438831      0.438831       8.13016       8.56899    
  60  0.640730     -0.445148     -0.271464      0.271464       8.25932       8.53078    
  61  0.940004     -0.618708E-01 -0.377306E-01  0.377306E-01   8.62600       8.66373    
  62  0.216981      -1.52795     -0.931786      0.931786       8.05958       8.99136    
  63  0.131817      -2.02634      -1.23572       1.23572       8.12070       9.35642    
  64  0.996981     -0.302401E-02 -0.184413E-02  0.184413E-02   8.06768       8.06952    
  65  0.534925     -0.625629     -0.381526      0.381526       8.06063       8.44216    
  66  0.151104      -1.88978      -1.15244       1.15244       8.16632       9.31876    
  67  0.228761      -1.47508     -0.899545      0.899545       8.09862       8.99817    
  68  0.187751      -1.67264      -1.02002       1.02002       8.12653       9.14656    
  69  0.417030     -0.874597     -0.533354      0.533354       8.59370       9.12705    
  70  0.239615      -1.42872     -0.871275      0.871275       8.06810       8.93937    
loop,thermsimp(1:2)       41  0.626489      0.536396    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    219          8.10          0.87          1.13         24.53          0.10          0.05         26.68
Just calling func    0   0         26.68


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    220         15.48          0.86          1.13         24.33          0.09          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       41
neval is:      219
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       42
neval is:      219


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      219     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.559413E-01  -2.88345      -1.75841       1.75841       8.06768       9.82609    
   2  0.688513     -0.373221     -0.227601      0.227601       8.06479       8.29239    
   3  0.530653     -0.633647     -0.386416      0.386416       8.10022       8.48664    
   4  0.542886     -0.610856     -0.372517      0.372517       8.10246       8.47497    
   5  0.603382     -0.505205     -0.308088      0.308088       8.09541       8.40350    
   6  0.478412     -0.737283     -0.449616      0.449616       8.09139       8.54101    
   7  0.809657     -0.211144     -0.128762      0.128762       8.02986       8.15862    
   8  0.764585     -0.268422     -0.163691      0.163691       8.09754       8.26123    
   9  0.228600      -1.47578     -0.899973      0.899973       8.09096       8.99094    
  10  0.495526     -0.702136     -0.428182      0.428182       8.10953       8.53771    
  11  0.368264     -0.998954     -0.609191      0.609191       8.05853       8.66772    
  12  0.407647     -0.897355     -0.547233      0.547233       8.09048       8.63771    
  13  0.316165      -1.15149     -0.702212      0.702212       8.04862       8.75083    
  14  0.458518     -0.779756     -0.475518      0.475518       8.20225       8.67777    
  15  0.643610     -0.440663     -0.268729      0.268729       8.04995       8.31868    
  16  0.316553E-01  -3.45285      -2.10565       2.10565       8.10151       10.2072    
  17  0.570171     -0.561819     -0.342614      0.342614       8.22182       8.56444    
  18  0.448642E-01  -3.10412      -1.89298       1.89298       8.10621       9.99919    
  19  0.128957      -2.04828      -1.24910       1.24910       8.09102       9.34011    
  20  0.159422      -1.83620      -1.11977       1.11977       8.09118       9.21095    
  21  0.154083      -1.87026      -1.14054       1.14054       8.09327       9.23381    
  22  0.696997     -0.360974     -0.220132      0.220132       8.32928       8.54941    
  23  0.579421     -0.545727     -0.332800      0.332800       8.12933       8.46213    
  24  0.528206     -0.638269     -0.389235      0.389235       8.01090       8.40013    
  25  0.322914      -1.13037     -0.689331      0.689331       8.06063       8.74996    
  26  0.369562     -0.995437     -0.607046      0.607046       8.11383       8.72087    
  27  0.134248      -2.00806      -1.22458       1.22458       8.11627       9.34084    
  28  0.950150     -0.511358E-01 -0.311841E-01  0.311841E-01   8.00020       8.03138    
  29  0.138040      -1.98021      -1.20759       1.20759       8.25932       9.46691    
  30  0.316838      -1.14936     -0.700915      0.700915       8.14970       8.85061    
  31  0.151783      -1.88530      -1.14971       1.14971       8.02972       9.17943    
  32  0.338674      -1.08272     -0.660273      0.660273       8.10753       8.76780    
  33  0.814165     -0.205592     -0.125376      0.125376       8.13016       8.25554    
  34  0.578183     -0.547865     -0.334104      0.334104       8.10547       8.43958    
  35  0.208707      -1.56682     -0.955494      0.955494       8.03969       8.99518    
  36  0.540561     -0.615147     -0.375134      0.375134       8.07122       8.44636    
  37  0.910129     -0.941686E-01 -0.574267E-01  0.574267E-01   8.06918       8.12661    
  38  0.907740     -0.967972E-01 -0.590297E-01  0.590297E-01   8.62600       8.68503    
  39  0.549661     -0.598453     -0.364954      0.364954       8.06512       8.43008    
  40  0.193889      -1.64047      -1.00041       1.00041       8.11654       9.11694    
  41  0.807651     -0.213625     -0.130275      0.130275       8.11497       8.24525    
  42  0.613777     -0.488124     -0.297672      0.297672       8.17237       8.47004    
  43  0.664452     -0.408793     -0.249294      0.249294       8.07678       8.32608    
  44  0.584630     -0.536776     -0.327341      0.327341       8.10237       8.42971    
  45  0.618915     -0.479787     -0.292588      0.292588       8.06810       8.36069    
  46  0.542097     -0.612311     -0.373405      0.373405       8.08867       8.46207    
  47  0.133641      -2.01260      -1.22734       1.22734       8.05958       9.28692    
  48  0.479627     -0.734747     -0.448070      0.448070       8.09862       8.54669    
  49  0.225939      -1.48749     -0.907115      0.907115       8.24674       9.15385    
  50  0.324869      -1.12433     -0.685650      0.685650       8.19747       8.88312    
  51  0.669051     -0.401895     -0.245087      0.245087       8.10206       8.34714    
  52  0.602039     -0.507434     -0.309448      0.309448       8.19746       8.50691    
  53  0.143076      -1.94438      -1.18574       1.18574       8.32632       9.51206    
  54  0.897604     -0.108026     -0.658775E-01  0.658775E-01   8.59370       8.65958    
  55  0.165810      -1.79691      -1.09581       1.09581       8.12653       9.22234    
  56  0.468567     -0.758077     -0.462297      0.462297       8.15023       8.61253    
  57  0.641740     -0.443572     -0.270503      0.270503       8.10859       8.37909    
  58  0.904980     -0.998426E-01 -0.608869E-01  0.608869E-01   8.16632       8.22720    
  59  0.674132     -0.394330     -0.240474      0.240474       8.12070       8.36117    
  60  0.756363     -0.279234     -0.170285      0.170285       8.11412       8.28441    
  61  0.113892      -2.17251      -1.32486       1.32486       8.09050       9.41536    
  62  0.835916     -0.179227     -0.109298      0.109298       8.35386       8.46315    
  63  0.284183      -1.25814     -0.767248      0.767248       8.20747       8.97472    
  64  0.276674      -1.28492     -0.783579      0.783579       8.15194       8.93552    
  65  0.686678     -0.375890     -0.229228      0.229228       8.11426       8.34349    
  66  0.567044     -0.567318     -0.345967      0.345967       8.08929       8.43525    
  67  0.416554     -0.875738     -0.534050      0.534050       8.71362       9.24767    
  68  0.810149     -0.210537     -0.128391      0.128391       8.06856       8.19695    
  69  0.979175     -0.210445E-01 -0.128336E-01  0.128336E-01   8.11494       8.12777    
  70  0.334686      -1.09456     -0.667496      0.667496       8.09605       8.76355    
loop,thermsimp(1:2)       42   1.75841      0.227601    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    221          8.10          0.86          1.12         24.38          0.07          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    222          8.28          0.86          1.13         24.32          0.09          0.04         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  220    8.1008        1.129     -1.869      3.178     -102.6      1.393    
                      0.3549      1.336     -99.70      3.783     0.3699E-01

                       2.242     -1.070      1.530      7140.      3373.    

                     -0.1450      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6209.      453.8    

                       1.433     -5.912     -4.137     -8.504      6.770    

                      -14.82     -3.570      9715.      0.000     0.1281E+05



                       1554.     0.1257E+05 -3253.      9330.      4849.    

                       5801.     0.2747E-01 0.1932     0.9998E-02 0.1209    

                     -0.2486    -0.9951E-01 0.1899     0.1194     0.6704E-01



                     -0.4522    -0.7748      0.000     0.9285E-01-0.7447E-01

                      0.9998E-02 0.1096    -0.7116    -0.1422     0.4082E-01

                     -0.9920E-01 0.1300    -0.6678     -1.219      7032.    



                      -1.091     -1.251     -2.242     -2.311    -0.3807    

                     -0.3252      9.208      8.685    -0.1879E+05 -4.000    

                     -0.6141     -2.223      9.303      8.874    -0.1908E+05



                      -4.000     0.4880    -0.4423      8.851      9.088    

                     -0.1908E+05 -7.000    -0.7680    -0.6683      9.033    

                       8.773    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       42
neval is:      221
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       43
neval is:      221


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      221     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.788601     -0.237495     -0.144831      0.144831       8.00020       8.14503    
   2  0.796559     -0.227454     -0.138708      0.138708       8.06918       8.20789    
   3  0.784232     -0.243051     -0.148219      0.148219       8.11494       8.26315    
   4  0.503549     -0.686074     -0.418388      0.418388       8.02986       8.44824    
   5  0.468337     -0.758566     -0.462595      0.462595       8.06856       8.53115    
   6  0.198518      -1.61688     -0.986018      0.986018       8.16632       9.15234    
   7  0.857529     -0.153700     -0.937306E-01  0.937306E-01   8.11497       8.20870    
   8  0.845427     -0.167913     -0.102398      0.102398       8.13016       8.23256    
   9  0.710919     -0.341197     -0.208072      0.208072       8.09754       8.30561    
  10  0.934107     -0.681640E-01 -0.415684E-01  0.415684E-01   8.11412       8.15569    
  11  0.565087     -0.570775     -0.348075      0.348075       8.06479       8.41287    
  12  0.147377      -1.91476      -1.16768       1.16768       8.04995       9.21762    
  13  0.471965     -0.750851     -0.457891      0.457891       8.07678       8.53467    
  14  0.287319      -1.24716     -0.760555      0.760555       8.11426       8.87482    
  15  0.526906     -0.640733     -0.390738      0.390738       8.10206       8.49279    
  16  0.176999      -1.73161      -1.05599       1.05599       8.06810       9.12409    
  17  0.868579     -0.140897     -0.859228E-01  0.859228E-01   8.12070       8.20662    
  18  0.621282     -0.475971     -0.290261      0.290261       8.10859       8.39885    
  19  0.181881      -1.70440      -1.03940       1.03940       8.01090       9.05029    
  20  0.565209     -0.570560     -0.347944      0.347944       8.09541       8.44336    
  21  0.927617     -0.751364E-01 -0.458203E-01  0.458203E-01   8.10237       8.14819    
  22  0.296120      -1.21699     -0.742155      0.742155       8.06512       8.80728    
  23  0.152389      -1.88132      -1.14728       1.14728       8.08929       9.23657    
  24  0.508731     -0.675835     -0.412144      0.412144       8.10547       8.51762    
  25  0.389654     -0.942496     -0.574761      0.574761       8.07122       8.64598    
  26  0.770754     -0.260386     -0.158791      0.158791       8.08867       8.24746    
  27  0.144347      -1.93554      -1.18035       1.18035       8.12933       9.30968    
  28  0.690124     -0.370884     -0.226176      0.226176       8.35386       8.58003    
  29  0.882429     -0.125077     -0.762756E-01  0.762756E-01   8.17237       8.24865    
  30  0.781105     -0.247045     -0.150655      0.150655       8.10246       8.25311    
  31  0.331946      -1.10278     -0.672508      0.672508       8.10022       8.77273    
  32  0.157011      -1.85144      -1.12906       1.12906       8.19746       9.32652    
  33  0.734200     -0.308973     -0.188421      0.188421       8.10953       8.29795    
  34  0.563390     -0.573784     -0.349910      0.349910       8.09139       8.44130    
  35  0.349498      -1.05126     -0.641087      0.641087       8.09862       8.73971    
  36  0.256822      -1.35937     -0.828983      0.828983       8.32928       9.15826    
  37  0.563556     -0.573488     -0.349729      0.349729       8.22182       8.57155    
  38  0.945419E-01  -2.35871      -1.43841       1.43841       8.15023       9.58864    
  39  0.571450     -0.559577     -0.341246      0.341246       8.09048       8.43172    
  40  0.583029E-01  -2.84210      -1.73320       1.73320       8.59370       10.3269    
  41  0.428808     -0.846746     -0.516370      0.516370       8.05853       8.57490    
  42  0.628450     -0.464499     -0.283265      0.283265       8.20225       8.48552    
  43  0.152789      -1.87869      -1.14568       1.14568       8.62600       9.77168    
  44  0.787004E-01  -2.54211      -1.55025       1.55025       8.11383       9.66408    
  45  0.170927E-01  -4.06911      -2.48146       2.48146       8.06063       10.5421    
  46  0.531078     -0.632847     -0.385928      0.385928       8.04862       8.43455    
  47  0.206082E-01  -3.88206      -2.36739       2.36739       8.09605       10.4634    
  48  0.909565     -0.947891E-01 -0.578051E-01  0.578051E-01   8.10753       8.16533    
  49  0.456291     -0.784625     -0.478487      0.478487       8.14970       8.62818    
  50  0.997425E-02  -4.60775      -2.80994       2.80994       8.19747       11.0074    
  51  0.251070      -1.38202     -0.842797      0.842797       8.15194       8.99474    
  52  0.548517     -0.600536     -0.366224      0.366224       8.20747       8.57369    
  53  0.210242      -1.55950     -0.951027      0.951027       8.09096       9.04199    
  54  0.848361     -0.164449     -0.100286      0.100286       8.03969       8.13997    
  55  0.160491E-01  -4.13210      -2.51988       2.51988       8.11654       10.6364    
  56  0.407967     -0.896570     -0.546754      0.546754       8.24674       8.79349    
  57  0.859929     -0.150905     -0.920265E-01  0.920265E-01   8.02972       8.12174    
  58  0.406052     -0.901274     -0.549623      0.549623       8.09118       8.64081    
  59  0.743169     -0.296832     -0.181017      0.181017       8.12653       8.30755    
  60  0.434823     -0.832817     -0.507876      0.507876       8.09327       8.60114    
  61  0.559897     -0.580003     -0.353702      0.353702       8.71362       9.06732    
  62  0.277128      -1.28328     -0.782578      0.782578       8.05958       8.84216    
  63  0.839691     -0.174721     -0.106550      0.106550       8.09102       8.19757    
  64  0.641867     -0.443375     -0.270383      0.270383       8.11627       8.38665    
  65  0.309074      -1.17417     -0.716045      0.716045       8.09050       8.80655    
  66  0.552351     -0.593572     -0.361977      0.361977       8.25932       8.62130    
  67  0.764824     -0.268109     -0.163501      0.163501       8.32632       8.48982    
  68  0.857070     -0.154235     -0.940571E-01  0.940571E-01   8.06768       8.16173    
  69  0.650112     -0.430610     -0.262598      0.262598       8.10621       8.36881    
  70  0.128926      -2.04851      -1.24924       1.24924       8.10077       9.35001    
loop,thermsimp(1:2)       43  0.144831      0.138708    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    223          8.12          0.86          1.13         24.31          0.08          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    224          8.36          0.86          1.12         24.38          0.09          0.05         26.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       43
neval is:      223
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       44
neval is:      223


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      223     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.104987      -2.25392      -1.37451       1.37451       8.02972       9.40422    
   2  0.780131E-01  -2.55088      -1.55560       1.55560       8.03969       9.59529    
   3  0.723689     -0.323394     -0.197215      0.197215       8.00020       8.19741    
   4  0.439896     -0.821218     -0.500802      0.500802       8.10237       8.60317    
   5  0.967364     -0.331803E-01 -0.202343E-01  0.202343E-01   8.11412       8.13436    
   6  0.235884      -1.44441     -0.880845      0.880845       8.06768       8.94852    
   7  0.311956      -1.16489     -0.710386      0.710386       8.10753       8.81791    
   8  0.600573     -0.509870     -0.310934      0.310934       8.09102       8.40195    
   9  0.781739     -0.246234     -0.150161      0.150161       8.12070       8.27086    
  10  0.505036     -0.683126     -0.416590      0.416590       8.06918       8.48577    
  11  0.896130     -0.109670     -0.668800E-01  0.668800E-01   8.11497       8.18185    
  12  0.545040     -0.606897     -0.370103      0.370103       8.13016       8.50027    
  13  0.338019      -1.08465     -0.661453      0.661453       8.08867       8.75012    
  14  0.200467      -1.60711     -0.980060      0.980060       8.17237       9.15243    
  15  0.548763     -0.600089     -0.365951      0.365951       8.10246       8.46841    
  16  0.897241     -0.108431     -0.661242E-01  0.661242E-01   8.11494       8.18106    
  17  0.229905      -1.47009     -0.896502      0.896502       8.10953       9.00603    
  18  0.387828     -0.947193     -0.577626      0.577626       8.09754       8.67516    
  19  0.789400     -0.236482     -0.144214      0.144214       8.12653       8.27075    
  20  0.495667     -0.701851     -0.428009      0.428009       8.10621       8.53422    
  21  0.818926     -0.199761     -0.121820      0.121820       8.11627       8.23809    
  22  0.181319      -1.70750      -1.04128       1.04128       8.10859       9.14987    
  23  0.901986     -0.103156     -0.629077E-01  0.629077E-01   8.06479       8.12770    
  24  0.933790E-01  -2.37109      -1.44596       1.44596       8.09048       9.53643    
  25  0.171523      -1.76304      -1.07515       1.07515       8.04862       9.12377    
  26  0.648450     -0.433170     -0.264159      0.264159       8.09139       8.35555    
  27  0.777448     -0.251739     -0.153517      0.153517       8.09541       8.24893    
  28  0.777670     -0.251453     -0.153343      0.153343       8.02986       8.18320    
  29  0.972420     -0.279672E-01 -0.170552E-01  0.170552E-01   8.20225       8.21931    
  30  0.825305     -0.192002     -0.117088      0.117088       8.32632       8.44341    
  31  0.470649     -0.753642     -0.459592      0.459592       8.10206       8.56165    
  32  0.263953      -1.33198     -0.812281      0.812281       8.10547       8.91775    
  33  0.857551     -0.153675     -0.937155E-01  0.937155E-01   8.06856       8.16227    
  34  0.950157     -0.511279E-01 -0.311792E-01  0.311792E-01   8.07678       8.10796    
  35  0.866482     -0.143314     -0.873969E-01  0.873969E-01   8.22182       8.30922    
  36  0.904889     -0.999433E-01 -0.609483E-01  0.609483E-01   8.20747       8.26842    
  37  0.297565      -1.21212     -0.739187      0.739187       8.05853       8.79772    
  38  0.902696     -0.102369     -0.624277E-01  0.624277E-01   8.35386       8.41628    
  39  0.800054     -0.223076     -0.136038      0.136038       8.09327       8.22931    
  40  0.534162     -0.627057     -0.382397      0.382397       8.25932       8.64172    
  41  0.593018     -0.522530     -0.318654      0.318654       8.14970       8.46835    
  42  0.682417E-01  -2.68470      -1.63721       1.63721       8.09118       9.72839    
  43  0.336048      -1.09050     -0.665019      0.665019       8.07122       8.73624    
  44  0.576540     -0.550710     -0.335839      0.335839       8.09862       8.43446    
  45  0.217955      -1.52347     -0.929054      0.929054       8.10022       9.02927    
  46  0.281607      -1.26724     -0.772800      0.772800       8.24674       9.01954    
  47  0.306631      -1.18211     -0.720884      0.720884       8.09050       8.81139    
  48  0.676335E-01  -2.69365      -1.64267       1.64267       8.06512       9.70779    
  49  0.145631      -1.92668      -1.17494       1.17494       8.05958       9.23452    
  50  0.820952     -0.197291     -0.120314      0.120314       8.11426       8.23458    
  51  0.224137      -1.49550     -0.911997      0.911997       8.15194       9.06394    
  52  0.738282     -0.303430     -0.185040      0.185040       8.09096       8.27600    
  53  0.364089      -1.01036     -0.616144      0.616144       8.01090       8.62704    
  54  0.321068      -1.13610     -0.692827      0.692827       8.71362       9.40645    
  55  0.179504      -1.71756      -1.04742       1.04742       8.06810       9.11552    
  56  0.808596     -0.212456     -0.129562      0.129562       8.16632       8.29588    
  57  0.974692     -0.256343E-01 -0.156325E-01  0.156325E-01   8.32928       8.34491    
  58  0.559434     -0.580830     -0.354207      0.354207       8.04995       8.40415    
  59  0.443035E-01  -3.11669      -1.90065       1.90065       8.08929       9.98993    
  60  0.711672     -0.340139     -0.207426      0.207426       8.12933       8.33676    
  61  0.578255     -0.547741     -0.334028      0.334028       8.19746       8.53149    
  62  0.102770      -2.27527      -1.38752       1.38752       8.10077       9.48829    
  63  0.813100     -0.206901     -0.126174      0.126174       8.15023       8.27641    
  64  0.612419     -0.490339     -0.299023      0.299023       8.11383       8.41285    
  65  0.406120     -0.901107     -0.549521      0.549521       8.62600       9.17552    
  66  0.255858      -1.36313     -0.831278      0.831278       8.59370       9.42498    
  67  0.622680     -0.473723     -0.288890      0.288890       8.09605       8.38494    
  68  0.428339     -0.847839     -0.517037      0.517037       8.06063       8.57767    
  69  0.594560     -0.519934     -0.317071      0.317071       8.11654       8.43361    
  70  0.921341     -0.819246E-01 -0.499600E-01  0.499600E-01   8.11727       8.16723    
loop,thermsimp(1:2)       44   1.37451       1.55560    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    225          8.25          0.86          1.12         24.47          0.07          0.05         26.58
Just calling func    0   0         26.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    226         10.81          0.87          1.13         24.64          0.09          0.05         26.79
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.25
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       44
neval is:      225
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       45
neval is:      225


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      225     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.872614     -0.136261     -0.830961E-01  0.830961E-01   8.07678       8.15988    
   2  0.990306     -0.974175E-02 -0.594080E-02  0.594080E-02   8.06479       8.07073    
   3  0.488656     -0.716096     -0.436696      0.436696       8.11412       8.55082    
   4  0.865115E-01  -2.44748      -1.49254       1.49254       8.06856       9.56110    
   5  0.234262      -1.45132     -0.885055      0.885055       8.11727       9.00232    
   6  0.906541     -0.981186E-01 -0.598355E-01  0.598355E-01   8.11494       8.17477    
   7  0.680454     -0.384995     -0.234781      0.234781       8.11497       8.34975    
   8  0.575574     -0.552388     -0.336862      0.336862       8.02986       8.36672    
   9  0.537443E-02  -5.22610      -3.18703       3.18703       8.00020       11.1872    
  10  0.421676     -0.863518     -0.526598      0.526598       8.20225       8.72885    
  11  0.297588      -1.21204     -0.739139      0.739139       8.09327       8.83241    
  12  0.119337      -2.12581      -1.29638       1.29638       8.11426       9.41064    
  13  0.958276     -0.426192E-01 -0.259904E-01  0.259904E-01   8.11627       8.14226    
  14  0.115549      -2.15806      -1.31605       1.31605       8.09541       9.41146    
  15  0.104220      -2.26125      -1.37898       1.37898       8.20747       9.58645    
  16  0.719503     -0.329194     -0.200752      0.200752       8.12653       8.32728    
  17  0.875656     -0.132782     -0.809741E-01  0.809741E-01   8.12070       8.20167    
  18  0.578760     -0.546868     -0.333496      0.333496       8.09096       8.42446    
  19  0.923704     -0.793639E-01 -0.483984E-01  0.483984E-01   8.15023       8.19863    
  20  0.457980     -0.780930     -0.476233      0.476233       8.16632       8.64255    
  21  0.783173     -0.244401     -0.149043      0.149043       8.22182       8.37086    
  22  0.764479     -0.268561     -0.163776      0.163776       8.12933       8.29311    
  23  0.496891     -0.699384     -0.426505      0.426505       8.32928       8.75578    
  24  0.554859     -0.589041     -0.359214      0.359214       8.09139       8.45060    
  25  0.734503E-02  -4.91373      -2.99653       2.99653       8.09605       11.0926    
  26  0.117643      -2.14010      -1.30510       1.30510       8.09102       9.39611    
  27  0.145440      -1.92799      -1.17574       1.17574       8.04995       9.22569    
  28  0.375449     -0.979633     -0.597408      0.597408       8.11383       8.71123    
  29  0.954324E-01  -2.34934      -1.43269       1.43269       8.35386       9.78655    
  30  0.449085     -0.800543     -0.488194      0.488194       8.11654       8.60473    
  31  0.354483      -1.03709     -0.632450      0.632450       8.09862       8.73107    
  32  0.153971      -1.87099      -1.14098       1.14098       8.32632       9.46730    
  33  0.871598     -0.137427     -0.838067E-01  0.838067E-01   8.14970       8.23350    
  34  0.633061     -0.457188     -0.278806      0.278806       8.10246       8.38126    
  35  0.947022E-01  -2.35702      -1.43738       1.43738       8.06918       9.50656    
  36  0.793812     -0.230909     -0.140815      0.140815       8.13016       8.27098    
  37  0.760585     -0.273667     -0.166890      0.166890       8.19746       8.36435    
  38  0.124312      -2.08496      -1.27147       1.27147       8.10621       9.37768    
  39  0.961605E-03  -6.94691      -4.23642       4.23642       8.10206       12.3385    
  40  0.672529     -0.396710     -0.241925      0.241925       8.06063       8.30255    
  41  0.749847E-01  -2.59047      -1.57974       1.57974       8.10237       9.68211    
  42  0.982441     -0.177147E-01 -0.108029E-01  0.108029E-01   8.01090       8.02170    
  43  0.340727      -1.07667     -0.656586      0.656586       8.25932       8.91591    
  44  0.915043     -0.887846E-01 -0.541434E-01  0.541434E-01   8.09754       8.15168    
  45  0.150614      -1.89303      -1.15443       1.15443       8.07122       9.22565    
  46  0.892785     -0.113409     -0.691601E-01  0.691601E-01   8.08867       8.15783    
  47  0.844073     -0.169516     -0.103376      0.103376       8.05853       8.16190    
  48  0.469949     -0.755131     -0.460501      0.460501       8.09050       8.55100    
  49  0.389072     -0.943991     -0.575673      0.575673       8.10753       8.68320    
  50  0.738049     -0.303745     -0.185232      0.185232       8.10547       8.29071    
  51  0.250173      -1.38560     -0.844981      0.844981       8.06768       8.91266    
  52  0.383245     -0.959081     -0.584875      0.584875       8.10953       8.69440    
  53  0.384434     -0.955983     -0.582986      0.582986       8.24674       8.82972    
  54  0.479018E-01  -3.03860      -1.85303       1.85303       8.10022       9.95325    
  55  0.819285     -0.199323     -0.121553      0.121553       8.15194       8.27349    
  56  0.568165     -0.565344     -0.344763      0.344763       8.06810       8.41286    
  57  0.918732     -0.847606E-01 -0.516894E-01  0.516894E-01   8.04862       8.10031    
  58  0.374258     -0.982809     -0.599345      0.599345       8.10859       8.70794    
  59  0.966524     -0.340496E-01 -0.207644E-01  0.207644E-01   8.17237       8.19314    
  60  0.505261     -0.682680     -0.416318      0.416318       8.62600       9.04231    
  61  0.283819      -1.25942     -0.768029      0.768029       8.05958       8.82761    
  62  0.448920     -0.800911     -0.488418      0.488418       8.02972       8.51813    
  63  0.398648     -0.919676     -0.560845      0.560845       8.71362       9.27447    
  64  0.625742     -0.468817     -0.285898      0.285898       8.59370       8.87960    
  65  0.924606     -0.783881E-01 -0.478033E-01  0.478033E-01   8.10077       8.14858    
  66  0.546966     -0.603368     -0.367951      0.367951       8.09048       8.45843    
  67  0.372518     -0.987471     -0.602188      0.602188       8.03969       8.64188    
  68  0.167437      -1.78715      -1.08985       1.08985       8.06512       9.15498    
  69  0.142610      -1.94764      -1.18773       1.18773       8.09118       9.27891    
  70  0.935319     -0.668675E-01 -0.407777E-01  0.407777E-01   8.24941       8.29019    
loop,thermsimp(1:2)       45  0.830961E-01  0.594080E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    227          8.10          0.87          1.12         24.37          0.08          0.05         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    228          8.34          0.86          1.12         24.39          0.09          0.05         26.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       45
neval is:      227
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       46
neval is:      227


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      227     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.880559E-01  -2.42978      -1.48175       1.48175       8.01090       9.49265    
   2  0.312747      -1.16236     -0.708842      0.708842       8.06479       8.77363    
   3  0.317683      -1.14670     -0.699291      0.699291       8.04862       8.74791    
   4  0.693053     -0.366649     -0.223593      0.223593       8.11627       8.33986    
   5  0.361881      -1.01644     -0.619854      0.619854       8.10077       8.72063    
   6  0.127478      -2.05981      -1.25613       1.25613       8.09754       9.35367    
   7  0.718706     -0.330302     -0.201428      0.201428       8.08867       8.29010    
   8  0.609419E-01  -2.79783      -1.70620       1.70620       8.07678       9.78298    
   9  0.320798      -1.13695     -0.693342      0.693342       8.05853       8.75187    
  10  0.343503      -1.06856     -0.651638      0.651638       8.11494       8.76657    
  11  0.671828     -0.397753     -0.242561      0.242561       8.17237       8.41493    
  12  0.616702     -0.483369     -0.294773      0.294773       8.15023       8.44501    
  13  0.806358E-01  -2.51781      -1.53543       1.53543       8.12070       9.65613    
  14  0.997284     -0.271972E-02 -0.165857E-02  0.165857E-02   8.14970       8.15135    
  15  0.554344     -0.589969     -0.359780      0.359780       8.13016       8.48994    
  16  0.411057     -0.889023     -0.542152      0.542152       8.15194       8.69409    
  17  0.846258E-01  -2.46952      -1.50598       1.50598       8.24941       9.75539    
  18  0.737439     -0.304571     -0.185736      0.185736       8.10547       8.29121    
  19  0.393790     -0.931939     -0.568323      0.568323       8.12933       8.69766    
  20  0.965947     -0.346467E-01 -0.211285E-01  0.211285E-01   8.06063       8.08176    
  21  0.150166      -1.89601      -1.15624       1.15624       8.12653       9.28277    
  22  0.212005      -1.55114     -0.945933      0.945933       8.11497       9.06091    
  23  0.615060     -0.486036     -0.296399      0.296399       8.19746       8.49386    
  24  0.382142     -0.961962     -0.586632      0.586632       8.02986       8.61649    
  25  0.249044      -1.39013     -0.847740      0.847740       8.22182       9.06956    
  26  0.245943      -1.40266     -0.855380      0.855380       8.10246       8.95784    
  27  0.108882      -2.21749      -1.35229       1.35229       8.06810       9.42039    
  28  0.199835      -1.61026     -0.981985      0.981985       8.09096       9.07295    
  29  0.863954     -0.146235     -0.891786E-01  0.891786E-01   8.09139       8.18057    
  30  0.392842     -0.934347     -0.569791      0.569791       8.09048       8.66027    
  31  0.770596     -0.260592     -0.158916      0.158916       8.02972       8.18863    
  32  0.149868      -1.89800      -1.15746       1.15746       8.11412       9.27158    
  33  0.234154      -1.45178     -0.885334      0.885334       8.09050       8.97583    
  34  0.611512     -0.491821     -0.299926      0.299926       8.11654       8.41646    
  35  0.518093E-01  -2.96019      -1.80521       1.80521       8.03969       9.84489    
  36  0.567953     -0.565716     -0.344990      0.344990       8.16632       8.51131    
  37  0.190847      -1.65628      -1.01005       1.01005       8.10753       9.11758    
  38  0.104561      -2.25798      -1.37698       1.37698       8.10953       9.48651    
  39  0.135276      -2.00044      -1.21992       1.21992       8.10859       9.32852    
  40  0.262364      -1.33802     -0.815965      0.815965       8.11383       8.92979    
  41  0.463951     -0.767976     -0.468334      0.468334       8.20225       8.67058    
  42  0.419672     -0.868282     -0.529503      0.529503       8.09862       8.62813    
  43  0.897011     -0.108687     -0.662803E-01  0.662803E-01   8.32928       8.39556    
  44  0.818933     -0.199754     -0.121815      0.121815       8.05958       8.18139    
  45  0.136906      -1.98846      -1.21262       1.21262       8.24674       9.45936    
  46  0.561722     -0.576748     -0.351717      0.351717       8.09327       8.44498    
  47  0.991681     -0.835368E-02 -0.509432E-02  0.509432E-02   8.59370       8.59879    
  48  0.653388     -0.425585     -0.259534      0.259534       8.06768       8.32721    
  49  0.578557     -0.547219     -0.333710      0.333710       8.25932       8.59303    
  50  0.784121     -0.243191     -0.148305      0.148305       8.11727       8.26557    
  51  0.827307     -0.189579     -0.115611      0.115611       8.62600       8.74161    
  52  0.994261     -0.575522E-02 -0.350970E-02  0.350970E-02   8.06512       8.06863    
  53  0.274030      -1.29452     -0.789434      0.789434       8.07122       8.86066    
  54  0.879777     -0.128087     -0.781108E-01  0.781108E-01   8.04995       8.12806    
  55  0.694576E-01  -2.66704      -1.62644       1.62644       8.71362       10.3401    
  56  0.431517E-01  -3.14303      -1.91671       1.91671       8.09118       10.0079    
  57  0.620633     -0.477015     -0.290898      0.290898       8.10621       8.39711    
  58  0.166702      -1.79155      -1.09254       1.09254       8.09102       9.18355    
  59  0.785136E-01  -2.54448      -1.55170       1.55170       8.11426       9.66596    
  60  0.440162     -0.820613     -0.500434      0.500434       8.09541       8.59585    
  61  0.924092     -0.789432E-01 -0.481418E-01  0.481418E-01   8.32632       8.37446    
  62  0.957397     -0.435372E-01 -0.265503E-01  0.265503E-01   8.06918       8.09573    
  63  0.817312     -0.201734     -0.123023      0.123023       8.06856       8.19158    
  64  0.345978      -1.06138     -0.647259      0.647259       8.20747       8.85473    
  65  0.814305E-02  -4.81059      -2.93364       2.93364       8.10237       11.0360    
  66  0.961102     -0.396751E-01 -0.241950E-01  0.241950E-01   8.35386       8.37805    
  67  0.918841E-01  -2.38723      -1.45580       1.45580       8.10022       9.55602    
  68  0.875898     -0.132506     -0.808058E-01  0.808058E-01   8.09605       8.17686    
  69  0.884301     -0.122958     -0.749834E-01  0.749834E-01   8.00020       8.07518    
  70  0.822040E-01  -2.49855      -1.52369       1.52369       8.09927       9.62296    
loop,thermsimp(1:2)       46   1.48175      0.708842    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    229          8.08          0.86          1.13         24.33          0.07          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    230          8.12          0.86          1.13         24.34          0.09          0.04         26.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       46
neval is:      229
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       47
neval is:      229


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      229     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.419083E-01  -3.17227      -1.93454       1.93454       8.06512       9.99967    
   2  0.581082     -0.542864     -0.331054      0.331054       8.00020       8.33125    
   3  0.690143     -0.370857     -0.226159      0.226159       8.06063       8.28679    
   4  0.958690     -0.421877E-01 -0.257272E-01  0.257272E-01   8.06918       8.09491    
   5  0.947492     -0.539367E-01 -0.328922E-01  0.328922E-01   8.04995       8.08284    
   6  0.253816E-01  -3.67373      -2.24035       2.24035       8.14970       10.3900    
   7  0.811950     -0.208316     -0.127037      0.127037       8.09605       8.22309    
   8  0.448512     -0.801821     -0.488973      0.488973       8.09139       8.58036    
   9  0.625244     -0.469613     -0.286384      0.286384       8.05958       8.34596    
  10  0.557627     -0.584065     -0.356180      0.356180       8.02972       8.38590    
  11  0.762657     -0.270947     -0.165231      0.165231       8.06856       8.23379    
  12  0.579328     -0.545887     -0.332897      0.332897       8.11727       8.45016    
  13  0.168395      -1.78144      -1.08638       1.08638       8.08867       9.17504    
  14  0.993282     -0.674111E-02 -0.411092E-02  0.411092E-02   8.10547       8.10958    
  15  0.573458     -0.556070     -0.339108      0.339108       8.06768       8.40678    
  16  0.900456     -0.104854     -0.639427E-01  0.639427E-01   8.11627       8.18021    
  17  0.961937     -0.388068E-01 -0.236655E-01  0.236655E-01   8.32632       8.34998    
  18  0.685702     -0.377312     -0.230096      0.230096       8.35386       8.58395    
  19  0.335644      -1.09171     -0.665753      0.665753       8.32928       8.99503    
  20  0.726392     -0.319666     -0.194941      0.194941       8.10621       8.30115    
  21  0.523515     -0.647189     -0.394674      0.394674       8.17237       8.56705    
  22  0.877914     -0.130206     -0.794036E-01  0.794036E-01   8.11654       8.19594    
  23  0.893563     -0.112539     -0.686295E-01  0.686295E-01   8.09327       8.16190    
  24  0.829449     -0.186994     -0.114034      0.114034       8.15023       8.26427    
  25  0.454457     -0.788653     -0.480943      0.480943       8.13016       8.61111    
  26  0.261407      -1.34168     -0.818193      0.818193       8.19746       9.01566    
  27  0.144225      -1.93638      -1.18086       1.18086       8.16632       9.34718    
  28  0.963744     -0.369299E-01 -0.225209E-01  0.225209E-01   8.25932       8.28184    
  29  0.267843      -1.31735     -0.803361      0.803361       8.09541       8.89877    
  30  0.251943E-01  -3.68114      -2.24486       2.24486       8.59370       10.8386    
  31  0.321532      -1.13466     -0.691947      0.691947       8.02986       8.72180    
  32  0.440903     -0.818930     -0.499407      0.499407       8.09862       8.59803    
  33  0.214416      -1.53984     -0.939038      0.939038       8.09048       9.02951    
  34  0.212185      -1.55030     -0.945417      0.945417       8.20225       9.14767    
  35  0.948253E-01  -2.35572      -1.43659       1.43659       8.15194       9.58853    
  36  0.507627     -0.678008     -0.413469      0.413469       8.12933       8.54280    
  37  0.415074     -0.879299     -0.536222      0.536222       8.10077       8.63699    
  38  0.768069     -0.263876     -0.160919      0.160919       8.62600       8.78692    
  39  0.462999E-01  -3.07261      -1.87377       1.87377       8.04862       9.92239    
  40  0.835390     -0.179856     -0.109682      0.109682       8.05853       8.16821    
  41  0.678734     -0.387526     -0.236325      0.236325       8.11494       8.35126    
  42  0.363569      -1.01179     -0.617016      0.617016       8.06479       8.68181    
  43  0.677161     -0.389846     -0.237739      0.237739       8.20747       8.44521    
  44  0.506668     -0.679899     -0.414622      0.414622       8.07122       8.48584    
  45  0.875658     -0.132779     -0.809725E-01  0.809725E-01   8.11383       8.19480    
  46  0.924863     -0.781102E-01 -0.476338E-01  0.476338E-01   8.10246       8.15009    
  47  0.794570E-01  -2.53254      -1.54442       1.54442       8.09050       9.63492    
  48  0.449212     -0.800261     -0.488022      0.488022       8.11497       8.60300    
  49  0.658987     -0.417051     -0.254330      0.254330       8.22182       8.47615    
  50  0.674357     -0.393995     -0.240270      0.240270       8.09096       8.33123    
  51  0.436334     -0.829348     -0.505760      0.505760       8.10753       8.61329    
  52  0.331871      -1.10301     -0.672646      0.672646       8.09102       8.76366    
  53  0.233029      -1.45659     -0.888273      0.888273       8.11412       9.00240    
  54  0.207666      -1.57183     -0.958545      0.958545       8.12653       9.08508    
  55  0.801765     -0.220940     -0.134736      0.134736       8.10859       8.24333    
  56  0.614336E-01  -2.78980      -1.70130       1.70130       8.09754       9.79884    
  57  0.167288      -1.78804      -1.09040       1.09040       8.06810       9.15850    
  58  0.718808     -0.330162     -0.201342      0.201342       8.24674       8.44808    
  59  0.981938     -0.182272E-01 -0.111155E-01  0.111155E-01   8.10953       8.12064    
  60  0.759328     -0.275322     -0.167899      0.167899       8.01090       8.17880    
  61  0.290749      -1.23530     -0.753319      0.753319       8.10022       8.85354    
  62  0.887200     -0.119685     -0.729874E-01  0.729874E-01   8.09927       8.17226    
  63  0.186280      -1.68051      -1.02482       1.02482       8.12070       9.14552    
  64  0.427708     -0.849315     -0.517937      0.517937       8.11426       8.63220    
  65  0.252777      -1.37525     -0.838666      0.838666       8.24941       9.08808    
  66  0.648648     -0.432865     -0.263973      0.263973       8.07678       8.34076    
  67  0.823358     -0.194364     -0.118529      0.118529       8.03969       8.15822    
  68  0.352572      -1.04250     -0.635747      0.635747       8.09118       8.72693    
  69  0.217910      -1.52367     -0.929179      0.929179       8.71362       9.64280    
  70  0.297394      -1.21270     -0.739539      0.739539       8.08374       8.82328    
loop,thermsimp(1:2)       47   1.93454      0.331054    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    231          8.19          0.86          1.13         24.35          0.07          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    232          8.98          0.86          1.13         24.32          0.09          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       47
neval is:      231
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       48
neval is:      231


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      231     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.566816     -0.567720     -0.346212      0.346212       8.04995       8.39616    
   2  0.216137      -1.53184     -0.934161      0.934161       8.06918       9.00335    
   3  0.476425     -0.741444     -0.452154      0.452154       8.10547       8.55763    
   4  0.184047      -1.69256      -1.03217       1.03217       8.10953       9.14170    
   5  0.722630     -0.324858     -0.198108      0.198108       8.10246       8.30056    
   6  0.887750     -0.119065     -0.726092E-01  0.726092E-01   8.03969       8.11230    
   7  0.236344      -1.44247     -0.879658      0.879658       8.09327       8.97293    
   8  0.798055     -0.225578     -0.137564      0.137564       8.05853       8.19609    
   9  0.425454     -0.854597     -0.521158      0.521158       8.09927       8.62043    
  10  0.605701     -0.501368     -0.305749      0.305749       8.01090       8.31665    
  11  0.742456     -0.297792     -0.181602      0.181602       8.11627       8.29787    
  12  0.378462E-01  -3.27423      -1.99672       1.99672       8.11383       10.1105    
  13  0.341910      -1.07321     -0.654473      0.654473       8.11654       8.77101    
  14  0.794971E-01  -2.53203      -1.54411       1.54411       8.09605       9.64016    
  15  0.586423     -0.533715     -0.325475      0.325475       8.06856       8.39403    
  16  0.990523     -0.952170E-02 -0.580661E-02  0.580661E-02   8.10859       8.11440    
  17  0.348475      -1.05419     -0.642874      0.642874       8.15023       8.79311    
  18  0.998034     -0.196755E-02 -0.119987E-02  0.119987E-02   8.25932       8.26052    
  19  0.616072     -0.484391     -0.295396      0.295396       8.06063       8.35602    
  20  0.427239     -0.850411     -0.518605      0.518605       8.10621       8.62482    
  21  0.598160     -0.513898     -0.313389      0.313389       8.09096       8.40435    
  22  0.642831     -0.441873     -0.269467      0.269467       8.00020       8.26967    
  23  0.392766     -0.934541     -0.569910      0.569910       8.07678       8.64669    
  24  0.738407     -0.303260     -0.184937      0.184937       8.05958       8.24452    
  25  0.334341      -1.09559     -0.668124      0.668124       8.32632       8.99444    
  26  0.997912     -0.208996E-02 -0.127452E-02  0.127452E-02   8.11494       8.11621    
  27  0.492305E-01  -3.01124      -1.83634       1.83634       8.02972       9.86606    
  28  0.304734      -1.18832     -0.724669      0.724669       8.06768       8.79234    
  29  0.159886      -1.83330      -1.11800       1.11800       8.20747       9.32546    
  30  0.991331     -0.870666E-02 -0.530957E-02  0.530957E-02   8.24674       8.25205    
  31  0.735164     -0.307662     -0.187621      0.187621       8.11727       8.30489    
  32  0.279948      -1.27315     -0.776404      0.776404       8.22182       8.99823    
  33  0.457260     -0.782502     -0.477192      0.477192       8.07122       8.54841    
  34  0.678170     -0.388358     -0.236832      0.236832       8.12933       8.36617    
  35  0.689603     -0.371639     -0.226636      0.226636       8.17237       8.39901    
  36  0.468470     -0.758283     -0.462423      0.462423       8.09139       8.55381    
  37  0.937429     -0.646141E-01 -0.394035E-01  0.394035E-01   8.35386       8.39326    
  38  0.115915      -2.15490      -1.31412       1.31412       8.09862       9.41274    
  39  0.125789      -2.07315      -1.26426       1.26426       8.11497       9.37924    
  40  0.137562      -1.98368      -1.20971       1.20971       8.13016       9.33987    
  41  0.273901      -1.29499     -0.789720      0.789720       8.10753       8.89725    
  42  0.934963     -0.672484E-01 -0.410100E-01  0.410100E-01   8.11426       8.15527    
  43  0.450296     -0.797850     -0.486552      0.486552       8.10077       8.58732    
  44  0.681645     -0.383246     -0.233714      0.233714       8.06479       8.29851    
  45  0.282914E-01  -3.56520      -2.17416       2.17416       8.02986       10.2040    
  46  0.962226     -0.385062E-01 -0.234822E-01  0.234822E-01   8.09118       8.11467    
  47  0.771412     -0.259533     -0.158270      0.158270       8.09102       8.24929    
  48  0.778208     -0.250761     -0.152922      0.152922       8.62600       8.77892    
  49  0.945686     -0.558450E-01 -0.340559E-01  0.340559E-01   8.08374       8.11780    
  50  0.648669     -0.432833     -0.263954      0.263954       8.10022       8.36417    
  51  0.214283      -1.54046     -0.939414      0.939414       8.09541       9.03483    
  52  0.692999     -0.366726     -0.223640      0.223640       8.32928       8.55292    
  53  0.966323     -0.342573E-01 -0.208911E-01  0.208911E-01   8.11412       8.13501    
  54  0.975007     -0.253104E-01 -0.154350E-01  0.154350E-01   8.19746       8.21290    
  55  0.947991E-01  -2.35600      -1.43675       1.43675       8.09048       9.52723    
  56  0.195092      -1.63429     -0.996634      0.996634       8.12653       9.12317    
  57  0.459282     -0.778091     -0.474502      0.474502       8.24941       8.72391    
  58  0.563954     -0.572782     -0.349299      0.349299       8.12070       8.47000    
  59  0.482884     -0.727978     -0.443942      0.443942       8.20225       8.64619    
  60  0.270357      -1.30801     -0.797664      0.797664       8.06810       8.86576    
  61  0.184282      -1.69129      -1.03139       1.03139       8.08867       9.12006    
  62  0.486455     -0.720611     -0.439449      0.439449       8.16632       8.60577    
  63  0.348603      -1.05382     -0.642651      0.642651       8.15194       8.79459    
  64  0.556175     -0.586673     -0.357770      0.357770       8.09050       8.44827    
  65  0.125277      -2.07723      -1.26675       1.26675       8.71362       9.98037    
  66  0.473622     -0.747346     -0.455753      0.455753       8.09754       8.55329    
  67  0.762738     -0.270841     -0.165167      0.165167       8.04862       8.21378    
  68  0.898920     -0.106561     -0.649841E-01  0.649841E-01   8.06512       8.13011    
  69  0.646772E-01  -2.73835      -1.66992       1.66992       8.14970       9.81962    
  70  0.303985      -1.19078     -0.726170      0.726170       8.18877       8.91494    
loop,thermsimp(1:2)       48  0.346212      0.934161    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    233          8.19          0.87          1.13         24.42          0.07          0.05         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    234          9.52          0.86          1.14         24.35          0.04          0.05         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       48
neval is:      233
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       49
neval is:      233


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      233     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.180970      -1.70942      -1.04245       1.04245       8.03969       9.08214    
   2  0.335083      -1.09338     -0.666773      0.666773       8.10859       8.77536    
   3  0.585160     -0.535871     -0.326789      0.326789       8.09118       8.41797    
   4  0.445729     -0.808044     -0.492768      0.492768       8.11494       8.60770    
   5  0.963605     -0.370741E-01 -0.226088E-01  0.226088E-01   8.08374       8.10635    
   6  0.538074     -0.619758     -0.377946      0.377946       8.06512       8.44307    
   7  0.971443     -0.289729E-01 -0.176685E-01  0.176685E-01   8.11412       8.13179    
   8  0.817136     -0.201950     -0.123155      0.123155       8.11426       8.23742    
   9  0.216943      -1.52812     -0.931893      0.931893       8.05853       8.99042    
  10  0.572311     -0.558074     -0.340329      0.340329       8.19746       8.53779    
  11  0.511761     -0.669897     -0.408522      0.408522       8.04862       8.45714    
  12  0.331920E-01  -3.40545      -2.07674       2.07674       8.05958       10.1363    
  13  0.662680     -0.411462     -0.250922      0.250922       8.09102       8.34194    
  14  0.578679     -0.547007     -0.333580      0.333580       8.24674       8.58032    
  15  0.473979     -0.746592     -0.455293      0.455293       8.25932       8.71461    
  16  0.243750      -1.41161     -0.860842      0.860842       8.00020       8.86104    
  17  0.784227     -0.243057     -0.148223      0.148223       8.11627       8.26449    
  18  0.215065      -1.53682     -0.937194      0.937194       8.06479       9.00199    
  19  0.813272     -0.206689     -0.126045      0.126045       8.10246       8.22850    
  20  0.877336     -0.130865     -0.798053E-01  0.798053E-01   8.11727       8.19707    
  21  0.911070     -0.931357E-01 -0.567968E-01  0.567968E-01   8.01090       8.06770    
  22  0.424500     -0.856844     -0.522528      0.522528       8.06063       8.58316    
  23  0.122508      -2.09958      -1.28038       1.28038       8.10022       9.38060    
  24  0.173199      -1.75331      -1.06922       1.06922       8.12933       9.19856    
  25  0.243010      -1.41465     -0.862696      0.862696       8.35386       9.21655    
  26  0.618804     -0.479966     -0.292697      0.292697       8.06856       8.36125    
  27  0.365303      -1.00703     -0.614114      0.614114       8.04995       8.66406    
  28  0.178054      -1.72567      -1.05236       1.05236       8.17237       9.22473    
  29  0.416122     -0.876776     -0.534683      0.534683       8.09096       8.62565    
  30  0.789287     -0.236625     -0.144301      0.144301       8.09050       8.23480    
  31  0.786736     -0.239863     -0.146275      0.146275       8.12070       8.26697    
  32  0.295880      -1.21780     -0.742649      0.742649       8.07122       8.81387    
  33  0.418649     -0.870722     -0.530991      0.530991       8.32928       8.86027    
  34  0.706992     -0.346736     -0.211449      0.211449       8.09754       8.30899    
  35  0.281863      -1.26633     -0.772246      0.772246       8.09139       8.86364    
  36  0.357290      -1.02921     -0.627641      0.627641       8.10547       8.73311    
  37  0.174180      -1.74767      -1.06578       1.06578       8.10077       9.16655    
  38  0.190924      -1.65588      -1.00980       1.00980       8.16632       9.17612    
  39  0.630369     -0.461449     -0.281405      0.281405       8.09927       8.38068    
  40  0.252261      -1.37729     -0.839912      0.839912       8.10621       8.94612    
  41  0.359213      -1.02384     -0.624368      0.624368       8.20225       8.82662    
  42  0.740344     -0.300640     -0.183339      0.183339       8.07678       8.26012    
  43  0.283211      -1.26156     -0.769338      0.769338       8.24941       9.01875    
  44  0.965119     -0.355039E-01 -0.216513E-01  0.216513E-01   8.11654       8.13819    
  45  0.389600     -0.942634     -0.574845      0.574845       8.62600       9.20084    
  46  0.598383     -0.513525     -0.313162      0.313162       8.06768       8.38084    
  47  0.631795     -0.459190     -0.280028      0.280028       8.15023       8.43026    
  48  0.997460     -0.254363E-02 -0.155118E-02  0.155118E-02   8.15194       8.15349    
  49  0.192532      -1.64749      -1.00469       1.00469       8.06810       9.07279    
  50  0.769348     -0.262212     -0.159904      0.159904       8.10753       8.26743    
  51  0.740745     -0.300099     -0.183009      0.183009       8.18877       8.37178    
  52  0.590587     -0.526639     -0.321160      0.321160       8.09327       8.41443    
  53  0.628310E-01  -2.76731      -1.68758       1.68758       8.32632       10.0139    
  54  0.515529     -0.662562     -0.404049      0.404049       8.22182       8.62587    
  55  0.306025      -1.18409     -0.722091      0.722091       8.06918       8.79128    
  56  0.686790     -0.375726     -0.229129      0.229129       8.09541       8.32454    
  57  0.357910      -1.02747     -0.626584      0.626584       8.08867       8.71525    
  58  0.267469      -1.31875     -0.804212      0.804212       8.12653       8.93074    
  59  0.410193     -0.891128     -0.543435      0.543435       8.10953       8.65296    
  60  0.490314     -0.712709     -0.434630      0.434630       8.20747       8.64210    
  61  0.395217     -0.928320     -0.566116      0.566116       8.13016       8.69628    
  62  0.641491E-01  -2.74655      -1.67492       1.67492       8.11497       9.78990    
  63  0.610173     -0.494012     -0.301263      0.301263       8.09862       8.39989    
  64  0.657523     -0.419276     -0.255686      0.255686       8.09048       8.34616    
  65  0.172961      -1.75469      -1.07006       1.07006       8.09605       9.16611    
  66  0.166793      -1.79100      -1.09220       1.09220       8.14970       9.24190    
  67  0.184181      -1.69184      -1.03173       1.03173       8.02972       9.06145    
  68  0.728490     -0.316781     -0.193182      0.193182       8.71362       8.90680    
  69  0.307541      -1.17915     -0.719077      0.719077       8.11383       8.83290    
  70  0.929000     -0.736468E-01 -0.449119E-01  0.449119E-01   8.18610       8.23101    
loop,thermsimp(1:2)       49   1.04245      0.666773    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    235          8.07          0.87          1.13         24.72          0.07          0.05         26.83
Just calling func    0   0         26.83


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    236          8.70          0.87          1.10         24.52          0.05          0.05         26.59
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       49
neval is:      235
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       50
neval is:      235


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      235     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.317228E-01  -3.45072      -2.10435       2.10435       8.01090       10.1152    
   2  0.601445     -0.508421     -0.310050      0.310050       8.08374       8.39379    
   3  0.651191     -0.428952     -0.261587      0.261587       8.11412       8.37571    
   4  0.187303      -1.67503      -1.02148       1.02148       8.11654       9.13802    
   5  0.664603     -0.408566     -0.249155      0.249155       8.15194       8.40110    
   6  0.945236     -0.563208E-01 -0.343460E-01  0.343460E-01   8.11727       8.15161    
   7  0.865870     -0.144020     -0.878275E-01  0.878275E-01   8.10246       8.19028    
   8  0.674117     -0.394351     -0.240487      0.240487       8.18610       8.42659    
   9  0.959689E-01  -2.34373      -1.42927       1.42927       8.09050       9.51978    
  10  0.663337     -0.410472     -0.250317      0.250317       8.11426       8.36458    
  11  0.384854     -0.954891     -0.582320      0.582320       8.07678       8.65910    
  12  0.892338     -0.113910     -0.694658E-01  0.694658E-01   8.11627       8.18573    
  13  0.470837     -0.753243     -0.459349      0.459349       8.12070       8.58005    
  14  0.262618      -1.33706     -0.815375      0.815375       8.10753       8.92290    
  15  0.877143     -0.131085     -0.799392E-01  0.799392E-01   8.09754       8.17747    
  16  0.262102      -1.33902     -0.816574      0.816574       8.09541       8.91199    
  17  0.306130      -1.18375     -0.721883      0.721883       8.09102       8.81290    
  18  0.251844      -1.37895     -0.840922      0.840922       8.09048       8.93140    
  19  0.371147     -0.991157     -0.604436      0.604436       8.06856       8.67299    
  20  0.244393E-01  -3.71156      -2.26342       2.26342       8.18877       10.4522    
  21  0.550903     -0.596197     -0.363578      0.363578       8.09927       8.46285    
  22  0.509078     -0.675154     -0.411728      0.411728       8.06768       8.47940    
  23  0.741178     -0.299515     -0.182653      0.182653       8.09862       8.28128    
  24  0.585965     -0.534496     -0.325951      0.325951       8.09327       8.41922    
  25  0.602491     -0.506683     -0.308990      0.308990       8.09118       8.40017    
  26  0.532366     -0.630423     -0.384450      0.384450       8.15023       8.53468    
  27  0.264247      -1.33087     -0.811603      0.811603       8.06512       8.87673    
  28  0.468512     -0.758194     -0.462369      0.462369       8.04862       8.51099    
  29  0.338122      -1.08435     -0.661267      0.661267       8.19746       8.85873    
  30  0.815455     -0.204008     -0.124410      0.124410       8.24674       8.37115    
  31  0.126007      -2.07142      -1.26321       1.26321       8.06063       9.32384    
  32  0.391435     -0.937937     -0.571981      0.571981       8.11494       8.68692    
  33  0.477179     -0.739864     -0.451190      0.451190       8.09096       8.54215    
  34  0.926058     -0.768180E-01 -0.468458E-01  0.468458E-01   8.22182       8.26867    
  35  0.305992E-01  -3.48678      -2.12634       2.12634       8.20747       10.3338    
  36  0.142122      -1.95107      -1.18982       1.18982       8.10953       9.29934    
  37  0.934627E-01  -2.37019      -1.44541       1.44541       8.04995       9.49536    
  38  0.933240     -0.690924E-01 -0.421345E-01  0.421345E-01   8.13016       8.17230    
  39  0.551354     -0.595378     -0.363078      0.363078       8.25932       8.62240    
  40  0.167646      -1.78590      -1.08909       1.08909       8.08867       9.17776    
  41  0.657770     -0.418900     -0.255458      0.255458       8.10547       8.36093    
  42  0.937012     -0.650587E-01 -0.396746E-01  0.396746E-01   8.10859       8.14827    
  43  0.435130     -0.832109     -0.507444      0.507444       8.06918       8.57663    
  44  0.346278E-01  -3.36310      -2.05091       2.05091       8.07122       10.1221    
  45  0.529273     -0.636251     -0.388004      0.388004       8.20225       8.59026    
  46  0.543808     -0.609159     -0.371483      0.371483       8.11383       8.48531    
  47  0.476993     -0.740254     -0.451428      0.451428       8.32928       8.78070    
  48  0.602365     -0.506891     -0.309117      0.309117       8.00020       8.30932    
  49  0.429141     -0.845970     -0.515897      0.515897       8.09139       8.60729    
  50  0.161300E-01  -4.12707      -2.51681       2.51681       8.71362       11.2304    
  51  0.806405     -0.215169     -0.131216      0.131216       8.12653       8.25775    
  52  0.577848E-01  -2.85103      -1.73864       1.73864       8.10621       9.84485    
  53  0.992308     -0.772154E-02 -0.470882E-02  0.470882E-02   8.05853       8.06324    
  54  0.130687      -2.03495      -1.24097       1.24097       8.06479       9.30577    
  55  0.844072     -0.169518     -0.103377      0.103377       8.24941       8.35279    
  56  0.900890     -0.104372     -0.636493E-01  0.636493E-01   8.02972       8.09336    
  57  0.886923E-01  -2.42258      -1.47736       1.47736       8.06810       9.54546    
  58  0.675479     -0.392334     -0.239256      0.239256       8.03969       8.27894    
  59  0.486368     -0.720791     -0.439559      0.439559       8.09605       8.53561    
  60  0.868319E-01  -2.44378      -1.49029       1.49029       8.10077       9.59106    
  61  0.536051     -0.623527     -0.380244      0.380244       8.16632       8.54656    
  62  0.916344     -0.873636E-01 -0.532769E-01  0.532769E-01   8.12933       8.18261    
  63  0.264660E-01  -3.63190      -2.21483       2.21483       8.62600       10.8408    
  64  0.765006     -0.267871     -0.163355      0.163355       8.35386       8.51721    
  65  0.755495     -0.280383     -0.170985      0.170985       8.17237       8.34336    
  66  0.149819      -1.89833      -1.15765       1.15765       8.14970       9.30735    
  67  0.514409     -0.664736     -0.405375      0.405375       8.10022       8.50559    
  68  0.902494E-01  -2.40518      -1.46675       1.46675       8.11497       9.58172    
  69  0.837965     -0.176779     -0.107805      0.107805       8.32632       8.43412    
  70  0.833448     -0.182184     -0.111101      0.111101       8.06759       8.17870    
loop,thermsimp(1:2)       50   2.10435      0.310050    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    237          8.18          0.86          1.12         24.45          0.07          0.05         26.56
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    238          8.27          0.87          1.13         24.37          0.05          0.05         26.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       50
neval is:      237
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       51
neval is:      237


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      237     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.929295     -0.733287E-01 -0.447179E-01  0.447179E-01   8.05853       8.10325    
   2  0.669511     -0.401208     -0.244668      0.244668       8.02972       8.27438    
   3  0.863337E-01  -2.44954      -1.49380       1.49380       8.10859       9.60239    
   4  0.279945      -1.27316     -0.776411      0.776411       8.11727       8.89368    
   5  0.832640     -0.183154     -0.111693      0.111693       8.13016       8.24186    
   6  0.848933     -0.163775     -0.998749E-01  0.998749E-01   8.09754       8.19741    
   7  0.141794      -1.95338      -1.19123       1.19123       8.06759       9.25882    
   8  0.208764      -1.56655     -0.955329      0.955329       8.12933       9.08466    
   9  0.755787     -0.279996     -0.170750      0.170750       8.11627       8.28702    
  10  0.177416      -1.72926      -1.05455       1.05455       8.10246       9.15701    
  11  0.405148     -0.903503     -0.550982      0.550982       8.12653       8.67751    
  12  0.640380     -0.445693     -0.271796      0.271796       8.22182       8.49362    
  13  0.548060     -0.601370     -0.366733      0.366733       8.03969       8.40642    
  14  0.773287     -0.257105     -0.156790      0.156790       8.09862       8.25541    
  15  0.180768      -1.71054      -1.04314       1.04314       8.00020       9.04334    
  16  0.135846      -1.99624      -1.21736       1.21736       8.17237       9.38973    
  17  0.601016     -0.509133     -0.310484      0.310484       8.24941       8.55990    
  18  0.302263      -1.19646     -0.729634      0.729634       8.10547       8.83511    
  19  0.189428      -1.66374      -1.01460       1.01460       8.11426       9.12886    
  20  0.737158     -0.304953     -0.185969      0.185969       8.24674       8.43271    
  21  0.790680     -0.234862     -0.143226      0.143226       8.11412       8.25735    
  22  0.177192E-01  -4.03310      -2.45950       2.45950       8.08374       10.5432    
  23  0.236042      -1.44375     -0.880437      0.880437       8.09118       8.97162    
  24  0.459229     -0.778206     -0.474572      0.474572       8.15194       8.62651    
  25  0.586479E-01  -2.83620      -1.72960       1.72960       8.09327       9.82286    
  26  0.263766      -1.33269     -0.812714      0.812714       8.18610       8.99882    
  27  0.942550     -0.591663E-01 -0.360813E-01  0.360813E-01   8.32632       8.36240    
  28  0.106855      -2.23628      -1.36375       1.36375       8.09927       9.46302    
  29  0.710700     -0.341505     -0.208259      0.208259       8.06768       8.27594    
  30  0.207109E-01  -3.87709      -2.36436       2.36436       8.11383       10.4782    
  31  0.901203     -0.104025     -0.634375E-01  0.634375E-01   8.10022       8.16366    
  32  0.949751     -0.515555E-01 -0.314400E-01  0.314400E-01   8.04862       8.08006    
  33  0.343487      -1.06861     -0.651667      0.651667       8.35386       9.00552    
  34  0.875043     -0.133483     -0.814016E-01  0.814016E-01   8.15023       8.23164    
  35  0.122447E-01  -4.40266      -2.68487       2.68487       8.09605       10.7809    
  36  0.820650     -0.197659     -0.120538      0.120538       8.09096       8.21150    
  37  0.748866     -0.289195     -0.176359      0.176359       8.16632       8.34268    
  38  0.594525     -0.519992     -0.317106      0.317106       8.06918       8.38629    
  39  0.927863E-01  -2.37746      -1.44984       1.44984       8.12070       9.57054    
  40  0.631335     -0.459918     -0.280471      0.280471       8.20225       8.48272    
  41  0.282620      -1.26365     -0.770612      0.770612       8.09139       8.86200    
  42  0.707811     -0.345578     -0.210743      0.210743       8.25932       8.47006    
  43  0.930463     -0.720730E-01 -0.439522E-01  0.439522E-01   8.07678       8.12074    
  44  0.988563     -0.115032E-01 -0.701501E-02  0.701501E-02   8.06856       8.07557    
  45  0.869439     -0.139907     -0.853194E-01  0.853194E-01   8.11494       8.20025    
  46  0.693921     -0.365397     -0.222830      0.222830       8.32928       8.55211    
  47  0.731753     -0.312312     -0.190457      0.190457       8.09102       8.28147    
  48  0.848712     -0.164035     -0.100033      0.100033       8.19746       8.29750    
  49  0.174447      -1.74613      -1.06484       1.06484       8.06512       9.12997    
  50  0.313212      -1.16087     -0.707935      0.707935       8.09541       8.80335    
  51  0.880789     -0.126937     -0.774098E-01  0.774098E-01   8.10753       8.18494    
  52  0.441967     -0.816520     -0.497937      0.497937       8.09048       8.58841    
  53  0.624106     -0.471435     -0.287494      0.287494       8.11654       8.40403    
  54  0.447426     -0.804244     -0.490451      0.490451       8.08867       8.57912    
  55  0.681696     -0.383171     -0.233669      0.233669       8.10953       8.34319    
  56  0.336384      -1.08950     -0.664410      0.664410       8.06479       8.72920    
  57  0.197044      -1.62433     -0.990561      0.990561       8.14970       9.14026    
  58  0.186834E-01  -3.98012      -2.42719       2.42719       8.06063       10.4878    
  59  0.467980     -0.759329     -0.463061      0.463061       8.04995       8.51301    
  60  0.607270     -0.498782     -0.304171      0.304171       8.09050       8.39467    
  61  0.299128      -1.20689     -0.735993      0.735993       8.06810       8.80409    
  62  0.166354      -1.79364      -1.09381       1.09381       8.11497       9.20878    
  63  0.542834     -0.610952     -0.372576      0.372576       8.10077       8.47335    
  64  0.811476     -0.208901     -0.127394      0.127394       8.10621       8.23361    
  65  0.520065     -0.653802     -0.398707      0.398707       8.01090       8.40961    
  66  0.955839     -0.451662E-01 -0.275437E-01  0.275437E-01   8.07122       8.09877    
  67  0.729602     -0.315256     -0.192252      0.192252       8.20747       8.39972    
  68  0.792398     -0.232691     -0.141902      0.141902       8.18877       8.33067    
  69  0.803787     -0.218421     -0.133199      0.133199       8.62600       8.75920    
  70  0.812756     -0.207324     -0.126432      0.126432       8.17790       8.30434    
loop,thermsimp(1:2)       51  0.447179E-01  0.244668    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    239          8.09          0.86          1.12         24.36          0.07          0.05         26.46
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    240          8.25          0.86          1.12         24.37          0.06          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       51
neval is:      239
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       52
neval is:      239


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      239     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.658032     -0.418502     -0.255215      0.255215       8.06856       8.32377    
   2  0.385391     -0.953496     -0.581469      0.581469       8.04862       8.63009    
   3  0.323679      -1.12800     -0.687888      0.687888       8.07122       8.75911    
   4  0.402516E-01  -3.21260      -1.95914       1.95914       8.05853       10.0177    
   5  0.866022     -0.143846     -0.877211E-01  0.877211E-01   8.07678       8.16450    
   6  0.560147     -0.579555     -0.353430      0.353430       8.10022       8.45365    
   7  0.389098     -0.943925     -0.575632      0.575632       8.10753       8.68316    
   8  0.470755     -0.753417     -0.459455      0.459455       8.09754       8.55699    
   9  0.794299     -0.230295     -0.140441      0.140441       8.11494       8.25538    
  10  0.897132     -0.108553     -0.661986E-01  0.661986E-01   8.09096       8.15716    
  11  0.359474      -1.02311     -0.623925      0.623925       8.15023       8.77416    
  12  0.604694     -0.503032     -0.306764      0.306764       8.10621       8.41298    
  13  0.101554      -2.28717      -1.39478       1.39478       8.13016       9.52494    
  14  0.274480      -1.29288     -0.788433      0.788433       8.09862       8.88706    
  15  0.916086     -0.876445E-01 -0.534481E-01  0.534481E-01   8.11412       8.16757    
  16  0.820070E-01  -2.50095      -1.52515       1.52515       8.02972       9.55487    
  17  0.975902     -0.243929E-01 -0.148755E-01  0.148755E-01   8.06768       8.08255    
  18  0.131665      -2.02750      -1.23643       1.23643       8.09102       9.32744    
  19  0.751313     -0.285933     -0.174370      0.174370       8.11627       8.29064    
  20  0.775324     -0.254475     -0.155186      0.155186       8.19746       8.35265    
  21  0.237000      -1.43969     -0.877967      0.877967       8.17790       9.05587    
  22  0.113641      -2.17471      -1.32620       1.32620       8.18877       9.51497    
  23  0.762281     -0.271440     -0.165532      0.165532       8.16632       8.33185    
  24  0.783730     -0.243690     -0.148609      0.148609       8.10953       8.25813    
  25  0.492891     -0.707468     -0.431434      0.431434       8.32632       8.75775    
  26  0.471904     -0.750980     -0.457969      0.457969       8.06918       8.52715    
  27  0.855781     -0.155740     -0.949749E-01  0.949749E-01   8.09050       8.18548    
  28  0.636473     -0.451814     -0.275529      0.275529       8.20747       8.48300    
  29  0.433340     -0.836232     -0.509958      0.509958       8.11654       8.62650    
  30  0.482236     -0.729321     -0.444761      0.444761       8.03969       8.48445    
  31  0.855143E-01  -2.45907      -1.49961       1.49961       8.01090       9.51051    
  32  0.916579     -0.871071E-01 -0.531204E-01  0.531204E-01   8.24674       8.29986    
  33  0.232519      -1.45878     -0.889608      0.889608       8.25932       9.14893    
  34  0.283977      -1.25886     -0.767690      0.767690       8.10077       8.86846    
  35  0.401228E-01  -3.21581      -1.96109       1.96109       8.20225       10.1633    
  36  0.235231      -1.44719     -0.882537      0.882537       8.22182       9.10436    
  37  0.233426      -1.45489     -0.887233      0.887233       8.04995       8.93718    
  38  0.903594     -0.101376     -0.618218E-01  0.618218E-01   8.32928       8.39110    
  39  0.857571     -0.153651     -0.937007E-01  0.937007E-01   8.24941       8.34311    
  40  0.444085     -0.811739     -0.495022      0.495022       8.08867       8.58369    
  41  0.151055      -1.89011      -1.15265       1.15265       8.09048       9.24312    
  42  0.745694     -0.293440     -0.178948      0.178948       8.15194       8.33089    
  43  0.470647E-01  -3.05623      -1.86378       1.86378       8.12653       9.99031    
  44  0.344459      -1.06578     -0.649944      0.649944       8.06479       8.71474    
  45  0.592738     -0.523004     -0.318943      0.318943       8.62600       8.94494    
  46  0.754292     -0.281975     -0.171957      0.171957       8.09541       8.26737    
  47  0.162950      -1.81431      -1.10642       1.10642       8.06810       9.17452    
  48  0.939100     -0.628333E-01 -0.383176E-01  0.383176E-01   8.10547       8.14379    
  49  0.966845     -0.337175E-01 -0.205619E-01  0.205619E-01   8.09139       8.11195    
  50  0.287323      -1.24715     -0.760546      0.760546       8.11727       8.87781    
  51  0.835081     -0.180227     -0.109907      0.109907       8.09118       8.20109    
  52  0.836052     -0.179064     -0.109198      0.109198       8.18610       8.29530    
  53  0.382321     -0.961495     -0.586347      0.586347       8.35386       8.94020    
  54  0.873869     -0.134824     -0.822197E-01  0.822197E-01   8.00020       8.08242    
  55  0.169635      -1.77411      -1.08190       1.08190       8.12933       9.21123    
  56  0.511680     -0.670055     -0.408619      0.408619       8.11426       8.52288    
  57  0.687848     -0.374188     -0.228190      0.228190       8.06512       8.29331    
  58  0.659885     -0.415689     -0.253499      0.253499       8.14970       8.40319    
  59  0.615967     -0.484562     -0.295500      0.295500       8.10246       8.39796    
  60  0.600029     -0.510778     -0.311487      0.311487       8.11497       8.42646    
  61  0.166513      -1.79268      -1.09323       1.09323       8.06759       9.16082    
  62  0.730640     -0.313835     -0.191386      0.191386       8.17237       8.36376    
  63  0.168194      -1.78264      -1.08710       1.08710       8.09927       9.18638    
  64  0.562652E-01  -2.87768      -1.75489       1.75489       8.12070       9.87559    
  65  0.787921     -0.238357     -0.145357      0.145357       8.10859       8.25395    
  66  0.937052     -0.650163E-01 -0.396488E-01  0.396488E-01   8.09327       8.13292    
  67  0.548780     -0.600057     -0.365932      0.365932       8.11383       8.47976    
  68  0.893892     -0.112170     -0.684045E-01  0.684045E-01   8.06063       8.12903    
  69  0.192558E-01  -3.94994      -2.40879       2.40879       8.08374       10.4925    
  70  0.818438     -0.200358     -0.122184      0.122184       8.09236       8.21454    
loop,thermsimp(1:2)       52  0.255215      0.581469    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    241          8.09          0.86          1.13         24.29          0.09          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    242          8.18          0.86          1.13         24.47          0.04          0.05         26.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  240    8.0870        1.159     -1.835      3.208     -102.6      1.363    
                      0.3253      1.307     -99.70      3.699     0.4192E-01

                       2.213    -0.5930      1.530      6935.      3444.    

                     -0.1746      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6119.      513.0    

                       1.433     -5.911     -4.292     -8.510      6.822    

                      -14.88     -3.599      7569.      0.000     0.1010E+05



                       1392.     0.1126E+05 -3450.     0.1047E+05  5190.    

                       5195.     0.1859E-01 0.1843     0.1115E-02 0.1121    

                     -0.2486    -0.9379E-01 0.1811     0.1105     0.5816E-01



                     -0.4670    -0.7864      0.000     0.8397E-01-0.7923E-01

                      0.1115E-02 0.1007    -0.7116    -0.1511     0.4064E-01

                      0.4475E-01 0.1211    -0.6685     -1.211      6876.    



                      -1.064     -1.218     -2.257     -2.325    -0.3807    

                     -0.3252      9.215      8.676    -0.1907E+05 -4.000    

                     -0.5892     -2.150      9.295      8.865    -0.1908E+05



                      -4.000     0.4583    -0.4719      8.846      9.079    

                     -0.1908E+05 -7.000    -0.7493    -0.6979      9.033    

                       8.775    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       52
neval is:      241
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       53
neval is:      241


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      241     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.581749     -0.541717     -0.330355      0.330355       8.00020       8.33055    
   2  0.307993      -1.17768     -0.718181      0.718181       8.06768       8.78586    
   3  0.551684     -0.594779     -0.362713      0.362713       8.09139       8.45410    
   4  0.969976     -0.304835E-01 -0.185897E-01  0.185897E-01   8.06063       8.07922    
   5  0.401714     -0.912015     -0.556173      0.556173       8.09327       8.64944    
   6  0.336211      -1.09002     -0.664723      0.664723       8.10547       8.77020    
   7  0.649191     -0.432028     -0.263463      0.263463       8.09096       8.35443    
   8  0.426986     -0.851005     -0.518967      0.518967       8.07678       8.59575    
   9  0.479997     -0.733976     -0.447600      0.447600       8.11412       8.56172    
  10  0.441527     -0.817516     -0.498545      0.498545       8.09050       8.58905    
  11  0.218988      -1.51874     -0.926171      0.926171       8.09118       9.01735    
  12  0.935549     -0.666221E-01 -0.406281E-01  0.406281E-01   8.09236       8.13298    
  13  0.159996      -1.83261      -1.11758       1.11758       8.10859       9.22617    
  14  0.486870     -0.719759     -0.438929      0.438929       8.11494       8.55386    
  15  0.835520     -0.179701     -0.109587      0.109587       8.10953       8.21911    
  16  0.643759     -0.440431     -0.268587      0.268587       8.09541       8.36400    
  17  0.177188      -1.73054      -1.05533       1.05533       8.11627       9.17160    
  18  0.408356     -0.895617     -0.546173      0.546173       8.06512       8.61130    
  19  0.463768     -0.768371     -0.468575      0.468575       8.18610       8.65468    
  20  0.616820     -0.483178     -0.294656      0.294656       8.24674       8.54139    
  21  0.377083     -0.975289     -0.594759      0.594759       8.06856       8.66331    
  22  0.278016      -1.28008     -0.780628      0.780628       8.15194       8.93257    
  23  0.746435     -0.292446     -0.178342      0.178342       8.16632       8.34466    
  24  0.872234     -0.136697     -0.833618E-01  0.833618E-01   8.24941       8.33277    
  25  0.887073E-01  -2.42241      -1.47726       1.47726       8.19746       9.67472    
  26  0.124913      -2.08014      -1.26853       1.26853       8.17237       9.44090    
  27  0.918160     -0.853835E-01 -0.520693E-01  0.520693E-01   8.32928       8.38135    
  28  0.924603     -0.783912E-01 -0.478052E-01  0.478052E-01   8.10246       8.15026    
  29  0.863214     -0.147092     -0.897012E-01  0.897012E-01   8.14970       8.23940    
  30  0.823499E-02  -4.79936      -2.92679       2.92679       8.10621       11.0330    
  31  0.548113     -0.601275     -0.366675      0.366675       8.11497       8.48165    
  32  0.800553     -0.222452     -0.135658      0.135658       8.10022       8.23588    
  33  0.180829      -1.71020      -1.04293       1.04293       8.11383       9.15676    
  34  0.968975E-01  -2.33410      -1.42340       1.42340       8.20747       9.63087    
  35  0.749847     -0.287886     -0.175561      0.175561       8.03969       8.21525    
  36  0.902028     -0.103110     -0.628794E-01  0.628794E-01   8.11426       8.17714    
  37  0.312083      -1.16449     -0.710137      0.710137       8.06918       8.77932    
  38  0.472691     -0.749313     -0.456953      0.456953       8.09754       8.55449    
  39  0.970346     -0.301026E-01 -0.183574E-01  0.183574E-01   8.08867       8.10703    
  40  0.485853     -0.721850     -0.440205      0.440205       8.11654       8.55674    
  41  0.604658     -0.503092     -0.306800      0.306800       8.04862       8.35542    
  42  0.172238      -1.75888      -1.07262       1.07262       8.10753       9.18014    
  43  0.359079E-01  -3.32680      -2.02878       2.02878       8.06479       10.0936    
  44  0.464923     -0.765884     -0.467058      0.467058       8.32632       8.79338    
  45  0.293512      -1.22584     -0.747551      0.747551       8.07122       8.81877    
  46  0.572788     -0.557239     -0.339820      0.339820       8.15023       8.49005    
  47  0.931713     -0.707300E-01 -0.431332E-01  0.431332E-01   8.10077       8.14390    
  48  0.983012     -0.171340E-01 -0.104488E-01  0.104488E-01   8.11727       8.12771    
  49  0.572194     -0.558278     -0.340454      0.340454       8.09862       8.43908    
  50  0.272189      -1.30126     -0.793545      0.793545       8.04995       8.84349    
  51  0.521081     -0.651849     -0.397516      0.397516       8.35386       8.75137    
  52  0.560075     -0.579685     -0.353509      0.353509       8.62600       8.97951    
  53  0.442251     -0.815877     -0.497545      0.497545       8.17790       8.67545    
  54  0.541873     -0.612723     -0.373656      0.373656       8.22182       8.59548    
  55  0.619019     -0.479619     -0.292485      0.292485       8.25932       8.55180    
  56  0.554460     -0.589760     -0.359653      0.359653       8.06759       8.42725    
  57  0.942853     -0.588454E-01 -0.358856E-01  0.358856E-01   8.06810       8.10399    
  58  0.289656E-01  -3.54165      -2.15980       2.15980       8.09927       10.2591    
  59  0.420166     -0.867105     -0.528785      0.528785       8.12933       8.65812    
  60  0.304886      -1.18782     -0.724365      0.724365       8.09048       8.81484    
  61  0.799970     -0.223182     -0.136103      0.136103       8.09102       8.22712    
  62  0.330194      -1.10808     -0.675736      0.675736       8.01090       8.68664    
  63  0.193095      -1.64457      -1.00291       1.00291       8.18877       9.19168    
  64  0.151812      -1.88511      -1.14959       1.14959       8.13016       9.27976    
  65  0.463265     -0.769456     -0.469236      0.469236       8.02972       8.49895    
  66  0.468691     -0.757811     -0.462135      0.462135       8.12070       8.58283    
  67  0.442877     -0.814463     -0.496683      0.496683       8.12653       8.62321    
  68  0.652140     -0.427496     -0.260699      0.260699       8.05853       8.31923    
  69  0.258134      -1.35428     -0.825878      0.825878       8.20225       9.02813    
  70  0.530519E-01  -2.93648      -1.79075       1.79075       8.08698       9.87773    
loop,thermsimp(1:2)       53  0.330355      0.718181    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    243          8.06          0.87          1.12         24.30          0.09          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    244          8.05          0.86          1.13         24.36          0.08          0.05         26.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       53
neval is:      243
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       54
neval is:      243


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      243     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.565968     -0.569218     -0.347126      0.347126       8.06063       8.40775    
   2  0.698829     -0.358349     -0.218531      0.218531       8.06810       8.28663    
   3  0.550231     -0.597418     -0.364322      0.364322       8.08867       8.45299    
   4  0.844966     -0.168459     -0.102731      0.102731       8.11727       8.22000    
   5  0.139804      -1.96751      -1.19984       1.19984       8.09236       9.29220    
   6  0.119451      -2.12485      -1.29579       1.29579       8.10077       9.39657    
   7  0.474112     -0.746312     -0.455123      0.455123       8.10246       8.55758    
   8  0.293024      -1.22750     -0.748564      0.748564       8.11426       8.86283    
   9  0.760137     -0.274256     -0.167249      0.167249       8.03969       8.20694    
  10  0.216376      -1.53074     -0.933488      0.933488       8.10953       9.04301    
  11  0.837069     -0.177849     -0.108457      0.108457       8.09102       8.19947    
  12  0.969258     -0.312245E-01 -0.190416E-01  0.190416E-01   8.10022       8.11926    
  13  0.335918      -1.09089     -0.665255      0.665255       8.14970       8.81495    
  14  0.966643     -0.339265E-01 -0.206894E-01  0.206894E-01   8.05853       8.07922    
  15  0.723887     -0.323119     -0.197047      0.197047       8.00020       8.19725    
  16  0.459929E-01  -3.07927      -1.87783       1.87783       8.24941       10.1272    
  17  0.536724     -0.622271     -0.379479      0.379479       8.16632       8.54580    
  18  0.432574     -0.838001     -0.511037      0.511037       8.09096       8.60200    
  19  0.160308      -1.83066      -1.11639       1.11639       8.04862       9.16501    
  20  0.885158     -0.121989     -0.743923E-01  0.743923E-01   8.09541       8.16981    
  21  0.753783     -0.282650     -0.172368      0.172368       8.32928       8.50164    
  22  0.135562      -1.99832      -1.21863       1.21863       8.06759       9.28623    
  23  0.817964     -0.200937     -0.122537      0.122537       8.09862       8.22116    
  24  0.286617      -1.24961     -0.762048      0.762048       8.09139       8.85344    
  25  0.319126      -1.14217     -0.696528      0.696528       8.11497       8.81150    
  26  0.104479E-01  -4.56135      -2.78164       2.78164       8.15023       10.9319    
  27  0.671407     -0.398379     -0.242943      0.242943       8.02972       8.27266    
  28  0.782955     -0.244680     -0.149213      0.149213       8.24674       8.39595    
  29  0.186689      -1.67831      -1.02348       1.02348       8.25932       9.28280    
  30  0.462519     -0.771067     -0.470219      0.470219       8.11494       8.58515    
  31  0.203171      -1.59371     -0.971888      0.971888       8.09754       9.06942    
  32  0.851762E-01  -2.46303      -1.50203       1.50203       8.11654       9.61857    
  33  0.702824     -0.352649     -0.215055      0.215055       8.11412       8.32918    
  34  0.747923     -0.290456     -0.177128      0.177128       8.12070       8.29782    
  35  0.224450      -1.49410     -0.911148      0.911148       8.09050       9.00165    
  36  0.243563E-02  -6.01755      -3.66967       3.66967       8.22182       11.8915    
  37  0.160790      -1.82766      -1.11456       1.11456       8.07678       9.19134    
  38  0.880431     -0.127343     -0.776576E-01  0.776576E-01   8.06512       8.14278    
  39  0.507306     -0.678640     -0.413854      0.413854       8.12653       8.54039    
  40  0.266019      -1.32419     -0.807528      0.807528       8.09327       8.90079    
  41  0.310751      -1.16876     -0.712745      0.712745       8.18610       8.89885    
  42  0.945006     -0.565640E-01 -0.344944E-01  0.344944E-01   8.12933       8.16383    
  43  0.265699E-01  -3.62797      -2.21244       2.21244       8.06856       10.2810    
  44  0.652842     -0.426420     -0.260043      0.260043       8.17790       8.43795    
  45  0.799409     -0.223882     -0.136530      0.136530       8.01090       8.14743    
  46  0.543529     -0.609672     -0.371795      0.371795       8.35386       8.72565    
  47  0.361947      -1.01626     -0.619743      0.619743       8.10547       8.72522    
  48  0.398721     -0.919492     -0.560733      0.560733       8.06918       8.62992    
  49  0.349489      -1.05128     -0.641102      0.641102       8.06768       8.70878    
  50  0.948739     -0.526212E-01 -0.320899E-01  0.320899E-01   8.32632       8.35841    
  51  0.346176      -1.06081     -0.646911      0.646911       8.09048       8.73739    
  52  0.678244     -0.388248     -0.236765      0.236765       8.07122       8.30799    
  53  0.858518     -0.152547     -0.930278E-01  0.930278E-01   8.04995       8.14298    
  54  0.835860E-01  -2.48188      -1.51352       1.51352       8.15194       9.66546    
  55  0.762568     -0.271063     -0.165302      0.165302       8.62600       8.79130    
  56  0.273927      -1.29489     -0.789663      0.789663       8.09118       8.88085    
  57  0.729557     -0.315318     -0.192290      0.192290       8.20225       8.39454    
  58  0.320381      -1.13825     -0.694135      0.694135       8.11383       8.80796    
  59  0.818134     -0.200729     -0.122410      0.122410       8.11627       8.23868    
  60  0.639548     -0.446993     -0.272589      0.272589       8.10753       8.38012    
  61  0.976107     -0.241828E-01 -0.147474E-01  0.147474E-01   8.18877       8.20352    
  62  0.232128      -1.46046     -0.890633      0.890633       8.10859       8.99922    
  63  0.215412      -1.53520     -0.936212      0.936212       8.13016       9.06637    
  64  0.770868     -0.260238     -0.158701      0.158701       8.17237       8.33107    
  65  0.147419E-01  -4.21706      -2.57168       2.57168       8.20747       10.7792    
  66  0.102273      -2.28010      -1.39047       1.39047       8.19746       9.58794    
  67  0.625951     -0.468483     -0.285694      0.285694       8.08698       8.37267    
  68  0.176925      -1.73203      -1.05624       1.05624       8.06479       9.12103    
  69  0.638162E-02  -5.05433      -3.08228       3.08228       8.09927       11.1816    
  70  0.301443      -1.19917     -0.731290      0.731290       8.05256       8.78385    
loop,thermsimp(1:2)       54  0.347126      0.218531    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    245          8.04          0.87          1.13         24.30          0.09          0.04         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    246          8.25          0.87          1.13         24.46          0.07          0.04         26.57
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       54
neval is:      245
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       55
neval is:      245


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      245     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.194359      -1.63805     -0.998929      0.998929       8.05853       9.05746    
   2  0.875287     -0.133204     -0.812314E-01  0.812314E-01   8.10022       8.18145    
   3  0.103612      -2.26710      -1.38254       1.38254       8.06512       9.44767    
   4  0.159072      -1.83840      -1.12111       1.12111       8.04995       9.17106    
   5  0.118738      -2.13084      -1.29945       1.29945       8.01090       9.31034    
   6  0.294105      -1.22382     -0.746319      0.746319       8.12933       8.87565    
   7  0.967643     -0.328919E-01 -0.200584E-01  0.200584E-01   8.09541       8.11547    
   8  0.675183     -0.392772     -0.239524      0.239524       8.00020       8.23972    
   9  0.170112      -1.77130      -1.08019       1.08019       8.09102       9.17120    
  10  0.990992     -0.904902E-02 -0.551835E-02  0.551835E-02   8.18877       8.19429    
  11  0.198513      -1.61690     -0.986034      0.986034       8.03969       9.02572    
  12  0.404817E-01  -3.20690      -1.95566       1.95566       8.11727       10.0729    
  13  0.834933E-01  -2.48299      -1.51420       1.51420       8.09862       9.61282    
  14  0.458935     -0.778848     -0.474964      0.474964       8.11627       8.59123    
  15  0.929311     -0.733118E-01 -0.447077E-01  0.447077E-01   8.02972       8.07442    
  16  0.593071     -0.522440     -0.318599      0.318599       8.06810       8.38670    
  17  0.963359E-01  -2.33991      -1.42695       1.42695       8.12070       9.54764    
  18  0.383119E-01  -3.26200      -1.98926       1.98926       8.07122       10.0605    
  19  0.841843     -0.172161     -0.104989      0.104989       8.11412       8.21911    
  20  0.874261     -0.134376     -0.819466E-01  0.819466E-01   8.17237       8.25432    
  21  0.706443     -0.347513     -0.211923      0.211923       8.32632       8.53824    
  22  0.423649E-01  -3.16143      -1.92793       1.92793       8.08698       10.0149    
  23  0.904835     -0.100003     -0.609846E-01  0.609846E-01   8.10753       8.16851    
  24  0.728800     -0.316356     -0.192923      0.192923       8.20225       8.39517    
  25  0.764304     -0.268790     -0.163916      0.163916       8.24674       8.41065    
  26  0.578519     -0.547284     -0.333749      0.333749       8.06063       8.39438    
  27  0.321737      -1.13402     -0.691558      0.691558       8.17790       8.86946    
  28  0.592944     -0.522656     -0.318730      0.318730       8.08867       8.40740    
  29  0.159596      -1.83511      -1.11910       1.11910       8.32928       9.44838    
  30  0.797332     -0.226484     -0.138116      0.138116       8.12653       8.26465    
  31  0.263979      -1.33189     -0.812223      0.812223       8.16632       8.97854    
  32  0.449355     -0.799942     -0.487828      0.487828       8.10246       8.59028    
  33  0.859901     -0.150938     -0.920461E-01  0.920461E-01   8.11494       8.20698    
  34  0.730093     -0.314584     -0.191842      0.191842       8.09096       8.28281    
  35  0.484666     -0.724295     -0.441696      0.441696       8.06918       8.51088    
  36  0.180217      -1.71359      -1.04500       1.04500       8.06768       9.11267    
  37  0.857397     -0.153854     -0.938247E-01  0.938247E-01   8.10547       8.19930    
  38  0.502370     -0.688418     -0.419817      0.419817       8.35386       8.77367    
  39  0.245408      -1.40484     -0.856709      0.856709       8.09048       8.94719    
  40  0.134540      -2.00590      -1.22325       1.22325       8.05256       9.27581    
  41  0.468137     -0.758995     -0.462857      0.462857       8.62600       9.08885    
  42  0.864548E-01  -2.44813      -1.49294       1.49294       8.11383       9.60677    
  43  0.178791      -1.72154      -1.04984       1.04984       8.11497       9.16482    
  44  0.690351     -0.370555     -0.225975      0.225975       8.14970       8.37567    
  45  0.731648     -0.312455     -0.190544      0.190544       8.09139       8.28193    
  46  0.857623     -0.153591     -0.936640E-01  0.936640E-01   8.11426       8.20793    
  47  0.754956     -0.281095     -0.171420      0.171420       8.09118       8.26260    
  48  0.355557      -1.03407     -0.630606      0.630606       8.18610       8.81671    
  49  0.200964      -1.60463     -0.978550      0.978550       8.09327       9.07182    
  50  0.243499      -1.41264     -0.861470      0.861470       8.10859       8.97006    
  51  0.796288     -0.227794     -0.138916      0.138916       8.09050       8.22942    
  52  0.256937      -1.35892     -0.828711      0.828711       8.10953       8.93824    
  53  0.591760     -0.524655     -0.319949      0.319949       8.13016       8.45011    
  54  0.799227     -0.224110     -0.136669      0.136669       8.09754       8.23420    
  55  0.115295E-01  -4.46285      -2.72157       2.72157       8.06479       10.7864    
  56  0.559205     -0.581239     -0.354456      0.354456       8.04862       8.40307    
  57  0.742198     -0.298139     -0.181814      0.181814       8.07678       8.25860    
  58  0.543157     -0.610356     -0.372213      0.372213       8.25932       8.63153    
  59  0.100933      -2.29330      -1.39852       1.39852       8.06759       9.46611    
  60  0.201228      -1.60332     -0.977748      0.977748       8.09236       9.07010    
  61  0.602159E-01  -2.80982      -1.71351       1.71351       8.10077       9.81428    
  62  0.107777      -2.22769      -1.35851       1.35851       8.19746       9.55597    
  63  0.131787E-01  -4.32915      -2.64004       2.64004       8.11654       10.7566    
  64  0.756826     -0.278622     -0.169912      0.169912       8.15194       8.32185    
  65  0.617120     -0.482691     -0.294359      0.294359       8.24941       8.54377    
  66  0.885328     -0.121797     -0.742752E-01  0.742752E-01   8.06856       8.14283    
  67  0.617093     -0.482736     -0.294386      0.294386       8.20747       8.50185    
  68  0.654899     -0.423274     -0.258125      0.258125       8.15023       8.40836    
  69  0.847740     -0.165181     -0.100732      0.100732       8.09927       8.20001    
  70  0.121451E-01  -4.41083      -2.68985       2.68985       8.03963       10.7295    
loop,thermsimp(1:2)       55  0.998929      0.812314E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    247          8.08          0.87          1.13         24.37          0.06          0.04         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    248          8.12          0.86          1.13         24.40          0.07          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       55
neval is:      247
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       56
neval is:      247


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      247     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.141299      -1.95688      -1.19336       1.19336       8.02972       9.22308    
   2  0.197548      -1.62177     -0.989005      0.989005       8.09541       9.08442    
   3  0.774000     -0.256183     -0.156228      0.156228       8.06856       8.22478    
   4  0.170284      -1.77029      -1.07957       1.07957       8.10753       9.18710    
   5  0.250636      -1.38376     -0.843854      0.843854       8.10022       8.94407    
   6  0.907951     -0.965652E-01 -0.588882E-01  0.588882E-01   8.18877       8.24766    
   7  0.611678     -0.491549     -0.299761      0.299761       8.10547       8.40523    
   8  0.735945E-02  -4.91177      -2.99534       2.99534       8.09927       11.0946    
   9  0.309131      -1.17399     -0.715933      0.715933       8.11494       8.83087    
  10  0.577854     -0.548434     -0.334451      0.334451       8.11426       8.44871    
  11  0.931529     -0.709274E-01 -0.432536E-01  0.432536E-01   8.11412       8.15738    
  12  0.665703     -0.406912     -0.248147      0.248147       8.09050       8.33865    
  13  0.585695     -0.534955     -0.326231      0.326231       8.09754       8.42377    
  14  0.295001      -1.22078     -0.744464      0.744464       8.00020       8.74466    
  15  0.317712E-01  -3.44920      -2.10342       2.10342       8.17237       10.2758    
  16  0.222963      -1.50075     -0.915201      0.915201       8.07678       8.99198    
  17  0.325931      -1.12107     -0.683661      0.683661       8.09118       8.77484    
  18  0.785098     -0.241947     -0.147546      0.147546       8.12653       8.27408    
  19  0.550467     -0.596988     -0.364061      0.364061       8.09139       8.45545    
  20  0.780222     -0.248176     -0.151345      0.151345       8.09096       8.24231    
  21  0.130712      -2.03476      -1.24085       1.24085       8.15194       9.39279    
  22  0.873397     -0.135365     -0.825493E-01  0.825493E-01   8.14970       8.23224    
  23  0.366975      -1.00246     -0.611330      0.611330       8.06810       8.67943    
  24  0.813244     -0.206724     -0.126066      0.126066       8.06063       8.18670    
  25  0.782660E-01  -2.54764      -1.55362       1.55362       8.20225       9.75588    
  26  0.700327     -0.356208     -0.217226      0.217226       8.04862       8.26584    
  27  0.437766     -0.826071     -0.503762      0.503762       8.08867       8.59243    
  28  0.508966E-01  -2.97796      -1.81604       1.81604       8.15023       9.96628    
  29  0.276850      -1.28428     -0.783189      0.783189       8.24674       9.02993    
  30  0.792031     -0.233154     -0.142184      0.142184       8.13016       8.27235    
  31  0.174747      -1.74441      -1.06379       1.06379       8.20747       9.27126    
  32  0.469718     -0.755623     -0.460801      0.460801       8.06918       8.52999    
  33  0.252316      -1.37707     -0.839778      0.839778       8.32632       9.16610    
  34  0.980061     -0.201409E-01 -0.122825E-01  0.122825E-01   8.24941       8.26169    
  35  0.838300     -0.176379     -0.107561      0.107561       8.10246       8.21002    
  36  0.369385     -0.995915     -0.607338      0.607338       8.11627       8.72360    
  37  0.923139     -0.799751E-01 -0.487711E-01  0.487711E-01   8.25932       8.30809    
  38  0.592446     -0.523496     -0.319243      0.319243       8.35386       8.67310    
  39  0.348787      -1.05329     -0.642328      0.642328       8.18610       8.82843    
  40  0.569584     -0.562850     -0.343242      0.343242       8.17790       8.52115    
  41  0.543034E-01  -2.91317      -1.77653       1.77653       8.12933       9.90587    
  42  0.582662     -0.540148     -0.329398      0.329398       8.10953       8.43892    
  43  0.702825     -0.352648     -0.215055      0.215055       8.09048       8.30553    
  44  0.941375     -0.604140E-01 -0.368422E-01  0.368422E-01   8.10859       8.14543    
  45  0.258857      -1.35148     -0.824171      0.824171       8.16632       8.99049    
  46  0.116535      -2.14956      -1.31087       1.31087       8.03969       9.35055    
  47  0.102671      -2.27622      -1.38811       1.38811       8.05853       9.44664    
  48  0.172023      -1.76013      -1.07338       1.07338       8.09236       9.16573    
  49  0.434982E-01  -3.13504      -1.91184       1.91184       8.09327       10.0051    
  50  0.852122     -0.160026     -0.975885E-01  0.975885E-01   8.62600       8.72359    
  51  0.583521     -0.538675     -0.328499      0.328499       8.06768       8.39618    
  52  0.843374     -0.170345     -0.103881      0.103881       8.11497       8.21886    
  53  0.194743      -1.63607     -0.997725      0.997725       8.04995       9.04767    
  54  0.191808      -1.65126      -1.00698       1.00698       8.09102       9.09800    
  55  0.656555     -0.420749     -0.256585      0.256585       8.05256       8.30914    
  56  0.468384E-01  -3.06105      -1.86672       1.86672       8.01090       9.87762    
  57  0.812217     -0.207988     -0.126837      0.126837       8.06512       8.19196    
  58  0.852265     -0.159858     -0.974857E-01  0.974857E-01   8.32928       8.42676    
  59  0.340213      -1.07818     -0.657507      0.657507       8.06759       8.72510    
  60  0.655911     -0.421730     -0.257183      0.257183       8.12070       8.37788    
  61  0.329724      -1.10950     -0.676604      0.676604       8.19746       8.87407    
  62  0.362242      -1.01544     -0.619246      0.619246       8.11383       8.73307    
  63  0.273539      -1.29631     -0.790528      0.790528       8.09862       8.88915    
  64  0.524351     -0.645594     -0.393702      0.393702       8.10077       8.49447    
  65  0.817273     -0.201783     -0.123053      0.123053       8.08698       8.21003    
  66  0.642237     -0.442797     -0.270030      0.270030       8.07122       8.34125    
  67  0.276178      -1.28671     -0.784672      0.784672       8.11727       8.90194    
  68  0.721954     -0.325793     -0.198678      0.198678       8.03963       8.23831    
  69  0.676913     -0.390212     -0.237963      0.237963       8.11654       8.35450    
  70  0.148059      -1.91014      -1.16486       1.16486       8.08186       9.24672    
loop,thermsimp(1:2)       56   1.19336      0.989005    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    249          8.08          0.86          1.13         24.39          0.07          0.05         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    250          8.17          0.86          1.13         24.63          0.05          0.05         26.72
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       56
neval is:      249
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       57
neval is:      249


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      249     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.662269     -0.412083     -0.251300      0.251300       8.10859       8.35989    
   2  0.724212     -0.322671     -0.196774      0.196774       8.11412       8.31090    
   3  0.633711     -0.456163     -0.278181      0.278181       8.06063       8.33881    
   4  0.448566     -0.801700     -0.488900      0.488900       8.06512       8.55402    
   5  0.964228     -0.364273E-01 -0.222144E-01  0.222144E-01   8.10246       8.12467    
   6  0.714306     -0.336444     -0.205173      0.205173       8.08698       8.29215    
   7  0.528330     -0.638035     -0.389092      0.389092       8.11497       8.50407    
   8  0.654127     -0.424453     -0.258844      0.258844       8.06856       8.32740    
   9  0.368899     -0.997232     -0.608141      0.608141       8.14970       8.75784    
  10  0.227697      -1.47974     -0.902388      0.902388       8.03963       8.94202    
  11  0.612266     -0.490588     -0.299175      0.299175       8.09096       8.39014    
  12  0.313777      -1.15907     -0.706837      0.706837       8.18877       8.89561    
  13  0.258526      -1.35276     -0.824952      0.824952       8.24941       9.07436    
  14  0.119298      -2.12613      -1.29658       1.29658       8.04862       9.34519    
  15  0.213331      -1.54491     -0.942129      0.942129       8.13016       9.07229    
  16  0.294218      -1.22343     -0.746086      0.746086       8.12653       8.87262    
  17  0.352988      -1.04132     -0.635028      0.635028       8.09048       8.72550    
  18  0.348706      -1.05353     -0.642470      0.642470       8.25932       8.90179    
  19  0.449249     -0.800179     -0.487972      0.487972       8.05256       8.54053    
  20  0.879121     -0.128833     -0.785660E-01  0.785660E-01   8.09050       8.16907    
  21  0.464081     -0.767695     -0.468163      0.468163       8.07122       8.53939    
  22  0.497582     -0.697995     -0.425658      0.425658       8.11654       8.54220    
  23  0.920207     -0.831566E-01 -0.507113E-01  0.507113E-01   8.12070       8.17141    
  24  0.811773     -0.208535     -0.127171      0.127171       8.06768       8.19485    
  25  0.190651      -1.65731      -1.01067       1.01067       8.10547       9.11615    
  26  0.645174     -0.438235     -0.267248      0.267248       8.09754       8.36478    
  27  0.668343     -0.402954     -0.245733      0.245733       8.32928       8.57501    
  28  0.765111     -0.267735     -0.163272      0.163272       8.10953       8.27280    
  29  0.991779     -0.825499E-02 -0.503413E-02  0.503413E-02   8.11426       8.11930    
  30  0.136888      -1.98859      -1.21270       1.21270       8.09139       9.30409    
  31  0.645145E-01  -2.74086      -1.67146       1.67146       8.10077       9.77223    
  32  0.408515E-01  -3.19781      -1.95012       1.95012       8.17790       10.1280    
  33  0.264109      -1.33140     -0.811923      0.811923       8.06918       8.88111    
  34  0.382737     -0.960407     -0.585683      0.585683       8.08867       8.67435    
  35  0.402738E-02  -5.51464      -3.36298       3.36298       8.35386       11.7168    
  36  0.318074      -1.14547     -0.698541      0.698541       8.06810       8.76664    
  37  0.245237      -1.40553     -0.857134      0.857134       8.62600       9.48313    
  38  0.519766     -0.654377     -0.399058      0.399058       8.11627       8.51533    
  39  0.255147      -1.36592     -0.832975      0.832975       8.06759       8.90057    
  40  0.833841     -0.181712     -0.110813      0.110813       8.11383       8.22464    
  41  0.696242E-01  -2.66464      -1.62498       1.62498       8.00020       9.62517    
  42  0.487295     -0.718886     -0.438397      0.438397       8.09118       8.52958    
  43  0.276229E-01  -3.58911      -2.18874       2.18874       8.18610       10.3748    
  44  0.638327     -0.448905     -0.273755      0.273755       8.11494       8.38869    
  45  0.206684      -1.57657     -0.961435      0.961435       8.19746       9.15890    
  46  0.736003     -0.306521     -0.186925      0.186925       8.09862       8.28555    
  47  0.217444E-01  -3.82840      -2.33467       2.33467       8.11727       10.4519    
  48  0.956929     -0.440260E-01 -0.268483E-01  0.268483E-01   8.10022       8.12707    
  49  0.883561     -0.123795     -0.754935E-01  0.754935E-01   8.16632       8.24181    
  50  0.700901     -0.355388     -0.216726      0.216726       8.07678       8.29351    
  51  0.201997      -1.59950     -0.975422      0.975422       8.24674       9.22216    
  52  0.412152     -0.886362     -0.540529      0.540529       8.04995       8.59048    
  53  0.890450     -0.116029     -0.707577E-01  0.707577E-01   8.09541       8.16617    
  54  0.417423     -0.873654     -0.532780      0.532780       8.09102       8.62379    
  55  0.426501     -0.852140     -0.519659      0.519659       8.09236       8.61201    
  56  0.983871     -0.162605E-01 -0.991610E-02  0.991610E-02   8.32632       8.33623    
  57  0.384350     -0.956201     -0.583119      0.583119       8.10753       8.69065    
  58  0.155937      -1.85830      -1.13325       1.13325       8.02972       9.16296    
  59  0.361264      -1.01815     -0.620896      0.620896       8.08186       8.70276    
  60  0.538177     -0.619568     -0.377830      0.377830       8.20747       8.58530    
  61  0.514362E-01  -2.96741      -1.80961       1.80961       8.03969       9.84930    
  62  0.994100     -0.591759E-02 -0.360872E-02  0.360872E-02   8.15194       8.15555    
  63  0.622557     -0.473920     -0.289010      0.289010       8.05853       8.34754    
  64  0.703606     -0.351537     -0.214378      0.214378       8.20225       8.41663    
  65  0.151986      -1.88396      -1.14890       1.14890       8.01090       9.15979    
  66  0.105360      -2.25037      -1.37234       1.37234       8.12933       9.50167    
  67  0.572995     -0.556878     -0.339600      0.339600       8.15023       8.48983    
  68  0.201032      -1.60429     -0.978344      0.978344       8.09327       9.07161    
  69  0.786519     -0.240139     -0.146444      0.146444       8.17237       8.31882    
  70  0.251709E-01  -3.68207      -2.24543       2.24543       8.07742       10.3228    
loop,thermsimp(1:2)       57  0.251300      0.196774    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    251          8.09          0.86          1.13         24.59          0.07          0.05         26.71
Just calling func    0   0         26.71


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    252          9.01          0.87          1.12         24.45          0.06          0.05         26.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       57
neval is:      251
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       58
neval is:      251


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      251     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.584865E-01  -2.83896      -1.73128       1.73128       8.11426       9.84554    
   2  0.104884      -2.25490      -1.37511       1.37511       8.10246       9.47756    
   3  0.784254     -0.243023     -0.148202      0.148202       8.10022       8.24842    
   4  0.813133     -0.206861     -0.126150      0.126150       8.15194       8.27809    
   5  0.490778     -0.711764     -0.434054      0.434054       8.09541       8.52947    
   6  0.168573      -1.78039      -1.08573       1.08573       8.09050       9.17623    
   7  0.450161     -0.798149     -0.486734      0.486734       8.12070       8.60743    
   8  0.828233     -0.188461     -0.114929      0.114929       8.06768       8.18260    
   9  0.994731     -0.528342E-02 -0.322198E-02  0.322198E-02   8.11383       8.11705    
  10  0.813340     -0.206606     -0.125994      0.125994       8.16632       8.29231    
  11  0.776133     -0.253432     -0.154550      0.154550       8.10953       8.26408    
  12  0.729556     -0.315319     -0.192290      0.192290       8.09862       8.29092    
  13  0.530451     -0.634028     -0.386648      0.386648       8.08698       8.47363    
  14  0.752564E-01  -2.58685      -1.57754       1.57754       8.07678       9.65432    
  15  0.918457     -0.850597E-01 -0.518719E-01  0.518719E-01   8.11412       8.16599    
  16  0.162642      -1.81621      -1.10757       1.10757       8.17237       9.27995    
  17  0.725851     -0.320411     -0.195396      0.195396       8.06856       8.26395    
  18  0.322292      -1.13230     -0.690507      0.690507       8.32632       9.01683    
  19  0.838064     -0.176661     -0.107733      0.107733       8.06063       8.16836    
  20  0.346062E-01  -3.36372      -2.05129       2.05129       8.05853       10.1098    
  21  0.442915     -0.814377     -0.496630      0.496630       8.10859       8.60522    
  22  0.143708      -1.93997      -1.18305       1.18305       8.09754       9.28059    
  23  0.940845     -0.609769E-01 -0.371855E-01  0.371855E-01   8.11494       8.15212    
  24  0.972503     -0.278816E-01 -0.170030E-01  0.170030E-01   8.09096       8.10797    
  25  0.291831      -1.23158     -0.751054      0.751054       8.20225       8.95330    
  26  0.211976      -1.55128     -0.946017      0.946017       8.15023       9.09625    
  27  0.695427     -0.363229     -0.221508      0.221508       8.11497       8.33648    
  28  0.982540E-01  -2.32020      -1.41492       1.41492       8.11627       9.53119    
  29  0.730742     -0.313695     -0.191300      0.191300       8.09118       8.28248    
  30  0.417794     -0.872766     -0.532238      0.532238       8.07122       8.60346    
  31  0.868385     -0.141121     -0.860594E-01  0.860594E-01   8.05256       8.13862    
  32  0.300897      -1.20099     -0.732396      0.732396       8.11654       8.84893    
  33  0.917219     -0.864093E-01 -0.526949E-01  0.526949E-01   8.06512       8.11782    
  34  0.304394      -1.18943     -0.725350      0.725350       8.32928       9.05463    
  35  0.856500     -0.154901     -0.944634E-01  0.944634E-01   8.20747       8.30193    
  36  0.310652      -1.16908     -0.712939      0.712939       8.04995       8.76289    
  37  0.846275     -0.166911     -0.101787      0.101787       8.09236       8.19414    
  38  0.206825      -1.57588     -0.961019      0.961019       8.09102       9.05203    
  39  0.606376     -0.500256     -0.305070      0.305070       8.08867       8.39374    
  40  0.840015     -0.174336     -0.106315      0.106315       8.10753       8.21384    
  41  0.348835      -1.05315     -0.642244      0.642244       8.08186       8.72411    
  42  0.857325     -0.153939     -0.938762E-01  0.938762E-01   8.09048       8.18435    
  43  0.308035E-01  -3.48013      -2.12228       2.12228       8.14970       10.2720    
  44  0.400632     -0.914711     -0.557817      0.557817       8.06810       8.62592    
  45  0.242237      -1.41784     -0.864638      0.864638       8.12653       8.99117    
  46  0.407771     -0.897050     -0.547047      0.547047       8.06918       8.61623    
  47  0.430691     -0.842364     -0.513698      0.513698       8.18877       8.70247    
  48  0.415503     -0.878266     -0.535592      0.535592       8.06759       8.60319    
  49  0.593575     -0.521591     -0.318081      0.318081       8.25932       8.57740    
  50  0.973620     -0.267342E-01 -0.163033E-01  0.163033E-01   8.03963       8.05593    
  51  0.510257     -0.672840     -0.410317      0.410317       8.09327       8.50358    
  52  0.796475     -0.227560     -0.138772      0.138772       8.13016       8.26894    
  53  0.213576      -1.54376     -0.941431      0.941431       8.24941       9.19084    
  54  0.865534     -0.144409     -0.880647E-01  0.880647E-01   8.10547       8.19354    
  55  0.920053     -0.833240E-01 -0.508134E-01  0.508134E-01   8.19746       8.24828    
  56  0.534624     -0.626192     -0.381870      0.381870       8.01090       8.39277    
  57  0.963687     -0.369888E-01 -0.225568E-01  0.225568E-01   8.02972       8.05227    
  58  0.498139     -0.696877     -0.424976      0.424976       8.24674       8.67171    
  59  0.987058     -0.130264E-01 -0.794388E-02  0.794388E-02   8.09139       8.09933    
  60  0.488276E-01  -3.01946      -1.84135       1.84135       8.04862       9.88997    
  61  0.597381E-01  -2.81779      -1.71837       1.71837       8.62600       10.3444    
  62  0.589016     -0.529301     -0.322783      0.322783       8.12933       8.45212    
  63  0.680503     -0.384923     -0.234737      0.234737       8.00020       8.23494    
  64  0.793494     -0.231310     -0.141059      0.141059       8.10077       8.24183    
  65  0.269936E-01  -3.61216      -2.20280       2.20280       8.03969       10.2425    
  66  0.392490     -0.935245     -0.570339      0.570339       8.17790       8.74824    
  67  0.150218      -1.89567      -1.15603       1.15603       8.07742       9.23345    
  68  0.959939     -0.408856E-01 -0.249332E-01  0.249332E-01   8.18610       8.21103    
  69  0.559076     -0.581471     -0.354597      0.354597       8.11727       8.47186    
  70  0.820359     -0.198013     -0.120754      0.120754       8.08733       8.20808    
loop,thermsimp(1:2)       58   1.73128       1.37511    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    253        176.95          0.86          1.12         24.39          0.07          0.05         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    254          8.24          0.86          1.12         24.34          0.07          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3      8.24
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       58
neval is:      253
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       59
neval is:      253


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      253     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.330032      -1.10857     -0.676036      0.676036       8.02972       8.70575    
   2  0.939148     -0.627826E-01 -0.382866E-01  0.382866E-01   8.03963       8.07791    
   3  0.130906      -2.03328      -1.23995       1.23995       8.09139       9.33134    
   4  0.664370     -0.408916     -0.249369      0.249369       8.09096       8.34033    
   5  0.490908     -0.711498     -0.433892      0.433892       8.11383       8.54772    
   6  0.711731     -0.340055     -0.207375      0.207375       8.06512       8.27250    
   7  0.676080     -0.391444     -0.238714      0.238714       8.05256       8.29127    
   8  0.611139     -0.492432     -0.300299      0.300299       8.11494       8.41523    
   9  0.614246     -0.487359     -0.297206      0.297206       8.11412       8.41133    
  10  0.988045     -0.120275E-01 -0.733474E-02  0.733474E-02   8.06063       8.06796    
  11  0.232883      -1.45722     -0.888653      0.888653       8.06768       8.95633    
  12  0.450825     -0.796675     -0.485835      0.485835       8.09048       8.57631    
  13  0.493319     -0.706599     -0.430904      0.430904       8.10547       8.53638    
  14  0.191184      -1.65452      -1.00897       1.00897       8.09236       9.10133    
  15  0.894136     -0.111897     -0.682382E-01  0.682382E-01   8.08733       8.15556    
  16  0.391751     -0.937128     -0.571487      0.571487       8.18610       8.75759    
  17  0.236278      -1.44275     -0.879829      0.879829       8.10753       8.98736    
  18  0.496874E-01  -3.00200      -1.83071       1.83071       8.00020       9.83091    
  19  0.784524     -0.242678     -0.147992      0.147992       8.10077       8.24876    
  20  0.292328      -1.22988     -0.750016      0.750016       8.19746       8.94748    
  21  0.832247E-01  -2.48621      -1.51616       1.51616       8.10022       9.61638    
  22  0.423133     -0.860069     -0.524495      0.524495       8.06856       8.59305    
  23  0.234472      -1.45042     -0.884506      0.884506       8.10953       8.99403    
  24  0.868463     -0.141031     -0.860045E-01  0.860045E-01   8.13016       8.21617    
  25  0.122969      -2.09582      -1.27809       1.27809       8.15194       9.43003    
  26  0.811771     -0.208537     -0.127172      0.127172       8.09118       8.21835    
  27  0.786834     -0.239738     -0.146199      0.146199       8.09862       8.24482    
  28  0.163144      -1.81312      -1.10569       1.10569       8.16632       9.27201    
  29  0.571103     -0.560186     -0.341618      0.341618       8.20747       8.54909    
  30  0.769982     -0.261388     -0.159402      0.159402       8.11497       8.27438    
  31  0.471769     -0.751265     -0.458143      0.458143       8.01090       8.46904    
  32  0.584935     -0.536254     -0.327023      0.327023       8.08867       8.41569    
  33  0.416140     -0.876734     -0.534657      0.534657       8.12933       8.66399    
  34  0.106525E-01  -4.54196      -2.76982       2.76982       8.11727       10.8871    
  35  0.595424     -0.518482     -0.316185      0.316185       8.08698       8.40316    
  36  0.302400      -1.19600     -0.729358      0.729358       8.09327       8.82262    
  37  0.629701     -0.462510     -0.282052      0.282052       8.09541       8.37746    
  38  0.939026E-01  -2.36550      -1.44255       1.44255       8.25932       9.70187    
  39  0.911727     -0.924151E-01 -0.563574E-01  0.563574E-01   8.06759       8.12395    
  40  0.289502      -1.23959     -0.755939      0.755939       8.07122       8.82716    
  41  0.326571      -1.11911     -0.682464      0.682464       8.10859       8.79105    
  42  0.972366     -0.280231E-01 -0.170893E-01  0.170893E-01   8.12070       8.13779    
  43  0.823413     -0.194297     -0.118488      0.118488       8.06918       8.18767    
  44  0.790717     -0.234815     -0.143197      0.143197       8.06810       8.21130    
  45  0.167922      -1.78426      -1.08809       1.08809       8.24674       9.33483    
  46  0.804665     -0.217329     -0.132534      0.132534       8.18877       8.32130    
  47  0.154714      -1.86617      -1.13805       1.13805       8.08186       9.21991    
  48  0.240456      -1.42522     -0.869140      0.869140       8.17790       9.04704    
  49  0.351787      -1.04473     -0.637107      0.637107       8.04995       8.68705    
  50  0.666429E-01  -2.70841      -1.65166       1.65166       8.11654       9.76820    
  51  0.484113     -0.725437     -0.442392      0.442392       8.20225       8.64464    
  52  0.298509      -1.20896     -0.737256      0.737256       8.12653       8.86379    
  53  0.982136     -0.180253E-01 -0.109923E-01  0.109923E-01   8.32632       8.33731    
  54  0.799723     -0.223490     -0.136291      0.136291       8.09102       8.22731    
  55  0.559799     -0.580177     -0.353809      0.353809       8.32928       8.68309    
  56  0.492929     -0.707390     -0.431387      0.431387       8.15023       8.58162    
  57  0.655290     -0.422678     -0.257761      0.257761       8.09050       8.34826    
  58  0.426949     -0.851091     -0.519020      0.519020       8.24941       8.76843    
  59  0.575269     -0.552918     -0.337185      0.337185       8.07742       8.41460    
  60  0.252283      -1.37721     -0.839860      0.839860       8.17237       9.01223    
  61  0.628464     -0.464477     -0.283251      0.283251       8.09754       8.38079    
  62  0.847342E-01  -2.46824      -1.50520       1.50520       8.10246       9.60766    
  63  0.701567     -0.354439     -0.216147      0.216147       8.11627       8.33241    
  64  0.171664      -1.76222      -1.07465       1.07465       8.07678       9.15143    
  65  0.395346     -0.927995     -0.565918      0.565918       8.11426       8.68018    
  66  0.397662     -0.922153     -0.562355      0.562355       8.04862       8.61097    
  67  0.166798      -1.79097      -1.09219       1.09219       8.05853       9.15071    
  68  0.100957      -2.29306      -1.39838       1.39838       8.03969       9.43806    
  69  0.725220     -0.321280     -0.195926      0.195926       8.14970       8.34562    
  70  0.856561     -0.154829     -0.944194E-01  0.944194E-01   8.23753       8.33195    
loop,thermsimp(1:2)       59  0.676036      0.382866E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    255          8.19          0.86          1.12         24.37          0.08          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    256          8.83          0.86          1.13         24.31          0.09          0.05         26.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       59
neval is:      255
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       60
neval is:      255


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      255     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.304136      -1.19028     -0.725867      0.725867       8.06063       8.78650    
   2  0.843344     -0.170380     -0.103902      0.103902       8.03963       8.14353    
   3  0.457815     -0.781289     -0.476453      0.476453       8.06759       8.54405    
   4  0.933709     -0.685899E-01 -0.418281E-01  0.418281E-01   8.12070       8.16252    
   5  0.887159     -0.119731     -0.730152E-01  0.730152E-01   8.08733       8.16034    
   6  0.786211     -0.240530     -0.146682      0.146682       8.06918       8.21587    
   7  0.794803     -0.229661     -0.140054      0.140054       8.06810       8.20815    
   8  0.573435E-01  -2.85870      -1.74332       1.74332       8.13016       9.87348    
   9  0.647106     -0.435245     -0.265425      0.265425       8.09118       8.35661    
  10  0.110118      -2.20620      -1.34541       1.34541       8.09102       9.43642    
  11  0.339548      -1.08014     -0.658700      0.658700       8.09862       8.75732    
  12  0.635246     -0.453742     -0.276705      0.276705       8.10077       8.37748    
  13  0.488392     -0.716638     -0.437026      0.437026       8.06512       8.50215    
  14  0.602571     -0.506549     -0.308908      0.308908       8.11497       8.42388    
  15  0.710041     -0.342433     -0.208826      0.208826       8.05256       8.26138    
  16  0.585763     -0.534840     -0.326161      0.326161       8.18877       8.51493    
  17  0.288010      -1.24476     -0.759090      0.759090       8.23753       8.99662    
  18  0.455238     -0.786934     -0.479895      0.479895       8.11627       8.59616    
  19  0.723984     -0.322986     -0.196966      0.196966       8.32632       8.52328    
  20  0.554067     -0.590470     -0.360086      0.360086       8.09096       8.45105    
  21  0.646516     -0.436157     -0.265981      0.265981       8.14970       8.41568    
  22  0.271985      -1.30201     -0.794002      0.794002       8.09050       8.88450    
  23  0.901636E-02  -4.70871      -2.87151       2.87151       8.09541       10.9669    
  24  0.383616     -0.958114     -0.584286      0.584286       8.09754       8.68182    
  25  0.443516     -0.813022     -0.495804      0.495804       8.08698       8.58278    
  26  0.223023      -1.50048     -0.915037      0.915037       8.11412       9.02916    
  27  0.123255      -2.09350      -1.27667       1.27667       8.07742       9.35409    
  28  0.817485     -0.201523     -0.122894      0.122894       8.11494       8.23783    
  29  0.333893      -1.09693     -0.668942      0.668942       8.08867       8.75761    
  30  0.867877     -0.141706     -0.864163E-01  0.864163E-01   8.01090       8.09732    
  31  0.365747      -1.00581     -0.613374      0.613374       8.10547       8.71885    
  32  0.429445     -0.845262     -0.515465      0.515465       8.11383       8.62929    
  33  0.856620     -0.154761     -0.943778E-01  0.943778E-01   8.20747       8.30185    
  34  0.729532     -0.315352     -0.192311      0.192311       8.09048       8.28279    
  35  0.315845      -1.15251     -0.702831      0.702831       8.15023       8.85306    
  36  0.547596     -0.602217     -0.367249      0.367249       8.06856       8.43580    
  37  0.752130     -0.284846     -0.173708      0.173708       8.04862       8.22232    
  38  0.806451     -0.215112     -0.131182      0.131182       8.20225       8.33343    
  39  0.618613     -0.480275     -0.292886      0.292886       8.12933       8.42222    
  40  0.630350     -0.461480     -0.281424      0.281424       8.11426       8.39569    
  41  0.251741      -1.37935     -0.841170      0.841170       8.32928       9.17045    
  42  0.846504     -0.166640     -0.101622      0.101622       8.04995       8.15157    
  43  0.830791     -0.185377     -0.113048      0.113048       8.02972       8.14276    
  44  0.566838     -0.567681     -0.346188      0.346188       8.18610       8.53229    
  45  0.499450E-01  -2.99683      -1.82756       1.82756       8.24941       10.0770    
  46  0.976301     -0.239838E-01 -0.146260E-01  0.146260E-01   8.10859       8.12322    
  47  0.401049     -0.913672     -0.557184      0.557184       8.09327       8.65045    
  48  0.709931E-01  -2.64517      -1.61310       1.61310       8.07122       9.68432    
  49  0.920370E-02  -4.68815      -2.85897       2.85897       8.12653       10.9855    
  50  0.379723     -0.968314     -0.590506      0.590506       8.19746       8.78797    
  51  0.207569      -1.57229     -0.958829      0.958829       8.06768       9.02650    
  52  0.745673     -0.293468     -0.178965      0.178965       8.10753       8.28649    
  53  0.915877     -0.878737E-01 -0.535879E-01  0.535879E-01   8.10953       8.16311    
  54  0.836769     -0.178207     -0.108676      0.108676       8.17237       8.28105    
  55  0.769684E-01  -2.56436      -1.56382       1.56382       8.17790       9.74173    
  56  0.797754     -0.225955     -0.137794      0.137794       8.09236       8.23015    
  57  0.555189     -0.588446     -0.358851      0.358851       8.05853       8.41738    
  58  0.134224      -2.00825      -1.22469       1.22469       8.07678       9.30147    
  59  0.796234     -0.227862     -0.138957      0.138957       8.08186       8.22082    
  60  0.628721     -0.464068     -0.283002      0.283002       8.16632       8.44932    
  61  0.460391     -0.775679     -0.473031      0.473031       8.09139       8.56442    
  62  0.137302      -1.98558      -1.21086       1.21086       8.24674       9.45760    
  63  0.504249     -0.684686     -0.417541      0.417541       8.15194       8.56948    
  64  0.548486     -0.600594     -0.366260      0.366260       8.03969       8.40595    
  65  0.479259     -0.735514     -0.448537      0.448537       8.10246       8.55099    
  66  0.763784     -0.269471     -0.164331      0.164331       8.10022       8.26455    
  67  0.896024     -0.109788     -0.669518E-01  0.669518E-01   8.25932       8.32627    
  68  0.873307     -0.135468     -0.826122E-01  0.826122E-01   8.11654       8.19915    
  69  0.469885     -0.755268     -0.460584      0.460584       8.00020       8.46078    
  70  0.705401     -0.348988     -0.212823      0.212823       8.19304       8.40586    
loop,thermsimp(1:2)       60  0.725867      0.103902    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    257          8.09          0.86          1.12         24.34          0.08          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    258          8.27          0.86          1.12         24.35          0.10          0.05         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       60
neval is:      257
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       61
neval is:      257


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      257     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.829682     -0.186713     -0.113863      0.113863       8.01090       8.12476    
   2  0.735850     -0.306729     -0.187052      0.187052       8.10859       8.29564    
   3  0.828786     -0.187793     -0.114522      0.114522       8.02972       8.14424    
   4  0.592078     -0.524118     -0.319622      0.319622       8.03963       8.35925    
   5  0.691797E-01  -2.67105      -1.62888       1.62888       8.04995       9.67883    
   6  0.772335     -0.258337     -0.157541      0.157541       8.08733       8.24487    
   7  0.504563     -0.684063     -0.417161      0.417161       8.12070       8.53786    
   8  0.700615     -0.355797     -0.216975      0.216975       8.10953       8.32650    
   9  0.764596     -0.268408     -0.163683      0.163683       8.11654       8.28022    
  10  0.459614     -0.777368     -0.474062      0.474062       8.06810       8.54216    
  11  0.931193     -0.712882E-01 -0.434736E-01  0.434736E-01   8.06918       8.11266    
  12  0.502482E-01  -2.99078      -1.82386       1.82386       8.08186       9.90572    
  13  0.498197     -0.696760     -0.424904      0.424904       8.04862       8.47352    
  14  0.551534E-01  -2.89764      -1.76706       1.76706       8.09236       9.85942    
  15  0.172209      -1.75905      -1.07272       1.07272       8.11494       9.18765    
  16  0.238868E-01  -3.73443      -2.27736       2.27736       8.05256       10.3299    
  17  0.699366     -0.357581     -0.218063      0.218063       8.10022       8.31828    
  18  0.764093     -0.269066     -0.164084      0.164084       8.17237       8.33646    
  19  0.465633     -0.764357     -0.466127      0.466127       8.09048       8.55660    
  20  0.209906      -1.56110     -0.952002      0.952002       8.10753       9.05953    
  21  0.216891      -1.52836     -0.932038      0.932038       8.20747       9.13951    
  22  0.795854E-01  -2.53092      -1.54343       1.54343       8.25932       9.80275    
  23  0.701683     -0.354273     -0.216046      0.216046       8.20225       8.41830    
  24  0.574425     -0.554385     -0.338080      0.338080       8.09118       8.42926    
  25  0.674968     -0.393090     -0.239717      0.239717       8.10077       8.34049    
  26  0.684189     -0.379521     -0.231443      0.231443       8.11426       8.34571    
  27  0.541862     -0.612745     -0.373669      0.373669       8.19304       8.56671    
  28  0.668027     -0.403426     -0.246021      0.246021       8.03969       8.28571    
  29  0.353251      -1.04058     -0.634573      0.634573       8.14970       8.78427    
  30  0.778708     -0.250119     -0.152530      0.152530       8.05853       8.21106    
  31  0.829283     -0.187194     -0.114156      0.114156       8.12933       8.24349    
  32  0.679297     -0.386697     -0.235819      0.235819       8.11497       8.35079    
  33  0.536301     -0.623060     -0.379960      0.379960       8.06856       8.44852    
  34  0.247738      -1.39538     -0.850944      0.850944       8.16632       9.01726    
  35  0.271399      -1.30416     -0.795316      0.795316       8.09096       8.88628    
  36  0.284124      -1.25835     -0.767376      0.767376       8.00020       8.76757    
  37  0.664442     -0.408808     -0.249303      0.249303       8.06512       8.31443    
  38  0.874508     -0.134094     -0.817741E-01  0.817741E-01   8.18877       8.27054    
  39  0.916444     -0.872538E-01 -0.532099E-01  0.532099E-01   8.32632       8.37953    
  40  0.295165      -1.22022     -0.744125      0.744125       8.18610       8.93023    
  41  0.242592      -1.41637     -0.863746      0.863746       8.06759       8.93134    
  42  0.396124     -0.926028     -0.564719      0.564719       8.10246       8.66717    
  43  0.509193E-01  -2.97751      -1.81577       1.81577       8.09139       9.90716    
  44  0.778911     -0.249858     -0.152371      0.152371       8.15194       8.30431    
  45  0.351009      -1.04694     -0.638456      0.638456       8.08698       8.72543    
  46  0.480934     -0.732025     -0.446410      0.446410       8.11627       8.56268    
  47  0.908579     -0.958731E-01 -0.584662E-01  0.584662E-01   8.11383       8.17229    
  48  0.898885     -0.106600     -0.650076E-01  0.650076E-01   8.09327       8.15827    
  49  0.561121     -0.577819     -0.352370      0.352370       8.09754       8.44991    
  50  0.851109     -0.161215     -0.983138E-01  0.983138E-01   8.10547       8.20379    
  51  0.975854     -0.244425E-01 -0.149057E-01  0.149057E-01   8.09862       8.11353    
  52  0.187829      -1.67223      -1.01977       1.01977       8.08867       9.10844    
  53  0.962131     -0.386049E-01 -0.235424E-01  0.235424E-01   8.06063       8.08417    
  54  0.823812     -0.193813     -0.118193      0.118193       8.19746       8.31566    
  55  0.765207     -0.267609     -0.163196      0.163196       8.15023       8.31343    
  56  0.207984      -1.57030     -0.957611      0.957611       8.09050       9.04811    
  57  0.675792     -0.391869     -0.238973      0.238973       8.23753       8.47650    
  58  0.641275     -0.444296     -0.270945      0.270945       8.06768       8.33862    
  59  0.621346E-01  -2.77845      -1.69438       1.69438       8.11412       9.80850    
  60  0.911977E-01  -2.39473      -1.46037       1.46037       8.32928       9.78965    
  61  0.697078     -0.360859     -0.220062      0.220062       8.07678       8.29685    
  62  0.760976     -0.273154     -0.166577      0.166577       8.07742       8.24399    
  63  0.812117     -0.208111     -0.126912      0.126912       8.09102       8.21793    
  64  0.654868     -0.423322     -0.258154      0.258154       8.24674       8.50489    
  65  0.263345E-02  -5.93946      -3.62205       3.62205       8.07122       11.6933    
  66  0.180895      -1.70984      -1.04271       1.04271       8.17790       9.22061    
  67  0.830100     -0.186209     -0.113556      0.113556       8.13016       8.24372    
  68  0.396842E-01  -3.22680      -1.96780       1.96780       8.24941       10.2172    
  69  0.862274     -0.148182     -0.903655E-01  0.903655E-01   8.09541       8.18578    
  70  0.362095      -1.01585     -0.619494      0.619494       8.09359       8.71309    
loop,thermsimp(1:2)       61  0.113863      0.187052    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    259          8.11          0.86          1.12         24.30          0.08          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    260          8.31          0.86          1.12         24.34          0.09          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       61
neval is:      259
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       62
neval is:      259


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      259     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.917395     -0.862167E-01 -0.525774E-01  0.525774E-01   8.06063       8.11321    
   2  0.899579E-01  -2.40841      -1.46872       1.46872       8.06918       9.53790    
   3  0.997625     -0.237830E-02 -0.145036E-02  0.145036E-02   8.09862       8.10008    
   4  0.224083      -1.49574     -0.912145      0.912145       8.01090       8.92304    
   5  0.120769      -2.11388      -1.28910       1.28910       8.02972       9.31882    
   6  0.302676E-01  -3.49768      -2.13298       2.13298       8.09327       10.2262    
   7  0.315161      -1.15467     -0.704151      0.704151       8.11383       8.81798    
   8  0.155895      -1.85857      -1.13341       1.13341       8.09541       9.22882    
   9  0.467639     -0.760060     -0.463506      0.463506       8.10547       8.56898    
  10  0.277823      -1.28077     -0.781050      0.781050       8.05853       8.83958    
  11  0.712282     -0.339281     -0.206903      0.206903       8.09102       8.29792    
  12  0.929560     -0.730437E-01 -0.445441E-01  0.445441E-01   8.12933       8.17388    
  13  0.499024     -0.695101     -0.423892      0.423892       8.13016       8.55406    
  14  0.940347     -0.615066E-01 -0.375085E-01  0.375085E-01   8.07742       8.11493    
  15  0.714006     -0.336864     -0.205429      0.205429       8.08733       8.29276    
  16  0.162603      -1.81644      -1.10772       1.10772       8.18877       9.29649    
  17  0.663729     -0.409881     -0.249957      0.249957       8.11654       8.36650    
  18  0.314148      -1.15789     -0.706116      0.706116       8.03969       8.74580    
  19  0.497386     -0.698388     -0.425897      0.425897       8.10859       8.53449    
  20  0.368387     -0.998622     -0.608989      0.608989       8.07678       8.68577    
  21  0.326342      -1.11981     -0.682891      0.682891       8.15194       8.83483    
  22  0.442952     -0.814294     -0.496580      0.496580       8.15023       8.64681    
  23  0.929694     -0.729000E-01 -0.444565E-01  0.444565E-01   8.06512       8.10958    
  24  0.945450E-01  -2.35868      -1.43839       1.43839       8.19746       9.63585    
  25  0.407158     -0.898555     -0.547964      0.547964       8.10022       8.64818    
  26  0.706679     -0.347179     -0.211720      0.211720       8.10953       8.32125    
  27  0.657848     -0.418781     -0.255385      0.255385       8.17237       8.42776    
  28  0.968040     -0.324817E-01 -0.198083E-01  0.198083E-01   8.06768       8.08748    
  29  0.330387      -1.10749     -0.675379      0.675379       8.10077       8.77615    
  30  0.756161     -0.279501     -0.170448      0.170448       8.11426       8.28471    
  31  0.307772      -1.17840     -0.718620      0.718620       8.11497       8.83359    
  32  0.759008E-01  -2.57833      -1.57234       1.57234       8.03963       9.61197    
  33  0.615618E-01  -2.78771      -1.70003       1.70003       8.32632       10.0263    
  34  0.545984     -0.605166     -0.369048      0.369048       8.20225       8.57130    
  35  0.339865      -1.07921     -0.658131      0.658131       8.09118       8.74931    
  36  0.816477     -0.202757     -0.123647      0.123647       8.06856       8.19220    
  37  0.932889     -0.694691E-01 -0.423642E-01  0.423642E-01   8.09754       8.13990    
  38  0.667042     -0.404902     -0.246921      0.246921       8.04862       8.29554    
  39  0.583049     -0.539484     -0.328993      0.328993       8.23753       8.56652    
  40  0.210192      -1.55973     -0.951171      0.951171       8.24674       9.19791    
  41  0.158846      -1.83982      -1.12198       1.12198       8.12070       9.24267    
  42  0.360401      -1.02054     -0.622353      0.622353       8.06810       8.69045    
  43  0.508154     -0.676971     -0.412836      0.412836       8.09048       8.50331    
  44  0.873303     -0.135473     -0.826153E-01  0.826153E-01   8.11627       8.19888    
  45  0.650524     -0.429977     -0.262213      0.262213       8.19304       8.45525    
  46  0.805601     -0.216166     -0.131824      0.131824       8.10246       8.23428    
  47  0.312590E-03  -8.07062      -4.92169       4.92169       8.09359       13.0153    
  48  0.892261     -0.113997     -0.695185E-01  0.695185E-01   8.08698       8.15650    
  49  0.504672     -0.683846     -0.417029      0.417029       8.00020       8.41723    
  50  0.269834      -1.30995     -0.798843      0.798843       8.14970       8.94854    
  51  0.752889     -0.283838     -0.173092      0.173092       8.09096       8.26406    
  52  0.952800     -0.483498E-01 -0.294851E-01  0.294851E-01   8.18610       8.21559    
  53  0.147189E-01  -4.21863      -2.57264       2.57264       8.06759       10.6402    
  54  0.213392      -1.54462     -0.941956      0.941956       8.16632       9.10827    
  55  0.278061      -1.27992     -0.780530      0.780530       8.09050       8.87103    
  56  0.668800     -0.402271     -0.245316      0.245316       8.10753       8.35284    
  57  0.674989     -0.393058     -0.239698      0.239698       8.08867       8.32837    
  58  0.186370      -1.68002      -1.02452       1.02452       8.20747       9.23199    
  59  0.133078      -2.01682      -1.22991       1.22991       8.11494       9.34485    
  60  0.519821     -0.654270     -0.398993      0.398993       8.17790       8.57690    
  61  0.136847      -1.98889      -1.21288       1.21288       8.04995       9.26283    
  62  0.604880     -0.502725     -0.306576      0.306576       8.32928       8.63585    
  63  0.301519      -1.19892     -0.731137      0.731137       8.25932       8.99046    
  64  0.531506     -0.632040     -0.385436      0.385436       8.11412       8.49956    
  65  0.554963     -0.588854     -0.359100      0.359100       8.09236       8.45146    
  66  0.264726      -1.32906     -0.810499      0.810499       8.08186       8.89236    
  67  0.520437     -0.653087     -0.398271      0.398271       8.09139       8.48966    
  68  0.457095     -0.782865     -0.477413      0.477413       8.24941       8.72682    
  69  0.349515      -1.05121     -0.641058      0.641058       8.05256       8.69362    
  70  0.624446E-01  -2.77348      -1.69135       1.69135       8.11238       9.80372    
loop,thermsimp(1:2)       62  0.525774E-01   1.46872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    261          8.12          0.86          1.12         24.43          0.07          0.05         26.54
Just calling func    0   0         26.54


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    262          8.41          0.86          1.12         24.73          0.09          0.05         26.85
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  260    8.1169        1.162     -1.837      3.210     -102.6      1.361    
                      0.3226      1.304     -99.70      3.729    -0.2039E-01

                       2.210     -1.086      1.530      6910.      3447.    

                     -0.1772      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6111.      518.3    

                       1.433     -5.909     -4.134     -8.511      6.624    

                      -14.89     -3.602      8566.      0.000     0.1130E+05



                       1378.     0.1111E+05 -3536.     0.1058E+05  5290.    

                       5141.     0.1780E-01 0.3333     0.3282E-03 0.1113    

                     -0.2486    -0.9233E-01 0.1803     0.1097     0.5737E-01



                     -0.4683    -0.7882      0.000     0.8318E-01-0.7829E-01

                      0.3282E-03 0.9989E-01-0.7116    -0.1518     0.4062E-01

                      0.4510E-01 0.1203    -0.6685     -1.212      7086.    



                      -1.065     -1.218     -2.258     -2.327    -0.3807    

                     -0.3252      9.215      8.675    -0.1907E+05 -4.000    

                     -0.5899     -2.178      9.285      8.864    -0.1908E+05



                      -4.000     0.4557    -0.4745      8.855      9.078    

                     -0.1908E+05 -7.000    -0.7813    -0.7005      9.034    

                       8.768    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       62
neval is:      261
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       63
neval is:      261


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      261     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.617195     -0.482570     -0.294285      0.294285       8.06768       8.36196    
   2  0.828850     -0.187716     -0.114474      0.114474       8.09862       8.21310    
   3  0.138898      -1.97402      -1.20381       1.20381       8.06512       9.26894    
   4  0.174947      -1.74327      -1.06310       1.06310       8.06063       9.12373    
   5  0.452367E-01  -3.09585      -1.88794       1.88794       8.07742       9.96535    
   6  0.982229     -0.179305E-01 -0.109345E-01  0.109345E-01   8.09754       8.10847    
   7  0.855728     -0.155803     -0.950131E-01  0.950131E-01   8.08698       8.18199    
   8  0.350750      -1.04768     -0.638906      0.638906       8.12933       8.76824    
   9  0.880054     -0.127772     -0.779191E-01  0.779191E-01   8.06856       8.14647    
  10  0.106511      -2.23950      -1.36571       1.36571       8.11627       9.48198    
  11  0.336060      -1.09047     -0.664998      0.664998       8.18610       8.85110    
  12  0.904819     -0.100020     -0.609952E-01  0.609952E-01   8.10246       8.16345    
  13  0.765597     -0.267099     -0.162885      0.162885       8.09096       8.25385    
  14  0.551789     -0.594589     -0.362597      0.362597       8.11426       8.47686    
  15  0.832435     -0.183400     -0.111842      0.111842       8.08733       8.19917    
  16  0.353494      -1.03989     -0.634155      0.634155       8.04862       8.68277    
  17  0.510104     -0.673140     -0.410500      0.410500       8.09102       8.50152    
  18  0.523162     -0.647863     -0.395086      0.395086       8.10953       8.50461    
  19  0.953043     -0.480957E-01 -0.293301E-01  0.293301E-01   8.08867       8.11800    
  20  0.267001E-01  -3.62309      -2.20946       2.20946       8.10753       10.3170    
  21  0.280924      -1.26967     -0.774281      0.774281       8.11654       8.89082    
  22  0.956868     -0.440901E-01 -0.268874E-01  0.268874E-01   8.00020       8.02709    
  23  0.779725     -0.248814     -0.151734      0.151734       8.17237       8.32411    
  24  0.901061     -0.104183     -0.635337E-01  0.635337E-01   8.09236       8.15589    
  25  0.533391     -0.628501     -0.383278      0.383278       8.19304       8.57631    
  26  0.642536     -0.442333     -0.269747      0.269747       8.09139       8.36114    
  27  0.520565E-01  -2.95543      -1.80230       1.80230       8.11412       9.91643    
  28  0.330080      -1.10842     -0.675946      0.675946       8.09048       8.76642    
  29  0.280801      -1.27011     -0.774549      0.774549       8.10859       8.88314    
  30  0.144013      -1.93785      -1.18176       1.18176       8.13016       9.31192    
  31  0.201537      -1.60178     -0.976811      0.976811       8.23753       9.21434    
  32  0.920188     -0.831777E-01 -0.507242E-01  0.507242E-01   8.10547       8.15620    
  33  0.747222     -0.291393     -0.177700      0.177700       8.20225       8.37995    
  34  0.697959     -0.359595     -0.219291      0.219291       8.17790       8.39720    
  35  0.492949     -0.707349     -0.431361      0.431361       8.32928       8.76064    
  36  0.378001     -0.972857     -0.593276      0.593276       8.15023       8.74351    
  37  0.936484     -0.656225E-01 -0.400185E-01  0.400185E-01   8.10022       8.14024    
  38  0.458232     -0.780381     -0.475899      0.475899       8.07678       8.55268    
  39  0.286796      -1.24898     -0.761667      0.761667       8.06810       8.82977    
  40  0.524458     -0.645389     -0.393577      0.393577       8.05256       8.44614    
  41  0.126679      -2.06610      -1.25997       1.25997       8.24941       9.50938    
  42  0.645270     -0.438086     -0.267157      0.267157       8.03969       8.30685    
  43  0.996049     -0.395919E-02 -0.241443E-02  0.241443E-02   8.09118       8.09360    
  44  0.470695     -0.753545     -0.459533      0.459533       8.10077       8.56030    
  45  0.783048     -0.244561     -0.149140      0.149140       8.11383       8.26297    
  46  0.682425     -0.382103     -0.233017      0.233017       8.11497       8.34799    
  47  0.623779     -0.471960     -0.287815      0.287815       8.15194       8.43976    
  48  0.138146      -1.97945      -1.20712       1.20712       8.05853       9.26565    
  49  0.317697      -1.14666     -0.699264      0.699264       8.09050       8.78976    
  50  0.215616      -1.53426     -0.935633      0.935633       8.08186       9.01749    
  51  0.392653     -0.934829     -0.570085      0.570085       8.01090       8.58098    
  52  0.311957      -1.16489     -0.710384      0.710384       8.14970       8.86008    
  53  0.665567     -0.407116     -0.248271      0.248271       8.25932       8.50759    
  54  0.124333      -2.08479      -1.27136       1.27136       8.16632       9.43768    
  55  0.175373      -1.74084      -1.06161       1.06161       8.24674       9.30835    
  56  0.712195E-01  -2.64199      -1.61116       1.61116       8.09541       9.70657    
  57  0.626551E-01  -2.77011      -1.68929       1.68929       8.20747       9.89676    
  58  0.869671     -0.139640     -0.851565E-01  0.851565E-01   8.12070       8.20585    
  59  0.112950      -2.18081      -1.32992       1.32992       8.04995       9.37987    
  60  0.837299     -0.177574     -0.108289      0.108289       8.18877       8.29706    
  61  0.380546     -0.966149     -0.589185      0.589185       8.02972       8.61890    
  62  0.225371      -1.49001     -0.908650      0.908650       8.11494       9.02359    
  63  0.556139     -0.586737     -0.357809      0.357809       8.06918       8.42699    
  64  0.909618     -0.947309E-01 -0.577696E-01  0.577696E-01   8.03963       8.09740    
  65  0.432012     -0.839301     -0.511830      0.511830       8.19746       8.70929    
  66  0.554192     -0.590244     -0.359948      0.359948       8.11238       8.47232    
  67  0.264884      -1.32846     -0.810135      0.810135       8.32632       9.13645    
  68  0.667330     -0.404471     -0.246658      0.246658       8.09327       8.33993    
  69  0.445504     -0.808549     -0.493076      0.493076       8.06759       8.56067    
  70  0.194275      -1.63848     -0.999194      0.999194       8.11693       9.11613    
loop,thermsimp(1:2)       63  0.294285      0.114474    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    263          8.06          0.87          1.12         24.31          0.08          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    264          8.03          0.86          1.12         24.34          0.09          0.05         26.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       63
neval is:      263
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       64
neval is:      263


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      263     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.816548     -0.202670     -0.123594      0.123594       8.00020       8.12379    
   2  0.209930      -1.56098     -0.951932      0.951932       8.09118       9.04311    
   3  0.710991     -0.341096     -0.208010      0.208010       8.03963       8.24764    
   4  0.967365     -0.331789E-01 -0.202334E-01  0.202334E-01   8.09754       8.11777    
   5  0.650635E-01  -2.73239      -1.66629       1.66629       8.08867       9.75496    
   6  0.578340     -0.547593     -0.333938      0.333938       8.10022       8.43416    
   7  0.928890E-01  -2.37635      -1.44917       1.44917       8.06856       9.51772    
   8  0.486974     -0.719546     -0.438800      0.438800       8.09236       8.53115    
   9  0.560625     -0.578703     -0.352910      0.352910       8.10547       8.45838    
  10  0.552834     -0.592698     -0.361444      0.361444       8.10246       8.46390    
  11  0.744529E-01  -2.59759      -1.58408       1.58408       8.08698       9.67106    
  12  0.937600     -0.644318E-01 -0.392924E-01  0.392924E-01   8.08733       8.12662    
  13  0.154459      -1.86783      -1.13906       1.13906       8.12070       9.25975    
  14  0.186893E-02  -6.28239      -3.83118       3.83118       8.09862       11.9298    
  15  0.250797      -1.38311     -0.843461      0.843461       8.09096       8.93442    
  16  0.924847E-01  -2.38071      -1.45183       1.45183       8.11383       9.56565    
  17  0.476680     -0.740911     -0.451829      0.451829       8.18877       8.64060    
  18  0.266527      -1.32228     -0.806363      0.806363       8.03969       8.84605    
  19  0.369755     -0.994916     -0.606728      0.606728       8.17237       8.77910    
  20  0.595561     -0.518252     -0.316045      0.316045       8.09327       8.40931    
  21  0.636070     -0.452447     -0.275915      0.275915       8.11497       8.39089    
  22  0.447294     -0.804540     -0.490632      0.490632       8.09139       8.58202    
  23  0.964945     -0.356839E-01 -0.217611E-01  0.217611E-01   8.06768       8.08944    
  24  0.752421     -0.284460     -0.173472      0.173472       8.20225       8.37572    
  25  0.705556     -0.348769     -0.212689      0.212689       8.17790       8.39059    
  26  0.943467     -0.581939E-01 -0.354883E-01  0.354883E-01   8.06918       8.10467    
  27  0.272564      -1.29988     -0.792705      0.792705       8.15194       8.94465    
  28  0.215815      -1.53333     -0.935070      0.935070       8.05256       8.98763    
  29  0.756955     -0.278452     -0.169808      0.169808       8.11238       8.28218    
  30  0.538381     -0.619189     -0.377599      0.377599       8.11426       8.49186    
  31  0.182967      -1.69845      -1.03576       1.03576       8.09102       9.12678    
  32  0.644758     -0.438881     -0.267642      0.267642       8.10953       8.37717    
  33  0.939477     -0.624320E-01 -0.380728E-01  0.380728E-01   8.25932       8.29739    
  34  0.663186     -0.410699     -0.250456      0.250456       8.07678       8.32724    
  35  0.795014     -0.229396     -0.139892      0.139892       8.10077       8.24066    
  36  0.630792     -0.460779     -0.280996      0.280996       8.06759       8.34859    
  37  0.151039      -1.89022      -1.15271       1.15271       8.19304       9.34574    
  38  0.668306     -0.403009     -0.245766      0.245766       8.01090       8.25667    
  39  0.683820     -0.380061     -0.231772      0.231772       8.02972       8.26149    
  40  0.122229      -2.10186      -1.28177       1.28177       8.04862       9.33039    
  41  0.664453     -0.408791     -0.249292      0.249292       8.19746       8.44675    
  42  0.548687     -0.600228     -0.366036      0.366036       8.15023       8.51627    
  43  0.931535     -0.709210E-01 -0.432497E-01  0.432497E-01   8.32928       8.37253    
  44  0.139742      -1.96796      -1.20012       1.20012       8.09048       9.29059    
  45  0.429142     -0.845967     -0.515895      0.515895       8.12933       8.64523    
  46  0.531147     -0.632717     -0.385849      0.385849       8.09050       8.47635    
  47  0.575558     -0.552416     -0.336879      0.336879       8.06810       8.40498    
  48  0.336537      -1.08905     -0.664132      0.664132       8.18610       8.85023    
  49  0.324486      -1.12551     -0.686370      0.686370       8.14970       8.83607    
  50  0.652768     -0.426534     -0.260113      0.260113       8.10859       8.36870    
  51  0.537860     -0.620158     -0.378190      0.378190       8.11654       8.49473    
  52  0.415288     -0.878782     -0.535907      0.535907       8.08186       8.61777    
  53  0.771827     -0.258995     -0.157943      0.157943       8.11494       8.27288    
  54  0.537995     -0.619906     -0.378036      0.378036       8.11693       8.49497    
  55  0.438537     -0.824310     -0.502688      0.502688       8.06063       8.56332    
  56  0.872114     -0.136835     -0.834457E-01  0.834457E-01   8.32632       8.40976    
  57  0.974519E-01  -2.32840      -1.41992       1.41992       8.23753       9.65745    
  58  0.245035      -1.40635     -0.857635      0.857635       8.05853       8.91616    
  59  0.285418      -1.25380     -0.764604      0.764604       8.06512       8.82973    
  60  0.598735     -0.512936     -0.312803      0.312803       8.24674       8.55954    
  61  0.440039     -0.820892     -0.500603      0.500603       8.13016       8.63077    
  62  0.115587      -2.15774      -1.31585       1.31585       8.04995       9.36580    
  63  0.479716     -0.734560     -0.447956      0.447956       8.16632       8.61427    
  64  0.423297     -0.859681     -0.524258      0.524258       8.11627       8.64053    
  65  0.385689E-01  -3.25531      -1.98518       1.98518       8.24941       10.2346    
  66  0.504564     -0.684061     -0.417160      0.417160       8.09541       8.51257    
  67  0.406483     -0.900213     -0.548975      0.548975       8.20747       8.75644    
  68  0.362573E-01  -3.31712      -2.02287       2.02287       8.11412       10.1370    
  69  0.666448E-03  -7.31355      -4.46001       4.46001       8.07742       12.5374    
  70  0.428061     -0.848489     -0.517433      0.517433       8.03442       8.55185    
loop,thermsimp(1:2)       64  0.123594      0.951932    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    265          8.08          0.86          1.13         24.47          0.09          0.04         26.59
Just calling func    0   0         26.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    266          8.40          0.87          1.13         24.33          0.06          0.05         26.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       64
neval is:      265
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       64      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       65
neval is:      265


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      265     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.367522      -1.00097     -0.610422      0.610422       8.06768       8.67810    
   2  0.298218      -1.20993     -0.737850      0.737850       8.06918       8.80703    
   3  0.374092     -0.983254     -0.599616      0.599616       8.09754       8.69715    
   4  0.417366     -0.873791     -0.532863      0.532863       8.00020       8.53306    
   5  0.299382      -1.20604     -0.735475      0.735475       8.08733       8.82280    
   6  0.373029     -0.986099     -0.601352      0.601352       8.10077       8.70212    
   7  0.628224     -0.464858     -0.283484      0.283484       8.03963       8.32311    
   8  0.111397      -2.19465      -1.33836       1.33836       8.01090       9.34926    
   9  0.983555     -0.165818E-01 -0.101120E-01  0.101120E-01   8.02972       8.03983    
  10  0.394578     -0.929938     -0.567103      0.567103       8.11494       8.68204    
  11  0.410639     -0.890042     -0.542773      0.542773       8.11238       8.65515    
  12  0.700680     -0.355705     -0.216919      0.216919       8.25932       8.47624    
  13  0.223946      -1.49635     -0.912519      0.912519       8.07678       8.98930    
  14  0.651113E-01  -2.73166      -1.66584       1.66584       8.06759       9.73344    
  15  0.704010     -0.350963     -0.214027      0.214027       8.10859       8.32262    
  16  0.172411      -1.75787      -1.07200       1.07200       8.32928       9.40128    
  17  0.567412     -0.566670     -0.345572      0.345572       8.20225       8.54782    
  18  0.186334      -1.68021      -1.02464       1.02464       8.10953       9.13417    
  19  0.677524     -0.389310     -0.237413      0.237413       8.17790       8.41532    
  20  0.362270      -1.01537     -0.619199      0.619199       8.11497       8.73417    
  21  0.603880     -0.504381     -0.307586      0.307586       8.06810       8.37569    
  22  0.782208     -0.245635     -0.149795      0.149795       8.09327       8.24306    
  23  0.129808      -2.04170      -1.24509       1.24509       8.32632       9.57141    
  24  0.284816      -1.25591     -0.765892      0.765892       8.10022       8.86611    
  25  0.246930      -1.39865     -0.852937      0.852937       8.19746       9.05040    
  26  0.256917      -1.35900     -0.828758      0.828758       8.10547       8.93423    
  27  0.240545      -1.42485     -0.868914      0.868914       8.10246       8.97137    
  28  0.218018      -1.52318     -0.928878      0.928878       8.09050       9.01938    
  29  0.235583E-01  -3.74828      -2.28581       2.28581       8.11426       10.4001    
  30  0.114660      -2.16578      -1.32076       1.32076       8.11654       9.43729    
  31  0.119129      -2.12755      -1.29744       1.29744       8.11693       9.41438    
  32  0.471707     -0.751398     -0.458224      0.458224       8.09541       8.55364    
  33  0.607413     -0.498546     -0.304027      0.304027       8.15023       8.45426    
  34  0.568731     -0.564347     -0.344155      0.344155       8.09236       8.43651    
  35  0.587492     -0.531893     -0.324364      0.324364       8.03442       8.35878    
  36  0.411259     -0.888533     -0.541853      0.541853       8.24674       8.78859    
  37  0.836192     -0.178897     -0.109096      0.109096       8.06063       8.16973    
  38  0.152977      -1.87747      -1.14493       1.14493       8.09139       9.23632    
  39  0.941831     -0.599291E-01 -0.365465E-01  0.365465E-01   8.16632       8.20286    
  40  0.936595     -0.655045E-01 -0.399465E-01  0.399465E-01   8.08186       8.12181    
  41  0.856621     -0.154759     -0.943766E-01  0.943766E-01   8.13016       8.22454    
  42  0.484786     -0.724047     -0.441545      0.441545       8.11627       8.55781    
  43  0.188261      -1.66993      -1.01837       1.01837       8.18877       9.20714    
  44  0.957606     -0.433189E-01 -0.264171E-01  0.264171E-01   8.12933       8.15575    
  45  0.234891      -1.44863     -0.883418      0.883418       8.20747       9.09089    
  46  0.758920     -0.275858     -0.168226      0.168226       8.17237       8.34060    
  47  0.135340      -1.99997      -1.21964       1.21964       8.06512       9.28476    
  48  0.779121E-01  -2.55217      -1.55639       1.55639       8.14970       9.70608    
  49  0.573767     -0.555531     -0.338779      0.338779       8.03969       8.37847    
  50  0.982512     -0.176424E-01 -0.107588E-01  0.107588E-01   8.18610       8.19686    
  51  0.109579      -2.21111      -1.34840       1.34840       8.05853       9.40693    
  52  0.714543     -0.336113     -0.204971      0.204971       8.09096       8.29593    
  53  0.573216     -0.556492     -0.339365      0.339365       8.15194       8.49131    
  54  0.389116     -0.943877     -0.575603      0.575603       8.05256       8.62816    
  55  0.149817      -1.89834      -1.15766       1.15766       8.09118       9.24885    
  56  0.623269     -0.472778     -0.288313      0.288313       8.09102       8.37933    
  57  0.682320E-02  -4.98743      -3.04148       3.04148       8.12070       11.1622    
  58  0.641698     -0.443637     -0.270543      0.270543       8.09048       8.36102    
  59  0.233363      -1.45516     -0.887399      0.887399       8.04862       8.93602    
  60  0.881483     -0.126150     -0.769299E-01  0.769299E-01   8.19304       8.26997    
  61  0.264921      -1.32832     -0.810049      0.810049       8.04995       8.86000    
  62  0.941652     -0.601200E-01 -0.366629E-01  0.366629E-01   8.06856       8.10522    
  63  0.179971      -1.71496      -1.04583       1.04583       8.11383       9.15966    
  64  0.381207E-01  -3.26700      -1.99231       1.99231       8.23753       10.2298    
  65  0.998657     -0.134405E-02 -0.819641E-03  0.819641E-03   8.08698       8.08780    
  66  0.553871     -0.590823     -0.360301      0.360301       8.08867       8.44897    
  67  0.599651     -0.511408     -0.311871      0.311871       8.11412       8.42599    
  68  0.834589     -0.180815     -0.110266      0.110266       8.24941       8.35968    
  69  0.622560     -0.473915     -0.289007      0.289007       8.09862       8.38763    
  70  0.437672E-03  -7.73404      -4.71644       4.71644       8.08500       12.8014    
loop,thermsimp(1:2)       65  0.610422      0.737850    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    267          8.08          0.86          1.13         24.36          0.07          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    268          8.18          0.87          1.13         24.29          0.06          0.05         26.40
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       65
neval is:      267
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       65      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       66
neval is:      267


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      267     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.255462      -1.36468     -0.832222      0.832222       8.02972       8.86194    
   2  0.513427E-01  -2.96923      -1.81072       1.81072       8.08698       9.89770    
   3  0.288453      -1.24322     -0.758154      0.758154       8.06856       8.82671    
   4  0.107044      -2.23452      -1.36267       1.36267       8.08186       9.44453    
   5  0.756779     -0.278684     -0.169949      0.169949       8.12933       8.29928    
   6  0.333762      -1.09733     -0.669182      0.669182       8.06063       8.72981    
   7  0.270335      -1.30809     -0.797714      0.797714       8.18610       8.98382    
   8  0.666278E-01  -2.70863      -1.65180       1.65180       8.16632       9.81812    
   9  0.517510     -0.658727     -0.401710      0.401710       8.13016       8.53187    
  10  0.719680     -0.328949     -0.200602      0.200602       8.09327       8.29387    
  11  0.401542     -0.912442     -0.556433      0.556433       8.19304       8.74947    
  12  0.408125     -0.896181     -0.546517      0.546517       8.09096       8.63748    
  13  0.481086     -0.731710     -0.446218      0.446218       8.10859       8.55481    
  14  0.166952E-01  -4.09263      -2.49580       2.49580       8.03963       10.5354    
  15  0.913266     -0.907286E-01 -0.553289E-01  0.553289E-01   8.17237       8.22770    
  16  0.972084     -0.283134E-01 -0.172663E-01  0.172663E-01   8.03442       8.05168    
  17  0.889421     -0.117184     -0.714624E-01  0.714624E-01   8.24941       8.32087    
  18  0.171754      -1.76169      -1.07433       1.07433       8.09048       9.16481    
  19  0.925876     -0.770155E-01 -0.469662E-01  0.469662E-01   8.06810       8.11507    
  20  0.992897     -0.712866E-02 -0.434726E-02  0.434726E-02   8.03969       8.04404    
  21  0.118575E-01  -4.43479      -2.70446       2.70446       8.09102       10.7955    
  22  0.492413     -0.708438     -0.432026      0.432026       8.09862       8.53065    
  23  0.952433     -0.487360E-01 -0.297206E-01  0.297206E-01   8.17790       8.20763    
  24  0.591826     -0.524543     -0.319881      0.319881       8.11412       8.43400    
  25  0.762199     -0.271548     -0.165598      0.165598       8.09236       8.25795    
  26  0.613492     -0.488588     -0.297955      0.297955       8.08867       8.38662    
  27  0.134863      -2.00350      -1.22179       1.22179       8.15023       9.37203    
  28  0.633670     -0.456227     -0.278220      0.278220       8.25932       8.53754    
  29  0.829625     -0.186782     -0.113905      0.113905       8.15194       8.26585    
  30  0.148219      -1.90906      -1.16420       1.16420       8.00020       9.16440    
  31  0.198093      -1.61902     -0.987324      0.987324       8.20225       9.18958    
  32  0.321318      -1.13532     -0.692353      0.692353       8.09541       8.78777    
  33  0.475408     -0.743582     -0.453457      0.453457       8.11627       8.56972    
  34  0.196520      -1.62699     -0.992186      0.992186       8.05256       9.04474    
  35  0.637413     -0.450337     -0.274629      0.274629       8.11238       8.38701    
  36  0.596751     -0.516255     -0.314827      0.314827       8.06768       8.38250    
  37  0.351361      -1.04594     -0.637846      0.637846       8.11494       8.75278    
  38  0.111764      -2.19136      -1.33636       1.33636       8.09754       9.43389    
  39  0.213579      -1.54375     -0.941422      0.941422       8.10077       9.04219    
  40  0.799647     -0.223585     -0.136349      0.136349       8.11497       8.25132    
  41  0.670682     -0.399460     -0.243602      0.243602       8.24674       8.49034    
  42  0.104235      -2.26111      -1.37889       1.37889       8.06918       9.44807    
  43  0.607160E-01  -2.80155      -1.70846       1.70846       8.08733       9.79579    
  44  0.462312     -0.771516     -0.470493      0.470493       8.04995       8.52044    
  45  0.269658      -1.31060     -0.799241      0.799241       8.10022       8.89946    
  46  0.678606     -0.387714     -0.236439      0.236439       8.10547       8.34191    
  47  0.669051     -0.401895     -0.245087      0.245087       8.04862       8.29370    
  48  0.551912     -0.594367     -0.362462      0.362462       8.10246       8.46492    
  49  0.116070E-01  -4.45614      -2.71749       2.71749       8.07678       10.7943    
  50  0.911337     -0.928428E-01 -0.566182E-01  0.566182E-01   8.09050       8.14712    
  51  0.302404      -1.19599     -0.729349      0.729349       8.19746       8.92681    
  52  0.527926     -0.638800     -0.389558      0.389558       8.20747       8.59703    
  53  0.204835      -1.58555     -0.966913      0.966913       8.10953       9.07644    
  54  0.761388     -0.272612     -0.166246      0.166246       8.11383       8.28007    
  55  0.189928      -1.66111      -1.01299       1.01299       8.18877       9.20176    
  56  0.423830     -0.858422     -0.523490      0.523490       8.09139       8.61488    
  57  0.895148     -0.110767     -0.675487E-01  0.675487E-01   8.09118       8.15873    
  58  0.109823      -2.20889      -1.34704       1.34704       8.06512       9.41217    
  59  0.960076     -0.407431E-01 -0.248463E-01  0.248463E-01   8.01090       8.03575    
  60  0.694180     -0.365024     -0.222602      0.222602       8.32928       8.55188    
  61  0.302866      -1.19446     -0.728418      0.728418       8.05853       8.78695    
  62  0.213503      -1.54410     -0.941638      0.941638       8.11693       9.05857    
  63  0.949162     -0.521754E-01 -0.318180E-01  0.318180E-01   8.11654       8.14836    
  64  0.912779     -0.912617E-01 -0.556540E-01  0.556540E-01   8.32632       8.38197    
  65  0.393978     -0.931461     -0.568032      0.568032       8.14970       8.71773    
  66  0.957683     -0.432380E-01 -0.263678E-01  0.263678E-01   8.06759       8.09396    
  67  0.785605     -0.241301     -0.147152      0.147152       8.23753       8.38468    
  68  0.670559     -0.399644     -0.243714      0.243714       8.11426       8.35798    
  69  0.793392     -0.231438     -0.141137      0.141137       8.12070       8.26183    
  70  0.594443     -0.520131     -0.317191      0.317191       8.07742       8.39461    
loop,thermsimp(1:2)       66  0.832222       1.81072    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    269          8.12          0.86          1.13         24.44          0.02          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    270          8.18          0.86          1.13         24.57          0.10          0.05         26.71
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       66
neval is:      269
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       66      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       67
neval is:      269


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      269     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.297913      -1.21095     -0.738475      0.738475       8.01090       8.74937    
   2  0.840396     -0.173882     -0.106038      0.106038       8.03969       8.14573    
   3  0.165782      -1.79708      -1.09591       1.09591       8.03442       9.13033    
   4  0.516202E-01  -2.96384      -1.80744       1.80744       8.06759       9.87503    
   5  0.163201      -1.81278      -1.10548       1.10548       8.06810       9.17358    
   6  0.201529      -1.60182     -0.976836      0.976836       8.09050       9.06734    
   7  0.791805     -0.233441     -0.142359      0.142359       8.11654       8.25890    
   8  0.306466      -1.18265     -0.721212      0.721212       8.09118       8.81240    
   9  0.625963     -0.468465     -0.285683      0.285683       8.17790       8.46359    
  10  0.255827      -1.36325     -0.831352      0.831352       8.17237       9.00372    
  11  0.275269      -1.29001     -0.786683      0.786683       8.11497       8.90166    
  12  0.546374     -0.604451     -0.368612      0.368612       8.09236       8.46097    
  13  0.738275E-01  -2.60602      -1.58923       1.58923       8.12070       9.70992    
  14  0.459460     -0.777704     -0.474266      0.474266       8.15194       8.62621    
  15  0.245891      -1.40287     -0.855508      0.855508       8.11383       8.96933    
  16  0.818144E-01  -2.50330      -1.52659       1.52659       8.04862       9.57520    
  17  0.791963     -0.233241     -0.142237      0.142237       8.09327       8.23550    
  18  0.652560     -0.426852     -0.260307      0.260307       8.12933       8.38964    
  19  0.743237     -0.296740     -0.180960      0.180960       8.24941       8.43037    
  20  0.146095      -1.92350      -1.17301       1.17301       8.10547       9.27848    
  21  0.747148     -0.291492     -0.177760      0.177760       8.11426       8.29202    
  22  0.935024E-01  -2.36977      -1.44515       1.44515       8.32632       9.77147    
  23  0.924202     -0.788243E-01 -0.480693E-01  0.480693E-01   8.06768       8.11575    
  24  0.193934      -1.64024      -1.00026       1.00026       8.23753       9.23779    
  25  0.112499      -2.18481      -1.33236       1.33236       8.08867       9.42103    
  26  0.609079     -0.495807     -0.302358      0.302358       8.11238       8.41473    
  27  0.387822     -0.947210     -0.577636      0.577636       8.07742       8.65505    
  28  0.151976      -1.88403      -1.14894       1.14894       8.11412       9.26306    
  29  0.820125     -0.198299     -0.120928      0.120928       8.10246       8.22338    
  30  0.100865      -2.29397      -1.39893       1.39893       8.24674       9.64567    
  31  0.246930      -1.39865     -0.852937      0.852937       8.04995       8.90289    
  32  0.101973      -2.28305      -1.39227       1.39227       8.09862       9.49089    
  33  0.389401     -0.943145     -0.575157      0.575157       8.13016       8.70532    
  34  0.573635     -0.555762     -0.338920      0.338920       8.25932       8.59824    
  35  0.730896E-01  -2.61607      -1.59535       1.59535       8.32928       9.92463    
  36  0.260104      -1.34667     -0.821239      0.821239       8.10859       8.92983    
  37  0.562102     -0.576073     -0.351306      0.351306       8.11627       8.46757    
  38  0.159056      -1.83850      -1.12117       1.12117       8.20747       9.32864    
  39  0.779134E-02  -4.85474      -2.96056       2.96056       8.09139       11.0520    
  40  0.693208     -0.366425     -0.223457      0.223457       8.09096       8.31442    
  41  0.600279     -0.510361     -0.311233      0.311233       8.14970       8.46093    
  42  0.419387     -0.868962     -0.529918      0.529918       8.06063       8.59055    
  43  0.952036     -0.491524E-01 -0.299745E-01  0.299745E-01   8.19304       8.22301    
  44  0.613955     -0.487834     -0.297495      0.297495       8.11494       8.41243    
  45  0.842752     -0.171082     -0.104331      0.104331       8.05853       8.16286    
  46  0.733219     -0.310311     -0.189237      0.189237       8.09541       8.28465    
  47  0.776088     -0.253489     -0.154585      0.154585       8.06856       8.22314    
  48  0.965215     -0.354047E-01 -0.215908E-01  0.215908E-01   8.02972       8.05131    
  49  0.487812     -0.717826     -0.437751      0.437751       8.10022       8.53797    
  50  0.864492     -0.145613     -0.887988E-01  0.887988E-01   8.19746       8.28626    
  51  0.334607      -1.09480     -0.667640      0.667640       8.18610       8.85374    
  52  0.267438      -1.31887     -0.804283      0.804283       8.10077       8.90505    
  53  0.333561      -1.09793     -0.669549      0.669549       8.05256       8.72211    
  54  0.593184     -0.522250     -0.318483      0.318483       8.11693       8.43542    
  55  0.832475     -0.183352     -0.111814      0.111814       8.10953       8.22134    
  56  0.642050     -0.443089     -0.270209      0.270209       8.00020       8.27041    
  57  0.799223     -0.224116     -0.136672      0.136672       8.09048       8.22715    
  58  0.184219      -1.69163      -1.03161       1.03161       8.20225       9.23386    
  59  0.478229     -0.737666     -0.449850      0.449850       8.18877       8.63862    
  60  0.604888     -0.502712     -0.306568      0.306568       8.15023       8.45680    
  61  0.575395     -0.552698     -0.337051      0.337051       8.06512       8.40218    
  62  0.325892E-01  -3.42377      -2.08792       2.08792       8.09754       10.1855    
  63  0.759877     -0.274599     -0.167458      0.167458       8.08186       8.24932    
  64  0.214378      -1.54002     -0.939146      0.939146       8.06918       9.00833    
  65  0.668091     -0.403331     -0.245963      0.245963       8.08733       8.33329    
  66  0.601122     -0.508958     -0.310377      0.310377       8.16632       8.47670    
  67  0.378138     -0.972496     -0.593056      0.593056       8.08698       8.68003    
  68  0.849119     -0.163556     -0.997412E-01  0.997412E-01   8.03963       8.13937    
  69  0.426509     -0.852121     -0.519648      0.519648       8.07678       8.59643    
  70  0.558114E-01  -2.88578      -1.75983       1.75983       8.12085       9.88068    
loop,thermsimp(1:2)       67  0.738475      0.106038    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    271          8.05          0.87          1.12         24.62          0.08          0.05         26.74
Just calling func    0   0         26.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    272          8.16          0.86          1.12         24.34          0.04          0.05         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       67
neval is:      271
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       67      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       68
neval is:      271


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      271     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.944296E-02  -4.66249      -2.84332       2.84332       8.02972       10.8730    
   2  0.714357     -0.336373     -0.205130      0.205130       8.06768       8.27281    
   3  0.997096     -0.290808E-02 -0.177343E-02  0.177343E-02   8.03963       8.04140    
   4  0.905437     -0.993373E-01 -0.605787E-01  0.605787E-01   8.03969       8.10027    
   5  0.307060      -1.18071     -0.720032      0.720032       8.05853       8.77856    
   6  0.179061      -1.72003      -1.04892       1.04892       8.10953       9.15845    
   7  0.384312     -0.956301     -0.583180      0.583180       8.19304       8.77622    
   8  0.901101     -0.104138     -0.635066E-01  0.635066E-01   8.06856       8.13206    
   9  0.606170     -0.500594     -0.305277      0.305277       8.10246       8.40773    
  10  0.515234     -0.663133     -0.404398      0.404398       8.09048       8.49487    
  11  0.639447     -0.447152     -0.272686      0.272686       8.09327       8.36595    
  12  0.820429     -0.197928     -0.120702      0.120702       8.08186       8.20256    
  13  0.521739     -0.650587     -0.396747      0.396747       8.11654       8.51328    
  14  0.767979     -0.263993     -0.160990      0.160990       8.00020       8.16119    
  15  0.530366     -0.634187     -0.386745      0.386745       8.09541       8.48216    
  16  0.732471     -0.311332     -0.189859      0.189859       8.19746       8.38732    
  17  0.440461     -0.819933     -0.500018      0.500018       8.11426       8.61428    
  18  0.595715     -0.517993     -0.315887      0.315887       8.09096       8.40685    
  19  0.407958     -0.896592     -0.546768      0.546768       8.08733       8.63409    
  20  0.544683     -0.607550     -0.370502      0.370502       8.12933       8.49984    
  21  0.611386E-01  -2.79461      -1.70423       1.70423       8.06512       9.76936    
  22  0.135041      -2.00218      -1.22098       1.22098       8.11494       9.33592    
  23  0.547242     -0.602864     -0.367644      0.367644       8.11238       8.48002    
  24  0.214436      -1.53975     -0.938981      0.938981       8.24941       9.18839    
  25  0.340220      -1.07816     -0.657495      0.657495       8.11693       8.77443    
  26  0.270394      -1.30787     -0.797579      0.797579       8.15023       8.94781    
  27  0.605229     -0.502149     -0.306225      0.306225       8.14970       8.45592    
  28  0.630206     -0.461709     -0.281563      0.281563       8.09236       8.37392    
  29  0.942476     -0.592449E-01 -0.361292E-01  0.361292E-01   8.17790       8.21403    
  30  0.293125      -1.22716     -0.748356      0.748356       8.11627       8.86462    
  31  0.526210     -0.642056     -0.391544      0.391544       8.16632       8.55786    
  32  0.972201     -0.281927E-01 -0.171927E-01  0.171927E-01   8.10022       8.11741    
  33  0.570000     -0.562119     -0.342796      0.342796       8.06063       8.40342    
  34  0.752945     -0.283763     -0.173047      0.173047       8.07678       8.24983    
  35  0.333005      -1.09960     -0.670566      0.670566       8.25932       8.92989    
  36  0.430444     -0.842939     -0.514048      0.514048       8.15194       8.66599    
  37  0.106505      -2.23957      -1.36575       1.36575       8.18877       9.55452    
  38  0.327953      -1.11488     -0.679889      0.679889       8.07742       8.75731    
  39  0.586631     -0.533359     -0.325258      0.325258       8.08698       8.41224    
  40  0.563274     -0.573989     -0.350035      0.350035       8.13016       8.48020    
  41  0.802100     -0.220522     -0.134480      0.134480       8.05256       8.18704    
  42  0.594871     -0.519411     -0.316751      0.316751       8.01090       8.32765    
  43  0.816066     -0.203261     -0.123954      0.123954       8.09118       8.21514    
  44  0.170795E-01  -4.06987      -2.48193       2.48193       8.18610       10.6680    
  45  0.554958     -0.588864     -0.359106      0.359106       8.11497       8.47408    
  46  0.674023     -0.394492     -0.240572      0.240572       8.04995       8.29052    
  47  0.371758     -0.989512     -0.603433      0.603433       8.10077       8.70420    
  48  0.309440      -1.17299     -0.715323      0.715323       8.10859       8.82391    
  49  0.182337      -1.70190      -1.03787       1.03787       8.11383       9.15169    
  50  0.443504     -0.813049     -0.495821      0.495821       8.17237       8.66819    
  51  0.407824     -0.896918     -0.546967      0.546967       8.06918       8.61615    
  52  0.140254      -1.96430      -1.19789       1.19789       8.09050       9.28839    
  53  0.801043     -0.221840     -0.135285      0.135285       8.03442       8.16970    
  54  0.922923     -0.802099E-01 -0.489143E-01  0.489143E-01   8.06810       8.11701    
  55  0.982391     -0.177663E-01 -0.108344E-01  0.108344E-01   8.20225       8.21309    
  56  0.830509     -0.185717     -0.113256      0.113256       8.23753       8.35079    
  57  0.459056     -0.778583     -0.474802      0.474802       8.11412       8.58892    
  58  0.918078     -0.854734E-01 -0.521241E-01  0.521241E-01   8.10547       8.15760    
  59  0.858811E-01  -2.45479      -1.49700       1.49700       8.20747       9.70447    
  60  0.642813E-01  -2.74449      -1.67367       1.67367       8.08867       9.76234    
  61  0.328642      -1.11279     -0.678610      0.678610       8.09862       8.77723    
  62  0.238578      -1.43306     -0.873921      0.873921       8.04862       8.92254    
  63  0.183249      -1.69691      -1.03482       1.03482       8.24674       9.28156    
  64  0.575307     -0.552852     -0.337145      0.337145       8.12070       8.45784    
  65  0.509614     -0.674103     -0.411087      0.411087       8.32632       8.73741    
  66  0.528199     -0.638283     -0.389243      0.389243       8.06759       8.45684    
  67  0.114575      -2.16652      -1.32121       1.32121       8.12085       9.44206    
  68  0.227493      -1.48064     -0.902935      0.902935       8.32928       9.23221    
  69  0.451305     -0.795613     -0.485188      0.485188       8.09754       8.58272    
  70  0.873604     -0.135128     -0.824047E-01  0.824047E-01   8.04755       8.12995    
loop,thermsimp(1:2)       68   2.84332      0.205130    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    273          8.18          0.87          1.13         24.38          0.08          0.05         26.51
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    274          8.53          0.86          1.13         24.35          0.09          0.04         26.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       68
neval is:      273
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       68      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       69
neval is:      273


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      273     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.521048     -0.651914     -0.397556      0.397556       8.03963       8.43718    
   2  0.554375     -0.589913     -0.359746      0.359746       8.03969       8.39943    
   3  0.404373     -0.905418     -0.552150      0.552150       8.06810       8.62025    
   4  0.632877     -0.457478     -0.278984      0.278984       8.10022       8.37920    
   5  0.395261     -0.928209     -0.566049      0.566049       8.04755       8.61360    
   6  0.715068     -0.335378     -0.204523      0.204523       8.06856       8.27308    
   7  0.918313     -0.852174E-01 -0.519680E-01  0.519680E-01   8.10547       8.15744    
   8  0.529514E-01  -2.93838      -1.79191       1.79191       8.00020       9.79211    
   9  0.284219      -1.25801     -0.767171      0.767171       8.03442       8.80159    
  10  0.809402     -0.211460     -0.128954      0.128954       8.05256       8.18151    
  11  0.604758     -0.502928     -0.306700      0.306700       8.08186       8.38856    
  12  0.624772     -0.470369     -0.286844      0.286844       8.20225       8.48910    
  13  0.622683     -0.473718     -0.288887      0.288887       8.17790       8.46679    
  14  0.491656     -0.709976     -0.432964      0.432964       8.09118       8.52415    
  15  0.823484     -0.194211     -0.118435      0.118435       8.07678       8.19522    
  16  0.185629E-01  -3.98659      -2.43114       2.43114       8.06768       10.4988    
  17  0.911253     -0.929346E-01 -0.566742E-01  0.566742E-01   8.04995       8.10662    
  18  0.825116     -0.192231     -0.117228      0.117228       8.01090       8.12813    
  19  0.902913     -0.102129     -0.622815E-01  0.622815E-01   8.23753       8.29981    
  20  0.869925     -0.139348     -0.849786E-01  0.849786E-01   8.09327       8.17825    
  21  0.135445      -1.99919      -1.21916       1.21916       8.09236       9.31152    
  22  0.516840     -0.660022     -0.402501      0.402501       8.19746       8.59996    
  23  0.127583      -2.05899      -1.25563       1.25563       8.06063       9.31626    
  24  0.237062E-01  -3.74202      -2.28199       2.28199       8.09096       10.3730    
  25  0.456233     -0.784753     -0.478565      0.478565       8.10246       8.58102    
  26  0.547397     -0.602581     -0.367471      0.367471       8.08698       8.45445    
  27  0.231746E-02  -6.06728      -3.70000       3.70000       8.14970       11.8497    
  28  0.467213     -0.760969     -0.464061      0.464061       8.06759       8.53166    
  29  0.397333     -0.922981     -0.562860      0.562860       8.12070       8.68356    
  30  0.291343      -1.23325     -0.752073      0.752073       8.11497       8.86705    
  31  0.964262     -0.363922E-01 -0.221930E-01  0.221930E-01   8.11238       8.13457    
  32  0.260485      -1.34521     -0.820347      0.820347       8.13016       8.95051    
  33  0.868574     -0.140902     -0.859263E-01  0.859263E-01   8.09541       8.18134    
  34  0.832573     -0.183235     -0.111742      0.111742       8.09048       8.20222    
  35  0.240383      -1.42552     -0.869325      0.869325       8.12933       8.99866    
  36  0.878342     -0.129719     -0.791063E-01  0.791063E-01   8.11654       8.19564    
  37  0.168707      -1.77959      -1.08525       1.08525       8.16632       9.25157    
  38  0.348015      -1.05551     -0.643681      0.643681       8.09754       8.74122    
  39  0.846224     -0.166971     -0.101824      0.101824       8.11412       8.21595    
  40  0.842580     -0.171286     -0.104455      0.104455       8.11426       8.21872    
  41  0.230401      -1.46794     -0.895189      0.895189       8.06918       8.96437    
  42  0.441962     -0.816531     -0.497944      0.497944       8.08733       8.58527    
  43  0.772036     -0.258724     -0.157777      0.157777       8.15194       8.30972    
  44  0.970063     -0.303946E-01 -0.185355E-01  0.185355E-01   8.17237       8.19091    
  45  0.610535     -0.493419     -0.300901      0.300901       8.10077       8.40167    
  46  0.548201     -0.601114     -0.366577      0.366577       8.32632       8.69289    
  47  0.322533      -1.13155     -0.690052      0.690052       8.07742       8.76747    
  48  0.194318E-01  -3.94084      -2.40324       2.40324       8.11693       10.5202    
  49  0.219930      -1.51445     -0.923552      0.923552       8.19304       9.11659    
  50  0.538995E-01  -2.92063      -1.78109       1.78109       8.09862       9.87971    
  51  0.189941      -1.66104      -1.01295       1.01295       8.05853       9.07148    
  52  0.339787      -1.07944     -0.658272      0.658272       8.10859       8.76686    
  53  0.783417     -0.244091     -0.148853      0.148853       8.11627       8.26512    
  54  0.347888      -1.05587     -0.643902      0.643902       8.04862       8.69252    
  55  0.511342     -0.670716     -0.409022      0.409022       8.25932       8.66834    
  56  0.656791     -0.420389     -0.256366      0.256366       8.15023       8.40660    
  57  0.433072E-01  -3.13944      -1.91452       1.91452       8.11383       10.0283    
  58  0.940019     -0.618557E-01 -0.377214E-01  0.377214E-01   8.10953       8.14725    
  59  0.560131     -0.579584     -0.353447      0.353447       8.24941       8.60286    
  60  0.335604      -1.09182     -0.665826      0.665826       8.32928       8.99510    
  61  0.677192     -0.389801     -0.237712      0.237712       8.24674       8.48445    
  62  0.166447      -1.79308      -1.09347       1.09347       8.09050       9.18397    
  63  0.966787     -0.337766E-01 -0.205979E-01  0.205979E-01   8.11494       8.13553    
  64  0.501486     -0.690179     -0.420891      0.420891       8.12085       8.54174    
  65  0.339741      -1.07957     -0.658354      0.658354       8.18877       8.84712    
  66  0.920721     -0.825986E-01 -0.503710E-01  0.503710E-01   8.20747       8.25784    
  67  0.215901      -1.53293     -0.934827      0.934827       8.08867       9.02350    
  68  0.259645      -1.34844     -0.822319      0.822319       8.06512       8.88744    
  69  0.927059     -0.757381E-01 -0.461873E-01  0.461873E-01   8.18610       8.23229    
  70  0.766870E-02  -4.87061      -2.97024       2.97024       8.17975       11.1500    
loop,thermsimp(1:2)       69  0.397556      0.359746    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    275          8.14          0.86          1.13         24.31          0.07          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    276          8.58          0.86          1.12         24.43          0.07          0.05         26.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.14
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       69
neval is:      275
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       69      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       70
neval is:      275


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      275     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.242177      -1.41809     -0.864789      0.864789       8.04995       8.91474    
   2  0.384023     -0.957054     -0.583639      0.583639       8.01090       8.59454    
   3  0.672379     -0.396933     -0.242061      0.242061       8.11238       8.35444    
   4  0.204591      -1.58674     -0.967641      0.967641       8.11494       9.08258    
   5  0.145151      -1.92998      -1.17696       1.17696       8.10953       9.28648    
   6  0.235757      -1.44495     -0.881174      0.881174       8.10547       8.98665    
   7  0.882595     -0.124889     -0.761609E-01  0.761609E-01   8.09327       8.16943    
   8  0.215562      -1.53451     -0.935786      0.935786       8.09541       9.03120    
   9  0.248905      -1.39068     -0.848078      0.848078       8.05256       8.90064    
  10  0.695481     -0.363152     -0.221460      0.221460       8.17237       8.39383    
  11  0.515786     -0.662063     -0.403745      0.403745       8.07678       8.48053    
  12  0.956817     -0.441428E-01 -0.269196E-01  0.269196E-01   8.11654       8.14346    
  13  0.256477      -1.36072     -0.829803      0.829803       8.09048       8.92028    
  14  0.870409     -0.138792     -0.846394E-01  0.846394E-01   8.11412       8.19876    
  15  0.296335      -1.21627     -0.741714      0.741714       8.11426       8.85598    
  16  0.563087     -0.574322     -0.350238      0.350238       8.18610       8.53634    
  17  0.860973     -0.149692     -0.912864E-01  0.912864E-01   8.20747       8.29875    
  18  0.336353      -1.08959     -0.664465      0.664465       8.11627       8.78073    
  19  0.432238     -0.838780     -0.511512      0.511512       8.06856       8.58007    
  20  0.411587     -0.887734     -0.541366      0.541366       8.23753       8.77890    
  21  0.685679     -0.377346     -0.230116      0.230116       8.15194       8.38206    
  22  0.178038E-01  -4.02835      -2.45660       2.45660       8.10022       10.5568    
  23  0.330516      -1.10710     -0.675142      0.675142       8.08186       8.75700    
  24  0.987115     -0.129685E-01 -0.790854E-02  0.790854E-02   8.03969       8.04760    
  25  0.702947     -0.352474     -0.214949      0.214949       8.10077       8.31572    
  26  0.159040      -1.83860      -1.12123       1.12123       8.15023       9.27146    
  27  0.329714      -1.10953     -0.676624      0.676624       8.03963       8.71625    
  28  0.542452     -0.611656     -0.373006      0.373006       8.08698       8.45998    
  29  0.484074     -0.725518     -0.442442      0.442442       8.17790       8.62035    
  30  0.574330     -0.554551     -0.338181      0.338181       8.24674       8.58492    
  31  0.987944     -0.121288E-01 -0.739651E-02  0.739651E-02   8.20225       8.20965    
  32  0.565195E-01  -2.87317      -1.75214       1.75214       8.09118       9.84332    
  33  0.662626     -0.411545     -0.250972      0.250972       8.06759       8.31857    
  34  0.462195     -0.771769     -0.470647      0.470647       8.12085       8.59149    
  35  0.413957     -0.881994     -0.537865      0.537865       8.10246       8.64032    
  36  0.627825     -0.465493     -0.283871      0.283871       8.08733       8.37120    
  37  0.373783E-01  -3.28667      -2.00430       2.00430       8.19746       10.2018    
  38  0.318481      -1.14419     -0.697761      0.697761       8.24941       8.94717    
  39  0.193037      -1.64487      -1.00309       1.00309       8.04755       9.05064    
  40  0.246573      -1.40010     -0.853821      0.853821       8.06810       8.92192    
  41  0.913643     -0.903152E-01 -0.550768E-01  0.550768E-01   8.25932       8.31440    
  42  0.593287     -0.522077     -0.318377      0.318377       8.12070       8.43907    
  43  0.323913      -1.12728     -0.687447      0.687447       8.04862       8.73606    
  44  0.270579E-01  -3.60978      -2.20134       2.20134       8.32632       10.5277    
  45  0.684823     -0.378595     -0.230878      0.230878       8.09754       8.32841    
  46  0.279340      -1.27532     -0.777729      0.777729       8.10859       8.88632    
  47  0.285511      -1.25348     -0.764406      0.764406       8.07742       8.84182    
  48  0.361874      -1.01646     -0.619865      0.619865       8.03442       8.65428    
  49  0.779291     -0.249370     -0.152073      0.152073       8.18877       8.34084    
  50  0.590933     -0.526053     -0.320802      0.320802       8.11497       8.43578    
  51  0.493821E-01  -3.00817      -1.83447       1.83447       8.06512       9.89959    
  52  0.736348     -0.306053     -0.186640      0.186640       8.13016       8.31680    
  53  0.300670      -1.20174     -0.732856      0.732856       8.06918       8.80204    
  54  0.329072      -1.11148     -0.677811      0.677811       8.32928       9.00709    
  55  0.238483      -1.43346     -0.874163      0.874163       8.12933       9.00350    
  56  0.296796      -1.21471     -0.740765      0.740765       8.08867       8.82943    
  57  0.878745     -0.129261     -0.788270E-01  0.788270E-01   8.05853       8.13736    
  58  0.493874     -0.705475     -0.430219      0.430219       8.19304       8.62325    
  59  0.112522      -2.18461      -1.33224       1.33224       8.09050       9.42274    
  60  0.642649     -0.442156     -0.269639      0.269639       8.16632       8.43596    
  61  0.688378     -0.373417     -0.227721      0.227721       8.09236       8.32008    
  62  0.879214     -0.128727     -0.785015E-01  0.785015E-01   8.06063       8.13913    
  63  0.621151E-01  -2.77877      -1.69457       1.69457       8.00020       9.69477    
  64  0.270748      -1.30657     -0.796782      0.796782       8.09862       8.89541    
  65  0.871636     -0.137384     -0.837805E-01  0.837805E-01   8.11383       8.19761    
  66  0.188105      -1.67075      -1.01887       1.01887       8.09096       9.10984    
  67  0.394507     -0.930118     -0.567212      0.567212       8.06768       8.63489    
  68  0.532895     -0.629431     -0.383845      0.383845       8.11693       8.50078    
  69  0.925318     -0.776179E-01 -0.473336E-01  0.473336E-01   8.17975       8.22708    
  70  0.306237      -1.18340     -0.721669      0.721669       8.14409       8.86576    
loop,thermsimp(1:2)       70  0.864789      0.583639    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    277          8.09          0.86          1.12         24.33          0.07          0.04         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    278          8.27          0.86          1.12         24.37          0.07          0.04         26.47
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       70
neval is:      277
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       70      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       71
neval is:      277


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      277
neval,tstepnext:      277     277

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.810305     -0.210344     -0.128274      0.128274       8.03969       8.16796    
   2  0.601567     -0.508218     -0.309926      0.309926       8.05853       8.36845    
   3  0.190401      -1.65862      -1.01148       1.01148       8.06063       9.07210    
   4  0.827263     -0.189632     -0.115643      0.115643       8.11654       8.23218    
   5  0.581677     -0.541840     -0.330430      0.330430       8.09327       8.42370    
   6  0.680336     -0.385169     -0.234887      0.234887       8.11383       8.34871    
   7  0.641383     -0.444128     -0.270842      0.270842       8.11412       8.38496    
   8  0.593931     -0.520992     -0.317716      0.317716       8.20225       8.51997    
   9  0.326400      -1.11963     -0.682784      0.682784       8.17975       8.86253    
  10  0.964323     -0.363286E-01 -0.221542E-01  0.221542E-01   8.20747       8.22962    
  11  0.481751     -0.730328     -0.445375      0.445375       8.25932       8.70469    
  12  0.230624E-01  -3.76955      -2.29878       2.29878       8.10077       10.3996    
  13  0.214859      -1.53777     -0.937779      0.937779       8.13016       9.06794    
  14  0.325804      -1.12146     -0.683898      0.683898       8.06759       8.75149    
  15  0.668745     -0.402353     -0.245366      0.245366       8.09236       8.33772    
  16  0.803263     -0.219073     -0.133597      0.133597       8.09754       8.23113    
  17  0.465531     -0.764577     -0.466261      0.466261       8.18877       8.65503    
  18  0.589796     -0.527978     -0.321976      0.321976       8.11238       8.43435    
  19  0.783335     -0.244195     -0.148917      0.148917       8.08733       8.23624    
  20  0.937099     -0.649659E-01 -0.396181E-01  0.396181E-01   8.15194       8.19156    
  21  0.504081     -0.685019     -0.417744      0.417744       8.17237       8.59012    
  22  0.368431E-01  -3.30109      -2.01310       2.01310       8.11497       10.1281    
  23  0.462712     -0.770651     -0.469965      0.469965       8.16632       8.63628    
  24  0.172447      -1.75767      -1.07188       1.07188       8.12070       9.19257    
  25  0.361979      -1.01617     -0.619690      0.619690       8.08698       8.70667    
  26  0.616189     -0.484202     -0.295280      0.295280       8.07678       8.37206    
  27  0.495582     -0.702023     -0.428114      0.428114       8.11693       8.54505    
  28  0.492859     -0.707532     -0.431474      0.431474       8.18610       8.61758    
  29  0.189027      -1.66586      -1.01589       1.01589       8.06856       9.08445    
  30  0.336237      -1.08994     -0.664676      0.664676       8.24674       8.91141    
  31  0.997382     -0.262184E-02 -0.159887E-02  0.159887E-02   8.12085       8.12245    
  32  0.629287     -0.463168     -0.282453      0.282453       8.01090       8.29335    
  33  0.226178      -1.48644     -0.906471      0.906471       8.17790       9.08438    
  34  0.522315     -0.649483     -0.396074      0.396074       8.19304       8.58911    
  35  0.238835E-02  -6.03715      -3.68163       3.68163       8.06768       11.7493    
  36  0.123092E-01  -4.39741      -2.68167       2.68167       8.10246       10.7841    
  37  0.488141     -0.717152     -0.437340      0.437340       8.03442       8.47176    
  38  0.925188     -0.777584E-01 -0.474193E-01  0.474193E-01   8.03963       8.08705    
  39  0.676413     -0.390952     -0.238414      0.238414       8.04862       8.28703    
  40  0.638827     -0.448121     -0.273277      0.273277       8.08186       8.35514    
  41  0.789998     -0.235725     -0.143752      0.143752       8.23753       8.38128    
  42  0.453703E-01  -3.09290      -1.88614       1.88614       8.11627       10.0024    
  43  0.866893     -0.142840     -0.871080E-01  0.871080E-01   8.06918       8.15629    
  44  0.122493E-01  -4.40228      -2.68464       2.68464       8.08867       10.7733    
  45  0.172311      -1.75846      -1.07236       1.07236       8.07742       9.14978    
  46  0.899580     -0.105827     -0.645362E-01  0.645362E-01   8.11426       8.17880    
  47  0.857845     -0.153332     -0.935062E-01  0.935062E-01   8.14409       8.23760    
  48  0.176813      -1.73266      -1.05663       1.05663       8.10859       9.16522    
  49  0.795271E-01  -2.53166      -1.54388       1.54388       8.09862       9.64250    
  50  0.461368     -0.773559     -0.471739      0.471739       8.05256       8.52430    
  51  0.727625     -0.317970     -0.193907      0.193907       8.04995       8.24386    
  52  0.106879      -2.23606      -1.36361       1.36361       8.09048       9.45409    
  53  0.169411      -1.77543      -1.08271       1.08271       8.06810       9.15080    
  54  0.150923      -1.89099      -1.15318       1.15318       8.24941       9.40259    
  55  0.970144     -0.303104E-01 -0.184842E-01  0.184842E-01   8.10547       8.12396    
  56  0.819386     -0.199200     -0.121478      0.121478       8.12933       8.25081    
  57  0.855509     -0.156059     -0.951693E-01  0.951693E-01   8.32928       8.42445    
  58  0.248182      -1.39359     -0.849852      0.849852       8.09541       8.94526    
  59  0.632181     -0.458580     -0.279655      0.279655       8.04755       8.32720    
  60  0.626090     -0.468262     -0.285560      0.285560       8.11494       8.40049    
  61  0.122722      -2.09783      -1.27932       1.27932       8.09096       9.37028    
  62  0.656077     -0.421477     -0.257029      0.257029       8.15023       8.40726    
  63  0.811645     -0.208692     -0.127266      0.127266       8.10953       8.23679    
  64  0.241419E-05  -12.9341      -7.88762       7.88762       8.09050       15.9781    
  65  0.450747     -0.796849     -0.485941      0.485941       8.00020       8.48614    
  66  0.299124      -1.20690     -0.736001      0.736001       8.09118       8.82718    
  67  0.156254      -1.85627      -1.13201       1.13201       8.06512       9.19713    
  68  0.323711      -1.12790     -0.687828      0.687828       8.19746       8.88529    
  69  0.447335     -0.804447     -0.490575      0.490575       8.32632       8.81689    
  70  0.457702     -0.781538     -0.476604      0.476604       8.08776       8.56436    
loop,thermsimp(1:2)       71  0.128274      0.309926    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    279          8.09          0.86          1.12         24.35          0.07          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    280          8.07          0.86          1.12         24.43          0.08          0.05         26.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.609829               277
loop is:       71
neval is:      279
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       71      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.609829               277
loop is:       72
neval is:      279


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.304914               346

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      279     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.870330     -0.138883     -0.423474E-01  0.423474E-01   8.03963       8.08197    
   2  0.470451     -0.754063     -0.229925      0.229925       8.12085       8.35077    
   3  0.615627     -0.485114     -0.147918      0.147918       8.10547       8.25339    
   4  0.291899      -1.23135     -0.375456      0.375456       8.06918       8.44464    
   5  0.584822     -0.536448     -0.163571      0.163571       8.03969       8.20326    
   6  0.681731     -0.383120     -0.116819      0.116819       8.11426       8.23108    
   7  0.680149     -0.385444     -0.117527      0.117527       8.15194       8.26947    
   8  0.560478     -0.578966     -0.176535      0.176535       8.20747       8.38400    
   9  0.392299     -0.935730     -0.285317      0.285317       8.09754       8.38285    
  10  0.586793     -0.533083     -0.162545      0.162545       8.11654       8.27908    
  11  0.461418     -0.773452     -0.235837      0.235837       8.08733       8.32316    
  12  0.142886      -1.94571     -0.593275      0.593275       8.10953       8.70280    
  13  0.960325     -0.404831E-01 -0.123439E-01  0.123439E-01   8.14409       8.15644    
  14  0.547176     -0.602984     -0.183858      0.183858       8.04995       8.23381    
  15  0.817596     -0.201386     -0.614056E-01  0.614056E-01   8.12933       8.19074    
  16  0.184065      -1.69247     -0.516057      0.516057       8.04862       8.56467    
  17  0.763954     -0.269247     -0.820973E-01  0.820973E-01   8.01090       8.09300    
  18  0.740640     -0.300240     -0.915475E-01  0.915475E-01   8.04755       8.13910    
  19  0.257299      -1.35751     -0.413926      0.413926       8.09236       8.50628    
  20  0.274950      -1.29117     -0.393695      0.393695       8.11383       8.50752    
  21  0.850599     -0.161814     -0.493395E-01  0.493395E-01   8.08186       8.13120    
  22  0.265651      -1.32557     -0.404186      0.404186       8.05853       8.46271    
  23  0.388810     -0.944665     -0.288042      0.288042       8.07678       8.36483    
  24  0.921262     -0.820106E-01 -0.250062E-01  0.250062E-01   8.23753       8.26254    
  25  0.622168     -0.474545     -0.144696      0.144696       8.11412       8.25882    
  26  0.831499     -0.184526     -0.562645E-01  0.562645E-01   8.11494       8.17120    
  27  0.777776     -0.251317     -0.766301E-01  0.766301E-01   8.15023       8.22686    
  28  0.519638     -0.654624     -0.199604      0.199604       8.09327       8.29287    
  29  0.343480      -1.06863     -0.325840      0.325840       8.32928       8.65512    
  30  0.379182     -0.969738     -0.295687      0.295687       8.11238       8.40806    
  31  0.509964     -0.673415     -0.205334      0.205334       8.03442       8.23975    
  32  0.457294E-01  -3.08501     -0.940665      0.940665       8.00020       8.94086    
  33  0.952238     -0.489400E-01 -0.149225E-01  0.149225E-01   8.20225       8.21717    
  34  0.198116      -1.61890     -0.493626      0.493626       8.05256       8.54618    
  35  0.863922     -0.146273     -0.446008E-01  0.446008E-01   8.11693       8.16154    
  36  0.765944     -0.266646     -0.813042E-01  0.813042E-01   8.08776       8.16906    
  37  0.849389     -0.163238     -0.497737E-01  0.497737E-01   8.19304       8.24281    
  38  0.488339     -0.716745     -0.218546      0.218546       8.17237       8.39092    
  39  0.969632     -0.308388E-01 -0.940319E-02  0.940319E-02   8.18610       8.19550    
  40  0.971690     -0.287184E-01 -0.875664E-02  0.875664E-02   8.16632       8.17507    
  41  0.690522     -0.370307     -0.112912      0.112912       8.18877       8.30168    
  42  0.266028      -1.32415     -0.403754      0.403754       8.25932       8.66307    
  43  0.581296     -0.542495     -0.165414      0.165414       8.08698       8.25239    
  44  0.636654     -0.451529     -0.137678      0.137678       8.06759       8.20527    
  45  0.947680     -0.537383E-01 -0.163856E-01  0.163856E-01   8.32632       8.34270    
  46  0.792806     -0.232176     -0.707939E-01  0.707939E-01   8.09118       8.16198    
  47  0.420588     -0.866101     -0.264087      0.264087       8.17975       8.44383    
  48  0.780043     -0.248407     -0.757428E-01  0.757428E-01   8.19746       8.27321    
  49  0.834700E-01  -2.48327     -0.757184      0.757184       8.24674       9.00392    
  50  0.707823     -0.345562     -0.105367      0.105367       8.09541       8.20078    
  51  0.836500     -0.178529     -0.544361E-01  0.544361E-01   8.13016       8.18460    
  52  0.111614      -2.19271     -0.668587      0.668587       8.06063       8.72922    
  53  0.690314     -0.370608     -0.113004      0.113004       8.17790       8.29091    
  54  0.200139      -1.60874     -0.490529      0.490529       8.06856       8.55908    
  55  0.182543E-01  -4.00336      -1.22068       1.22068       8.07742       9.29810    
  56  0.248611      -1.39187     -0.424400      0.424400       8.06810       8.49250    
  57  0.951106     -0.501293E-01 -0.152852E-01  0.152852E-01   8.10859       8.12388    
  58  0.576942     -0.550013     -0.167707      0.167707       8.12070       8.28840    
  59  0.335384      -1.09248     -0.333113      0.333113       8.06512       8.39824    
  60  0.137719E-01  -4.28512      -1.30660       1.30660       8.09096       9.39756    
  61  0.839758     -0.174642     -0.532509E-01  0.532509E-01   8.24941       8.30266    
  62  0.324640      -1.12504     -0.343041      0.343041       8.09048       8.43352    
  63  0.758550     -0.276346     -0.842619E-01  0.842619E-01   8.09862       8.18289    
  64  0.704737     -0.349931     -0.106699      0.106699       8.11627       8.22297    
  65  0.848812     -0.163918     -0.499810E-01  0.499810E-01   8.11497       8.16496    
  66  0.881053     -0.126637     -0.386134E-01  0.386134E-01   8.10077       8.13939    
  67  0.191937      -1.65059     -0.503288      0.503288       8.08867       8.59196    
  68  0.646624     -0.435990     -0.132940      0.132940       8.10246       8.23540    
  69  0.424145     -0.857680     -0.261519      0.261519       8.06768       8.32919    
  70  0.760934     -0.273209     -0.833054E-01  0.833054E-01   8.07112       8.15443    
loop,thermsimp(1:2)       72  0.423474E-01  0.229925    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    281          8.06          0.86          1.12         24.32          0.07          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    282          8.09          0.86          1.12         24.46          0.08          0.05         26.58
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  280    8.0611        1.116     -1.869      3.236     -102.6      1.406    
                      0.3683      1.350     -99.70      3.650     0.6302E-01

                       2.256     -1.057      1.530      6923.      3335.    

                     -0.1627      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6250.      427.0    

                       1.433     -5.856     -4.347     -8.532      6.830    

                      -14.98     -3.556      8244.      0.000     0.1108E+05



                      -1195.     0.1182E+05 -3162.      8675.      4646.    

                       6076.     0.3150E-01 0.1969     0.1402E-01 0.1250    

                     -0.2486    -0.1025     0.1940     0.1234     0.7107E-01



                     -0.4455    -0.7862      0.000     0.9688E-01-0.6825E-01

                      0.1402E-01 0.1136    -0.7116    -0.1480     0.3601E-01

                      0.4211E-01 0.1340    -0.6721     -1.222      6960.    



                      -1.101     -1.210     -2.235     -2.321    -0.3807    

                     -0.3252      9.210      8.689    -0.1868E+05 -4.000    

                     -0.5905     -2.108      9.296      8.878    -0.1908E+05



                      -4.000     0.5014    -0.4289      8.850      9.080    

                     -0.1908E+05 -7.000    -0.7488    -0.6549      9.029    

                       8.760    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       72
neval is:      281
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       72      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       73
neval is:      281


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      281     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.741909     -0.298528     -0.910256E-01  0.910256E-01   8.03963       8.13065    
   2  0.823468     -0.194230     -0.592236E-01  0.592236E-01   8.01090       8.07012    
   3  0.352913      -1.04153     -0.317579      0.317579       8.10859       8.42617    
   4  0.268511      -1.31486     -0.400920      0.400920       8.08186       8.48278    
   5  0.137541      -1.98383     -0.604899      0.604899       8.04755       8.65245    
   6  0.953738     -0.473661E-01 -0.144426E-01  0.144426E-01   8.10077       8.11521    
   7  0.366602      -1.00348     -0.305975      0.305975       8.07112       8.37710    
   8  0.861530     -0.149046     -0.454462E-01  0.454462E-01   8.14409       8.18954    
   9  0.190086      -1.66028     -0.506242      0.506242       8.11693       8.62318    
  10  0.931621     -0.708293E-01 -0.215969E-01  0.215969E-01   8.09118       8.11278    
  11  0.135562      -1.99833     -0.609319      0.609319       8.11497       8.72429    
  12  0.577052     -0.549824     -0.167649      0.167649       8.08776       8.25541    
  13  0.937511     -0.645266E-01 -0.196751E-01  0.196751E-01   8.11494       8.13461    
  14  0.836727     -0.178258     -0.543533E-01  0.543533E-01   8.16632       8.22067    
  15  0.124731      -2.08159     -0.634707      0.634707       8.09862       8.73333    
  16  0.830758     -0.185417     -0.565364E-01  0.565364E-01   8.13016       8.18670    
  17  0.925849     -0.770442E-01 -0.234919E-01  0.234919E-01   8.12933       8.15283    
  18  0.945668     -0.558633E-01 -0.170335E-01  0.170335E-01   8.18610       8.20313    
  19  0.700762     -0.355587     -0.108424      0.108424       8.09541       8.20384    
  20  0.585168E-01  -2.83844     -0.865481      0.865481       8.03969       8.90517    
  21  0.241985      -1.41888     -0.432637      0.432637       8.06759       8.50023    
  22  0.426115     -0.853047     -0.260106      0.260106       8.20225       8.46236    
  23  0.730656     -0.313813     -0.956861E-01  0.956861E-01   8.11627       8.21195    
  24  0.227460      -1.48078     -0.451512      0.451512       8.15023       8.60175    
  25  0.824070     -0.193500     -0.590008E-01  0.590008E-01   8.11426       8.17326    
  26  0.912829     -0.912064E-01 -0.278101E-01  0.278101E-01   8.04995       8.07776    
  27  0.130860      -2.03363     -0.620082      0.620082       8.10246       8.72254    
  28  0.126999      -2.06358     -0.629214      0.629214       8.03442       8.66363    
  29  0.394828E-01  -3.23189     -0.985449      0.985449       8.19304       9.17849    
  30  0.927793     -0.749466E-01 -0.228523E-01  0.228523E-01   8.08698       8.10983    
  31  0.161762      -1.82163     -0.555441      0.555441       8.10547       8.66092    
  32  0.510374     -0.672611     -0.205089      0.205089       8.11412       8.31921    
  33  0.930607     -0.719186E-01 -0.219290E-01  0.219290E-01   8.23753       8.25946    
  34  0.825283E-01  -2.49461     -0.760643      0.760643       8.15194       8.91258    
  35  0.569143     -0.563624     -0.171857      0.171857       8.19746       8.36932    
  36  0.732951     -0.310676     -0.947297E-01  0.947297E-01   8.11654       8.21127    
  37  0.554950     -0.588877     -0.179557      0.179557       8.12070       8.30025    
  38  0.614368     -0.487160     -0.148542      0.148542       8.17790       8.32645    
  39  0.127889      -2.05659     -0.627085      0.627085       8.09327       8.72035    
  40  0.510007     -0.673330     -0.205308      0.205308       8.18877       8.39408    
  41  0.206107      -1.57936     -0.481570      0.481570       8.24941       8.73098    
  42  0.812962E-01  -2.50966     -0.765230      0.765230       8.08733       8.85256    
  43  0.711913     -0.339799     -0.103610      0.103610       8.06768       8.17129    
  44  0.649899     -0.430939     -0.131399      0.131399       8.32632       8.45772    
  45  0.102708      -2.27587     -0.693945      0.693945       8.12085       8.81479    
  46  0.152702      -1.87927     -0.573016      0.573016       8.07678       8.64980    
  47  0.827734     -0.189064     -0.576483E-01  0.576483E-01   8.09754       8.15518    
  48  0.558329     -0.582808     -0.177706      0.177706       8.20747       8.38517    
  49  0.174746      -1.74442     -0.531900      0.531900       8.17237       8.70427    
  50  0.107247      -2.23262     -0.680759      0.680759       8.06512       8.74588    
  51  0.988891     -0.111711E-01 -0.340622E-02  0.340622E-02   8.11238       8.11578    
  52  0.388651     -0.945075     -0.288167      0.288167       8.09048       8.37864    
  53  0.580190     -0.544399     -0.165995      0.165995       8.17975       8.34574    
  54  0.519409E-01  -2.95765     -0.901830      0.901830       8.06918       8.97101    
  55  0.418368     -0.871393     -0.265700      0.265700       8.05853       8.32423    
  56  0.435950     -0.830228     -0.253148      0.253148       8.06810       8.32125    
  57  0.226091      -1.48682     -0.453352      0.453352       8.09236       8.54571    
  58  0.371316     -0.990702     -0.302079      0.302079       8.11383       8.41591    
  59  0.113770      -2.17358     -0.662756      0.662756       8.05256       8.71531    
  60  0.335886      -1.09098     -0.332657      0.332657       8.06856       8.40121    
  61  0.733883     -0.309406     -0.943424E-01  0.943424E-01   8.04862       8.14296    
  62  0.127704      -2.05804     -0.627527      0.627527       8.08867       8.71620    
  63  0.205687      -1.58140     -0.482192      0.482192       8.32928       8.81147    
  64  0.315213      -1.15451     -0.352026      0.352026       8.25932       8.61134    
  65  0.329345      -1.11065     -0.338653      0.338653       8.10953       8.44818    
  66  0.193213      -1.64396     -0.501267      0.501267       8.06063       8.56190    
  67  0.593921     -0.521008     -0.158863      0.158863       8.00020       8.15906    
  68  0.128520      -2.05167     -0.625584      0.625584       8.24674       8.87232    
  69  0.201122      -1.60384     -0.489035      0.489035       8.07742       8.56645    
  70  0.699786E-01  -2.65957     -0.810940      0.810940       8.06114       8.87208    
loop,thermsimp(1:2)       73  0.910256E-01  0.592236E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    283          8.10          0.87          1.13         24.73          0.08          0.05         26.86
Just calling func    0   0         26.86


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    284          8.26          0.88          1.12         24.32          0.08          0.04         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       73
neval is:      283
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       73      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       74
neval is:      283


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      283     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.835960     -0.179175     -0.546330E-01  0.546330E-01   8.01090       8.06553    
   2  0.439366     -0.822423     -0.250769      0.250769       8.04995       8.30072    
   3  0.603094     -0.505682     -0.154190      0.154190       8.08698       8.24117    
   4  0.695854E-01  -2.66520     -0.812658      0.812658       8.09118       8.90384    
   5  0.273021      -1.29821     -0.395842      0.395842       8.10077       8.49661    
   6  0.418319     -0.871511     -0.265736      0.265736       8.11238       8.37811    
   7  0.688437     -0.373331     -0.113834      0.113834       8.03963       8.15346    
   8  0.400930     -0.913969     -0.278682      0.278682       8.11494       8.39362    
   9  0.569492     -0.563010     -0.171670      0.171670       8.04862       8.22029    
  10  0.812441     -0.207712     -0.633343E-01  0.633343E-01   8.12933       8.19267    
  11  0.222094      -1.50465     -0.458790      0.458790       8.09754       8.55633    
  12  0.695761     -0.362749     -0.110608      0.110608       8.00020       8.11081    
  13  0.909536E-01  -2.39741     -0.731004      0.731004       8.06768       8.79868    
  14  0.297191      -1.21338     -0.369977      0.369977       8.11426       8.48424    
  15  0.806729     -0.214767     -0.654856E-01  0.654856E-01   8.13016       8.19565    
  16  0.407021     -0.898891     -0.274085      0.274085       8.14409       8.41818    
  17  0.520426     -0.653107     -0.199142      0.199142       8.18610       8.38524    
  18  0.826852     -0.190129     -0.579731E-01  0.579731E-01   8.09541       8.15339    
  19  0.729268     -0.315714     -0.962657E-01  0.962657E-01   8.11654       8.21280    
  20  0.344086      -1.06687     -0.325302      0.325302       8.11627       8.44157    
  21  0.280849      -1.26994     -0.387222      0.387222       8.16632       8.55354    
  22  0.301244E-01  -3.50242      -1.06794       1.06794       8.08776       9.15570    
  23  0.503253     -0.686663     -0.209373      0.209373       8.23753       8.44690    
  24  0.549007     -0.599644     -0.182840      0.182840       8.12070       8.30354    
  25  0.814230     -0.205513     -0.626638E-01  0.626638E-01   8.11412       8.17679    
  26  0.641489     -0.443963     -0.135371      0.135371       8.06810       8.20347    
  27  0.248696      -1.39152     -0.424295      0.424295       8.05853       8.48282    
  28  0.684472     -0.379107     -0.115595      0.115595       8.17790       8.29350    
  29  0.815126     -0.204413     -0.623283E-01  0.623283E-01   8.17975       8.24207    
  30  0.388210     -0.946208     -0.288512      0.288512       8.19746       8.48597    
  31  0.670538     -0.399675     -0.121867      0.121867       8.07112       8.19299    
  32  0.851104     -0.161221     -0.491585E-01  0.491585E-01   8.09048       8.13963    
  33  0.381078     -0.964752     -0.294167      0.294167       8.20747       8.50163    
  34  0.776256     -0.253273     -0.772265E-01  0.772265E-01   8.18877       8.26600    
  35  0.168040      -1.78355     -0.543830      0.543830       8.06856       8.61239    
  36  0.229069      -1.47373     -0.449362      0.449362       8.11383       8.56319    
  37  0.917563     -0.860337E-01 -0.262329E-01  0.262329E-01   8.10859       8.13482    
  38  0.161815      -1.82130     -0.555341      0.555341       8.10953       8.66487    
  39  0.355170      -1.03516     -0.315635      0.315635       8.32632       8.64195    
  40  0.221709      -1.50639     -0.459319      0.459319       8.20225       8.66157    
  41  0.424436     -0.856993     -0.261310      0.261310       8.08186       8.34317    
  42  0.337698      -1.08560     -0.331016      0.331016       8.06759       8.39861    
  43  0.574481     -0.554289     -0.169011      0.169011       8.09236       8.26137    
  44  0.614536     -0.486888     -0.148459      0.148459       8.06063       8.20909    
  45  0.345602      -1.06247     -0.323962      0.323962       8.07742       8.40138    
  46  0.330006      -1.10864     -0.338042      0.338042       8.15023       8.48828    
  47  0.934389     -0.678626E-01 -0.206923E-01  0.206923E-01   8.25932       8.28001    
  48  0.884466     -0.122771     -0.374347E-01  0.374347E-01   8.11693       8.15437    
  49  0.928979     -0.736686E-01 -0.224626E-01  0.224626E-01   8.07678       8.09925    
  50  0.788461     -0.237672     -0.724695E-01  0.724695E-01   8.04755       8.12002    
  51  0.963462     -0.372219E-01 -0.113495E-01  0.113495E-01   8.10547       8.11682    
  52  0.630201     -0.461716     -0.140784      0.140784       8.03442       8.17520    
  53  0.797085     -0.226794     -0.691527E-01  0.691527E-01   8.17237       8.24152    
  54  0.389249     -0.943537     -0.287698      0.287698       8.05256       8.34026    
  55  0.660522     -0.414724     -0.126455      0.126455       8.08867       8.21512    
  56  0.520011     -0.653905     -0.199385      0.199385       8.09327       8.29265    
  57  0.270094      -1.30899     -0.399129      0.399129       8.10246       8.50158    
  58  0.218485      -1.52104     -0.463786      0.463786       8.11497       8.57876    
  59  0.391194     -0.938551     -0.286178      0.286178       8.24941       8.53559    
  60  0.740024     -0.301073     -0.918014E-01  0.918014E-01   8.09862       8.19043    
  61  0.184403      -1.69063     -0.515498      0.515498       8.06512       8.58062    
  62  0.309007E-01  -3.47698      -1.06018       1.06018       8.32928       9.38946    
  63  0.916682     -0.869952E-01 -0.265261E-01  0.265261E-01   8.12085       8.14737    
  64  0.268894      -1.31344     -0.400487      0.400487       8.08733       8.48781    
  65  0.705018     -0.349532     -0.106577      0.106577       8.06114       8.16772    
  66  0.748256     -0.290010     -0.884283E-01  0.884283E-01   8.24674       8.33516    
  67  0.828532     -0.188099     -0.573542E-01  0.573542E-01   8.03969       8.09704    
  68  0.336848      -1.08812     -0.331784      0.331784       8.15194       8.48373    
  69  0.686319     -0.376413     -0.114774      0.114774       8.06918       8.18396    
  70  0.731123     -0.313173     -0.954911E-01  0.954911E-01   8.09568       8.19117    
loop,thermsimp(1:2)       74  0.546330E-01  0.250769    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    285          8.35          0.85          1.12         24.39          0.07          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    286         13.37          0.86          1.13         24.29          0.06          0.05         26.39
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.35
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       74
neval is:      285
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       74      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       75
neval is:      285


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      285     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.374776     -0.981426     -0.299251      0.299251       8.01090       8.31015    
   2  0.269095      -1.31269     -0.400258      0.400258       8.03969       8.43995    
   3  0.301960      -1.19746     -0.365123      0.365123       8.07678       8.44191    
   4  0.927593     -0.751619E-01 -0.229179E-01  0.229179E-01   8.00020       8.02312    
   5  0.783450     -0.244048     -0.744137E-01  0.744137E-01   8.10547       8.17989    
   6  0.716705     -0.333091     -0.101564      0.101564       8.04755       8.14911    
   7  0.728578     -0.316661     -0.965545E-01  0.965545E-01   8.10859       8.20515    
   8  0.752541     -0.284300     -0.866870E-01  0.866870E-01   8.09048       8.17716    
   9  0.111710      -2.19185     -0.668326      0.668326       8.12085       8.78917    
  10  0.202752E-01  -3.89836      -1.18867       1.18867       8.09541       9.28408    
  11  0.967738     -0.327937E-01 -0.999927E-02  0.999927E-02   8.03963       8.04963    
  12  0.530869     -0.633240     -0.193084      0.193084       8.11693       8.31002    
  13  0.752699E-01  -2.58668     -0.788714      0.788714       8.06114       8.84986    
  14  0.658334     -0.418043     -0.127467      0.127467       8.03442       8.16189    
  15  0.383542     -0.958305     -0.292201      0.292201       8.11412       8.40632    
  16  0.280803      -1.27010     -0.387273      0.387273       8.06918       8.45646    
  17  0.976909     -0.233616E-01 -0.712328E-02  0.712328E-02   8.09862       8.10575    
  18  0.611898     -0.491189     -0.149771      0.149771       8.09568       8.24545    
  19  0.860469     -0.150278     -0.458220E-01  0.458220E-01   8.12933       8.17516    
  20  0.375446     -0.979641     -0.298707      0.298707       8.07112       8.36983    
  21  0.964573     -0.360702E-01 -0.109983E-01  0.109983E-01   8.13016       8.14116    
  22  0.865663     -0.144259     -0.439867E-01  0.439867E-01   8.06810       8.11209    
  23  0.498009     -0.697137     -0.212567      0.212567       8.06063       8.27320    
  24  0.732547     -0.311228     -0.948979E-01  0.948979E-01   8.11654       8.21144    
  25  0.293766      -1.22497     -0.373511      0.373511       8.08867       8.46218    
  26  0.805097     -0.216793     -0.661033E-01  0.661033E-01   8.04862       8.11472    
  27  0.236791      -1.44058     -0.439253      0.439253       8.08698       8.52623    
  28  0.759809     -0.274688     -0.837564E-01  0.837564E-01   8.17237       8.25613    
  29  0.279804      -1.27367     -0.388359      0.388359       8.17975       8.56810    
  30  0.862550     -0.147862     -0.450854E-01  0.450854E-01   8.09236       8.13744    
  31  0.784800     -0.242327     -0.738888E-01  0.738888E-01   8.18877       8.26266    
  32  0.231425      -1.46350     -0.446242      0.446242       8.25932       8.70556    
  33  0.839725     -0.174681     -0.532628E-01  0.532628E-01   8.09327       8.14653    
  34  0.204862      -1.58542     -0.483417      0.483417       8.17790       8.66132    
  35  0.741170     -0.299525     -0.913296E-01  0.913296E-01   8.04995       8.14128    
  36  0.838703     -0.175898     -0.536338E-01  0.536338E-01   8.12070       8.17433    
  37  0.287711      -1.24580     -0.379861      0.379861       8.24674       8.62660    
  38  0.937479     -0.645611E-01 -0.196856E-01  0.196856E-01   8.05256       8.07224    
  39  0.188655      -1.66783     -0.508546      0.508546       8.08186       8.59041    
  40  0.818317     -0.200505     -0.611369E-01  0.611369E-01   8.11238       8.17351    
  41  0.903487     -0.101493     -0.309467E-01  0.309467E-01   8.18610       8.21705    
  42  0.148828      -1.90496     -0.580851      0.580851       8.11494       8.69579    
  43  0.573616E-01  -2.85838     -0.871561      0.871561       8.06759       8.93916    
  44  0.792726E-01  -2.53486     -0.772916      0.772916       8.07742       8.85033    
  45  0.150401      -1.89445     -0.577646      0.577646       8.14409       8.72174    
  46  0.511444     -0.670518     -0.204450      0.204450       8.11627       8.32072    
  47  0.179810      -1.71585     -0.523189      0.523189       8.23753       8.76072    
  48  0.167282      -1.78808     -0.545210      0.545210       8.05853       8.60374    
  49  0.589016     -0.529302     -0.161392      0.161392       8.15194       8.31333    
  50  0.974997     -0.253206E-01 -0.772063E-02  0.772063E-02   8.11426       8.12198    
  51  0.750240     -0.287363     -0.876210E-01  0.876210E-01   8.19746       8.28508    
  52  0.695153     -0.363624     -0.110874      0.110874       8.08733       8.19820    
  53  0.166976      -1.78991     -0.545768      0.545768       8.15023       8.69600    
  54  0.228686      -1.47540     -0.449872      0.449872       8.10077       8.55064    
  55  0.728220     -0.317152     -0.967042E-01  0.967042E-01   8.10246       8.19916    
  56  0.321968      -1.13330     -0.345561      0.345561       8.20747       8.55303    
  57  0.494283     -0.704647     -0.214857      0.214857       8.24941       8.46427    
  58  0.398916     -0.919004     -0.280218      0.280218       8.16632       8.44654    
  59  0.130321      -2.03776     -0.621342      0.621342       8.09754       8.71888    
  60  0.131470E-01  -4.33156      -1.32076       1.32076       8.11383       9.43458    
  61  0.868361E-03  -7.04890      -2.14931       2.14931       8.11497       10.2643    
  62  0.572113     -0.558419     -0.170270      0.170270       8.06512       8.23539    
  63  0.201897      -1.60000     -0.487862      0.487862       8.06856       8.55642    
  64  0.795960     -0.228206     -0.695833E-01  0.695833E-01   8.32632       8.39590    
  65  0.904277E-01  -2.40321     -0.732772      0.732772       8.20225       8.93502    
  66  0.976775E-01  -2.32608     -0.709256      0.709256       8.10953       8.81878    
  67  0.231524      -1.46307     -0.446111      0.446111       8.06768       8.51379    
  68  0.542363     -0.611819     -0.186552      0.186552       8.09118       8.27774    
  69  0.332318      -1.10166     -0.335913      0.335913       8.08776       8.42367    
  70  0.840822     -0.173375     -0.528646E-01  0.528646E-01   8.34984       8.40270    
loop,thermsimp(1:2)       75  0.299251      0.400258    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    287          8.07          0.86          1.13         24.44          0.07          0.05         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    288          8.07          0.86          1.13         24.33          0.09          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       75
neval is:      287
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       75      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       76
neval is:      287


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      287     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.497287E-01  -3.00117     -0.915101      0.915101       8.00020       8.91530    
   2  0.604222     -0.503814     -0.153620      0.153620       8.03963       8.19325    
   3  0.106168      -2.24273     -0.683840      0.683840       8.05256       8.73640    
   4  0.342113      -1.07261     -0.327055      0.327055       8.09862       8.42568    
   5  0.473442     -0.747725     -0.227992      0.227992       8.06810       8.29609    
   6  0.100866E-01  -4.59655      -1.40155       1.40155       8.04862       9.45017    
   7  0.911848     -0.922817E-01 -0.281380E-01  0.281380E-01   8.11426       8.14240    
   8  0.633547     -0.456421     -0.139169      0.139169       8.09236       8.23152    
   9  0.729024     -0.316048     -0.963676E-01  0.963676E-01   8.13016       8.22653    
  10  0.620163     -0.477772     -0.145680      0.145680       8.04995       8.19563    
  11  0.867018     -0.142695     -0.435098E-01  0.435098E-01   8.09327       8.13678    
  12  0.969344E-01  -2.33372     -0.711585      0.711585       8.04755       8.75913    
  13  0.358466      -1.02592     -0.312818      0.312818       8.03442       8.34724    
  14  0.953168     -0.479638E-01 -0.146248E-01  0.146248E-01   8.11238       8.12700    
  15  0.684510     -0.379052     -0.115578      0.115578       8.12070       8.23627    
  16  0.482047     -0.729713     -0.222500      0.222500       8.12933       8.35183    
  17  0.974791     -0.255318E-01 -0.778502E-02  0.778502E-02   8.09048       8.09826    
  18  0.978669     -0.215619E-01 -0.657454E-02  0.657454E-02   8.10547       8.11205    
  19  0.929785     -0.728022E-01 -0.221984E-01  0.221984E-01   8.08733       8.10952    
  20  0.715020     -0.335444     -0.102282      0.102282       8.10246       8.20474    
  21  0.598247     -0.513752     -0.156650      0.156650       8.10859       8.26524    
  22  0.107080      -2.23418     -0.681234      0.681234       8.11654       8.79777    
  23  0.559093     -0.581439     -0.177289      0.177289       8.18610       8.36339    
  24  0.933094     -0.692491E-01 -0.211151E-01  0.211151E-01   8.06512       8.08624    
  25  0.470169E-01  -3.05725     -0.932199      0.932199       8.09568       9.02788    
  26  0.166768      -1.79115     -0.546148      0.546148       8.17237       8.71852    
  27  0.331277      -1.10480     -0.336870      0.336870       8.18877       8.52564    
  28  0.961755     -0.389952E-01 -0.118902E-01  0.118902E-01   8.06063       8.07252    
  29  0.464366E-01  -3.06967     -0.935986      0.935986       8.09118       9.02717    
  30  0.966136E-03  -6.94221      -2.11678       2.11678       8.19746       10.3142    
  31  0.941012     -0.607999E-01 -0.185388E-01  0.185388E-01   8.11693       8.13547    
  32  0.201947E-01  -3.90233      -1.18988       1.18988       8.01090       9.20078    
  33  0.679249     -0.386768     -0.117931      0.117931       8.15194       8.26987    
  34  0.318772      -1.14328     -0.348602      0.348602       8.11627       8.46487    
  35  0.388100     -0.946493     -0.288599      0.288599       8.07112       8.35972    
  36  0.658606     -0.417629     -0.127341      0.127341       8.32632       8.45366    
  37  0.774362     -0.255715     -0.779713E-01  0.779713E-01   8.34984       8.42781    
  38  0.704871     -0.349740     -0.106641      0.106641       8.11412       8.22076    
  39  0.274189      -1.29394     -0.394540      0.394540       8.08776       8.48230    
  40  0.881806     -0.125783     -0.383530E-01  0.383530E-01   8.03969       8.07804    
  41  0.198448      -1.61723     -0.493115      0.493115       8.07678       8.56990    
  42  0.342590      -1.07122     -0.326631      0.326631       8.16632       8.49295    
  43  0.603787     -0.504534     -0.153840      0.153840       8.06918       8.22302    
  44  0.667409     -0.404353     -0.123293      0.123293       8.08867       8.21196    
  45  0.317014      -1.14881     -0.350288      0.350288       8.24941       8.59970    
  46  0.368458     -0.998429     -0.304435      0.304435       8.06768       8.37211    
  47  0.139912      -1.96674     -0.599688      0.599688       8.08698       8.68667    
  48  0.537645     -0.620557     -0.189217      0.189217       8.10077       8.28999    
  49  0.159021      -1.83872     -0.560653      0.560653       8.20747       8.76812    
  50  0.729011     -0.316067     -0.963734E-01  0.963734E-01   8.06856       8.16493    
  51  0.802486     -0.220041     -0.670938E-01  0.670938E-01   8.17975       8.24684    
  52  0.249203      -1.38949     -0.423675      0.423675       8.08186       8.50554    
  53  0.282362      -1.26456     -0.385584      0.385584       8.05853       8.44411    
  54  0.803878     -0.218308     -0.665651E-01  0.665651E-01   8.24674       8.31330    
  55  0.183401      -1.69608     -0.517159      0.517159       8.17790       8.69506    
  56  0.144999      -1.93103     -0.588798      0.588798       8.11494       8.70373    
  57  0.821026     -0.197200     -0.601292E-01  0.601292E-01   8.15023       8.21036    
  58  0.391750     -0.937132     -0.285745      0.285745       8.25932       8.54506    
  59  0.605745     -0.501297     -0.152853      0.152853       8.09754       8.25039    
  60  0.759982E-01  -2.57705     -0.785778      0.785778       8.14409       8.92987    
  61  0.856619     -0.154762     -0.471891E-01  0.471891E-01   8.23753       8.28472    
  62  0.200085      -1.60901     -0.490611      0.490611       8.12085       8.61146    
  63  0.623969     -0.471654     -0.143814      0.143814       8.10953       8.25334    
  64  0.668527     -0.402679     -0.122783      0.122783       8.06114       8.18392    
  65  0.926898     -0.759121E-01 -0.231467E-01  0.231467E-01   8.07742       8.10056    
  66  0.972428     -0.279590E-01 -0.852510E-02  0.852510E-02   8.20225       8.21078    
  67  0.230218      -1.46873     -0.447836      0.447836       8.06759       8.51543    
  68  0.756442E-01  -2.58171     -0.787202      0.787202       8.09541       8.88261    
  69  0.209346      -1.56377     -0.476815      0.476815       8.11383       8.59064    
  70  0.198646      -1.61623     -0.492812      0.492812       8.06856       8.56137    
loop,thermsimp(1:2)       76  0.915101      0.153620    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    289          8.03          0.87          1.13         24.39          0.07          0.05         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    290          8.23          0.86          1.13         24.31          0.09          0.04         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       76
neval is:      289
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       76      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       77
neval is:      289


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      289     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.596761     -0.516238     -0.157408      0.157408       8.06063       8.21804    
   2  0.476930     -0.740385     -0.225754      0.225754       8.03969       8.26544    
   3  0.845382     -0.167966     -0.512153E-01  0.512153E-01   8.06512       8.11634    
   4  0.397814     -0.921770     -0.281061      0.281061       8.09048       8.37154    
   5  0.249923      -1.38660     -0.422795      0.422795       8.07742       8.50021    
   6  0.591552     -0.525005     -0.160082      0.160082       8.08733       8.24741    
   7  0.143111      -1.94414     -0.592795      0.592795       8.10547       8.69827    
   8  0.306099      -1.18385     -0.360972      0.360972       8.11238       8.47335    
   9  0.441827     -0.816836     -0.249065      0.249065       8.11693       8.36600    
  10  0.504521     -0.684146     -0.208606      0.208606       8.09327       8.30187    
  11  0.127660      -2.05839     -0.627632      0.627632       8.11426       8.74189    
  12  0.333524      -1.09804     -0.334808      0.334808       8.06856       8.40336    
  13  0.130890      -2.03340     -0.620012      0.620012       8.06114       8.68115    
  14  0.307732      -1.17853     -0.359349      0.359349       8.03963       8.39898    
  15  0.154434E-01  -4.17057      -1.27167       1.27167       8.04995       9.32162    
  16  0.357863      -1.02761     -0.313332      0.313332       8.10246       8.41579    
  17  0.271898      -1.30233     -0.397098      0.397098       8.15023       8.54733    
  18  0.906228E-01  -2.40105     -0.732115      0.732115       8.20225       8.93437    
  19  0.344142      -1.06670     -0.325252      0.325252       8.08867       8.41392    
  20  0.392886     -0.934237     -0.284862      0.284862       8.11412       8.39898    
  21  0.454318     -0.788958     -0.240565      0.240565       8.06918       8.30975    
  22  0.384129     -0.956778     -0.291735      0.291735       8.13016       8.42190    
  23  0.354037      -1.03835     -0.316609      0.316609       8.09236       8.40896    
  24  0.154212      -1.86943     -0.570016      0.570016       8.12070       8.69071    
  25  0.816320     -0.202949     -0.618822E-01  0.618822E-01   8.17975       8.24163    
  26  0.994970     -0.504291E-02 -0.153765E-02  0.153765E-02   8.09754       8.09907    
  27  0.374719E-01  -3.28416      -1.00139       1.00139       8.10953       9.11091    
  28  0.227113      -1.48231     -0.451976      0.451976       8.10859       8.56057    
  29  0.410587     -0.890167     -0.271425      0.271425       8.15194       8.42337    
  30  0.104540E-01  -4.56077      -1.39064       1.39064       8.23753       9.62818    
  31  0.994826     -0.518730E-02 -0.158168E-02  0.158168E-02   8.10077       8.10235    
  32  0.738930     -0.302553     -0.922526E-01  0.922526E-01   8.06810       8.16035    
  33  0.715904     -0.334209     -0.101905      0.101905       8.24674       8.34864    
  34  0.128324      -2.05320     -0.626050      0.626050       8.03442       8.66047    
  35  0.856095     -0.155374     -0.473756E-01  0.473756E-01   8.12933       8.17671    
  36  0.423967     -0.858099     -0.261647      0.261647       8.07112       8.33277    
  37  0.504650     -0.683890     -0.208528      0.208528       8.18610       8.39463    
  38  0.347036      -1.05833     -0.322699      0.322699       8.06768       8.39038    
  39  0.906779     -0.978566E-01 -0.298379E-01  0.298379E-01   8.09862       8.12846    
  40  0.616911     -0.483030     -0.147283      0.147283       8.34984       8.49712    
  41  0.540209     -0.615800     -0.187766      0.187766       8.05853       8.24630    
  42  0.772932     -0.257564     -0.785349E-01  0.785349E-01   8.32632       8.40485    
  43  0.544989     -0.606989     -0.185080      0.185080       8.11627       8.30135    
  44  0.951523     -0.496917E-01 -0.151517E-01  0.151517E-01   8.08776       8.10291    
  45  0.172505      -1.75733     -0.535836      0.535836       8.16632       8.70215    
  46  0.871391     -0.137665     -0.419759E-01  0.419759E-01   8.08186       8.12384    
  47  0.127604      -2.05882     -0.627764      0.627764       8.06759       8.69536    
  48  0.785934     -0.240882     -0.734485E-01  0.734485E-01   8.18877       8.26222    
  49  0.815977     -0.203369     -0.620102E-01  0.620102E-01   8.25932       8.32133    
  50  0.350587      -1.04815     -0.319595      0.319595       8.06856       8.38815    
  51  0.739645     -0.301584     -0.919574E-01  0.919574E-01   8.07678       8.16874    
  52  0.996274     -0.373345E-02 -0.113838E-02  0.113838E-02   8.11383       8.11496    
  53  0.303822      -1.19131     -0.363249      0.363249       8.24941       8.61266    
  54  0.708260     -0.344944     -0.105178      0.105178       8.12085       8.22603    
  55  0.646268     -0.436541     -0.133107      0.133107       8.08698       8.22009    
  56  0.696585     -0.361566     -0.110247      0.110247       8.17790       8.28815    
  57  0.439732     -0.821591     -0.250515      0.250515       8.11494       8.36545    
  58  0.791452     -0.233886     -0.713151E-01  0.713151E-01   8.17237       8.24369    
  59  0.202743      -1.59581     -0.486587      0.486587       8.05256       8.53915    
  60  0.547790E-01  -2.90445     -0.885608      0.885608       8.04755       8.93316    
  61  0.663631     -0.410029     -0.125024      0.125024       8.20747       8.33249    
  62  0.838292     -0.176388     -0.537834E-01  0.537834E-01   8.11654       8.17032    
  63  0.450238     -0.797979     -0.243315      0.243315       8.09541       8.33873    
  64  0.209610      -1.56251     -0.476431      0.476431       8.00020       8.47663    
  65  0.502241     -0.688676     -0.209987      0.209987       8.14409       8.35408    
  66  0.837306     -0.177566     -0.541424E-01  0.541424E-01   8.09118       8.14533    
  67  0.345973      -1.06139     -0.323634      0.323634       8.09568       8.41931    
  68  0.558861     -0.581855     -0.177416      0.177416       8.01090       8.18832    
  69  0.293365      -1.22634     -0.373928      0.373928       8.04862       8.42255    
  70  0.234701      -1.44944     -0.441956      0.441956       8.02849       8.47044    
loop,thermsimp(1:2)       77  0.157408      0.225754    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    291          8.56          0.86          1.13         24.59          0.07          0.05         26.70
Just calling func    0   0         26.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.56
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       77
neval is:      290
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       77      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       78
neval is:      290


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      290     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.941883     -0.598737E-01 -0.182563E-01  0.182563E-01   8.09754       8.11579    
   2  0.368209     -0.999105     -0.304642      0.304642       8.10077       8.40541    
   3  0.508630     -0.676034     -0.206132      0.206132       8.08776       8.29389    
   4  0.744324     -0.295279     -0.900349E-01  0.900349E-01   8.11383       8.20386    
   5  0.401586     -0.912333     -0.278183      0.278183       8.06512       8.34331    
   6  0.712794     -0.338563     -0.103233      0.103233       8.08186       8.18509    
   7  0.186976      -1.67678     -0.511273      0.511273       8.09862       8.60990    
   8  0.688451     -0.373311     -0.113828      0.113828       8.09118       8.20501    
   9  0.668652     -0.402492     -0.122726      0.122726       8.06810       8.19083    
  10  0.656767     -0.420426     -0.128194      0.128194       8.07678       8.20498    
  11  0.853336     -0.158602     -0.483601E-01  0.483601E-01   8.11654       8.16490    
  12  0.556440     -0.586195     -0.178739      0.178739       8.12933       8.30807    
  13  0.258558E-01  -3.65522      -1.11453       1.11453       8.01090       9.12543    
  14  0.121003E-01  -4.41452      -1.34605       1.34605       8.06063       9.40668    
  15  0.150890      -1.89120     -0.576654      0.576654       8.08698       8.66363    
  16  0.820074     -0.198360     -0.604829E-01  0.604829E-01   8.12085       8.18133    
  17  0.151452      -1.88748     -0.575521      0.575521       8.17975       8.75527    
  18  0.305465      -1.18592     -0.361605      0.361605       8.17237       8.53398    
  19  0.533202     -0.628854     -0.191747      0.191747       8.05853       8.25028    
  20  0.143416      -1.94201     -0.592146      0.592146       8.08733       8.67947    
  21  0.687081     -0.375303     -0.114435      0.114435       8.18877       8.30320    
  22  0.546247     -0.604685     -0.184377      0.184377       8.03969       8.22407    
  23  0.356987      -1.03006     -0.314079      0.314079       8.17790       8.49198    
  24  0.545718     -0.605653     -0.184672      0.184672       8.11627       8.30094    
  25  0.789688     -0.236117     -0.719954E-01  0.719954E-01   8.09327       8.16526    
  26  0.752086     -0.284904     -0.868714E-01  0.868714E-01   8.06918       8.15606    
  27  0.388816     -0.944650     -0.288037      0.288037       8.25932       8.54736    
  28  0.988428     -0.116395E-01 -0.354906E-02  0.354906E-02   8.20747       8.21102    
  29  0.124991      -2.07952     -0.634075      0.634075       8.07112       8.70520    
  30  0.568214     -0.565257     -0.172355      0.172355       8.09541       8.26777    
  31  0.551032     -0.595962     -0.181717      0.181717       8.24674       8.42845    
  32  0.423622     -0.858913     -0.261895      0.261895       8.14409       8.40599    
  33  0.647554     -0.434553     -0.132502      0.132502       8.11494       8.24744    
  34  0.686255     -0.376506     -0.114802      0.114802       8.11693       8.23174    
  35  0.548072     -0.601349     -0.183360      0.183360       8.09048       8.27384    
  36  0.880777     -0.126951     -0.387092E-01  0.387092E-01   8.06856       8.10727    
  37  0.894918     -0.111023     -0.338524E-01  0.338524E-01   8.06768       8.10153    
  38  0.241077      -1.42264     -0.433783      0.433783       8.18610       8.61988    
  39  0.546141     -0.604877     -0.184436      0.184436       8.03963       8.22406    
  40  0.266590      -1.32204     -0.403110      0.403110       8.11412       8.51723    
  41  0.575085     -0.553238     -0.168690      0.168690       8.06856       8.23725    
  42  0.907139     -0.974596E-01 -0.297168E-01  0.297168E-01   8.32632       8.35604    
  43  0.469109     -0.756920     -0.230796      0.230796       8.09236       8.32315    
  44  0.738008     -0.303801     -0.926333E-01  0.926333E-01   8.08867       8.18130    
  45  0.557598     -0.584116     -0.178105      0.178105       8.10246       8.28056    
  46  0.305677      -1.18523     -0.361392      0.361392       8.09568       8.45707    
  47  0.392927     -0.934131     -0.284830      0.284830       8.13016       8.41499    
  48  0.121997      -2.10376     -0.641465      0.641465       8.04862       8.69008    
  49  0.712082     -0.339563     -0.103538      0.103538       8.15194       8.25548    
  50  0.342132      -1.07256     -0.327038      0.327038       8.02849       8.35553    
  51  0.288307      -1.24373     -0.379231      0.379231       8.11238       8.49161    
  52  0.554777     -0.589188     -0.179652      0.179652       8.00020       8.17985    
  53  0.116597E-01  -4.45161      -1.35736       1.35736       8.34984       9.70720    
  54  0.844148     -0.169427     -0.516607E-01  0.516607E-01   8.07742       8.12908    
  55  0.910896     -0.933267E-01 -0.284567E-01  0.284567E-01   8.05256       8.08102    
  56  0.257100      -1.35829     -0.414163      0.414163       8.15023       8.56440    
  57  0.340199      -1.07823     -0.328766      0.328766       8.10859       8.43736    
  58  0.656010     -0.421580     -0.128546      0.128546       8.24941       8.37796    
  59  0.894739     -0.111224     -0.339137E-01  0.339137E-01   8.03442       8.06833    
  60  0.226933      -1.48310     -0.452219      0.452219       8.06114       8.51336    
  61  0.478182     -0.737763     -0.224955      0.224955       8.12070       8.34565    
  62  0.361863      -1.01649     -0.309943      0.309943       8.06759       8.37754    
  63  0.415757     -0.877654     -0.267609      0.267609       8.10547       8.37308    
  64  0.540919     -0.614487     -0.187366      0.187366       8.16632       8.35368    
  65  0.489341     -0.714697     -0.217921      0.217921       8.11426       8.33218    
  66  0.963632     -0.370456E-01 -0.112957E-01  0.112957E-01   8.04755       8.05884    
  67  0.312700      -1.16251     -0.354467      0.354467       8.20225       8.55672    
  68  0.145861      -1.92510     -0.586991      0.586991       8.10953       8.69652    
  69  0.960223     -0.405895E-01 -0.123763E-01  0.123763E-01   8.04995       8.06232    
  70  0.490262     -0.712815     -0.217347      0.217347       8.55969       8.77704    
loop,thermsimp(1:2)       78  0.182563E-01  0.304642    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    292          8.33          0.87          1.13         24.54          0.09          0.05         26.67
Just calling func    0   0         26.67


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.33
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       78
neval is:      291
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       78      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       79
neval is:      291


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      291     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.708826E-01  -2.64673     -0.807026      0.807026       8.04755       8.85458    
   2  0.952063     -0.491245E-01 -0.149788E-01  0.149788E-01   8.04995       8.06493    
   3  0.207928      -1.57057     -0.478888      0.478888       8.03442       8.51331    
   4  0.564009     -0.572686     -0.174620      0.174620       8.05256       8.22718    
   5  0.461636     -0.772979     -0.235692      0.235692       8.06768       8.30337    
   6  0.683812     -0.380072     -0.115889      0.115889       8.06856       8.18445    
   7  0.153569      -1.87360     -0.571288      0.571288       8.09754       8.66882    
   8  0.605650     -0.501453     -0.152900      0.152900       8.07742       8.23032    
   9  0.257296      -1.35753     -0.413930      0.413930       8.06918       8.48311    
  10  0.517987     -0.657805     -0.200574      0.200574       8.11654       8.31711    
  11  0.571129     -0.560140     -0.170795      0.170795       8.09327       8.26406    
  12  0.735134     -0.307703     -0.938230E-01  0.938230E-01   8.00020       8.09402    
  13  0.766340E-02  -4.87130      -1.48533       1.48533       8.08867       9.57400    
  14  0.435932     -0.830269     -0.253161      0.253161       8.12085       8.37401    
  15  0.513945     -0.665639     -0.202963      0.202963       8.08186       8.28482    
  16  0.447046     -0.805095     -0.245485      0.245485       8.06810       8.31358    
  17  0.244813      -1.40726     -0.429093      0.429093       8.11383       8.54292    
  18  0.183933      -1.69318     -0.516276      0.516276       8.07678       8.59306    
  19  0.413164     -0.883910     -0.269517      0.269517       8.09118       8.36070    
  20  0.869613     -0.139707     -0.425988E-01  0.425988E-01   8.20747       8.25007    
  21  0.853260     -0.158691     -0.483871E-01  0.483871E-01   8.03963       8.08801    
  22  0.138067      -1.98001     -0.603734      0.603734       8.03969       8.64342    
  23  0.940528     -0.613134E-01 -0.186953E-01  0.186953E-01   8.11693       8.13563    
  24  0.694939     -0.363931     -0.110968      0.110968       8.06856       8.17952    
  25  0.962776     -0.379346E-01 -0.115668E-01  0.115668E-01   8.11494       8.12650    
  26  0.378266     -0.972158     -0.296425      0.296425       8.05853       8.35495    
  27  0.855922     -0.155576     -0.474373E-01  0.474373E-01   8.15194       8.19938    
  28  0.393452     -0.932797     -0.284423      0.284423       8.09541       8.37984    
  29  0.253590      -1.37204     -0.418354      0.418354       8.09048       8.50883    
  30  0.777948     -0.251096     -0.765627E-01  0.765627E-01   8.10246       8.17902    
  31  0.654890     -0.423288     -0.129067      0.129067       8.08776       8.21682    
  32  0.690016E-01  -2.67363     -0.815227      0.815227       8.11627       8.93149    
  33  0.101034      -2.29229     -0.698953      0.698953       8.18877       8.88772    
  34  0.684533     -0.379019     -0.115568      0.115568       8.12933       8.24490    
  35  0.592603     -0.523230     -0.159540      0.159540       8.09236       8.25190    
  36  0.904830     -0.100009     -0.304940E-01  0.304940E-01   8.11426       8.14476    
  37  0.400244     -0.915681     -0.279204      0.279204       8.06512       8.34433    
  38  0.698191     -0.359263     -0.109544      0.109544       8.12070       8.23024    
  39  0.551449E-01  -2.89779     -0.883578      0.883578       8.16632       9.04990    
  40  0.500493     -0.692161     -0.211050      0.211050       8.02849       8.23954    
  41  0.289592      -1.23928     -0.377875      0.377875       8.32632       8.70419    
  42  0.447163     -0.804833     -0.245405      0.245405       8.10547       8.35088    
  43  0.690940     -0.369702     -0.112727      0.112727       8.06759       8.18032    
  44  0.631068     -0.460341     -0.140365      0.140365       8.24941       8.38978    
  45  0.926041     -0.768363E-01 -0.234285E-01  0.234285E-01   8.10077       8.12420    
  46  0.436187     -0.829684     -0.252983      0.252983       8.14409       8.39707    
  47  0.314139      -1.15792     -0.353066      0.353066       8.13016       8.48323    
  48  0.363110      -1.01305     -0.308893      0.308893       8.24674       8.55563    
  49  0.446982     -0.805238     -0.245529      0.245529       8.10859       8.35412    
  50  0.541529     -0.613360     -0.187022      0.187022       8.09568       8.28270    
  51  0.415529     -0.878202     -0.267776      0.267776       8.11238       8.38015    
  52  0.559792     -0.580190     -0.176908      0.176908       8.17790       8.35481    
  53  0.931332     -0.711389E-01 -0.216913E-01  0.216913E-01   8.06114       8.08283    
  54  0.653342     -0.425655     -0.129788      0.129788       8.11412       8.24391    
  55  0.254324E-01  -3.67173      -1.11956       1.11956       8.17237       9.29194    
  56  0.365877      -1.00546     -0.306578      0.306578       8.25932       8.56590    
  57  0.187661      -1.67312     -0.510157      0.510157       8.20225       8.71241    
  58  0.592744     -0.522993     -0.159468      0.159468       8.15023       8.30970    
  59  0.211036      -1.55573     -0.474364      0.474364       8.09862       8.57299    
  60  0.718956     -0.329955     -0.100608      0.100608       8.18610       8.28671    
  61  0.170082      -1.77147     -0.540148      0.540148       8.08698       8.62713    
  62  0.190051      -1.66046     -0.506299      0.506299       8.08733       8.59363    
  63  0.275889      -1.28776     -0.392655      0.392655       8.04862       8.44127    
  64  0.670664     -0.399487     -0.121809      0.121809       8.10953       8.23134    
  65  0.294211      -1.22346     -0.373049      0.373049       8.07112       8.44417    
  66  0.710312     -0.342050     -0.104296      0.104296       8.17975       8.28404    
  67  0.432365     -0.838485     -0.255666      0.255666       8.55969       8.81536    
  68  0.488453     -0.716511     -0.218475      0.218475       8.01090       8.22937    
  69  0.250523      -1.38421     -0.422064      0.422064       8.06063       8.48269    
  70  0.842097     -0.171860     -0.524025E-01  0.524025E-01   8.32654       8.37894    
loop,thermsimp(1:2)       79  0.807026      0.149788E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    293          7.99          0.86          1.12         24.35          0.07          0.07         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    294          8.37          0.84          1.12         24.42          0.09          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       79
neval is:      293
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       79      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       80
neval is:      293


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      293     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.668425     -0.402832     -0.122829      0.122829       8.04995       8.17278    
   2  0.238500      -1.43339     -0.437060      0.437060       8.06114       8.49820    
   3  0.689211     -0.372208     -0.113492      0.113492       8.03963       8.15312    
   4  0.540774     -0.614753     -0.187447      0.187447       8.00020       8.18765    
   5  0.178857      -1.72117     -0.524810      0.524810       8.10077       8.62558    
   6  0.884253     -0.123012     -0.375082E-01  0.375082E-01   8.11494       8.15244    
   7  0.755546     -0.280314     -0.854719E-01  0.854719E-01   8.11693       8.20241    
   8  0.654086E-01  -2.72710     -0.831532      0.831532       8.11426       8.94580    
   9  0.802958     -0.219452     -0.669142E-01  0.669142E-01   8.10246       8.16937    
  10  0.840665     -0.173562     -0.529214E-01  0.529214E-01   8.06856       8.12148    
  11  0.864930     -0.145107     -0.442451E-01  0.442451E-01   8.06759       8.11184    
  12  0.728243     -0.317120     -0.966945E-01  0.966945E-01   8.06856       8.16525    
  13  0.453086     -0.791672     -0.241392      0.241392       8.15194       8.39333    
  14  0.702549E-01  -2.65563     -0.809738      0.809738       8.08776       8.89750    
  15  0.610595     -0.493321     -0.150421      0.150421       8.05256       8.20298    
  16  0.728410E-02  -4.92206      -1.50081       1.50081       8.01090       9.51171    
  17  0.913763     -0.901841E-01 -0.274984E-01  0.274984E-01   8.12070       8.14819    
  18  0.165001      -1.80180     -0.549396      0.549396       8.07742       8.62681    
  19  0.917747E-01  -2.38842     -0.728263      0.728263       8.10953       8.83779    
  20  0.338507      -1.08321     -0.330287      0.330287       8.02849       8.35878    
  21  0.357666      -1.02815     -0.313499      0.313499       8.11412       8.42762    
  22  0.389441     -0.943044     -0.287548      0.287548       8.12933       8.41688    
  23  0.879897     -0.127950     -0.390138E-01  0.390138E-01   8.20747       8.24648    
  24  0.418897     -0.870129     -0.265315      0.265315       8.09236       8.35767    
  25  0.838426     -0.176230     -0.537349E-01  0.537349E-01   8.09327       8.14700    
  26  0.185169      -1.68649     -0.514234      0.514234       8.09568       8.60991    
  27  0.200952      -1.60469     -0.489292      0.489292       8.17975       8.66904    
  28  0.877256     -0.130957     -0.399305E-01  0.399305E-01   8.08186       8.12179    
  29  0.386592     -0.950385     -0.289786      0.289786       8.18610       8.47589    
  30  0.888706     -0.117988     -0.359763E-01  0.359763E-01   8.06768       8.10365    
  31  0.105408      -2.24991     -0.686031      0.686031       8.15023       8.83627    
  32  0.994268     -0.574873E-02 -0.175287E-02  0.175287E-02   8.06810       8.06985    
  33  0.764077     -0.269087     -0.820484E-01  0.820484E-01   8.11654       8.19859    
  34  0.812108     -0.208121     -0.634592E-01  0.634592E-01   8.06512       8.12858    
  35  0.121669      -2.10645     -0.642288      0.642288       8.10547       8.74776    
  36  0.637909     -0.449559     -0.137077      0.137077       8.10859       8.24567    
  37  0.316007E-02  -5.75716      -1.75544       1.75544       8.17790       9.93335    
  38  0.229677      -1.47108     -0.448554      0.448554       8.05853       8.50708    
  39  0.521374     -0.651288     -0.198587      0.198587       8.09118       8.28977    
  40  0.391402     -0.938019     -0.286016      0.286016       8.12085       8.40686    
  41  0.327357      -1.11670     -0.340499      0.340499       8.32654       8.66704    
  42  0.963139     -0.375576E-01 -0.114519E-01  0.114519E-01   8.09541       8.10686    
  43  0.174261      -1.74720     -0.532746      0.532746       8.11238       8.64512    
  44  0.331602      -1.10382     -0.336570      0.336570       8.24941       8.58598    
  45  0.526338     -0.641812     -0.195698      0.195698       8.14409       8.33979    
  46  0.413265     -0.883667     -0.269443      0.269443       8.04862       8.31806    
  47  0.541510E-02  -5.21856      -1.59122       1.59122       8.07112       9.66234    
  48  0.781613     -0.246396     -0.751295E-01  0.751295E-01   8.06063       8.13576    
  49  0.656825     -0.420337     -0.128167      0.128167       8.06918       8.19735    
  50  0.584791     -0.536501     -0.163587      0.163587       8.13016       8.29375    
  51  0.811204     -0.209236     -0.637990E-01  0.637990E-01   8.09048       8.15428    
  52  0.421027     -0.865059     -0.263769      0.263769       8.03442       8.29819    
  53  0.663739     -0.409866     -0.124974      0.124974       8.11383       8.23880    
  54  0.164765      -1.80323     -0.549832      0.549832       8.24674       8.79657    
  55  0.883187E-01  -2.42680     -0.739967      0.739967       8.25932       8.99929    
  56  0.825424     -0.191858     -0.585002E-01  0.585002E-01   8.09862       8.15713    
  57  0.201966E-01  -3.90224      -1.18985       1.18985       8.07678       9.26663    
  58  0.174898      -1.74355     -0.531634      0.531634       8.08733       8.61896    
  59  0.477008     -0.740222     -0.225704      0.225704       8.08698       8.31268    
  60  0.162167E-01  -4.12171      -1.25677       1.25677       8.03969       9.29646    
  61  0.378219     -0.972282     -0.296463      0.296463       8.09754       8.39400    
  62  0.980713     -0.194752E-01 -0.593828E-02  0.593828E-02   8.32632       8.33226    
  63  0.232487      -1.45892     -0.444846      0.444846       8.20225       8.64710    
  64  0.962055     -0.386832E-01 -0.117951E-01  0.117951E-01   8.55969       8.57149    
  65  0.761875     -0.271973     -0.829284E-01  0.829284E-01   8.04755       8.13048    
  66  0.673649     -0.395046     -0.120455      0.120455       8.18877       8.30922    
  67  0.979237     -0.209814E-01 -0.639753E-02  0.639753E-02   8.11627       8.12266    
  68  0.361942      -1.01627     -0.309876      0.309876       8.16632       8.47619    
  69  0.191552      -1.65259     -0.503900      0.503900       8.17237       8.67627    
  70  0.708040     -0.345254     -0.105273      0.105273       7.99049       8.09576    
loop,thermsimp(1:2)       80  0.122829      0.437060    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    295          8.70          0.86          1.13         24.29          0.08          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    296          8.71          0.86          1.13         24.40          0.06          0.05         26.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.70
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       80
neval is:      295
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       80      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       81
neval is:      295


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      295     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.270023      -1.30925     -0.399209      0.399209       8.06810       8.46731    
   2  0.879265     -0.128669     -0.392329E-01  0.392329E-01   7.99049       8.02972    
   3  0.684902     -0.378479     -0.115404      0.115404       8.06768       8.18308    
   4  0.893896     -0.112166     -0.342009E-01  0.342009E-01   8.09541       8.12961    
   5  0.476761     -0.740739     -0.225862      0.225862       8.06759       8.29346    
   6  0.755167     -0.280817     -0.856250E-01  0.856250E-01   8.06856       8.15418    
   7  0.452407     -0.793173     -0.241850      0.241850       8.08186       8.32371    
   8  0.723906     -0.323093     -0.985157E-01  0.985157E-01   8.11627       8.21478    
   9  0.451260     -0.795711     -0.242624      0.242624       8.06512       8.30775    
  10  0.668265     -0.403071     -0.122902      0.122902       8.04755       8.17045    
  11  0.777249     -0.251995     -0.768369E-01  0.768369E-01   8.06063       8.13747    
  12  0.342240      -1.07224     -0.326943      0.326943       8.09327       8.42021    
  13  0.639156     -0.447606     -0.136482      0.136482       8.12070       8.25718    
  14  0.166924      -1.79022     -0.545863      0.545863       8.11494       8.66080    
  15  0.375260     -0.980137     -0.298858      0.298858       8.03963       8.33849    
  16  0.299730      -1.20487     -0.367383      0.367383       8.09048       8.45786    
  17  0.407119     -0.898650     -0.274011      0.274011       8.09862       8.37264    
  18  0.762992E-01  -2.57309     -0.784573      0.784573       8.06856       8.85313    
  19  0.281066      -1.26917     -0.386987      0.386987       8.10246       8.48944    
  20  0.220512      -1.51180     -0.460970      0.460970       8.04995       8.51092    
  21  0.389846     -0.942004     -0.287231      0.287231       8.00020       8.28743    
  22  0.660048     -0.415443     -0.126675      0.126675       8.06918       8.19586    
  23  0.150026      -1.89695     -0.578407      0.578407       8.11654       8.69495    
  24  0.113767      -2.17360     -0.662762      0.662762       8.11693       8.77970    
  25  0.810589     -0.209994     -0.640302E-01  0.640302E-01   8.05256       8.11659    
  26  0.247911      -1.39468     -0.425259      0.425259       8.11383       8.53909    
  27  0.408875     -0.894345     -0.272699      0.272699       8.10859       8.38129    
  28  0.310528      -1.16948     -0.356592      0.356592       8.20747       8.56406    
  29  0.663027     -0.410939     -0.125301      0.125301       8.09118       8.21648    
  30  0.798362     -0.225193     -0.686645E-01  0.686645E-01   8.13016       8.19883    
  31  0.564885     -0.571133     -0.174147      0.174147       8.03442       8.20857    
  32  0.473510E-02  -5.35275      -1.63213       1.63213       8.18877       9.82090    
  33  0.933475E-01  -2.37143     -0.723082      0.723082       8.08698       8.81006    
  34  0.931702     -0.707423E-01 -0.215703E-01  0.215703E-01   8.04862       8.07019    
  35  0.341741      -1.07370     -0.327388      0.327388       8.32632       8.65371    
  36  0.171330      -1.76417     -0.537919      0.537919       8.14409       8.68201    
  37  0.355860      -1.03322     -0.315043      0.315043       8.09236       8.40740    
  38  0.469639     -0.755790     -0.230451      0.230451       8.02849       8.25894    
  39  0.805376     -0.216446     -0.659974E-01  0.659974E-01   8.15194       8.21794    
  40  0.651615     -0.428301     -0.130595      0.130595       8.09754       8.22813    
  41  0.126831      -2.06490     -0.629617      0.629617       8.12085       8.75046    
  42  0.715737     -0.334442     -0.101976      0.101976       8.12933       8.23131    
  43  0.444007     -0.811915     -0.247564      0.247564       8.11412       8.36169    
  44  0.887105     -0.119791     -0.365261E-01  0.365261E-01   8.18610       8.22263    
  45  0.492139     -0.708993     -0.216182      0.216182       8.16632       8.38250    
  46  0.590315     -0.527098     -0.160720      0.160720       8.06114       8.22186    
  47  0.313130      -1.16114     -0.354047      0.354047       8.05853       8.41258    
  48  0.824070     -0.193500     -0.590010E-01  0.590010E-01   8.55969       8.61869    
  49  0.785026     -0.242039     -0.738012E-01  0.738012E-01   8.24941       8.32321    
  50  0.105781      -2.24638     -0.684954      0.684954       8.09568       8.78063    
  51  0.644933     -0.438608     -0.133738      0.133738       8.08733       8.22106    
  52  0.656932     -0.420175     -0.128118      0.128118       8.10077       8.22889    
  53  0.418239     -0.871703     -0.265795      0.265795       8.07742       8.34321    
  54  0.191132      -1.65479     -0.504569      0.504569       8.11238       8.61695    
  55  0.493587     -0.706055     -0.215286      0.215286       8.20225       8.41754    
  56  0.490289     -0.712761     -0.217331      0.217331       8.32654       8.54387    
  57  0.703124     -0.352222     -0.107398      0.107398       8.17975       8.28714    
  58  0.514219E-01  -2.96769     -0.904891      0.904891       8.17237       9.07726    
  59  0.967122     -0.334307E-01 -0.101935E-01  0.101935E-01   8.10547       8.11567    
  60  0.164565      -1.80445     -0.550202      0.550202       8.24674       8.79694    
  61  0.787129     -0.239363     -0.729852E-01  0.729852E-01   8.15023       8.22322    
  62  0.877224     -0.130993     -0.399417E-01  0.399417E-01   8.10953       8.14947    
  63  0.826666     -0.190355     -0.580418E-01  0.580418E-01   8.08776       8.14580    
  64  0.478850     -0.736368     -0.224529      0.224529       8.11426       8.33879    
  65  0.850214E-01  -2.46485     -0.751569      0.751569       8.25932       9.01089    
  66  0.752587     -0.284239     -0.866686E-01  0.866686E-01   8.07678       8.16345    
  67  0.286540      -1.24988     -0.381105      0.381105       8.03969       8.42079    
  68  0.581717     -0.541771     -0.165194      0.165194       8.01090       8.17609    
  69  0.907599     -0.969526E-01 -0.295622E-01  0.295622E-01   8.07112       8.10068    
  70  0.159227      -1.83743     -0.560258      0.560258       8.70454       9.26480    
loop,thermsimp(1:2)       81  0.399209      0.392329E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    297          8.59          0.86          1.13         24.35          0.07          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.59
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       81
neval is:      296
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       81      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       82
neval is:      296


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      296     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.130014E-01  -4.34270      -1.32415       1.32415       7.99049       9.31464    
   2  0.906957E-01  -2.40025     -0.731869      0.731869       8.04862       8.78049    
   3  0.973677     -0.266758E-01 -0.813385E-02  0.813385E-02   8.07112       8.07926    
   4  0.764409     -0.268653     -0.819160E-01  0.819160E-01   8.10547       8.18739    
   5  0.647718     -0.434300     -0.132424      0.132424       8.05256       8.18498    
   6  0.450945     -0.796410     -0.242837      0.242837       8.09541       8.33825    
   7  0.342138      -1.07254     -0.327033      0.327033       8.06063       8.38766    
   8  0.491560     -0.710170     -0.216541      0.216541       8.08776       8.30430    
   9  0.728901     -0.316218     -0.964194E-01  0.964194E-01   8.10953       8.20595    
  10  0.361124      -1.01853     -0.310566      0.310566       8.06856       8.37912    
  11  0.187026      -1.67651     -0.511191      0.511191       8.07678       8.58797    
  12  0.560514     -0.578901     -0.176515      0.176515       8.04755       8.22406    
  13  0.218776      -1.51971     -0.463380      0.463380       8.01090       8.47428    
  14  0.109271      -2.21392     -0.675056      0.675056       8.06768       8.74273    
  15  0.263420E-01  -3.63659      -1.10885       1.10885       8.06918       9.17803    
  16  0.654642     -0.423667     -0.129182      0.129182       8.13016       8.25934    
  17  0.975959     -0.243343E-01 -0.741987E-02  0.741987E-02   8.03442       8.04184    
  18  0.107212      -2.23295     -0.680858      0.680858       8.11627       8.79712    
  19  0.972340     -0.280494E-01 -0.855266E-02  0.855266E-02   8.09118       8.09974    
  20  0.259158      -1.35032     -0.411731      0.411731       8.15194       8.56367    
  21  0.889970     -0.116568     -0.355431E-01  0.355431E-01   8.08733       8.12287    
  22  0.956672     -0.442943E-01 -0.135060E-01  0.135060E-01   8.06114       8.07465    
  23  0.299261      -1.20644     -0.367860      0.367860       8.18610       8.55396    
  24  0.114836      -2.16425     -0.659910      0.659910       8.15023       8.81014    
  25  0.728848     -0.316291     -0.964416E-01  0.964416E-01   8.09754       8.19398    
  26  0.650336     -0.430267     -0.131194      0.131194       8.10077       8.23197    
  27  0.816983     -0.202137     -0.616346E-01  0.616346E-01   8.12933       8.19097    
  28  0.507860     -0.677550     -0.206595      0.206595       8.12070       8.32729    
  29  0.920661     -0.826634E-01 -0.252052E-01  0.252052E-01   8.02849       8.05369    
  30  0.253772      -1.37132     -0.418135      0.418135       8.17975       8.59788    
  31  0.667512     -0.404198     -0.123246      0.123246       8.00020       8.12344    
  32  0.772715     -0.257844     -0.786205E-01  0.786205E-01   8.06759       8.14621    
  33  0.757620     -0.277573     -0.846360E-01  0.846360E-01   8.06512       8.14976    
  34  0.776421     -0.253060     -0.771617E-01  0.771617E-01   8.24941       8.32657    
  35  0.886642     -0.120314     -0.366856E-01  0.366856E-01   8.08186       8.11855    
  36  0.238693E-01  -3.73516      -1.13890       1.13890       8.03963       9.17853    
  37  0.303957      -1.19087     -0.363113      0.363113       8.11426       8.47738    
  38  0.875267     -0.133226     -0.406226E-01  0.406226E-01   8.07742       8.11804    
  39  0.144246      -1.93624     -0.590386      0.590386       8.11412       8.70451    
  40  0.993963     -0.605564E-02 -0.184645E-02  0.184645E-02   8.09862       8.10047    
  41  0.172168      -1.75928     -0.536431      0.536431       8.10859       8.64502    
  42  0.979713     -0.204952E-01 -0.624929E-02  0.624929E-02   8.16632       8.17257    
  43  0.938694     -0.632658E-01 -0.192907E-01  0.192907E-01   8.09236       8.11165    
  44  0.716061     -0.333990     -0.101838      0.101838       8.05853       8.16037    
  45  0.764601     -0.268402     -0.818396E-01  0.818396E-01   8.20225       8.28409    
  46  0.546951     -0.603396     -0.183984      0.183984       8.09327       8.27725    
  47  0.104442      -2.25912     -0.688838      0.688838       8.03969       8.72853    
  48  0.669980     -0.400508     -0.122120      0.122120       8.09048       8.21260    
  49  0.255048      -1.36630     -0.416605      0.416605       8.06810       8.48470    
  50  0.761153     -0.272921     -0.832175E-01  0.832175E-01   8.10246       8.18567    
  51  0.273269      -1.29730     -0.395566      0.395566       8.04995       8.44551    
  52  0.789047E-01  -2.53951     -0.774334      0.774334       8.11383       8.88816    
  53  0.723703     -0.323374     -0.986014E-01  0.986014E-01   8.32654       8.42514    
  54  0.535422     -0.624699     -0.190480      0.190480       8.20747       8.39795    
  55  0.394266     -0.930730     -0.283793      0.283793       8.11238       8.39617    
  56  0.334209      -1.09599     -0.334182      0.334182       8.55969       8.89387    
  57  0.713084     -0.338156     -0.103109      0.103109       8.32632       8.42943    
  58  0.335811      -1.09121     -0.332724      0.332724       8.11494       8.44766    
  59  0.877329     -0.130873     -0.399051E-01  0.399051E-01   8.14409       8.18400    
  60  0.804760     -0.217212     -0.662310E-01  0.662310E-01   8.11654       8.18277    
  61  0.676806     -0.390371     -0.119030      0.119030       8.12085       8.23988    
  62  0.139025      -1.97310     -0.601628      0.601628       8.11693       8.71856    
  63  0.453238     -0.791339     -0.241291      0.241291       8.09568       8.33697    
  64  0.174629      -1.74509     -0.532104      0.532104       8.24674       8.77884    
  65  0.770625     -0.260553     -0.794463E-01  0.794463E-01   8.08698       8.16642    
  66  0.636484     -0.451797     -0.137759      0.137759       8.06856       8.20632    
  67  0.336462      -1.08927     -0.332134      0.332134       8.25932       8.59145    
  68  0.534955     -0.625573     -0.190746      0.190746       8.17237       8.36312    
  69  0.847446E-01  -2.46811     -0.752563      0.752563       8.70454       9.45711    
  70  0.917274     -0.863490E-01 -0.263291E-01  0.263291E-01   8.59445       8.62078    
loop,thermsimp(1:2)       82   1.32415      0.731869    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    298          8.18          0.86          1.13         24.36          0.05          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    299          8.30          0.86          1.13         24.32          0.07          0.04         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.18
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       82
neval is:      298
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       82      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       83
neval is:      298


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      298     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.609134     -0.495717     -0.151151      0.151151       8.03442       8.18557    
   2  0.266275      -1.32323     -0.403470      0.403470       8.02849       8.43196    
   3  0.545538     -0.605984     -0.184773      0.184773       8.06114       8.24591    
   4  0.196234      -1.62845     -0.496536      0.496536       8.07112       8.56766    
   5  0.786411     -0.240275     -0.732634E-01  0.732634E-01   8.09118       8.16445    
   6  0.453912     -0.789853     -0.240837      0.240837       8.09862       8.33946    
   7  0.900549     -0.104751     -0.319400E-01  0.319400E-01   8.09236       8.12430    
   8  0.339919      -1.07905     -0.329017      0.329017       8.07742       8.40643    
   9  0.511643     -0.670128     -0.204332      0.204332       8.08186       8.28619    
  10  0.628202     -0.464894     -0.141753      0.141753       8.08733       8.22908    
  11  0.672886E-01  -2.69876     -0.822892      0.822892       8.00020       8.82309    
  12  0.518493     -0.656829     -0.200277      0.200277       8.06759       8.26787    
  13  0.994926     -0.508642E-02 -0.155092E-02  0.155092E-02   8.06512       8.06668    
  14  0.733191     -0.310349     -0.946298E-01  0.946298E-01   8.05853       8.15316    
  15  0.952818     -0.483318E-01 -0.147371E-01  0.147371E-01   8.08698       8.10172    
  16  0.735955     -0.306586     -0.934826E-01  0.934826E-01   8.16632       8.25980    
  17  0.743149     -0.296859     -0.905165E-01  0.905165E-01   8.11654       8.20705    
  18  0.549375     -0.598975     -0.182636      0.182636       8.14409       8.32673    
  19  0.355140      -1.03524     -0.315661      0.315661       8.05256       8.36822    
  20  0.482165     -0.729469     -0.222425      0.222425       8.10246       8.32488    
  21  0.577197     -0.549571     -0.167572      0.167572       8.10547       8.27305    
  22  0.107316E-01  -4.53456      -1.38265       1.38265       8.12933       9.51199    
  23  0.923969     -0.790764E-01 -0.241115E-01  0.241115E-01   8.09754       8.12165    
  24  0.810451     -0.210164     -0.640820E-01  0.640820E-01   8.10953       8.17361    
  25  0.143346      -1.94249     -0.592293      0.592293       8.06856       8.66085    
  26  0.994184     -0.583318E-02 -0.177862E-02  0.177862E-02   8.09048       8.09226    
  27  0.870737     -0.138415     -0.422048E-01  0.422048E-01   8.04755       8.08975    
  28  0.970691     -0.297469E-01 -0.907027E-02  0.907027E-02   8.10077       8.10984    
  29  0.351269      -1.04620     -0.319002      0.319002       8.12085       8.43985    
  30  0.464982     -0.765756     -0.233490      0.233490       8.13016       8.36365    
  31  0.921785     -0.814432E-01 -0.248332E-01  0.248332E-01   8.09327       8.11810    
  32  0.110512      -2.20263     -0.671613      0.671613       8.20225       8.87386    
  33  0.261408      -1.34167     -0.409095      0.409095       8.08776       8.49685    
  34  0.908908     -0.955118E-01 -0.291229E-01  0.291229E-01   8.24941       8.27853    
  35  0.819412     -0.199168     -0.607291E-01  0.607291E-01   8.12070       8.18143    
  36  0.466482     -0.762536     -0.232508      0.232508       8.09568       8.32819    
  37  0.717237     -0.332349     -0.101338      0.101338       8.09541       8.19675    
  38  0.802331     -0.220234     -0.671524E-01  0.671524E-01   8.17237       8.23952    
  39  0.949390     -0.519355E-01 -0.158359E-01  0.158359E-01   8.06856       8.08439    
  40  0.258511      -1.35282     -0.412493      0.412493       8.06063       8.47312    
  41  0.270423      -1.30777     -0.398757      0.398757       8.11238       8.51113    
  42  0.366439      -1.00392     -0.306111      0.306111       8.20747       8.51358    
  43  0.934403     -0.678476E-01 -0.206877E-01  0.206877E-01   8.32654       8.34723    
  44  0.956654     -0.443133E-01 -0.135118E-01  0.135118E-01   8.32632       8.33983    
  45  0.377790     -0.973417     -0.296809      0.296809       8.04995       8.34676    
  46  0.203667      -1.59127     -0.485201      0.485201       8.11494       8.60014    
  47  0.673892     -0.394685     -0.120345      0.120345       8.01090       8.13124    
  48  0.347380      -1.05734     -0.322397      0.322397       8.11426       8.43666    
  49  0.144339      -1.93559     -0.590190      0.590190       8.06810       8.65829    
  50  0.728571     -0.316670     -0.965571E-01  0.965571E-01   8.18610       8.28266    
  51  0.243065      -1.41443     -0.431279      0.431279       8.15194       8.58322    
  52  0.686711     -0.375841     -0.114599      0.114599       8.07678       8.19138    
  53  0.159440      -1.83609     -0.559850      0.559850       8.25932       8.81917    
  54  0.426258     -0.852711     -0.260004      0.260004       8.17975       8.43975    
  55  0.929286     -0.733386E-01 -0.223620E-01  0.223620E-01   8.59445       8.61681    
  56  0.335987E-01  -3.39327      -1.03466       1.03466       8.10859       9.14325    
  57  0.539383     -0.617330     -0.188233      0.188233       8.11412       8.30236    
  58  0.384768     -0.955116     -0.291229      0.291229       8.11693       8.40816    
  59  0.267956      -1.31693     -0.401551      0.401551       8.03969       8.44124    
  60  0.116616      -2.14887     -0.655222      0.655222       8.06768       8.72290    
  61  0.852032     -0.160131     -0.488263E-01  0.488263E-01   8.24674       8.29556    
  62  0.456598     -0.783952     -0.239038      0.239038       8.04862       8.28766    
  63  0.157616      -1.84759     -0.563357      0.563357       8.11627       8.67962    
  64  0.928361     -0.743348E-01 -0.226658E-01  0.226658E-01   8.15023       8.17290    
  65  0.200440      -1.60724     -0.490071      0.490071       8.11383       8.60390    
  66  0.106743      -2.23733     -0.682194      0.682194       8.55969       9.24189    
  67  0.786346     -0.240359     -0.732888E-01  0.732888E-01   8.06918       8.14247    
  68  0.481815     -0.730195     -0.222647      0.222647       8.03963       8.26227    
  69  0.410111     -0.891327     -0.271778      0.271778       7.99049       8.26226    
  70  0.768538     -0.263265     -0.802732E-01  0.802732E-01   8.17847       8.25874    
loop,thermsimp(1:2)       83  0.151151      0.403470    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    300          8.11          0.86          1.13         24.48          0.04          0.05         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    301          8.44          0.86          1.12         24.38          0.08          0.04         26.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  300    8.4437        1.054     -1.917      3.285     -102.6      1.468    
                      0.4301      1.412     -99.70      3.541     0.1794    

                       2.317     -1.010      1.530      6929.      3181.    

                     -0.1485      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6439.      303.3    

                       1.433     -5.784     -4.635     -8.563      6.763    

                      -15.11     -3.494      9878.      0.000     0.1078E+05



                       1570.     0.1414E+05 -2692.      6096.      3821.    

                       7342.     0.5005E-01 0.2149     0.3258E-01 0.1435    

                     -0.2486    -0.1144     0.2125    -0.3167     0.8962E-01



                     -0.4825    -0.7846      0.000     0.1154    -0.5347E-01

                      0.3258E-01 0.1321    -0.7116    -0.1446     0.2920E-01

                      0.3754E-01 0.1526    -0.6775     -1.235      6778.    



                      -1.142     -1.200     -2.204     -2.317    -0.3807    

                     -0.3252      9.224      8.687    -0.1817E+05 -4.000    

                     -0.5858     -2.012      9.296      8.896    -0.1908E+05



                      -4.000     0.5632    -0.3670      8.842      9.081    

                     -0.1908E+05 -7.000    -0.7033    -0.5930      9.021    

                       8.749    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       83
neval is:      300
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       83      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       84
neval is:      300


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      300     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.572627     -0.557521     -0.169996      0.169996       8.06512       8.23512    
   2  0.468879     -0.757411     -0.230946      0.230946       8.06856       8.29950    
   3  0.886741E-01  -2.42279     -0.738743      0.738743       8.04755       8.78629    
   4  0.211783      -1.55219     -0.473285      0.473285       8.09048       8.56376    
   5  0.573306     -0.556336     -0.169635      0.169635       8.08698       8.25661    
   6  0.401711     -0.912021     -0.278088      0.278088       8.10077       8.37886    
   7  0.505706     -0.681800     -0.207891      0.207891       8.09327       8.30116    
   8  0.603045     -0.505763     -0.154215      0.154215       8.09754       8.25175    
   9  0.696575     -0.361580     -0.110251      0.110251       8.09236       8.20261    
  10  0.294614      -1.22209     -0.372633      0.372633       8.01090       8.38353    
  11  0.527550     -0.639511     -0.194996      0.194996       8.06918       8.26418    
  12  0.657157     -0.419832     -0.128013      0.128013       8.05853       8.18654    
  13  0.627866     -0.465428     -0.141916      0.141916       8.09118       8.23310    
  14  0.993353E-02  -4.61184      -1.40622       1.40622       8.15023       9.55645    
  15  0.885166E-01  -2.42456     -0.739285      0.739285       8.10953       8.84881    
  16  0.265764      -1.32515     -0.404057      0.404057       8.12070       8.52475    
  17  0.446403     -0.806534     -0.245924      0.245924       8.03442       8.28034    
  18  0.287864      -1.24527     -0.379700      0.379700       8.07678       8.45648    
  19  0.926928E-01  -2.37846     -0.725228      0.725228       8.09541       8.82064    
  20  0.394849     -0.929252     -0.283342      0.283342       8.11654       8.39988    
  21  0.540746     -0.614805     -0.187463      0.187463       8.08733       8.27479    
  22  0.846435     -0.166721     -0.508358E-01  0.508358E-01   8.17237       8.22321    
  23  0.417037     -0.874580     -0.266672      0.266672       8.06114       8.32781    
  24  0.210713      -1.55726     -0.474830      0.474830       8.17847       8.65330    
  25  0.764669     -0.268312     -0.818121E-01  0.818121E-01   8.16632       8.24813    
  26  0.219471E-01  -3.81912      -1.16451       1.16451       7.99049       9.15499    
  27  0.200728      -1.60581     -0.489634      0.489634       8.03963       8.52926    
  28  0.572660     -0.557463     -0.169979      0.169979       8.06759       8.23757    
  29  0.599083E-01  -2.81494     -0.858316      0.858316       8.10547       8.96379    
  30  0.214614      -1.53891     -0.469237      0.469237       8.24941       8.71865    
  31  0.489389     -0.714598     -0.217891      0.217891       8.18610       8.40399    
  32  0.162616      -1.81636     -0.553836      0.553836       8.08186       8.63570    
  33  0.710022     -0.342459     -0.104421      0.104421       8.04862       8.15304    
  34  0.753583     -0.282916     -0.862652E-01  0.862652E-01   8.24674       8.33300    
  35  0.743317     -0.296633     -0.904476E-01  0.904476E-01   8.11412       8.20457    
  36  0.155416      -1.86165     -0.567644      0.567644       8.10246       8.67010    
  37  0.643355     -0.441059     -0.134485      0.134485       8.14409       8.27858    
  38  0.656098     -0.421444     -0.128504      0.128504       8.09568       8.22418    
  39  0.327550      -1.11611     -0.340319      0.340319       8.09862       8.43894    
  40  0.192244      -1.64899     -0.502801      0.502801       8.32632       8.82912    
  41  0.433590     -0.835657     -0.254804      0.254804       8.04995       8.30475    
  42  0.788561     -0.237545     -0.724310E-01  0.724310E-01   8.32654       8.39897    
  43  0.978028     -0.222173E-01 -0.677438E-02  0.677438E-02   8.13016       8.13694    
  44  0.110322      -2.20435     -0.672139      0.672139       8.05256       8.72470    
  45  0.795332     -0.228995     -0.698240E-01  0.698240E-01   8.07742       8.14724    
  46  0.497518E-01  -3.00071     -0.914959      0.914959       8.11693       9.03189    
  47  0.852459     -0.159631     -0.486737E-01  0.486737E-01   8.02849       8.07716    
  48  0.133240      -2.01560     -0.614586      0.614586       8.11426       8.72885    
  49  0.671163     -0.398743     -0.121583      0.121583       8.17975       8.30133    
  50  0.245122      -1.40600     -0.428709      0.428709       8.12085       8.54956    
  51  0.820498     -0.197843     -0.603252E-01  0.603252E-01   8.03969       8.10001    
  52  0.422422     -0.861751     -0.262760      0.262760       8.06063       8.32339    
  53  0.946612E-01  -2.35745     -0.718821      0.718821       8.08776       8.80658    
  54  0.902486     -0.102603     -0.312850E-01  0.312850E-01   8.11238       8.14366    
  55  0.858585     -0.152469     -0.464900E-01  0.464900E-01   8.20747       8.25396    
  56  0.713346     -0.337789     -0.102997      0.102997       8.07112       8.17412    
  57  0.497785     -0.697587     -0.212704      0.212704       8.15194       8.36465    
  58  0.971461     -0.289536E-01 -0.882838E-02  0.882838E-02   8.11494       8.12376    
  59  0.714587     -0.336051     -0.102467      0.102467       8.11383       8.21629    
  60  0.194565E-01  -3.93958      -1.20123       1.20123       8.59445       9.79568    
  61  0.675786E-01  -2.69446     -0.821581      0.821581       8.06810       8.88968    
  62  0.924162     -0.788681E-01 -0.240480E-01  0.240480E-01   8.06856       8.09261    
  63  0.988536     -0.115299E-01 -0.351562E-02  0.351562E-02   8.11627       8.11978    
  64  0.136917      -1.98838     -0.606285      0.606285       8.06768       8.67396    
  65  0.529964     -0.634945     -0.193604      0.193604       8.25932       8.45292    
  66  0.369278     -0.996204     -0.303757      0.303757       8.00020       8.30396    
  67  0.186364      -1.68006     -0.512273      0.512273       8.20225       8.71452    
  68  0.314345      -1.15726     -0.352867      0.352867       8.10859       8.46146    
  69  0.451257     -0.795718     -0.242626      0.242626       8.55969       8.80232    
  70  0.194510      -1.63727     -0.499228      0.499228       8.10765       8.60687    
loop,thermsimp(1:2)       84  0.169996      0.230946    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    302          8.19          0.86          1.14         24.61          0.05          0.05         26.70
Just calling func    0   0         26.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    303          8.95          0.87          1.14         24.53          0.09          0.05         26.67
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.19
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       84
neval is:      302
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       84      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       85
neval is:      302


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      302     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.197499      -1.62202     -0.494578      0.494578       8.02849       8.52307    
   2  0.793097     -0.231809     -0.706820E-01  0.706820E-01   8.06856       8.13924    
   3  0.261081      -1.34293     -0.409477      0.409477       8.03969       8.44917    
   4  0.912198     -0.918984E-01 -0.280211E-01  0.280211E-01   8.11627       8.14429    
   5  0.493539     -0.706153     -0.215316      0.215316       8.11494       8.33025    
   6  0.721001     -0.327115     -0.997419E-01  0.997419E-01   8.13016       8.22990    
   7  0.578790     -0.546816     -0.166732      0.166732       8.11238       8.27911    
   8  0.684127     -0.379612     -0.115749      0.115749       8.07742       8.19317    
   9  0.627712     -0.465674     -0.141991      0.141991       8.04862       8.19061    
  10  0.858540     -0.152522     -0.465062E-01  0.465062E-01   8.07112       8.11763    
  11  0.712254E-01  -2.64191     -0.805555      0.805555       8.05853       8.86408    
  12  0.927250     -0.755316E-01 -0.230307E-01  0.230307E-01   8.09236       8.11539    
  13  0.458073     -0.780727     -0.238055      0.238055       8.11412       8.35218    
  14  0.940004     -0.618714E-01 -0.188655E-01  0.188655E-01   8.11383       8.13269    
  15  0.322549      -1.13150     -0.345011      0.345011       8.17237       8.51738    
  16  0.939473     -0.624358E-01 -0.190376E-01  0.190376E-01   8.09568       8.11472    
  17  0.726080     -0.320095     -0.976016E-01  0.976016E-01   8.09118       8.18878    
  18  0.602088E-02  -5.11252      -1.55888       1.55888       8.06512       9.62401    
  19  0.735289     -0.307492     -0.937588E-01  0.937588E-01   8.06759       8.16135    
  20  0.847617     -0.165326     -0.504104E-01  0.504104E-01   8.16632       8.21673    
  21  0.747190E-01  -2.59402     -0.790954      0.790954       8.09754       8.88849    
  22  0.248374      -1.39282     -0.424690      0.424690       8.20747       8.63216    
  23  0.350184      -1.04930     -0.319945      0.319945       8.08698       8.40692    
  24  0.327739E-03  -8.02329      -2.44642       2.44642       8.06918       10.5156    
  25  0.130012      -2.04013     -0.622064      0.622064       8.08733       8.70939    
  26  0.609791     -0.494639     -0.150823      0.150823       8.14409       8.29491    
  27  0.793414     -0.231410     -0.705603E-01  0.705603E-01   8.03442       8.10498    
  28  0.962567     -0.381519E-01 -0.116331E-01  0.116331E-01   8.06856       8.08019    
  29  0.499469     -0.694211     -0.211675      0.211675       8.09327       8.30494    
  30  0.887491     -0.119357     -0.363937E-01  0.363937E-01   8.17975       8.21614    
  31  0.136374      -1.99236     -0.607498      0.607498       8.00020       8.60770    
  32  0.292356      -1.22978     -0.374979      0.374979       8.04995       8.42493    
  33  0.301564      -1.19877     -0.365524      0.365524       8.06063       8.42615    
  34  0.352543      -1.04258     -0.317898      0.317898       8.06114       8.37904    
  35  0.483726     -0.726236     -0.221440      0.221440       8.24674       8.46818    
  36  0.410499     -0.890381     -0.271490      0.271490       8.15194       8.42343    
  37  0.458111     -0.780644     -0.238030      0.238030       8.10077       8.33880    
  38  0.670071     -0.400372     -0.122079      0.122079       8.01090       8.13298    
  39  0.175486      -1.74020     -0.530611      0.530611       8.32654       8.85715    
  40  0.798907     -0.224511     -0.684566E-01  0.684566E-01   8.11654       8.18499    
  41  0.270487      -1.30753     -0.398686      0.398686       8.18610       8.58479    
  42  0.480368     -0.733202     -0.223564      0.223564       8.09862       8.32219    
  43  0.658406     -0.417933     -0.127434      0.127434       8.25932       8.38675    
  44  0.937976     -0.640304E-01 -0.195238E-01  0.195238E-01   8.07678       8.09631    
  45  0.710083     -0.342373     -0.104394      0.104394       8.10859       8.21299    
  46  0.567340     -0.566797     -0.172825      0.172825       8.12070       8.29352    
  47  0.201426      -1.60233     -0.488574      0.488574       8.03963       8.52820    
  48  0.660313     -0.415042     -0.126552      0.126552       8.12085       8.24740    
  49  0.524008     -0.646249     -0.197051      0.197051       8.09048       8.28753    
  50  0.513616     -0.666280     -0.203158      0.203158       8.10765       8.31080    
  51  0.951218     -0.500122E-01 -0.152495E-01  0.152495E-01   8.08186       8.09711    
  52  0.703465     -0.351737     -0.107250      0.107250       8.17847       8.28572    
  53  0.702859     -0.352600     -0.107513      0.107513       8.10246       8.20997    
  54  0.453067     -0.791715     -0.241405      0.241405       8.06768       8.30908    
  55  0.202116      -1.59891     -0.487532      0.487532       8.20225       8.68978    
  56  0.491988     -0.709301     -0.216276      0.216276       8.24941       8.46569    
  57  0.632131     -0.458659     -0.139852      0.139852       8.05256       8.19241    
  58  0.911086     -0.931178E-01 -0.283929E-01  0.283929E-01   8.11426       8.14266    
  59  0.888750     -0.117939     -0.359614E-01  0.359614E-01   8.04755       8.08351    
  60  0.468235     -0.758785     -0.231365      0.231365       8.55969       8.79106    
  61  0.971366     -0.290520E-01 -0.885838E-02  0.885838E-02   8.08776       8.09661    
  62  0.622947     -0.473294     -0.144314      0.144314       8.09541       8.23973    
  63  0.837000     -0.177932     -0.542539E-01  0.542539E-01   8.32632       8.38057    
  64  0.495636     -0.701913     -0.214023      0.214023       8.10953       8.32355    
  65  0.251386      -1.38077     -0.421016      0.421016       8.06810       8.48912    
  66  0.580065E-01  -2.84720     -0.868152      0.868152       8.10547       8.97363    
  67  0.601569     -0.508214     -0.154962      0.154962       8.11693       8.27190    
  68  0.249260      -1.38926     -0.423605      0.423605       7.99049       8.41409    
  69  0.309647E-01  -3.47491      -1.05955       1.05955       8.15023       9.20978    
  70  0.653539     -0.425353     -0.129696      0.129696       8.18731       8.31700    
loop,thermsimp(1:2)       85  0.494578      0.706820E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    304          8.16          0.86          1.12         24.36          0.06          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    305          8.51          0.86          1.13         24.39          0.08          0.05         26.51
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.16
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       85
neval is:      304
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       85      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       86
neval is:      304


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      304     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.464881     -0.765974     -0.233556      0.233556       8.06856       8.30211    
   2  0.948887     -0.524654E-01 -0.159975E-01  0.159975E-01   8.04755       8.06355    
   3  0.532332     -0.630488     -0.192245      0.192245       8.07678       8.26903    
   4  0.374267     -0.982785     -0.299665      0.299665       8.08776       8.38742    
   5  0.694531     -0.364519     -0.111147      0.111147       8.08186       8.19301    
   6  0.414371     -0.880994     -0.268628      0.268628       8.03442       8.30305    
   7  0.208827E-01  -3.86883      -1.17966       1.17966       8.09568       9.27534    
   8  0.627187     -0.466511     -0.142246      0.142246       8.09236       8.23460    
   9  0.148799E-01  -4.20774      -1.28300       1.28300       8.07112       9.35412    
  10  0.809008     -0.211946     -0.646254E-01  0.646254E-01   8.11383       8.17845    
  11  0.647680     -0.434359     -0.132442      0.132442       8.01090       8.14334    
  12  0.289351      -1.24012     -0.378129      0.378129       8.06856       8.44669    
  13  0.222457      -1.50302     -0.458293      0.458293       8.11426       8.57256    
  14  0.374268     -0.982782     -0.299664      0.299664       8.11627       8.41593    
  15  0.785765     -0.241097     -0.735140E-01  0.735140E-01   8.06759       8.14111    
  16  0.298051      -1.21049     -0.369096      0.369096       8.11654       8.48563    
  17  0.725075     -0.321480     -0.980240E-01  0.980240E-01   8.09118       8.18921    
  18  0.386364     -0.950976     -0.289966      0.289966       8.04862       8.33858    
  19  0.631686     -0.459363     -0.140066      0.140066       8.05256       8.19262    
  20  0.688282     -0.373557     -0.113903      0.113903       8.07742       8.19132    
  21  0.373817     -0.983990     -0.300033      0.300033       8.10246       8.40249    
  22  0.219845      -1.51483     -0.461895      0.461895       8.10859       8.57049    
  23  0.926271     -0.765889E-01 -0.233530E-01  0.233530E-01   8.17975       8.20310    
  24  0.618127     -0.481061     -0.146682      0.146682       8.16632       8.31300    
  25  0.176216      -1.73604     -0.529345      0.529345       8.13016       8.65951    
  26  0.742943     -0.297136     -0.906011E-01  0.906011E-01   8.09541       8.18601    
  27  0.357690      -1.02809     -0.313479      0.313479       8.12085       8.43433    
  28  0.478359     -0.737394     -0.224842      0.224842       8.11693       8.34178    
  29  0.395976     -0.926401     -0.282473      0.282473       8.11238       8.39485    
  30  0.803186     -0.219169     -0.668278E-01  0.668278E-01   8.17847       8.24530    
  31  0.231845      -1.46168     -0.445688      0.445688       8.09048       8.53616    
  32  0.808968     -0.211996     -0.646407E-01  0.646407E-01   8.12070       8.18534    
  33  0.579217     -0.546078     -0.166507      0.166507       8.14409       8.31060    
  34  0.384357     -0.956183     -0.291554      0.291554       8.09327       8.38482    
  35  0.856367     -0.155057     -0.472790E-01  0.472790E-01   8.06768       8.11495    
  36  0.265661      -1.32553     -0.404174      0.404174       8.10765       8.51182    
  37  0.288915      -1.24162     -0.378589      0.378589       8.18731       8.56590    
  38  0.224915      -1.49203     -0.454943      0.454943       8.09862       8.55357    
  39  0.685944     -0.376959     -0.114940      0.114940       8.10953       8.22447    
  40  0.265936      -1.32450     -0.403858      0.403858       8.11494       8.51879    
  41  0.412966     -0.884389     -0.269663      0.269663       8.10077       8.37043    
  42  0.440796     -0.819173     -0.249778      0.249778       8.11412       8.36390    
  43  0.572522     -0.557705     -0.170052      0.170052       8.06114       8.23119    
  44  0.798412     -0.225131     -0.686457E-01  0.686457E-01   8.32632       8.39496    
  45  0.127097      -2.06281     -0.628979      0.628979       8.25932       8.88830    
  46  0.243397      -1.41306     -0.430863      0.430863       8.08698       8.51784    
  47  0.322195      -1.13260     -0.345345      0.345345       7.99049       8.33583    
  48  0.512728     -0.668011     -0.203686      0.203686       8.15194       8.35563    
  49  0.786191     -0.240556     -0.733489E-01  0.733489E-01   8.04995       8.12330    
  50  0.733079     -0.310501     -0.946763E-01  0.946763E-01   8.06063       8.15531    
  51  0.601364     -0.508554     -0.155065      0.155065       8.03969       8.19475    
  52  0.348529      -1.05403     -0.321390      0.321390       8.24941       8.57080    
  53  0.923986     -0.790584E-01 -0.241060E-01  0.241060E-01   8.24674       8.27084    
  54  0.843742     -0.169908     -0.518075E-01  0.518075E-01   8.06810       8.11991    
  55  0.723581     -0.323543     -0.986528E-01  0.986528E-01   8.17237       8.27103    
  56  0.378158     -0.972444     -0.296512      0.296512       8.02849       8.32500    
  57  0.463644     -0.768638     -0.234369      0.234369       8.03963       8.27400    
  58  0.427569     -0.849641     -0.259068      0.259068       8.18610       8.44517    
  59  0.235852      -1.44455     -0.440464      0.440464       8.00020       8.44066    
  60  0.203797      -1.59063     -0.485006      0.485006       8.20747       8.69247    
  61  0.146982E-02  -6.52261      -1.98884       1.98884       8.20225       10.1911    
  62  0.681525     -0.383422     -0.116911      0.116911       8.08733       8.20424    
  63  0.931276     -0.711992E-01 -0.217097E-01  0.217097E-01   8.55969       8.58140    
  64  0.581849     -0.541545     -0.165125      0.165125       8.32654       8.49166    
  65  0.652684     -0.426663     -0.130096      0.130096       8.05853       8.18862    
  66  0.388365     -0.945809     -0.288391      0.288391       8.09754       8.38593    
  67  0.216086      -1.53208     -0.467152      0.467152       8.10547       8.57263    
  68  0.409967     -0.891679     -0.271886      0.271886       8.15023       8.42212    
  69  0.440345     -0.820196     -0.250090      0.250090       8.06512       8.31521    
  70  0.507524E-01  -2.98080     -0.908887      0.908887       8.15873       9.06762    
loop,thermsimp(1:2)       86  0.233556      0.159975E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    306          7.99          0.86          1.12         24.32          0.09          0.06         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    307          8.13          0.84          1.12         24.34          0.07          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.99
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       86
neval is:      306
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       86      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       87
neval is:      306


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      306     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.182970      -1.69843     -0.517876      0.517876       8.04755       8.56543    
   2  0.721345     -0.326637     -0.995965E-01  0.995965E-01   8.06768       8.16727    
   3  0.842493     -0.171390     -0.522591E-01  0.522591E-01   8.06810       8.12036    
   4  0.260540      -1.34500     -0.410109      0.410109       8.04995       8.46006    
   5  0.782605     -0.245127     -0.747428E-01  0.747428E-01   8.06759       8.14234    
   6  0.208492      -1.56785     -0.478061      0.478061       8.01090       8.48896    
   7  0.290568E-01  -3.53850      -1.07894       1.07894       8.06063       9.13957    
   8  0.673682     -0.394997     -0.120440      0.120440       8.11383       8.23427    
   9  0.399393     -0.917808     -0.279853      0.279853       8.12070       8.40055    
  10  0.966971     -0.335863E-01 -0.102410E-01  0.102410E-01   8.09541       8.10565    
  11  0.390645     -0.939956     -0.286606      0.286606       8.05853       8.34514    
  12  0.259548      -1.34881     -0.411273      0.411273       8.09118       8.50246    
  13  0.260765      -1.34413     -0.409846      0.409846       8.07742       8.48726    
  14  0.110601E-01  -4.50441      -1.37346       1.37346       8.05256       9.42602    
  15  0.727710     -0.317852     -0.969177E-01  0.969177E-01   8.08186       8.17878    
  16  0.717076     -0.332574     -0.101407      0.101407       8.03969       8.14109    
  17  0.612129     -0.490811     -0.149655      0.149655       8.17975       8.32940    
  18  0.589376     -0.528691     -0.161205      0.161205       8.08733       8.24853    
  19  0.541615     -0.613199     -0.186973      0.186973       8.10953       8.29650    
  20  0.330403      -1.10744     -0.337675      0.337675       8.06114       8.39882    
  21  0.229530      -1.47172     -0.448749      0.448749       8.09236       8.54110    
  22  0.564010     -0.572684     -0.174620      0.174620       8.17847       8.35309    
  23  0.454226     -0.789161     -0.240626      0.240626       8.07678       8.31741    
  24  0.579528     -0.545541     -0.166343      0.166343       8.24674       8.41308    
  25  0.245500      -1.40446     -0.428240      0.428240       8.17237       8.60061    
  26  0.708019     -0.345284     -0.105282      0.105282       8.03963       8.14491    
  27  0.300215      -1.20326     -0.366891      0.366891       8.06856       8.43545    
  28  0.721461     -0.326478     -0.995477E-01  0.995477E-01   8.03442       8.13397    
  29  0.326772      -1.11849     -0.341045      0.341045       8.14409       8.48514    
  30  0.580879     -0.543212     -0.165633      0.165633       8.16632       8.33195    
  31  0.963075     -0.376241E-01 -0.114721E-01  0.114721E-01   8.06512       8.07660    
  32  0.656935     -0.420170     -0.128116      0.128116       8.02849       8.15660    
  33  0.908335     -0.961416E-01 -0.293149E-01  0.293149E-01   7.99049       8.01980    
  34  0.765938     -0.266654     -0.813068E-01  0.813068E-01   8.04862       8.12992    
  35  0.497301     -0.698561     -0.213001      0.213001       8.11693       8.32994    
  36  0.833603     -0.181997     -0.554936E-01  0.554936E-01   8.15194       8.20743    
  37  0.433057     -0.836886     -0.255178      0.255178       8.11412       8.36930    
  38  0.349547      -1.05112     -0.320500      0.320500       8.10077       8.42127    
  39  0.142838      -1.94604     -0.593377      0.593377       8.09327       8.68664    
  40  0.326780      -1.11847     -0.341037      0.341037       8.09754       8.43857    
  41  0.707709     -0.345723     -0.105416      0.105416       8.08776       8.19317    
  42  0.914339     -0.895538E-01 -0.273062E-01  0.273062E-01   8.11238       8.13968    
  43  0.392800     -0.934454     -0.284928      0.284928       8.32632       8.61125    
  44  0.434772     -0.832933     -0.253973      0.253973       8.10246       8.35643    
  45  0.229545      -1.47165     -0.448729      0.448729       8.11627       8.56500    
  46  0.661281     -0.413577     -0.126106      0.126106       8.15023       8.27634    
  47  0.459966     -0.776602     -0.236797      0.236797       8.12085       8.35764    
  48  0.352439      -1.04288     -0.317988      0.317988       8.00020       8.31819    
  49  0.490345     -0.712647     -0.217296      0.217296       8.18610       8.40340    
  50  0.837788     -0.176990     -0.539668E-01  0.539668E-01   8.06856       8.12253    
  51  0.247493      -1.39637     -0.425775      0.425775       8.11654       8.54231    
  52  0.221382      -1.50787     -0.459770      0.459770       8.32654       8.78631    
  53  0.374412     -0.982399     -0.299548      0.299548       8.10765       8.40719    
  54  0.170580      -1.76855     -0.539256      0.539256       8.08698       8.62623    
  55  0.464054     -0.767755     -0.234099      0.234099       8.11494       8.34903    
  56  0.936961     -0.651140E-01 -0.198542E-01  0.198542E-01   8.09048       8.11033    
  57  0.302357      -1.19615     -0.364722      0.364722       8.09862       8.46335    
  58  0.572748E-01  -2.85990     -0.872023      0.872023       8.18731       9.05933    
  59  0.495156     -0.702883     -0.214319      0.214319       8.10859       8.32291    
  60  0.101162      -2.29104     -0.698570      0.698570       8.24941       8.94798    
  61  0.786435E-02  -4.84542      -1.47744       1.47744       8.11426       9.59170    
  62  0.960492     -0.403100E-01 -0.122911E-01  0.122911E-01   8.10547       8.11776    
  63  0.902616     -0.102458     -0.312410E-01  0.312410E-01   8.55969       8.59093    
  64  0.646986     -0.435430     -0.132769      0.132769       8.13016       8.26293    
  65  0.218936      -1.51897     -0.463157      0.463157       8.20747       8.67062    
  66  0.491829     -0.709625     -0.216375      0.216375       8.25932       8.47569    
  67  0.873324     -0.135448     -0.413002E-01  0.413002E-01   8.15873       8.20003    
  68  0.419066     -0.869727     -0.265192      0.265192       8.09568       8.36087    
  69  0.390022     -0.941553     -0.287093      0.287093       8.07112       8.35821    
  70  0.843189     -0.170564     -0.520073E-01  0.520073E-01   7.98780       8.03981    
loop,thermsimp(1:2)       87  0.517876      0.995965E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    308          8.08          0.86          1.13         24.39          0.07          0.05         26.50
Just calling func    0   0         26.50


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    309          8.33          0.87          1.13         24.30          0.08          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       87
neval is:      308
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       87      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       88
neval is:      308


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      308     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.220180      -1.51331     -0.461430      0.461430       7.99049       8.45192    
   2  0.246752E-01  -3.70196      -1.12878       1.12878       7.98780       9.11658    
   3  0.679039     -0.387076     -0.118025      0.118025       8.06512       8.18315    
   4  0.709027     -0.343862     -0.104848      0.104848       8.09541       8.20026    
   5  0.577754     -0.548608     -0.167278      0.167278       8.09048       8.25775    
   6  0.738694     -0.302871     -0.923499E-01  0.923499E-01   8.10547       8.19782    
   7  0.181723      -1.70527     -0.519962      0.519962       8.06810       8.58806    
   8  0.103748      -2.26579     -0.690872      0.690872       8.06856       8.75943    
   9  0.456811E-02  -5.38866      -1.64308       1.64308       8.04862       9.69170    
  10  0.303247      -1.19321     -0.363826      0.363826       8.03442       8.39824    
  11  0.284736      -1.25619     -0.383031      0.383031       8.11238       8.49541    
  12  0.900494     -0.104812     -0.319587E-01  0.319587E-01   8.03969       8.07165    
  13  0.691792     -0.368470     -0.112352      0.112352       8.06759       8.17995    
  14  0.502714     -0.687735     -0.209700      0.209700       8.03963       8.24933    
  15  0.305219      -1.18673     -0.361850      0.361850       8.02849       8.39034    
  16  0.412005     -0.886720     -0.270374      0.270374       8.06768       8.33805    
  17  0.412225     -0.886186     -0.270211      0.270211       8.08186       8.35207    
  18  0.121697      -2.10622     -0.642218      0.642218       8.08776       8.72997    
  19  0.465374     -0.764915     -0.233233      0.233233       8.15873       8.39197    
  20  0.273016      -1.29823     -0.395848      0.395848       8.15194       8.54779    
  21  0.502763     -0.687636     -0.209670      0.209670       8.11383       8.32350    
  22  0.516442     -0.660793     -0.201485      0.201485       8.08733       8.28881    
  23  0.554333     -0.589990     -0.179896      0.179896       8.13016       8.31006    
  24  0.192397E-01  -3.95078      -1.20465       1.20465       8.15023       9.35488    
  25  0.451279E-01  -3.09825     -0.944702      0.944702       8.10953       9.05423    
  26  0.457340     -0.782327     -0.238543      0.238543       8.07678       8.31533    
  27  0.325184      -1.12336     -0.342530      0.342530       8.00020       8.34273    
  28  0.700952     -0.355315     -0.108341      0.108341       8.10859       8.21693    
  29  0.961087     -0.396906E-01 -0.121022E-01  0.121022E-01   8.17975       8.19185    
  30  0.195966E-02  -6.23498      -1.90114       1.90114       8.11693       10.0181    
  31  0.766376     -0.266082     -0.811324E-01  0.811324E-01   8.16632       8.24745    
  32  0.398846     -0.919180     -0.280271      0.280271       8.05853       8.33880    
  33  0.675249     -0.392674     -0.119732      0.119732       8.11494       8.23467    
  34  0.189468      -1.66354     -0.507237      0.507237       8.17847       8.68570    
  35  0.444608     -0.810562     -0.247152      0.247152       8.10246       8.34961    
  36  0.514006     -0.665520     -0.202927      0.202927       8.12085       8.32377    
  37  0.575199     -0.553039     -0.168629      0.168629       8.07112       8.23975    
  38  0.121449      -2.10826     -0.642840      0.642840       8.09568       8.73852    
  39  0.209130      -1.56480     -0.477130      0.477130       8.11412       8.59125    
  40  0.466284E-01  -3.06555     -0.934729      0.934729       8.06114       8.99587    
  41  0.386630E-01  -3.25287     -0.991847      0.991847       8.12070       9.11254    
  42  0.335751E-01  -3.39397      -1.03487       1.03487       8.18610       9.22097    
  43  0.878126     -0.129965     -0.396283E-01  0.396283E-01   8.10765       8.14727    
  44  0.652938     -0.426273     -0.129977      0.129977       8.24674       8.37671    
  45  0.932456E-01  -2.37252     -0.723415      0.723415       8.10077       8.82419    
  46  0.662683     -0.411458     -0.125460      0.125460       8.06856       8.19402    
  47  0.204704      -1.58619     -0.483653      0.483653       8.09754       8.58119    
  48  0.985446     -0.146609E-01 -0.447032E-02  0.447032E-02   8.04995       8.05442    
  49  0.105847      -2.24576     -0.684764      0.684764       8.09862       8.78339    
  50  0.843201     -0.170550     -0.520031E-01  0.520031E-01   8.25932       8.31132    
  51  0.364087      -1.01036     -0.308074      0.308074       8.14409       8.45217    
  52  0.650651E-01  -2.73237     -0.833138      0.833138       8.07742       8.91056    
  53  0.968103     -0.324171E-01 -0.988443E-02  0.988443E-02   8.01090       8.02078    
  54  0.131933      -2.02546     -0.617592      0.617592       8.09118       8.70877    
  55  0.906847     -0.977815E-01 -0.298150E-01  0.298150E-01   8.09236       8.12217    
  56  0.443328E-01  -3.11603     -0.950122      0.950122       8.11654       9.06666    
  57  0.507045     -0.679156     -0.207085      0.207085       8.11627       8.32335    
  58  0.287709      -1.24581     -0.379864      0.379864       8.04755       8.42741    
  59  0.900299     -0.105028     -0.320246E-01  0.320246E-01   8.55969       8.59172    
  60  0.689829E-01  -2.67390     -0.815309      0.815309       8.17237       8.98768    
  61  0.876407     -0.131925     -0.402258E-01  0.402258E-01   8.32632       8.36654    
  62  0.718081     -0.331173     -0.100979      0.100979       8.08698       8.18796    
  63  0.177063      -1.73125     -0.527884      0.527884       8.20747       8.73535    
  64  0.749425E-01  -2.59103     -0.790044      0.790044       8.09327       8.88331    
  65  0.136072      -1.99457     -0.608173      0.608173       8.32654       8.93471    
  66  0.662610     -0.411569     -0.125493      0.125493       8.24941       8.37491    
  67  0.612646     -0.489969     -0.149398      0.149398       8.18731       8.33671    
  68  0.258380      -1.35332     -0.412648      0.412648       8.06063       8.47328    
  69  0.406590     -0.899949     -0.274407      0.274407       8.05256       8.32697    
  70  0.889463     -0.117137     -0.357169E-01  0.357169E-01   8.07636       8.11207    
loop,thermsimp(1:2)       88  0.461430       1.12878    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    310          8.07          0.86          1.12         24.34          0.07          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    311          8.32          0.86          1.12         24.32          0.08          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       88
neval is:      310
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       88      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       89
neval is:      310


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      310     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.876761     -0.131521     -0.401028E-01  0.401028E-01   8.01090       8.05100    
   2  0.765270     -0.267527     -0.815728E-01  0.815728E-01   8.04995       8.13152    
   3  0.215687      -1.53393     -0.467717      0.467717       8.03969       8.50740    
   4  0.999601E-01  -2.30298     -0.702213      0.702213       8.07636       8.77857    
   5  0.706519     -0.347405     -0.105929      0.105929       8.09236       8.19828    
   6  0.201358      -1.60267     -0.488678      0.488678       8.10765       8.59632    
   7  0.450677     -0.797005     -0.243018      0.243018       8.06759       8.31061    
   8  0.897557     -0.108078     -0.329547E-01  0.329547E-01   8.06512       8.09808    
   9  0.161166      -1.82532     -0.556566      0.556566       8.08698       8.64354    
  10  0.972556E-01  -2.33041     -0.710576      0.710576       8.17975       8.89032    
  11  0.742112     -0.298255     -0.909421E-01  0.909421E-01   8.06856       8.15950    
  12  0.172377      -1.75807     -0.536061      0.536061       8.10547       8.64153    
  13  0.658751     -0.417410     -0.127274      0.127274       8.09541       8.22269    
  14  0.725340     -0.321114     -0.979123E-01  0.979123E-01   8.10859       8.20650    
  15  0.501488     -0.690175     -0.210444      0.210444       8.11494       8.32538    
  16  0.845372     -0.167978     -0.512190E-01  0.512190E-01   8.07112       8.12234    
  17  0.132369      -2.02216     -0.616586      0.616586       8.16632       8.78290    
  18  0.734515E-01  -2.61113     -0.796171      0.796171       8.03963       8.83580    
  19  0.391205     -0.938523     -0.286169      0.286169       8.09048       8.37665    
  20  0.376983     -0.975555     -0.297461      0.297461       8.08733       8.38479    
  21  0.315463      -1.15371     -0.351784      0.351784       8.13016       8.48195    
  22  0.267113      -1.32008     -0.402512      0.402512       8.25932       8.66183    
  23  0.965292     -0.353243E-01 -0.107709E-01  0.107709E-01   8.07678       8.08755    
  24  0.954592     -0.464714E-01 -0.141698E-01  0.141698E-01   8.11627       8.13044    
  25  0.992414     -0.761515E-02 -0.232197E-02  0.232197E-02   8.11383       8.11615    
  26  0.867953E-02  -4.74679      -1.44736       1.44736       8.12085       9.56821    
  27  0.829585     -0.186829     -0.569669E-01  0.569669E-01   8.05256       8.10953    
  28  0.349695      -1.05069     -0.320372      0.320372       8.18731       8.50768    
  29  0.673511     -0.395251     -0.120518      0.120518       8.06768       8.18819    
  30  0.340696      -1.07676     -0.328321      0.328321       8.05853       8.38685    
  31  0.558731     -0.582087     -0.177487      0.177487       8.00020       8.17769    
  32  0.747295     -0.291295     -0.888200E-01  0.888200E-01   8.10246       8.19128    
  33  0.123287      -2.09324     -0.638260      0.638260       8.08186       8.72012    
  34  0.355051      -1.03549     -0.315737      0.315737       8.32632       8.64205    
  35  0.511895     -0.669636     -0.204181      0.204181       8.24941       8.45359    
  36  0.571856E-01  -2.86145     -0.872498      0.872498       8.24674       9.11923    
  37  0.507517     -0.678226     -0.206801      0.206801       8.02849       8.23529    
  38  0.326770      -1.11850     -0.341046      0.341046       8.15873       8.49978    
  39  0.736001     -0.306523     -0.934633E-01  0.934633E-01   8.03442       8.12788    
  40  0.970046     -0.304120E-01 -0.927305E-02  0.927305E-02   8.04755       8.05682    
  41  0.673510     -0.395253     -0.120518      0.120518       7.99049       8.11100    
  42  0.335032      -1.09353     -0.333433      0.333433       8.14409       8.47753    
  43  0.872321E-01  -2.43918     -0.743742      0.743742       8.06063       8.80437    
  44  0.749956     -0.287741     -0.877363E-01  0.877363E-01   8.11238       8.20011    
  45  0.159001      -1.83884     -0.560690      0.560690       8.15194       8.71263    
  46  0.529687     -0.635468     -0.193763      0.193763       8.09754       8.29130    
  47  0.142415      -1.94901     -0.594281      0.594281       8.06810       8.66238    
  48  0.803387     -0.218919     -0.667514E-01  0.667514E-01   8.11412       8.18087    
  49  0.709133     -0.343713     -0.104803      0.104803       8.55969       8.66449    
  50  0.261172      -1.34258     -0.409371      0.409371       8.17847       8.58784    
  51  0.106599      -2.23868     -0.682607      0.682607       8.09118       8.77379    
  52  0.955666     -0.453468E-01 -0.138269E-01  0.138269E-01   8.08776       8.10158    
  53  0.376236     -0.977539     -0.298066      0.298066       8.20747       8.50553    
  54  0.890774     -0.115665     -0.352679E-01  0.352679E-01   8.09568       8.13095    
  55  0.554077     -0.590452     -0.180037      0.180037       8.06856       8.24860    
  56  0.892825E-01  -2.41595     -0.736658      0.736658       8.09862       8.83528    
  57  0.941033     -0.607774E-01 -0.185319E-01  0.185319E-01   8.10077       8.11930    
  58  0.209380E-01  -3.86619      -1.17886       1.17886       8.09327       9.27212    
  59  0.427794     -0.849113     -0.258907      0.258907       8.07742       8.33632    
  60  0.194887      -1.63533     -0.498637      0.498637       8.32654       8.82518    
  61  0.840289     -0.174009     -0.530579E-01  0.530579E-01   8.17237       8.22543    
  62  0.634527     -0.454875     -0.138698      0.138698       8.06114       8.19984    
  63  0.159135      -1.83800     -0.560432      0.560432       8.10953       8.66996    
  64  0.182987      -1.69834     -0.517848      0.517848       8.11654       8.63439    
  65  0.520726     -0.652532     -0.198966      0.198966       8.12070       8.31966    
  66  0.249623      -1.38781     -0.423162      0.423162       7.98780       8.41096    
  67  0.801631     -0.221107     -0.674187E-01  0.674187E-01   8.18610       8.25352    
  68  0.329011      -1.11166     -0.338962      0.338962       8.15023       8.48920    
  69  0.995152     -0.485930E-02 -0.148167E-02  0.148167E-02   8.04862       8.05010    
  70  0.187107      -1.67607     -0.511059      0.511059       8.06657       8.57763    
loop,thermsimp(1:2)       89  0.401028E-01  0.815728E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    312          8.07          0.86          1.13         24.62          0.06          0.05         26.73
Just calling func    0   0         26.73


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    313          8.27          0.87          1.13         24.49          0.08          0.05         26.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       89
neval is:      312
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       89      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       90
neval is:      312


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      312     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157371      -1.84915     -0.563831      0.563831       8.04862       8.61245    
   2  0.894146     -0.111886     -0.341156E-01  0.341156E-01   8.01090       8.04501    
   3  0.721270     -0.326741     -0.996281E-01  0.996281E-01   8.04755       8.14718    
   4  0.536866     -0.622006     -0.189659      0.189659       8.07678       8.26644    
   5  0.418107     -0.872017     -0.265890      0.265890       8.06512       8.33102    
   6  0.391189     -0.938564     -0.286182      0.286182       8.08776       8.37394    
   7  0.799669     -0.223558     -0.681659E-01  0.681659E-01   8.05256       8.12072    
   8  0.595070     -0.519076     -0.158274      0.158274       7.99049       8.14876    
   9  0.384356E-03  -7.86394      -2.39783       2.39783       8.11383       10.5117    
  10  0.654302     -0.424187     -0.129341      0.129341       8.10077       8.23011    
  11  0.873355     -0.135413     -0.412894E-01  0.412894E-01   8.07112       8.11241    
  12  0.303212      -1.19332     -0.363861      0.363861       8.03442       8.39828    
  13  0.434159     -0.834344     -0.254403      0.254403       8.11627       8.37067    
  14  0.970825     -0.296089E-01 -0.902819E-02  0.902819E-02   8.09568       8.10471    
  15  0.405896     -0.901659     -0.274929      0.274929       8.04995       8.32488    
  16  0.250423      -1.38461     -0.422186      0.422186       8.06856       8.49074    
  17  0.517030     -0.659654     -0.201138      0.201138       8.00020       8.20134    
  18  0.165468      -1.79897     -0.548533      0.548533       8.11412       8.66266    
  19  0.679403     -0.386541     -0.117862      0.117862       8.06768       8.18554    
  20  0.554013     -0.590567     -0.180072      0.180072       8.10246       8.28253    
  21  0.211764E-01  -3.85487      -1.17541       1.17541       8.09236       9.26776    
  22  0.453828     -0.790038     -0.240894      0.240894       8.06114       8.30203    
  23  0.377409     -0.974426     -0.297116      0.297116       8.11238       8.40949    
  24  0.496879     -0.699408     -0.213260      0.213260       8.10859       8.32185    
  25  0.214619      -1.53889     -0.469229      0.469229       8.09541       8.56464    
  26  0.724154     -0.322751     -0.984115E-01  0.984115E-01   8.17237       8.27078    
  27  0.385609     -0.952932     -0.290563      0.290563       8.02849       8.31905    
  28  0.777864     -0.251204     -0.765956E-01  0.765956E-01   8.06856       8.14515    
  29  0.709283     -0.343500     -0.104738      0.104738       8.18610       8.29084    
  30  0.191760      -1.65151     -0.503569      0.503569       8.09754       8.60110    
  31  0.347616      -1.05666     -0.322190      0.322190       8.06759       8.38978    
  32  0.191581      -1.65244     -0.503854      0.503854       8.12070       8.62455    
  33  0.770989     -0.260081     -0.793026E-01  0.793026E-01   8.11494       8.19424    
  34  0.788566E-01  -2.54012     -0.774520      0.774520       8.07742       8.85194    
  35  0.229474      -1.47197     -0.448824      0.448824       8.09048       8.53930    
  36  0.339326      -1.08079     -0.329550      0.329550       8.08733       8.41688    
  37  0.220886      -1.51011     -0.460453      0.460453       8.05853       8.51898    
  38  0.223644      -1.49770     -0.456670      0.456670       7.98780       8.44447    
  39  0.138287      -1.97842     -0.603250      0.603250       8.24941       8.85266    
  40  0.796402     -0.227651     -0.694141E-01  0.694141E-01   8.14409       8.21351    
  41  0.104384      -2.25968     -0.689009      0.689009       8.13016       8.81917    
  42  0.919642     -0.837713E-01 -0.255431E-01  0.255431E-01   8.15023       8.17578    
  43  0.360767      -1.01952     -0.310867      0.310867       8.15873       8.46960    
  44  0.924300     -0.787181E-01 -0.240023E-01  0.240023E-01   8.20747       8.23147    
  45  0.561139     -0.577786     -0.176175      0.176175       8.03969       8.21586    
  46  0.509073E-01  -2.97775     -0.907958      0.907958       8.18731       9.09526    
  47  0.715469     -0.334817     -0.102091      0.102091       8.06657       8.16866    
  48  0.294040E-01  -3.52662      -1.07532       1.07532       8.17847       9.25379    
  49  0.264026E-02  -5.93688      -1.81024       1.81024       8.10765       9.91789    
  50  0.634029     -0.455661     -0.138937      0.138937       8.11654       8.25548    
  51  0.319148      -1.14210     -0.348243      0.348243       8.10547       8.45372    
  52  0.495674     -0.701836     -0.214000      0.214000       8.32632       8.54032    
  53  0.838343     -0.176328     -0.537651E-01  0.537651E-01   8.08698       8.14074    
  54  0.240556      -1.42480     -0.434443      0.434443       8.25932       8.69376    
  55  0.919800     -0.835990E-01 -0.254905E-01  0.254905E-01   8.06810       8.09359    
  56  0.652899     -0.426332     -0.129995      0.129995       8.55969       8.68969    
  57  0.777375     -0.251832     -0.767873E-01  0.767873E-01   8.10953       8.18631    
  58  0.988137     -0.119340E-01 -0.363884E-02  0.363884E-02   8.15194       8.15558    
  59  0.771111     -0.259922     -0.792541E-01  0.792541E-01   8.08186       8.16112    
  60  0.980963     -0.192203E-01 -0.586054E-02  0.586054E-02   8.09118       8.09704    
  61  0.358823      -1.02493     -0.312514      0.312514       8.07636       8.38887    
  62  0.398479     -0.920100     -0.280552      0.280552       8.16632       8.44687    
  63  0.524779     -0.644778     -0.196602      0.196602       8.06063       8.25723    
  64  0.391693E-01  -3.23986     -0.987880      0.987880       8.32654       9.31442    
  65  0.494448     -0.704313     -0.214755      0.214755       8.09862       8.31338    
  66  0.224697      -1.49300     -0.455238      0.455238       8.03963       8.49487    
  67  0.585684     -0.534974     -0.163121      0.163121       8.17975       8.34287    
  68  0.558887     -0.581807     -0.177401      0.177401       8.24674       8.42414    
  69  0.540529     -0.615206     -0.187585      0.187585       8.09327       8.28085    
  70  0.314620      -1.15639     -0.352600      0.352600       8.06750       8.42010    
loop,thermsimp(1:2)       90  0.563831      0.341156E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    314          8.08          0.86          1.13         24.52          0.07          0.05         26.62
Just calling func    0   0         26.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    315          8.39          0.86          1.13         24.32          0.07          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       90
neval is:      314
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       90      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       91
neval is:      314


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      314     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102884      -2.27415     -0.693421      0.693421       8.01090       8.70432    
   2  0.846291     -0.166892     -0.508878E-01  0.508878E-01   8.06810       8.11899    
   3  0.167054      -1.78944     -0.545625      0.545625       8.09118       8.63681    
   4  0.786038     -0.240750     -0.734082E-01  0.734082E-01   8.09568       8.16909    
   5  0.680218     -0.385341     -0.117496      0.117496       8.07112       8.18862    
   6  0.843894     -0.169729     -0.517528E-01  0.517528E-01   8.05256       8.10431    
   7  0.295559      -1.21889     -0.371656      0.371656       8.08698       8.45863    
   8  0.383493     -0.958433     -0.292240      0.292240       8.06856       8.36080    
   9  0.867247     -0.142431     -0.434292E-01  0.434292E-01   8.04755       8.09098    
  10  0.241960      -1.41898     -0.432668      0.432668       7.99049       8.42315    
  11  0.486925     -0.719645     -0.219430      0.219430       8.15194       8.37137    
  12  0.750166     -0.287460     -0.876508E-01  0.876508E-01   8.08186       8.16951    
  13  0.507045     -0.679156     -0.207084      0.207084       8.06657       8.27366    
  14  0.237743      -1.43656     -0.438029      0.438029       8.15023       8.58826    
  15  0.256837E-01  -3.66190      -1.11657       1.11657       8.06768       9.18424    
  16  0.776460     -0.253010     -0.771462E-01  0.771462E-01   8.10953       8.18667    
  17  0.316300      -1.15106     -0.350976      0.350976       8.11494       8.46591    
  18  0.493161     -0.706919     -0.215550      0.215550       8.00020       8.21575    
  19  0.807271     -0.214096     -0.652810E-01  0.652810E-01   8.14409       8.20937    
  20  0.338915      -1.08201     -0.329919      0.329919       8.03969       8.36961    
  21  0.132986      -2.01751     -0.615167      0.615167       8.10077       8.71594    
  22  0.409975     -0.891659     -0.271880      0.271880       8.20747       8.47935    
  23  0.525021     -0.644317     -0.196462      0.196462       8.11654       8.31300    
  24  0.393064     -0.933783     -0.284724      0.284724       8.06063       8.34535    
  25  0.176068      -1.73689     -0.529602      0.529602       8.07678       8.60639    
  26  0.965490     -0.351191E-01 -0.107083E-01  0.107083E-01   8.17237       8.18308    
  27  0.387767     -0.947350     -0.288861      0.288861       8.09327       8.38213    
  28  0.936248     -0.658753E-01 -0.200863E-01  0.200863E-01   8.10246       8.12254    
  29  0.914720     -0.891370E-01 -0.271792E-01  0.271792E-01   8.18610       8.21328    
  30  0.332171      -1.10211     -0.336048      0.336048       8.06114       8.39719    
  31  0.845314E-01  -2.47063     -0.753331      0.753331       8.09862       8.85196    
  32  0.687741     -0.374343     -0.114143      0.114143       8.02849       8.14263    
  33  0.899776     -0.105610     -0.322019E-01  0.322019E-01   8.10859       8.14079    
  34  0.558791     -0.581980     -0.177454      0.177454       8.04995       8.22740    
  35  0.882799     -0.124658     -0.380100E-01  0.380100E-01   8.06512       8.10313    
  36  0.235569      -1.44575     -0.440830      0.440830       8.17975       8.62058    
  37  0.533400     -0.628484     -0.191634      0.191634       8.11627       8.30790    
  38  0.147169      -1.91617     -0.584268      0.584268       8.08776       8.67202    
  39  0.966208E-01  -2.33696     -0.712573      0.712573       8.07636       8.78893    
  40  0.952887     -0.482588E-01 -0.147148E-01  0.147148E-01   8.06759       8.08231    
  41  0.155551      -1.86078     -0.567378      0.567378       8.03442       8.60180    
  42  0.645067     -0.438401     -0.133675      0.133675       8.11238       8.24605    
  43  0.394254     -0.930759     -0.283802      0.283802       8.08733       8.37113    
  44  0.546893     -0.603501     -0.184016      0.184016       8.06750       8.25152    
  45  0.390314     -0.940803     -0.286864      0.286864       8.24674       8.53360    
  46  0.311561      -1.16616     -0.355579      0.355579       7.98780       8.34338    
  47  0.752427E-01  -2.58704     -0.788825      0.788825       8.16632       8.95514    
  48  0.144673      -1.93328     -0.589486      0.589486       8.10547       8.69496    
  49  0.297567      -1.21212     -0.369592      0.369592       8.15873       8.52833    
  50  0.544131     -0.608565     -0.185560      0.185560       8.06856       8.25412    
  51  0.750603E-01  -2.58946     -0.789564      0.789564       8.03963       8.82919    
  52  0.127547      -2.05927     -0.627902      0.627902       8.05853       8.68643    
  53  0.839209     -0.175296     -0.534502E-01  0.534502E-01   8.09048       8.14393    
  54  0.718305     -0.330861     -0.100884      0.100884       8.32632       8.42720    
  55  0.246952      -1.39856     -0.426442      0.426442       8.09541       8.52185    
  56  0.550710     -0.596548     -0.181896      0.181896       8.09754       8.27943    
  57  0.588510     -0.530162     -0.161654      0.161654       8.04862       8.21027    
  58  0.361548      -1.01736     -0.310208      0.310208       8.12070       8.43090    
  59  0.962524     -0.381965E-01 -0.116467E-01  0.116467E-01   8.11412       8.12577    
  60  0.510442     -0.672478     -0.205048      0.205048       8.55969       8.76474    
  61  0.177498      -1.72880     -0.527135      0.527135       8.25932       8.78645    
  62  0.775349     -0.254441     -0.775828E-01  0.775828E-01   8.13016       8.20775    
  63  0.313518E-01  -3.46248      -1.05576       1.05576       8.07742       9.13318    
  64  0.136553      -1.99105     -0.607098      0.607098       8.24941       8.85651    
  65  0.694627E-01  -2.66696     -0.813196      0.813196       8.18731       9.00050    
  66  0.784048     -0.243285     -0.741810E-01  0.741810E-01   8.17847       8.25265    
  67  0.561706     -0.576776     -0.175867      0.175867       8.09236       8.26822    
  68  0.992642E-01  -2.30997     -0.704343      0.704343       8.32654       9.03088    
  69  0.111580      -2.19301     -0.668682      0.668682       8.10765       8.77633    
  70  0.655988     -0.421613     -0.128556      0.128556       8.07850       8.20706    
loop,thermsimp(1:2)       91  0.693421      0.508878E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    316          8.07          0.86          1.13         24.44          0.07          0.05         26.55
Just calling func    0   0         26.55


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    317          8.15          0.86          1.14         24.35          0.04          0.04         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       91
neval is:      316
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       91      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       92
neval is:      316


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      316     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.218624      -1.52040     -0.463592      0.463592       8.06759       8.53119    
   2  0.389473     -0.942961     -0.287522      0.287522       8.04755       8.33507    
   3  0.919121     -0.843378E-01 -0.257158E-01  0.257158E-01   8.06512       8.09084    
   4  0.970518     -0.299250E-01 -0.912457E-02  0.912457E-02   8.05256       8.06168    
   5  0.713317     -0.337830     -0.103009      0.103009       8.06810       8.17111    
   6  0.639607     -0.446902     -0.136267      0.136267       8.10246       8.23872    
   7  0.712661     -0.338749     -0.103289      0.103289       8.11412       8.21741    
   8  0.212311      -1.54970     -0.472527      0.472527       8.10859       8.58112    
   9  0.831769     -0.184200     -0.561653E-01  0.561653E-01   8.02849       8.08465    
  10  0.794875     -0.229571     -0.699994E-01  0.699994E-01   8.09048       8.16048    
  11  0.909815     -0.945137E-01 -0.288186E-01  0.288186E-01   8.09568       8.12450    
  12  0.753651E-01  -2.58541     -0.788329      0.788329       8.08186       8.87019    
  13  0.676081     -0.391442     -0.119356      0.119356       8.17237       8.29173    
  14  0.597437     -0.515107     -0.157064      0.157064       8.10953       8.26659    
  15  0.146947      -1.91768     -0.584729      0.584729       8.07112       8.65585    
  16  0.854910     -0.156760     -0.477983E-01  0.477983E-01   8.07850       8.12630    
  17  0.984999     -0.151146E-01 -0.460865E-02  0.460865E-02   8.13016       8.13477    
  18  0.533419     -0.628448     -0.191623      0.191623       8.14409       8.33571    
  19  0.383774     -0.957703     -0.292017      0.292017       8.04862       8.34063    
  20  0.691729     -0.368561     -0.112380      0.112380       8.18610       8.29848    
  21  0.313732E-01  -3.46180      -1.05555       1.05555       8.00020       9.05575    
  22  0.415635     -0.877947     -0.267699      0.267699       8.04995       8.31765    
  23  0.288746      -1.24221     -0.378767      0.378767       8.11238       8.49114    
  24  0.176464      -1.73464     -0.528916      0.528916       8.06750       8.59642    
  25  0.881312     -0.126344     -0.385241E-01  0.385241E-01   8.17847       8.21699    
  26  0.962783     -0.379267E-01 -0.115644E-01  0.115644E-01   8.06856       8.08012    
  27  0.415450     -0.878393     -0.267835      0.267835       8.09236       8.36019    
  28  0.271836      -1.30256     -0.397168      0.397168       8.06657       8.46374    
  29  0.926655     -0.761736E-01 -0.232264E-01  0.232264E-01   8.09754       8.12076    
  30  0.277790      -1.28089     -0.390562      0.390562       8.11627       8.50683    
  31  0.189974      -1.66087     -0.506423      0.506423       8.11654       8.62296    
  32  0.410540     -0.890281     -0.271459      0.271459       7.98780       8.25926    
  33  0.952387     -0.487839E-01 -0.148749E-01  0.148749E-01   8.06063       8.07550    
  34  0.896015     -0.109798     -0.334790E-01  0.334790E-01   8.06856       8.10204    
  35  0.121549E-01  -4.41002      -1.34468       1.34468       8.03969       9.38437    
  36  0.723911     -0.323087     -0.985140E-01  0.985140E-01   8.08733       8.18584    
  37  0.759053     -0.275683     -0.840598E-01  0.840598E-01   8.15194       8.23600    
  38  0.969929     -0.305320E-01 -0.930965E-02  0.930965E-02   8.09327       8.10258    
  39  0.852636     -0.159422     -0.486101E-01  0.486101E-01   8.06114       8.10975    
  40  0.730471     -0.314065     -0.957630E-01  0.957630E-01   7.99049       8.08625    
  41  0.528358     -0.637981     -0.194529      0.194529       8.32632       8.52085    
  42  0.404403     -0.905344     -0.276052      0.276052       8.12070       8.39675    
  43  0.232822      -1.45748     -0.444406      0.444406       8.08698       8.53139    
  44  0.847643     -0.165296     -0.504010E-01  0.504010E-01   8.11494       8.16534    
  45  0.429393E-01  -3.14797     -0.959860      0.959860       8.20747       9.16733    
  46  0.673157     -0.395777     -0.120678      0.120678       8.09541       8.21609    
  47  0.806068E-01  -2.51817     -0.767827      0.767827       8.15873       8.92656    
  48  0.926018     -0.768619E-01 -0.234363E-01  0.234363E-01   8.24674       8.27017    
  49  0.167973      -1.78395     -0.543952      0.543952       8.15023       8.69419    
  50  0.780773     -0.247471     -0.754575E-01  0.754575E-01   8.03442       8.10988    
  51  0.565702E-01  -2.87227     -0.875798      0.875798       8.07678       8.95258    
  52  0.646011     -0.436939     -0.133229      0.133229       8.17975       8.31297    
  53  0.455316     -0.786763     -0.239895      0.239895       8.09118       8.33108    
  54  0.410066     -0.891437     -0.271812      0.271812       8.08776       8.35957    
  55  0.934064     -0.682104E-01 -0.207983E-01  0.207983E-01   8.05853       8.07933    
  56  0.511079     -0.671231     -0.204668      0.204668       8.10547       8.31014    
  57  0.578130     -0.547957     -0.167080      0.167080       8.01090       8.17798    
  58  0.458047     -0.780783     -0.238072      0.238072       8.10077       8.33884    
  59  0.223630      -1.49776     -0.456690      0.456690       8.55969       9.01638    
  60  0.952824E-01  -2.35091     -0.716826      0.716826       8.10765       8.82447    
  61  0.995385     -0.462583E-02 -0.141048E-02  0.141048E-02   8.25932       8.26073    
  62  0.675298     -0.392602     -0.119710      0.119710       8.07636       8.19607    
  63  0.728172     -0.317218     -0.967244E-01  0.967244E-01   8.03963       8.13635    
  64  0.240868      -1.42350     -0.434047      0.434047       8.09862       8.53267    
  65  0.188028      -1.67116     -0.509562      0.509562       8.24941       8.75897    
  66  0.645358     -0.437951     -0.133537      0.133537       8.16632       8.29986    
  67  0.170606      -1.76840     -0.539210      0.539210       8.18731       8.72652    
  68  0.827167     -0.189749     -0.578572E-01  0.578572E-01   8.32654       8.38440    
  69  0.457642     -0.781668     -0.238342      0.238342       8.07742       8.31576    
  70  0.819756E-01  -2.50133     -0.762693      0.762693       8.06529       8.82798    
loop,thermsimp(1:2)       92  0.463592      0.287522    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    318          8.41          0.86          1.13         24.33          0.07          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    319          9.52          0.87          1.13         24.44          0.05          0.05         26.53
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.41
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       92
neval is:      318
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       92      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       93
neval is:      318


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      318     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.148595      -1.90653     -0.581329      0.581329       8.05256       8.63389    
   2  0.695074     -0.363738     -0.110909      0.110909       8.06063       8.17154    
   3  0.541180     -0.614003     -0.187218      0.187218       8.05853       8.24575    
   4  0.189791      -1.66183     -0.506716      0.506716       8.06856       8.57527    
   5  0.245553      -1.40424     -0.428173      0.428173       8.02849       8.45666    
   6  0.641474     -0.443986     -0.135378      0.135378       7.99049       8.12586    
   7  0.308462      -1.17616     -0.358627      0.358627       8.06512       8.42375    
   8  0.478005     -0.738133     -0.225067      0.225067       8.06856       8.29363    
   9  0.395759     -0.926951     -0.282641      0.282641       8.09327       8.37591    
  10  0.438776E-01  -3.12635     -0.953269      0.953269       8.06114       9.01441    
  11  0.294628E-01  -3.52463      -1.07471       1.07471       8.03442       9.10913    
  12  0.331052E-01  -3.40806      -1.03917       1.03917       8.09754       9.13670    
  13  0.916325E-01  -2.38997     -0.728736      0.728736       8.09568       8.82442    
  14  0.985908     -0.141919E-01 -0.432730E-02  0.432730E-02   8.07850       8.08283    
  15  0.511724     -0.669970     -0.204283      0.204283       8.13016       8.33445    
  16  0.185695      -1.68365     -0.513369      0.513369       8.03963       8.55300    
  17  0.830711     -0.185474     -0.565536E-01  0.565536E-01   8.09048       8.14703    
  18  0.765179E-04  -9.47799      -2.88997       2.88997       8.11494       11.0049    
  19  0.129365      -2.04512     -0.623586      0.623586       8.06810       8.69169    
  20  0.796363     -0.227700     -0.694289E-01  0.694289E-01   8.01090       8.08033    
  21  0.589256     -0.528895     -0.161268      0.161268       8.08733       8.24859    
  22  0.770995     -0.260073     -0.793000E-01  0.793000E-01   8.07636       8.15566    
  23  0.685430     -0.377709     -0.115169      0.115169       8.09541       8.21058    
  24  0.487688     -0.718080     -0.218953      0.218953       8.17847       8.39742    
  25  0.114898      -2.16371     -0.659747      0.659747       8.11412       8.77387    
  26  0.165093      -1.80124     -0.549225      0.549225       8.15194       8.70117    
  27  0.302275      -1.19642     -0.364806      0.364806       8.10246       8.46726    
  28  0.123669      -2.09014     -0.637315      0.637315       7.98780       8.62511    
  29  0.960526     -0.402739E-01 -0.122801E-01  0.122801E-01   8.25932       8.27160    
  30  0.744557     -0.294966     -0.899393E-01  0.899393E-01   8.10953       8.19946    
  31  0.418436     -0.871232     -0.265651      0.265651       8.24674       8.51239    
  32  0.624411     -0.470947     -0.143598      0.143598       8.17237       8.31597    
  33  0.920055     -0.833222E-01 -0.254061E-01  0.254061E-01   8.18610       8.21151    
  34  0.330507      -1.10713     -0.337579      0.337579       8.16632       8.50390    
  35  0.889566     -0.117022     -0.356816E-01  0.356816E-01   8.10547       8.14116    
  36  0.269410      -1.31152     -0.399901      0.399901       8.17975       8.57965    
  37  0.458780     -0.779184     -0.237584      0.237584       8.07742       8.31500    
  38  0.952588     -0.485730E-01 -0.148106E-01  0.148106E-01   8.04995       8.06476    
  39  0.213836      -1.54254     -0.470344      0.470344       8.09118       8.56153    
  40  0.460697     -0.775015     -0.236313      0.236313       8.04755       8.28386    
  41  0.571693     -0.559153     -0.170494      0.170494       8.14409       8.31459    
  42  0.201363      -1.60265     -0.488670      0.488670       8.10077       8.58944    
  43  0.707817     -0.345570     -0.105369      0.105369       8.04862       8.15399    
  44  0.927118     -0.756745E-01 -0.230742E-01  0.230742E-01   8.08776       8.11083    
  45  0.288916      -1.24162     -0.378588      0.378588       8.09236       8.47094    
  46  0.702737     -0.352773     -0.107565      0.107565       8.32654       8.43410    
  47  0.253190      -1.37362     -0.418835      0.418835       8.12070       8.53953    
  48  0.709086     -0.343779     -0.104823      0.104823       8.06657       8.17140    
  49  0.399421     -0.917738     -0.279832      0.279832       8.11238       8.39221    
  50  0.837301     -0.177572     -0.541443E-01  0.541443E-01   8.11627       8.17041    
  51  0.906694     -0.979507E-01 -0.298666E-01  0.298666E-01   8.32632       8.35618    
  52  0.479547     -0.734913     -0.224086      0.224086       8.06759       8.29168    
  53  0.573668     -0.555704     -0.169442      0.169442       8.08698       8.25642    
  54  0.616113     -0.484325     -0.147678      0.147678       8.09862       8.24630    
  55  0.899004     -0.106467     -0.324634E-01  0.324634E-01   8.10859       8.14105    
  56  0.668105     -0.403310     -0.122975      0.122975       8.06750       8.19048    
  57  0.464354     -0.767107     -0.233902      0.233902       8.11654       8.35044    
  58  0.298472E-01  -3.51166      -1.07076       1.07076       8.07112       9.14188    
  59  0.458507     -0.779779     -0.237766      0.237766       8.15023       8.38800    
  60  0.372295E-01  -3.29065      -1.00337       1.00337       8.18731       9.19067    
  61  0.349332      -1.05173     -0.320689      0.320689       8.24941       8.57010    
  62  0.396867     -0.924153     -0.281788      0.281788       8.10765       8.38943    
  63  0.599776     -0.511199     -0.155872      0.155872       8.06529       8.22116    
  64  0.175124      -1.74226     -0.531240      0.531240       8.08186       8.61310    
  65  0.723227     -0.324033     -0.988022E-01  0.988022E-01   8.15873       8.25754    
  66  0.738639     -0.302946     -0.923725E-01  0.923725E-01   8.07678       8.16916    
  67  0.691263     -0.369235     -0.112585      0.112585       8.55969       8.67228    
  68  0.575263     -0.552928     -0.168596      0.168596       8.00020       8.16879    
  69  0.312385      -1.16352     -0.354774      0.354774       8.20747       8.56224    
  70  0.708595     -0.344472     -0.105034      0.105034       8.40865       8.51369    
loop,thermsimp(1:2)       93  0.581329      0.110909    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    320          8.04          0.87          1.13         24.28          0.08          0.05         26.41
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    321          8.12          0.86          1.13         24.39          0.06          0.05         26.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  320    8.1160        1.038     -1.923      3.307     -102.6      1.415    
                      0.3748      1.428     -99.70      3.521     0.6326E-01

                       2.334    -0.9920      1.530      6888.      3132.    

                     -0.1523      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6489.      3328.    

                       1.433     -5.782     -4.680     -8.598      6.761    

                      -15.17     -3.478      7496.      0.000     0.1019E+05



                       1559.     0.1456E+05 -2531.      5380.      3547.    

                       7679.     0.5499E-01 0.1999     0.1884E-01 0.1485    

                     -0.2486    -0.1183     0.2175     0.1241     0.9456E-01



                     -0.4918    -0.7880      0.000     0.1204    -0.4631E-01

                      0.3752E-01 0.1167    -0.7116    -0.1461     0.2309E-01

                      0.3249E-01 0.1575    -0.6830     -1.239      6620.    



                      -1.154     -1.185     -2.196     -2.287    -0.3807    

                     -0.3252      9.229      8.687    -0.1802E+05 -4.000    

                     -0.5778     -1.995      9.296      8.901    -0.1908E+05



                      -4.000     0.5797    -0.3506      8.835      9.080    

                     -0.1908E+05 -7.000    -0.6778    -0.5766      9.015    

                       8.745    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       93
neval is:      320
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       93      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       94
neval is:      320


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      320     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.842284     -0.171638     -0.523348E-01  0.523348E-01   8.04995       8.10228    
   2  0.478368     -0.737375     -0.224836      0.224836       8.01090       8.23574    
   3  0.283498      -1.26055     -0.384360      0.384360       8.07850       8.46286    
   4  0.520516     -0.652935     -0.199089      0.199089       8.08776       8.28685    
   5  0.703282E-01  -2.65458     -0.809420      0.809420       7.99049       8.79991    
   6  0.914137     -0.897748E-01 -0.273736E-01  0.273736E-01   8.10859       8.13596    
   7  0.479535     -0.734938     -0.224093      0.224093       8.10547       8.32957    
   8  0.921875     -0.813456E-01 -0.248034E-01  0.248034E-01   8.09048       8.11528    
   9  0.739547     -0.301718     -0.919981E-01  0.919981E-01   8.04862       8.14062    
  10  0.790753     -0.234770     -0.715848E-01  0.715848E-01   8.07636       8.14794    
  11  0.212247E-01  -3.85259      -1.17471       1.17471       8.00020       9.17491    
  12  0.286971      -1.24837     -0.380647      0.380647       8.07678       8.45743    
  13  0.695666     -0.362886     -0.110649      0.110649       8.11627       8.22692    
  14  0.534590     -0.626255     -0.190954      0.190954       8.06657       8.25753    
  15  0.945577     -0.559603E-01 -0.170631E-01  0.170631E-01   8.06063       8.07769    
  16  0.619446     -0.478930     -0.146033      0.146033       8.06750       8.21354    
  17  0.291083E-01  -3.53673      -1.07840       1.07840       8.10953       9.18793    
  18  0.372584E-01  -3.28988      -1.00313       1.00313       8.09541       9.09854    
  19  0.713241     -0.337936     -0.103041      0.103041       8.18610       8.28914    
  20  0.280281      -1.27196     -0.387839      0.387839       8.06529       8.45313    
  21  0.254796      -1.36729     -0.416907      0.416907       8.05853       8.47544    
  22  0.498598     -0.695955     -0.212207      0.212207       8.09862       8.31083    
  23  0.515261E-01  -2.96567     -0.904274      0.904274       8.08733       8.99160    
  24  0.347627      -1.05662     -0.322180      0.322180       8.08698       8.40916    
  25  0.696212     -0.362102     -0.110410      0.110410       8.15873       8.26914    
  26  0.707749E-01  -2.64825     -0.807489      0.807489       8.25932       9.06681    
  27  0.364523E-01  -3.31175      -1.00980       1.00980       8.04755       9.05735    
  28  0.895087E-02  -4.71600      -1.43798       1.43798       8.06759       9.50557    
  29  0.333194      -1.09903     -0.335110      0.335110       8.06856       8.40367    
  30  0.451375     -0.795457     -0.242546      0.242546       8.14409       8.38664    
  31  0.849961E-01  -2.46515     -0.751660      0.751660       8.07742       8.82908    
  32  0.524791     -0.644756     -0.196595      0.196595       8.17237       8.36897    
  33  0.641068     -0.444619     -0.135571      0.135571       8.13016       8.26573    
  34  0.757376     -0.277895     -0.847342E-01  0.847342E-01   8.11654       8.20127    
  35  0.760597     -0.273651     -0.834402E-01  0.834402E-01   8.32632       8.40976    
  36  0.709070     -0.343801     -0.104830      0.104830       8.09327       8.19810    
  37  0.794718     -0.229768     -0.700595E-01  0.700595E-01   8.15023       8.22029    
  38  0.869679     -0.139632     -0.425757E-01  0.425757E-01   8.10765       8.15022    
  39  0.229100E-01  -3.77618      -1.15141       1.15141       8.11238       9.26379    
  40  0.935590     -0.665776E-01 -0.203005E-01  0.203005E-01   8.17847       8.19877    
  41  0.889453     -0.117149     -0.357203E-01  0.357203E-01   8.06512       8.10084    
  42  0.529054     -0.636665     -0.194128      0.194128       8.32654       8.52067    
  43  0.907902     -0.966186E-01 -0.294604E-01  0.294604E-01   8.02849       8.05795    
  44  0.693802     -0.365568     -0.111467      0.111467       8.10246       8.21392    
  45  0.883803     -0.123521     -0.376634E-01  0.376634E-01   8.09236       8.13002    
  46  0.275134E-01  -3.59308      -1.09558       1.09558       8.16632       9.26190    
  47  0.324767      -1.12465     -0.342921      0.342921       8.24674       8.58966    
  48  0.853326     -0.158614     -0.483637E-01  0.483637E-01   8.40865       8.45702    
  49  0.325639      -1.12197     -0.342104      0.342104       8.12070       8.46280    
  50  0.773280     -0.257115     -0.783979E-01  0.783979E-01   8.03963       8.11803    
  51  0.108890      -2.21741     -0.676121      0.676121       8.09118       8.76730    
  52  0.188532E-01  -3.97107      -1.21084       1.21084       8.20747       9.41831    
  53  0.970927     -0.295045E-01 -0.899635E-02  0.899635E-02   8.24941       8.25841    
  54  0.549714     -0.598357     -0.182448      0.182448       8.06856       8.25100    
  55  0.937888E-01  -2.36671     -0.721644      0.721644       8.17975       8.90139    
  56  0.293516      -1.22582     -0.373771      0.373771       8.10077       8.47454    
  57  0.598789     -0.512846     -0.156374      0.156374       8.08186       8.23823    
  58  0.173412      -1.75209     -0.534237      0.534237       7.98780       8.52204    
  59  0.552776     -0.592802     -0.180754      0.180754       8.05256       8.23331    
  60  0.586717     -0.533213     -0.162584      0.162584       8.55969       8.72228    
  61  0.902886     -0.102159     -0.311498E-01  0.311498E-01   8.06810       8.09925    
  62  0.423679     -0.858778     -0.261854      0.261854       8.15194       8.41379    
  63  0.796344E-01  -2.53031     -0.771527      0.771527       8.11412       8.88565    
  64  0.894023     -0.112024     -0.341577E-01  0.341577E-01   8.09568       8.12984    
  65  0.840662     -0.173566     -0.529228E-01  0.529228E-01   8.06114       8.11406    
  66  0.730459     -0.314083     -0.957683E-01  0.957683E-01   8.03442       8.13019    
  67  0.652850     -0.426409     -0.130018      0.130018       8.09754       8.22755    
  68  0.856696     -0.154672     -0.471618E-01  0.471618E-01   8.07112       8.11828    
  69  0.562214     -0.575873     -0.175592      0.175592       8.18731       8.36290    
  70  0.680885     -0.384362     -0.117197      0.117197       8.03863       8.15583    
loop,thermsimp(1:2)       94  0.523348E-01  0.224836    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    322          8.05          0.86          1.13         24.33          0.07          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    323          8.30          0.88          1.13         24.44          0.07          0.05         26.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       94
neval is:      322
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       94      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       95
neval is:      322


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      322     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.744650     -0.294841     -0.899012E-01  0.899012E-01   8.02849       8.11839    
   2  0.739179     -0.302215     -0.921497E-01  0.921497E-01   8.06063       8.15278    
   3  0.131167      -2.03128     -0.619367      0.619367       8.06810       8.68747    
   4  0.523356     -0.647493     -0.197430      0.197430       8.06512       8.26255    
   5  0.660412     -0.414891     -0.126506      0.126506       8.04995       8.17645    
   6  0.433074E-01  -3.13943     -0.957258      0.957258       8.06114       9.01840    
   7  0.480352     -0.733236     -0.223574      0.223574       8.09048       8.31405    
   8  0.808114     -0.213053     -0.649628E-01  0.649628E-01   8.03963       8.10459    
   9  0.723804     -0.323235     -0.985589E-01  0.985589E-01   8.07112       8.16968    
  10  0.322682      -1.13109     -0.344885      0.344885       8.09568       8.44056    
  11  0.898907     -0.106576     -0.324966E-01  0.324966E-01   8.09236       8.12485    
  12  0.359972      -1.02173     -0.311540      0.311540       8.03442       8.34596    
  13  0.879118     -0.128836     -0.392839E-01  0.392839E-01   8.10859       8.14787    
  14  0.963559     -0.371220E-01 -0.113190E-01  0.113190E-01   8.04862       8.05994    
  15  0.662848     -0.411210     -0.125384      0.125384       8.07636       8.20174    
  16  0.648402     -0.433244     -0.132102      0.132102       8.10765       8.23975    
  17  0.375343     -0.979916     -0.298790      0.298790       8.03863       8.33742    
  18  0.812441     -0.207712     -0.633345E-01  0.633345E-01   8.09327       8.15660    
  19  0.248177E-01  -3.69620      -1.12702       1.12702       8.17847       9.30549    
  20  0.653530     -0.425366     -0.129700      0.129700       8.11654       8.24624    
  21  0.712244     -0.339334     -0.103468      0.103468       8.06750       8.17097    
  22  0.358229      -1.02658     -0.313020      0.313020       8.10246       8.41548    
  23  0.325518      -1.12234     -0.342216      0.342216       8.15023       8.49245    
  24  0.770349     -0.260912     -0.795557E-01  0.795557E-01   8.11627       8.19582    
  25  0.633518E-01  -2.75905     -0.841274      0.841274       8.09754       8.93881    
  26  0.168796      -1.77907     -0.542463      0.542463       8.05256       8.59502    
  27  0.562007     -0.576241     -0.175704      0.175704       8.01090       8.18660    
  28  0.156316      -1.85588     -0.565884      0.565884       8.08186       8.64774    
  29  0.967732     -0.328002E-01 -0.100013E-01  0.100013E-01   8.06856       8.07856    
  30  0.538071     -0.619766     -0.188975      0.188975       8.06657       8.25555    
  31  0.967495     -0.330453E-01 -0.100760E-01  0.100760E-01   8.24941       8.25949    
  32  0.771619     -0.259265     -0.790535E-01  0.790535E-01   8.13016       8.20922    
  33  0.246044      -1.40225     -0.427565      0.427565       8.15873       8.58630    
  34  0.700731     -0.355631     -0.108437      0.108437       8.08776       8.19619    
  35  0.382714     -0.960468     -0.292860      0.292860       8.18610       8.47896    
  36  0.580395     -0.544047     -0.165888      0.165888       8.09862       8.26451    
  37  0.305131      -1.18701     -0.361937      0.361937       8.10547       8.46741    
  38  0.624250     -0.471204     -0.143677      0.143677       8.18731       8.33098    
  39  0.575432     -0.552634     -0.168506      0.168506       8.17237       8.34088    
  40  0.701335     -0.354770     -0.108174      0.108174       8.14409       8.25227    
  41  0.290211      -1.23715     -0.377224      0.377224       8.06856       8.44578    
  42  0.140976      -1.95916     -0.597377      0.597377       8.08698       8.68436    
  43  0.275714      -1.28839     -0.392849      0.392849       8.32632       8.71917    
  44  0.856479     -0.154925     -0.472390E-01  0.472390E-01   8.15194       8.19918    
  45  0.994286     -0.573084E-02 -0.174741E-02  0.174741E-02   8.06529       8.06704    
  46  0.913008     -0.910102E-01 -0.277503E-01  0.277503E-01   8.40865       8.43640    
  47  0.204063      -1.58933     -0.484609      0.484609       8.07678       8.56139    
  48  0.388833     -0.944605     -0.288024      0.288024       8.12070       8.40872    
  49  0.781619     -0.246387     -0.751270E-01  0.751270E-01   8.07850       8.15363    
  50  0.373421     -0.985049     -0.300356      0.300356       8.10077       8.40113    
  51  0.834918     -0.180422     -0.550132E-01  0.550132E-01   8.05853       8.11354    
  52  0.174969      -1.74315     -0.531511      0.531511       8.32654       8.85805    
  53  0.531353     -0.632329     -0.192806      0.192806       7.98780       8.18061    
  54  0.339530      -1.08019     -0.329366      0.329366       8.24674       8.57610    
  55  0.929760     -0.728288E-01 -0.222065E-01  0.222065E-01   8.55969       8.58190    
  56  0.223523      -1.49824     -0.456835      0.456835       8.09118       8.54802    
  57  0.557869     -0.583631     -0.177957      0.177957       7.99049       8.16844    
  58  0.521577     -0.650898     -0.198468      0.198468       8.07742       8.27589    
  59  0.856336     -0.155092     -0.472898E-01  0.472898E-01   8.11412       8.16141    
  60  0.645536     -0.437674     -0.133453      0.133453       8.17975       8.31320    
  61  0.438677     -0.823992     -0.251247      0.251247       8.08733       8.33857    
  62  0.346732      -1.05920     -0.322966      0.322966       8.04755       8.37052    
  63  0.902848     -0.102201     -0.311624E-01  0.311624E-01   8.25932       8.29048    
  64  0.578219     -0.547803     -0.167033      0.167033       8.09541       8.26245    
  65  0.602211     -0.507147     -0.154636      0.154636       8.00020       8.15484    
  66  0.432652     -0.837821     -0.255464      0.255464       8.10953       8.36499    
  67  0.123601      -2.09070     -0.637483      0.637483       8.16632       8.80380    
  68  0.840915     -0.173264     -0.528308E-01  0.528308E-01   8.11238       8.16521    
  69  0.638713     -0.448300     -0.136693      0.136693       8.20747       8.34416    
  70  0.127935      -2.05623     -0.626974      0.626974       8.04889       8.67587    
loop,thermsimp(1:2)       95  0.899012E-01  0.921497E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    324          8.75          0.86          1.12         24.34          0.07          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       95
neval is:      323
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       95      95
 right before GO TO 250



 right after: 250 IF (loop < nloop) CYCLE Main_loop 
loop,nloop:       95      95
loop was equal to nloop so did not start main cycle again, now will do the following: 




calculate mean & stdev of func values for current simplex (hmean,hstd)
 write hstd
 RMS of function values of last simplex =  0.119501    

hmean,hstd :    8.12398      0.119501    


writing best so far by calling functn2 
 but just writing params not moments. see the change in functn2
hmean,hstd :    8.12398      0.119501    
h(1),h(best1),h(np1) :    8.04862       7.98780       8.74604    
htherm(1),htherm(best1),htherm(np1) :    8.05994       8.18061       9.30549    


 CHECK hstd>?stopcr
---------> IF hstd>stopcr (and maxfn,neval.nevalp conditions as well) then set iflag and loop to zero and go to the start of the main cycle again 
---------> IF hstd<=stopcr then find the centroid of the current simplex and get the function value there 
 ............
 ............
 ............
 ............
  .NOT. (hstd > stopcr .AND. (((maxfn>=0).AND.(neval <= maxfn)).OR.((maxfn<0).AND.(nevalp <= -1*maxfn))  )) 
  so find the centroid of current simplex and get teh function value there 
  call functn(p,func) 
  neval = neval + 1
  nevalp = nevalp + 1
  IF ((iprint > 0).AND.(realrank==0)) THEN 
     IF (MOD(neval,iprint) == 0) WRITE (lout,5100) neval, func, p 
  END IF  
  CHECK wtr the no. of func values allowed, maxfn, has been overrun. if so, exit with ifault= 1 
  IF maxfn>0 check based on neval. if maxfn<0 check based on nevalp. 
  i.e.: ---->IF (((maxfn>=0).AND.(neval > maxfn)).OR.((maxfn<0).AND.(nevalp > -1*maxfn))) THEN
        ---->IF the above if statement true then something ... RETURN 
        ---->IF the above if statement not true then you get out of that if statement ... CONVGENCE CRTI SATISFIED - RETURN 
 ............
 ............
iter,obj,time:    325          8.07          0.86          1.13         24.41          0.09          0.05         26.53

 EVIDENCE OF CONVERGENCE

 Centroid of last simplex =
    1.1293      -1.8611       3.2372      -102.61       1.3744      0.33566    

    1.3363      -99.703       3.6781     -0.87473E-03   2.2423      -1.0612    

    1.5304       6902.9       3366.0     -0.17148       0.0000       0.0000    

    0.0000      -1.2210     -0.50000       0.0000       0.0000       6209.2    


    484.35       1.4328      -5.8714      -4.2875      -8.5300       6.6544    

   -14.964      -3.5697       8310.6       0.0000       11670.       1421.0    

    12015.      -3282.8       9230.1       4846.9       5802.7      0.27496E-01

   0.18765      0.50044E-02  0.12096     -0.24859     -0.98941E-01  0.18997    


   0.11329      0.67066E-01 -0.47507     -0.78854       0.0000      0.92876E-01

  -0.70355E-01  0.10020E-01  0.10412     -0.71156     -0.15058      0.36644E-01

   0.42325E-01  0.13001     -0.67173      -1.2189       6968.6      -1.0879    

   -1.2113      -2.2419      -2.3167     -0.38066     -0.32524       9.2183    


    8.6779      -18796.      -4.0000     -0.58566      -2.1749       9.2941    

    8.8737      -19076.      -4.0000      0.48803     -0.44222       8.8499    

    9.0785      -19076.      -7.0000     -0.75617     -0.66821       9.0293    

    8.7614      -19076.      -7.0000    
 Function value at centroid =   8.06720    

beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        1
neval is:      324


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      324     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204528E-01  -3.88964      -1.18601       1.18601       8.04862       9.23462    
   2  0.977100     -0.231667E-01 -0.706385E-02  0.706385E-02   8.06529       8.07235    
   3  0.491467     -0.710361     -0.216599      0.216599       8.06856       8.28515    
   4  0.802113E-01  -2.52309     -0.769327      0.769327       8.03963       8.80895    
   5  0.891044     -0.115361     -0.351753E-01  0.351753E-01   8.05853       8.09370    
   6  0.397551     -0.922433     -0.281263      0.281263       8.02849       8.30975    
   7  0.121203      -2.11029     -0.643458      0.643458       8.09236       8.73581    
   8  0.789985E-01  -2.53833     -0.773972      0.773972       8.10859       8.88256    
   9  0.921855     -0.813679E-01 -0.248102E-01  0.248102E-01   8.06063       8.08544    
  10  0.252671      -1.37567     -0.419460      0.419460       8.07850       8.49796    
  11  0.787271     -0.239182     -0.729301E-01  0.729301E-01   8.00020       8.07313    
  12  0.634653     -0.454676     -0.138637      0.138637       8.09327       8.23190    
  13  0.706648     -0.347222     -0.105873      0.105873       8.11412       8.22000    
  14  0.349740E-01  -3.35315      -1.02242       1.02242       8.11238       9.13480    
  15  0.686787     -0.375731     -0.114566      0.114566       7.99049       8.10505    
  16  0.309348      -1.17329     -0.357752      0.357752       8.07112       8.42887    
  17  0.703748     -0.351336     -0.107127      0.107127       8.06750       8.17463    
  18  0.985092     -0.150207E-01 -0.458004E-02  0.458004E-02   8.04995       8.05453    
  19  0.440741     -0.819298     -0.249816      0.249816       7.98780       8.23762    
  20  0.796112     -0.228015     -0.695251E-01  0.695251E-01   8.01090       8.08042    
  21  0.451938     -0.794210     -0.242166      0.242166       8.11627       8.35843    
  22  0.230902      -1.46576     -0.446932      0.446932       8.08776       8.53469    
  23  0.760212     -0.274159     -0.835949E-01  0.835949E-01   8.15194       8.23554    
  24  0.250434E-02  -5.98973      -1.82635       1.82635       8.07636       9.90271    
  25  0.627913E-01  -2.76794     -0.843984      0.843984       8.13016       8.97415    
  26  0.263128      -1.33511     -0.407096      0.407096       8.10765       8.51474    
  27  0.177986      -1.72605     -0.526297      0.526297       8.11654       8.64284    
  28  0.919776     -0.836247E-01 -0.254984E-01  0.254984E-01   8.14409       8.16959    
  29  0.854272     -0.157506     -0.480259E-01  0.480259E-01   8.06657       8.11460    
  30  0.648187     -0.433576     -0.132203      0.132203       8.24941       8.38162    
  31  0.853797     -0.158061     -0.481952E-01  0.481952E-01   8.09541       8.14361    
  32  0.484551     -0.724533     -0.220920      0.220920       8.06512       8.28605    
  33  0.423817     -0.858454     -0.261755      0.261755       8.09862       8.36038    
  34  0.932015     -0.704065E-01 -0.214679E-01  0.214679E-01   8.07742       8.09889    
  35  0.161906      -1.82074     -0.555170      0.555170       8.25932       8.81449    
  36  0.812519     -0.207617     -0.633053E-01  0.633053E-01   8.17975       8.24305    
  37  0.346838      -1.05890     -0.322873      0.322873       8.09048       8.41335    
  38  0.477141     -0.739943     -0.225619      0.225619       8.18731       8.41293    
  39  0.931946     -0.704808E-01 -0.214906E-01  0.214906E-01   8.03863       8.06012    
  40  0.189794      -1.66182     -0.506711      0.506711       8.08733       8.59404    
  41  0.361902      -1.01638     -0.309910      0.309910       8.17237       8.48228    
  42  0.775630E-02  -4.85925      -1.48165       1.48165       8.20747       9.68912    
  43  0.292497      -1.22930     -0.374831      0.374831       8.03442       8.40925    
  44  0.264300      -1.33067     -0.405741      0.405741       8.10953       8.51527    
  45  0.529597     -0.635638     -0.193815      0.193815       8.04755       8.24136    
  46  0.163272      -1.81234     -0.552607      0.552607       8.10077       8.65338    
  47  0.212593      -1.54838     -0.472123      0.472123       8.12070       8.59282    
  48  0.359173      -1.02395     -0.312218      0.312218       8.10246       8.41467    
  49  0.993707     -0.631295E-02 -0.192491E-02  0.192491E-02   8.40865       8.41058    
  50  0.261479      -1.34140     -0.409013      0.409013       8.09568       8.50469    
  51  0.441392     -0.817822     -0.249366      0.249366       8.06856       8.31792    
  52  0.624656     -0.470554     -0.143479      0.143479       8.10547       8.24895    
  53  0.646784     -0.435743     -0.132864      0.132864       8.18610       8.31897    
  54  0.343734      -1.06789     -0.325614      0.325614       8.15023       8.47585    
  55  0.438651     -0.824052     -0.251265      0.251265       8.09118       8.34245    
  56  0.476250     -0.741811     -0.226189      0.226189       8.07678       8.30297    
  57  0.665451     -0.407291     -0.124189      0.124189       8.24674       8.37093    
  58  0.903561E-01  -2.40400     -0.733013      0.733013       8.55969       9.29270    
  59  0.899286     -0.106155     -0.323681E-01  0.323681E-01   8.15873       8.19110    
  60  0.822477     -0.195434     -0.595908E-01  0.595908E-01   8.05256       8.11215    
  61  0.824462E-01  -2.49561     -0.760947      0.760947       8.08186       8.84281    
  62  0.689460     -0.371846     -0.113381      0.113381       8.04889       8.16228    
  63  0.124471      -2.08368     -0.635345      0.635345       8.08698       8.72232    
  64  0.215598      -1.53434     -0.467842      0.467842       8.06810       8.53594    
  65  0.671537     -0.398187     -0.121413      0.121413       8.32632       8.44773    
  66  0.330886      -1.10598     -0.337230      0.337230       8.16632       8.50355    
  67  0.198204      -1.61846     -0.493492      0.493492       8.32654       8.82003    
  68  0.774065     -0.256099     -0.780884E-01  0.780884E-01   8.09754       8.17562    
  69  0.787755     -0.238568     -0.727429E-01  0.727429E-01   8.06114       8.13388    
  70  0.613901     -0.487921     -0.148774      0.148774       8.74604       8.89481    
loop,thermsimp(1:2)        1   1.18601      0.706385E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    326          8.08          0.86          1.13         24.39          0.09          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    327          8.31          0.86          1.13         24.66          0.03          0.05         26.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        1
neval is:      326
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        1      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        2
neval is:      326


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      326     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.225672      -1.48867     -0.453917      0.453917       8.04995       8.50387    
   2  0.726663     -0.319292     -0.973567E-01  0.973567E-01   8.03863       8.13598    
   3  0.929061     -0.735808E-01 -0.224358E-01  0.224358E-01   8.06529       8.08772    
   4  0.764703     -0.268268     -0.817988E-01  0.817988E-01   8.00020       8.08200    
   5  0.119617      -2.12346     -0.647474      0.647474       8.01090       8.65837    
   6  0.369672     -0.995138     -0.303432      0.303432       8.06063       8.36406    
   7  0.875806     -0.132611     -0.404350E-01  0.404350E-01   8.05853       8.09896    
   8  0.657886     -0.418723     -0.127675      0.127675       8.07742       8.20509    
   9  0.387095E-01  -3.25167     -0.991481      0.991481       7.99049       8.98197    
  10  0.454078     -0.789485     -0.240725      0.240725       8.05256       8.29328    
  11  0.890470     -0.116006     -0.353718E-01  0.353718E-01   8.06657       8.10195    
  12  0.118445      -2.13331     -0.650476      0.650476       8.06114       8.71162    
  13  0.190238      -1.65948     -0.506000      0.506000       8.09541       8.60141    
  14  0.435624     -0.830976     -0.253377      0.253377       8.04889       8.30227    
  15  0.768655     -0.263114     -0.802271E-01  0.802271E-01   8.14409       8.22432    
  16  0.870896E-01  -2.44082     -0.744240      0.744240       8.06750       8.81174    
  17  0.936453     -0.656556E-01 -0.200193E-01  0.200193E-01   8.09754       8.11755    
  18  0.159312      -1.83689     -0.560094      0.560094       8.15873       8.71883    
  19  0.988165     -0.119051E-01 -0.363004E-02  0.363004E-02   8.11412       8.11775    
  20  0.713347     -0.337787     -0.102996      0.102996       8.09327       8.19626    
  21  0.417075     -0.874489     -0.266644      0.266644       8.15194       8.41859    
  22  0.719048     -0.329827     -0.100569      0.100569       7.98780       8.08837    
  23  0.785519     -0.241411     -0.736098E-01  0.736098E-01   8.04755       8.12116    
  24  0.356994      -1.03004     -0.314072      0.314072       8.17975       8.49382    
  25  0.357951      -1.02736     -0.313257      0.313257       8.10547       8.41873    
  26  0.154816      -1.86552     -0.568823      0.568823       8.06856       8.63738    
  27  0.246912      -1.39872     -0.426491      0.426491       8.06512       8.49162    
  28  0.553458     -0.591570     -0.180378      0.180378       8.07678       8.25716    
  29  0.729602     -0.315256     -0.961261E-01  0.961261E-01   8.02849       8.12461    
  30  0.605470     -0.501750     -0.152991      0.152991       8.06856       8.22155    
  31  0.278987E-01  -3.57918      -1.09134       1.09134       8.18610       9.27744    
  32  0.187991      -1.67136     -0.509623      0.509623       8.09118       8.60081    
  33  0.543158     -0.610355     -0.186106      0.186106       8.11627       8.30237    
  34  0.996749     -0.325625E-02 -0.992876E-03  0.992876E-03   8.09862       8.09962    
  35  0.540727     -0.614841     -0.187474      0.187474       8.24674       8.43421    
  36  0.833271E-01  -2.48498     -0.757706      0.757706       8.24941       9.00712    
  37  0.404538     -0.905011     -0.275951      0.275951       8.03442       8.31037    
  38  0.147302      -1.91527     -0.583994      0.583994       8.40865       8.99265    
  39  0.364226E-01  -3.31257      -1.01005       1.01005       8.18731       9.19736    
  40  0.381304     -0.964158     -0.293986      0.293986       8.09048       8.38446    
  41  0.737758     -0.304140     -0.927365E-01  0.927365E-01   8.10246       8.19519    
  42  0.179374      -1.71828     -0.523928      0.523928       8.07112       8.59505    
  43  0.281757      -1.26671     -0.386238      0.386238       8.32632       8.71256    
  44  0.192633      -1.64697     -0.502184      0.502184       8.15023       8.65242    
  45  0.954983     -0.460617E-01 -0.140449E-01  0.140449E-01   8.17237       8.18642    
  46  0.710258     -0.342127     -0.104320      0.104320       8.07850       8.18282    
  47  0.831769     -0.184201     -0.561655E-01  0.561655E-01   8.16632       8.22248    
  48  0.912541     -0.915218E-01 -0.279063E-01  0.279063E-01   8.09568       8.12359    
  49  0.221543      -1.50714     -0.459549      0.459549       8.10765       8.56719    
  50  0.690803E-02  -4.97507      -1.51697       1.51697       8.10953       9.62650    
  51  0.162616      -1.81637     -0.553836      0.553836       8.08776       8.64159    
  52  0.869433     -0.139913     -0.426616E-01  0.426616E-01   8.06810       8.11076    
  53  0.541563     -0.613295     -0.187003      0.187003       8.12070       8.30770    
  54  0.310811      -1.16857     -0.356314      0.356314       8.08733       8.44364    
  55  0.879573     -0.128319     -0.391263E-01  0.391263E-01   8.11654       8.15566    
  56  0.262339      -1.33812     -0.408011      0.408011       8.10077       8.50878    
  57  0.651476     -0.428515     -0.130660      0.130660       8.08698       8.21764    
  58  0.498193     -0.696767     -0.212454      0.212454       8.09236       8.30481    
  59  0.251241      -1.38134     -0.421191      0.421191       8.03963       8.46082    
  60  0.704518     -0.350242     -0.106794      0.106794       8.25932       8.36611    
  61  0.387431     -0.948219     -0.289125      0.289125       8.32654       8.61566    
  62  0.447312     -0.804500     -0.245304      0.245304       8.08186       8.32716    
  63  0.842599     -0.171264     -0.522207E-01  0.522207E-01   8.10859       8.16081    
  64  0.754683     -0.281457     -0.858203E-01  0.858203E-01   8.74604       8.83186    
  65  0.160341      -1.83045     -0.558131      0.558131       8.13016       8.68829    
  66  0.388561     -0.945304     -0.288237      0.288237       8.11238       8.40061    
  67  0.504240     -0.684704     -0.208776      0.208776       8.04862       8.25739    
  68  0.340326      -1.07785     -0.328652      0.328652       8.55969       8.88834    
  69  0.995948     -0.406008E-02 -0.123798E-02  0.123798E-02   8.20747       8.20871    
  70  0.822310     -0.195638     -0.596527E-01  0.596527E-01   8.07625       8.13590    
loop,thermsimp(1:2)        2  0.453917      0.973567E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    328          8.04          0.86          1.13         24.43          0.06          0.05         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    329          8.17          0.86          1.13         24.30          0.07          0.05         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        2
neval is:      328
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        2      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        3
neval is:      328


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      328     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.415533     -0.878194     -0.267774      0.267774       8.00020       8.26797    
   2  0.117190E-02  -6.74913      -2.05791       2.05791       8.06529       10.1232    
   3  0.432199     -0.838870     -0.255783      0.255783       7.98780       8.24358    
   4  0.466381     -0.762753     -0.232574      0.232574       8.05853       8.29110    
   5  0.696685     -0.361422     -0.110203      0.110203       8.09862       8.20883    
   6  0.193714      -1.64137     -0.500477      0.500477       8.06657       8.56705    
   7  0.535145     -0.625217     -0.190638      0.190638       8.06810       8.25874    
   8  0.812984     -0.207044     -0.631308E-01  0.631308E-01   8.09754       8.16067    
   9  0.956789     -0.441723E-01 -0.134688E-01  0.134688E-01   8.11412       8.12759    
  10  0.496711E-01  -3.00233     -0.915454      0.915454       8.04755       8.96300    
  11  0.206308E-01  -3.88097      -1.18336       1.18336       8.09568       9.27904    
  12  0.423434     -0.859358     -0.262031      0.262031       8.02849       8.29052    
  13  0.216826      -1.52866     -0.466110      0.466110       8.07625       8.54236    
  14  0.792422     -0.232661     -0.709418E-01  0.709418E-01   8.03863       8.10957    
  15  0.265940      -1.32449     -0.403855      0.403855       8.11654       8.52039    
  16  0.993400     -0.662201E-02 -0.201915E-02  0.201915E-02   8.10859       8.11061    
  17  0.645200E-01  -2.74078     -0.835703      0.835703       8.07850       8.91420    
  18  0.651527     -0.428436     -0.130636      0.130636       8.17237       8.30301    
  19  0.858875     -0.152131     -0.463870E-01  0.463870E-01   8.10246       8.14884    
  20  0.126056      -2.07103     -0.631485      0.631485       8.09327       8.72475    
  21  0.772661E-01  -2.56050     -0.780733      0.780733       8.07742       8.85815    
  22  0.441429     -0.817737     -0.249340      0.249340       8.20747       8.45681    
  23  0.166586      -1.79224     -0.546480      0.546480       8.08698       8.63346    
  24  0.217490      -1.52560     -0.465179      0.465179       8.06856       8.53374    
  25  0.632871     -0.457488     -0.139495      0.139495       8.16632       8.30581    
  26  0.201694      -1.60100     -0.488169      0.488169       8.14409       8.63226    
  27  0.282690      -1.26341     -0.385231      0.385231       8.07678       8.46201    
  28  0.255086E-01  -3.66874      -1.11865       1.11865       8.04862       9.16727    
  29  0.562308     -0.575706     -0.175541      0.175541       8.05256       8.22810    
  30  0.283366E-01  -3.56360      -1.08659       1.08659       8.04889       9.13549    
  31  0.404254E-01  -3.20830     -0.978255      0.978255       8.11627       9.09452    
  32  0.170475      -1.76917     -0.539445      0.539445       8.09236       8.63180    
  33  0.141712      -1.95396     -0.595789      0.595789       8.12070       8.71649    
  34  0.773173     -0.257253     -0.784400E-01  0.784400E-01   8.03442       8.11286    
  35  0.255978      -1.36266     -0.415496      0.415496       8.08186       8.49736    
  36  0.823739     -0.193902     -0.591234E-01  0.591234E-01   8.06063       8.11975    
  37  0.166307      -1.79392     -0.546992      0.546992       8.25932       8.80631    
  38  0.676319     -0.391090     -0.119249      0.119249       8.09048       8.20973    
  39  0.144546      -1.93416     -0.589753      0.589753       8.11238       8.70213    
  40  0.593436     -0.521826     -0.159112      0.159112       8.15194       8.31105    
  41  0.762921     -0.270600     -0.825099E-01  0.825099E-01   8.10547       8.18798    
  42  0.855796     -0.155724     -0.474824E-01  0.474824E-01   8.24674       8.29422    
  43  0.433555     -0.835737     -0.254828      0.254828       8.08733       8.34215    
  44  0.252891      -1.37480     -0.419195      0.419195       8.03963       8.45882    
  45  0.942909     -0.587850E-01 -0.179244E-01  0.179244E-01   8.06512       8.08305    
  46  0.432313     -0.838605     -0.255703      0.255703       8.17975       8.43545    
  47  0.975713     -0.245869E-01 -0.749690E-02  0.749690E-02   8.04995       8.05745    
  48  0.541226     -0.613919     -0.187193      0.187193       8.10077       8.28796    
  49  0.255057      -1.36627     -0.416595      0.416595       8.10765       8.52424    
  50  0.202141      -1.59879     -0.487493      0.487493       8.07112       8.55861    
  51  0.949562     -0.517549E-01 -0.157808E-01  0.157808E-01   8.09118       8.10696    
  52  0.255660E-01  -3.66649      -1.11797       1.11797       8.09541       9.21338    
  53  0.306802      -1.18155     -0.360272      0.360272       8.32654       8.68681    
  54  0.243277E-01  -3.71614      -1.13310       1.13310       8.06856       9.20166    
  55  0.466793     -0.761870     -0.232305      0.232305       8.08776       8.32006    
  56  0.200407      -1.60740     -0.490120      0.490120       8.15023       8.64035    
  57  0.282970      -1.26241     -0.384928      0.384928       8.01090       8.39583    
  58  0.214232      -1.54069     -0.469780      0.469780       8.13016       8.59994    
  59  0.326606      -1.11900     -0.341200      0.341200       8.06114       8.40234    
  60  0.997507     -0.249621E-02 -0.761130E-03  0.761130E-03   8.32632       8.32708    
  61  0.426725     -0.851615     -0.259670      0.259670       8.15873       8.41840    
  62  0.862854     -0.147510     -0.449780E-01  0.449780E-01   8.06750       8.11248    
  63  0.737079     -0.305061     -0.930173E-01  0.930173E-01   8.74604       8.83906    
  64  0.976691     -0.235846E-01 -0.719128E-02  0.719128E-02   8.55969       8.56688    
  65  0.191821      -1.65119     -0.503472      0.503472       7.99049       8.49396    
  66  0.743386     -0.296540     -0.904194E-01  0.904194E-01   8.40865       8.49907    
  67  0.683162     -0.381024     -0.116180      0.116180       8.24941       8.36559    
  68  0.789040     -0.236939     -0.722460E-01  0.722460E-01   8.18731       8.25955    
  69  0.908546     -0.959094E-01 -0.292442E-01  0.292442E-01   8.18610       8.21535    
  70  0.562283     -0.575750     -0.175554      0.175554       8.04015       8.21571    
loop,thermsimp(1:2)        3  0.267774       2.05791    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    330          8.08          0.86          1.13         24.44          0.08          0.05         26.57
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    331          8.44          0.86          1.13         24.48          0.11          0.05         26.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        3
neval is:      330
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        3      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        4
neval is:      330


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      330     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.656626     -0.420640     -0.128259      0.128259       8.04995       8.17821    
   2  0.880966     -0.126736     -0.386436E-01  0.386436E-01   8.06512       8.10377    
   3  0.854972     -0.156687     -0.477761E-01  0.477761E-01   8.09118       8.13896    
   4  0.797101     -0.226774     -0.691467E-01  0.691467E-01   8.03863       8.10777    
   5  0.158477      -1.84214     -0.561696      0.561696       8.10859       8.67029    
   6  0.593839     -0.521148     -0.158905      0.158905       8.06750       8.22641    
   7  0.817101     -0.201993     -0.615905E-01  0.615905E-01   8.03442       8.09601    
   8  0.997190     -0.281377E-02 -0.857958E-03  0.857958E-03   8.06063       8.06149    
   9  0.402857     -0.909174     -0.277220      0.277220       8.11412       8.39134    
  10  0.690455     -0.370405     -0.112942      0.112942       8.10246       8.21540    
  11  0.609635     -0.494895     -0.150901      0.150901       8.09754       8.24844    
  12  0.491117     -0.711073     -0.216816      0.216816       8.10547       8.32229    
  13  0.990676     -0.936814E-02 -0.285648E-02  0.285648E-02   8.09862       8.10148    
  14  0.976919     -0.233519E-01 -0.712033E-02  0.712033E-02   8.09048       8.09760    
  15  0.692556     -0.367366     -0.112015      0.112015       8.18610       8.29812    
  16  0.549694     -0.598394     -0.182459      0.182459       8.04015       8.22261    
  17  0.538267E-01  -2.92199     -0.890955      0.890955       8.05256       8.94351    
  18  0.602193     -0.507178     -0.154646      0.154646       7.98780       8.14245    
  19  0.537276     -0.621243     -0.189426      0.189426       8.06810       8.25753    
  20  0.338220      -1.08406     -0.330545      0.330545       8.18731       8.51785    
  21  0.306772      -1.18165     -0.360303      0.360303       8.00020       8.36050    
  22  0.895389     -0.110497     -0.336923E-01  0.336923E-01   8.10077       8.13446    
  23  0.120096      -2.11946     -0.646254      0.646254       8.02849       8.67474    
  24  0.680166     -0.385418     -0.117519      0.117519       8.05853       8.17605    
  25  0.369434     -0.995782     -0.303628      0.303628       8.24674       8.55036    
  26  0.235484      -1.44611     -0.440940      0.440940       8.17237       8.61331    
  27  0.260836      -1.34386     -0.409763      0.409763       8.16632       8.57608    
  28  0.720259     -0.328144     -0.100056      0.100056       8.15194       8.25200    
  29  0.695069     -0.363744     -0.110911      0.110911       8.08776       8.19867    
  30  0.105076      -2.25307     -0.686995      0.686995       8.32632       9.01331    
  31  0.968349     -0.321628E-01 -0.980690E-02  0.980690E-02   8.08733       8.09713    
  32  0.974131     -0.262091E-01 -0.799153E-02  0.799153E-02   8.24941       8.25740    
  33  0.647785E-01  -2.73678     -0.834484      0.834484       8.01090       8.84538    
  34  0.910402     -0.938690E-01 -0.286220E-01  0.286220E-01   8.06114       8.08976    
  35  0.488733     -0.715939     -0.218300      0.218300       8.15873       8.37703    
  36  0.377436E-01  -3.27694     -0.999186      0.999186       8.17975       9.17893    
  37  0.154608      -1.86686     -0.569233      0.569233       8.20747       8.77670    
  38  0.277804      -1.28084     -0.390546      0.390546       8.03963       8.43017    
  39  0.969547     -0.309263E-01 -0.942987E-02  0.942987E-02   8.07678       8.08621    
  40  0.380083     -0.967367     -0.294964      0.294964       7.99049       8.28545    
  41  0.751822     -0.285256     -0.869786E-01  0.869786E-01   8.08186       8.16884    
  42  0.137692      -1.98274     -0.604565      0.604565       8.40865       9.01322    
  43  0.293470      -1.22598     -0.373819      0.373819       8.11654       8.49036    
  44  0.433705     -0.835390     -0.254722      0.254722       8.10765       8.36237    
  45  0.418034     -0.872194     -0.265944      0.265944       8.06856       8.33450    
  46  0.166728      -1.79139     -0.546222      0.546222       8.07625       8.62247    
  47  0.921960     -0.812537E-01 -0.247754E-01  0.247754E-01   8.07112       8.09590    
  48  0.412601     -0.885275     -0.269933      0.269933       8.55969       8.82962    
  49  0.925181     -0.777655E-01 -0.237118E-01  0.237118E-01   8.06657       8.09029    
  50  0.687711     -0.374386     -0.114156      0.114156       8.13016       8.24432    
  51  0.729890     -0.314862     -0.960060E-01  0.960060E-01   8.09236       8.18836    
  52  0.355028      -1.03556     -0.315757      0.315757       8.14409       8.45985    
  53  0.123338      -2.09283     -0.638134      0.638134       8.08698       8.72511    
  54  0.638370E-01  -2.75142     -0.838948      0.838948       8.15023       8.98918    
  55  0.379414     -0.969128     -0.295501      0.295501       8.32654       8.62204    
  56  0.643705     -0.440515     -0.134319      0.134319       8.11238       8.24670    
  57  0.172292      -1.75856     -0.536211      0.536211       8.12070       8.65691    
  58  0.996763     -0.324212E-02 -0.988568E-03  0.988568E-03   8.09327       8.09426    
  59  0.606366     -0.500272     -0.152540      0.152540       8.25932       8.41186    
  60  0.299698      -1.20498     -0.367416      0.367416       8.74604       9.11345    
  61  0.723907E-02  -4.92826      -1.50270       1.50270       8.07742       9.58012    
  62  0.197118      -1.62395     -0.495166      0.495166       8.07850       8.57367    
  63  0.316130      -1.15160     -0.351140      0.351140       8.04755       8.39869    
  64  0.115913      -2.15492     -0.657066      0.657066       8.11627       8.77333    
  65  0.661756     -0.412859     -0.125887      0.125887       8.04889       8.17478    
  66  0.838437     -0.176215     -0.537306E-01  0.537306E-01   8.04862       8.10235    
  67  0.929092     -0.735473E-01 -0.224256E-01  0.224256E-01   8.06856       8.09098    
  68  0.167251      -1.78826     -0.545267      0.545267       8.09541       8.64068    
  69  0.174207      -1.74751     -0.532842      0.532842       8.09568       8.62852    
  70  0.506799     -0.679641     -0.207232      0.207232       8.08464       8.29187    
loop,thermsimp(1:2)        4  0.128259      0.386436E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    332          8.12          0.87          1.12         24.45          0.12          0.05         26.62
Just calling func    0   0         26.61


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    333          8.65          0.86          1.13         24.29          0.09          0.05         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        4
neval is:      332
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        4      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        5
neval is:      332


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      332     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.630229     -0.461672     -0.140770      0.140770       8.06063       8.20140    
   2  0.876370     -0.131967     -0.402386E-01  0.402386E-01   8.07678       8.11702    
   3  0.840080     -0.174259     -0.531340E-01  0.531340E-01   8.06114       8.11427    
   4  0.608986E-01  -2.79854     -0.853316      0.853316       8.06657       8.91989    
   5  0.311901      -1.16507     -0.355246      0.355246       8.06856       8.42380    
   6  0.937552E-01  -2.36707     -0.721753      0.721753       8.09327       8.81502    
   7  0.608418     -0.496893     -0.151510      0.151510       8.07112       8.22263    
   8  0.297707      -1.21164     -0.369448      0.369448       8.03442       8.40387    
   9  0.365777      -1.00573     -0.306662      0.306662       8.08733       8.39399    
  10  0.194673      -1.63643     -0.498972      0.498972       8.09048       8.58945    
  11  0.941388     -0.604003E-01 -0.184169E-01  0.184169E-01   8.09862       8.11704    
  12  0.984881     -0.152343E-01 -0.464515E-02  0.464515E-02   8.04862       8.05326    
  13  0.750245     -0.287355     -0.876186E-01  0.876186E-01   8.06512       8.15274    
  14  0.437446     -0.826803     -0.252104      0.252104       8.03863       8.29073    
  15  0.174754      -1.74437     -0.531885      0.531885       8.10077       8.63266    
  16  0.300465E-01  -3.50501      -1.06873       1.06873       8.09118       9.15991    
  17  0.372924     -0.986380     -0.300761      0.300761       7.98780       8.28856    
  18  0.803506     -0.218771     -0.667064E-01  0.667064E-01   8.08186       8.14857    
  19  0.232583      -1.45851     -0.444720      0.444720       8.04889       8.49362    
  20  0.383368     -0.958759     -0.292339      0.292339       8.05853       8.35087    
  21  0.622786     -0.473552     -0.144393      0.144393       8.04995       8.19434    
  22  0.356422      -1.03164     -0.314562      0.314562       8.09236       8.40692    
  23  0.919964     -0.834212E-01 -0.254363E-01  0.254363E-01   8.08776       8.11319    
  24  0.550740     -0.596492     -0.181879      0.181879       8.10246       8.28434    
  25  0.402627     -0.909745     -0.277394      0.277394       8.04015       8.31755    
  26  0.256265      -1.36154     -0.415154      0.415154       8.06750       8.48266    
  27  0.763510     -0.269828     -0.822746E-01  0.822746E-01   8.13016       8.21244    
  28  0.388963     -0.944271     -0.287922      0.287922       8.11238       8.40030    
  29  0.981923     -0.182423E-01 -0.556234E-02  0.556234E-02   8.09754       8.10310    
  30  0.656629     -0.420635     -0.128258      0.128258       8.15194       8.28020    
  31  0.932472     -0.699161E-01 -0.213184E-01  0.213184E-01   8.24941       8.27073    
  32  0.336775      -1.08834     -0.331851      0.331851       8.06810       8.39995    
  33  0.810758     -0.209786     -0.639667E-01  0.639667E-01   7.99049       8.05445    
  34  0.557014     -0.585166     -0.178425      0.178425       8.08464       8.26306    
  35  0.652747     -0.426565     -0.130066      0.130066       8.18610       8.31617    
  36  0.890774     -0.115665     -0.352678E-01  0.352678E-01   8.10547       8.14074    
  37  0.703035     -0.352349     -0.107436      0.107436       8.06856       8.17599    
  38  0.534296     -0.626805     -0.191122      0.191122       8.00020       8.19132    
  39  0.604162     -0.503914     -0.153650      0.153650       8.10765       8.26130    
  40  0.545557     -0.605948     -0.184762      0.184762       8.15873       8.34350    
  41  0.371346     -0.990620     -0.302054      0.302054       8.11412       8.41618    
  42  0.491801     -0.709680     -0.216392      0.216392       8.04755       8.26394    
  43  0.879731     -0.128139     -0.390715E-01  0.390715E-01   8.25932       8.29839    
  44  0.995113     -0.489866E-02 -0.149367E-02  0.149367E-02   8.03963       8.04112    
  45  0.467927     -0.759444     -0.231565      0.231565       8.14409       8.37566    
  46  0.355083      -1.03540     -0.315709      0.315709       8.11654       8.43225    
  47  0.216960      -1.52804     -0.465922      0.465922       8.18731       8.65323    
  48  0.276988      -1.28378     -0.391443      0.391443       8.24674       8.63818    
  49  0.905458     -0.993144E-01 -0.302824E-01  0.302824E-01   8.07850       8.10878    
  50  0.704241     -0.350635     -0.106914      0.106914       8.16632       8.27323    
  51  0.784564     -0.242627     -0.739806E-01  0.739806E-01   8.17237       8.24635    
  52  0.329376      -1.11055     -0.338624      0.338624       8.32654       8.66516    
  53  0.845894     -0.167361     -0.510307E-01  0.510307E-01   8.07625       8.12728    
  54  0.645172     -0.438238     -0.133625      0.133625       8.09568       8.22930    
  55  0.279949      -1.27315     -0.388201      0.388201       8.09541       8.48361    
  56  0.149089      -1.90321     -0.580317      0.580317       8.12070       8.70101    
  57  0.887681     -0.119143     -0.363283E-01  0.363283E-01   8.10859       8.14492    
  58  0.582426     -0.540553     -0.164822      0.164822       8.02849       8.19331    
  59  0.221293      -1.50827     -0.459892      0.459892       8.08698       8.54687    
  60  0.839449     -0.175010     -0.533630E-01  0.533630E-01   8.11627       8.16963    
  61  0.383721     -0.957840     -0.292059      0.292059       8.20747       8.49953    
  62  0.933136     -0.692040E-01 -0.211013E-01  0.211013E-01   8.55969       8.58079    
  63  0.148663      -1.90607     -0.581190      0.581190       8.01090       8.59209    
  64  0.788780     -0.237267     -0.723462E-01  0.723462E-01   8.05256       8.12490    
  65  0.948785     -0.525734E-01 -0.160304E-01  0.160304E-01   8.15023       8.16626    
  66  0.246696      -1.39960     -0.426758      0.426758       8.40865       8.83541    
  67  0.297902      -1.21099     -0.369248      0.369248       8.32632       8.69557    
  68  0.402979     -0.908870     -0.277127      0.277127       8.74604       9.02317    
  69  0.946008     -0.555038E-01 -0.169239E-01  0.169239E-01   8.17975       8.19667    
  70  0.182802      -1.69935     -0.518157      0.518157       8.11561       8.63377    
loop,thermsimp(1:2)        5  0.140770      0.402386E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    334          8.12          0.86          1.12         24.36          0.09          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    335          8.58          0.86          1.13         24.32          0.09          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        5
neval is:      334
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        5      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        6
neval is:      334


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      334     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.215976      -1.53259     -0.467308      0.467308       8.03963       8.50694    
   2  0.942431     -0.592928E-01 -0.180792E-01  0.180792E-01   8.04862       8.06670    
   3  0.193824      -1.64081     -0.500305      0.500305       7.99049       8.49079    
   4  0.162512      -1.81700     -0.554031      0.554031       8.09754       8.65157    
   5  0.625243     -0.469616     -0.143193      0.143193       8.07850       8.22169    
   6  0.499178     -0.694793     -0.211852      0.211852       8.08776       8.29961    
   7  0.706095     -0.348006     -0.106112      0.106112       8.06114       8.16725    
   8  0.527414     -0.639770     -0.195075      0.195075       8.07678       8.27186    
   9  0.575748     -0.552085     -0.168339      0.168339       8.09862       8.26696    
  10  0.490522     -0.712286     -0.217186      0.217186       8.05256       8.26974    
  11  0.306517      -1.18248     -0.360556      0.360556       8.07625       8.43681    
  12  0.798470     -0.225057     -0.686232E-01  0.686232E-01   8.10547       8.17410    
  13  0.333550      -1.09796     -0.334785      0.334785       8.10859       8.44338    
  14  0.166731      -1.79138     -0.546216      0.546216       8.08186       8.62808    
  15  0.443580     -0.812878     -0.247858      0.247858       8.06512       8.31298    
  16  0.669985     -0.400500     -0.122118      0.122118       8.15023       8.27235    
  17  0.339921      -1.07904     -0.329015      0.329015       8.11627       8.44528    
  18  0.201260      -1.60316     -0.488826      0.488826       8.06856       8.55738    
  19  0.772250     -0.258447     -0.788041E-01  0.788041E-01   8.00020       8.07900    
  20  0.401372E-01  -3.21545     -0.980437      0.980437       8.02849       9.00893    
  21  0.940962     -0.608526E-01 -0.185548E-01  0.185548E-01   8.04995       8.06850    
  22  0.115324      -2.16001     -0.658619      0.658619       8.17975       8.83836    
  23  0.939991E-01  -2.36447     -0.720961      0.720961       8.06063       8.78159    
  24  0.412221     -0.886196     -0.270214      0.270214       8.13016       8.40038    
  25  0.136462      -1.99171     -0.607301      0.607301       8.07112       8.67842    
  26  0.310095      -1.17088     -0.357017      0.357017       8.09568       8.45270    
  27  0.985727     -0.143755E-01 -0.438329E-02  0.438329E-02   8.17237       8.17676    
  28  0.900161     -0.105182     -0.320714E-01  0.320714E-01   8.10765       8.13972    
  29  0.250220      -1.38542     -0.422433      0.422433       8.08464       8.50707    
  30  0.780405     -0.247942     -0.756011E-01  0.756011E-01   8.04755       8.12315    
  31  0.228719      -1.47526     -0.449828      0.449828       8.24941       8.69924    
  32  0.407088     -0.898727     -0.274035      0.274035       8.16632       8.44035    
  33  0.975627     -0.246749E-01 -0.752374E-02  0.752374E-02   8.15194       8.15946    
  34  0.885140     -0.122009     -0.372024E-01  0.372024E-01   8.10246       8.13966    
  35  0.896135     -0.109664     -0.334382E-01  0.334382E-01   7.98780       8.02124    
  36  0.856661     -0.154713     -0.471743E-01  0.471743E-01   8.03863       8.08580    
  37  0.258643      -1.35231     -0.412338      0.412338       8.25932       8.67166    
  38  0.336283      -1.08980     -0.332296      0.332296       8.18610       8.51840    
  39  0.868205     -0.141327     -0.430926E-01  0.430926E-01   8.04015       8.08324    
  40  0.937935     -0.640747E-01 -0.195373E-01  0.195373E-01   8.15873       8.17827    
  41  0.418906     -0.870109     -0.265309      0.265309       8.05853       8.32384    
  42  0.351040      -1.04685     -0.319201      0.319201       8.14409       8.46329    
  43  0.611628E-01  -2.79422     -0.851997      0.851997       8.08733       8.93932    
  44  0.153518      -1.87394     -0.571391      0.571391       8.06810       8.63949    
  45  0.938341     -0.636423E-01 -0.194055E-01  0.194055E-01   8.11238       8.13178    
  46  0.598133     -0.513942     -0.156708      0.156708       8.03442       8.19113    
  47  0.795771     -0.228444     -0.696559E-01  0.696559E-01   8.09236       8.16201    
  48  0.295375      -1.21951     -0.371846      0.371846       8.11412       8.48597    
  49  0.804738     -0.217239     -0.662393E-01  0.662393E-01   8.06856       8.13480    
  50  0.260094      -1.34671     -0.410632      0.410632       8.11654       8.52717    
  51  0.640517     -0.445479     -0.135833      0.135833       8.06750       8.20334    
  52  0.221872      -1.50566     -0.459096      0.459096       8.09541       8.55451    
  53  0.837141     -0.177762     -0.542023E-01  0.542023E-01   8.04889       8.10310    
  54  0.212745      -1.54766     -0.471904      0.471904       8.20747       8.67937    
  55  0.162033      -1.81996     -0.554931      0.554931       8.08698       8.64191    
  56  0.631631     -0.459450     -0.140093      0.140093       8.55969       8.69978    
  57  0.816014E-01  -2.50591     -0.764087      0.764087       8.09048       8.85456    
  58  0.754954     -0.281099     -0.857111E-01  0.857111E-01   8.01090       8.09661    
  59  0.568761E-01  -2.86688     -0.874153      0.874153       8.10077       8.97492    
  60  0.610521     -0.493442     -0.150458      0.150458       8.11561       8.26607    
  61  0.691718     -0.368577     -0.112384      0.112384       8.24674       8.35912    
  62  0.330677      -1.10661     -0.337422      0.337422       8.18731       8.52473    
  63  0.669260     -0.401583     -0.122448      0.122448       8.32654       8.44899    
  64  0.677208     -0.389776     -0.118848      0.118848       8.32632       8.44517    
  65  0.440183     -0.820565     -0.250202      0.250202       8.12070       8.37090    
  66  0.258089      -1.35445     -0.412991      0.412991       8.09327       8.50626    
  67  0.109764      -2.20942     -0.673684      0.673684       8.40865       9.08234    
  68  0.440932     -0.818865     -0.249684      0.249684       8.06657       8.31626    
  69  0.361307      -1.01803     -0.310411      0.310411       8.74604       9.05645    
  70  0.304201      -1.19007     -0.362868      0.362868       8.11713       8.47999    
loop,thermsimp(1:2)        6  0.467308      0.180792E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    336          8.07          0.86          1.13         24.30          0.10          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    337          8.44          0.87          1.13         24.69          0.10          0.05         26.83
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        6
neval is:      336
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        6      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        7
neval is:      336


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      336     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.264215      -1.33099     -0.405839      0.405839       7.98780       8.39364    
   2  0.401807     -0.911784     -0.278016      0.278016       8.04862       8.32663    
   3  0.418885     -0.870159     -0.265324      0.265324       8.04995       8.31527    
   4  0.753378     -0.283189     -0.863483E-01  0.863483E-01   8.00020       8.08655    
   5  0.792066     -0.233111     -0.710789E-01  0.710789E-01   8.04015       8.11123    
   6  0.868474     -0.141017     -0.429981E-01  0.429981E-01   8.03863       8.08163    
   7  0.318670      -1.14360     -0.348699      0.348699       8.01090       8.35960    
   8  0.863267     -0.147031     -0.448318E-01  0.448318E-01   8.04889       8.09373    
   9  0.589255     -0.528896     -0.161268      0.161268       8.04755       8.20882    
  10  0.632079E-01  -2.76133     -0.841968      0.841968       8.11238       8.95434    
  11  0.992270     -0.775975E-02 -0.236606E-02  0.236606E-02   8.06856       8.07092    
  12  0.466140     -0.763269     -0.232732      0.232732       8.10246       8.33519    
  13  0.177509      -1.72873     -0.527115      0.527115       8.10765       8.63476    
  14  0.933326     -0.690005E-01 -0.210393E-01  0.210393E-01   8.15194       8.17298    
  15  0.876357     -0.131982     -0.402431E-01  0.402431E-01   8.09236       8.13260    
  16  0.673496     -0.395274     -0.120525      0.120525       8.06114       8.18167    
  17  0.648708     -0.432773     -0.131959      0.131959       8.10547       8.23743    
  18  0.400813     -0.914259     -0.278771      0.278771       8.17237       8.45114    
  19  0.763164     -0.270282     -0.824129E-01  0.824129E-01   8.15873       8.24115    
  20  0.196240      -1.62842     -0.496528      0.496528       8.03442       8.53095    
  21  0.923666     -0.794046E-01 -0.242116E-01  0.242116E-01   8.06750       8.09171    
  22  0.999600     -0.400298E-03 -0.122056E-03  0.122056E-03   8.07850       8.07862    
  23  0.379715     -0.968335     -0.295259      0.295259       8.11561       8.41087    
  24  0.197375      -1.62265     -0.494769      0.494769       8.09862       8.59339    
  25  0.760736     -0.273468     -0.833845E-01  0.833845E-01   8.05256       8.13594    
  26  0.392182     -0.936030     -0.285409      0.285409       8.07678       8.36219    
  27  0.256208      -1.36177     -0.415222      0.415222       8.15023       8.56546    
  28  0.251796      -1.37914     -0.420518      0.420518       8.08776       8.50827    
  29  0.332089E-01  -3.40494      -1.03821       1.03821       8.06512       9.10334    
  30  0.970457     -0.299883E-01 -0.914387E-02  0.914387E-02   8.06657       8.07572    
  31  0.467370E-01  -3.06322     -0.934019      0.934019       8.05853       8.99255    
  32  0.716125     -0.333901     -0.101811      0.101811       8.24674       8.34855    
  33  0.757897     -0.277208     -0.845246E-01  0.845246E-01   8.12070       8.20522    
  34  0.765628     -0.267059     -0.814302E-01  0.814302E-01   8.13016       8.21159    
  35  0.323816      -1.12758     -0.343816      0.343816       8.07625       8.42007    
  36  0.909845     -0.944807E-01 -0.288085E-01  0.288085E-01   8.16632       8.19513    
  37  0.515782     -0.662071     -0.201875      0.201875       8.10859       8.31047    
  38  0.464370     -0.767074     -0.233892      0.233892       8.32632       8.56021    
  39  0.445707     -0.808094     -0.246400      0.246400       8.11627       8.36267    
  40  0.786320     -0.240391     -0.732988E-01  0.732988E-01   8.32654       8.39984    
  41  0.631860     -0.459087     -0.139982      0.139982       8.09568       8.23566    
  42  0.672488     -0.396772     -0.120981      0.120981       8.14409       8.26507    
  43  0.251717E-02  -5.98462      -1.82480       1.82480       8.11713       9.94192    
  44  0.245023      -1.40640     -0.428833      0.428833       8.11412       8.54296    
  45  0.252688      -1.37560     -0.419440      0.419440       7.99049       8.40993    
  46  0.268946      -1.31324     -0.400427      0.400427       8.09327       8.49369    
  47  0.550357     -0.597189     -0.182091      0.182091       8.03963       8.22172    
  48  0.826205     -0.190912     -0.582118E-01  0.582118E-01   8.08464       8.14285    
  49  0.964276     -0.363780E-01 -0.110922E-01  0.110922E-01   8.18610       8.19719    
  50  0.415479     -0.878324     -0.267814      0.267814       8.18731       8.45512    
  51  0.599143E-01  -2.81484     -0.858285      0.858285       8.11654       8.97482    
  52  0.348555      -1.05396     -0.321367      0.321367       8.09541       8.41678    
  53  0.243819      -1.41133     -0.430335      0.430335       8.06856       8.49889    
  54  0.233297      -1.45544     -0.443786      0.443786       8.08186       8.52565    
  55  0.705284     -0.349155     -0.106462      0.106462       8.06810       8.17456    
  56  0.258436      -1.35311     -0.412582      0.412582       8.08698       8.49956    
  57  0.328631      -1.11282     -0.339315      0.339315       8.09754       8.43685    
  58  0.676481     -0.390852     -0.119176      0.119176       8.25932       8.37850    
  59  0.784590     -0.242594     -0.739703E-01  0.739703E-01   8.07112       8.14509    
  60  0.546419E-01  -2.90695     -0.886372      0.886372       8.20747       9.09384    
  61  0.507256     -0.678740     -0.206958      0.206958       8.24941       8.45637    
  62  0.980797     -0.193899E-01 -0.591226E-02  0.591226E-02   8.55969       8.56560    
  63  0.193856      -1.64064     -0.500255      0.500255       8.06063       8.56088    
  64  0.101492      -2.28777     -0.697574      0.697574       8.17975       8.87732    
  65  0.245844E-01  -3.70564      -1.12990       1.12990       8.09048       9.22038    
  66  0.610050     -0.494214     -0.150693      0.150693       8.08733       8.23802    
  67  0.373100E-01  -3.28849      -1.00271       1.00271       8.10077       9.10348    
  68  0.476763     -0.740736     -0.225861      0.225861       8.02849       8.25435    
  69  0.412657     -0.885139     -0.269892      0.269892       8.74604       9.01593    
  70  0.580580     -0.543727     -0.165790      0.165790       8.06697       8.23276    
loop,thermsimp(1:2)        7  0.405839      0.278016    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    338          8.08          0.86          1.13         24.49          0.09          0.05         26.62
Just calling func    0   0         26.62


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    339          8.30          0.87          1.13         24.43          0.03          0.05         26.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.08
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        7
neval is:      338
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        7      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        8
neval is:      338


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      338     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.105813      -2.24608     -0.684863      0.684863       8.06856       8.75342    
   2  0.476819     -0.740619     -0.225825      0.225825       8.06657       8.29240    
   3  0.564430     -0.571938     -0.174392      0.174392       8.07850       8.25289    
   4  0.211741      -1.55239     -0.473347      0.473347       8.03863       8.51197    
   5  0.154226E-01  -4.17192      -1.27208       1.27208       8.00020       9.27228    
   6  0.489577     -0.714213     -0.217774      0.217774       8.06750       8.28528    
   7  0.583965     -0.537914     -0.164018      0.164018       8.04889       8.21291    
   8  0.430258     -0.843370     -0.257156      0.257156       8.04015       8.29731    
   9  0.280982      -1.26946     -0.387078      0.387078       8.09236       8.47943    
  10  0.535183     -0.625146     -0.190616      0.190616       8.05256       8.24317    
  11  0.306750      -1.18172     -0.360324      0.360324       8.08464       8.44496    
  12  0.924930     -0.780370E-01 -0.237946E-01  0.237946E-01   8.07112       8.09492    
  13  0.829670E-01  -2.48931     -0.759027      0.759027       8.15194       8.91097    
  14  0.330275      -1.10783     -0.337793      0.337793       8.06810       8.40589    
  15  0.229751      -1.47076     -0.448456      0.448456       8.06114       8.50960    
  16  0.455737     -0.785839     -0.239614      0.239614       8.16632       8.40593    
  17  0.830949     -0.185187     -0.564663E-01  0.564663E-01   8.18610       8.24257    
  18  0.148624      -1.90634     -0.581270      0.581270       8.12070       8.70197    
  19  0.883001     -0.124429     -0.379403E-01  0.379403E-01   8.04755       8.08549    
  20  0.668001     -0.403466     -0.123022      0.123022       8.13016       8.25319    
  21  0.610583     -0.493341     -0.150427      0.150427       8.03963       8.19005    
  22  0.689050     -0.372441     -0.113563      0.113563       8.06697       8.18053    
  23  0.124417      -2.08412     -0.635477      0.635477       8.09568       8.73116    
  24  0.785584E-01  -2.54391     -0.775676      0.775676       8.10547       8.88115    
  25  0.936565     -0.655366E-01 -0.199830E-01  0.199830E-01   8.08733       8.10731    
  26  0.483719     -0.726252     -0.221445      0.221445       8.15873       8.38018    
  27  0.715685     -0.334515     -0.101999      0.101999       8.02849       8.13049    
  28  0.786437     -0.240243     -0.732535E-01  0.732535E-01   8.14409       8.21735    
  29  0.361023      -1.01881     -0.310651      0.310651       8.10859       8.41924    
  30  0.325559      -1.12221     -0.342178      0.342178       8.04995       8.39213    
  31  0.850460     -0.161978     -0.493894E-01  0.493894E-01   8.04862       8.09801    
  32  0.301358      -1.19946     -0.365732      0.365732       8.10246       8.46819    
  33  0.304725      -1.18834     -0.362343      0.362343       8.24674       8.60908    
  34  0.887065     -0.119838     -0.365402E-01  0.365402E-01   8.01090       8.04744    
  35  0.762822     -0.270730     -0.825495E-01  0.825495E-01   8.07678       8.15933    
  36  0.364130      -1.01024     -0.308038      0.308038       8.11627       8.42431    
  37  0.762041     -0.271754     -0.828618E-01  0.828618E-01   8.25932       8.34218    
  38  0.941180     -0.606207E-01 -0.184841E-01  0.184841E-01   7.98780       8.00628    
  39  0.449403     -0.799835     -0.243881      0.243881       8.32654       8.57042    
  40  0.743855     -0.295910     -0.902271E-01  0.902271E-01   7.99049       8.08071    
  41  0.743104     -0.296920     -0.905351E-01  0.905351E-01   8.11561       8.20615    
  42  0.350527      -1.04832     -0.319647      0.319647       8.09541       8.41506    
  43  0.607240     -0.498831     -0.152101      0.152101       8.07625       8.22835    
  44  0.557347     -0.584567     -0.178243      0.178243       8.09754       8.27578    
  45  0.217970      -1.52340     -0.464506      0.464506       8.17237       8.63688    
  46  0.364570      -1.00904     -0.307669      0.307669       8.18731       8.49498    
  47  0.330900      -1.10594     -0.337217      0.337217       8.24941       8.58663    
  48  0.861127     -0.149514     -0.455889E-01  0.455889E-01   8.09327       8.13886    
  49  0.710764E-01  -2.64400     -0.806193      0.806193       8.06856       8.87475    
  50  0.264543      -1.32975     -0.405460      0.405460       8.08698       8.49244    
  51  0.985836     -0.142654E-01 -0.434973E-02  0.434973E-02   8.08776       8.09211    
  52  0.296563      -1.21550     -0.370622      0.370622       8.08186       8.45248    
  53  0.875112     -0.133403     -0.406765E-01  0.406765E-01   8.03442       8.07509    
  54  0.808637     -0.212405     -0.647654E-01  0.647654E-01   8.11412       8.17889    
  55  0.394372     -0.930461     -0.283711      0.283711       8.32632       8.61003    
  56  0.209815      -1.56153     -0.476133      0.476133       8.06063       8.53676    
  57  0.154667      -1.86648     -0.569116      0.569116       8.15023       8.71935    
  58  0.741232     -0.299442     -0.913041E-01  0.913041E-01   8.55969       8.65100    
  59  0.386718E-01  -3.25265     -0.991778      0.991778       8.09862       9.09040    
  60  0.372867     -0.986533     -0.300808      0.300808       8.10765       8.40845    
  61  0.910828E-01  -2.39599     -0.730571      0.730571       8.17975       8.91032    
  62  0.660999     -0.414003     -0.126235      0.126235       8.11238       8.23861    
  63  0.631205E-01  -2.76271     -0.842390      0.842390       8.11654       8.95893    
  64  0.959104     -0.417554E-01 -0.127318E-01  0.127318E-01   8.05853       8.07126    
  65  0.132829      -2.01869     -0.615528      0.615528       8.74604       9.36157    
  66  0.162229      -1.81875     -0.554562      0.554562       8.20747       8.76203    
  67  0.155176      -1.86319     -0.568115      0.568115       8.06512       8.63324    
  68  0.950416E-01  -2.35344     -0.717598      0.717598       8.10077       8.81837    
  69  0.591456     -0.525169     -0.160131      0.160131       8.09048       8.25061    
  70  0.297427      -1.21259     -0.369735      0.369735       8.07830       8.44804    
loop,thermsimp(1:2)        8  0.684863      0.225825    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    340          8.16          0.87          1.13         24.35          0.06          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        8
neval is:      339
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        8      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:        9
neval is:      339


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      339     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.641422     -0.444068     -0.135403      0.135403       7.98780       8.12320    
   2  0.805197     -0.216668     -0.660652E-01  0.660652E-01   8.01090       8.07696    
   3  0.976428     -0.238543E-01 -0.727352E-02  0.727352E-02   8.05853       8.06580    
   4  0.599028     -0.512447     -0.156253      0.156253       8.03442       8.19067    
   5  0.591081     -0.525802     -0.160325      0.160325       7.99049       8.15081    
   6  0.151500      -1.88717     -0.575424      0.575424       8.04755       8.62297    
   7  0.565682     -0.569723     -0.173717      0.173717       8.08776       8.26147    
   8  0.345258      -1.06346     -0.324265      0.324265       8.07112       8.39539    
   9  0.658101     -0.418397     -0.127575      0.127575       8.04862       8.17619    
  10  0.691977E-01  -2.67079     -0.814361      0.814361       8.08733       8.90169    
  11  0.289062      -1.24111     -0.378433      0.378433       8.02849       8.40692    
  12  0.949819     -0.514835E-01 -0.156981E-01  0.156981E-01   8.09327       8.10896    
  13  0.791632     -0.233658     -0.712457E-01  0.712457E-01   8.07678       8.14803    
  14  0.400532     -0.914962     -0.278985      0.278985       8.11412       8.39311    
  15  0.241886      -1.41929     -0.432762      0.432762       8.06697       8.49973    
  16  0.383016     -0.959678     -0.292620      0.292620       8.03963       8.33225    
  17  0.993978     -0.604041E-02 -0.184181E-02  0.184181E-02   8.11561       8.11745    
  18  0.807089     -0.214322     -0.653498E-01  0.653498E-01   8.04889       8.11424    
  19  0.732161     -0.311755     -0.950585E-01  0.950585E-01   8.14409       8.23915    
  20  0.176507      -1.73440     -0.528843      0.528843       8.07625       8.60509    
  21  0.628098     -0.465059     -0.141803      0.141803       8.11238       8.25418    
  22  0.383392     -0.958697     -0.292320      0.292320       8.18610       8.47842    
  23  0.906421     -0.982517E-01 -0.299584E-01  0.299584E-01   8.05256       8.08252    
  24  0.329288      -1.11082     -0.338706      0.338706       8.09048       8.42918    
  25  0.869436     -0.139911     -0.426608E-01  0.426608E-01   8.07850       8.12116    
  26  0.354994      -1.03565     -0.315786      0.315786       8.13016       8.44595    
  27  0.127935      -2.05623     -0.626975      0.626975       8.09754       8.72451    
  28  0.840123     -0.174207     -0.531182E-01  0.531182E-01   8.06750       8.12062    
  29  0.625861     -0.468627     -0.142891      0.142891       8.06657       8.20947    
  30  0.488384     -0.716653     -0.218518      0.218518       8.04015       8.25867    
  31  0.888226E-01  -2.42111     -0.738232      0.738232       8.25932       8.99755    
  32  0.262955      -1.33577     -0.407296      0.407296       8.15873       8.56603    
  33  0.153205E-01  -4.17856      -1.27410       1.27410       8.04995       9.32405    
  34  0.432355     -0.838509     -0.255674      0.255674       8.06810       8.32377    
  35  0.225273      -1.49044     -0.454457      0.454457       8.16632       8.62078    
  36  0.812147     -0.208074     -0.634449E-01  0.634449E-01   8.10765       8.17109    
  37  0.832805E-01  -2.48554     -0.757877      0.757877       8.09541       8.85329    
  38  0.442280     -0.815813     -0.248753      0.248753       8.10859       8.35734    
  39  0.106639      -2.23831     -0.682493      0.682493       8.11627       8.79876    
  40  0.143053      -1.94454     -0.592917      0.592917       8.08464       8.67756    
  41  0.871774     -0.137225     -0.418419E-01  0.418419E-01   8.07830       8.12014    
  42  0.137692      -1.98273     -0.604564      0.604564       8.08186       8.68643    
  43  0.366512      -1.00372     -0.306050      0.306050       8.10246       8.40851    
  44  0.617157     -0.482633     -0.147162      0.147162       8.09236       8.23952    
  45  0.420337     -0.866700     -0.264269      0.264269       8.08698       8.35125    
  46  0.935846     -0.663044E-01 -0.202172E-01  0.202172E-01   8.18731       8.20752    
  47  0.979912     -0.202925E-01 -0.618746E-02  0.618746E-02   8.06114       8.06733    
  48  0.692793     -0.367024     -0.111911      0.111911       8.03863       8.15054    
  49  0.155424      -1.86160     -0.567629      0.567629       8.06063       8.62826    
  50  0.703218     -0.352088     -0.107357      0.107357       8.32654       8.43390    
  51  0.396734     -0.924489     -0.281890      0.281890       8.24941       8.53130    
  52  0.247863      -1.39488     -0.425319      0.425319       8.24674       8.67206    
  53  0.176690      -1.73336     -0.528526      0.528526       8.32632       8.85484    
  54  0.832421     -0.183417     -0.559264E-01  0.559264E-01   8.06512       8.12105    
  55  0.598900     -0.512660     -0.156317      0.156317       8.17237       8.32869    
  56  0.940005     -0.618702E-01 -0.188651E-01  0.188651E-01   8.55969       8.57856    
  57  0.556954     -0.585272     -0.178458      0.178458       8.12070       8.29915    
  58  0.920495     -0.828436E-01 -0.252602E-01  0.252602E-01   8.15023       8.17549    
  59  0.896932     -0.108775     -0.331672E-01  0.331672E-01   8.09568       8.12885    
  60  0.200022      -1.60933     -0.490707      0.490707       8.06856       8.55926    
  61  0.667904E-01  -2.70620     -0.825158      0.825158       8.20747       9.03263    
  62  0.146707      -1.91932     -0.585227      0.585227       8.10077       8.68600    
  63  0.305705      -1.18513     -0.361364      0.361364       8.06856       8.42992    
  64  0.975058     -0.252587E-01 -0.770174E-02  0.770174E-02   8.10547       8.11318    
  65  0.229625      -1.47131     -0.448623      0.448623       8.17975       8.62837    
  66  0.477708     -0.738756     -0.225257      0.225257       8.15194       8.37720    
  67  0.443063     -0.814043     -0.248213      0.248213       8.11654       8.36475    
  68  0.988727     -0.113371E-01 -0.345685E-02  0.345685E-02   8.09862       8.10208    
  69  0.338863      -1.08216     -0.329966      0.329966       8.00020       8.33016    
  70  0.929830     -0.727534E-01 -0.221836E-01  0.221836E-01   8.15836       8.18054    
loop,thermsimp(1:2)        9  0.135403      0.660652E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    341          8.13          0.86          1.13         24.33          0.10          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    342          8.41          0.86          1.13         24.34          0.05          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  340    8.1316        1.090     -1.861      3.255     -102.6      1.396    
                      0.3563      1.376     -99.70      3.628     0.9919E-01

                       2.282     -1.039      1.530      6959.      3271.    

                     -0.1579      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6329.      445.7    

                       1.433     -5.825     -4.461     -8.536      6.713    

                      -15.01     -3.563      8393.      0.000     0.1134E+05



                       1507.     0.1322E+05 -2983.      7607.      4325.    

                       6606.     0.3927E-01 0.1935     0.1140E-01 0.1327    

                     -0.2486    -0.1069     0.2017     0.1192     0.7857E-01



                     -0.4776    -0.7857      0.000     0.1046    -0.6308E-01

                      0.2179E-01 0.1205    -0.7116    -0.1470     0.3459E-01

                      0.4153E-01 0.1418    -0.6730     -1.227      6889.    



                      -1.116     -1.211     -2.480     -2.302    -0.3807    

                     -0.3252      9.221      8.683    -0.1847E+05 -4.000    

                     -0.5873     -2.183      9.297      8.885    -0.1908E+05



                      -4.000     0.5273    -0.4030      8.846      9.081    

                     -0.1908E+05 -7.000    -0.7346    -0.6290      9.027    

                       8.755    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.13
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:        9
neval is:      341
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:        9      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       10
neval is:      341


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      341     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.833163     -0.182525     -0.556546E-01  0.556546E-01   8.05853       8.11418    
   2  0.367543      -1.00091     -0.305193      0.305193       8.06114       8.36633    
   3  0.528755     -0.637231     -0.194301      0.194301       8.01090       8.20520    
   4  0.776829     -0.252535     -0.770016E-01  0.770016E-01   8.05256       8.12956    
   5  0.149594E-01  -4.20242      -1.28138       1.28138       8.09862       9.38000    
   6  0.892228     -0.114033     -0.347703E-01  0.347703E-01   8.09327       8.12804    
   7  0.191037      -1.65529     -0.504721      0.504721       8.10547       8.61019    
   8  0.516533     -0.660616     -0.201431      0.201431       8.04889       8.25033    
   9  0.273230      -1.29744     -0.395609      0.395609       8.11561       8.51122    
  10  0.822225     -0.195741     -0.596843E-01  0.596843E-01   8.07830       8.13799    
  11  0.359850      -1.02207     -0.311643      0.311643       8.06750       8.37915    
  12  0.611658     -0.491581     -0.149890      0.149890       8.06512       8.21501    
  13  0.249481      -1.38837     -0.423334      0.423334       8.07850       8.50183    
  14  0.441252     -0.818139     -0.249462      0.249462       7.98780       8.23726    
  15  0.910514E-01  -2.39633     -0.730676      0.730676       8.09568       8.82636    
  16  0.745146     -0.294175     -0.896982E-01  0.896982E-01   8.07678       8.16648    
  17  0.758301     -0.276675     -0.843623E-01  0.843623E-01   8.03863       8.12299    
  18  0.638521     -0.448601     -0.136785      0.136785       7.99049       8.12727    
  19  0.150180      -1.89592     -0.578093      0.578093       8.10765       8.68574    
  20  0.144147      -1.93692     -0.590595      0.590595       8.15023       8.74083    
  21  0.104928      -2.25448     -0.687423      0.687423       8.04862       8.73604    
  22  0.398120     -0.921002     -0.280827      0.280827       8.15836       8.43919    
  23  0.802258     -0.220325     -0.671803E-01  0.671803E-01   8.03442       8.10160    
  24  0.399299     -0.918044     -0.279925      0.279925       8.18731       8.46723    
  25  0.493060     -0.707124     -0.215612      0.215612       8.06657       8.28219    
  26  0.504407     -0.684372     -0.208675      0.208675       8.14409       8.35277    
  27  0.762058     -0.271733     -0.828552E-01  0.828552E-01   8.09236       8.17521    
  28  0.430267     -0.843350     -0.257150      0.257150       8.11238       8.36953    
  29  0.993832     -0.618725E-02 -0.188658E-02  0.188658E-02   8.04015       8.04204    
  30  0.705390     -0.349005     -0.106417      0.106417       8.08776       8.19417    
  31  0.969760     -0.307069E-01 -0.936297E-02  0.936297E-02   8.12070       8.13006    
  32  0.245618      -1.40398     -0.428093      0.428093       8.06810       8.49619    
  33  0.685790     -0.377184     -0.115009      0.115009       8.17237       8.28738    
  34  0.905089     -0.997222E-01 -0.304067E-01  0.304067E-01   8.00020       8.03061    
  35  0.414065     -0.881732     -0.268853      0.268853       8.03963       8.30848    
  36  0.714747E-01  -2.63841     -0.804490      0.804490       8.08698       8.89147    
  37  0.694510     -0.364548     -0.111156      0.111156       8.10859       8.21975    
  38  0.770213E-01  -2.56367     -0.781701      0.781701       8.11654       8.89824    
  39  0.846173     -0.167031     -0.509302E-01  0.509302E-01   8.15194       8.20287    
  40  0.485012     -0.723582     -0.220631      0.220631       8.11412       8.33475    
  41  0.345787      -1.06193     -0.323799      0.323799       8.07112       8.39492    
  42  0.851861     -0.160332     -0.488874E-01  0.488874E-01   8.02849       8.07738    
  43  0.774151     -0.255989     -0.780547E-01  0.780547E-01   8.10246       8.18051    
  44  0.512382     -0.668685     -0.203892      0.203892       8.09048       8.29437    
  45  0.839798     -0.174594     -0.532363E-01  0.532363E-01   8.06856       8.12179    
  46  0.430550     -0.842692     -0.256949      0.256949       8.32654       8.58349    
  47  0.988263     -0.118067E-01 -0.360003E-02  0.360003E-02   8.13016       8.13376    
  48  0.349495      -1.05127     -0.320546      0.320546       8.18610       8.50665    
  49  0.290701      -1.23546     -0.376709      0.376709       8.06697       8.44368    
  50  0.210466      -1.55843     -0.475188      0.475188       8.24941       8.72460    
  51  0.361038      -1.01877     -0.310638      0.310638       8.06856       8.37919    
  52  0.168890      -1.77851     -0.542293      0.542293       8.15873       8.70103    
  53  0.176000      -1.73727     -0.529719      0.529719       8.55969       9.08941    
  54  0.494423     -0.704364     -0.214771      0.214771       8.07625       8.29102    
  55  0.887313     -0.119558     -0.364549E-01  0.364549E-01   8.16632       8.20277    
  56  0.318781      -1.14325     -0.348594      0.348594       8.04755       8.39614    
  57  0.385435     -0.953382     -0.290700      0.290700       8.06063       8.35133    
  58  0.557906     -0.583564     -0.177937      0.177937       8.17975       8.35768    
  59  0.262507      -1.33748     -0.407816      0.407816       8.24674       8.65455    
  60  0.573408     -0.556157     -0.169580      0.169580       8.08464       8.25422    
  61  0.334195      -1.09603     -0.334196      0.334196       8.10077       8.43497    
  62  0.365463      -1.00659     -0.306924      0.306924       8.08186       8.38878    
  63  0.182452      -1.70127     -0.518740      0.518740       8.09754       8.61628    
  64  0.224434      -1.49418     -0.455596      0.455596       8.11627       8.57186    
  65  0.599163     -0.512222     -0.156184      0.156184       8.09541       8.25160    
  66  0.549089     -0.599495     -0.182795      0.182795       8.32632       8.50911    
  67  0.830082     -0.186231     -0.567844E-01  0.567844E-01   8.08733       8.14411    
  68  0.824393     -0.193108     -0.588815E-01  0.588815E-01   8.25932       8.31820    
  69  0.814179     -0.205575     -0.626828E-01  0.626828E-01   8.20747       8.27015    
  70  0.731713E-01  -2.61495     -0.797336      0.797336       8.13162       8.92896    
loop,thermsimp(1:2)       10  0.556546E-01  0.305193    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    343          8.10          0.86          1.12         24.41          0.08          0.05         26.52
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    344          8.51          0.87          1.13         24.30          0.07          0.05         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       10
neval is:      343
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       10      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       11
neval is:      343


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      343     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919397     -0.840375E-01 -0.256242E-01  0.256242E-01   8.00020       8.02582    
   2  0.309089      -1.17413     -0.358008      0.358008       8.04015       8.39816    
   3  0.237901      -1.43590     -0.437826      0.437826       8.02849       8.46631    
   4  0.542467     -0.611627     -0.186494      0.186494       8.03442       8.22091    
   5  0.523672     -0.646889     -0.197246      0.197246       8.05853       8.25577    
   6  0.850058     -0.162450     -0.495334E-01  0.495334E-01   8.06856       8.11809    
   7  0.589343     -0.528746     -0.161222      0.161222       8.03863       8.19985    
   8  0.979269     -0.209490E-01 -0.638764E-02  0.638764E-02   7.99049       7.99687    
   9  0.110419      -2.20347     -0.671871      0.671871       8.09327       8.76514    
  10  0.557914     -0.583550     -0.177933      0.177933       8.05256       8.23049    
  11  0.474464     -0.745569     -0.227335      0.227335       8.12070       8.34803    
  12  0.312482      -1.16321     -0.354679      0.354679       8.13016       8.48484    
  13  0.297011      -1.21399     -0.370162      0.370162       8.07830       8.44846    
  14  0.857571     -0.153651     -0.468505E-01  0.468505E-01   8.08733       8.13418    
  15  0.792567     -0.232479     -0.708861E-01  0.708861E-01   8.07678       8.14767    
  16  0.963006     -0.376958E-01 -0.114940E-01  0.114940E-01   8.09236       8.10385    
  17  0.294103      -1.22382     -0.373162      0.373162       8.10246       8.47562    
  18  0.403484     -0.907618     -0.276746      0.276746       8.08776       8.36450    
  19  0.449313     -0.800035     -0.243942      0.243942       8.16632       8.41026    
  20  0.721912     -0.325852     -0.993570E-01  0.993570E-01   8.15194       8.25130    
  21  0.512488     -0.668479     -0.203829      0.203829       8.01090       8.21473    
  22  0.885190     -0.121953     -0.371851E-01  0.371851E-01   8.06512       8.10231    
  23  0.694751E-01  -2.66679     -0.813142      0.813142       8.10859       8.92173    
  24  0.820879     -0.197380     -0.601840E-01  0.601840E-01   7.98780       8.04798    
  25  0.211527      -1.55340     -0.473655      0.473655       8.04889       8.52255    
  26  0.937420     -0.646236E-01 -0.197047E-01  0.197047E-01   8.09541       8.11512    
  27  0.515756E-01  -2.96471     -0.903982      0.903982       8.08464       8.98862    
  28  0.695222     -0.363525     -0.110844      0.110844       8.20747       8.31831    
  29  0.718776     -0.330205     -0.100684      0.100684       8.06657       8.16726    
  30  0.536080     -0.623471     -0.190105      0.190105       8.17237       8.36248    
  31  0.585855     -0.534682     -0.163032      0.163032       8.07625       8.23928    
  32  0.693572     -0.365900     -0.111568      0.111568       8.09048       8.20204    
  33  0.700823     -0.355500     -0.108397      0.108397       8.03963       8.14802    
  34  0.250985      -1.38236     -0.421502      0.421502       8.25932       8.68082    
  35  0.290600      -1.23581     -0.376815      0.376815       8.11412       8.49094    
  36  0.828609     -0.188007     -0.573261E-01  0.573261E-01   8.06063       8.11795    
  37  0.225820      -1.48802     -0.453718      0.453718       8.14409       8.59781    
  38  0.999674     -0.326354E-03 -0.995100E-04  0.995100E-04   8.17975       8.17984    
  39  0.878216     -0.129862     -0.395969E-01  0.395969E-01   8.06114       8.10074    
  40  0.685898E-01  -2.67961     -0.817052      0.817052       8.11238       8.92943    
  41  0.273860      -1.29514     -0.394906      0.394906       8.06750       8.46241    
  42  0.697655     -0.360030     -0.109778      0.109778       8.06856       8.17833    
  43  0.293168      -1.22701     -0.374132      0.374132       8.08186       8.45599    
  44  0.319476      -1.14107     -0.347929      0.347929       8.07112       8.41905    
  45  0.874681     -0.133896     -0.408269E-01  0.408269E-01   8.04755       8.08838    
  46  0.408697     -0.894781     -0.272831      0.272831       8.10077       8.37360    
  47  0.142130E-01  -4.25360      -1.29698       1.29698       8.15836       9.45534    
  48  0.164528      -1.80468     -0.550271      0.550271       8.06697       8.61724    
  49  0.652669     -0.426685     -0.130102      0.130102       8.18731       8.31741    
  50  0.492107     -0.709060     -0.216203      0.216203       8.06810       8.28430    
  51  0.542705     -0.611189     -0.186360      0.186360       8.07850       8.26486    
  52  0.798603     -0.224891     -0.685726E-01  0.685726E-01   8.18610       8.25467    
  53  0.474092E-01  -3.04894     -0.929666      0.929666       8.32632       9.25598    
  54  0.425084     -0.855468     -0.260845      0.260845       8.11561       8.37646    
  55  0.349722      -1.05062     -0.320349      0.320349       8.11627       8.43662    
  56  0.499235     -0.694678     -0.211817      0.211817       8.32654       8.53836    
  57  0.193091      -1.64459     -0.501460      0.501460       8.10547       8.60693    
  58  0.876894     -0.131369     -0.400562E-01  0.400562E-01   8.09754       8.13759    
  59  0.634591     -0.454774     -0.138667      0.138667       8.24674       8.38540    
  60  0.571394     -0.559676     -0.170653      0.170653       8.10765       8.27830    
  61  0.749680     -0.288108     -0.878484E-01  0.878484E-01   8.15873       8.24658    
  62  0.111050      -2.19777     -0.670133      0.670133       8.24941       8.91954    
  63  0.456811     -0.783485     -0.238896      0.238896       8.04862       8.28751    
  64  0.686362     -0.376350     -0.114755      0.114755       8.15023       8.26499    
  65  0.160608      -1.82879     -0.557624      0.557624       8.09568       8.65330    
  66  0.557454     -0.584375     -0.178184      0.178184       8.08698       8.26516    
  67  0.914976     -0.888571E-01 -0.270938E-01  0.270938E-01   8.11654       8.14363    
  68  0.203755      -1.59084     -0.485069      0.485069       8.13162       8.61669    
  69  0.851702     -0.160519     -0.489446E-01  0.489446E-01   8.55969       8.60864    
  70  0.770841     -0.260273     -0.793611E-01  0.793611E-01   8.09625       8.17561    
loop,thermsimp(1:2)       11  0.256242E-01  0.358008    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    345          8.75          0.86          1.13         24.34          0.07          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.75
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       11
neval is:      344
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       11      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       12
neval is:      344


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      344     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.762868     -0.270671     -0.825314E-01  0.825314E-01   7.99049       8.07302    
   2  0.482922E-01  -3.03048     -0.924038      0.924038       8.00020       8.92424    
   3  0.612960     -0.489456     -0.149242      0.149242       7.98780       8.13704    
   4  0.910127     -0.941714E-01 -0.287142E-01  0.287142E-01   8.04755       8.07626    
   5  0.362433      -1.01492     -0.309463      0.309463       8.06114       8.37060    
   6  0.476779     -0.740702     -0.225851      0.225851       8.06512       8.29098    
   7  0.179006E-01  -4.02292      -1.22665       1.22665       8.09236       9.31900    
   8  0.589646     -0.528233     -0.161066      0.161066       8.09541       8.25648    
   9  0.926206     -0.766581E-01 -0.233742E-01  0.233742E-01   8.06063       8.08400    
  10  0.492629     -0.707999     -0.215879      0.215879       8.06856       8.28444    
  11  0.661123     -0.413815     -0.126178      0.126178       8.08733       8.21350    
  12  0.542248     -0.612032     -0.186617      0.186617       8.09754       8.28415    
  13  0.216527      -1.53004     -0.466531      0.466531       8.11654       8.58307    
  14  0.549832     -0.598143     -0.182382      0.182382       8.07678       8.25917    
  15  0.429556     -0.845003     -0.257654      0.257654       8.03963       8.29728    
  16  0.264838      -1.32864     -0.405120      0.405120       8.06657       8.47169    
  17  0.251706      -1.37949     -0.420628      0.420628       8.09625       8.51687    
  18  0.701724     -0.354215     -0.108005      0.108005       8.06856       8.17656    
  19  0.324289      -1.12612     -0.343370      0.343370       8.17975       8.52312    
  20  0.160749E-02  -6.43308      -1.96154       1.96154       8.03863       10.0002    
  21  0.533627     -0.628058     -0.191504      0.191504       8.09048       8.28198    
  22  0.883065     -0.124357     -0.379181E-01  0.379181E-01   8.01090       8.04882    
  23  0.484824     -0.723969     -0.220748      0.220748       8.03442       8.25517    
  24  0.724157     -0.322747     -0.984102E-01  0.984102E-01   8.05256       8.15097    
  25  0.847375     -0.165612     -0.504976E-01  0.504976E-01   8.07625       8.12675    
  26  0.167586      -1.78626     -0.544656      0.544656       8.15873       8.70339    
  27  0.890079     -0.116445     -0.355057E-01  0.355057E-01   8.15194       8.18745    
  28  0.235223      -1.44722     -0.441279      0.441279       8.18610       8.62738    
  29  0.206112      -1.57934     -0.481562      0.481562       8.05853       8.54009    
  30  0.463385     -0.769198     -0.234539      0.234539       8.07850       8.31304    
  31  0.487880E-01  -3.02027     -0.920924      0.920924       8.15023       9.07116    
  32  0.244157      -1.40994     -0.429912      0.429912       8.08698       8.51689    
  33  0.770602     -0.260583     -0.794555E-01  0.794555E-01   8.10765       8.18710    
  34  0.264159      -1.33120     -0.405903      0.405903       8.06810       8.47400    
  35  0.189030E-01  -3.96843      -1.21003       1.21003       8.04862       9.25865    
  36  0.635342     -0.453592     -0.138307      0.138307       8.18731       8.32561    
  37  0.139550      -1.96933     -0.600477      0.600477       8.20747       8.80795    
  38  0.561566     -0.577026     -0.175943      0.175943       8.12070       8.29664    
  39  0.951789     -0.494118E-01 -0.150664E-01  0.150664E-01   8.17237       8.18744    
  40  0.527693     -0.639242     -0.194914      0.194914       8.08776       8.28267    
  41  0.925337     -0.775972E-01 -0.236605E-01  0.236605E-01   8.10077       8.12443    
  42  0.795352     -0.228971     -0.698166E-01  0.698166E-01   8.11561       8.18543    
  43  0.530799     -0.633371     -0.193124      0.193124       8.24674       8.43986    
  44  0.642763     -0.441979     -0.134766      0.134766       8.04015       8.17492    
  45  0.485146     -0.723305     -0.220546      0.220546       8.16632       8.38686    
  46  0.795896     -0.228287     -0.696080E-01  0.696080E-01   8.07112       8.14073    
  47  0.519140     -0.655581     -0.199896      0.199896       8.11627       8.31616    
  48  0.694073E-01  -2.66776     -0.813439      0.813439       8.07830       8.89174    
  49  0.401486     -0.912583     -0.278260      0.278260       8.08186       8.36012    
  50  0.587982E-01  -2.83364     -0.864019      0.864019       8.06750       8.93152    
  51  0.752652     -0.284152     -0.866420E-01  0.866420E-01   8.02849       8.11513    
  52  0.139929      -1.96662     -0.599652      0.599652       8.10246       8.70211    
  53  0.136759      -1.98953     -0.606637      0.606637       8.13016       8.73680    
  54  0.690728     -0.370009     -0.112821      0.112821       8.11412       8.22694    
  55  0.409546     -0.892705     -0.272199      0.272199       8.04889       8.32109    
  56  0.422285     -0.862075     -0.262859      0.262859       8.32654       8.58940    
  57  0.160439      -1.82984     -0.557945      0.557945       8.14409       8.70204    
  58  0.230463      -1.46767     -0.447513      0.447513       8.10547       8.55299    
  59  0.836860     -0.178099     -0.543049E-01  0.543049E-01   8.55969       8.61400    
  60  0.635813     -0.452850     -0.138081      0.138081       8.13162       8.26970    
  61  0.464135     -0.767580     -0.234046      0.234046       8.06697       8.30102    
  62  0.999501     -0.498826E-03 -0.152099E-03  0.152099E-03   8.09568       8.09583    
  63  0.472031     -0.750710     -0.228902      0.228902       8.25932       8.48822    
  64  0.926290     -0.765681E-01 -0.233467E-01  0.233467E-01   8.09327       8.11661    
  65  0.825201E-01  -2.49471     -0.760674      0.760674       8.24941       9.01009    
  66  0.987125     -0.129587E-01 -0.395130E-02  0.395130E-02   8.10859       8.11254    
  67  0.902936     -0.102104     -0.311329E-01  0.311329E-01   8.11238       8.14351    
  68  0.269140E-01  -3.61511      -1.10230       1.10230       8.08464       9.18694    
  69  0.343181      -1.06950     -0.326105      0.326105       8.32632       8.65242    
  70  0.364015      -1.01056     -0.308134      0.308134       8.75121       9.05934    
loop,thermsimp(1:2)       12  0.825314E-01  0.924038    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    346          8.09          0.87          1.13         24.36          0.07          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    347          8.21          0.86          1.13         24.32          0.09          0.05         26.44
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       12
neval is:      346
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       12      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       13
neval is:      346


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      346
neval,tstepnext:      346     346

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.592808     -0.522884     -0.159435      0.159435       8.01090       8.17033    
   2  0.691791     -0.368472     -0.112352      0.112352       7.99049       8.10284    
   3  0.688173     -0.373715     -0.113951      0.113951       8.04755       8.16150    
   4  0.439966     -0.821058     -0.250352      0.250352       8.06063       8.31098    
   5  0.945690     -0.558403E-01 -0.170265E-01  0.170265E-01   8.09568       8.11271    
   6  0.238956      -1.43147     -0.436477      0.436477       8.10859       8.54507    
   7  0.280830E-01  -3.57259      -1.08933       1.08933       8.02849       9.11782    
   8  0.902031E-01  -2.40569     -0.733530      0.733530       8.09327       8.82680    
   9  0.198361      -1.61767     -0.493250      0.493250       8.10077       8.59402    
  10  0.201288      -1.60302     -0.488783      0.488783       8.07625       8.56503    
  11  0.710033     -0.342444     -0.104416      0.104416       7.98780       8.09222    
  12  0.182913      -1.69874     -0.517972      0.517972       8.07112       8.58909    
  13  0.817316     -0.201730     -0.615102E-01  0.615102E-01   8.11238       8.17389    
  14  0.894732     -0.111231     -0.339159E-01  0.339159E-01   8.05256       8.08647    
  15  0.854000     -0.157824     -0.481228E-01  0.481228E-01   8.04015       8.08827    
  16  0.248066      -1.39406     -0.425069      0.425069       8.06856       8.49363    
  17  0.670877     -0.399170     -0.121713      0.121713       8.11561       8.23733    
  18  0.701473     -0.354573     -0.108114      0.108114       8.10765       8.21576    
  19  0.199467      -1.61210     -0.491554      0.491554       8.17237       8.66393    
  20  0.391533     -0.937685     -0.285914      0.285914       8.15194       8.43785    
  21  0.586761     -0.533138     -0.162561      0.162561       8.08733       8.24989    
  22  0.163799      -1.80912     -0.551625      0.551625       8.11412       8.66575    
  23  0.955964     -0.450353E-01 -0.137319E-01  0.137319E-01   8.03442       8.04815    
  24  0.365727      -1.00587     -0.306703      0.306703       8.09541       8.40212    
  25  0.733577     -0.309822     -0.944692E-01  0.944692E-01   8.07678       8.17125    
  26  0.111597      -2.19286     -0.668635      0.668635       8.13162       8.80025    
  27  0.714895     -0.335619     -0.102335      0.102335       8.09048       8.19281    
  28  0.816688     -0.202498     -0.617445E-01  0.617445E-01   8.08776       8.14950    
  29  0.480603     -0.732714     -0.223415      0.223415       8.09754       8.32095    
  30  0.573891     -0.555316     -0.169324      0.169324       8.06856       8.23788    
  31  0.204452      -1.58742     -0.484028      0.484028       8.06512       8.54915    
  32  0.845356E-01  -2.47058     -0.753316      0.753316       8.12070       8.87401    
  33  0.524789E-01  -2.94734     -0.898687      0.898687       8.03963       8.93831    
  34  0.631781     -0.459213     -0.140021      0.140021       8.06697       8.20699    
  35  0.620363     -0.477450     -0.145581      0.145581       8.07850       8.22408    
  36  0.553551     -0.591402     -0.180327      0.180327       8.11627       8.29659    
  37  0.546271     -0.604640     -0.184363      0.184363       8.04889       8.23326    
  38  0.402204     -0.910797     -0.277715      0.277715       8.18731       8.46502    
  39  0.735174     -0.307648     -0.938062E-01  0.938062E-01   8.08186       8.17567    
  40  0.359565      -1.02286     -0.311884      0.311884       8.06114       8.37303    
  41  0.564111     -0.572504     -0.174565      0.174565       8.16632       8.34088    
  42  0.412661     -0.885128     -0.269888      0.269888       8.24674       8.51662    
  43  0.795853     -0.228341     -0.696244E-01  0.696244E-01   8.06657       8.13620    
  44  0.909991E-01  -2.39691     -0.730851      0.730851       8.06810       8.79895    
  45  0.830687     -0.185502     -0.565623E-01  0.565623E-01   8.25932       8.31588    
  46  0.592588     -0.523256     -0.159548      0.159548       8.09625       8.25580    
  47  0.489472     -0.714427     -0.217839      0.217839       8.08698       8.30482    
  48  0.992056     -0.797586E-02 -0.243195E-02  0.243195E-02   8.17975       8.18218    
  49  0.808208     -0.212936     -0.649271E-01  0.649271E-01   8.05853       8.12346    
  50  0.212569      -1.54849     -0.472157      0.472157       8.10547       8.57763    
  51  0.214041      -1.54159     -0.470053      0.470053       8.11654       8.58659    
  52  0.586527     -0.533536     -0.162683      0.162683       8.32654       8.48922    
  53  0.603460     -0.505075     -0.154005      0.154005       8.55969       8.71370    
  54  0.819887     -0.198589     -0.605525E-01  0.605525E-01   8.18610       8.24665    
  55  0.204248      -1.58842     -0.484333      0.484333       8.32632       8.81065    
  56  0.540917     -0.614489     -0.187367      0.187367       8.14409       8.33146    
  57  0.430522     -0.842757     -0.256969      0.256969       8.10246       8.35942    
  58  0.637009E-01  -2.75356     -0.839599      0.839599       8.15873       8.99833    
  59  0.872387     -0.136522     -0.416275E-01  0.416275E-01   8.13016       8.17179    
  60  0.740351     -0.300631     -0.916667E-01  0.916667E-01   8.20747       8.29913    
  61  0.844085     -0.169502     -0.516836E-01  0.516836E-01   8.07830       8.12998    
  62  0.574613     -0.554058     -0.168940      0.168940       8.00020       8.16914    
  63  0.382052     -0.962198     -0.293388      0.293388       8.06750       8.36089    
  64  0.564583     -0.571667     -0.174310      0.174310       8.24941       8.42372    
  65  0.700807     -0.355522     -0.108404      0.108404       8.75121       8.85961    
  66  0.237235      -1.43870     -0.438681      0.438681       8.15023       8.58892    
  67  0.745904     -0.293158     -0.893882E-01  0.893882E-01   8.08464       8.17403    
  68  0.369081     -0.996740     -0.303920      0.303920       8.04862       8.35254    
  69  0.512148     -0.669141     -0.204031      0.204031       8.09236       8.29639    
  70  0.239900E-01  -3.73012      -1.13737       1.13737       8.08733       9.22469    
loop,thermsimp(1:2)       13  0.159435      0.112352    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    348          8.04          0.86          1.12         24.41          0.08          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    349          8.08          0.86          1.13         24.66          0.09          0.04         26.78
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.304914               346
loop is:       13
neval is:      348
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       13      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.304914               346
loop is:       14
neval is:      348


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.152457               415

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      348     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.338981      -1.08181     -0.164930      0.164930       8.03442       8.19935    
   2  0.649641     -0.431335     -0.657601E-01  0.657601E-01   8.05256       8.11832    
   3  0.930116     -0.724456E-01 -0.110449E-01  0.110449E-01   8.04015       8.05120    
   4  0.297326      -1.21293     -0.184919      0.184919       7.98780       8.17272    
   5  0.751734     -0.285373     -0.435071E-01  0.435071E-01   7.99049       8.03399    
   6  0.409056     -0.893902     -0.136282      0.136282       8.09568       8.23196    
   7  0.115094      -2.16201     -0.329614      0.329614       8.05853       8.38814    
   8  0.606681     -0.499753     -0.761909E-01  0.761909E-01   8.07830       8.15449    
   9  0.140571      -1.96204     -0.299128      0.299128       8.06657       8.36570    
  10  0.447669E-01  -3.10629     -0.473576      0.473576       8.08776       8.56133    
  11  0.517394     -0.658951     -0.100462      0.100462       8.04755       8.14801    
  12  0.587057     -0.532633     -0.812038E-01  0.812038E-01   8.00020       8.08140    
  13  0.384993E-01  -3.25712     -0.496571      0.496571       8.01090       8.50747    
  14  0.829105E-01  -2.48999     -0.379617      0.379617       8.07678       8.45640    
  15  0.382179     -0.961866     -0.146643      0.146643       8.13016       8.27681    
  16  0.269516      -1.31113     -0.199891      0.199891       8.11238       8.31227    
  17  0.879580     -0.128311     -0.195619E-01  0.195619E-01   8.08464       8.10420    
  18  0.760503E-01  -2.57636     -0.392785      0.392785       8.08186       8.47465    
  19  0.482544     -0.728684     -0.111093      0.111093       8.17975       8.29084    
  20  0.561499     -0.577145     -0.879900E-01  0.879900E-01   8.09048       8.17847    
  21  0.254621      -1.36798     -0.208558      0.208558       8.06697       8.27553    
  22  0.479261     -0.735511     -0.112134      0.112134       8.10765       8.21978    
  23  0.638455     -0.448704     -0.684082E-01  0.684082E-01   8.07850       8.14691    
  24  0.289082      -1.24105     -0.189206      0.189206       8.04889       8.23810    
  25  0.656024     -0.421558     -0.642696E-01  0.642696E-01   8.11561       8.17988    
  26  0.597431     -0.515117     -0.785333E-01  0.785333E-01   8.06856       8.14709    
  27  0.859562     -0.151333     -0.230718E-01  0.230718E-01   8.18610       8.20917    
  28  0.554826     -0.589100     -0.898125E-01  0.898125E-01   8.08733       8.17714    
  29  0.128413      -2.05250     -0.312919      0.312919       8.09625       8.40917    
  30  0.311170      -1.16742     -0.177981      0.177981       8.09236       8.27034    
  31  0.606679     -0.499755     -0.761913E-01  0.761913E-01   8.11627       8.19246    
  32  0.923238     -0.798686E-01 -0.121765E-01  0.121765E-01   8.20747       8.21964    
  33  0.734154     -0.309037     -0.471149E-01  0.471149E-01   8.08698       8.13409    
  34  0.988670     -0.113947E-01 -0.173721E-02  0.173721E-02   8.06063       8.06237    
  35  0.136308      -1.99284     -0.303822      0.303822       8.25932       8.56314    
  36  0.345839      -1.06178     -0.161876      0.161876       8.09754       8.25941    
  37  0.349440      -1.05142     -0.160297      0.160297       8.14409       8.30439    
  38  0.625658E-01  -2.77154     -0.422541      0.422541       8.16632       8.58886    
  39  0.394804     -0.929365     -0.141688      0.141688       8.04862       8.19031    
  40  0.899667E-02  -4.71090     -0.718211      0.718211       8.10246       8.82067    
  41  0.823946     -0.193651     -0.295234E-01  0.295234E-01   8.06750       8.09703    
  42  0.834235     -0.181240     -0.276314E-01  0.276314E-01   8.06114       8.08877    
  43  0.777534     -0.251627     -0.383624E-01  0.383624E-01   8.09541       8.13378    
  44  0.384993     -0.954531     -0.145525      0.145525       8.24941       8.39494    
  45  0.247443E-01  -3.69916     -0.563964      0.563964       8.15194       8.71590    
  46  0.810695     -0.209863     -0.319951E-01  0.319951E-01   8.18731       8.21930    
  47  0.893618     -0.112477     -0.171479E-01  0.171479E-01   8.32654       8.34369    
  48  0.545617     -0.605837     -0.923642E-01  0.923642E-01   8.06856       8.16092    
  49  0.587193     -0.532402     -0.811686E-01  0.811686E-01   8.24674       8.32791    
  50  0.991207     -0.883185E-02 -0.134648E-02  0.134648E-02   8.10859       8.10994    
  51  0.477440     -0.739316     -0.112714      0.112714       8.06512       8.17784    
  52  0.444858     -0.810000     -0.123490      0.123490       8.07625       8.19974    
  53  0.103440      -2.26876     -0.345889      0.345889       8.10547       8.45136    
  54  0.320718      -1.13719     -0.173373      0.173373       8.11654       8.28991    
  55  0.161721      -1.82188     -0.277759      0.277759       8.15023       8.42799    
  56  0.912244     -0.918481E-01 -0.140029E-01  0.140029E-01   8.07112       8.08512    
  57  0.358583      -1.02559     -0.156359      0.156359       8.10077       8.25713    
  58  0.263871      -1.33229     -0.203118      0.203118       8.17237       8.37549    
  59  0.782230     -0.245606     -0.374444E-01  0.374444E-01   8.11412       8.15157    
  60  0.592946     -0.522652     -0.796821E-01  0.796821E-01   8.55969       8.63937    
  61  0.652732     -0.426589     -0.650365E-01  0.650365E-01   8.06810       8.13314    
  62  0.817021     -0.202091     -0.308102E-01  0.308102E-01   8.13162       8.16243    
  63  0.177213      -1.73040     -0.263812      0.263812       8.32632       8.59013    
  64  0.263258      -1.33462     -0.203472      0.203472       8.09327       8.29674    
  65  0.856937     -0.154391     -0.235380E-01  0.235380E-01   8.75121       8.77474    
  66  0.541629E-01  -2.91576     -0.444528      0.444528       8.12070       8.56522    
  67  0.919404     -0.840293E-01 -0.128109E-01  0.128109E-01   8.03963       8.05244    
  68  0.996572     -0.343426E-02 -0.523578E-03  0.523578E-03   8.15873       8.15926    
  69  0.257654      -1.35614     -0.206753      0.206753       8.02849       8.23524    
  70  0.684182     -0.379532     -0.578623E-01  0.578623E-01   8.03863       8.09649    
loop,thermsimp(1:2)       14  0.164930      0.657601E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    350          8.10          0.86          1.12         24.43          0.10          0.05         26.57
Just calling func    0   0         26.57


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       14
neval is:      349
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       14      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       15
neval is:      349


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      349     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.219724      -1.51538     -0.231031      0.231031       7.99049       8.22152    
   2  0.894567E-01  -2.41400     -0.368032      0.368032       8.04015       8.40818    
   3  0.863615     -0.146628     -0.223545E-01  0.223545E-01   8.03963       8.06198    
   4  0.807990     -0.213206     -0.325048E-01  0.325048E-01   8.06063       8.09313    
   5  0.318173      -1.14516     -0.174588      0.174588       8.00020       8.17479    
   6  0.464606     -0.766566     -0.116868      0.116868       8.07112       8.18799    
   7  0.574933     -0.553501     -0.843852E-01  0.843852E-01   8.06114       8.14553    
   8  0.974939     -0.253802E-01 -0.386940E-02  0.386940E-02   8.03863       8.04250    
   9  0.415757     -0.877653     -0.133805      0.133805       8.06750       8.20131    
  10  0.187109      -1.67606     -0.255528      0.255528       8.08464       8.34017    
  11  0.730515E-01  -2.61659     -0.398918      0.398918       8.10859       8.50751    
  12  0.209185      -1.56454     -0.238525      0.238525       8.05256       8.29108    
  13  0.496690     -0.699790     -0.106688      0.106688       8.06810       8.17479    
  14  0.862986     -0.147356     -0.224656E-01  0.224656E-01   8.09541       8.11788    
  15  0.888200     -0.118558     -0.180750E-01  0.180750E-01   8.08698       8.10505    
  16  0.380888     -0.965250     -0.147159      0.147159       8.07850       8.22566    
  17  0.135305      -2.00022     -0.304948      0.304948       8.06856       8.37351    
  18  0.927079     -0.757167E-01 -0.115436E-01  0.115436E-01   8.04755       8.05909    
  19  0.603067     -0.505727     -0.771017E-01  0.771017E-01   8.11412       8.19122    
  20  0.136202      -1.99362     -0.303941      0.303941       8.07830       8.38224    
  21  0.954653     -0.464076E-01 -0.707517E-02  0.707517E-02   8.15873       8.16581    
  22  0.151192      -1.88920     -0.288023      0.288023       8.06856       8.35658    
  23  0.449259     -0.800155     -0.121989      0.121989       8.13162       8.25361    
  24  0.780874     -0.247341     -0.377090E-01  0.377090E-01   7.98780       8.02551    
  25  0.456238     -0.784740     -0.119639      0.119639       8.08733       8.20697    
  26  0.163284      -1.81227     -0.276293      0.276293       8.06512       8.34142    
  27  0.821444     -0.196692     -0.299871E-01  0.299871E-01   8.09048       8.12046    
  28  0.861448     -0.149141     -0.227376E-01  0.227376E-01   8.11561       8.13835    
  29  0.924167     -0.788621E-01 -0.120231E-01  0.120231E-01   8.04862       8.06064    
  30  0.195059      -1.63445     -0.249184      0.249184       8.11627       8.36545    
  31  0.375134     -0.980472     -0.149480      0.149480       8.03442       8.18390    
  32  0.909862     -0.944628E-01 -0.144015E-01  0.144015E-01   8.07625       8.09065    
  33  0.831459     -0.184574     -0.281396E-01  0.281396E-01   8.18610       8.21424    
  34  0.627278     -0.466365     -0.711007E-01  0.711007E-01   8.18731       8.25841    
  35  0.918890     -0.845891E-01 -0.128962E-01  0.128962E-01   8.20747       8.22036    
  36  0.475784     -0.742791     -0.113244      0.113244       8.10765       8.22089    
  37  0.344524      -1.06559     -0.162457      0.162457       8.09568       8.25814    
  38  0.286778      -1.24905     -0.190426      0.190426       8.02849       8.21891    
  39  0.336148      -1.09020     -0.166209      0.166209       8.04889       8.21510    
  40  0.709840     -0.342716     -0.522496E-01  0.522496E-01   8.10077       8.15302    
  41  0.219827      -1.51491     -0.230959      0.230959       8.09754       8.32849    
  42  0.347594      -1.05672     -0.161105      0.161105       8.09236       8.25346    
  43  0.905734     -0.990099E-01 -0.150948E-01  0.150948E-01   8.06697       8.08207    
  44  0.826231     -0.190881     -0.291011E-01  0.291011E-01   8.13016       8.15926    
  45  0.400277     -0.915599     -0.139590      0.139590       8.11654       8.25613    
  46  0.555153     -0.588512     -0.897229E-01  0.897229E-01   8.17975       8.26947    
  47  0.864397     -0.145723     -0.222166E-01  0.222166E-01   8.09327       8.11548    
  48  0.277380E-01  -3.58495     -0.546552      0.546552       8.14409       8.69064    
  49  0.993968     -0.605015E-02 -0.922389E-03  0.922389E-03   8.11238       8.11330    
  50  0.717076     -0.332573     -0.507032E-01  0.507032E-01   8.24674       8.29744    
  51  0.736253     -0.306182     -0.466796E-01  0.466796E-01   8.32654       8.37322    
  52  0.278813      -1.27722     -0.194721      0.194721       8.06657       8.26129    
  53  0.646460     -0.436245     -0.665086E-01  0.665086E-01   8.17237       8.23888    
  54  0.600312     -0.510306     -0.777998E-01  0.777998E-01   8.05853       8.13633    
  55  0.295434      -1.21931     -0.185893      0.185893       8.24941       8.43530    
  56  0.946129     -0.553767E-01 -0.844257E-02  0.844257E-02   8.09625       8.10469    
  57  0.722008     -0.325719     -0.496582E-01  0.496582E-01   8.15023       8.19989    
  58  0.789514     -0.236338     -0.360314E-01  0.360314E-01   8.10547       8.14151    
  59  0.955429     -0.455949E-01 -0.695128E-02  0.695128E-02   8.07678       8.08373    
  60  0.693546     -0.365938     -0.557898E-01  0.557898E-01   8.08186       8.13765    
  61  0.979434     -0.207808E-01 -0.316819E-02  0.316819E-02   8.01090       8.01407    
  62  0.860966     -0.149700     -0.228229E-01  0.228229E-01   8.08776       8.11058    
  63  0.329063      -1.11151     -0.169457      0.169457       8.25932       8.42878    
  64  0.839540     -0.174902     -0.266650E-01  0.266650E-01   8.12070       8.14736    
  65  0.511945     -0.669538     -0.102076      0.102076       8.16632       8.26839    
  66  0.265617      -1.32570     -0.202112      0.202112       8.32632       8.52843    
  67  0.793213     -0.231663     -0.353187E-01  0.353187E-01   8.55969       8.59501    
  68  0.515723     -0.662186     -0.100955      0.100955       8.15194       8.25290    
  69  0.928816     -0.738450E-01 -0.112582E-01  0.112582E-01   8.75121       8.76246    
  70  0.936254     -0.658686E-01 -0.100421E-01  0.100421E-01   8.10002       8.11006    
loop,thermsimp(1:2)       15  0.231031      0.368032    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    351          8.16          0.86          1.13         24.38          0.05          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.16
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       15
neval is:      350
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       15      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       16
neval is:      350


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      350     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231724      -1.46221     -0.222924      0.222924       8.01090       8.23382    
   2  0.641193     -0.444425     -0.677557E-01  0.677557E-01   7.98780       8.05556    
   3  0.353033      -1.04119     -0.158738      0.158738       8.03863       8.19737    
   4  0.928955     -0.736953E-01 -0.112354E-01  0.112354E-01   8.04755       8.05878    
   5  0.350257      -1.04909     -0.159941      0.159941       8.04862       8.20856    
   6  0.682617     -0.381821     -0.582114E-01  0.582114E-01   8.03963       8.09784    
   7  0.162763      -1.81546     -0.276780      0.276780       8.06697       8.34375    
   8  0.874032     -0.134639     -0.205266E-01  0.205266E-01   8.07678       8.09731    
   9  0.518909     -0.656027     -0.100016      0.100016       8.07625       8.17627    
  10  0.461984     -0.772226     -0.117731      0.117731       8.06063       8.17836    
  11  0.449468     -0.799691     -0.121919      0.121919       8.09625       8.21817    
  12  0.523281     -0.647637     -0.987370E-01  0.987370E-01   8.08698       8.18572    
  13  0.637377     -0.450394     -0.686659E-01  0.686659E-01   8.10002       8.16868    
  14  0.596329     -0.516963     -0.788148E-01  0.788148E-01   8.08776       8.16657    
  15  0.286246      -1.25090     -0.190709      0.190709       8.11238       8.30309    
  16  0.590425     -0.526913     -0.803317E-01  0.803317E-01   8.09327       8.17360    
  17  0.853637     -0.158249     -0.241262E-01  0.241262E-01   8.09541       8.11954    
  18  0.245572      -1.40416     -0.214075      0.214075       8.09048       8.30455    
  19  0.375654     -0.979088     -0.149269      0.149269       8.05853       8.20780    
  20  0.281654      -1.26708     -0.193175      0.193175       8.08186       8.27504    
  21  0.443392     -0.813302     -0.123994      0.123994       8.11561       8.23961    
  22  0.442934     -0.814335     -0.124151      0.124151       8.10547       8.22963    
  23  0.171790      -1.76149     -0.268551      0.268551       8.06114       8.32969    
  24  0.802582     -0.219921     -0.335286E-01  0.335286E-01   8.12070       8.15422    
  25  0.162733      -1.81564     -0.276808      0.276808       8.10077       8.37758    
  26  0.838320     -0.176355     -0.268866E-01  0.268866E-01   8.13016       8.15705    
  27  0.210754      -1.55706     -0.237386      0.237386       8.15873       8.39612    
  28  0.240377      -1.42554     -0.217335      0.217335       8.00020       8.21753    
  29  0.173042E-01  -4.05680     -0.618489      0.618489       8.06810       8.68659    
  30  0.640146     -0.446059     -0.680049E-01  0.680049E-01   8.03442       8.10242    
  31  0.749210     -0.288736     -0.440198E-01  0.440198E-01   8.07112       8.11514    
  32  0.666162     -0.406222     -0.619315E-01  0.619315E-01   8.11412       8.17605    
  33  0.601746     -0.507920     -0.774360E-01  0.774360E-01   8.15023       8.22767    
  34  0.677044     -0.390020     -0.594613E-01  0.594613E-01   8.06750       8.12696    
  35  0.290379      -1.23657     -0.188524      0.188524       8.08733       8.27585    
  36  0.439723     -0.821610     -0.125260      0.125260       8.18610       8.31136    
  37  0.680091     -0.385528     -0.587765E-01  0.587765E-01   8.04889       8.10767    
  38  0.803784     -0.218425     -0.333004E-01  0.333004E-01   8.02849       8.06179    
  39  0.507823     -0.677622     -0.103308      0.103308       8.20747       8.31078    
  40  0.894573     -0.111408     -0.169850E-01  0.169850E-01   8.10765       8.12463    
  41  0.826908     -0.190062     -0.289763E-01  0.289763E-01   7.99049       8.01946    
  42  0.815562     -0.203878     -0.310827E-01  0.310827E-01   8.07850       8.10958    
  43  0.352457      -1.04283     -0.158987      0.158987       8.17237       8.33136    
  44  0.104059      -2.26279     -0.344979      0.344979       8.15194       8.49692    
  45  0.601892     -0.507677     -0.773990E-01  0.773990E-01   8.09236       8.16975    
  46  0.988184     -0.118862E-01 -0.181213E-02  0.181213E-02   8.13162       8.13343    
  47  0.733912     -0.309366     -0.471651E-01  0.471651E-01   8.11654       8.16370    
  48  0.107394      -2.23125     -0.340170      0.340170       8.09568       8.43585    
  49  0.592150     -0.523995     -0.798868E-01  0.798868E-01   8.18731       8.26719    
  50  0.821901     -0.196136     -0.299023E-01  0.299023E-01   8.06657       8.09648    
  51  0.400070E-01  -3.21870     -0.490714      0.490714       8.16632       8.65703    
  52  0.271211      -1.30486     -0.198935      0.198935       8.17975       8.37868    
  53  0.296309      -1.21635     -0.185441      0.185441       8.05256       8.23800    
  54  0.436334     -0.829346     -0.126440      0.126440       8.24674       8.37318    
  55  0.372372     -0.987863     -0.150607      0.150607       8.09754       8.24814    
  56  0.806182     -0.215446     -0.328463E-01  0.328463E-01   8.08464       8.11748    
  57  0.194087      -1.63945     -0.249946      0.249946       8.06512       8.31507    
  58  0.739876     -0.301273     -0.459312E-01  0.459312E-01   8.06856       8.11449    
  59  0.348380      -1.05446     -0.160760      0.160760       8.11627       8.27703    
  60  0.850149     -0.162343     -0.247504E-01  0.247504E-01   8.32654       8.35129    
  61  0.123296      -2.09317     -0.319118      0.319118       8.06856       8.38768    
  62  0.855160     -0.156467     -0.238545E-01  0.238545E-01   8.07830       8.10216    
  63  0.959969E-01  -2.34344     -0.357274      0.357274       8.04015       8.39743    
  64  0.739916     -0.301218     -0.459229E-01  0.459229E-01   8.25932       8.30524    
  65  0.470406     -0.754159     -0.114977      0.114977       8.24941       8.36439    
  66  0.559264     -0.581134     -0.885981E-01  0.885981E-01   8.10859       8.19719    
  67  0.935836     -0.663155E-01 -0.101103E-01  0.101103E-01   8.32632       8.33643    
  68  0.190508      -1.65806     -0.252784      0.252784       8.55969       8.81247    
  69  0.410140     -0.891256     -0.135878      0.135878       8.14409       8.27997    
  70  0.289980E-01  -3.54053     -0.539779      0.539779       8.16407       8.70385    
loop,thermsimp(1:2)       16  0.222924      0.677557E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    352          8.18          0.86          1.13         24.31          0.08          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.18
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       16
neval is:      351
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       16      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       17
neval is:      351


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      351     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.776913     -0.252427     -0.384843E-01  0.384843E-01   7.99049       8.02897    
   2  0.350417      -1.04863     -0.159871      0.159871       7.98780       8.14767    
   3  0.533846     -0.627648     -0.956895E-01  0.956895E-01   8.04755       8.14324    
   4  0.622955     -0.473280     -0.721550E-01  0.721550E-01   8.02849       8.10064    
   5  0.661091E-01  -2.71645     -0.414142      0.414142       8.06657       8.48072    
   6  0.759206     -0.275482     -0.419992E-01  0.419992E-01   8.07678       8.11878    
   7  0.430535     -0.842727     -0.128480      0.128480       8.03963       8.16811    
   8  0.257678      -1.35604     -0.206739      0.206739       8.07830       8.28504    
   9  0.296561      -1.21550     -0.185312      0.185312       8.03442       8.21973    
  10  0.805929     -0.215760     -0.328941E-01  0.328941E-01   8.04889       8.08179    
  11  0.421616     -0.863661     -0.131671      0.131671       8.07850       8.21017    
  12  0.767803     -0.264223     -0.402827E-01  0.402827E-01   8.06856       8.10884    
  13  0.605260     -0.502097     -0.765483E-01  0.765483E-01   8.07112       8.14767    
  14  0.566784     -0.567776     -0.865616E-01  0.865616E-01   8.08464       8.17120    
  15  0.292740      -1.22847     -0.187289      0.187289       8.09541       8.28270    
  16  0.898463     -0.107069     -0.163235E-01  0.163235E-01   8.10765       8.12397    
  17  0.218067      -1.52295     -0.232185      0.232185       8.06750       8.29969    
  18  0.856756     -0.154603     -0.235703E-01  0.235703E-01   8.13162       8.15519    
  19  0.338883      -1.08210     -0.164974      0.164974       8.12070       8.28567    
  20  0.796034     -0.228113     -0.347775E-01  0.347775E-01   8.13016       8.16494    
  21  0.778636     -0.250212     -0.381466E-01  0.381466E-01   8.11654       8.15468    
  22  0.575989     -0.551667     -0.841057E-01  0.841057E-01   8.08776       8.17186    
  23  0.355531      -1.03414     -0.157663      0.157663       8.10002       8.25768    
  24  0.164949      -1.80212     -0.274746      0.274746       8.09236       8.36710    
  25  0.315998      -1.15202     -0.175634      0.175634       8.09327       8.26890    
  26  0.330933      -1.10584     -0.168593      0.168593       8.11412       8.28272    
  27  0.429436     -0.845283     -0.128869      0.128869       8.07625       8.20512    
  28  0.464808     -0.766130     -0.116802      0.116802       8.06063       8.17743    
  29  0.192211      -1.64916     -0.251427      0.251427       8.08698       8.33841    
  30  0.866849     -0.142891     -0.217847E-01  0.217847E-01   8.10859       8.13038    
  31  0.474973     -0.744498     -0.113504      0.113504       8.03863       8.15213    
  32  0.667713     -0.403897     -0.615769E-01  0.615769E-01   8.05853       8.12011    
  33  0.994155     -0.586200E-02 -0.893704E-03  0.893704E-03   8.04862       8.04951    
  34  0.577739     -0.548634     -0.836432E-01  0.836432E-01   8.00020       8.08384    
  35  0.381919     -0.962546     -0.146747      0.146747       8.09625       8.24299    
  36  0.733204     -0.310331     -0.473122E-01  0.473122E-01   8.15023       8.19755    
  37  0.492382     -0.708500     -0.108016      0.108016       8.10547       8.21349    
  38  0.188899E-01  -3.96913     -0.605122      0.605122       8.01090       8.61602    
  39  0.741920E-01  -2.60110     -0.396556      0.396556       8.05256       8.44911    
  40  0.210592      -1.55783     -0.237503      0.237503       8.11561       8.35312    
  41  0.682838     -0.381498     -0.581621E-01  0.581621E-01   8.09754       8.15570    
  42  0.656831     -0.420328     -0.640821E-01  0.640821E-01   8.18731       8.25139    
  43  0.444670     -0.810424     -0.123555      0.123555       8.08186       8.20542    
  44  0.872301     -0.136621     -0.208288E-01  0.208288E-01   8.08733       8.10815    
  45  0.932741     -0.696282E-01 -0.106153E-01  0.106153E-01   8.11627       8.12688    
  46  0.601727     -0.507951     -0.774408E-01  0.774408E-01   8.14409       8.22153    
  47  0.940344     -0.615097E-01 -0.937759E-02  0.937759E-02   8.11238       8.12175    
  48  0.208477E-01  -3.87051     -0.590087      0.590087       8.09048       8.68056    
  49  0.257831      -1.35545     -0.206648      0.206648       8.25932       8.46597    
  50  0.522803     -0.648550     -0.988761E-01  0.988761E-01   8.20747       8.30634    
  51  0.676437     -0.390915     -0.595978E-01  0.595978E-01   8.18610       8.24570    
  52  0.612346     -0.490458     -0.747738E-01  0.747738E-01   8.06512       8.13990    
  53  0.206854      -1.57574     -0.240233      0.240233       8.06114       8.30137    
  54  0.201156      -1.60367     -0.244492      0.244492       8.17237       8.41686    
  55  0.785118     -0.241921     -0.368826E-01  0.368826E-01   8.32632       8.36320    
  56  0.534951     -0.625580     -0.953741E-01  0.953741E-01   8.06697       8.16234    
  57  0.147432      -1.91439     -0.291863      0.291863       8.32654       8.61840    
  58  0.696605     -0.361537     -0.551190E-01  0.551190E-01   8.24941       8.30453    
  59  0.711810     -0.339944     -0.518269E-01  0.518269E-01   8.24674       8.29856    
  60  0.934269     -0.679906E-01 -0.103656E-01  0.103656E-01   8.10077       8.11114    
  61  0.821040     -0.197183     -0.300619E-01  0.300619E-01   8.17975       8.20981    
  62  0.682914     -0.381386     -0.581450E-01  0.581450E-01   8.06856       8.12670    
  63  0.660876     -0.414189     -0.631461E-01  0.631461E-01   8.15873       8.22188    
  64  0.653213     -0.425852     -0.649241E-01  0.649241E-01   8.04015       8.10508    
  65  0.327611      -1.11593     -0.170131      0.170131       8.09568       8.26581    
  66  0.191936      -1.65059     -0.251645      0.251645       8.15194       8.40359    
  67  0.417647E-01  -3.17570     -0.484159      0.484159       8.16632       8.65048    
  68  0.629872     -0.462239     -0.704717E-01  0.704717E-01   8.06810       8.13857    
  69  0.391125     -0.938727     -0.143116      0.143116       8.16407       8.30718    
  70  0.111121      -2.19714     -0.334970      0.334970       8.17713       8.51210    
loop,thermsimp(1:2)       17  0.384843E-01  0.159871    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    353          8.06          0.88          1.13         24.38          0.05          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    354          8.27          0.86          1.13         24.48          0.10          0.05         26.62
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       17
neval is:      353
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       17      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       18
neval is:      353


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      353     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.240395      -1.42547     -0.217323      0.217323       7.99049       8.20781    
   2  0.711556E-02  -4.94547     -0.753973      0.753973       8.04862       8.80259    
   3  0.909796     -0.945347E-01 -0.144125E-01  0.144125E-01   8.04889       8.06331    
   4  0.659218     -0.416702     -0.635292E-01  0.635292E-01   8.00020       8.06373    
   5  0.833482     -0.182144     -0.277691E-01  0.277691E-01   8.02849       8.05626    
   6  0.726295E-01  -2.62238     -0.399801      0.399801       8.04015       8.43995    
   7  0.687091     -0.375288     -0.572154E-01  0.572154E-01   8.08733       8.14454    
   8  0.860775     -0.149922     -0.228567E-01  0.228567E-01   8.06856       8.09141    
   9  0.846215     -0.166982     -0.254576E-01  0.254576E-01   8.10077       8.12623    
  10  0.398551     -0.919919     -0.140248      0.140248       8.07678       8.21703    
  11  0.416092     -0.876849     -0.133682      0.133682       8.05853       8.19221    
  12  0.463389     -0.769189     -0.117268      0.117268       8.11238       8.22965    
  13  0.207356      -1.57332     -0.239864      0.239864       8.10765       8.34751    
  14  0.133003      -2.01738     -0.307565      0.307565       8.06856       8.37612    
  15  0.464971     -0.765779     -0.116749      0.116749       8.11627       8.23302    
  16  0.568281     -0.565140     -0.861597E-01  0.861597E-01   8.10859       8.19475    
  17  0.638811     -0.448147     -0.683232E-01  0.683232E-01   8.06810       8.13642    
  18  0.865664     -0.144259     -0.219933E-01  0.219933E-01   8.06512       8.08712    
  19  0.475002     -0.744436     -0.113495      0.113495       8.04755       8.16104    
  20  0.537086     -0.621597     -0.947670E-01  0.947670E-01   8.07112       8.16589    
  21  0.782345     -0.245459     -0.374220E-01  0.374220E-01   7.98780       8.02522    
  22  0.725469     -0.320937     -0.489291E-01  0.489291E-01   8.03863       8.08756    
  23  0.701426E-01  -2.65723     -0.405113      0.405113       8.11654       8.52165    
  24  0.297043      -1.21388     -0.185065      0.185065       8.13162       8.31668    
  25  0.444870     -0.809973     -0.123486      0.123486       8.09754       8.22102    
  26  0.685684     -0.377338     -0.575279E-01  0.575279E-01   8.06697       8.12450    
  27  0.651244     -0.428871     -0.653845E-01  0.653845E-01   8.13016       8.19555    
  28  0.269082      -1.31274     -0.200136      0.200136       8.03963       8.23976    
  29  0.177107      -1.73100     -0.263904      0.263904       8.08464       8.34854    
  30  0.766464     -0.265968     -0.405487E-01  0.405487E-01   8.08776       8.12831    
  31  0.801833     -0.220855     -0.336709E-01  0.336709E-01   8.06063       8.09430    
  32  0.759414     -0.275209     -0.419575E-01  0.419575E-01   8.15023       8.19219    
  33  0.566307     -0.568618     -0.866899E-01  0.866899E-01   8.07625       8.16294    
  34  0.297948      -1.21084     -0.184601      0.184601       8.08186       8.26646    
  35  0.430097E-01  -3.14633     -0.479680      0.479680       8.17975       8.65943    
  36  0.529414     -0.635984     -0.969603E-01  0.969603E-01   8.07850       8.17546    
  37  0.717133     -0.332494     -0.506910E-01  0.506910E-01   8.10547       8.15616    
  38  0.209457      -1.56323     -0.238326      0.238326       8.03442       8.27274    
  39  0.732428     -0.311390     -0.474736E-01  0.474736E-01   8.14409       8.19157    
  40  0.697782     -0.359849     -0.548615E-01  0.548615E-01   8.15873       8.21360    
  41  0.977227     -0.230362E-01 -0.351203E-02  0.351203E-02   8.09625       8.09976    
  42  0.744700     -0.294773     -0.449403E-01  0.449403E-01   8.18610       8.23104    
  43  0.713341     -0.337796     -0.514994E-01  0.514994E-01   8.18731       8.23881    
  44  0.497823     -0.697510     -0.106340      0.106340       8.10002       8.20636    
  45  0.968758     -0.317404E-01 -0.483905E-02  0.483905E-02   8.09568       8.10052    
  46  0.287665      -1.24596     -0.189955      0.189955       8.09327       8.28322    
  47  0.964672     -0.359674E-01 -0.548348E-02  0.548348E-02   8.09541       8.10090    
  48  0.733769     -0.309561     -0.471949E-01  0.471949E-01   8.11412       8.16132    
  49  0.692680     -0.367187     -0.559804E-01  0.559804E-01   8.07830       8.13428    
  50  0.328873      -1.11208     -0.169545      0.169545       8.12070       8.29024    
  51  0.744920     -0.294478     -0.448953E-01  0.448953E-01   8.24674       8.29163    
  52  0.655188     -0.422834     -0.644640E-01  0.644640E-01   8.06750       8.13197    
  53  0.255467      -1.36466     -0.208052      0.208052       8.06114       8.26919    
  54  0.262199E-02  -5.94382     -0.906178      0.906178       8.24941       9.15559    
  55  0.538310     -0.619321     -0.944199E-01  0.944199E-01   8.20747       8.30189    
  56  0.456270     -0.784671     -0.119629      0.119629       8.16407       8.28370    
  57  0.990209     -0.983957E-02 -0.150011E-02  0.150011E-02   8.08698       8.08848    
  58  0.262373      -1.33799     -0.203986      0.203986       8.11561       8.31960    
  59  0.645275     -0.438079     -0.667883E-01  0.667883E-01   8.32632       8.39311    
  60  0.423351     -0.859554     -0.131045      0.131045       8.09236       8.22340    
  61  0.353204      -1.04071     -0.158663      0.158663       8.15194       8.31060    
  62  0.721881     -0.325895     -0.496850E-01  0.496850E-01   8.17237       8.22206    
  63  0.213966      -1.54194     -0.235079      0.235079       8.05256       8.28764    
  64  0.176516      -1.73434     -0.264413      0.264413       8.25932       8.52373    
  65  0.885542     -0.121555     -0.185320E-01  0.185320E-01   8.06657       8.08511    
  66  0.551521     -0.595076     -0.907236E-01  0.907236E-01   8.17713       8.26785    
  67  0.847646     -0.165292     -0.251999E-01  0.251999E-01   8.01090       8.03610    
  68  0.825749E-01  -2.49405     -0.380236      0.380236       8.32654       8.70677    
  69  0.123448      -2.09193     -0.318930      0.318930       8.16632       8.48525    
  70  0.384918     -0.954725     -0.145555      0.145555       8.06036       8.20592    
loop,thermsimp(1:2)       18  0.217323      0.753973    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    355          8.12          0.86          1.12         24.35          0.09          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    356          8.33          0.86          1.13         24.30          0.09          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       18
neval is:      355
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       18      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       19
neval is:      355


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      355     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.722200     -0.325453     -0.496176E-01  0.496176E-01   7.98780       8.03742    
   2  0.240049      -1.42691     -0.217543      0.217543       8.01090       8.22844    
   3  0.365543      -1.00637     -0.153428      0.153428       8.02849       8.18192    
   4  0.399010     -0.918769     -0.140073      0.140073       8.04889       8.18897    
   5  0.685268     -0.377945     -0.576204E-01  0.576204E-01   8.00020       8.05782    
   6  0.335805E-01  -3.39381     -0.517411      0.517411       8.06657       8.58398    
   7  0.820520     -0.197817     -0.301586E-01  0.301586E-01   8.06512       8.09528    
   8  0.756560     -0.278973     -0.425315E-01  0.425315E-01   8.03863       8.08116    
   9  0.869461     -0.139882     -0.213260E-01  0.213260E-01   8.08698       8.10830    
  10  0.787378     -0.239047     -0.364444E-01  0.364444E-01   8.06856       8.10500    
  11  0.330926      -1.10586     -0.168596      0.168596       8.06063       8.22923    
  12  0.339084E-01  -3.38409     -0.515929      0.515929       8.09625       8.61218    
  13  0.672805     -0.396300     -0.604188E-01  0.604188E-01   8.09568       8.15610    
  14  0.822413     -0.195513     -0.298073E-01  0.298073E-01   8.09541       8.12522    
  15  0.928870     -0.737865E-01 -0.112493E-01  0.112493E-01   8.06697       8.07822    
  16  0.778944     -0.249816     -0.380863E-01  0.380863E-01   8.10077       8.13886    
  17  0.301602E-01  -3.50123     -0.533788      0.533788       8.08776       8.62154    
  18  0.292626      -1.22886     -0.187349      0.187349       8.06750       8.25485    
  19  0.149515      -1.90036     -0.289723      0.289723       8.07830       8.36802    
  20  0.500330E-01  -2.99507     -0.456620      0.456620       8.06810       8.52472    
  21  0.759114E-01  -2.57819     -0.393063      0.393063       8.08733       8.48039    
  22  0.613440     -0.488673     -0.745017E-01  0.745017E-01   8.10547       8.17998    
  23  0.132502      -2.02116     -0.308140      0.308140       8.04755       8.35569    
  24  0.189750E-02  -6.26722     -0.955483      0.955483       8.11412       9.06961    
  25  0.507622     -0.678018     -0.103369      0.103369       8.07625       8.17962    
  26  0.378733     -0.970924     -0.148024      0.148024       8.07112       8.21915    
  27  0.139411      -1.97033     -0.300390      0.300390       8.07850       8.37889    
  28  0.298599      -1.20865     -0.184268      0.184268       8.14409       8.32836    
  29  0.767617     -0.264464     -0.403194E-01  0.403194E-01   8.15023       8.19055    
  30  0.656077     -0.421478     -0.642573E-01  0.642573E-01   8.05853       8.12279    
  31  0.701883     -0.353988     -0.539680E-01  0.539680E-01   8.10859       8.16256    
  32  0.940950     -0.608655E-01 -0.927938E-02  0.927938E-02   8.13016       8.13944    
  33  0.621043     -0.476355     -0.726237E-01  0.726237E-01   8.06036       8.13298    
  34  0.622910     -0.473353     -0.721660E-01  0.721660E-01   8.10002       8.17218    
  35  0.525019     -0.644320     -0.982312E-01  0.982312E-01   7.99049       8.08872    
  36  0.871126     -0.137969     -0.210343E-01  0.210343E-01   8.15873       8.17977    
  37  0.475532     -0.743322     -0.113325      0.113325       8.07678       8.19011    
  38  0.320094      -1.13914     -0.173670      0.173670       8.09754       8.27121    
  39  0.688986     -0.372534     -0.567955E-01  0.567955E-01   8.17237       8.22917    
  40  0.831218     -0.184863     -0.281837E-01  0.281837E-01   8.09236       8.12054    
  41  0.639633     -0.446861     -0.681271E-01  0.681271E-01   8.11238       8.18050    
  42  0.628257     -0.464807     -0.708631E-01  0.708631E-01   8.18610       8.25696    
  43  0.925835     -0.770596E-01 -0.117483E-01  0.117483E-01   8.11627       8.12802    
  44  0.611089     -0.492512     -0.750870E-01  0.750870E-01   8.18731       8.26239    
  45  0.423003E-01  -3.16296     -0.482216      0.482216       8.03963       8.52184    
  46  0.430763     -0.842198     -0.128399      0.128399       8.08186       8.21026    
  47  0.374764     -0.981459     -0.149630      0.149630       8.17713       8.32676    
  48  0.109336      -2.21333     -0.337438      0.337438       8.06114       8.39858    
  49  0.642636E-02  -5.04735     -0.769504      0.769504       8.03442       8.80392    
  50  0.232984      -1.45679     -0.222097      0.222097       8.09327       8.31536    
  51  0.169005E-01  -4.08041     -0.622088      0.622088       8.16407       8.78616    
  52  0.183441      -1.69586     -0.258546      0.258546       8.05256       8.31110    
  53  0.257429      -1.35701     -0.206886      0.206886       8.12070       8.32758    
  54  0.784332     -0.242922     -0.370353E-01  0.370353E-01   8.24674       8.28377    
  55  0.417881     -0.872558     -0.133028      0.133028       8.20747       8.34050    
  56  0.597408E-01  -2.81774     -0.429585      0.429585       8.15194       8.58153    
  57  0.854186E-01  -2.46019     -0.375074      0.375074       8.13162       8.50669    
  58  0.484163     -0.725335     -0.110582      0.110582       8.11561       8.22620    
  59  0.392210     -0.935958     -0.142694      0.142694       8.10765       8.25034    
  60  0.544229     -0.608385     -0.927526E-01  0.927526E-01   8.08464       8.17739    
  61  0.846696     -0.166413     -0.253709E-01  0.253709E-01   8.06856       8.09393    
  62  0.273327      -1.29709     -0.197750      0.197750       8.32632       8.52407    
  63  0.253790      -1.37125     -0.209057      0.209057       8.04015       8.24921    
  64  0.683640     -0.380324     -0.579832E-01  0.579832E-01   8.16632       8.22430    
  65  0.707324     -0.346266     -0.527907E-01  0.527907E-01   8.11654       8.16933    
  66  0.664908     -0.408107     -0.622188E-01  0.622188E-01   8.25932       8.32154    
  67  0.269947      -1.30953     -0.199647      0.199647       8.17975       8.37939    
  68  0.112661      -2.18338     -0.332871      0.332871       8.32654       8.65941    
  69  0.392076     -0.936299     -0.142745      0.142745       8.04862       8.19136    
  70  0.711292     -0.340672     -0.519379E-01  0.519379E-01   8.11855       8.17049    
loop,thermsimp(1:2)       19  0.496176E-01  0.217543    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    357          8.06          0.86          1.13         24.38          0.09          0.05         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    358          8.34          0.86          1.12         24.35          0.05          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.06
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       19
neval is:      357
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       19      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       20
neval is:      357


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      357     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.311857      -1.16521     -0.177645      0.177645       7.98780       8.16544    
   2  0.362384      -1.01505     -0.154752      0.154752       8.00020       8.15495    
   3  0.900627     -0.104664     -0.159568E-01  0.159568E-01   8.06697       8.08293    
   4  0.233893      -1.45289     -0.221503      0.221503       8.03863       8.26013    
   5  0.183338      -1.69642     -0.258632      0.258632       7.99049       8.24912    
   6  0.351708      -1.04495     -0.159311      0.159311       8.06856       8.22787    
   7  0.979617     -0.205938E-01 -0.313967E-02  0.313967E-02   8.06512       8.06826    
   8  0.801294     -0.221527     -0.337734E-01  0.337734E-01   8.06856       8.10233    
   9  0.423893     -0.858275     -0.130850      0.130850       8.08698       8.21783    
  10  0.486446     -0.720630     -0.109865      0.109865       8.09236       8.20222    
  11  0.430531     -0.842736     -0.128481      0.128481       8.05853       8.18701    
  12  0.214629      -1.53884     -0.234608      0.234608       8.09541       8.33002    
  13  0.860310     -0.150463     -0.229392E-01  0.229392E-01   8.11627       8.13921    
  14  0.450659     -0.797045     -0.121515      0.121515       8.06036       8.18188    
  15  0.867432     -0.142218     -0.216822E-01  0.216822E-01   8.10077       8.12245    
  16  0.850327     -0.162134     -0.247185E-01  0.247185E-01   8.13016       8.15488    
  17  0.914193     -0.897130E-01 -0.136774E-01  0.136774E-01   8.09568       8.10936    
  18  0.908448     -0.960172E-01 -0.146385E-01  0.146385E-01   8.10859       8.12323    
  19  0.349788E-01  -3.35301     -0.511191      0.511191       8.11654       8.62773    
  20  0.825048     -0.192314     -0.293197E-01  0.293197E-01   8.11855       8.14787    
  21  0.628933     -0.463730     -0.706989E-01  0.706989E-01   8.10002       8.17071    
  22  0.756366     -0.279229     -0.425705E-01  0.425705E-01   8.08464       8.12721    
  23  0.545707     -0.605674     -0.923393E-01  0.923393E-01   8.07625       8.16859    
  24  0.653619     -0.425231     -0.648296E-01  0.648296E-01   8.15873       8.22356    
  25  0.781643     -0.246357     -0.375588E-01  0.375588E-01   8.10547       8.14303    
  26  0.444411     -0.811005     -0.123644      0.123644       8.11238       8.23602    
  27  0.223111      -1.50008     -0.228699      0.228699       8.02849       8.25719    
  28  0.143901      -1.93863     -0.295558      0.295558       8.04889       8.34445    
  29  0.419282E-01  -3.17180     -0.483563      0.483563       8.07678       8.56035    
  30  0.407367     -0.898040     -0.136913      0.136913       8.15023       8.28715    
  31  0.722138     -0.325538     -0.496307E-01  0.496307E-01   8.04862       8.09825    
  32  0.290143      -1.23738     -0.188647      0.188647       8.08186       8.27051    
  33  0.236931E-01  -3.74257     -0.570582      0.570582       8.07112       8.64170    
  34  0.198981      -1.61454     -0.246149      0.246149       8.16632       8.41247    
  35  0.765966     -0.266617     -0.406477E-01  0.406477E-01   8.11561       8.15626    
  36  0.522733     -0.648684     -0.988965E-01  0.988965E-01   8.01090       8.10980    
  37  0.297579E-01  -3.51466     -0.535835      0.535835       8.17237       8.70821    
  38  0.175475      -1.74026     -0.265315      0.265315       8.06063       8.32594    
  39  0.311931      -1.16497     -0.177608      0.177608       8.04015       8.21776    
  40  0.310920      -1.16822     -0.178104      0.178104       8.10765       8.28575    
  41  0.122272      -2.10150     -0.320389      0.320389       8.06750       8.38789    
  42  0.949359     -0.519686E-01 -0.792298E-02  0.792298E-02   8.18610       8.19402    
  43  0.500750     -0.691648     -0.105447      0.105447       8.18731       8.29275    
  44  0.729401E-01  -2.61812     -0.399151      0.399151       8.09754       8.49669    
  45  0.952528     -0.486360E-01 -0.741491E-02  0.741491E-02   8.24674       8.25415    
  46  0.718842     -0.330114     -0.503283E-01  0.503283E-01   8.05256       8.10289    
  47  0.529396     -0.636019     -0.969657E-01  0.969657E-01   8.09327       8.19023    
  48  0.314661      -1.15626     -0.176280      0.176280       8.25932       8.43560    
  49  0.947465     -0.539649E-01 -0.822733E-02  0.822733E-02   8.17713       8.18536    
  50  0.613869     -0.487974     -0.743952E-01  0.743952E-01   8.12070       8.19509    
  51  0.303056      -1.19384     -0.182009      0.182009       8.14409       8.32610    
  52  0.749186     -0.288769     -0.440248E-01  0.440248E-01   8.20747       8.25149    
  53  0.671119E-01  -2.70139     -0.411847      0.411847       8.04755       8.45940    
  54  0.545553E-02  -5.21113     -0.794473      0.794473       8.07830       8.87277    
  55  0.866985     -0.142734     -0.217608E-01  0.217608E-01   8.07850       8.10026    
  56  0.622088     -0.474673     -0.723674E-01  0.723674E-01   8.17975       8.25211    
  57  0.471050     -0.752790     -0.114768      0.114768       8.06114       8.17591    
  58  0.433456     -0.835964     -0.127449      0.127449       8.08733       8.21477    
  59  0.946573     -0.549070E-01 -0.837097E-02  0.837097E-02   8.13162       8.13999    
  60  0.795665     -0.228577     -0.348482E-01  0.348482E-01   8.03963       8.07448    
  61  0.536872E-01  -2.92458     -0.445873      0.445873       8.32632       8.77219    
  62  0.761403     -0.272592     -0.415587E-01  0.415587E-01   8.06810       8.10966    
  63  0.615271     -0.485692     -0.740473E-01  0.740473E-01   8.15194       8.22599    
  64  0.585500     -0.535288     -0.816086E-01  0.816086E-01   8.06657       8.14818    
  65  0.649114     -0.432147     -0.658840E-01  0.658840E-01   8.09625       8.16213    
  66  0.550765     -0.596448     -0.909328E-01  0.909328E-01   8.08776       8.17869    
  67  0.495492     -0.702204     -0.107056      0.107056       8.32654       8.43359    
  68  0.303565      -1.19216     -0.181754      0.181754       8.16407       8.34582    
  69  0.645152     -0.438270     -0.668174E-01  0.668174E-01   8.03442       8.10124    
  70  0.582875     -0.539782     -0.822936E-01  0.822936E-01   8.05990       8.14220    
loop,thermsimp(1:2)       20  0.177645      0.154752    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    359          8.12          0.86          1.12         24.42          0.07          0.05         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    360          8.59          0.86          1.13         24.68          0.09          0.05         26.80
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.12
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       20
neval is:      359
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       20      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       21
neval is:      359


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      359     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.307193      -1.18028     -0.179942      0.179942       8.06512       8.24507    
   2  0.575213     -0.553015     -0.843110E-01  0.843110E-01   8.03963       8.12394    
   3  0.632244     -0.458480     -0.698986E-01  0.698986E-01   8.06697       8.13687    
   4  0.819203     -0.199424     -0.304035E-01  0.304035E-01   8.04862       8.07902    
   5  0.137693E-02  -6.58790      -1.00437       1.00437       8.07850       9.08287    
   6  0.367814      -1.00018     -0.152484      0.152484       8.03442       8.18690    
   7  0.452636     -0.792666     -0.120848      0.120848       8.06856       8.18940    
   8  0.278102      -1.27977     -0.195110      0.195110       8.05256       8.24767    
   9  0.417803     -0.872745     -0.133056      0.133056       8.09568       8.22874    
  10  0.682140     -0.382521     -0.583181E-01  0.583181E-01   8.06810       8.12642    
  11  0.204733      -1.58605     -0.241804      0.241804       8.01090       8.25270    
  12  0.637442     -0.450292     -0.686503E-01  0.686503E-01   8.10077       8.16942    
  13  0.114518      -2.16702     -0.330378      0.330378       8.10859       8.43897    
  14  0.724207     -0.322678     -0.491947E-01  0.491947E-01   8.08464       8.13383    
  15  0.461399     -0.773492     -0.117924      0.117924       8.11627       8.23419    
  16  0.731739     -0.312332     -0.476172E-01  0.476172E-01   8.13162       8.17924    
  17  0.773272     -0.257124     -0.392005E-01  0.392005E-01   8.05990       8.09910    
  18  0.789195     -0.236742     -0.360930E-01  0.360930E-01   8.10547       8.14157    
  19  0.762001     -0.271807     -0.414389E-01  0.414389E-01   8.11855       8.15999    
  20  0.933384     -0.689386E-01 -0.105102E-01  0.105102E-01   8.06657       8.07708    
  21  0.694037     -0.365230     -0.556819E-01  0.556819E-01   8.13016       8.18584    
  22  0.423570     -0.859038     -0.130966      0.130966       8.00020       8.13117    
  23  0.272919      -1.29858     -0.197978      0.197978       8.11561       8.31359    
  24  0.535843     -0.623914     -0.951202E-01  0.951202E-01   8.09625       8.19137    
  25  0.902288     -0.102822     -0.156759E-01  0.156759E-01   7.98780       8.00348    
  26  0.479374     -0.735275     -0.112098      0.112098       8.07625       8.18835    
  27  0.494900E-01  -3.00599     -0.458284      0.458284       8.10002       8.55830    
  28  0.921867     -0.813539E-01 -0.124030E-01  0.124030E-01   8.06114       8.07354    
  29  0.132425      -2.02174     -0.308228      0.308228       8.08776       8.39598    
  30  0.640539     -0.445446     -0.679114E-01  0.679114E-01   8.06036       8.12827    
  31  0.215363      -1.53543     -0.234087      0.234087       8.17713       8.41122    
  32  0.437204E-01  -3.12994     -0.477182      0.477182       8.05853       8.53571    
  33  0.166028      -1.79560     -0.273752      0.273752       8.09327       8.36702    
  34  0.425825     -0.853727     -0.130157      0.130157       8.18610       8.31626    
  35  0.810393     -0.210235     -0.320519E-01  0.320519E-01   8.12070       8.15275    
  36  0.855958     -0.155534     -0.237123E-01  0.237123E-01   8.09236       8.11607    
  37  0.830452     -0.185786     -0.283244E-01  0.283244E-01   8.08733       8.11565    
  38  0.658784     -0.417359     -0.636294E-01  0.636294E-01   8.04015       8.10378    
  39  0.910965     -0.932509E-01 -0.142168E-01  0.142168E-01   8.08698       8.10120    
  40  0.603480     -0.505043     -0.769974E-01  0.769974E-01   8.15873       8.23573    
  41  0.702610     -0.352953     -0.538103E-01  0.538103E-01   8.15194       8.20575    
  42  0.329065      -1.11150     -0.169456      0.169456       8.06856       8.23801    
  43  0.790497     -0.235094     -0.358417E-01  0.358417E-01   8.11238       8.14822    
  44  0.641572     -0.443834     -0.676656E-01  0.676656E-01   7.99049       8.05815    
  45  0.650683     -0.429733     -0.655159E-01  0.655159E-01   8.20747       8.27298    
  46  0.194049E-02  -6.24481     -0.952067      0.952067       8.17975       9.13181    
  47  0.662053     -0.412409     -0.628748E-01  0.628748E-01   8.24674       8.30961    
  48  0.294846      -1.22130     -0.186196      0.186196       8.02849       8.21468    
  49  0.709874     -0.342668     -0.522423E-01  0.522423E-01   8.03863       8.09087    
  50  0.700314     -0.356226     -0.543092E-01  0.543092E-01   8.08186       8.13617    
  51  0.639811E-01  -2.74917     -0.419130      0.419130       8.10765       8.52678    
  52  0.251451      -1.38051     -0.210469      0.210469       8.15023       8.36070    
  53  0.828691     -0.187907     -0.286478E-01  0.286478E-01   8.18731       8.21595    
  54  0.962710     -0.380034E-01 -0.579390E-02  0.579390E-02   8.06063       8.06642    
  55  0.429583     -0.844940     -0.128817      0.128817       8.14409       8.27291    
  56  0.871108     -0.137990     -0.210375E-01  0.210375E-01   8.09541       8.11645    
  57  0.328516      -1.11317     -0.169711      0.169711       8.04889       8.21861    
  58  0.401423     -0.912741     -0.139154      0.139154       8.16407       8.30322    
  59  0.671285     -0.398562     -0.607636E-01  0.607636E-01   8.06750       8.12827    
  60  0.919587     -0.838302E-01 -0.127805E-01  0.127805E-01   8.16632       8.17910    
  61  0.209634      -1.56239     -0.238198      0.238198       8.32654       8.56474    
  62  0.894137     -0.111896     -0.170593E-01  0.170593E-01   8.25932       8.27638    
  63  0.623590     -0.472262     -0.719998E-01  0.719998E-01   8.04755       8.11955    
  64  0.469722     -0.755615     -0.115199      0.115199       8.09754       8.21273    
  65  0.927315E-01  -2.37805     -0.362550      0.362550       8.07678       8.43933    
  66  0.663316     -0.410504     -0.625843E-01  0.625843E-01   8.11654       8.17912    
  67  0.972420     -0.279677E-01 -0.426388E-02  0.426388E-02   8.07112       8.07539    
  68  0.594470     -0.520086     -0.792908E-01  0.792908E-01   8.17237       8.25166    
  69  0.421560     -0.863793     -0.131692      0.131692       8.32632       8.45801    
  70  0.878821     -0.129174     -0.196935E-01  0.196935E-01   8.11598       8.13567    
loop,thermsimp(1:2)       21  0.179942      0.843110E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    361          7.97          0.87          1.14         24.33          0.09          0.06         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    362          7.99          0.84          1.13         24.39          0.08          0.05         26.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  360    7.9739        1.117     -1.834      3.242     -102.6      1.359    
                      0.3197      1.349     -99.70      3.666     0.3494E-01

                       2.255     -1.051      1.530      6944.      3342.    

                     -0.1958      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6141.      517.3    

                       1.433     -5.854     -4.338     -8.523      6.514    

                      -14.97     -3.599      8578.      0.000     0.1151E+05



                       1304.     0.1226E+05 -3302.      8798.      4790.    

                       6058.     0.3124E-01 0.1828     0.6801E-03 0.1142    

                     -0.2486    -0.9944E-01 0.1937     0.1080     0.6167E-01



                     -0.5007    -0.8030      0.000     0.9662E-01-0.6759E-01

                      0.1377E-01 0.1122    -0.7116     0.2983E-03 0.3742E-01

                      0.4338E-01 0.1247    -0.6708     -1.221      6983.    



                      -1.094     -1.246     -2.254     -2.301    -0.3807    

                     -0.3252      9.227      8.672    -0.1871E+05 -4.000    

                     -0.5835     -2.248      9.296      8.877    -0.1908E+05



                      -4.000     0.5005    -0.4618      8.850      9.080    

                     -0.1908E+05 -7.000    -0.7526    -0.6557      9.030    

                       8.744    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       21
neval is:      361
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       21      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       22
neval is:      361


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      361     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.838898     -0.175666     -0.267815E-01  0.267815E-01   7.98780       8.01458    
   2  0.801853     -0.220830     -0.336671E-01  0.336671E-01   7.99049       8.02415    
   3  0.768645     -0.263126     -0.401154E-01  0.401154E-01   8.06063       8.10074    
   4  0.855557     -0.156003     -0.237838E-01  0.237838E-01   8.06114       8.08492    
   5  0.845591     -0.167720     -0.255701E-01  0.255701E-01   8.07112       8.09669    
   6  0.350050      -1.04968     -0.160031      0.160031       8.06657       8.22661    
   7  0.927608     -0.751463E-01 -0.114566E-01  0.114566E-01   8.04862       8.06007    
   8  0.655345E-01  -2.72518     -0.415473      0.415473       8.03863       8.45410    
   9  0.355481      -1.03428     -0.157684      0.157684       8.05990       8.21759    
  10  0.728523     -0.316737     -0.482888E-01  0.482888E-01   8.08698       8.13527    
  11  0.573220     -0.556486     -0.848402E-01  0.848402E-01   8.04015       8.12499    
  12  0.112478      -2.18499     -0.333118      0.333118       8.08733       8.42044    
  13  0.338739      -1.08253     -0.165039      0.165039       8.09236       8.25739    
  14  0.239648      -1.42858     -0.217798      0.217798       8.09541       8.31321    
  15  0.918959     -0.845134E-01 -0.128847E-01  0.128847E-01   8.04755       8.06043    
  16  0.283771      -1.25959     -0.192033      0.192033       8.03963       8.23166    
  17  0.414404     -0.880913     -0.134301      0.134301       8.06810       8.20240    
  18  0.716403     -0.333512     -0.508463E-01  0.508463E-01   8.06750       8.11835    
  19  0.317726      -1.14657     -0.174802      0.174802       8.06036       8.23516    
  20  0.339005      -1.08174     -0.164919      0.164919       8.00020       8.16512    
  21  0.163059      -1.81364     -0.276503      0.276503       8.08464       8.36114    
  22  0.477081     -0.740069     -0.112829      0.112829       8.11598       8.22881    
  23  0.105851      -2.24573     -0.342377      0.342377       8.08186       8.42424    
  24  0.840431     -0.173840     -0.265032E-01  0.265032E-01   8.06697       8.09347    
  25  0.235315      -1.44683     -0.220580      0.220580       8.10547       8.32605    
  26  0.865464     -0.144489     -0.220284E-01  0.220284E-01   8.11238       8.13441    
  27  0.909462     -0.949026E-01 -0.144686E-01  0.144686E-01   8.12070       8.13516    
  28  0.152105E-01  -4.18577     -0.638150      0.638150       8.11855       8.75670    
  29  0.962485     -0.382371E-01 -0.582952E-02  0.582952E-02   8.10077       8.10660    
  30  0.259410      -1.34934     -0.205717      0.205717       8.16632       8.37204    
  31  0.364880      -1.00819     -0.153705      0.153705       8.11654       8.27024    
  32  0.467235     -0.760923     -0.116008      0.116008       8.13162       8.24763    
  33  0.844908     -0.168527     -0.256932E-01  0.256932E-01   8.13016       8.15586    
  34  0.188232      -1.67008     -0.254616      0.254616       8.03442       8.28903    
  35  0.496585     -0.700000     -0.106720      0.106720       8.07625       8.18297    
  36  0.410505     -0.890367     -0.135743      0.135743       8.06856       8.20430    
  37  0.533875     -0.627594     -0.956812E-01  0.956812E-01   8.09625       8.19193    
  38  0.610668     -0.493202     -0.751921E-01  0.751921E-01   8.15194       8.22713    
  39  0.241933      -1.41910     -0.216351      0.216351       8.09754       8.31389    
  40  0.642629     -0.442188     -0.674147E-01  0.674147E-01   8.02849       8.09590    
  41  0.775072     -0.254799     -0.388459E-01  0.388459E-01   8.18731       8.22615    
  42  0.345343      -1.06322     -0.162095      0.162095       8.04889       8.21099    
  43  0.844097     -0.169488     -0.258396E-01  0.258396E-01   8.09568       8.12152    
  44  0.426886     -0.851239     -0.129778      0.129778       8.11627       8.24604    
  45  0.594109     -0.520693     -0.793834E-01  0.793834E-01   8.15873       8.23812    
  46  0.489527     -0.714316     -0.108903      0.108903       8.06856       8.17746    
  47  0.313882      -1.15874     -0.176658      0.176658       8.06512       8.24178    
  48  0.687066     -0.375325     -0.572211E-01  0.572211E-01   8.05256       8.10978    
  49  0.394505     -0.930124     -0.141804      0.141804       8.17237       8.31418    
  50  0.971200     -0.292233E-01 -0.445529E-02  0.445529E-02   8.01090       8.01535    
  51  0.916939     -0.867145E-01 -0.132202E-01  0.132202E-01   8.14409       8.15731    
  52  0.968457     -0.320511E-01 -0.488643E-02  0.488643E-02   8.20747       8.21235    
  53  0.437414     -0.826876     -0.126063      0.126063       8.25932       8.38538    
  54  0.647516     -0.434611     -0.662596E-01  0.662596E-01   8.16407       8.23033    
  55  0.181293      -1.70764     -0.260342      0.260342       8.24674       8.50708    
  56  0.836714     -0.178273     -0.271789E-01  0.271789E-01   8.11561       8.14279    
  57  0.940459     -0.613876E-01 -0.935897E-02  0.935897E-02   8.18610       8.19546    
  58  0.141896      -1.95266     -0.297697      0.297697       8.15023       8.44793    
  59  0.111323      -2.19532     -0.334692      0.334692       8.09327       8.42796    
  60  0.721494E-01  -2.62902     -0.400812      0.400812       8.08776       8.48857    
  61  0.618358     -0.480687     -0.732842E-01  0.732842E-01   8.17713       8.25041    
  62  0.825766     -0.191444     -0.291870E-01  0.291870E-01   8.10859       8.13778    
  63  0.438611     -0.824143     -0.125647      0.125647       8.07678       8.20243    
  64  0.158533      -1.84179     -0.280794      0.280794       8.32632       8.60711    
  65  0.750786     -0.286635     -0.436996E-01  0.436996E-01   8.10765       8.15135    
  66  0.936921     -0.651566E-01 -0.993360E-02  0.993360E-02   8.05853       8.06846    
  67  0.652715     -0.426615     -0.650406E-01  0.650406E-01   8.10002       8.16506    
  68  0.471604     -0.751616     -0.114589      0.114589       8.32654       8.44113    
  69  0.883538     -0.123821     -0.188773E-01  0.188773E-01   8.07850       8.09738    
  70  0.267870      -1.31725     -0.200825      0.200825       7.97387       8.17469    
loop,thermsimp(1:2)       22  0.267815E-01  0.336671E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    363          8.25          0.86          1.13         24.32          0.07          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.25
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       22
neval is:      362
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       22      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       23
neval is:      362


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      362     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.848355     -0.164456     -0.250725E-01  0.250725E-01   7.98780       8.01287    
   2  0.848474     -0.164316     -0.250512E-01  0.250512E-01   8.01090       8.03595    
   3  0.146795      -1.91872     -0.292522      0.292522       7.99049       8.28301    
   4  0.398624     -0.919738     -0.140221      0.140221       8.04862       8.18884    
   5  0.888093     -0.118679     -0.180934E-01  0.180934E-01   8.04755       8.06564    
   6  0.475009     -0.744421     -0.113492      0.113492       8.05853       8.17202    
   7  0.120824      -2.11342     -0.322206      0.322206       8.06114       8.38335    
   8  0.270052      -1.30914     -0.199588      0.199588       8.06697       8.26656    
   9  0.201748E-01  -3.90332     -0.595090      0.595090       8.02849       8.62358    
  10  0.999386     -0.614559E-03 -0.936939E-04  0.936939E-04   8.07112       8.07122    
  11  0.212655      -1.54808     -0.236017      0.236017       8.07850       8.31452    
  12  0.197911      -1.61994     -0.246971      0.246971       8.06063       8.30760    
  13  0.786394     -0.240297     -0.366351E-01  0.366351E-01   8.10077       8.13741    
  14  0.781263     -0.246844     -0.376331E-01  0.376331E-01   8.05256       8.09019    
  15  0.788011     -0.238244     -0.363220E-01  0.363220E-01   8.06750       8.10383    
  16  0.956387     -0.445927E-01 -0.679847E-02  0.679847E-02   8.09568       8.10248    
  17  0.717415     -0.332100     -0.506311E-01  0.506311E-01   8.04015       8.09078    
  18  0.808756     -0.212258     -0.323602E-01  0.323602E-01   8.11238       8.14474    
  19  0.756838     -0.278606     -0.424756E-01  0.424756E-01   8.12070       8.16317    
  20  0.570684     -0.560919     -0.855162E-01  0.855162E-01   8.08698       8.17249    
  21  0.946031     -0.554796E-01 -0.845827E-02  0.845827E-02   8.10859       8.11705    
  22  0.678634E-01  -2.69026     -0.410149      0.410149       8.11561       8.52576    
  23  0.631502     -0.459654     -0.700775E-01  0.700775E-01   8.10765       8.17772    
  24  0.114784E-01  -4.46729     -0.681070      0.681070       8.13016       8.81123    
  25  0.549681     -0.598417     -0.912330E-01  0.912330E-01   8.14409       8.23533    
  26  0.846433     -0.166725     -0.254184E-01  0.254184E-01   8.10002       8.12543    
  27  0.441841     -0.816805     -0.124528      0.124528       8.00020       8.12473    
  28  0.299100      -1.20698     -0.184012      0.184012       7.97387       8.15788    
  29  0.378130     -0.972517     -0.148267      0.148267       8.06856       8.21683    
  30  0.830469     -0.185764     -0.283211E-01  0.283211E-01   8.07625       8.10457    
  31  0.675108     -0.392883     -0.598979E-01  0.598979E-01   8.09625       8.15615    
  32  0.997619     -0.238377E-02 -0.363422E-03  0.363422E-03   8.18610       8.18646    
  33  0.897623     -0.108005     -0.164661E-01  0.164661E-01   8.06810       8.08457    
  34  0.591811E-01  -2.82715     -0.431020      0.431020       8.07678       8.50780    
  35  0.229825      -1.47044     -0.224179      0.224179       8.06856       8.29273    
  36  0.654017     -0.424622     -0.647367E-01  0.647367E-01   8.04889       8.11363    
  37  0.305777      -1.18490     -0.180647      0.180647       8.20747       8.38811    
  38  0.936135     -0.659954E-01 -0.100615E-01  0.100615E-01   8.05990       8.06996    
  39  0.698153     -0.359317     -0.547804E-01  0.547804E-01   8.18731       8.24209    
  40  0.829975     -0.186360     -0.284120E-01  0.284120E-01   8.06657       8.09499    
  41  0.951351     -0.498721E-01 -0.760335E-02  0.760335E-02   8.15194       8.15954    
  42  0.883299     -0.124092     -0.189187E-01  0.189187E-01   8.11598       8.13490    
  43  0.910087     -0.942154E-01 -0.143638E-01  0.143638E-01   8.16407       8.17843    
  44  0.590840     -0.526210     -0.802245E-01  0.802245E-01   8.03963       8.11985    
  45  0.146785      -1.91879     -0.292533      0.292533       8.06036       8.35289    
  46  0.830381E-01  -2.48846     -0.379383      0.379383       8.15873       8.53812    
  47  0.289482      -1.23966     -0.188995      0.188995       8.06512       8.25412    
  48  0.594462     -0.520098     -0.792927E-01  0.792927E-01   8.11627       8.19556    
  49  0.241311      -1.42167     -0.216743      0.216743       8.13162       8.34836    
  50  0.612368     -0.490422     -0.747684E-01  0.747684E-01   8.17713       8.25190    
  51  0.952207     -0.489727E-01 -0.746624E-02  0.746624E-02   8.09236       8.09982    
  52  0.857144     -0.154149     -0.235011E-01  0.235011E-01   8.11654       8.14004    
  53  0.221746      -1.50622     -0.229634      0.229634       8.03442       8.26405    
  54  0.874757     -0.133809     -0.204002E-01  0.204002E-01   8.09541       8.11581    
  55  0.474241     -0.746040     -0.113739      0.113739       8.09754       8.21127    
  56  0.679995E-01  -2.68826     -0.409844      0.409844       8.17237       8.58222    
  57  0.276977      -1.28382     -0.195728      0.195728       8.10547       8.30120    
  58  0.308562      -1.17583     -0.179264      0.179264       8.08464       8.26390    
  59  0.910099     -0.942023E-01 -0.143618E-01  0.143618E-01   8.16632       8.18068    
  60  0.189281      -1.66452     -0.253768      0.253768       8.25932       8.51309    
  61  0.759386     -0.275245     -0.419631E-01  0.419631E-01   8.08733       8.12929    
  62  0.464823     -0.766099     -0.116797      0.116797       8.08186       8.19866    
  63  0.428490     -0.847488     -0.129206      0.129206       8.09327       8.22247    
  64  0.377334     -0.974624     -0.148588      0.148588       8.32654       8.47513    
  65  0.168846      -1.77877     -0.271186      0.271186       8.15023       8.42142    
  66  0.816398     -0.202853     -0.309264E-01  0.309264E-01   8.03863       8.06955    
  67  0.663000     -0.410981     -0.626570E-01  0.626570E-01   8.08776       8.15041    
  68  0.805080     -0.216814     -0.330549E-01  0.330549E-01   8.24674       8.27979    
  69  0.767976E-01  -2.56658     -0.391294      0.391294       8.32632       8.71761    
  70  0.646958     -0.435474     -0.663911E-01  0.663911E-01   8.24556       8.31195    
loop,thermsimp(1:2)       23  0.250725E-01  0.250512E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    364          8.03          0.86          1.13         24.39          0.05          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    365          8.27          0.86          1.13         24.35          0.04          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       23
neval is:      364
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       23      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       24
neval is:      364


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      364     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.102026      -2.28253     -0.347988      0.347988       7.98780       8.33579    
   2  0.372115     -0.988552     -0.150712      0.150712       8.01090       8.16161    
   3  0.732875     -0.310780     -0.473807E-01  0.473807E-01   8.04755       8.09493    
   4  0.341646      -1.07398     -0.163736      0.163736       8.03863       8.20236    
   5  0.406512     -0.900141     -0.137233      0.137233       8.05990       8.19714    
   6  0.271848      -1.30251     -0.198577      0.198577       8.07112       8.26970    
   7  0.738418     -0.303245     -0.462318E-01  0.462318E-01   8.06810       8.11433    
   8  0.903199     -0.101813     -0.155221E-01  0.155221E-01   8.05256       8.06808    
   9  0.511789     -0.669842     -0.102122      0.102122       8.04015       8.14227    
  10  0.202674      -1.59616     -0.243346      0.243346       8.06657       8.30992    
  11  0.325695      -1.12179     -0.171026      0.171026       8.09236       8.26338    
  12  0.719720     -0.328893     -0.501421E-01  0.501421E-01   8.09568       8.14582    
  13  0.715609     -0.334622     -0.510155E-01  0.510155E-01   8.06750       8.11852    
  14  0.973328     -0.270339E-01 -0.412152E-02  0.412152E-02   8.07625       8.08037    
  15  0.373998     -0.983504     -0.149942      0.149942       8.04889       8.19884    
  16  0.977965     -0.222815E-01 -0.339697E-02  0.339697E-02   8.09541       8.09881    
  17  0.105495      -2.24909     -0.342890      0.342890       8.10859       8.45148    
  18  0.729809     -0.314973     -0.480199E-01  0.480199E-01   8.03963       8.08765    
  19  0.378008     -0.972839     -0.148316      0.148316       8.00020       8.14852    
  20  0.678326     -0.388127     -0.591727E-01  0.591727E-01   8.10002       8.15919    
  21  0.671993     -0.397507     -0.606029E-01  0.606029E-01   8.08733       8.14793    
  22  0.515926     -0.661792     -0.100895      0.100895       8.11598       8.21688    
  23  0.363490      -1.01200     -0.154287      0.154287       8.10077       8.25506    
  24  0.206319      -1.57833     -0.240628      0.240628       8.11654       8.35717    
  25  0.755157E-01  -2.58341     -0.393860      0.393860       8.11238       8.50624    
  26  0.413763     -0.882461     -0.134538      0.134538       8.08776       8.22229    
  27  0.279023      -1.27646     -0.194605      0.194605       8.09625       8.29085    
  28  0.506422     -0.680385     -0.103730      0.103730       7.97387       8.07759    
  29  0.643082E-02  -5.04665     -0.769399      0.769399       8.15194       8.92134    
  30  0.285888E-01  -3.55474     -0.541946      0.541946       8.12070       8.66264    
  31  0.660419     -0.414880     -0.632515E-01  0.632515E-01   8.05853       8.12178    
  32  0.739369     -0.301959     -0.460358E-01  0.460358E-01   8.08698       8.13301    
  33  0.270269      -1.30834     -0.199465      0.199465       8.10765       8.30711    
  34  0.663889     -0.409640     -0.624526E-01  0.624526E-01   8.16407       8.22652    
  35  0.898739E-01  -2.40935     -0.367322      0.367322       8.16632       8.53364    
  36  0.832427     -0.183410     -0.279622E-01  0.279622E-01   8.18610       8.21406    
  37  0.723106     -0.324200     -0.494266E-01  0.494266E-01   8.04862       8.09804    
  38  0.986274     -0.138207E-01 -0.210707E-02  0.210707E-02   8.11627       8.11837    
  39  0.812861     -0.207195     -0.315884E-01  0.315884E-01   8.08186       8.11345    
  40  0.553236     -0.591971     -0.902502E-01  0.902502E-01   8.09754       8.18779    
  41  0.693785E-01  -2.66818     -0.406783      0.406783       8.06856       8.47534    
  42  0.117256      -2.14340     -0.326776      0.326776       8.09327       8.42004    
  43  0.807809     -0.213430     -0.325389E-01  0.325389E-01   8.14409       8.17663    
  44  0.900249     -0.105084     -0.160208E-01  0.160208E-01   8.18731       8.20333    
  45  0.753470     -0.283066     -0.431554E-01  0.431554E-01   8.17713       8.22028    
  46  0.127159      -2.06232     -0.314415      0.314415       8.06512       8.37954    
  47  0.535389     -0.624762     -0.952495E-01  0.952495E-01   8.08464       8.17989    
  48  0.957281     -0.436582E-01 -0.665600E-02  0.665600E-02   8.03442       8.04107    
  49  0.227700      -1.47973     -0.225595      0.225595       8.06697       8.29257    
  50  0.636404     -0.451921     -0.688986E-01  0.688986E-01   8.24674       8.31564    
  51  0.905015     -0.998042E-01 -0.152159E-01  0.152159E-01   7.99049       8.00570    
  52  0.555191     -0.588444     -0.897125E-01  0.897125E-01   8.06856       8.15827    
  53  0.687780     -0.374286     -0.570626E-01  0.570626E-01   8.10547       8.16254    
  54  0.759422E-01  -2.57778     -0.393001      0.393001       8.06063       8.45363    
  55  0.374598     -0.981902     -0.149698      0.149698       8.24556       8.39525    
  56  0.399521     -0.917488     -0.139878      0.139878       8.07850       8.21838    
  57  0.997363     -0.264016E-02 -0.402511E-03  0.402511E-03   8.13162       8.13202    
  58  0.164658      -1.80389     -0.275015      0.275015       8.06036       8.33538    
  59  0.697359     -0.360454     -0.549539E-01  0.549539E-01   8.06114       8.11609    
  60  0.822795     -0.195048     -0.297364E-01  0.297364E-01   8.20747       8.23720    
  61  0.755086     -0.280923     -0.428288E-01  0.428288E-01   8.15023       8.19306    
  62  0.912857     -0.911765E-01 -0.139005E-01  0.139005E-01   8.32654       8.34044    
  63  0.891590     -0.114749     -0.174943E-01  0.174943E-01   8.07678       8.09428    
  64  0.461859     -0.772496     -0.117773      0.117773       8.25932       8.37709    
  65  0.695630     -0.362938     -0.553325E-01  0.553325E-01   8.11561       8.17095    
  66  0.168128      -1.78303     -0.271836      0.271836       8.15873       8.43057    
  67  0.552556     -0.593201     -0.904377E-01  0.904377E-01   8.17237       8.26281    
  68  0.450301E-01  -3.10043     -0.472682      0.472682       8.02849       8.50117    
  69  0.675538     -0.392246     -0.598007E-01  0.598007E-01   8.32632       8.38612    
  70  0.455839     -0.785615     -0.119773      0.119773       8.03164       8.15141    
loop,thermsimp(1:2)       24  0.347988      0.150712    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    366          8.07          0.86          1.13         24.34          0.10          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    367          8.44          0.86          1.13         24.33          0.06          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.07
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       24
neval is:      366
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       24      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       25
neval is:      366


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      366     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.962782     -0.379284E-01 -0.578246E-02  0.578246E-02   7.99049       7.99627    
   2  0.355374      -1.03458     -0.157730      0.157730       8.03442       8.19215    
   3  0.294461      -1.22261     -0.186395      0.186395       8.05256       8.23895    
   4  0.644538     -0.439222     -0.669625E-01  0.669625E-01   7.97387       8.04083    
   5  0.741622     -0.298915     -0.455718E-01  0.455718E-01   8.07625       8.12182    
   6  0.805913E-01  -2.51837     -0.383943      0.383943       8.03963       8.42357    
   7  0.498180     -0.696794     -0.106231      0.106231       8.07678       8.18301    
   8  0.771004     -0.260061     -0.396482E-01  0.396482E-01   8.04755       8.08720    
   9  0.753480     -0.283053     -0.431534E-01  0.431534E-01   8.04862       8.09177    
  10  0.460525     -0.775387     -0.118213      0.118213       8.09541       8.21363    
  11  0.918626     -0.848759E-01 -0.129399E-01  0.129399E-01   8.08186       8.09480    
  12  0.355379      -1.03457     -0.157728      0.157728       8.06810       8.22583    
  13  0.664646     -0.408501     -0.622789E-01  0.622789E-01   8.06114       8.12342    
  14  0.328018      -1.11469     -0.169942      0.169942       8.11627       8.28621    
  15  0.529583     -0.635665     -0.969117E-01  0.969117E-01   8.06750       8.16441    
  16  0.259823      -1.34775     -0.205475      0.205475       8.05853       8.26400    
  17  0.463690E-01  -3.07112     -0.468215      0.468215       8.13162       8.59983    
  18  0.366509      -1.00373     -0.153026      0.153026       8.08698       8.24000    
  19  0.794534     -0.229999     -0.350650E-01  0.350650E-01   8.04015       8.07522    
  20  0.669373     -0.401413     -0.611983E-01  0.611983E-01   8.09568       8.15688    
  21  0.798901     -0.224518     -0.342295E-01  0.342295E-01   8.08733       8.12156    
  22  0.610403     -0.493636     -0.752584E-01  0.752584E-01   8.00020       8.07546    
  23  0.267818      -1.31745     -0.200854      0.200854       8.03164       8.23249    
  24  0.663049     -0.410906     -0.626456E-01  0.626456E-01   8.06856       8.13120    
  25  0.782871     -0.244788     -0.373196E-01  0.373196E-01   8.10002       8.13734    
  26  0.706545     -0.347368     -0.529588E-01  0.529588E-01   8.01090       8.06386    
  27  0.120119      -2.11927     -0.323098      0.323098       8.10547       8.42857    
  28  0.270575      -1.30721     -0.199293      0.199293       8.11561       8.31491    
  29  0.505391     -0.682422     -0.104040      0.104040       8.14409       8.24813    
  30  0.665734     -0.406865     -0.620294E-01  0.620294E-01   8.08464       8.14667    
  31  0.836788     -0.178185     -0.271656E-01  0.271656E-01   8.09754       8.12470    
  32  0.866983     -0.142736     -0.217612E-01  0.217612E-01   8.15023       8.17200    
  33  0.552904     -0.592571     -0.903417E-01  0.903417E-01   8.05990       8.15024    
  34  0.554153     -0.590314     -0.899977E-01  0.899977E-01   8.04889       8.13889    
  35  0.592407E-01  -2.82615     -0.430866      0.430866       8.03863       8.46949    
  36  0.902163     -0.102960     -0.156969E-01  0.156969E-01   8.18731       8.20300    
  37  0.266638E-01  -3.62445     -0.552573      0.552573       8.18610       8.73867    
  38  0.897053     -0.108640     -0.165630E-01  0.165630E-01   8.11598       8.13254    
  39  0.840496     -0.173763     -0.264914E-01  0.264914E-01   8.07850       8.10499    
  40  0.288358      -1.24355     -0.189589      0.189589       8.17713       8.36672    
  41  0.835972E-01  -2.48175     -0.378360      0.378360       8.08776       8.46612    
  42  0.412070     -0.886563     -0.135163      0.135163       8.16407       8.29923    
  43  0.725010     -0.321570     -0.490256E-01  0.490256E-01   8.20747       8.25649    
  44  0.316556      -1.15026     -0.175365      0.175365       8.10077       8.27614    
  45  0.486178     -0.721181     -0.109949      0.109949       8.17237       8.28232    
  46  0.143341      -1.94253     -0.296153      0.296153       8.09236       8.38851    
  47  0.956913     -0.440430E-01 -0.671467E-02  0.671467E-02   8.07112       8.07784    
  48  0.362697      -1.01419     -0.154620      0.154620       8.09625       8.25087    
  49  0.951746     -0.494572E-01 -0.754011E-02  0.754011E-02   8.06697       8.07451    
  50  0.511140     -0.671112     -0.102316      0.102316       8.10765       8.20996    
  51  0.364891E-01  -3.31074     -0.504746      0.504746       8.06657       8.57132    
  52  0.377076     -0.975308     -0.148693      0.148693       8.24674       8.39543    
  53  0.670030E-01  -2.70302     -0.412094      0.412094       8.06036       8.47245    
  54  0.448832     -0.801107     -0.122135      0.122135       7.98780       8.10993    
  55  0.252392      -1.37677     -0.209899      0.209899       8.32654       8.53644    
  56  0.910592     -0.936608E-01 -0.142793E-01  0.142793E-01   8.11654       8.13082    
  57  0.801917     -0.220751     -0.336550E-01  0.336550E-01   8.25932       8.29297    
  58  0.473432     -0.747746     -0.113999      0.113999       8.06512       8.17912    
  59  0.431618     -0.840214     -0.128097      0.128097       8.32632       8.45441    
  60  0.886774     -0.120166     -0.183201E-01  0.183201E-01   8.24556       8.26388    
  61  0.880132     -0.127683     -0.194663E-01  0.194663E-01   8.09327       8.11273    
  62  0.962190     -0.385439E-01 -0.587629E-02  0.587629E-02   8.15873       8.16461    
  63  0.618144     -0.481034     -0.733370E-01  0.733370E-01   8.10859       8.18193    
  64  0.169887      -1.77262     -0.270249      0.270249       8.06063       8.33088    
  65  0.384484E-01  -3.25844     -0.496772      0.496772       8.06856       8.56533    
  66  0.178067      -1.72560     -0.263079      0.263079       8.02849       8.29157    
  67  0.255365      -1.36506     -0.208113      0.208113       8.11238       8.32049    
  68  0.476812     -0.740633     -0.112915      0.112915       8.16632       8.27923    
  69  0.642499     -0.442391     -0.674457E-01  0.674457E-01   8.12070       8.18814    
  70  0.178007      -1.72593     -0.263131      0.263131       8.06697       8.33010    
loop,thermsimp(1:2)       25  0.578246E-02  0.157730    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    368          8.04          0.86          1.12         24.36          0.10          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.04
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       25
neval is:      367
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       25      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       26
neval is:      367


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      367     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.987524     -0.125549E-01 -0.191408E-02  0.191408E-02   7.99049       7.99240    
   2  0.516099     -0.661457     -0.100844      0.100844       7.97387       8.07471    
   3  0.202206      -1.59847     -0.243698      0.243698       8.01090       8.25460    
   4  0.240260      -1.42603     -0.217409      0.217409       8.06697       8.28438    
   5  0.717263E-01  -2.63490     -0.401709      0.401709       8.04015       8.44186    
   6  0.395382     -0.927902     -0.141465      0.141465       8.00020       8.14166    
   7  0.494348     -0.704516     -0.107409      0.107409       8.07112       8.17853    
   8  0.970815     -0.296196E-01 -0.451573E-02  0.451573E-02   8.04755       8.05206    
   9  0.992795     -0.723105E-02 -0.110243E-02  0.110243E-02   8.04862       8.04972    
  10  0.387320     -0.948503     -0.144606      0.144606       8.08186       8.22647    
  11  0.586568     -0.533466     -0.813307E-01  0.813307E-01   8.07850       8.15983    
  12  0.119144      -2.12742     -0.324341      0.324341       7.98780       8.31214    
  13  0.145144      -1.93003     -0.294247      0.294247       8.09327       8.38751    
  14  0.767931     -0.264056     -0.402572E-01  0.402572E-01   8.08733       8.12758    
  15  0.415014     -0.879442     -0.134077      0.134077       8.07625       8.21033    
  16  0.994477     -0.553801E-02 -0.844309E-03  0.844309E-03   8.06114       8.06198    
  17  0.757243     -0.278071     -0.423940E-01  0.423940E-01   8.09754       8.13993    
  18  0.669290     -0.401537     -0.612172E-01  0.612172E-01   8.11654       8.17776    
  19  0.112026      -2.18903     -0.333733      0.333733       8.06856       8.40229    
  20  0.434244     -0.834148     -0.127172      0.127172       8.11598       8.24315    
  21  0.491828     -0.709627     -0.108188      0.108188       8.10002       8.20820    
  22  0.517535     -0.658677     -0.100420      0.100420       8.04889       8.14931    
  23  0.411147     -0.888804     -0.135505      0.135505       8.08464       8.22014    
  24  0.250164      -1.38564     -0.211250      0.211250       8.05990       8.27115    
  25  0.109742E-01  -4.51221     -0.687919      0.687919       8.09568       8.78360    
  26  0.559459     -0.580786     -0.885449E-01  0.885449E-01   8.06750       8.15605    
  27  0.289677      -1.23899     -0.188893      0.188893       8.15873       8.34763    
  28  0.835809     -0.179356     -0.273441E-01  0.273441E-01   8.15023       8.17758    
  29  0.236182      -1.44315     -0.220019      0.220019       8.06512       8.28514    
  30  0.700988     -0.355264     -0.541626E-01  0.541626E-01   8.10859       8.16275    
  31  0.886914     -0.120007     -0.182960E-01  0.182960E-01   8.07678       8.09508    
  32  0.182911      -1.69875     -0.258987      0.258987       8.12070       8.37968    
  33  0.693089     -0.366597     -0.558904E-01  0.558904E-01   8.03442       8.09031    
  34  0.108523      -2.22079     -0.338575      0.338575       8.18731       8.52588    
  35  0.141600      -1.95475     -0.298015      0.298015       8.10765       8.40566    
  36  0.168348E-01  -4.08431     -0.622682      0.622682       8.09541       8.71809    
  37  0.419419E-01  -3.17147     -0.483513      0.483513       8.06810       8.55161    
  38  0.244896      -1.40692     -0.214496      0.214496       8.03164       8.24613    
  39  0.360662      -1.01981     -0.155478      0.155478       8.05256       8.20804    
  40  0.927013     -0.757879E-01 -0.115544E-01  0.115544E-01   8.08698       8.09853    
  41  0.869067     -0.140335     -0.213951E-01  0.213951E-01   8.14409       8.16549    
  42  0.827083     -0.189851     -0.289441E-01  0.289441E-01   8.09625       8.12519    
  43  0.928403     -0.742893E-01 -0.113259E-01  0.113259E-01   8.20747       8.21879    
  44  0.513193     -0.667103     -0.101705      0.101705       8.24556       8.34726    
  45  0.809080     -0.211858     -0.322992E-01  0.322992E-01   8.05853       8.09083    
  46  0.341224E-02  -5.68039     -0.866016      0.866016       8.10077       8.96679    
  47  0.734431     -0.308659     -0.470573E-01  0.470573E-01   8.16632       8.21338    
  48  0.688454     -0.373307     -0.569134E-01  0.569134E-01   8.17237       8.22929    
  49  0.990614     -0.943067E-02 -0.143777E-02  0.143777E-02   8.11627       8.11770    
  50  0.143408      -1.94206     -0.296081      0.296081       8.02849       8.32457    
  51  0.868596     -0.140878     -0.214778E-01  0.214778E-01   8.25932       8.28080    
  52  0.244103      -1.41016     -0.214990      0.214990       8.16407       8.37906    
  53  0.207986      -1.57029     -0.239401      0.239401       8.11561       8.35501    
  54  0.426578E-01  -3.15455     -0.480933      0.480933       8.11238       8.59331    
  55  0.111938      -2.18981     -0.333853      0.333853       8.06697       8.40083    
  56  0.304345      -1.18959     -0.181362      0.181362       8.06063       8.24199    
  57  0.911041     -0.931671E-01 -0.142040E-01  0.142040E-01   8.17713       8.19133    
  58  0.144299      -1.93587     -0.295137      0.295137       8.09236       8.38749    
  59  0.306010      -1.18414     -0.180530      0.180530       8.24674       8.42727    
  60  0.633032     -0.457234     -0.697087E-01  0.697087E-01   8.03963       8.10934    
  61  0.737469E-02  -4.90970     -0.748519      0.748519       8.10547       8.85399    
  62  0.794623     -0.229887     -0.350479E-01  0.350479E-01   8.32632       8.36137    
  63  0.200033      -1.60927     -0.245345      0.245345       8.08776       8.33310    
  64  0.543825     -0.609128     -0.928659E-01  0.928659E-01   8.03863       8.13149    
  65  0.719260     -0.329532     -0.502395E-01  0.502395E-01   8.06036       8.11060    
  66  0.200311      -1.60788     -0.245133      0.245133       8.32654       8.57167    
  67  0.778326     -0.250609     -0.382072E-01  0.382072E-01   8.06856       8.10677    
  68  0.932167     -0.702437E-01 -0.107092E-01  0.107092E-01   8.06657       8.07728    
  69  0.188590      -1.66818     -0.254326      0.254326       8.13162       8.38595    
  70  0.722923     -0.324453     -0.494651E-01  0.494651E-01   8.03877       8.08823    
loop,thermsimp(1:2)       26  0.191408E-02  0.100844    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    369          8.05          0.86          1.13         24.39          0.09          0.05         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    370          8.44          0.86          1.13         24.32          0.05          0.05         26.41
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       26
neval is:      369
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       26      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       27
neval is:      369


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      369     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.199609      -1.61140     -0.245669      0.245669       7.99049       8.23615    
   2  0.983274     -0.168677E-01 -0.257159E-02  0.257159E-02   8.04862       8.05119    
   3  0.569108     -0.563685     -0.859378E-01  0.859378E-01   8.04755       8.13349    
   4  0.411179     -0.888728     -0.135493      0.135493       8.06114       8.19663    
   5  0.889241     -0.117387     -0.178964E-01  0.178964E-01   7.97387       7.99176    
   6  0.109537      -2.21149     -0.337158      0.337158       8.06657       8.40373    
   7  0.658027     -0.418509     -0.638048E-01  0.638048E-01   8.03877       8.10257    
   8  0.427534     -0.849722     -0.129546      0.129546       8.03442       8.16396    
   9  0.277803      -1.28084     -0.195273      0.195273       8.05853       8.25380    
  10  0.568421     -0.564892     -0.861219E-01  0.861219E-01   8.07678       8.16291    
  11  0.368489     -0.998346     -0.152205      0.152205       8.08698       8.23918    
  12  0.100945E-01  -4.59576     -0.700657      0.700657       8.06856       8.76922    
  13  0.811445     -0.208939     -0.318542E-01  0.318542E-01   8.03963       8.07148    
  14  0.135138      -2.00146     -0.305136      0.305136       8.06036       8.36550    
  15  0.600340     -0.510258     -0.777926E-01  0.777926E-01   8.11627       8.19406    
  16  0.537538     -0.620755     -0.946386E-01  0.946386E-01   8.09625       8.19089    
  17  0.923261     -0.798434E-01 -0.121727E-01  0.121727E-01   8.08733       8.09950    
  18  0.296505      -1.21569     -0.185341      0.185341       8.03863       8.22397    
  19  0.975666     -0.246348E-01 -0.375575E-02  0.375575E-02   8.09754       8.10129    
  20  0.102971      -2.27331     -0.346583      0.346583       8.00020       8.34678    
  21  0.110137      -2.20603     -0.336325      0.336325       8.04889       8.38522    
  22  0.874539     -0.134058     -0.204381E-01  0.204381E-01   8.06750       8.08794    
  23  0.887507     -0.119339     -0.181941E-01  0.181941E-01   8.07850       8.09669    
  24  0.811767     -0.208543     -0.317938E-01  0.317938E-01   8.10859       8.14038    
  25  0.304283      -1.18980     -0.181393      0.181393       8.14409       8.32549    
  26  0.304144      -1.19025     -0.181463      0.181463       8.15023       8.33170    
  27  0.854538     -0.157194     -0.239654E-01  0.239654E-01   8.11654       8.14050    
  28  0.543001     -0.610645     -0.930972E-01  0.930972E-01   8.07112       8.16422    
  29  0.808766     -0.212246     -0.323584E-01  0.323584E-01   8.17713       8.20949    
  30  0.286176      -1.25115     -0.190747      0.190747       8.05256       8.24331    
  31  0.328161      -1.11425     -0.169875      0.169875       8.10002       8.26989    
  32  0.563264     -0.574006     -0.875114E-01  0.875114E-01   8.07625       8.16376    
  33  0.180895      -1.70984     -0.260677      0.260677       8.16632       8.42700    
  34  0.977796     -0.224538E-01 -0.342324E-02  0.342324E-02   8.20747       8.21089    
  35  0.650784     -0.429577     -0.654921E-01  0.654921E-01   8.08464       8.15013    
  36  0.350586      -1.04815     -0.159798      0.159798       8.08186       8.24166    
  37  0.852996E-01  -2.46159     -0.375286      0.375286       8.17237       8.54766    
  38  0.363921      -1.01082     -0.154107      0.154107       8.06063       8.21474    
  39  0.715496E-01  -2.63737     -0.402085      0.402085       8.11598       8.51807    
  40  0.540542     -0.615184     -0.937892E-01  0.937892E-01   8.03164       8.12543    
  41  0.458744E-02  -5.38443     -0.820895      0.820895       8.01090       8.83179    
  42  0.684509     -0.379054     -0.577894E-01  0.577894E-01   8.05990       8.11769    
  43  0.827193     -0.189717     -0.289238E-01  0.289238E-01   8.25932       8.28824    
  44  0.430712     -0.842315     -0.128417      0.128417       8.06697       8.19539    
  45  0.925073     -0.778822E-01 -0.118737E-01  0.118737E-01   8.06512       8.07700    
  46  0.139567      -1.96921     -0.300221      0.300221       7.98780       8.28802    
  47  0.905138     -0.996680E-01 -0.151951E-01  0.151951E-01   8.02849       8.04368    
  48  0.230323      -1.46827     -0.223848      0.223848       8.08776       8.31160    
  49  0.854981     -0.156676     -0.238863E-01  0.238863E-01   8.24556       8.26944    
  50  0.526676     -0.641170     -0.977510E-01  0.977510E-01   8.15873       8.25649    
  51  0.425904     -0.853542     -0.130129      0.130129       8.11561       8.24574    
  52  0.770395     -0.260852     -0.397688E-01  0.397688E-01   8.32632       8.36609    
  53  0.222399      -1.50328     -0.229186      0.229186       8.16407       8.39325    
  54  0.849203     -0.163457     -0.249203E-01  0.249203E-01   8.12070       8.14562    
  55  0.409521     -0.892766     -0.136109      0.136109       8.13162       8.26773    
  56  0.526161     -0.642147     -0.979000E-01  0.979000E-01   8.09236       8.19026    
  57  0.705716     -0.348543     -0.531379E-01  0.531379E-01   8.09327       8.14640    
  58  0.548845E-03  -7.50769      -1.14460       1.14460       8.06697       9.21158    
  59  0.498314     -0.696524     -0.106190      0.106190       8.06856       8.17475    
  60  0.774749     -0.255216     -0.389095E-01  0.389095E-01   8.10765       8.14656    
  61  0.537402E-01  -2.92359     -0.445723      0.445723       8.24674       8.69246    
  62  0.708174     -0.345066     -0.526077E-01  0.526077E-01   8.04015       8.09276    
  63  0.272932      -1.29853     -0.197971      0.197971       8.18731       8.38528    
  64  0.701294     -0.354828     -0.540960E-01  0.540960E-01   8.06810       8.12220    
  65  0.309054      -1.17424     -0.179021      0.179021       8.32654       8.50556    
  66  0.911982     -0.921347E-01 -0.140466E-01  0.140466E-01   8.11238       8.12642    
  67  0.874613     -0.133974     -0.204253E-01  0.204253E-01   8.09541       8.11584    
  68  0.317616      -1.14691     -0.174855      0.174855       8.09568       8.27053    
  69  0.587945     -0.531123     -0.809735E-01  0.809735E-01   8.10547       8.18645    
  70  0.358507E-02  -5.63098     -0.858483      0.858483       8.05030       8.90878    
loop,thermsimp(1:2)       27  0.245669      0.257159E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    371          8.14          0.87          1.13         24.82          0.08          0.05         26.95
Just calling func    0   0         26.94


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.14
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       27
neval is:      370
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       27      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       28
neval is:      370


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      370     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231666      -1.46246     -0.222962      0.222962       7.97387       8.19683    
   2  0.922423     -0.807516E-01 -0.123112E-01  0.123112E-01   8.02849       8.04080    
   3  0.556007     -0.586974     -0.894884E-01  0.894884E-01   8.04862       8.13811    
   4  0.921345     -0.819211E-01 -0.124895E-01  0.124895E-01   8.03963       8.05212    
   5  0.623358     -0.472635     -0.720566E-01  0.720566E-01   8.06512       8.13718    
   6  0.967150     -0.334012E-01 -0.509225E-02  0.509225E-02   8.06750       8.07260    
   7  0.239844      -1.42777     -0.217673      0.217673       8.04015       8.25783    
   8  0.707370     -0.346201     -0.527808E-01  0.527808E-01   8.07850       8.13128    
   9  0.375591     -0.979256     -0.149295      0.149295       8.08733       8.23662    
  10  0.164915      -1.80233     -0.274778      0.274778       8.09754       8.37231    
  11  0.634729     -0.454558     -0.693006E-01  0.693006E-01   8.03877       8.10807    
  12  0.956585     -0.443852E-01 -0.676684E-02  0.676684E-02   8.09541       8.10218    
  13  0.281051      -1.26922     -0.193501      0.193501       8.05990       8.25340    
  14  0.332446      -1.10128     -0.167898      0.167898       8.06810       8.23600    
  15  0.417901     -0.872510     -0.133020      0.133020       8.03164       8.16466    
  16  0.454459     -0.788647     -0.120235      0.120235       8.11238       8.23261    
  17  0.163150      -1.81309     -0.276418      0.276418       8.04755       8.32397    
  18  0.412675     -0.885095     -0.134939      0.134939       8.10859       8.24353    
  19  0.510076     -0.673195     -0.102633      0.102633       8.11654       8.21917    
  20  0.159872E-02  -6.43855     -0.981603      0.981603       8.12070       9.10230    
  21  0.279094      -1.27620     -0.194567      0.194567       8.09327       8.28783    
  22  0.229843E-01  -3.77294     -0.575212      0.575212       8.10765       8.68286    
  23  0.829240E-02  -4.79242     -0.730638      0.730638       8.08464       8.81528    
  24  0.722732     -0.324717     -0.495055E-01  0.495055E-01   8.07678       8.12629    
  25  0.399402     -0.917787     -0.139923      0.139923       8.07625       8.21617    
  26  0.321457      -1.13489     -0.173022      0.173022       8.03442       8.20744    
  27  0.103147      -2.27160     -0.346321      0.346321       8.07112       8.41744    
  28  0.488570     -0.716273     -0.109201      0.109201       8.06856       8.17776    
  29  0.775391     -0.254388     -0.387833E-01  0.387833E-01   8.10547       8.14426    
  30  0.264831      -1.32866     -0.202564      0.202564       8.09236       8.29492    
  31  0.291634      -1.23225     -0.187866      0.187866       8.09625       8.28411    
  32  0.754799E-02  -4.88647     -0.744978      0.744978       8.11627       8.86125    
  33  0.403715     -0.907047     -0.138286      0.138286       8.06697       8.20526    
  34  0.794963     -0.229460     -0.349829E-01  0.349829E-01   8.06114       8.09612    
  35  0.482612E-01  -3.03113     -0.462117      0.462117       8.17713       8.63924    
  36  0.309506      -1.17278     -0.178798      0.178798       8.20747       8.38627    
  37  0.265676      -1.32548     -0.202078      0.202078       8.06063       8.26271    
  38  0.793358     -0.231480     -0.352908E-01  0.352908E-01   8.03863       8.07392    
  39  0.603192E-01  -2.80811     -0.428116      0.428116       7.99049       8.41860    
  40  0.516664     -0.660363     -0.100677      0.100677       8.08698       8.18766    
  41  0.524892E-01  -2.94715     -0.449314      0.449314       8.08186       8.53117    
  42  0.581500     -0.542144     -0.826538E-01  0.826538E-01   8.05256       8.13521    
  43  0.403805     -0.906823     -0.138252      0.138252       8.11561       8.25386    
  44  0.447829     -0.803344     -0.122476      0.122476       8.05853       8.18100    
  45  0.470604     -0.753737     -0.114913      0.114913       8.15873       8.27365    
  46  0.479088     -0.735871     -0.112189      0.112189       8.13162       8.24381    
  47  0.959223     -0.416322E-01 -0.634712E-02  0.634712E-02   8.24556       8.25190    
  48  0.527403     -0.639789     -0.975405E-01  0.975405E-01   8.10002       8.19756    
  49  0.731687     -0.312402     -0.476280E-01  0.476280E-01   8.09568       8.14331    
  50  0.682707     -0.381689     -0.581913E-01  0.581913E-01   7.98780       8.04599    
  51  0.386616     -0.950322     -0.144883      0.144883       8.25932       8.40420    
  52  0.120332      -2.11750     -0.322829      0.322829       8.08776       8.41059    
  53  0.285899      -1.25212     -0.190894      0.190894       8.14409       8.33499    
  54  0.798593     -0.224904     -0.342883E-01  0.342883E-01   8.15023       8.18452    
  55  0.305098      -1.18712     -0.180985      0.180985       8.00020       8.18118    
  56  0.274289      -1.29357     -0.197214      0.197214       8.06036       8.25757    
  57  0.805459     -0.216343     -0.329831E-01  0.329831E-01   8.32632       8.35930    
  58  0.665552     -0.407139     -0.620712E-01  0.620712E-01   8.04889       8.11097    
  59  0.721477     -0.326454     -0.497703E-01  0.497703E-01   8.18731       8.23708    
  60  0.563306     -0.573931     -0.875000E-01  0.875000E-01   8.16407       8.25157    
  61  0.253697      -1.37162     -0.209113      0.209113       8.06657       8.27569    
  62  0.714468     -0.336217     -0.512587E-01  0.512587E-01   8.16632       8.21758    
  63  0.106618      -2.23850     -0.341276      0.341276       8.32654       8.66781    
  64  0.116686      -2.14827     -0.327519      0.327519       8.11598       8.44350    
  65  0.856486     -0.154918     -0.236183E-01  0.236183E-01   8.17237       8.19599    
  66  0.895996     -0.109820     -0.167428E-01  0.167428E-01   8.24674       8.26348    
  67  0.112164      -2.18779     -0.333544      0.333544       8.06856       8.40210    
  68  0.573757     -0.555550     -0.846975E-01  0.846975E-01   8.01090       8.09560    
  69  0.376044     -0.978049     -0.149111      0.149111       8.05030       8.19941    
  70  0.779305     -0.249353     -0.380157E-01  0.380157E-01   8.14492       8.18294    
loop,thermsimp(1:2)       28  0.222962      0.123112E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    372          8.02          0.87          1.12         24.39          0.08          0.05         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    373          8.15          0.86          1.12         24.41          0.05          0.04         26.49
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       28
neval is:      372
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       28      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       29
neval is:      372


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      372     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.332051      -1.10247     -0.168079      0.168079       8.02849       8.19657    
   2  0.991191     -0.884791E-02 -0.134893E-02  0.134893E-02   7.98780       7.98915    
   3  0.752830     -0.283916     -0.432851E-01  0.432851E-01   8.03963       8.08291    
   4  0.718872     -0.330071     -0.503218E-01  0.503218E-01   8.06750       8.11782    
   5  0.362244      -1.01544     -0.154811      0.154811       8.03863       8.19344    
   6  0.993342E-01  -2.30927     -0.352064      0.352064       8.01090       8.36296    
   7  0.734379     -0.308729     -0.470680E-01  0.470680E-01   8.06114       8.10821    
   8  0.190509      -1.65806     -0.252782      0.252782       8.09541       8.34820    
   9  0.113713      -2.17408     -0.331454      0.331454       8.03877       8.37022    
  10  0.582158     -0.541014     -0.824814E-01  0.824814E-01   8.04889       8.13138    
  11  0.100405E-01  -4.60113     -0.701475      0.701475       8.07678       8.77826    
  12  0.614877     -0.486333     -0.741449E-01  0.741449E-01   8.07850       8.15265    
  13  0.996806     -0.319890E-02 -0.487696E-03  0.487696E-03   8.05256       8.05305    
  14  0.439871E-01  -3.12386     -0.476255      0.476255       8.06512       8.54138    
  15  0.610456     -0.493549     -0.752451E-01  0.752451E-01   8.04862       8.12386    
  16  0.676471     -0.390866     -0.595903E-01  0.595903E-01   8.09568       8.15527    
  17  0.263829      -1.33246     -0.203142      0.203142       8.10547       8.30862    
  18  0.761962     -0.271858     -0.414467E-01  0.414467E-01   8.03164       8.07309    
  19  0.405295     -0.903140     -0.137690      0.137690       8.06856       8.20625    
  20  0.184680      -1.68913     -0.257520      0.257520       8.05853       8.31605    
  21  0.695434     -0.363219     -0.553754E-01  0.553754E-01   8.00020       8.05557    
  22  0.597154     -0.515580     -0.786039E-01  0.786039E-01   8.14492       8.22353    
  23  0.254276      -1.36933     -0.208765      0.208765       8.15023       8.35900    
  24  0.777974     -0.251062     -0.382763E-01  0.382763E-01   8.08698       8.12525    
  25  0.597236     -0.515443     -0.785830E-01  0.785830E-01   8.17237       8.25096    
  26  0.658168     -0.418295     -0.637721E-01  0.637721E-01   7.97387       8.03764    
  27  0.917953     -0.856086E-01 -0.130516E-01  0.130516E-01   8.10002       8.11307    
  28  0.167567      -1.78637     -0.272346      0.272346       8.05030       8.32265    
  29  0.867739E-02  -4.74703     -0.723719      0.723719       8.06697       8.79069    
  30  0.157469      -1.84853     -0.281822      0.281822       8.03442       8.31624    
  31  0.947458     -0.539724E-01 -0.822848E-02  0.822848E-02   8.07625       8.08448    
  32  0.883772     -0.123556     -0.188370E-01  0.188370E-01   8.16632       8.18516    
  33  0.873100     -0.135705     -0.206892E-01  0.206892E-01   8.11654       8.13723    
  34  0.138043      -1.98019     -0.301894      0.301894       8.11238       8.41427    
  35  0.833185     -0.182500     -0.278234E-01  0.278234E-01   8.06810       8.09592    
  36  0.907894     -0.966275E-01 -0.147316E-01  0.147316E-01   8.08733       8.10206    
  37  0.858432     -0.152648     -0.232723E-01  0.232723E-01   8.18731       8.21058    
  38  0.192050      -1.65000     -0.251554      0.251554       8.10859       8.36015    
  39  0.890666     -0.115786     -0.176523E-01  0.176523E-01   8.13162       8.14927    
  40  0.389935     -0.941775     -0.143580      0.143580       8.16407       8.30765    
  41  0.842362     -0.171545     -0.261533E-01  0.261533E-01   8.24556       8.27171    
  42  0.143912      -1.93855     -0.295546      0.295546       8.05990       8.35545    
  43  0.678545     -0.387804     -0.591235E-01  0.591235E-01   8.11561       8.17474    
  44  0.621021     -0.476390     -0.726291E-01  0.726291E-01   8.06036       8.13299    
  45  0.533199     -0.628861     -0.958744E-01  0.958744E-01   8.04015       8.13603    
  46  0.891703     -0.114623     -0.174750E-01  0.174750E-01   8.06063       8.07810    
  47  0.675469     -0.392349     -0.598164E-01  0.598164E-01   8.24674       8.30655    
  48  0.757471     -0.277770     -0.423480E-01  0.423480E-01   8.15873       8.20108    
  49  0.855441     -0.156139     -0.238045E-01  0.238045E-01   8.06657       8.09038    
  50  0.737982     -0.303836     -0.463220E-01  0.463220E-01   8.09625       8.14257    
  51  0.630328     -0.461515     -0.703613E-01  0.703613E-01   8.09327       8.16363    
  52  0.701612     -0.354375     -0.540271E-01  0.540271E-01   8.09236       8.14638    
  53  0.161537E-01  -4.12561     -0.628978      0.628978       8.04755       8.67653    
  54  0.716145     -0.333873     -0.509013E-01  0.509013E-01   8.14409       8.19499    
  55  0.644842     -0.438751     -0.668907E-01  0.668907E-01   8.32632       8.39321    
  56  0.465420E-01  -3.06740     -0.467647      0.467647       8.09754       8.56518    
  57  0.644178     -0.439780     -0.670477E-01  0.670477E-01   8.20747       8.27452    
  58  0.297766      -1.21145     -0.184694      0.184694       8.06856       8.25325    
  59  0.877956     -0.130159     -0.198436E-01  0.198436E-01   8.25932       8.27916    
  60  0.373410     -0.985078     -0.150182      0.150182       8.08776       8.23794    
  61  0.162588      -1.81653     -0.276944      0.276944       8.07112       8.34807    
  62  0.634599     -0.454761     -0.693316E-01  0.693316E-01   7.99049       8.05982    
  63  0.762468     -0.271195     -0.413456E-01  0.413456E-01   8.11598       8.15733    
  64  0.237905      -1.43588     -0.218911      0.218911       8.08186       8.30077    
  65  0.473101     -0.748446     -0.114106      0.114106       8.17713       8.29123    
  66  0.156066      -1.85747     -0.283185      0.283185       8.32654       8.60972    
  67  0.992592     -0.743581E-02 -0.113364E-02  0.113364E-02   8.10765       8.10878    
  68  0.568078     -0.565496     -0.862139E-01  0.862139E-01   8.08464       8.17085    
  69  0.918090     -0.854598E-01 -0.130290E-01  0.130290E-01   8.11627       8.12930    
  70  0.561720     -0.576753     -0.879301E-01  0.879301E-01   8.02104       8.10897    
loop,thermsimp(1:2)       29  0.168079      0.134893E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    374          8.38          0.86          1.13         24.30          0.08          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.38
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       29
neval is:      373
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       29      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       30
neval is:      373


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      373     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.157557      -1.84797     -0.281736      0.281736       7.98780       8.26954    
   2  0.553200     -0.592035     -0.902600E-01  0.902600E-01   7.97387       8.06413    
   3  0.825049     -0.192313     -0.293194E-01  0.293194E-01   8.05256       8.08188    
   4  0.767336     -0.264830     -0.403753E-01  0.403753E-01   8.00020       8.04057    
   5  0.966534     -0.340385E-01 -0.518941E-02  0.518941E-02   7.99049       7.99567    
   6  0.954430     -0.466410E-01 -0.711076E-02  0.711076E-02   8.03164       8.03875    
   7  0.780674     -0.247598     -0.377481E-01  0.377481E-01   8.06063       8.09838    
   8  0.312863      -1.16199     -0.177154      0.177154       8.03963       8.21678    
   9  0.990226     -0.982218E-02 -0.149746E-02  0.149746E-02   8.07625       8.07775    
  10  0.893872     -0.112193     -0.171046E-01  0.171046E-01   8.06657       8.08368    
  11  0.322320      -1.13221     -0.172613      0.172613       8.06810       8.24071    
  12  0.927465     -0.752997E-01 -0.114800E-01  0.114800E-01   8.08733       8.09881    
  13  0.539466     -0.617176     -0.940929E-01  0.940929E-01   8.06114       8.15523    
  14  0.461474     -0.773330     -0.117900      0.117900       8.10765       8.22555    
  15  0.745701     -0.293430     -0.447355E-01  0.447355E-01   8.02104       8.06577    
  16  0.703580     -0.351573     -0.535999E-01  0.535999E-01   8.10002       8.15362    
  17  0.917420E-01  -2.38878     -0.364186      0.364186       8.06750       8.43169    
  18  0.671661     -0.398001     -0.606782E-01  0.606782E-01   8.04862       8.10930    
  19  0.845179     -0.168207     -0.256444E-01  0.256444E-01   8.08698       8.11262    
  20  0.283605E-01  -3.56276     -0.543168      0.543168       8.11627       8.65944    
  21  0.108883E-01  -4.52006     -0.689116      0.689116       8.04889       8.73801    
  22  0.506006     -0.681208     -0.103855      0.103855       8.06036       8.16422    
  23  0.353918      -1.03869     -0.158356      0.158356       8.04015       8.19851    
  24  0.656862     -0.420282     -0.640750E-01  0.640750E-01   8.11654       8.18061    
  25  0.691560     -0.368806     -0.562270E-01  0.562270E-01   8.09625       8.15247    
  26  0.445402     -0.808779     -0.123304      0.123304       8.09236       8.21566    
  27  0.832700     -0.183081     -0.279121E-01  0.279121E-01   8.13162       8.15953    
  28  0.963063     -0.376360E-01 -0.573788E-02  0.573788E-02   8.07850       8.08424    
  29  0.422212     -0.862247     -0.131456      0.131456       8.09568       8.22714    
  30  0.917895     -0.856720E-01 -0.130613E-01  0.130613E-01   8.11598       8.12904    
  31  0.767210     -0.264994     -0.404003E-01  0.404003E-01   8.09327       8.13367    
  32  0.360836      -1.01933     -0.155404      0.155404       8.08464       8.24004    
  33  0.635930     -0.452667     -0.690123E-01  0.690123E-01   8.11561       8.18463    
  34  0.687292     -0.374995     -0.571707E-01  0.571707E-01   8.16632       8.22349    
  35  0.833832     -0.181724     -0.277051E-01  0.277051E-01   8.03863       8.06633    
  36  0.362075      -1.01590     -0.154882      0.154882       8.14409       8.29897    
  37  0.385764     -0.952530     -0.145220      0.145220       8.02849       8.17371    
  38  0.752556     -0.284279     -0.433404E-01  0.433404E-01   8.15873       8.20207    
  39  0.547433     -0.602515     -0.918577E-01  0.918577E-01   8.06856       8.16041    
  40  0.171004      -1.76607     -0.269250      0.269250       8.18731       8.45656    
  41  0.159022      -1.83871     -0.280325      0.280325       8.14492       8.42525    
  42  0.850806     -0.161571     -0.246326E-01  0.246326E-01   8.08776       8.11239    
  43  0.926075     -0.768001E-01 -0.117087E-01  0.117087E-01   8.17237       8.18408    
  44  0.584885     -0.536340     -0.817688E-01  0.817688E-01   8.06856       8.15033    
  45  0.547650     -0.602120     -0.917975E-01  0.917975E-01   8.24556       8.33735    
  46  0.864296     -0.145840     -0.222344E-01  0.222344E-01   8.20747       8.22970    
  47  0.384639     -0.955450     -0.145665      0.145665       8.25932       8.40498    
  48  0.359776      -1.02227     -0.155853      0.155853       8.17713       8.33298    
  49  0.147032      -1.91711     -0.292277      0.292277       8.08186       8.37414    
  50  0.649806     -0.431082     -0.657215E-01  0.657215E-01   8.24674       8.31246    
  51  0.909946     -0.943695E-01 -0.143873E-01  0.143873E-01   8.16407       8.17845    
  52  0.740699     -0.300161     -0.457617E-01  0.457617E-01   8.10547       8.15124    
  53  0.959446     -0.413992E-01 -0.631160E-02  0.631160E-02   8.05853       8.06484    
  54  0.993892     -0.612654E-02 -0.934035E-03  0.934035E-03   8.03442       8.03535    
  55  0.499875     -0.693397     -0.105713      0.105713       8.05030       8.15601    
  56  0.716813     -0.332941     -0.507592E-01  0.507592E-01   8.07112       8.12188    
  57  0.586555     -0.533488     -0.813341E-01  0.813341E-01   8.09541       8.17675    
  58  0.687999     -0.373968     -0.570140E-01  0.570140E-01   8.05990       8.11692    
  59  0.238056      -1.43525     -0.218814      0.218814       8.15023       8.36905    
  60  0.842319     -0.171596     -0.261611E-01  0.261611E-01   8.10859       8.13475    
  61  0.559244     -0.581169     -0.886034E-01  0.886034E-01   8.01090       8.09950    
  62  0.596920     -0.515973     -0.786637E-01  0.786637E-01   8.03877       8.11743    
  63  0.266753      -1.32143     -0.201462      0.201462       8.32632       8.52778    
  64  0.681727     -0.383126     -0.584103E-01  0.584103E-01   8.11238       8.17079    
  65  0.401206E-01  -3.21587     -0.490282      0.490282       8.06512       8.55541    
  66  0.275178      -1.29034     -0.196721      0.196721       8.09754       8.29426    
  67  0.830963     -0.185171     -0.282306E-01  0.282306E-01   8.32654       8.35477    
  68  0.802444     -0.220093     -0.335548E-01  0.335548E-01   8.04755       8.08110    
  69  0.661893E-01  -2.71524     -0.413957      0.413957       8.07678       8.49074    
  70  0.865761E-01  -2.44673     -0.373022      0.373022       8.38317       8.75620    
loop,thermsimp(1:2)       30  0.281736      0.902600E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    375          8.07          0.86          1.12         24.37          0.07          0.05         26.48
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       30
neval is:      374
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       30      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       31
neval is:      374


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      374     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.277512      -1.28189     -0.195433      0.195433       7.99049       8.18592    
   2  0.202445      -1.59728     -0.243518      0.243518       8.03442       8.27794    
   3  0.927152     -0.756373E-01 -0.115315E-01  0.115315E-01   8.03164       8.04317    
   4  0.403144     -0.908460     -0.138501      0.138501       8.00020       8.13870    
   5  0.791838     -0.233398     -0.355833E-01  0.355833E-01   7.97387       8.00945    
   6  0.292576      -1.22903     -0.187374      0.187374       8.05853       8.24590    
   7  0.135578      -1.99821     -0.304641      0.304641       8.02104       8.32568    
   8  0.516570     -0.660545     -0.100705      0.100705       8.03863       8.13933    
   9  0.730579     -0.313918     -0.478590E-01  0.478590E-01   8.07625       8.12411    
  10  0.508248     -0.676786     -0.103181      0.103181       8.04755       8.15073    
  11  0.928455     -0.742338E-01 -0.113175E-01  0.113175E-01   8.05256       8.06388    
  12  0.696477     -0.361721     -0.551469E-01  0.551469E-01   8.06657       8.12172    
  13  0.465556     -0.764522     -0.116557      0.116557       8.07850       8.19506    
  14  0.194653      -1.63654     -0.249502      0.249502       8.06063       8.31013    
  15  0.650312     -0.430303     -0.656028E-01  0.656028E-01   8.08733       8.15293    
  16  0.555802     -0.587343     -0.895446E-01  0.895446E-01   8.01090       8.10044    
  17  0.985517     -0.145893E-01 -0.222424E-02  0.222424E-02   8.04862       8.05084    
  18  0.923066     -0.800544E-01 -0.122049E-01  0.122049E-01   8.08776       8.09996    
  19  0.658765     -0.417388     -0.636338E-01  0.636338E-01   8.08698       8.15061    
  20  0.197878      -1.62010     -0.246997      0.246997       8.05990       8.30690    
  21  0.449673     -0.799236     -0.121849      0.121849       8.03877       8.16061    
  22  0.208093      -1.56977     -0.239323      0.239323       8.07112       8.31044    
  23  0.102791      -2.27506     -0.346849      0.346849       8.11598       8.46283    
  24  0.650538     -0.429955     -0.655498E-01  0.655498E-01   8.09327       8.15882    
  25  0.223365      -1.49895     -0.228526      0.228526       8.10859       8.33712    
  26  0.520729     -0.652525     -0.994821E-01  0.994821E-01   8.06856       8.16804    
  27  0.919707E-01  -2.38629     -0.363806      0.363806       8.10547       8.46928    
  28  0.788427     -0.237716     -0.362415E-01  0.362415E-01   8.09625       8.13249    
  29  0.395754     -0.926961     -0.141322      0.141322       8.10002       8.24134    
  30  0.903388     -0.101603     -0.154902E-01  0.154902E-01   8.06114       8.07663    
  31  0.569415     -0.563145     -0.858555E-01  0.858555E-01   8.05030       8.13616    
  32  0.974677     -0.256496E-01 -0.391046E-02  0.391046E-02   8.13162       8.13553    
  33  0.376411     -0.977073     -0.148962      0.148962       8.06856       8.21752    
  34  0.309090      -1.17412     -0.179004      0.179004       8.06036       8.23936    
  35  0.248039      -1.39417     -0.212551      0.212551       8.11238       8.32493    
  36  0.941329     -0.604621E-01 -0.921788E-02  0.921788E-02   8.02849       8.03771    
  37  0.131879      -2.02587     -0.308859      0.308859       8.09541       8.40427    
  38  0.188022      -1.67120     -0.254786      0.254786       8.16407       8.41885    
  39  0.898649E-01  -2.40945     -0.367338      0.367338       8.11654       8.48388    
  40  0.853893     -0.157949     -0.240805E-01  0.240805E-01   8.17237       8.19645    
  41  0.643577     -0.440714     -0.671900E-01  0.671900E-01   8.11561       8.18280    
  42  0.664391     -0.408885     -0.623375E-01  0.623375E-01   8.04015       8.10249    
  43  0.825262     -0.192054     -0.292800E-01  0.292800E-01   8.15873       8.18801    
  44  0.611498     -0.491843     -0.749850E-01  0.749850E-01   8.09236       8.16734    
  45  0.284000      -1.25878     -0.191910      0.191910       8.03963       8.23154    
  46  0.108174      -2.22402     -0.339067      0.339067       8.16632       8.50539    
  47  0.293070      -1.22734     -0.187117      0.187117       8.10765       8.29476    
  48  0.412045     -0.886623     -0.135172      0.135172       8.09568       8.23085    
  49  0.464041     -0.767783     -0.117054      0.117054       8.20747       8.32452    
  50  0.711768     -0.340003     -0.518359E-01  0.518359E-01   8.08464       8.13647    
  51  0.919970     -0.834138E-01 -0.127170E-01  0.127170E-01   8.06810       8.08082    
  52  0.551321     -0.595437     -0.907787E-01  0.907787E-01   7.98780       8.07858    
  53  0.720690E-01  -2.63013     -0.400982      0.400982       8.09754       8.49852    
  54  0.788823     -0.237213     -0.361648E-01  0.361648E-01   8.14409       8.18026    
  55  0.339304      -1.08086     -0.164785      0.164785       8.24674       8.41152    
  56  0.824115     -0.193445     -0.294921E-01  0.294921E-01   8.17713       8.20662    
  57  0.564535     -0.571754     -0.871679E-01  0.871679E-01   8.24556       8.33272    
  58  0.608050     -0.497498     -0.758472E-01  0.758472E-01   8.32654       8.40239    
  59  0.696797     -0.361262     -0.550770E-01  0.550770E-01   8.15023       8.20531    
  60  0.287274      -1.24732     -0.190163      0.190163       8.08186       8.27202    
  61  0.302150E-01  -3.49942     -0.533511      0.533511       8.25932       8.79283    
  62  0.896370     -0.109402     -0.166791E-01  0.166791E-01   8.14492       8.16160    
  63  0.289059      -1.24112     -0.189218      0.189218       8.06750       8.25672    
  64  0.476596     -0.741086     -0.112984      0.112984       8.18731       8.30029    
  65  0.895851E-01  -2.41257     -0.367813      0.367813       8.07678       8.44460    
  66  0.864694     -0.145380     -0.221642E-01  0.221642E-01   8.32632       8.34848    
  67  0.222506      -1.50280     -0.229113      0.229113       8.06512       8.29424    
  68  0.800191     -0.222904     -0.339834E-01  0.339834E-01   8.11627       8.15025    
  69  0.332930      -1.09982     -0.167676      0.167676       8.04889       8.21657    
  70  0.616166     -0.484239     -0.738258E-01  0.738258E-01   8.06697       8.14080    
loop,thermsimp(1:2)       31  0.195433      0.243518    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    376          8.11          0.85          1.12         24.33          0.07          0.05         26.42
Just calling func    0   0         26.42


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    377          8.46          0.86          1.12         24.36          0.09          0.05         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       31
neval is:      376
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       31      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       32
neval is:      376


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      376     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.701343     -0.354759     -0.540855E-01  0.540855E-01   7.97387       8.02795    
   2  0.779682     -0.248869     -0.379419E-01  0.379419E-01   8.02849       8.06643    
   3  0.611645     -0.491604     -0.749485E-01  0.749485E-01   8.03164       8.10659    
   4  0.380626     -0.965937     -0.147264      0.147264       8.04862       8.19588    
   5  0.986599     -0.134915E-01 -0.205687E-02  0.205687E-02   8.05256       8.05462    
   6  0.699021     -0.358075     -0.545910E-01  0.545910E-01   8.06114       8.11573    
   7  0.981217E-01  -2.32155     -0.353936      0.353936       7.98780       8.34174    
   8  0.221199      -1.50869     -0.230011      0.230011       8.06810       8.29811    
   9  0.802460     -0.220073     -0.335517E-01  0.335517E-01   8.08776       8.12131    
  10  0.623430     -0.472519     -0.720388E-01  0.720388E-01   8.01090       8.08294    
  11  0.669862     -0.400684     -0.610871E-01  0.610871E-01   8.04015       8.10124    
  12  0.957999     -0.429090E-01 -0.654178E-02  0.654178E-02   8.06657       8.07312    
  13  0.569879E-01  -2.86492     -0.436777      0.436777       8.07625       8.51303    
  14  0.245244      -1.40550     -0.214279      0.214279       8.09625       8.31053    
  15  0.870123     -0.139121     -0.212100E-01  0.212100E-01   8.13162       8.15283    
  16  0.429679     -0.844716     -0.128783      0.128783       8.05030       8.17908    
  17  0.369880     -0.994577     -0.151630      0.151630       8.08464       8.23627    
  18  0.964882     -0.357490E-01 -0.545020E-02  0.545020E-02   8.00020       8.00565    
  19  0.625983     -0.468432     -0.714158E-01  0.714158E-01   8.03863       8.11004    
  20  0.508652     -0.675991     -0.103060      0.103060       8.06697       8.17003    
  21  0.694697     -0.364279     -0.555369E-01  0.555369E-01   8.11627       8.17180    
  22  0.817819     -0.201114     -0.306612E-01  0.306612E-01   8.08698       8.11764    
  23  0.655732     -0.422003     -0.643374E-01  0.643374E-01   8.04755       8.11189    
  24  0.658757     -0.417401     -0.636357E-01  0.636357E-01   8.08733       8.15096    
  25  0.325934      -1.12106     -0.170914      0.170914       8.09327       8.26418    
  26  0.849137     -0.163535     -0.249320E-01  0.249320E-01   8.03877       8.06370    
  27  0.953435     -0.476843E-01 -0.726982E-02  0.726982E-02   8.14492       8.15219    
  28  0.435049     -0.832297     -0.126890      0.126890       8.09236       8.21924    
  29  0.155341E-01  -4.16472     -0.634941      0.634941       8.06856       8.70350    
  30  0.390095     -0.941364     -0.143518      0.143518       8.14409       8.28761    
  31  0.400867E-02  -5.51929     -0.841456      0.841456       8.11561       8.95707    
  32  0.989750     -0.103025E-01 -0.157069E-02  0.157069E-02   7.99049       7.99206    
  33  0.194149      -1.63913     -0.249897      0.249897       8.15873       8.40863    
  34  0.573547     -0.555915     -0.847532E-01  0.847532E-01   8.07850       8.16325    
  35  0.570216     -0.561740     -0.856413E-01  0.856413E-01   8.17237       8.25801    
  36  0.802122     -0.220494     -0.336159E-01  0.336159E-01   8.15023       8.18385    
  37  0.831214E-01  -2.48745     -0.379230      0.379230       8.17713       8.55636    
  38  0.280368      -1.27165     -0.193872      0.193872       8.04889       8.24277    
  39  0.568263     -0.565171     -0.861643E-01  0.861643E-01   8.06856       8.15472    
  40  0.570544     -0.561165     -0.855536E-01  0.855536E-01   8.09568       8.18123    
  41  0.524202     -0.645877     -0.984686E-01  0.984686E-01   8.03963       8.13810    
  42  0.625335E-01  -2.77205     -0.422619      0.422619       8.06036       8.48298    
  43  0.717146     -0.332476     -0.506884E-01  0.506884E-01   8.10002       8.15070    
  44  0.234175      -1.45169     -0.221320      0.221320       8.05853       8.27985    
  45  0.366320      -1.00425     -0.153105      0.153105       8.06750       8.22061    
  46  0.458915     -0.778891     -0.118748      0.118748       8.08186       8.20061    
  47  0.379536     -0.968806     -0.147701      0.147701       8.03442       8.18212    
  48  0.854466     -0.157278     -0.239782E-01  0.239782E-01   8.06512       8.08910    
  49  0.452738E-01  -3.09503     -0.471859      0.471859       8.10765       8.57951    
  50  0.966525     -0.340477E-01 -0.519082E-02  0.519082E-02   8.18731       8.19250    
  51  0.400949     -0.913920     -0.139334      0.139334       8.05990       8.19924    
  52  0.563096     -0.574305     -0.875569E-01  0.875569E-01   8.06063       8.14819    
  53  0.612298     -0.490536     -0.747857E-01  0.747857E-01   8.07112       8.14591    
  54  0.395518     -0.927559     -0.141413      0.141413       8.20747       8.34888    
  55  0.693522     -0.365972     -0.557950E-01  0.557950E-01   8.11238       8.16817    
  56  0.270894      -1.30603     -0.199113      0.199113       8.02104       8.22015    
  57  0.885600     -0.121490     -0.185220E-01  0.185220E-01   8.24556       8.26408    
  58  0.862297     -0.148155     -0.225873E-01  0.225873E-01   8.10859       8.13118    
  59  0.483017     -0.727702     -0.110943      0.110943       8.32632       8.43726    
  60  0.594400     -0.520203     -0.793087E-01  0.793087E-01   8.32654       8.40585    
  61  0.351664      -1.04508     -0.159330      0.159330       8.09541       8.25474    
  62  0.402505     -0.910048     -0.138743      0.138743       8.24674       8.38548    
  63  0.272240      -1.30107     -0.198358      0.198358       8.16407       8.36243    
  64  0.234792      -1.44906     -0.220919      0.220919       8.07678       8.29770    
  65  0.825709E-01  -2.49410     -0.380243      0.380243       8.11598       8.49622    
  66  0.636436     -0.451871     -0.688910E-01  0.688910E-01   8.10547       8.17436    
  67  0.942309     -0.594220E-01 -0.905930E-02  0.905930E-02   8.11654       8.12560    
  68  0.185829      -1.68293     -0.256574      0.256574       8.09754       8.35411    
  69  0.518004     -0.657773     -0.100282      0.100282       8.16632       8.26660    
  70  0.831797     -0.184167     -0.280776E-01  0.280776E-01   8.11213       8.14020    
loop,thermsimp(1:2)       32  0.540855E-01  0.379419E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    378          8.05          0.86          1.12         24.34          0.07          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    379          8.17          0.86          1.13         24.36          0.06          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       32
neval is:      378
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       32      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       33
neval is:      378


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      378     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.403971     -0.906412     -0.138189      0.138189       7.99049       8.12867    
   2  0.598662     -0.513057     -0.782193E-01  0.782193E-01   8.00020       8.07842    
   3  0.165178      -1.80073     -0.274534      0.274534       7.97387       8.24840    
   4  0.785331     -0.241651     -0.368414E-01  0.368414E-01   8.05256       8.08940    
   5  0.422061     -0.862604     -0.131510      0.131510       8.03877       8.17028    
   6  0.343624      -1.06821     -0.162856      0.162856       8.02849       8.19134    
   7  0.988862     -0.112001E-01 -0.170753E-02  0.170753E-02   8.06657       8.06828    
   8  0.586093E-01  -2.83686     -0.432500      0.432500       8.01090       8.44340    
   9  0.324880      -1.12430     -0.171408      0.171408       8.06512       8.23653    
  10  0.869373     -0.139983     -0.213414E-01  0.213414E-01   8.04015       8.06149    
  11  0.314362      -1.15721     -0.176425      0.176425       8.03164       8.20806    
  12  0.635265     -0.453712     -0.691717E-01  0.691717E-01   8.03863       8.10780    
  13  0.800738     -0.222221     -0.338792E-01  0.338792E-01   8.04755       8.08143    
  14  0.234515      -1.45024     -0.221099      0.221099       8.06114       8.28224    
  15  0.818766     -0.199957     -0.304849E-01  0.304849E-01   8.08698       8.11746    
  16  0.480807     -0.732289     -0.111643      0.111643       8.08776       8.19940    
  17  0.173083      -1.75398     -0.267407      0.267407       8.11654       8.38395    
  18  0.544835     -0.607272     -0.925830E-01  0.925830E-01   8.10859       8.20117    
  19  0.955728     -0.452816E-01 -0.690350E-02  0.690350E-02   8.03963       8.04653    
  20  0.909631     -0.947157E-01 -0.144401E-01  0.144401E-01   8.11213       8.12657    
  21  0.538276     -0.619384     -0.944295E-01  0.944295E-01   8.07112       8.16555    
  22  0.640373     -0.445705     -0.679509E-01  0.679509E-01   8.06063       8.12858    
  23  0.588429     -0.530300     -0.808480E-01  0.808480E-01   8.10002       8.18086    
  24  0.954392     -0.466804E-01 -0.711676E-02  0.711676E-02   8.08733       8.09444    
  25  0.976738     -0.235363E-01 -0.358828E-02  0.358828E-02   8.14492       8.14851    
  26  0.801897     -0.220775     -0.336587E-01  0.336587E-01   8.13162       8.16528    
  27  0.679499     -0.386400     -0.589095E-01  0.589095E-01   8.06856       8.12747    
  28  0.303686      -1.19176     -0.181693      0.181693       8.07850       8.26019    
  29  0.907562     -0.969936E-01 -0.147874E-01  0.147874E-01   8.11238       8.12716    
  30  0.117971E-01  -4.43990     -0.676895      0.676895       8.06697       8.74387    
  31  0.324683      -1.12491     -0.171500      0.171500       8.11627       8.28777    
  32  0.662106     -0.412329     -0.628626E-01  0.628626E-01   8.10547       8.16834    
  33  0.334080      -1.09637     -0.167150      0.167150       8.05030       8.21745    
  34  0.307577      -1.17903     -0.179752      0.179752       8.09568       8.27543    
  35  0.539029     -0.617986     -0.942165E-01  0.942165E-01   8.03442       8.12863    
  36  0.822737     -0.195119     -0.297473E-01  0.297473E-01   8.15023       8.17998    
  37  0.973480     -0.268776E-01 -0.409769E-02  0.409769E-02   8.18731       8.19140    
  38  0.918970     -0.845018E-01 -0.128829E-01  0.128829E-01   8.04862       8.06150    
  39  0.203072      -1.59419     -0.243046      0.243046       8.05990       8.30295    
  40  0.467655     -0.760024     -0.115871      0.115871       8.08186       8.19773    
  41  0.323145      -1.12965     -0.172224      0.172224       8.09236       8.26458    
  42  0.505961     -0.681295     -0.103868      0.103868       8.02104       8.12490    
  43  0.699853E-01  -2.65947     -0.405455      0.405455       8.06750       8.47296    
  44  0.188263      -1.66991     -0.254590      0.254590       8.08464       8.33923    
  45  0.663178     -0.410711     -0.626159E-01  0.626159E-01   8.04889       8.11151    
  46  0.680233     -0.385320     -0.587447E-01  0.587447E-01   8.09541       8.15416    
  47  0.717812     -0.331548     -0.505468E-01  0.505468E-01   8.17237       8.22292    
  48  0.319374      -1.14139     -0.174014      0.174014       8.24556       8.41957    
  49  0.667076     -0.404851     -0.617224E-01  0.617224E-01   8.09327       8.15499    
  50  0.755360     -0.280560     -0.427735E-01  0.427735E-01   8.16632       8.20909    
  51  0.105804      -2.24617     -0.342445      0.342445       8.05853       8.40097    
  52  0.432752     -0.837590     -0.127697      0.127697       8.14409       8.27179    
  53  0.258710      -1.35205     -0.206129      0.206129       8.07678       8.28291    
  54  0.826410     -0.190665     -0.290682E-01  0.290682E-01   8.06810       8.09717    
  55  0.958430     -0.424590E-01 -0.647318E-02  0.647318E-02   8.09625       8.10272    
  56  0.898442     -0.107093     -0.163271E-01  0.163271E-01   7.98780       8.00413    
  57  0.794924     -0.229509     -0.349903E-01  0.349903E-01   8.20747       8.24246    
  58  0.191148      -1.65471     -0.252272      0.252272       8.09754       8.34981    
  59  0.920959     -0.823397E-01 -0.125533E-01  0.125533E-01   8.16407       8.17662    
  60  0.239714      -1.42831     -0.217756      0.217756       8.24674       8.46449    
  61  0.337561      -1.08601     -0.165570      0.165570       8.32654       8.49211    
  62  0.229537      -1.47169     -0.224370      0.224370       8.15873       8.38310    
  63  0.518941     -0.655965     -0.100007      0.100007       8.32632       8.42632    
  64  0.565096     -0.570759     -0.870164E-01  0.870164E-01   8.06036       8.14738    
  65  0.934648     -0.675849E-01 -0.103038E-01  0.103038E-01   8.11598       8.12628    
  66  0.699822     -0.356929     -0.544164E-01  0.544164E-01   8.07625       8.13067    
  67  0.614954     -0.486208     -0.741259E-01  0.741259E-01   8.17713       8.25125    
  68  0.137942      -1.98092     -0.302006      0.302006       8.10765       8.40965    
  69  0.565370     -0.570275     -0.869426E-01  0.869426E-01   8.06856       8.15550    
  70  0.290261E-01  -3.53956     -0.539631      0.539631       8.04747       8.58710    
loop,thermsimp(1:2)       33  0.138189      0.782193E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    380          8.37          0.86          1.12         24.43          0.06          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.37
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       33
neval is:      379
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       33      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       34
neval is:      379


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      379     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.228924      -1.47437     -0.224778      0.224778       7.98780       8.21258    
   2  0.299376      -1.20605     -0.183872      0.183872       8.03963       8.22350    
   3  0.220114      -1.51361     -0.230761      0.230761       8.04015       8.27091    
   4  0.229209      -1.47312     -0.224588      0.224588       8.04862       8.27321    
   5  0.902477     -0.102612     -0.156440E-01  0.156440E-01   8.06657       8.08222    
   6  0.659052     -0.416953     -0.635674E-01  0.635674E-01   8.00020       8.06377    
   7  0.100321E-01  -4.60197     -0.701603      0.701603       8.04755       8.74915    
   8  0.588837     -0.529606     -0.807422E-01  0.807422E-01   8.05256       8.13330    
   9  0.270943      -1.30585     -0.199086      0.199086       8.08733       8.28641    
  10  0.505518     -0.682171     -0.104002      0.104002       8.06810       8.17210    
  11  0.264565      -1.32967     -0.202718      0.202718       8.09625       8.29896    
  12  0.806386     -0.215193     -0.328078E-01  0.328078E-01   8.03863       8.07144    
  13  0.340560      -1.07716     -0.164221      0.164221       8.04889       8.21312    
  14  0.906186     -0.985106E-01 -0.150186E-01  0.150186E-01   8.08698       8.10200    
  15  0.786070     -0.240709     -0.366979E-01  0.366979E-01   8.02104       8.05773    
  16  0.540508     -0.615247     -0.937988E-01  0.937988E-01   8.11598       8.20978    
  17  0.935065     -0.671392E-01 -0.102358E-01  0.102358E-01   8.11213       8.12236    
  18  0.915359     -0.884391E-01 -0.134832E-01  0.134832E-01   8.11238       8.12586    
  19  0.958261     -0.426353E-01 -0.650006E-02  0.650006E-02   8.06856       8.07506    
  20  0.935110     -0.670907E-01 -0.102285E-01  0.102285E-01   8.06063       8.07086    
  21  0.637755     -0.449800     -0.685753E-01  0.685753E-01   8.03442       8.10299    
  22  0.975714     -0.245861E-01 -0.374833E-02  0.374833E-02   7.99049       7.99423    
  23  0.797424     -0.226369     -0.345116E-01  0.345116E-01   8.07625       8.11076    
  24  0.214179      -1.54094     -0.234928      0.234928       8.06036       8.29529    
  25  0.372145     -0.988472     -0.150700      0.150700       8.14492       8.29562    
  26  0.925208     -0.777367E-01 -0.118515E-01  0.118515E-01   8.09541       8.10726    
  27  0.175897      -1.73786     -0.264948      0.264948       8.09327       8.35822    
  28  0.952033     -0.491554E-01 -0.749409E-02  0.749409E-02   8.06856       8.07605    
  29  0.158274E-01  -4.14601     -0.632089      0.632089       8.13162       8.76371    
  30  0.799308     -0.224008     -0.341517E-01  0.341517E-01   8.07112       8.10527    
  31  0.248227      -1.39341     -0.212435      0.212435       8.10547       8.31791    
  32  0.244914      -1.40685     -0.214484      0.214484       8.03877       8.25325    
  33  0.390842     -0.939452     -0.143226      0.143226       8.16407       8.30729    
  34  0.146784      -1.91879     -0.292534      0.292534       8.15023       8.44277    
  35  0.500975     -0.691199     -0.105378      0.105378       8.10002       8.20539    
  36  0.480131E-01  -3.03628     -0.462903      0.462903       8.02849       8.49139    
  37  0.124503      -2.08343     -0.317633      0.317633       8.18731       8.50494    
  38  0.670304     -0.400024     -0.609866E-01  0.609866E-01   8.08186       8.14285    
  39  0.997449     -0.255468E-02 -0.389479E-03  0.389479E-03   8.08776       8.08815    
  40  0.681761     -0.383076     -0.584027E-01  0.584027E-01   8.10859       8.16699    
  41  0.440529     -0.819778     -0.124981      0.124981       8.03164       8.15662    
  42  0.342489      -1.07152     -0.163360      0.163360       8.16632       8.32968    
  43  0.735753     -0.306861     -0.467831E-01  0.467831E-01   8.05030       8.09708    
  44  0.614752     -0.486537     -0.741760E-01  0.741760E-01   8.17237       8.24655    
  45  0.351660      -1.04509     -0.159332      0.159332       8.06512       8.22446    
  46  0.777165     -0.252103     -0.384348E-01  0.384348E-01   8.20747       8.24590    
  47  0.392618     -0.934919     -0.142535      0.142535       7.97387       8.11640    
  48  0.385647     -0.952832     -0.145266      0.145266       8.17713       8.32239    
  49  0.834392     -0.181052     -0.276027E-01  0.276027E-01   8.07850       8.10610    
  50  0.469158     -0.756815     -0.115382      0.115382       8.09236       8.20774    
  51  0.697320     -0.360511     -0.549625E-01  0.549625E-01   8.14409       8.19905    
  52  0.987150     -0.129333E-01 -0.197177E-02  0.197177E-02   8.09568       8.09765    
  53  0.512413     -0.668624     -0.101937      0.101937       8.06114       8.16308    
  54  0.781282     -0.246819     -0.376294E-01  0.376294E-01   8.07678       8.11441    
  55  0.290579      -1.23588     -0.188419      0.188419       8.11627       8.30469    
  56  0.921499     -0.817534E-01 -0.124639E-01  0.124639E-01   8.05990       8.07237    
  57  0.198558      -1.61668     -0.246474      0.246474       8.08464       8.33111    
  58  0.488340     -0.716743     -0.109273      0.109273       8.09754       8.20681    
  59  0.874587     -0.134003     -0.204298E-01  0.204298E-01   8.15873       8.17916    
  60  0.165334      -1.79979     -0.274391      0.274391       8.11654       8.39093    
  61  0.712283     -0.339280     -0.517256E-01  0.517256E-01   8.05853       8.11025    
  62  0.578012E-01  -2.85075     -0.434617      0.434617       8.10765       8.54226    
  63  0.700556     -0.355880     -0.542565E-01  0.542565E-01   8.24556       8.29981    
  64  0.502101     -0.688954     -0.105036      0.105036       8.32632       8.43135    
  65  0.730977E-02  -4.91854     -0.749867      0.749867       8.01090       8.76077    
  66  0.986830     -0.132576E-01 -0.202121E-02  0.202121E-02   8.24674       8.24876    
  67  0.264041      -1.33165     -0.203020      0.203020       8.06750       8.27052    
  68  0.184096      -1.69230     -0.258003      0.258003       8.32654       8.58454    
  69  0.683389     -0.380691     -0.580391E-01  0.580391E-01   8.04747       8.10551    
  70  0.934635     -0.675991E-01 -0.103060E-01  0.103060E-01   8.37212       8.38242    
loop,thermsimp(1:2)       34  0.224778      0.183872    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    381          8.02          0.86          1.13         24.30          0.09          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    382          8.28          0.86          1.13         24.79          0.03          0.05         26.86
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  380    8.0225        1.173     -1.870      3.231     -102.6      1.365    
                      0.3259      1.324     -99.70      3.784    -0.7185E-01

                       2.230     -1.070      1.530      6875.      3398.    

                     -0.1775      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6042.      505.6    

                       1.433     -5.873     -4.255     -8.524      6.609    

                      -14.96     -3.595      8302.      0.000     0.1085E+05



                       1386.     0.1079E+05 -3398.      9729.      5033.    

                       4922.     0.2333E-01 0.1845     0.1778E-02 0.1045    

                     -0.2486    -0.9608E-01 0.1864     0.1104     0.5246E-01



                     -0.4761    -0.7904      0.000     0.8931E-01-0.7272E-01

                      0.6457E-02 0.1052    -0.7116    -0.1408     0.4873E-01

                      0.5299E-01 0.1147    -0.6707     -1.216      7030.    



                      -1.081     -1.215     -2.005     -2.319    -0.3807    

                     -0.3252      9.219      8.676    -0.1890E+05 -4.000    

                     -0.5846     -2.168      9.293      8.870    -0.1908E+05



                      -4.000     0.4761    -0.4935      8.851      9.077    

                     -0.1908E+05 -7.000    -0.7667    -0.6801      9.031    

                       8.761    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       34
neval is:      381
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       34      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       35
neval is:      381


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      381     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347237      -1.05775     -0.161261      0.161261       7.99049       8.15175    
   2  0.621479     -0.475653     -0.725168E-01  0.725168E-01   8.02104       8.09355    
   3  0.221273      -1.50836     -0.229960      0.229960       8.00020       8.23016    
   4  0.180626E-01  -4.01391     -0.611950      0.611950       8.06063       8.67258    
   5  0.216093      -1.53205     -0.233572      0.233572       8.03863       8.27220    
   6  0.351343      -1.04599     -0.159469      0.159469       8.05990       8.21937    
   7  0.360847      -1.01930     -0.155400      0.155400       8.06856       8.22396    
   8  0.439525     -0.822061     -0.125329      0.125329       8.06856       8.19389    
   9  0.910616E-01  -2.39622     -0.365321      0.365321       8.06657       8.43190    
  10  0.549745     -0.598300     -0.912152E-01  0.912152E-01   8.08776       8.17897    
  11  0.619825     -0.478318     -0.729230E-01  0.729230E-01   8.05030       8.12322    
  12  0.548169E-01  -2.90376     -0.442698      0.442698       8.09568       8.53838    
  13  0.947163     -0.542842E-01 -0.827602E-02  0.827602E-02   8.08698       8.09525    
  14  0.725459     -0.320951     -0.489312E-01  0.489312E-01   8.03442       8.08335    
  15  0.481613     -0.730615     -0.111388      0.111388       8.07112       8.18251    
  16  0.866286     -0.143540     -0.218838E-01  0.218838E-01   8.04747       8.06935    
  17  0.221988E-01  -3.80772     -0.580514      0.580514       8.07850       8.65901    
  18  0.980823     -0.193630E-01 -0.295204E-02  0.295204E-02   8.09541       8.09836    
  19  0.332549      -1.10097     -0.167850      0.167850       8.05853       8.22638    
  20  0.989035     -0.110256E-01 -0.168093E-02  0.168093E-02   8.07625       8.07793    
  21  0.364016      -1.01056     -0.154067      0.154067       8.07678       8.23085    
  22  0.861799     -0.148733     -0.226754E-01  0.226754E-01   7.97387       7.99654    
  23  0.622306     -0.474324     -0.723141E-01  0.723141E-01   8.11213       8.18444    
  24  0.575476     -0.552558     -0.842414E-01  0.842414E-01   8.11238       8.19662    
  25  0.205536      -1.58213     -0.241207      0.241207       8.05256       8.29377    
  26  0.124037      -2.08718     -0.318205      0.318205       8.08186       8.40007    
  27  0.467008     -0.761408     -0.116082      0.116082       8.03164       8.14772    
  28  0.273870      -1.29510     -0.197448      0.197448       8.06114       8.25859    
  29  0.842780     -0.171050     -0.260777E-01  0.260777E-01   8.10859       8.13467    
  30  0.709315     -0.343455     -0.523622E-01  0.523622E-01   8.06810       8.12046    
  31  0.677144     -0.389871     -0.594386E-01  0.594386E-01   8.15873       8.21817    
  32  0.656062     -0.421500     -0.642608E-01  0.642608E-01   8.14409       8.20835    
  33  0.721592     -0.326295     -0.497460E-01  0.497460E-01   8.10002       8.14976    
  34  0.120172      -2.11883     -0.323031      0.323031       8.09754       8.42057    
  35  0.832403     -0.183439     -0.279666E-01  0.279666E-01   8.09236       8.12032    
  36  0.607577     -0.498276     -0.759658E-01  0.759658E-01   8.11598       8.19195    
  37  0.169814      -1.77305     -0.270314      0.270314       7.98780       8.25811    
  38  0.578085     -0.548034     -0.835518E-01  0.835518E-01   8.04889       8.13245    
  39  0.201144      -1.60373     -0.244501      0.244501       8.03963       8.28413    
  40  0.922823     -0.803178E-01 -0.122450E-01  0.122450E-01   8.06512       8.07737    
  41  0.136644      -1.99038     -0.303447      0.303447       8.20747       8.51092    
  42  0.836366     -0.178689     -0.272424E-01  0.272424E-01   8.17237       8.19961    
  43  0.590669     -0.526499     -0.802685E-01  0.802685E-01   8.24674       8.32700    
  44  0.745946     -0.293102     -0.446855E-01  0.446855E-01   8.03877       8.08345    
  45  0.874736     -0.133833     -0.204038E-01  0.204038E-01   8.06750       8.08791    
  46  0.370232     -0.993625     -0.151485      0.151485       8.04015       8.19164    
  47  0.832293     -0.183570     -0.279866E-01  0.279866E-01   8.04862       8.07660    
  48  0.351566      -1.04536     -0.159372      0.159372       8.08733       8.24670    
  49  0.705870     -0.348324     -0.531045E-01  0.531045E-01   8.06036       8.11346    
  50  0.323816      -1.12758     -0.171908      0.171908       8.14492       8.31683    
  51  0.197269      -1.62319     -0.247467      0.247467       8.09625       8.34371    
  52  0.140686      -1.96123     -0.299003      0.299003       8.24556       8.54456    
  53  0.913651     -0.903067E-01 -0.137679E-01  0.137679E-01   8.11627       8.13003    
  54  0.515699     -0.662233     -0.100962      0.100962       8.16407       8.26503    
  55  0.217669      -1.52478     -0.232464      0.232464       8.10547       8.33794    
  56  0.234146      -1.45181     -0.221339      0.221339       8.17713       8.39847    
  57  0.948303     -0.530813E-01 -0.809262E-02  0.809262E-02   8.16632       8.17441    
  58  0.165683      -1.79768     -0.274069      0.274069       8.08464       8.35871    
  59  0.506186     -0.680851     -0.103801      0.103801       8.09327       8.19707    
  60  0.644381     -0.439466     -0.669997E-01  0.669997E-01   8.37212       8.43912    
  61  0.790610     -0.234950     -0.358198E-01  0.358198E-01   8.11654       8.15236    
  62  0.945427     -0.561185E-01 -0.855567E-02  0.855567E-02   8.32632       8.33487    
  63  0.195494      -1.63222     -0.248844      0.248844       8.15023       8.39908    
  64  0.478914     -0.736235     -0.112244      0.112244       8.02849       8.14073    
  65  0.926031     -0.768470E-01 -0.117159E-01  0.117159E-01   8.18731       8.19902    
  66  0.945712     -0.558175E-01 -0.850978E-02  0.850978E-02   8.10765       8.11616    
  67  0.892862     -0.113323     -0.172769E-01  0.172769E-01   8.32654       8.34382    
  68  0.766967     -0.265312     -0.404487E-01  0.404487E-01   8.04755       8.08800    
  69  0.720632     -0.327626     -0.499490E-01  0.499490E-01   8.01090       8.06085    
  70  0.404614     -0.904821     -0.137946      0.137946       8.02250       8.16044    
loop,thermsimp(1:2)       35  0.161261      0.725168E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    383          8.10          0.86          1.12         24.38          0.07          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    384          8.10          0.86          1.12         24.45          0.07          0.04         26.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.10
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       35
neval is:      383
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       35      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       36
neval is:      383


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      383     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.233712      -1.45367     -0.221622      0.221622       7.97387       8.19549    
   2  0.607568     -0.498291     -0.759680E-01  0.759680E-01   8.01090       8.08687    
   3  0.905785     -0.989529E-01 -0.150861E-01  0.150861E-01   8.04747       8.06256    
   4  0.995938E-01  -2.30666     -0.351666      0.351666       8.04862       8.40028    
   5  0.851360     -0.160920     -0.245335E-01  0.245335E-01   8.06512       8.08966    
   6  0.730583     -0.313913     -0.478583E-01  0.478583E-01   8.07625       8.12411    
   7  0.426216     -0.852810     -0.130017      0.130017       8.03442       8.16444    
   8  0.285108      -1.25489     -0.191317      0.191317       8.03877       8.23008    
   9  0.839246     -0.175251     -0.267183E-01  0.267183E-01   8.06750       8.09422    
  10  0.217639      -1.52492     -0.232484      0.232484       8.04755       8.28003    
  11  0.183996E-02  -6.29801     -0.960177      0.960177       8.02104       8.98121    
  12  0.682631     -0.381801     -0.582083E-01  0.582083E-01   8.08698       8.14519    
  13  0.203596      -1.59162     -0.242654      0.242654       8.09541       8.33807    
  14  0.881164     -0.126512     -0.192877E-01  0.192877E-01   8.06036       8.07965    
  15  0.711431     -0.340477     -0.519081E-01  0.519081E-01   8.10765       8.15955    
  16  0.874326     -0.134302     -0.204753E-01  0.204753E-01   8.09236       8.11283    
  17  0.814222     -0.205523     -0.313334E-01  0.313334E-01   8.06810       8.09943    
  18  0.995668     -0.434126E-02 -0.661857E-03  0.661857E-03   8.05030       8.05096    
  19  0.693805     -0.365564     -0.557329E-01  0.557329E-01   8.11627       8.17200    
  20  0.958584     -0.422984E-01 -0.644870E-02  0.644870E-02   8.04889       8.05534    
  21  0.748022     -0.290323     -0.442619E-01  0.442619E-01   8.10859       8.15285    
  22  0.696703     -0.361396     -0.550974E-01  0.550974E-01   8.02849       8.08359    
  23  0.732990     -0.310623     -0.473567E-01  0.473567E-01   8.03164       8.07900    
  24  0.534749     -0.625958     -0.954317E-01  0.954317E-01   8.10002       8.19545    
  25  0.691641     -0.368688     -0.562091E-01  0.562091E-01   7.99049       8.04669    
  26  0.300458      -1.20245     -0.183322      0.183322       8.11654       8.29986    
  27  0.977116     -0.231502E-01 -0.352942E-02  0.352942E-02   8.02250       8.02603    
  28  0.542581     -0.611418     -0.932151E-01  0.932151E-01   8.16632       8.25953    
  29  0.266111      -1.32384     -0.201829      0.201829       8.08776       8.28959    
  30  0.692298     -0.367738     -0.560643E-01  0.560643E-01   8.07112       8.12719    
  31  0.664047     -0.409403     -0.624164E-01  0.624164E-01   8.11213       8.17454    
  32  0.542186     -0.612146     -0.933261E-01  0.933261E-01   8.04015       8.13348    
  33  0.362243      -1.01544     -0.154811      0.154811       8.11598       8.27079    
  34  0.578658     -0.547044     -0.834008E-01  0.834008E-01   8.06856       8.15196    
  35  0.489298     -0.714783     -0.108974      0.108974       8.11238       8.22135    
  36  0.617485     -0.482100     -0.734997E-01  0.734997E-01   8.09327       8.16677    
  37  0.368651     -0.997905     -0.152138      0.152138       8.18731       8.33944    
  38  0.198936      -1.61477     -0.246183      0.246183       8.17237       8.41856    
  39  0.505263     -0.682676     -0.104079      0.104079       8.14409       8.24817    
  40  0.983997     -0.161325E-01 -0.245951E-02  0.245951E-02   8.15873       8.16119    
  41  0.630553     -0.461159     -0.703070E-01  0.703070E-01   8.05990       8.13021    
  42  0.423821E-01  -3.16103     -0.481922      0.481922       8.06856       8.55048    
  43  0.488935     -0.715526     -0.109087      0.109087       8.05853       8.16762    
  44  0.402078     -0.911110     -0.138905      0.138905       8.00020       8.13910    
  45  0.380878     -0.965277     -0.147163      0.147163       8.07678       8.22395    
  46  0.260585E-01  -3.64741     -0.556074      0.556074       8.08733       8.64340    
  47  0.681660     -0.383224     -0.584252E-01  0.584252E-01   7.98780       8.04622    
  48  0.489074     -0.715241     -0.109044      0.109044       8.06114       8.17018    
  49  0.752363     -0.284536     -0.433796E-01  0.433796E-01   8.16407       8.20745    
  50  0.978934     -0.212911E-01 -0.324599E-02  0.324599E-02   8.03863       8.04187    
  51  0.297789      -1.21137     -0.184682      0.184682       8.03963       8.22431    
  52  0.551604     -0.594926     -0.907007E-01  0.907007E-01   8.05256       8.14326    
  53  0.546413     -0.604381     -0.921422E-01  0.921422E-01   8.14492       8.23707    
  54  0.831880     -0.184067     -0.280623E-01  0.280623E-01   8.24674       8.27480    
  55  0.873708     -0.135010     -0.205832E-01  0.205832E-01   8.32632       8.34690    
  56  0.169447      -1.77521     -0.270644      0.270644       8.10547       8.37612    
  57  0.434000     -0.834712     -0.127258      0.127258       8.09625       8.22351    
  58  0.506119     -0.680984     -0.103821      0.103821       8.32654       8.43036    
  59  0.168470      -1.78100     -0.271526      0.271526       8.08464       8.35616    
  60  0.820014     -0.198433     -0.302526E-01  0.302526E-01   8.17713       8.20738    
  61  0.973689     -0.266631E-01 -0.406497E-02  0.406497E-02   8.15023       8.15430    
  62  0.438579     -0.824215     -0.125658      0.125658       8.08186       8.20752    
  63  0.725095     -0.321452     -0.490077E-01  0.490077E-01   8.09754       8.14654    
  64  0.857338     -0.153923     -0.234667E-01  0.234667E-01   8.06657       8.09004    
  65  0.363865      -1.01097     -0.154130      0.154130       8.37212       8.52625    
  66  0.391136     -0.938701     -0.143112      0.143112       8.20747       8.35058    
  67  0.949080     -0.522625E-01 -0.796779E-02  0.796779E-02   8.09568       8.10365    
  68  0.791138     -0.234283     -0.357182E-01  0.357182E-01   8.24556       8.28127    
  69  0.675448     -0.392379     -0.598210E-01  0.598210E-01   8.07850       8.13832    
  70  0.955283     -0.457479E-01 -0.697460E-02  0.697460E-02   8.09790       8.10488    
loop,thermsimp(1:2)       36  0.221622      0.759680E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    385          8.11          0.86          1.14         24.43          0.09          0.05         26.56
Just calling func    0   0         26.56


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.11
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       36
neval is:      384
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       36      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       37
neval is:      384


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      384     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.411300     -0.888432     -0.135448      0.135448       8.02250       8.15795    
   2  0.697205     -0.360676     -0.549877E-01  0.549877E-01   8.03863       8.09362    
   3  0.314648E-01  -3.45889     -0.527332      0.527332       7.98780       8.51513    
   4  0.857269     -0.154003     -0.234789E-01  0.234789E-01   7.99049       8.01396    
   5  0.652165     -0.427457     -0.651690E-01  0.651690E-01   8.05030       8.11547    
   6  0.510145     -0.673060     -0.102613      0.102613       8.04889       8.15151    
   7  0.175175      -1.74197     -0.265575      0.265575       8.04747       8.31305    
   8  0.373803     -0.984025     -0.150022      0.150022       8.03164       8.18166    
   9  0.514972     -0.663642     -0.101177      0.101177       8.06036       8.16154    
  10  0.548235     -0.601051     -0.916345E-01  0.916345E-01   8.02849       8.12012    
  11  0.541310     -0.613763     -0.935726E-01  0.935726E-01   8.01090       8.10447    
  12  0.734083     -0.309133     -0.471295E-01  0.471295E-01   8.06512       8.11225    
  13  0.422599     -0.861332     -0.131316      0.131316       8.06657       8.19789    
  14  0.287055      -1.24808     -0.190279      0.190279       8.06750       8.25778    
  15  0.885133     -0.122017     -0.186024E-01  0.186024E-01   8.06810       8.08670    
  16  0.391075     -0.938857     -0.143135      0.143135       8.09568       8.23882    
  17  0.473784     -0.747003     -0.113886      0.113886       8.09790       8.21179    
  18  0.691812     -0.368440     -0.561714E-01  0.561714E-01   8.09236       8.14853    
  19  0.644447     -0.439363     -0.669841E-01  0.669841E-01   8.07625       8.14323    
  20  0.805933     -0.215754     -0.328933E-01  0.328933E-01   8.07112       8.10402    
  21  0.393766     -0.931998     -0.142090      0.142090       8.05990       8.20199    
  22  0.907098E-01  -2.40009     -0.365911      0.365911       8.04015       8.40606    
  23  0.376515     -0.976796     -0.148920      0.148920       8.07850       8.22742    
  24  0.819190     -0.199439     -0.304060E-01  0.304060E-01   8.00020       8.03060    
  25  0.692438     -0.367536     -0.560335E-01  0.560335E-01   8.05256       8.10859    
  26  0.188370      -1.66935     -0.254504      0.254504       8.08698       8.34148    
  27  0.500532     -0.692083     -0.105513      0.105513       8.09754       8.20305    
  28  0.282311      -1.26475     -0.192820      0.192820       8.06856       8.26138    
  29  0.338061      -1.08453     -0.165344      0.165344       8.10859       8.27393    
  30  0.466208     -0.763123     -0.116344      0.116344       8.15023       8.26658    
  31  0.893084     -0.113075     -0.172391E-01  0.172391E-01   8.10765       8.12489    
  32  0.818806     -0.199908     -0.304775E-01  0.304775E-01   8.15873       8.18921    
  33  0.585066     -0.536031     -0.817218E-01  0.817218E-01   8.03442       8.11614    
  34  0.527412     -0.639774     -0.975382E-01  0.975382E-01   8.09327       8.19080    
  35  0.994295     -0.572143E-02 -0.872273E-03  0.872273E-03   8.05853       8.05940    
  36  0.739278     -0.302082     -0.460545E-01  0.460545E-01   8.06114       8.10720    
  37  0.230995      -1.46536     -0.223404      0.223404       8.11627       8.33967    
  38  0.414929     -0.879648     -0.134109      0.134109       8.11213       8.24623    
  39  0.378446     -0.971682     -0.148140      0.148140       8.10002       8.24816    
  40  0.368620     -0.997990     -0.152151      0.152151       7.97387       8.12602    
  41  0.301312      -1.19961     -0.182889      0.182889       8.17713       8.36002    
  42  0.105882E-01  -4.54801     -0.693377      0.693377       8.16407       8.85744    
  43  0.481885     -0.730049     -0.111301      0.111301       8.08186       8.19316    
  44  0.446716     -0.805833     -0.122855      0.122855       8.11238       8.23523    
  45  0.482098     -0.729608     -0.111234      0.111234       8.09625       8.20748    
  46  0.278892      -1.27693     -0.194677      0.194677       8.07678       8.27146    
  47  0.756484     -0.279074     -0.425469E-01  0.425469E-01   8.03963       8.08217    
  48  0.662766     -0.411334     -0.627108E-01  0.627108E-01   8.03877       8.10148    
  49  0.433861E-01  -3.13762     -0.478352      0.478352       8.14492       8.62328    
  50  0.825649E-02  -4.79676     -0.731300      0.731300       8.14409       8.87539    
  51  0.476679     -0.740911     -0.112957      0.112957       8.16632       8.27928    
  52  0.128614      -2.05094     -0.312680      0.312680       8.11598       8.42866    
  53  0.609086     -0.495797     -0.755877E-01  0.755877E-01   8.24674       8.32232    
  54  0.484878E-01  -3.02644     -0.461403      0.461403       8.04755       8.50895    
  55  0.287383E-02  -5.85211     -0.892196      0.892196       8.24556       9.13775    
  56  0.699724     -0.357070     -0.544379E-01  0.544379E-01   8.08776       8.14219    
  57  0.407524     -0.897655     -0.136854      0.136854       8.11654       8.25339    
  58  0.530107     -0.634677     -0.967611E-01  0.967611E-01   8.09541       8.19217    
  59  0.589469E-01  -2.83112     -0.431624      0.431624       8.18731       8.61893    
  60  0.357066E-01  -3.33242     -0.508051      0.508051       8.32632       8.83437    
  61  0.726760     -0.319159     -0.486581E-01  0.486581E-01   8.20747       8.25613    
  62  0.486103     -0.721334     -0.109973      0.109973       8.08464       8.19461    
  63  0.212811      -1.54735     -0.235905      0.235905       8.10547       8.34138    
  64  0.264725      -1.32906     -0.202625      0.202625       8.04862       8.25124    
  65  0.162129      -1.81936     -0.277375      0.277375       8.17237       8.44975    
  66  0.148935      -1.90425     -0.290316      0.290316       8.32654       8.61685    
  67  0.271622      -1.30334     -0.198704      0.198704       8.37212       8.57082    
  68  0.965736     -0.348643E-01 -0.531531E-02  0.531531E-02   8.06856       8.07387    
  69  0.659377     -0.416460     -0.634923E-01  0.634923E-01   8.08733       8.15082    
  70  0.569807     -0.562457     -0.857506E-01  0.857506E-01   8.10587       8.19162    
loop,thermsimp(1:2)       37  0.135448      0.549877E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    386          8.10          0.86          1.12         24.35          0.08          0.04         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.10
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       37
neval is:      385
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       37      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       38
neval is:      385


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      385     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.408852     -0.894401     -0.136358      0.136358       7.99049       8.12684    
   2  0.259700      -1.34823     -0.205547      0.205547       8.00020       8.20575    
   3  0.681144E-01  -2.68657     -0.409586      0.409586       8.05853       8.46812    
   4  0.158140      -1.84427     -0.281173      0.281173       8.06856       8.34973    
   5  0.497681     -0.697796     -0.106384      0.106384       8.03963       8.14601    
   6  0.800218     -0.222871     -0.339782E-01  0.339782E-01   8.06810       8.10208    
   7  0.831967     -0.183962     -0.280464E-01  0.280464E-01   8.03863       8.06667    
   8  0.707345     -0.346237     -0.527863E-01  0.527863E-01   8.03877       8.09155    
   9  0.265927      -1.32454     -0.201935      0.201935       8.07112       8.27306    
  10  0.659046     -0.416962     -0.635688E-01  0.635688E-01   8.01090       8.07447    
  11  0.654587E-01  -2.72634     -0.415649      0.415649       8.06114       8.47679    
  12  0.223329      -1.49911     -0.228550      0.228550       8.05256       8.28111    
  13  0.996019     -0.398855E-02 -0.608083E-03  0.608083E-03   8.06512       8.06573    
  14  0.553910     -0.590753     -0.900645E-01  0.900645E-01   8.05030       8.14037    
  15  0.218863      -1.51931     -0.231630      0.231630       8.03442       8.26605    
  16  0.414020     -0.881841     -0.134443      0.134443       8.02849       8.16293    
  17  0.229117      -1.47352     -0.224649      0.224649       8.10765       8.33230    
  18  0.341764      -1.07363     -0.163683      0.163683       7.97387       8.13755    
  19  0.357052      -1.02987     -0.157011      0.157011       8.08776       8.24477    
  20  0.780779     -0.247463     -0.377276E-01  0.377276E-01   8.07625       8.11398    
  21  0.382234     -0.961721     -0.146621      0.146621       8.09236       8.23898    
  22  0.123899      -2.08829     -0.318375      0.318375       8.08733       8.40570    
  23  0.393312     -0.933152     -0.142266      0.142266       8.04889       8.19116    
  24  0.481741     -0.730349     -0.111347      0.111347       8.02250       8.13385    
  25  0.120001      -2.12026     -0.323248      0.323248       8.06036       8.38361    
  26  0.506023     -0.681173     -0.103850      0.103850       8.03164       8.13549    
  27  0.891157     -0.115235     -0.175684E-01  0.175684E-01   8.15873       8.17630    
  28  0.584674     -0.536701     -0.818240E-01  0.818240E-01   8.09327       8.17509    
  29  0.313196      -1.16093     -0.176991      0.176991       8.10587       8.28286    
  30  0.507340     -0.678574     -0.103454      0.103454       8.09541       8.19887    
  31  0.985030     -0.150835E-01 -0.229959E-02  0.229959E-02   8.08186       8.08416    
  32  0.186570      -1.67895     -0.255968      0.255968       8.08464       8.34061    
  33  0.992622     -0.740493E-02 -0.112893E-02  0.112893E-02   8.06657       8.06770    
  34  0.344152      -1.06667     -0.162622      0.162622       8.05990       8.22252    
  35  0.327214      -1.11714     -0.170316      0.170316       8.09754       8.26785    
  36  0.722008     -0.325719     -0.496583E-01  0.496583E-01   8.09625       8.14591    
  37  0.471441     -0.751960     -0.114642      0.114642       8.09790       8.21255    
  38  0.483594     -0.726510     -0.110762      0.110762       8.07850       8.18926    
  39  0.799410     -0.223881     -0.341322E-01  0.341322E-01   8.11238       8.14651    
  40  0.864070     -0.146101     -0.222742E-01  0.222742E-01   8.09568       8.11795    
  41  0.326419      -1.11957     -0.170687      0.170687       8.11213       8.28281    
  42  0.970166E-01  -2.33287     -0.355663      0.355663       8.10002       8.45568    
  43  0.822479     -0.195432     -0.297951E-01  0.297951E-01   8.04862       8.07841    
  44  0.719858     -0.328701     -0.501129E-01  0.501129E-01   8.11654       8.16665    
  45  0.359763      -1.02231     -0.155859      0.155859       8.20747       8.36333    
  46  0.879180     -0.128765     -0.196312E-01  0.196312E-01   8.06750       8.08713    
  47  0.152514      -1.88050     -0.286696      0.286696       8.06856       8.35525    
  48  0.379430     -0.969085     -0.147744      0.147744       8.15023       8.29798    
  49  0.444703     -0.810349     -0.123544      0.123544       8.07678       8.20033    
  50  0.240485      -1.42510     -0.217266      0.217266       8.10859       8.32586    
  51  0.682479     -0.382024     -0.582423E-01  0.582423E-01   8.16632       8.22456    
  52  0.989508     -0.105479E-01 -0.160810E-02  0.160810E-02   8.04747       8.04908    
  53  0.626329E-01  -2.77046     -0.422377      0.422377       8.24674       8.66911    
  54  0.217806      -1.52415     -0.232368      0.232368       8.11627       8.34863    
  55  0.297102      -1.21368     -0.185034      0.185034       8.10547       8.29051    
  56  0.447982     -0.803002     -0.122423      0.122423       8.08698       8.20940    
  57  0.343456      -1.06870     -0.162930      0.162930       8.17713       8.34006    
  58  0.737340     -0.304706     -0.464546E-01  0.464546E-01   8.04015       8.08661    
  59  0.863080     -0.147248     -0.224489E-01  0.224489E-01   8.11598       8.13843    
  60  0.463462     -0.769030     -0.117244      0.117244       8.17237       8.28962    
  61  0.120067      -2.11970     -0.323164      0.323164       8.04755       8.37071    
  62  0.758415     -0.276525     -0.421582E-01  0.421582E-01   7.98780       8.02996    
  63  0.356867      -1.03039     -0.157091      0.157091       8.37212       8.52921    
  64  0.811695     -0.208631     -0.318073E-01  0.318073E-01   8.32654       8.35835    
  65  0.712430     -0.339074     -0.516942E-01  0.516942E-01   8.18731       8.23900    
  66  0.343671      -1.06807     -0.162835      0.162835       8.14492       8.30776    
  67  0.455065     -0.787315     -0.120032      0.120032       8.32632       8.44635    
  68  0.462404     -0.771317     -0.117593      0.117593       8.16407       8.28166    
  69  0.197402      -1.62251     -0.247364      0.247364       8.14409       8.39146    
  70  0.870222     -0.139007     -0.211926E-01  0.211926E-01   8.09995       8.12114    
loop,thermsimp(1:2)       38  0.136358      0.205547    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    387          8.11          0.86          1.12         24.34          0.06          0.04         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    388          8.82          0.86          1.13         24.32          0.06          0.04         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.11
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       38
neval is:      387
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       38      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       39
neval is:      387


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      387     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.125069      -2.07889     -0.316942      0.316942       7.98780       8.30474    
   2  0.274837      -1.29158     -0.196910      0.196910       8.04747       8.24438    
   3  0.305931E-01  -3.48698     -0.531615      0.531615       8.06512       8.59674    
   4  0.929157     -0.734779E-01 -0.112022E-01  0.112022E-01   8.03863       8.04983    
   5  0.995956     -0.405208E-02 -0.617768E-03  0.617768E-03   8.06657       8.06719    
   6  0.904971     -0.998521E-01 -0.152232E-01  0.152232E-01   8.01090       8.02612    
   7  0.189758      -1.66200     -0.253385      0.253385       8.04862       8.30200    
   8  0.134931      -2.00299     -0.305371      0.305371       8.08186       8.38723    
   9  0.302412      -1.19596     -0.182333      0.182333       8.04015       8.22249    
  10  0.389155     -0.943777     -0.143886      0.143886       8.06750       8.21139    
  11  0.947428     -0.540040E-01 -0.823330E-02  0.823330E-02   8.03877       8.04700    
  12  0.338357      -1.08365     -0.165211      0.165211       8.06810       8.23331    
  13  0.937476     -0.645645E-01 -0.984332E-02  0.984332E-02   8.07625       8.08609    
  14  0.399493     -0.917560     -0.139889      0.139889       8.09568       8.23557    
  15  0.527586     -0.639444     -0.974878E-01  0.974878E-01   8.09995       8.19744    
  16  0.297740      -1.21153     -0.184707      0.184707       7.99049       8.17519    
  17  0.557978     -0.583436     -0.889490E-01  0.889490E-01   8.02250       8.11145    
  18  0.267521      -1.31856     -0.201023      0.201023       8.03164       8.23266    
  19  0.637637     -0.449986     -0.686035E-01  0.686035E-01   7.97387       8.04247    
  20  0.838569     -0.176059     -0.268414E-01  0.268414E-01   8.11598       8.14282    
  21  0.132199E-01  -4.32603     -0.659535      0.659535       8.05030       8.70984    
  22  0.745606     -0.293557     -0.447549E-01  0.447549E-01   8.09625       8.14100    
  23  0.334504      -1.09511     -0.166957      0.166957       8.03963       8.20658    
  24  0.118852      -2.12987     -0.324715      0.324715       8.11238       8.43709    
  25  0.319911      -1.13971     -0.173758      0.173758       8.02849       8.20225    
  26  0.638302E-01  -2.75153     -0.419490      0.419490       8.11654       8.53603    
  27  0.173204      -1.75329     -0.267301      0.267301       8.09327       8.36057    
  28  0.885640     -0.121444     -0.185151E-01  0.185151E-01   8.15873       8.17725    
  29  0.710758     -0.341423     -0.520524E-01  0.520524E-01   8.07850       8.13055    
  30  0.938919     -0.630265E-01 -0.960884E-02  0.960884E-02   8.04889       8.05850    
  31  0.217740      -1.52445     -0.232414      0.232414       8.09541       8.32783    
  32  0.130036      -2.03994     -0.311004      0.311004       8.07678       8.38779    
  33  0.331090      -1.10537     -0.168521      0.168521       8.00020       8.16872    
  34  0.453525E-01  -3.09329     -0.471594      0.471594       8.08698       8.55857    
  35  0.494600     -0.704006     -0.107331      0.107331       8.09790       8.20523    
  36  0.488771E-01  -3.01845     -0.460184      0.460184       8.05990       8.52009    
  37  0.262916E-01  -3.63850     -0.554716      0.554716       8.16632       8.72103    
  38  0.975293     -0.250177E-01 -0.381413E-02  0.381413E-02   8.09236       8.09617    
  39  0.521026     -0.651955     -0.993952E-01  0.993952E-01   8.18731       8.28670    
  40  0.210960      -1.55609     -0.237237      0.237237       8.08776       8.32499    
  41  0.475166E-02  -5.34926     -0.815533      0.815533       8.03442       8.84995    
  42  0.675859     -0.391771     -0.597283E-01  0.597283E-01   8.09754       8.15726    
  43  0.691418     -0.369011     -0.562584E-01  0.562584E-01   8.07112       8.12738    
  44  0.425152     -0.855309     -0.130398      0.130398       8.05256       8.18296    
  45  0.141313      -1.95678     -0.298325      0.298325       8.16407       8.46239    
  46  0.902170     -0.102952     -0.156958E-01  0.156958E-01   8.11213       8.12782    
  47  0.794321     -0.230268     -0.351060E-01  0.351060E-01   8.10587       8.14098    
  48  0.685387     -0.377772     -0.575941E-01  0.575941E-01   8.17237       8.22997    
  49  0.273223      -1.29747     -0.197808      0.197808       8.10547       8.30328    
  50  0.784111     -0.243205     -0.370784E-01  0.370784E-01   8.15023       8.18731    
  51  0.824524     -0.192949     -0.294165E-01  0.294165E-01   8.14492       8.17434    
  52  0.855082     -0.156558     -0.238684E-01  0.238684E-01   8.10859       8.13246    
  53  0.744692E-01  -2.59737     -0.395988      0.395988       8.10765       8.50363    
  54  0.294857E-01  -3.52385     -0.537236      0.537236       8.17713       8.71436    
  55  0.225962      -1.48739     -0.226763      0.226763       8.08464       8.31140    
  56  0.211073      -1.55555     -0.237155      0.237155       8.11627       8.35342    
  57  0.525673E-01  -2.94566     -0.449087      0.449087       8.06856       8.51764    
  58  0.855455     -0.156122     -0.238019E-01  0.238019E-01   8.06856       8.09236    
  59  0.169262E-01  -4.07890     -0.621857      0.621857       8.32654       8.94840    
  60  0.578360     -0.547559     -0.834793E-01  0.834793E-01   8.20747       8.29095    
  61  0.753083     -0.283580     -0.432339E-01  0.432339E-01   8.04755       8.09078    
  62  0.942983     -0.587068E-01 -0.895027E-02  0.895027E-02   8.06036       8.06931    
  63  0.164299      -1.80607     -0.275348      0.275348       8.14409       8.41944    
  64  0.964876     -0.357557E-01 -0.545121E-02  0.545121E-02   8.08733       8.09278    
  65  0.905245E-01  -2.40213     -0.366223      0.366223       8.32632       8.69254    
  66  0.812887     -0.207163     -0.315835E-01  0.315835E-01   8.10002       8.13160    
  67  0.702547     -0.353043     -0.538239E-01  0.538239E-01   8.05853       8.11235    
  68  0.229959      -1.46986     -0.224090      0.224090       8.06114       8.28523    
  69  0.880507     -0.127257     -0.194012E-01  0.194012E-01   8.37212       8.39152    
  70  0.528445     -0.637816     -0.972397E-01  0.972397E-01   8.10620       8.20344    
loop,thermsimp(1:2)       39  0.316942      0.196910    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    389          8.23          0.86          1.12         24.43          0.07          0.05         26.53
Just calling func    0   0         26.53


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    390         12.71          0.86          1.12         24.31          0.09          0.05         26.43
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.23
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       39
neval is:      389
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       39      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       40
neval is:      389


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      389     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.465620     -0.764385     -0.116536      0.116536       8.01090       8.12744    
   2  0.310178      -1.17061     -0.178468      0.178468       7.97387       8.15233    
   3  0.883713     -0.123623     -0.188472E-01  0.188472E-01   8.03877       8.05761    
   4  0.641465     -0.444001     -0.676912E-01  0.676912E-01   8.03863       8.10632    
   5  0.458576E-01  -3.08222     -0.469906      0.469906       8.04889       8.51880    
   6  0.611421     -0.491970     -0.750044E-01  0.750044E-01   8.06657       8.14158    
   7  0.292603      -1.22894     -0.187361      0.187361       8.06036       8.24772    
   8  0.180818      -1.71026     -0.260742      0.260742       8.07625       8.33699    
   9  0.490648     -0.712028     -0.108554      0.108554       8.04755       8.15610    
  10  0.538601     -0.618781     -0.943376E-01  0.943376E-01   8.06856       8.16290    
  11  0.451209     -0.795824     -0.121329      0.121329       8.08733       8.20866    
  12  0.610260     -0.493870     -0.752940E-01  0.752940E-01   8.09236       8.16765    
  13  0.425113     -0.855401     -0.130412      0.130412       8.02250       8.15291    
  14  0.647858     -0.434084     -0.661792E-01  0.661792E-01   8.05853       8.12471    
  15  0.394937     -0.929029     -0.141637      0.141637       8.07112       8.21276    
  16  0.452279E-01  -3.09604     -0.472014      0.472014       8.11213       8.58414    
  17  0.954905     -0.461437E-01 -0.703493E-02  0.703493E-02   8.07850       8.08554    
  18  0.362548      -1.01460     -0.154683      0.154683       8.10002       8.25470    
  19  0.808078     -0.213097     -0.324882E-01  0.324882E-01   8.10859       8.14108    
  20  0.219348      -1.51709     -0.231292      0.231292       8.10587       8.33716    
  21  0.206981      -1.57513     -0.240139      0.240139       8.09625       8.33639    
  22  0.719933     -0.328597     -0.500970E-01  0.500970E-01   8.11598       8.16608    
  23  0.950238     -0.510432E-01 -0.778190E-02  0.778190E-02   8.09754       8.10532    
  24  0.845993     -0.167244     -0.254975E-01  0.254975E-01   8.00020       8.02570    
  25  0.157926      -1.84563     -0.281380      0.281380       8.14492       8.42630    
  26  0.430020     -0.843924     -0.128662      0.128662       7.99049       8.11915    
  27  0.624159     -0.471350     -0.718607E-01  0.718607E-01   8.15873       8.23060    
  28  0.355386      -1.03455     -0.157725      0.157725       8.05256       8.21028    
  29  0.297353      -1.21284     -0.184906      0.184906       8.15023       8.33514    
  30  0.185476      -1.68483     -0.256864      0.256864       8.09995       8.35682    
  31  0.406569     -0.900002     -0.137212      0.137212       8.02849       8.16570    
  32  0.147052      -1.91697     -0.292256      0.292256       8.10620       8.39845    
  33  0.205955      -1.58010     -0.240897      0.240897       8.09790       8.33880    
  34  0.383503     -0.958409     -0.146116      0.146116       8.03963       8.18574    
  35  0.514677E-01  -2.96680     -0.452310      0.452310       8.06750       8.51981    
  36  0.499194     -0.694760     -0.105921      0.105921       8.04015       8.14607    
  37  0.103172E-01  -4.57394     -0.697330      0.697330       8.17237       8.86970    
  38  0.470163     -0.754676     -0.115056      0.115056       8.03164       8.14669    
  39  0.983694     -0.164404E-01 -0.250645E-02  0.250645E-02   8.06810       8.07061    
  40  0.880425     -0.127351     -0.194155E-01  0.194155E-01   8.09568       8.11510    
  41  0.969759     -0.307072E-01 -0.468153E-02  0.468153E-02   8.04747       8.05215    
  42  0.761826E-01  -2.57462     -0.392520      0.392520       8.06114       8.45366    
  43  0.124427      -2.08404     -0.317726      0.317726       8.18731       8.50503    
  44  0.997702     -0.230032E-02 -0.350700E-03  0.350700E-03   8.20747       8.20782    
  45  0.213939      -1.54206     -0.235099      0.235099       8.04862       8.28372    
  46  0.471369     -0.752113     -0.114665      0.114665       8.10547       8.22014    
  47  0.421561E-01  -3.16638     -0.482737      0.482737       7.98780       8.47054    
  48  0.693092     -0.366592     -0.558896E-01  0.558896E-01   8.08464       8.14053    
  49  0.375157     -0.980409     -0.149470      0.149470       8.08776       8.23723    
  50  0.285659      -1.25296     -0.191022      0.191022       8.09541       8.28643    
  51  0.338951      -1.08190     -0.164944      0.164944       8.11627       8.28121    
  52  0.930127E-01  -2.37502     -0.362089      0.362089       8.09327       8.45536    
  53  0.840878     -0.173309     -0.264222E-01  0.264222E-01   8.08186       8.10828    
  54  0.384591     -0.955575     -0.145684      0.145684       8.07678       8.22247    
  55  0.212856      -1.54714     -0.235872      0.235872       8.37212       8.60799    
  56  0.878356     -0.129704     -0.197743E-01  0.197743E-01   8.14409       8.16387    
  57  0.623236E-01  -2.77542     -0.423132      0.423132       8.11238       8.53551    
  58  0.374221E-02  -5.58808     -0.851943      0.851943       8.16407       9.01601    
  59  0.851985     -0.160186     -0.244216E-01  0.244216E-01   8.10765       8.13207    
  60  0.779613     -0.248958     -0.379554E-01  0.379554E-01   8.06856       8.10651    
  61  0.991658     -0.837700E-02 -0.127713E-02  0.127713E-02   8.05990       8.06118    
  62  0.425290     -0.854985     -0.130349      0.130349       8.11654       8.24689    
  63  0.613403     -0.488733     -0.745109E-01  0.745109E-01   8.08698       8.16149    
  64  0.487347E-01  -3.02136     -0.460629      0.460629       8.06512       8.52575    
  65  0.267732      -1.31777     -0.200903      0.200903       8.32632       8.52722    
  66  0.159530      -1.83552     -0.279839      0.279839       8.05030       8.33014    
  67  0.312803E-01  -3.46477     -0.528229      0.528229       8.17713       8.70536    
  68  0.956405     -0.445737E-01 -0.679557E-02  0.679557E-02   8.16632       8.17311    
  69  0.683324     -0.380786     -0.580536E-01  0.580536E-01   8.03442       8.09247    
  70  0.482307     -0.729174     -0.111168      0.111168       8.22869       8.33986    
loop,thermsimp(1:2)       40  0.116536      0.178468    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    391          8.69          0.86          1.13         24.61          0.06          0.04         26.70
Just calling func    0   0         26.70


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.69
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       40
neval is:      390
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       40      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       41
neval is:      390


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      390     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.231075      -1.46501     -0.223352      0.223352       8.00020       8.22355    
   2  0.984723     -0.153953E-01 -0.234713E-02  0.234713E-02   8.04747       8.04982    
   3  0.689569     -0.371688     -0.566665E-01  0.566665E-01   8.03877       8.09543    
   4  0.539532     -0.617054     -0.940742E-01  0.940742E-01   8.05990       8.15398    
   5  0.103859      -2.26472     -0.345273      0.345273       8.06810       8.41337    
   6  0.403261     -0.908171     -0.138457      0.138457       8.07850       8.21696    
   7  0.545138     -0.606716     -0.924982E-01  0.924982E-01   8.03442       8.12692    
   8  0.211198      -1.55496     -0.237065      0.237065       8.09754       8.33460    
   9  0.533123     -0.629004     -0.958961E-01  0.958961E-01   8.03863       8.13452    
  10  0.891214     -0.115171     -0.175586E-01  0.175586E-01   8.06856       8.08611    
  11  0.604806     -0.502847     -0.766626E-01  0.766626E-01   8.08186       8.15852    
  12  0.176166      -1.73633     -0.264716      0.264716       8.09568       8.36040    
  13  0.733693     -0.309664     -0.472105E-01  0.472105E-01   7.99049       8.03770    
  14  0.248504      -1.39230     -0.212266      0.212266       8.05853       8.27079    
  15  0.183808      -1.69387     -0.258242      0.258242       8.01090       8.26914    
  16  0.308674E-02  -5.78064     -0.881300      0.881300       8.10765       8.98895    
  17  0.651025     -0.429207     -0.654357E-01  0.654357E-01   8.08464       8.15007    
  18  0.864353     -0.145775     -0.222244E-01  0.222244E-01   8.10859       8.13082    
  19  0.547352     -0.602664     -0.918804E-01  0.918804E-01   8.06657       8.15845    
  20  0.631248     -0.460057     -0.701390E-01  0.701390E-01   8.04015       8.11029    
  21  0.344368E-01  -3.36863     -0.513572      0.513572       8.03164       8.54521    
  22  0.876828     -0.131444     -0.200396E-01  0.200396E-01   7.97387       7.99390    
  23  0.884538     -0.122690     -0.187050E-01  0.187050E-01   8.02250       8.04120    
  24  0.926808     -0.760084E-01 -0.115880E-01  0.115880E-01   8.04755       8.05914    
  25  0.823462     -0.194237     -0.296129E-01  0.296129E-01   8.08698       8.11659    
  26  0.852580     -0.159489     -0.243152E-01  0.243152E-01   8.06856       8.09287    
  27  0.577707     -0.548689     -0.836515E-01  0.836515E-01   8.14409       8.22774    
  28  0.510093     -0.673163     -0.102629      0.102629       8.02849       8.13112    
  29  0.890288     -0.116210     -0.177170E-01  0.177170E-01   8.11598       8.13370    
  30  0.304875      -1.18785     -0.181097      0.181097       8.09236       8.27345    
  31  0.152164      -1.88279     -0.287045      0.287045       8.16632       8.45336    
  32  0.718687     -0.330329     -0.503611E-01  0.503611E-01   8.03963       8.08999    
  33  0.488128     -0.717177     -0.109339      0.109339       8.20747       8.31681    
  34  0.373052     -0.986038     -0.150329      0.150329       8.08733       8.23765    
  35  0.247351      -1.39695     -0.212975      0.212975       8.05256       8.26553    
  36  0.532108     -0.630909     -0.961866E-01  0.961866E-01   8.07112       8.16731    
  37  0.828879E-02  -4.79285     -0.730705      0.730705       8.10547       8.83618    
  38  0.168277      -1.78214     -0.271701      0.271701       8.07678       8.34848    
  39  0.253216      -1.37351     -0.209402      0.209402       8.15873       8.36814    
  40  0.458588     -0.779602     -0.118856      0.118856       8.08776       8.20661    
  41  0.725692     -0.320630     -0.488823E-01  0.488823E-01   8.11654       8.16542    
  42  0.283543      -1.26039     -0.192156      0.192156       8.06036       8.25252    
  43  0.798055     -0.225578     -0.343910E-01  0.343910E-01   8.10002       8.13441    
  44  0.805371     -0.216453     -0.329998E-01  0.329998E-01   8.11627       8.14927    
  45  0.580747     -0.543441     -0.828515E-01  0.828515E-01   8.04862       8.13147    
  46  0.581119     -0.542799     -0.827536E-01  0.827536E-01   8.09541       8.17817    
  47  0.305196      -1.18680     -0.180936      0.180936       8.05030       8.23124    
  48  0.905702     -0.990454E-01 -0.151002E-01  0.151002E-01   8.15023       8.16533    
  49  0.265633E-01  -3.62822     -0.553149      0.553149       8.09625       8.64940    
  50  0.114529E-01  -4.46951     -0.681409      0.681409       8.07625       8.75766    
  51  0.990634     -0.941033E-02 -0.143467E-02  0.143467E-02   8.10587       8.10731    
  52  0.609564     -0.495011     -0.754680E-01  0.754680E-01   8.09790       8.17337    
  53  0.380905     -0.965204     -0.147152      0.147152       8.22869       8.37585    
  54  0.902244     -0.102870     -0.156833E-01  0.156833E-01   8.09995       8.11563    
  55  0.841859     -0.172142     -0.262443E-01  0.262443E-01   8.10620       8.13244    
  56  0.954561     -0.465036E-01 -0.708981E-02  0.708981E-02   8.14492       8.15201    
  57  0.637314     -0.450492     -0.686808E-01  0.686808E-01   8.06114       8.12982    
  58  0.224695      -1.49301     -0.227620      0.227620       8.09327       8.32089    
  59  0.537548     -0.620738     -0.946359E-01  0.946359E-01   7.98780       8.08244    
  60  0.271295      -1.30455     -0.198888      0.198888       8.18731       8.38619    
  61  0.524725E-02  -5.25005     -0.800408      0.800408       8.04889       8.84930    
  62  0.194770      -1.63594     -0.249410      0.249410       8.06750       8.31691    
  63  0.833225E-01  -2.48504     -0.378862      0.378862       8.06512       8.44399    
  64  0.195984      -1.62972     -0.248463      0.248463       8.32632       8.57478    
  65  0.232752      -1.45778     -0.222249      0.222249       8.11238       8.33463    
  66  0.101893      -2.28383     -0.348186      0.348186       8.11213       8.46031    
  67  0.955311     -0.457184E-01 -0.697010E-02  0.697010E-02   8.37212       8.37909    
  68  0.791211     -0.234190     -0.357039E-01  0.357039E-01   8.17713       8.21283    
  69  0.617608     -0.481901     -0.734693E-01  0.734693E-01   8.17237       8.24584    
  70  0.792156     -0.232997     -0.355221E-01  0.355221E-01   8.69306       8.72858    
loop,thermsimp(1:2)       41  0.223352      0.234713E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    392          8.07          0.86          1.13         24.62          0.08          0.04         26.74
Just calling func    0   0         26.74


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.07
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       41
neval is:      391
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       41      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       42
neval is:      391


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      391     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.442958E-01  -3.11686     -0.475188      0.475188       7.97387       8.44905    
   2  0.196215      -1.62854     -0.248283      0.248283       7.99049       8.23877    
   3  0.501152     -0.690846     -0.105324      0.105324       8.02250       8.12782    
   4  0.288339      -1.24362     -0.189599      0.189599       8.04747       8.23707    
   5  0.773132     -0.257306     -0.392281E-01  0.392281E-01   8.04755       8.08678    
   6  0.417683     -0.873033     -0.133100      0.133100       7.98780       8.12090    
   7  0.229479      -1.47195     -0.224409      0.224409       8.06856       8.29296    
   8  0.964123     -0.365367E-01 -0.557028E-02  0.557028E-02   8.03963       8.04520    
   9  0.263782      -1.33263     -0.203169      0.203169       8.06856       8.27173    
  10  0.102960      -2.27342     -0.346598      0.346598       8.03877       8.38536    
  11  0.828790     -0.187788     -0.286297E-01  0.286297E-01   8.10587       8.13450    
  12  0.738697     -0.302868     -0.461744E-01  0.461744E-01   8.04015       8.08633    
  13  0.458595     -0.779589     -0.118854      0.118854       8.09995       8.21880    
  14  0.905176     -0.996260E-01 -0.151887E-01  0.151887E-01   8.08698       8.10217    
  15  0.147067      -1.91687     -0.292240      0.292240       8.03442       8.32666    
  16  0.142365      -1.94936     -0.297194      0.297194       8.06114       8.35833    
  17  0.483147     -0.727435     -0.110903      0.110903       8.10859       8.21949    
  18  0.640417     -0.445636     -0.679404E-01  0.679404E-01   8.02849       8.09643    
  19  0.719349     -0.329408     -0.502207E-01  0.502207E-01   8.04862       8.09884    
  20  0.714234     -0.336545     -0.513087E-01  0.513087E-01   8.10620       8.15751    
  21  0.825507     -0.191757     -0.292347E-01  0.292347E-01   8.11598       8.14522    
  22  0.155188      -1.86312     -0.284045      0.284045       8.10002       8.38406    
  23  0.248874      -1.39081     -0.212039      0.212039       8.03863       8.25067    
  24  0.107953      -2.22606     -0.339379      0.339379       8.11627       8.45565    
  25  0.349169      -1.05220     -0.160415      0.160415       8.08464       8.24505    
  26  0.967311     -0.332356E-01 -0.506700E-02  0.506700E-02   8.14492       8.14999    
  27  0.519506     -0.654877     -0.998408E-01  0.998408E-01   8.05990       8.15974    
  28  0.462662     -0.770758     -0.117508      0.117508       8.06657       8.18408    
  29  0.811438     -0.208948     -0.318556E-01  0.318556E-01   8.08186       8.11372    
  30  0.394710E-01  -3.23219     -0.492770      0.492770       8.15023       8.64300    
  31  0.482930     -0.727884     -0.110971      0.110971       8.11654       8.22751    
  32  0.520883     -0.652231     -0.994372E-01  0.994372E-01   8.07112       8.17056    
  33  0.980978E-01  -2.32179     -0.353974      0.353974       8.09790       8.45188    
  34  0.626549     -0.467529     -0.712781E-01  0.712781E-01   8.09541       8.16669    
  35  0.618402     -0.480616     -0.732734E-01  0.732734E-01   8.08776       8.16103    
  36  0.681438     -0.383550     -0.584749E-01  0.584749E-01   8.17713       8.23560    
  37  0.816820     -0.202336     -0.308476E-01  0.308476E-01   8.07850       8.10935    
  38  0.578487     -0.547340     -0.834459E-01  0.834459E-01   8.00020       8.08364    
  39  0.349734      -1.05058     -0.160169      0.160169       8.14409       8.30426    
  40  0.945672     -0.558596E-01 -0.851619E-02  0.851619E-02   8.05030       8.05882    
  41  0.767680     -0.264382     -0.403069E-01  0.403069E-01   8.08733       8.12763    
  42  0.122064      -2.10321     -0.320649      0.320649       8.17237       8.49302    
  43  0.211623      -1.55295     -0.236758      0.236758       8.06036       8.29712    
  44  0.969992E-01  -2.33305     -0.355691      0.355691       8.05256       8.40825    
  45  0.877482     -0.130699     -0.199260E-01  0.199260E-01   8.01090       8.03083    
  46  0.448991     -0.800752     -0.122080      0.122080       8.05853       8.18061    
  47  0.833113     -0.182586     -0.278366E-01  0.278366E-01   8.09236       8.12019    
  48  0.691765     -0.368508     -0.561818E-01  0.561818E-01   8.20747       8.26365    
  49  0.310664      -1.16904     -0.178229      0.178229       8.06750       8.24573    
  50  0.422283     -0.862080     -0.131430      0.131430       8.09327       8.22470    
  51  0.382184E-01  -3.26444     -0.497687      0.497687       8.09754       8.59522    
  52  0.679614E-01  -2.68882     -0.409929      0.409929       8.11238       8.52231    
  53  0.580404     -0.544031     -0.829414E-01  0.829414E-01   8.07678       8.15972    
  54  0.887981     -0.118805     -0.181126E-01  0.181126E-01   8.09568       8.11379    
  55  0.540749     -0.614799     -0.937305E-01  0.937305E-01   8.15873       8.25247    
  56  0.749712     -0.288066     -0.439177E-01  0.439177E-01   8.22869       8.27261    
  57  0.428385     -0.847733     -0.129243      0.129243       8.37212       8.50136    
  58  0.271790      -1.30272     -0.198610      0.198610       8.18731       8.38592    
  59  0.317865      -1.14613     -0.174735      0.174735       8.06810       8.24284    
  60  0.855566     -0.155992     -0.237821E-01  0.237821E-01   8.06512       8.08891    
  61  0.153120      -1.87653     -0.286091      0.286091       8.16632       8.45241    
  62  0.507684     -0.677896     -0.103350      0.103350       8.11213       8.21548    
  63  0.270723      -1.30666     -0.199209      0.199209       8.03164       8.23085    
  64  0.721736     -0.326096     -0.497156E-01  0.497156E-01   8.32632       8.37603    
  65  0.707323     -0.346268     -0.527910E-01  0.527910E-01   8.09625       8.14904    
  66  0.420146     -0.867152     -0.132204      0.132204       8.69306       8.82526    
  67  0.782833     -0.244836     -0.373270E-01  0.373270E-01   8.07625       8.11358    
  68  0.835529     -0.179691     -0.273951E-01  0.273951E-01   8.10547       8.13287    
  69  0.267477      -1.31872     -0.201049      0.201049       8.04889       8.24994    
  70  0.512596     -0.668267     -0.101882      0.101882       8.06667       8.16855    
loop,thermsimp(1:2)       42  0.475188      0.248283    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    393          8.17          0.86          1.13         24.37          0.06          0.05         26.47
Just calling func    0   0         26.47


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.17
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       42
neval is:      392
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       42      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       43
neval is:      392


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      392     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.298594      -1.20867     -0.184270      0.184270       8.01090       8.19517    
   2  0.383173     -0.959268     -0.146247      0.146247       8.03963       8.18587    
   3  0.386205     -0.951387     -0.145046      0.145046       8.05030       8.19535    
   4  0.362178      -1.01562     -0.154838      0.154838       8.00020       8.15504    
   5  0.394462     -0.930233     -0.141821      0.141821       8.04015       8.18197    
   6  0.883072     -0.124349     -0.189579E-01  0.189579E-01   8.04755       8.06651    
   7  0.571477     -0.559531     -0.853045E-01  0.853045E-01   8.06512       8.15043    
   8  0.944036     -0.575912E-01 -0.878020E-02  0.878020E-02   8.02849       8.03727    
   9  0.326573      -1.11910     -0.170615      0.170615       8.04862       8.21923    
  10  0.467297     -0.760791     -0.115988      0.115988       8.08698       8.20297    
  11  0.828365     -0.188301     -0.287078E-01  0.287078E-01   8.07850       8.10721    
  12  0.826991     -0.189962     -0.289611E-01  0.289611E-01   8.07625       8.10521    
  13  0.675447E-01  -2.69497     -0.410867      0.410867       8.08186       8.49273    
  14  0.924113     -0.789214E-01 -0.120321E-01  0.120321E-01   8.09568       8.10771    
  15  0.810131     -0.210560     -0.321014E-01  0.321014E-01   8.09236       8.12446    
  16  0.410286     -0.890900     -0.135824      0.135824       7.98780       8.12362    
  17  0.334977      -1.09369     -0.166742      0.166742       8.08733       8.25407    
  18  0.119017      -2.12849     -0.324503      0.324503       8.02250       8.34700    
  19  0.447328     -0.804463     -0.122646      0.122646       8.10547       8.22812    
  20  0.324388E-02  -5.73098     -0.873730      0.873730       8.10587       8.97960    
  21  0.158272      -1.84344     -0.281046      0.281046       8.11598       8.39703    
  22  0.241219      -1.42205     -0.216802      0.216802       8.09625       8.31305    
  23  0.259790      -1.34788     -0.205494      0.205494       8.14492       8.35042    
  24  0.521973     -0.650139     -0.991184E-01  0.991184E-01   8.10620       8.20532    
  25  0.336335      -1.08965     -0.166125      0.166125       8.07678       8.24291    
  26  0.642248     -0.442780     -0.675051E-01  0.675051E-01   8.05990       8.12741    
  27  0.984615     -0.155047E-01 -0.236380E-02  0.236380E-02   8.08776       8.09012    
  28  0.373782     -0.984082     -0.150030      0.150030       8.09541       8.24544    
  29  0.932479     -0.699087E-01 -0.106581E-01  0.106581E-01   8.06667       8.07732    
  30  0.711360     -0.340577     -0.519234E-01  0.519234E-01   8.07112       8.12305    
  31  0.315363      -1.15403     -0.175940      0.175940       8.05853       8.23447    
  32  0.528583     -0.637556     -0.972000E-01  0.972000E-01   8.06657       8.16377    
  33  0.622355E-01  -2.77683     -0.423348      0.423348       8.11213       8.53547    
  34  0.144849      -1.93206     -0.294557      0.294557       8.09995       8.39451    
  35  0.868928     -0.140495     -0.214194E-01  0.214194E-01   8.10859       8.13001    
  36  0.243398      -1.41306     -0.215431      0.215431       8.09327       8.30870    
  37  0.936928     -0.651491E-01 -0.993246E-02  0.993246E-02   8.11654       8.12647    
  38  0.979804E-01  -2.32299     -0.354156      0.354156       8.03164       8.38579    
  39  0.805773     -0.215953     -0.329235E-01  0.329235E-01   8.17713       8.21005    
  40  0.210751      -1.55708     -0.237388      0.237388       8.04747       8.28486    
  41  0.497104     -0.698956     -0.106561      0.106561       7.99049       8.09705    
  42  0.532106     -0.630913     -0.961873E-01  0.961873E-01   8.06810       8.16429    
  43  0.898420     -0.107117     -0.163308E-01  0.163308E-01   8.08464       8.10097    
  44  0.579370     -0.545814     -0.832132E-01  0.832132E-01   8.06750       8.15072    
  45  0.191213      -1.65437     -0.252220      0.252220       8.04889       8.30111    
  46  0.491633     -0.710023     -0.108248      0.108248       8.03863       8.14688    
  47  0.989123     -0.109370E-01 -0.166742E-02  0.166742E-02   8.15873       8.16040    
  48  0.576855     -0.550164     -0.838764E-01  0.838764E-01   8.20747       8.29134    
  49  0.133368      -2.01464     -0.307147      0.307147       8.06856       8.37571    
  50  0.708426     -0.344710     -0.525534E-01  0.525534E-01   8.22869       8.28125    
  51  0.183469      -1.69571     -0.258523      0.258523       8.06856       8.32708    
  52  0.951201     -0.500300E-01 -0.762743E-02  0.762743E-02   8.06036       8.06799    
  53  0.380646E-01  -3.26847     -0.498302      0.498302       8.14409       8.64239    
  54  0.575108     -0.553198     -0.843390E-01  0.843390E-01   8.03442       8.11876    
  55  0.136357E-01  -4.29506     -0.654813      0.654813       8.06114       8.71595    
  56  0.665821E-01  -2.70932     -0.413055      0.413055       8.32632       8.73937    
  57  0.885471     -0.121635     -0.185441E-01  0.185441E-01   8.10002       8.11856    
  58  0.213600E-01  -3.84624     -0.586387      0.586387       8.03877       8.62515    
  59  0.740349     -0.300634     -0.458338E-01  0.458338E-01   8.18731       8.23314    
  60  0.290679      -1.23553     -0.188366      0.188366       8.05256       8.24092    
  61  0.895680     -0.110173     -0.167966E-01  0.167966E-01   7.97387       7.99066    
  62  0.956670     -0.442971E-01 -0.675341E-02  0.675341E-02   8.09790       8.10466    
  63  0.196231      -1.62846     -0.248271      0.248271       8.16632       8.41459    
  64  0.279139      -1.27605     -0.194542      0.194542       8.11627       8.31081    
  65  0.686055     -0.376797     -0.574455E-01  0.574455E-01   8.17237       8.22982    
  66  0.798228     -0.225361     -0.343579E-01  0.343579E-01   8.37212       8.40648    
  67  0.898321     -0.107228     -0.163476E-01  0.163476E-01   8.11238       8.12872    
  68  0.764857     -0.268067     -0.408687E-01  0.408687E-01   8.09754       8.13840    
  69  0.330164      -1.10817     -0.168948      0.168948       8.15023       8.31918    
  70  0.598170     -0.513879     -0.783446E-01  0.783446E-01   8.16966       8.24800    
loop,thermsimp(1:2)       43  0.184270      0.146247    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    394          8.02          0.86          1.12         24.34          0.07          0.05         26.45
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    395          8.13          0.87          1.12         24.48          0.05          0.05         26.56
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.02
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       43
neval is:      394
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       43      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       44
neval is:      394


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      394     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.287044      -1.24812     -0.190285      0.190285       7.97387       8.16415    
   2  0.260243      -1.34614     -0.205229      0.205229       8.02849       8.23372    
   3  0.646915     -0.435540     -0.664011E-01  0.664011E-01   8.04755       8.11395    
   4  0.572447     -0.557835     -0.850459E-01  0.850459E-01   8.06036       8.14541    
   5  0.105907      -2.24520     -0.342296      0.342296       8.06667       8.40896    
   6  0.693038     -0.366671     -0.559016E-01  0.559016E-01   8.08776       8.14366    
   7  0.329408      -1.11046     -0.169297      0.169297       7.99049       8.15978    
   8  0.187221      -1.67546     -0.255436      0.255436       8.08464       8.34007    
   9  0.545731     -0.605630     -0.923326E-01  0.923326E-01   8.09790       8.19024    
  10  0.752820     -0.283930     -0.432871E-01  0.432871E-01   8.07625       8.11954    
  11  0.153542      -1.87378     -0.285671      0.285671       8.07850       8.36417    
  12  0.400659     -0.914645     -0.139444      0.139444       8.09568       8.23512    
  13  0.306182      -1.18357     -0.180444      0.180444       8.10002       8.28046    
  14  0.270957E-01  -3.60838     -0.550124      0.550124       8.03442       8.58454    
  15  0.776765     -0.252618     -0.385134E-01  0.385134E-01   8.07112       8.10964    
  16  0.711945     -0.339755     -0.517981E-01  0.517981E-01   7.98780       8.03960    
  17  0.217190      -1.52698     -0.232800      0.232800       8.09236       8.32515    
  18  0.285226      -1.25447     -0.191254      0.191254       8.11654       8.30779    
  19  0.348904      -1.05296     -0.160531      0.160531       8.05990       8.22043    
  20  0.686414     -0.376275     -0.573658E-01  0.573658E-01   8.11238       8.16974    
  21  0.212825      -1.54729     -0.235895      0.235895       8.10859       8.34449    
  22  0.501697     -0.689760     -0.105159      0.105159       8.09754       8.20269    
  23  0.363771      -1.01123     -0.154169      0.154169       8.03863       8.19280    
  24  0.789273     -0.236642     -0.360778E-01  0.360778E-01   8.06512       8.10120    
  25  0.232884      -1.45721     -0.222163      0.222163       8.06750       8.28967    
  26  0.754896     -0.281175     -0.428671E-01  0.428671E-01   8.00020       8.04307    
  27  0.639358     -0.447290     -0.681926E-01  0.681926E-01   8.15873       8.22693    
  28  0.532505     -0.630163     -0.960729E-01  0.960729E-01   8.06657       8.16265    
  29  0.759813     -0.274683     -0.418774E-01  0.418774E-01   8.06810       8.10998    
  30  0.768360     -0.263497     -0.401720E-01  0.401720E-01   8.04015       8.08032    
  31  0.245116      -1.40602     -0.214358      0.214358       8.03963       8.25399    
  32  0.672517     -0.396727     -0.604839E-01  0.604839E-01   8.01090       8.07138    
  33  0.910675     -0.935691E-01 -0.142653E-01  0.142653E-01   8.05030       8.06457    
  34  0.441618     -0.817310     -0.124605      0.124605       8.08698       8.21158    
  35  0.212980      -1.54656     -0.235784      0.235784       8.10620       8.34198    
  36  0.471690     -0.751434     -0.114561      0.114561       8.17713       8.29169    
  37  0.968545     -0.319606E-01 -0.487262E-02  0.487262E-02   8.04862       8.05349    
  38  0.711169     -0.340845     -0.519642E-01  0.519642E-01   8.10547       8.15744    
  39  0.222170      -1.50431     -0.229343      0.229343       8.17237       8.40172    
  40  0.896100     -0.109703     -0.167251E-01  0.167251E-01   8.18731       8.20403    
  41  0.898054     -0.107525     -0.163929E-01  0.163929E-01   8.05853       8.07492    
  42  0.981364     -0.188122E-01 -0.286805E-02  0.286805E-02   8.05256       8.05543    
  43  0.238126      -1.43496     -0.218769      0.218769       8.07678       8.29555    
  44  0.884882     -0.122301     -0.186457E-01  0.186457E-01   8.09541       8.11406    
  45  0.206421      -1.57784     -0.240553      0.240553       8.16966       8.41021    
  46  0.421939     -0.862894     -0.131554      0.131554       8.08733       8.21888    
  47  0.334170E-01  -3.39869     -0.518155      0.518155       8.22869       8.74685    
  48  0.940374     -0.614772E-01 -0.937263E-02  0.937263E-02   8.04747       8.05684    
  49  0.119361      -2.12561     -0.324064      0.324064       8.20747       8.53153    
  50  0.493355     -0.706527     -0.107715      0.107715       8.04889       8.15661    
  51  0.239498      -1.42921     -0.217894      0.217894       8.09327       8.31116    
  52  0.779094     -0.249623     -0.380569E-01  0.380569E-01   8.11627       8.15432    
  53  0.993851     -0.616759E-02 -0.940294E-03  0.940294E-03   8.09625       8.09719    
  54  0.680666     -0.384683     -0.586477E-01  0.586477E-01   8.15023       8.20888    
  55  0.861145     -0.149492     -0.227911E-01  0.227911E-01   8.06856       8.09135    
  56  0.679030     -0.387090     -0.590146E-01  0.590146E-01   8.02250       8.08151    
  57  0.568731E-01  -2.86693     -0.437085      0.437085       8.14492       8.58201    
  58  0.342751      -1.07075     -0.163244      0.163244       8.06856       8.23180    
  59  0.929483     -0.731270E-01 -0.111487E-01  0.111487E-01   8.03164       8.04279    
  60  0.287616      -1.24613     -0.189981      0.189981       8.09995       8.28993    
  61  0.622582     -0.473881     -0.722465E-01  0.722465E-01   8.11598       8.18823    
  62  0.449193     -0.800303     -0.122012      0.122012       8.37212       8.49413    
  63  0.746100     -0.292896     -0.446541E-01  0.446541E-01   8.16632       8.21097    
  64  0.783595     -0.243863     -0.371786E-01  0.371786E-01   8.08186       8.11904    
  65  0.447963     -0.803044     -0.122430      0.122430       8.11213       8.23456    
  66  0.788663     -0.237416     -0.361958E-01  0.361958E-01   8.03877       8.07496    
  67  0.445514     -0.808528     -0.123266      0.123266       8.14409       8.26736    
  68  0.174611      -1.74519     -0.266067      0.266067       8.06114       8.32721    
  69  0.891268E-01  -2.41769     -0.368595      0.368595       8.32632       8.69491    
  70  0.279672      -1.27414     -0.194251      0.194251       8.01589       8.21014    
loop,thermsimp(1:2)       44  0.190285      0.205229    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    396          8.32          0.87          1.13         24.35          0.09          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.32
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       44
neval is:      395
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       44      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       45
neval is:      395


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      395     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.204302      -1.58816     -0.242126      0.242126       7.98780       8.22993    
   2  0.455846E-01  -3.08818     -0.470816      0.470816       8.03164       8.50245    
   3  0.655807     -0.421889     -0.643200E-01  0.643200E-01   8.00020       8.06452    
   4  0.902989     -0.102045     -0.155575E-01  0.155575E-01   8.04862       8.06417    
   5  0.826012     -0.191146     -0.291415E-01  0.291415E-01   8.05256       8.08170    
   6  0.160871      -1.82715     -0.278563      0.278563       8.04747       8.32603    
   7  0.516410     -0.660854     -0.100752      0.100752       8.05030       8.15105    
   8  0.506939     -0.679364     -0.103574      0.103574       8.01090       8.11447    
   9  0.728359     -0.316962     -0.483231E-01  0.483231E-01   8.05853       8.10685    
  10  0.453162     -0.791506     -0.120671      0.120671       8.03877       8.15944    
  11  0.837994     -0.176745     -0.269460E-01  0.269460E-01   8.04015       8.06710    
  12  0.118024      -2.13686     -0.325780      0.325780       8.02250       8.34828    
  13  0.274030      -1.29452     -0.197359      0.197359       8.06856       8.26591    
  14  0.402227     -0.910738     -0.138849      0.138849       8.09625       8.23510    
  15  0.444245     -0.811380     -0.123701      0.123701       8.06512       8.18883    
  16  0.594880     -0.519396     -0.791857E-01  0.791857E-01   8.07112       8.15031    
  17  0.548806     -0.600010     -0.914759E-01  0.914759E-01   8.06810       8.15958    
  18  0.222827      -1.50136     -0.228893      0.228893       8.04755       8.27644    
  19  0.152541      -1.88032     -0.286668      0.286668       8.09541       8.38208    
  20  0.816533     -0.202688     -0.309012E-01  0.309012E-01   8.08186       8.11276    
  21  0.525417     -0.643564     -0.981159E-01  0.981159E-01   8.07625       8.17437    
  22  0.661450     -0.413320     -0.630137E-01  0.630137E-01   8.08776       8.15077    
  23  0.437535     -0.826598     -0.126021      0.126021       8.06036       8.18638    
  24  0.464442     -0.766918     -0.116922      0.116922       8.11627       8.23319    
  25  0.683975     -0.379834     -0.579084E-01  0.579084E-01   8.04889       8.10680    
  26  0.407919     -0.896688     -0.136706      0.136706       8.10547       8.24218    
  27  0.934669     -0.675632E-01 -0.103005E-01  0.103005E-01   7.99049       8.00079    
  28  0.866891     -0.142842     -0.217772E-01  0.217772E-01   8.06657       8.08835    
  29  0.145435E-01  -4.23061     -0.644987      0.644987       7.97387       8.61885    
  30  0.514599     -0.664368     -0.101288      0.101288       8.11238       8.21366    
  31  0.370591     -0.992656     -0.151338      0.151338       8.11598       8.26732    
  32  0.251726      -1.37941     -0.210301      0.210301       8.09790       8.30821    
  33  0.959470     -0.413742E-01 -0.630779E-02  0.630779E-02   8.03863       8.04494    
  34  0.344885E-01  -3.36713     -0.513343      0.513343       8.09754       8.61088    
  35  0.348690      -1.05357     -0.160625      0.160625       8.18731       8.34793    
  36  0.610898     -0.492826     -0.751348E-01  0.751348E-01   8.15023       8.22537    
  37  0.440567     -0.819693     -0.124968      0.124968       8.01589       8.14085    
  38  0.340409      -1.07761     -0.164289      0.164289       8.16632       8.33061    
  39  0.345015E-01  -3.36675     -0.513286      0.513286       8.08698       8.60026    
  40  0.667224     -0.404630     -0.616888E-01  0.616888E-01   8.08733       8.14901    
  41  0.138336      -1.97807     -0.301571      0.301571       8.05990       8.36147    
  42  0.412023     -0.886676     -0.135180      0.135180       8.15873       8.29391    
  43  0.578410     -0.547473     -0.834661E-01  0.834661E-01   8.06856       8.15202    
  44  0.972817     -0.275594E-01 -0.420163E-02  0.420163E-02   8.02849       8.03269    
  45  0.152341      -1.88163     -0.286869      0.286869       8.11213       8.39899    
  46  0.764264     -0.268842     -0.409869E-01  0.409869E-01   8.09568       8.13667    
  47  0.898082E-01  -2.41008     -0.367434      0.367434       8.03963       8.40706    
  48  0.205097      -1.58427     -0.241533      0.241533       8.14409       8.38563    
  49  0.249611E-01  -3.69044     -0.562634      0.562634       8.10002       8.66265    
  50  0.999211     -0.789000E-03 -0.120289E-03  0.120289E-03   8.06750       8.06762    
  51  0.622898E-01  -2.77596     -0.423215      0.423215       8.09995       8.52317    
  52  0.588779     -0.529705     -0.807573E-01  0.807573E-01   8.17713       8.25789    
  53  0.395562     -0.927447     -0.141396      0.141396       8.07678       8.21818    
  54  0.213371      -1.54472     -0.235504      0.235504       8.11654       8.35204    
  55  0.801544     -0.221215     -0.337259E-01  0.337259E-01   8.09327       8.12699    
  56  0.392036     -0.936401     -0.142761      0.142761       8.09236       8.23512    
  57  0.504835     -0.683524     -0.104208      0.104208       8.06114       8.16535    
  58  0.389514     -0.942856     -0.143745      0.143745       8.08464       8.22838    
  59  0.694006     -0.365275     -0.556888E-01  0.556888E-01   8.10620       8.16189    
  60  0.220113      -1.51361     -0.230761      0.230761       8.10859       8.33935    
  61  0.548334     -0.600870     -0.916070E-01  0.916070E-01   8.07850       8.17011    
  62  0.490082     -0.713183     -0.108730      0.108730       8.17237       8.28110    
  63  0.315187      -1.15459     -0.176026      0.176026       8.06667       8.24269    
  64  0.454028     -0.789596     -0.120380      0.120380       8.16966       8.29004    
  65  0.617612     -0.481894     -0.734682E-01  0.734682E-01   8.37212       8.44559    
  66  0.446806     -0.805630     -0.122824      0.122824       8.20747       8.33029    
  67  0.907640     -0.969076E-01 -0.147743E-01  0.147743E-01   8.14492       8.15970    
  68  0.508446     -0.676396     -0.103121      0.103121       8.03442       8.13754    
  69  0.552574     -0.593168     -0.904327E-01  0.904327E-01   8.32632       8.41675    
  70  0.716954     -0.332744     -0.507291E-01  0.507291E-01   8.32227       8.37300    
loop,thermsimp(1:2)       45  0.242126      0.470816    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    397          8.09          0.86          1.12         24.32          0.08          0.05         26.43
Just calling func    0   0         26.43


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    398          8.23          0.86          1.13         24.45          0.04          0.05         26.54
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.09
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       45
neval is:      397
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       45      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       46
neval is:      397


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      397     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.794521     -0.230016     -0.350676E-01  0.350676E-01   7.99049       8.02555    
   2  0.338444      -1.08340     -0.165171      0.165171       8.02849       8.19366    
   3  0.563800     -0.573055     -0.873664E-01  0.873664E-01   8.03863       8.12599    
   4  0.295284      -1.21982     -0.185970      0.185970       8.04862       8.23459    
   5  0.506481     -0.680269     -0.103712      0.103712       8.00020       8.10391    
   6  0.345803      -1.06189     -0.161892      0.161892       8.04015       8.20204    
   7  0.741641     -0.298890     -0.455679E-01  0.455679E-01   8.06750       8.11307    
   8  0.182310      -1.70204     -0.259489      0.259489       8.05256       8.31205    
   9  0.315187      -1.15459     -0.176025      0.176025       8.06657       8.24260    
  10  0.598844     -0.512755     -0.781732E-01  0.781732E-01   8.04889       8.12707    
  11  0.659119     -0.416852     -0.635520E-01  0.635520E-01   8.05853       8.12208    
  12  0.247481      -1.39642     -0.212895      0.212895       8.08186       8.29476    
  13  0.255298      -1.36532     -0.208153      0.208153       8.01090       8.21905    
  14  0.876488     -0.131833     -0.200988E-01  0.200988E-01   8.09327       8.11337    
  15  0.358010      -1.02719     -0.156603      0.156603       8.09568       8.25228    
  16  0.317480      -1.14734     -0.174920      0.174920       8.03442       8.20934    
  17  0.153422      -1.87456     -0.285790      0.285790       8.01589       8.30168    
  18  0.296162      -1.21685     -0.185517      0.185517       8.08733       8.27284    
  19  0.629760     -0.462417     -0.704988E-01  0.704988E-01   8.07112       8.14162    
  20  0.458345E-01  -3.08272     -0.469983      0.469983       8.08776       8.55774    
  21  0.209534      -1.56287     -0.238270      0.238270       8.05030       8.28857    
  22  0.490210E-01  -3.01551     -0.459736      0.459736       8.06856       8.52829    
  23  0.144817      -1.93229     -0.294591      0.294591       8.03877       8.33336    
  24  0.764061     -0.269107     -0.410274E-01  0.410274E-01   8.06810       8.10913    
  25  0.158664      -1.84097     -0.280669      0.280669       8.14492       8.42559    
  26  0.242818      -1.41544     -0.215794      0.215794       8.10620       8.32199    
  27  0.779950     -0.248525     -0.378894E-01  0.378894E-01   8.06114       8.09903    
  28  0.763580     -0.269737     -0.411234E-01  0.411234E-01   8.07850       8.11962    
  29  0.817639     -0.201335     -0.306949E-01  0.306949E-01   8.07625       8.10695    
  30  0.656802     -0.420373     -0.640889E-01  0.640889E-01   8.06036       8.12445    
  31  0.202192      -1.59854     -0.243709      0.243709       8.06512       8.30883    
  32  0.469647     -0.755773     -0.115223      0.115223       8.11238       8.22760    
  33  0.107456      -2.23067     -0.340082      0.340082       8.07678       8.41687    
  34  0.709118     -0.343734     -0.524047E-01  0.524047E-01   8.15023       8.20264    
  35  0.988480     -0.115868E-01 -0.176650E-02  0.176650E-02   8.08464       8.08640    
  36  0.645173     -0.438236     -0.668123E-01  0.668123E-01   7.98780       8.05461    
  37  0.583143     -0.539322     -0.822236E-01  0.822236E-01   8.11627       8.19849    
  38  0.276552E-01  -3.58794     -0.547007      0.547007       8.09625       8.64325    
  39  0.560517     -0.578896     -0.882569E-01  0.882569E-01   8.09236       8.18061    
  40  0.292779      -1.22834     -0.187269      0.187269       8.10547       8.29274    
  41  0.486207     -0.721121     -0.109940      0.109940       8.06667       8.17661    
  42  0.379142E-01  -3.27243     -0.498905      0.498905       8.17713       8.67603    
  43  0.459895     -0.776757     -0.118422      0.118422       8.06856       8.18698    
  44  0.810771     -0.209769     -0.319808E-01  0.319808E-01   8.11598       8.14796    
  45  0.189138      -1.66528     -0.253883      0.253883       8.04755       8.30143    
  46  0.509870     -0.673599     -0.102695      0.102695       8.17237       8.27507    
  47  0.468020E-01  -3.06183     -0.466798      0.466798       8.16966       8.63646    
  48  0.568404     -0.564922     -0.861265E-01  0.861265E-01   8.15873       8.24486    
  49  0.891250     -0.115130     -0.175525E-01  0.175525E-01   8.09790       8.11546    
  50  0.415261     -0.878849     -0.133987      0.133987       8.04747       8.18146    
  51  0.714019     -0.336846     -0.513545E-01  0.513545E-01   8.20747       8.25882    
  52  0.606207     -0.500534     -0.763099E-01  0.763099E-01   8.16632       8.24263    
  53  0.106011      -2.24421     -0.342146      0.342146       8.10859       8.45074    
  54  0.330348      -1.10761     -0.168863      0.168863       8.18731       8.35617    
  55  0.773475     -0.256862     -0.391605E-01  0.391605E-01   8.02250       8.06166    
  56  0.721841     -0.325951     -0.496936E-01  0.496936E-01   8.11654       8.16623    
  57  0.714980     -0.335501     -0.511496E-01  0.511496E-01   8.05990       8.11105    
  58  0.616486     -0.483719     -0.737464E-01  0.737464E-01   8.32227       8.39602    
  59  0.885098     -0.122057     -0.186084E-01  0.186084E-01   8.09541       8.11402    
  60  0.463686     -0.768549     -0.117171      0.117171       8.14409       8.26126    
  61  0.912951     -0.910727E-01 -0.138847E-01  0.138847E-01   8.11213       8.12601    
  62  0.819534     -0.199020     -0.303420E-01  0.303420E-01   8.03963       8.06997    
  63  0.771708     -0.259149     -0.395091E-01  0.395091E-01   8.32632       8.36583    
  64  0.812091E-03  -7.11590      -1.08487       1.08487       8.37212       9.45699    
  65  0.880919     -0.126790     -0.193300E-01  0.193300E-01   8.03164       8.05097    
  66  0.552031     -0.594151     -0.905825E-01  0.905825E-01   8.09995       8.19053    
  67  0.134353      -2.00729     -0.306025      0.306025       8.08698       8.39300    
  68  0.410649     -0.890016     -0.135689      0.135689       8.09754       8.23322    
  69  0.258019      -1.35472     -0.206537      0.206537       7.97387       8.18040    
  70  0.808143     -0.213016     -0.324759E-01  0.324759E-01   8.08671       8.11919    
loop,thermsimp(1:2)       46  0.350676E-01  0.165171    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    399          8.04          0.86          1.12         24.29          0.09          0.04         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    400          8.44          0.86          1.13         24.37          0.10          0.04         26.50
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.04
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       46
neval is:      399
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       46      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       47
neval is:      399


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      399     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.652512     -0.426926     -0.650879E-01  0.650879E-01   7.99049       8.05557    
   2  0.474910     -0.744630     -0.113524      0.113524       8.03164       8.14516    
   3  0.125725      -2.07366     -0.316144      0.316144       7.98780       8.30394    
   4  0.950967     -0.502756E-01 -0.766487E-02  0.766487E-02   8.02250       8.03016    
   5  0.562475     -0.575409     -0.877252E-01  0.877252E-01   8.03963       8.12735    
   6  0.728528     -0.316729     -0.482876E-01  0.482876E-01   8.08464       8.13293    
   7  0.326058      -1.12068     -0.170856      0.170856       8.06114       8.23200    
   8  0.460979     -0.774402     -0.118063      0.118063       8.00020       8.11826    
   9  0.186861      -1.67739     -0.255730      0.255730       8.07625       8.33198    
  10  0.737773     -0.304119     -0.463652E-01  0.463652E-01   8.06810       8.11446    
  11  0.254524      -1.36836     -0.208616      0.208616       8.05990       8.26852    
  12  0.475390     -0.743621     -0.113370      0.113370       8.06750       8.18087    
  13  0.783107     -0.244486     -0.372736E-01  0.372736E-01   8.09327       8.13054    
  14  0.615536     -0.485261     -0.739816E-01  0.739816E-01   8.09541       8.16939    
  15  0.600710E-01  -2.81223     -0.428744      0.428744       8.09790       8.52665    
  16  0.834417     -0.181022     -0.275982E-01  0.275982E-01   8.08671       8.11431    
  17  0.270355      -1.30802     -0.199417      0.199417       8.07850       8.27792    
  18  0.408387     -0.895540     -0.136531      0.136531       8.05853       8.19506    
  19  0.248286      -1.39318     -0.212400      0.212400       8.06036       8.27276    
  20  0.586808E-01  -2.83564     -0.432314      0.432314       8.03863       8.47094    
  21  0.747050     -0.291623     -0.444601E-01  0.444601E-01   8.11213       8.15659    
  22  0.261869E-01  -3.64250     -0.555325      0.555325       8.04889       8.60422    
  23  0.495813     -0.701557     -0.106957      0.106957       8.07112       8.17808    
  24  0.600032     -0.510772     -0.778708E-01  0.778708E-01   8.11598       8.19385    
  25  0.936456     -0.656531E-01 -0.100093E-01  0.100093E-01   8.11654       8.12655    
  26  0.583260     -0.539121     -0.821929E-01  0.821929E-01   8.06667       8.14886    
  27  0.994266     -0.575021E-02 -0.876661E-03  0.876661E-03   7.97387       7.97474    
  28  0.149755      -1.89876     -0.289479      0.289479       8.09236       8.38183    
  29  0.751239     -0.286032     -0.436076E-01  0.436076E-01   8.04747       8.09108    
  30  0.703931     -0.351075     -0.535239E-01  0.535239E-01   8.06856       8.12208    
  31  0.998476     -0.152564E-02 -0.232595E-03  0.232595E-03   8.09995       8.10018    
  32  0.501495     -0.690161     -0.105220      0.105220       8.02849       8.13371    
  33  0.446468     -0.806387     -0.122939      0.122939       8.11627       8.23921    
  34  0.321376      -1.13514     -0.173061      0.173061       8.04015       8.21321    
  35  0.850901     -0.161459     -0.246156E-01  0.246156E-01   8.15023       8.17485    
  36  0.975881     -0.244142E-01 -0.372212E-02  0.372212E-02   8.03442       8.03814    
  37  0.386316     -0.951100     -0.145002      0.145002       8.01090       8.15590    
  38  0.782734     -0.244962     -0.373462E-01  0.373462E-01   8.11238       8.14972    
  39  0.142678      -1.94716     -0.296859      0.296859       8.09754       8.39439    
  40  0.509914     -0.673514     -0.102682      0.102682       8.04862       8.15130    
  41  0.211111      -1.55537     -0.237127      0.237127       8.06657       8.30370    
  42  0.212538      -1.54864     -0.236101      0.236101       8.16632       8.40242    
  43  0.889982     -0.116555     -0.177696E-01  0.177696E-01   8.15873       8.17650    
  44  0.769070     -0.262573     -0.400312E-01  0.400312E-01   8.09568       8.13571    
  45  0.792434     -0.232646     -0.354686E-01  0.354686E-01   8.20747       8.24294    
  46  0.250220E-01  -3.68800     -0.562262      0.562262       8.14409       8.70635    
  47  0.190304      -1.65913     -0.252947      0.252947       8.08733       8.34027    
  48  0.579595     -0.545425     -0.831540E-01  0.831540E-01   8.17237       8.25553    
  49  0.373376     -0.985170     -0.150196      0.150196       8.05030       8.20050    
  50  0.933620E-01  -2.37127     -0.361517      0.361517       8.10547       8.46699    
  51  0.628243     -0.464828     -0.708663E-01  0.708663E-01   8.08186       8.15273    
  52  0.737857     -0.304005     -0.463478E-01  0.463478E-01   8.04755       8.09390    
  53  0.430189     -0.843530     -0.128602      0.128602       8.01589       8.14449    
  54  0.957397     -0.435375E-01 -0.663760E-02  0.663760E-02   8.06512       8.07176    
  55  0.388126     -0.946424     -0.144289      0.144289       8.05256       8.19685    
  56  0.989586     -0.104686E-01 -0.159602E-02  0.159602E-02   8.10620       8.10779    
  57  0.754642     -0.281511     -0.429184E-01  0.429184E-01   8.03877       8.08168    
  58  0.404023E-01  -3.20887     -0.489215      0.489215       8.18731       8.67652    
  59  0.298112      -1.21029     -0.184517      0.184517       8.32632       8.51084    
  60  0.915557     -0.882223E-01 -0.134501E-01  0.134501E-01   8.08698       8.10043    
  61  0.205580E-01  -3.88450     -0.592220      0.592220       8.32227       8.91449    
  62  0.883530     -0.123830     -0.188788E-01  0.188788E-01   8.07678       8.09566    
  63  0.776014     -0.253585     -0.386608E-01  0.386608E-01   8.14492       8.18358    
  64  0.755316     -0.280619     -0.427823E-01  0.427823E-01   8.10859       8.15137    
  65  0.912949     -0.910754E-01 -0.138851E-01  0.138851E-01   8.06856       8.08244    
  66  0.262008      -1.33938     -0.204198      0.204198       8.08776       8.29195    
  67  0.636818     -0.451272     -0.687996E-01  0.687996E-01   8.16966       8.23846    
  68  0.545112     -0.606763     -0.925054E-01  0.925054E-01   8.09625       8.18875    
  69  0.261545      -1.34115     -0.204468      0.204468       8.17713       8.38160    
  70  0.375676     -0.979027     -0.149260      0.149260       8.04047       8.18973    
loop,thermsimp(1:2)       47  0.650879E-01  0.113524    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    401          8.23          0.86          1.12         24.29          0.07          0.05         26.40
Just calling func    0   0         26.40


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  400    8.2267        1.095     -1.876      3.291     -102.6      1.377    
                      0.3377      1.376     -99.70      3.704     0.1231    

                       2.282     -1.040      1.530      6788.      3176.    

                     -0.1761      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6281.      479.5    

                       1.433     -5.822     -4.487     -8.582      6.637    

                      -15.12     -3.579      7474.      0.000     0.1001E+05



                       1415.     0.1133E+05 -2652.      7611.      3787.    

                       5874.     0.3875E-01 0.1879     0.6314E-02 0.1192    

                     -0.2486    -0.1145     0.2019     0.1138     0.6657E-01



                     -0.4652    -0.7965      0.000     0.1048    -0.6270E-01

                      0.2194E-01 0.1202    -0.7116    -0.1406     0.3900E-01

                      0.4548E-01 0.1295    -0.6802     -1.236      6969.    



                     -0.6192     -1.221     -2.228     -2.302    -0.3807    

                     -0.3252      9.220      8.687    -0.1848E+05 -4.000    

                     -0.5975     -2.196      9.291      8.886    -0.1908E+05



                      -4.000     0.5278    -0.4461      8.849      9.075    

                     -0.1908E+05 -7.000    -0.7377    -0.6285      9.020    

                       8.745    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.23
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       47
neval is:      400
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       47      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       48
neval is:      400


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      400     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.316013      -1.15197     -0.175626      0.175626       7.97387       8.14949    
   2  0.452730     -0.792459     -0.120816      0.120816       8.02250       8.14331    
   3  0.463916     -0.768051     -0.117095      0.117095       8.03442       8.15151    
   4  0.531172E-01  -2.93526     -0.447501      0.447501       7.99049       8.43799    
   5  0.933113     -0.692290E-01 -0.105545E-01  0.105545E-01   8.06512       8.07568    
   6  0.107612      -2.22922     -0.339861      0.339861       8.03877       8.37863    
   7  0.228017      -1.47833     -0.225383      0.225383       8.06856       8.29394    
   8  0.766526     -0.265887     -0.405364E-01  0.405364E-01   8.04747       8.08801    
   9  0.676418     -0.390944     -0.596022E-01  0.596022E-01   8.04755       8.10715    
  10  0.220696      -1.51097     -0.230358      0.230358       8.07678       8.30714    
  11  0.959946E-01  -2.34346     -0.357278      0.357278       8.09995       8.45723    
  12  0.570655     -0.560971     -0.855241E-01  0.855241E-01   8.08698       8.17250    
  13  0.736426     -0.305947     -0.466438E-01  0.466438E-01   8.10620       8.15284    
  14  0.966377     -0.342013E-01 -0.521424E-02  0.521424E-02   8.08671       8.09193    
  15  0.797662     -0.226070     -0.344660E-01  0.344660E-01   8.06810       8.10257    
  16  0.413688     -0.882643     -0.134565      0.134565       8.00020       8.13476    
  17  0.200670      -1.60609     -0.244860      0.244860       8.06856       8.31342    
  18  0.843958E-01  -2.47224     -0.376910      0.376910       8.11654       8.49345    
  19  0.375580     -0.979284     -0.149299      0.149299       8.03963       8.18893    
  20  0.968669     -0.318322E-01 -0.485304E-02  0.485304E-02   8.09327       8.09812    
  21  0.379263     -0.969525     -0.147811      0.147811       8.08464       8.23245    
  22  0.421746     -0.863352     -0.131624      0.131624       8.02849       8.16011    
  23  0.639909     -0.446429     -0.680614E-01  0.680614E-01   8.09568       8.16374    
  24  0.549878     -0.598059     -0.911784E-01  0.911784E-01   8.01589       8.10706    
  25  0.226469      -1.48515     -0.226421      0.226421       8.03164       8.25806    
  26  0.547044E-02  -5.20840     -0.794057      0.794057       8.06667       8.86072    
  27  0.372808     -0.986692     -0.150428      0.150428       8.11238       8.26280    
  28  0.406819E-01  -3.20197     -0.488164      0.488164       8.04862       8.53678    
  29  0.664564     -0.408624     -0.622976E-01  0.622976E-01   8.10859       8.17089    
  30  0.708700     -0.344323     -0.524945E-01  0.524945E-01   8.08186       8.13436    
  31  0.863329     -0.146959     -0.224049E-01  0.224049E-01   8.01090       8.03330    
  32  0.406109     -0.901134     -0.137384      0.137384       8.11213       8.24951    
  33  0.101947      -2.28330     -0.348106      0.348106       8.09541       8.44352    
  34  0.660574     -0.414646     -0.632158E-01  0.632158E-01   8.15023       8.21345    
  35  0.839002     -0.175542     -0.267627E-01  0.267627E-01   8.15873       8.18550    
  36  0.735312E-01  -2.61005     -0.397920      0.397920       8.07112       8.46904    
  37  0.559917     -0.579967     -0.884201E-01  0.884201E-01   8.06750       8.15592    
  38  0.922004     -0.812055E-01 -0.123804E-01  0.123804E-01   8.14492       8.15730    
  39  0.891471     -0.114882     -0.175146E-01  0.175146E-01   8.09625       8.11376    
  40  0.489346     -0.714686     -0.108959      0.108959       8.04047       8.14943    
  41  0.583196     -0.539231     -0.822097E-01  0.822097E-01   8.11598       8.19819    
  42  0.989235     -0.108230E-01 -0.165005E-02  0.165005E-02   8.05853       8.06018    
  43  0.844741     -0.168725     -0.257234E-01  0.257234E-01   8.05256       8.07828    
  44  0.734982     -0.307909     -0.469429E-01  0.469429E-01   8.05030       8.09724    
  45  0.913246     -0.907495E-01 -0.138354E-01  0.138354E-01   8.04015       8.05399    
  46  0.605096     -0.502369     -0.765898E-01  0.765898E-01   8.06114       8.13773    
  47  0.623739     -0.472024     -0.719634E-01  0.719634E-01   8.16966       8.24162    
  48  0.780990     -0.247193     -0.376864E-01  0.376864E-01   8.11627       8.15395    
  49  0.615662E-01  -2.78764     -0.424996      0.424996       8.20747       8.63246    
  50  0.646443E-02  -5.04144     -0.768604      0.768604       8.17237       8.94098    
  51  0.848055     -0.164809     -0.251264E-01  0.251264E-01   8.05990       8.08503    
  52  0.740886     -0.299909     -0.457232E-01  0.457232E-01   8.06036       8.10608    
  53  0.350650      -1.04797     -0.159770      0.159770       8.07850       8.23827    
  54  0.873328     -0.135444     -0.206494E-01  0.206494E-01   8.08776       8.10841    
  55  0.353091      -1.04103     -0.158712      0.158712       8.06657       8.22529    
  56  0.867938     -0.141635     -0.215933E-01  0.215933E-01   7.98780       8.00939    
  57  0.746706     -0.292084     -0.445303E-01  0.445303E-01   8.07625       8.12078    
  58  0.701641     -0.354333     -0.540206E-01  0.540206E-01   8.08733       8.14135    
  59  0.454866     -0.787753     -0.120099      0.120099       8.17713       8.29723    
  60  0.172086      -1.75976     -0.268288      0.268288       8.09236       8.36064    
  61  0.633774     -0.456062     -0.695300E-01  0.695300E-01   8.09754       8.16707    
  62  0.321574      -1.13453     -0.172967      0.172967       8.16632       8.33928    
  63  0.171612      -1.76252     -0.268708      0.268708       8.10547       8.37418    
  64  0.417516     -0.873431     -0.133161      0.133161       8.03863       8.17179    
  65  0.735059     -0.307804     -0.469269E-01  0.469269E-01   8.32632       8.37325    
  66  0.259350      -1.34958     -0.205753      0.205753       8.09790       8.30366    
  67  0.498266     -0.696622     -0.106205      0.106205       8.04889       8.15510    
  68  0.309265      -1.17356     -0.178917      0.178917       8.18731       8.36622    
  69  0.612008     -0.491010     -0.748581E-01  0.748581E-01   8.14409       8.21895    
  70  0.624712E-01  -2.77305     -0.422771      0.422771       8.22671       8.64948    
loop,thermsimp(1:2)       48  0.175626      0.120816    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    402          7.97          0.87          1.12         24.39          0.07          0.06         26.51
Just calling func    0   0         26.51


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    403          8.05          0.84          1.12         24.37          0.04          0.05         26.42
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       48
neval is:      402
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       48      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       49
neval is:      402


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      402     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.991535     -0.850114E-02 -0.129606E-02  0.129606E-02   7.98780       7.98910    
   2  0.120199      -2.11861     -0.322997      0.322997       8.01090       8.33390    
   3  0.825835     -0.191360     -0.291742E-01  0.291742E-01   8.04015       8.06933    
   4  0.769690     -0.261767     -0.399082E-01  0.399082E-01   8.05853       8.09844    
   5  0.206534      -1.57729     -0.240469      0.240469       8.06512       8.30559    
   6  0.435455     -0.831363     -0.126747      0.126747       8.05256       8.17931    
   7  0.408718     -0.894731     -0.136408      0.136408       8.05990       8.19631    
   8  0.504170E-01  -2.98743     -0.455455      0.455455       8.04747       8.50292    
   9  0.943874     -0.577631E-01 -0.880640E-02  0.880640E-02   8.08671       8.09552    
  10  0.161493      -1.82330     -0.277975      0.277975       8.05030       8.32828    
  11  0.248560      -1.39207     -0.212231      0.212231       8.09327       8.30550    
  12  0.952734     -0.484195E-01 -0.738191E-02  0.738191E-02   8.06810       8.07548    
  13  0.349224      -1.05204     -0.160392      0.160392       8.06036       8.22075    
  14  0.245013      -1.40644     -0.214422      0.214422       8.01589       8.23031    
  15  0.713805     -0.337146     -0.514003E-01  0.514003E-01   8.04755       8.09895    
  16  0.206995      -1.57506     -0.240129      0.240129       8.08776       8.32789    
  17  0.573984     -0.555154     -0.846372E-01  0.846372E-01   8.09625       8.18088    
  18  0.791297     -0.234082     -0.356875E-01  0.356875E-01   8.07625       8.11194    
  19  0.599323     -0.511955     -0.780512E-01  0.780512E-01   8.08186       8.15991    
  20  0.632893     -0.457454     -0.697422E-01  0.697422E-01   8.00020       8.06994    
  21  0.920472     -0.828688E-01 -0.126339E-01  0.126339E-01   8.06114       8.07377    
  22  0.650695     -0.429713     -0.655129E-01  0.655129E-01   8.08733       8.15284    
  23  0.759327     -0.275322     -0.419748E-01  0.419748E-01   8.02250       8.06447    
  24  0.547563     -0.602278     -0.918215E-01  0.918215E-01   8.04047       8.13229    
  25  0.375945     -0.978312     -0.149151      0.149151       7.97387       8.12302    
  26  0.436593     -0.828753     -0.126349      0.126349       8.03442       8.16077    
  27  0.226348      -1.48568     -0.226503      0.226503       8.10620       8.33270    
  28  0.889061     -0.117589     -0.179273E-01  0.179273E-01   8.11627       8.13419    
  29  0.294563      -1.22226     -0.186342      0.186342       8.04889       8.23524    
  30  0.760606     -0.273640     -0.417184E-01  0.417184E-01   8.06750       8.10922    
  31  0.131934      -2.02545     -0.308794      0.308794       8.14492       8.45372    
  32  0.150887      -1.89123     -0.288331      0.288331       8.02849       8.31682    
  33  0.108814      -2.21811     -0.338167      0.338167       8.09568       8.43385    
  34  0.392982     -0.933991     -0.142394      0.142394       8.09754       8.23993    
  35  0.524209     -0.645865     -0.984667E-01  0.984667E-01   8.10859       8.20706    
  36  0.779329     -0.249322     -0.380109E-01  0.380109E-01   8.03863       8.07664    
  37  0.684136     -0.379599     -0.578726E-01  0.578726E-01   8.08698       8.14485    
  38  0.898629     -0.106885     -0.162954E-01  0.162954E-01   8.15873       8.17503    
  39  0.885947E-01  -2.42368     -0.369508      0.369508       8.03963       8.40914    
  40  0.865042     -0.144977     -0.221028E-01  0.221028E-01   8.11598       8.13808    
  41  0.953799     -0.473027E-01 -0.721163E-02  0.721163E-02   8.15023       8.15745    
  42  0.264945      -1.32823     -0.202499      0.202499       8.14409       8.34659    
  43  0.931660     -0.707875E-01 -0.107921E-01  0.107921E-01   8.06657       8.07737    
  44  0.273150      -1.29773     -0.197849      0.197849       8.08464       8.28249    
  45  0.773196     -0.257223     -0.392155E-01  0.392155E-01   8.07850       8.11772    
  46  0.936342     -0.657743E-01 -0.100278E-01  0.100278E-01   8.16966       8.17969    
  47  0.367272      -1.00165     -0.152709      0.152709       8.11213       8.26483    
  48  0.970907     -0.295243E-01 -0.450118E-02  0.450118E-02   8.03164       8.03614    
  49  0.722669     -0.324804     -0.495188E-01  0.495188E-01   8.11238       8.16190    
  50  0.247966      -1.39446     -0.212596      0.212596       8.06856       8.28115    
  51  0.730821     -0.313587     -0.478085E-01  0.478085E-01   8.17713       8.22494    
  52  0.379134     -0.969864     -0.147863      0.147863       8.09790       8.24577    
  53  0.326173      -1.12033     -0.170802      0.170802       8.07678       8.24759    
  54  0.555872     -0.587218     -0.895256E-01  0.895256E-01   8.06856       8.15808    
  55  0.600838     -0.509431     -0.776664E-01  0.776664E-01   8.16632       8.24398    
  56  0.714504     -0.336167     -0.512510E-01  0.512510E-01   8.09236       8.14361    
  57  0.190775      -1.65666     -0.252570      0.252570       8.18731       8.43988    
  58  0.206210      -1.57886     -0.240708      0.240708       8.32632       8.56703    
  59  0.855348     -0.156247     -0.238210E-01  0.238210E-01   8.10547       8.12929    
  60  0.886753     -0.120189     -0.183236E-01  0.183236E-01   8.03877       8.05709    
  61  0.391830     -0.936926     -0.142841      0.142841       7.99049       8.13333    
  62  0.986898     -0.131885E-01 -0.201068E-02  0.201068E-02   8.09541       8.09742    
  63  0.153388      -1.87479     -0.285824      0.285824       8.09995       8.38578    
  64  0.416027     -0.877006     -0.133706      0.133706       8.07112       8.20483    
  65  0.815763     -0.203631     -0.310450E-01  0.310450E-01   8.11654       8.14758    
  66  0.196403      -1.62759     -0.248137      0.248137       8.04862       8.29675    
  67  0.751119E-01  -2.58878     -0.394677      0.394677       8.20747       8.60215    
  68  0.297288      -1.21305     -0.184939      0.184939       8.22671       8.41164    
  69  0.984987     -0.151265E-01 -0.230615E-02  0.230615E-02   8.06667       8.06897    
  70  0.142264      -1.95007     -0.297302      0.297302       7.97053       8.26783    
loop,thermsimp(1:2)       49  0.129606E-02  0.322997    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    404          7.92          0.87          1.12         24.29          0.09          0.06         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    405          7.89          0.84          1.12         24.76          0.07          0.05         26.84
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.89
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       49
neval is:      404
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       49      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       50
neval is:      404


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      404     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.919134E-02  -4.68949     -0.714947      0.714947       7.98780       8.70275    
   2  0.902150     -0.102974     -0.156992E-01  0.156992E-01   8.03164       8.04734    
   3  0.375868     -0.978517     -0.149182      0.149182       8.03877       8.18795    
   4  0.136549E-01  -4.29366     -0.654599      0.654599       8.02250       8.67710    
   5  0.948329     -0.530533E-01 -0.808836E-02  0.808836E-02   8.06667       8.07475    
   6  0.489379E-01  -3.01720     -0.459994      0.459994       8.04015       8.50015    
   7  0.319400      -1.14131     -0.174001      0.174001       8.00020       8.17420    
   8  0.748008     -0.290342     -0.442647E-01  0.442647E-01   8.06114       8.10541    
   9  0.468015     -0.759255     -0.115754      0.115754       8.06810       8.18385    
  10  0.467420     -0.760527     -0.115948      0.115948       8.03863       8.15458    
  11  0.345085      -1.06396     -0.162209      0.162209       8.06657       8.22878    
  12  0.598981     -0.512526     -0.781383E-01  0.781383E-01   8.08671       8.16485    
  13  0.231496      -1.46319     -0.223074      0.223074       8.09541       8.31849    
  14  0.685496     -0.377613     -0.575697E-01  0.575697E-01   8.05853       8.11610    
  15  0.225803      -1.48809     -0.226870      0.226870       8.04755       8.27442    
  16  0.744991E-01  -2.59697     -0.395926      0.395926       8.06750       8.46343    
  17  0.436777     -0.828332     -0.126285      0.126285       8.07625       8.20254    
  18  0.241074      -1.42265     -0.216894      0.216894       8.07850       8.29539    
  19  0.728071     -0.317357     -0.483834E-01  0.483834E-01   7.97387       8.02225    
  20  0.228500      -1.47622     -0.225060      0.225060       8.10547       8.33053    
  21  0.423678     -0.858781     -0.130927      0.130927       8.04047       8.17140    
  22  0.812855     -0.207202     -0.315894E-01  0.315894E-01   7.99049       8.02207    
  23  0.810546     -0.210047     -0.320232E-01  0.320232E-01   8.11627       8.14829    
  24  0.113500      -2.17595     -0.331739      0.331739       8.11598       8.44772    
  25  0.197385      -1.62260     -0.247377      0.247377       8.09236       8.33973    
  26  0.101018      -2.29246     -0.349502      0.349502       8.08698       8.43648    
  27  0.857009E-01  -2.45689     -0.374571      0.374571       8.11654       8.49111    
  28  0.693668     -0.365762     -0.557630E-01  0.557630E-01   8.08733       8.14309    
  29  0.705918     -0.348256     -0.530941E-01  0.530941E-01   8.15023       8.20333    
  30  0.309793      -1.17185     -0.178657      0.178657       8.06856       8.24721    
  31  0.144843      -1.93210     -0.294563      0.294563       8.08186       8.37642    
  32  0.412916     -0.884511     -0.134850      0.134850       8.03442       8.16927    
  33  0.916661     -0.870180E-01 -0.132665E-01  0.132665E-01   8.11238       8.12564    
  34  0.933384E-01  -2.37152     -0.361556      0.361556       8.15873       8.52029    
  35  0.937330     -0.647200E-01 -0.986703E-02  0.986703E-02   8.05256       8.06243    
  36  0.958012     -0.428952E-01 -0.653968E-02  0.653968E-02   8.16966       8.17620    
  37  0.692877E-01  -2.66949     -0.406983      0.406983       8.09625       8.50323    
  38  0.228520E-01  -3.77872     -0.576093      0.576093       8.05990       8.63600    
  39  0.188135      -1.67060     -0.254694      0.254694       8.07112       8.32582    
  40  0.122595E-01  -4.40146     -0.671034      0.671034       8.10859       8.77962    
  41  0.776693     -0.252710     -0.385275E-01  0.385275E-01   8.06036       8.09889    
  42  0.571957     -0.558691     -0.851765E-01  0.851765E-01   8.17713       8.26230    
  43  0.313016      -1.16150     -0.177079      0.177079       8.01589       8.19296    
  44  0.512360     -0.668728     -0.101952      0.101952       8.04889       8.15085    
  45  0.874954     -0.133584     -0.203658E-01  0.203658E-01   8.09754       8.11790    
  46  0.617920     -0.481397     -0.733924E-01  0.733924E-01   8.16632       8.23971    
  47  0.529196     -0.636396     -0.970232E-01  0.970232E-01   8.09790       8.19493    
  48  0.389261E-02  -5.54867     -0.845935      0.845935       8.07678       8.92272    
  49  0.323386E-01  -3.43149     -0.523156      0.523156       8.11213       8.63528    
  50  0.900641     -0.104648     -0.159544E-01  0.159544E-01   7.97053       7.98648    
  51  0.872638     -0.136235     -0.207700E-01  0.207700E-01   8.06856       8.08933    
  52  0.965349     -0.352660E-01 -0.537656E-02  0.537656E-02   8.08464       8.09001    
  53  0.679490     -0.386413     -0.589114E-01  0.589114E-01   8.04862       8.10753    
  54  0.101129      -2.29136     -0.349335      0.349335       8.09327       8.44260    
  55  0.885746     -0.121326     -0.184969E-01  0.184969E-01   8.06512       8.08362    
  56  0.307763      -1.17843     -0.179660      0.179660       8.02849       8.20815    
  57  0.978164     -0.220781E-01 -0.336597E-02  0.336597E-02   8.08776       8.09112    
  58  0.678582     -0.387750     -0.591152E-01  0.591152E-01   8.05030       8.10942    
  59  0.573317     -0.556317     -0.848145E-01  0.848145E-01   8.10620       8.19101    
  60  0.541891     -0.612690     -0.934089E-01  0.934089E-01   8.01090       8.10431    
  61  0.110478      -2.20294     -0.335854      0.335854       8.14409       8.47995    
  62  0.125637      -2.07436     -0.316250      0.316250       8.09995       8.41620    
  63  0.580733     -0.543464     -0.828550E-01  0.828550E-01   8.03963       8.12248    
  64  0.261777      -1.34026     -0.204332      0.204332       8.22671       8.43104    
  65  0.500314     -0.692519     -0.105579      0.105579       8.09568       8.20126    
  66  0.810055     -0.210653     -0.321155E-01  0.321155E-01   8.18731       8.21942    
  67  0.548357     -0.600828     -0.916006E-01  0.916006E-01   8.14492       8.23652    
  68  0.260831      -1.34388     -0.204884      0.204884       8.04747       8.25235    
  69  0.276330      -1.28616     -0.196084      0.196084       8.32632       8.52240    
  70  0.637232     -0.450622     -0.687006E-01  0.687006E-01   7.89002       7.95872    
loop,thermsimp(1:2)       50  0.714947      0.156992E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    406          8.01          0.87          1.12         24.48          0.07          0.05         26.59
Just calling func    0   0         26.59


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    407          7.94          0.86          1.13         24.37          0.06          0.05         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.94
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       50
neval is:      406
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       50      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       51
neval is:      406


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      406     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.903412     -0.101577     -0.154861E-01  0.154861E-01   7.89002       7.90550    
   2  0.808902     -0.212077     -0.323327E-01  0.323327E-01   7.97053       8.00286    
   3  0.762147     -0.271616     -0.414098E-01  0.414098E-01   7.99049       8.03190    
   4  0.287851      -1.24531     -0.189857      0.189857       7.97387       8.16372    
   5  0.212418      -1.54920     -0.236187      0.236187       8.03164       8.26783    
   6  0.380717     -0.965699     -0.147228      0.147228       8.05256       8.19979    
   7  0.877795     -0.130342     -0.198716E-01  0.198716E-01   8.06667       8.08654    
   8  0.836834     -0.178130     -0.271571E-01  0.271571E-01   8.06512       8.09228    
   9  0.435183     -0.831988     -0.126843      0.126843       8.06856       8.19540    
  10  0.900166     -0.105177     -0.160349E-01  0.160349E-01   8.08464       8.10067    
  11  0.175095      -1.74242     -0.265645      0.265645       8.08776       8.35340    
  12  0.322232      -1.13248     -0.172655      0.172655       8.06036       8.23302    
  13  0.706662     -0.347203     -0.529337E-01  0.529337E-01   8.01090       8.06383    
  14  0.494297     -0.704618     -0.107424      0.107424       8.06114       8.16856    
  15  0.324383      -1.12583     -0.171641      0.171641       8.04862       8.22026    
  16  0.777122     -0.252157     -0.384432E-01  0.384432E-01   8.05030       8.08874    
  17  0.499054E-01  -2.99763     -0.457010      0.457010       8.05853       8.51554    
  18  0.489193E-01  -3.01758     -0.460052      0.460052       8.09754       8.55759    
  19  0.480140     -0.733678     -0.111854      0.111854       8.03963       8.15148    
  20  0.914126     -0.897865E-01 -0.136886E-01  0.136886E-01   8.11238       8.12607    
  21  0.613008     -0.489378     -0.746092E-01  0.746092E-01   8.08733       8.16194    
  22  0.470573     -0.753804     -0.114923      0.114923       8.11627       8.23119    
  23  0.614279     -0.487307     -0.742934E-01  0.742934E-01   8.04889       8.12319    
  24  0.410529     -0.890308     -0.135734      0.135734       8.03863       8.17436    
  25  0.582759     -0.539981     -0.823240E-01  0.823240E-01   8.08671       8.16904    
  26  0.422753E-01  -3.16355     -0.482306      0.482306       8.03442       8.51672    
  27  0.717044     -0.332618     -0.507100E-01  0.507100E-01   8.04047       8.09118    
  28  0.420765     -0.865682     -0.131979      0.131979       8.00020       8.13218    
  29  0.801392     -0.221405     -0.337547E-01  0.337547E-01   8.16966       8.20341    
  30  0.426188     -0.852875     -0.130027      0.130027       8.06810       8.19813    
  31  0.338881      -1.08211     -0.164975      0.164975       8.03877       8.20374    
  32  0.398160     -0.920902     -0.140398      0.140398       8.10620       8.24660    
  33  0.938837     -0.631132E-01 -0.962206E-02  0.962206E-02   8.01589       8.02551    
  34  0.411860E-01  -3.18966     -0.486286      0.486286       8.09790       8.58419    
  35  0.180703      -1.71090     -0.260839      0.260839       8.09568       8.35652    
  36  0.617012     -0.482867     -0.736165E-01  0.736165E-01   8.07625       8.14987    
  37  0.788612     -0.237480     -0.362056E-01  0.362056E-01   8.15023       8.18644    
  38  0.381719     -0.963071     -0.146827      0.146827       8.02849       8.17532    
  39  0.376038     -0.978064     -0.149113      0.149113       8.18731       8.33642    
  40  0.105996      -2.24435     -0.342168      0.342168       8.06657       8.40874    
  41  0.769932E-01  -2.56404     -0.390906      0.390906       8.14492       8.53583    
  42  0.365987      -1.00516     -0.153244      0.153244       8.16632       8.31956    
  43  0.731763     -0.312298     -0.476121E-01  0.476121E-01   8.06856       8.11617    
  44  0.447137     -0.804891     -0.122711      0.122711       8.04747       8.17018    
  45  0.273519      -1.29638     -0.197643      0.197643       8.17713       8.37477    
  46  0.870614     -0.138556     -0.211239E-01  0.211239E-01   8.04755       8.06867    
  47  0.822463     -0.195452     -0.297980E-01  0.297980E-01   8.07850       8.10830    
  48  0.456061     -0.785129     -0.119699      0.119699       8.09541       8.21511    
  49  0.603947     -0.504269     -0.768795E-01  0.768795E-01   8.07112       8.14800    
  50  0.342037      -1.07284     -0.163561      0.163561       8.10547       8.26904    
  51  0.693527     -0.365965     -0.557941E-01  0.557941E-01   8.09236       8.14815    
  52  0.958323     -0.425703E-01 -0.649015E-02  0.649015E-02   8.08186       8.08835    
  53  0.587360     -0.532117     -0.811250E-01  0.811250E-01   8.09995       8.18108    
  54  0.364787      -1.00844     -0.153744      0.153744       8.22671       8.38045    
  55  0.878785     -0.129215     -0.196998E-01  0.196998E-01   8.08698       8.10668    
  56  0.273053      -1.29809     -0.197903      0.197903       8.09327       8.29117    
  57  0.896174     -0.109620     -0.167124E-01  0.167124E-01   8.11598       8.13269    
  58  0.239994      -1.42714     -0.217578      0.217578       8.06750       8.28508    
  59  0.595505E-01  -2.82093     -0.430071      0.430071       8.14409       8.57416    
  60  0.353403      -1.04015     -0.158578      0.158578       8.11654       8.27512    
  61  0.729282     -0.315695     -0.481300E-01  0.481300E-01   8.04015       8.08828    
  62  0.231928      -1.46133     -0.222790      0.222790       8.09625       8.31904    
  63  0.107599      -2.22934     -0.339879      0.339879       8.15873       8.49861    
  64  0.641905     -0.443315     -0.675865E-01  0.675865E-01   8.32632       8.39390    
  65  0.701312     -0.354803     -0.540922E-01  0.540922E-01   8.11213       8.16622    
  66  0.245029      -1.40638     -0.214412      0.214412       8.05990       8.27431    
  67  0.223204      -1.49967     -0.228635      0.228635       8.02250       8.25113    
  68  0.335163      -1.09314     -0.166657      0.166657       7.98780       8.15446    
  69  0.921199     -0.820796E-01 -0.125136E-01  0.125136E-01   8.10859       8.12110    
  70  0.395288     -0.928141     -0.141502      0.141502       7.93671       8.07822    
loop,thermsimp(1:2)       51  0.154861E-01  0.323327E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    408          8.03          0.86          1.13         24.33          0.10          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.03
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       51
neval is:      407
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       51      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       52
neval is:      407


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      407     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.421091     -0.864906     -0.131861      0.131861       7.89002       8.02188    
   2  0.315135      -1.15476     -0.176051      0.176051       7.97053       8.14658    
   3  0.696708     -0.361389     -0.550964E-01  0.550964E-01   8.01589       8.07098    
   4  0.922116     -0.810842E-01 -0.123619E-01  0.123619E-01   7.99049       8.00285    
   5  0.908133     -0.963648E-01 -0.146915E-01  0.146915E-01   8.01090       8.02559    
   6  0.174132      -1.74794     -0.266486      0.266486       8.04755       8.31404    
   7  0.490629     -0.712068     -0.108560      0.108560       7.93671       8.04527    
   8  0.382604     -0.960755     -0.146474      0.146474       8.06667       8.21314    
   9  0.985159     -0.149527E-01 -0.227965E-02  0.227965E-02   8.04015       8.04243    
  10  0.182634      -1.70027     -0.259219      0.259219       8.08186       8.34108    
  11  0.554568     -0.589565     -0.898834E-01  0.898834E-01   8.05030       8.14018    
  12  0.999791     -0.209153E-03 -0.318868E-04  0.318868E-04   8.04047       8.04050    
  13  0.284621      -1.25660     -0.191577      0.191577       8.06512       8.25670    
  14  0.920706E-01  -2.38520     -0.363641      0.363641       8.08464       8.44828    
  15  0.243911      -1.41095     -0.215110      0.215110       8.08698       8.30209    
  16  0.866829     -0.142914     -0.217882E-01  0.217882E-01   8.07850       8.10029    
  17  0.640039     -0.446225     -0.680303E-01  0.680303E-01   8.06856       8.13659    
  18  0.737488E-01  -2.60709     -0.397470      0.397470       8.10859       8.50606    
  19  0.511916     -0.669594     -0.102084      0.102084       8.04889       8.15098    
  20  0.870220     -0.139009     -0.211930E-01  0.211930E-01   8.11238       8.13357    
  21  0.594690     -0.519714     -0.792342E-01  0.792342E-01   8.00020       8.07943    
  22  0.659508     -0.416262     -0.634621E-01  0.634621E-01   8.11598       8.17944    
  23  0.702023     -0.353789     -0.539377E-01  0.539377E-01   8.07112       8.12506    
  24  0.178121      -1.72529     -0.263033      0.263033       8.09236       8.35539    
  25  0.622271     -0.474379     -0.723225E-01  0.723225E-01   8.07625       8.14857    
  26  0.877027     -0.131217     -0.200050E-01  0.200050E-01   8.03963       8.05963    
  27  0.206753      -1.57623     -0.240308      0.240308       7.98780       8.22811    
  28  0.927381     -0.753912E-01 -0.114939E-01  0.114939E-01   8.08733       8.09882    
  29  0.610274     -0.493848     -0.752906E-01  0.752906E-01   7.97387       8.04916    
  30  0.453676     -0.790373     -0.120498      0.120498       8.11213       8.23262    
  31  0.203335      -1.59290     -0.242849      0.242849       8.06114       8.30399    
  32  0.558786     -0.581989     -0.887284E-01  0.887284E-01   8.08671       8.17544    
  33  0.685013     -0.378317     -0.576772E-01  0.576772E-01   8.04747       8.10515    
  34  0.753574     -0.282929     -0.431345E-01  0.431345E-01   8.03863       8.08176    
  35  0.736990E-01  -2.60777     -0.397573      0.397573       8.02849       8.42606    
  36  0.719848     -0.328716     -0.501151E-01  0.501151E-01   8.09995       8.15007    
  37  0.177345E-01  -4.03224     -0.614744      0.614744       8.15023       8.76498    
  38  0.277334E-01  -3.58512     -0.546577      0.546577       8.06856       8.61514    
  39  0.228604      -1.47576     -0.224991      0.224991       8.06810       8.29309    
  40  0.874609     -0.133979     -0.204260E-01  0.204260E-01   8.05256       8.07298    
  41  0.875699     -0.132733     -0.202361E-01  0.202361E-01   8.16966       8.18990    
  42  0.540874     -0.614569     -0.936954E-01  0.936954E-01   8.03877       8.13246    
  43  0.343108E-01  -3.37230     -0.514131      0.514131       8.09541       8.60954    
  44  0.982551     -0.176027E-01 -0.268366E-02  0.268366E-02   8.04862       8.05130    
  45  0.201823      -1.60037     -0.243987      0.243987       8.11627       8.36025    
  46  0.116838      -2.14697     -0.327321      0.327321       8.06036       8.38768    
  47  0.520586     -0.652800     -0.995240E-01  0.995240E-01   8.10620       8.20572    
  48  0.515528     -0.662563     -0.101013      0.101013       8.02250       8.12351    
  49  0.814407     -0.205295     -0.312987E-01  0.312987E-01   8.03164       8.06294    
  50  0.436930     -0.827981     -0.126232      0.126232       8.10547       8.23171    
  51  0.802441     -0.220097     -0.335553E-01  0.335553E-01   8.05990       8.09346    
  52  0.366662      -1.00331     -0.152962      0.152962       8.11654       8.26950    
  53  0.915349     -0.884494E-01 -0.134847E-01  0.134847E-01   8.06750       8.08099    
  54  0.619345     -0.479093     -0.730412E-01  0.730412E-01   8.09327       8.16631    
  55  0.984856     -0.152594E-01 -0.232640E-02  0.232640E-02   8.09625       8.09857    
  56  0.594834     -0.519472     -0.791973E-01  0.791973E-01   8.16632       8.24552    
  57  0.295281      -1.21983     -0.185972      0.185972       8.18731       8.37328    
  58  0.363721      -1.01137     -0.154190      0.154190       8.08776       8.24195    
  59  0.113237      -2.17827     -0.332093      0.332093       8.09568       8.42777    
  60  0.684322     -0.379327     -0.578311E-01  0.578311E-01   8.17713       8.23496    
  61  0.172853E-01  -4.05790     -0.618656      0.618656       8.22671       8.84536    
  62  0.910904     -0.933174E-01 -0.142269E-01  0.142269E-01   8.32632       8.34055    
  63  0.792218     -0.232919     -0.355101E-01  0.355101E-01   8.06657       8.10208    
  64  0.644894E-02  -5.04384     -0.768970      0.768970       8.15873       8.92770    
  65  0.674921     -0.393160     -0.599401E-01  0.599401E-01   8.05853       8.11847    
  66  0.713821     -0.337122     -0.513967E-01  0.513967E-01   8.03442       8.08581    
  67  0.122871      -2.09662     -0.319645      0.319645       8.14492       8.46457    
  68  0.809527     -0.211305     -0.322149E-01  0.322149E-01   8.09754       8.12975    
  69  0.266630      -1.32189     -0.201532      0.201532       8.14409       8.34562    
  70  0.457713     -0.781513     -0.119147      0.119147       8.03087       8.15002    
loop,thermsimp(1:2)       52  0.131861      0.176051    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    409          7.98          0.86          1.12         24.37          0.09          0.05         26.49
Just calling func    0   0         26.49


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    410          8.22          0.87          1.13         24.34          0.09          0.05         26.48
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.98
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       52
neval is:      409
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       52      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       53
neval is:      409


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      409     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.340866E-01  -3.37885     -0.515130      0.515130       7.99049       8.50562    
   2  0.714674     -0.335928     -0.512147E-01  0.512147E-01   7.89002       7.94123    
   3  0.977792     -0.224587E-01 -0.342399E-02  0.342399E-02   8.01090       8.01432    
   4  0.771231     -0.259767     -0.396034E-01  0.396034E-01   8.04047       8.08007    
   5  0.265148      -1.32747     -0.202382      0.202382       8.04015       8.24253    
   6  0.559491     -0.580728     -0.885362E-01  0.885362E-01   7.93671       8.02525    
   7  0.934824E-01  -2.36998     -0.361321      0.361321       7.97387       8.33519    
   8  0.928182     -0.745278E-01 -0.113623E-01  0.113623E-01   8.04862       8.05998    
   9  0.464905     -0.765922     -0.116770      0.116770       8.03963       8.15640    
  10  0.871919     -0.137059     -0.208956E-01  0.208956E-01   8.03164       8.05253    
  11  0.982233     -0.179265E-01 -0.273302E-02  0.273302E-02   8.01589       8.01862    
  12  0.426376     -0.852433     -0.129959      0.129959       8.05256       8.18252    
  13  0.471128E-01  -3.05521     -0.465789      0.465789       8.00020       8.46599    
  14  0.686439     -0.376238     -0.573603E-01  0.573603E-01   8.06750       8.12486    
  15  0.117826      -2.13855     -0.326037      0.326037       8.03863       8.36466    
  16  0.756878E-01  -2.58114     -0.393513      0.393513       8.03442       8.42793    
  17  0.196211      -1.62856     -0.248286      0.248286       8.05990       8.30819    
  18  0.431930     -0.839491     -0.127986      0.127986       8.09625       8.22423    
  19  0.707794     -0.345602     -0.526896E-01  0.526896E-01   8.08733       8.14002    
  20  0.174358E-01  -4.04923     -0.617334      0.617334       8.07850       8.69583    
  21  0.267976      -1.31686     -0.200764      0.200764       8.06657       8.26734    
  22  0.793866     -0.230841     -0.351933E-01  0.351933E-01   8.04747       8.08266    
  23  0.135848      -1.99622     -0.304338      0.304338       8.05853       8.36287    
  24  0.663958     -0.409536     -0.624367E-01  0.624367E-01   8.02250       8.08493    
  25  0.281101      -1.26904     -0.193474      0.193474       8.07112       8.26460    
  26  0.606466     -0.500106     -0.762448E-01  0.762448E-01   8.09754       8.17378    
  27  0.940056     -0.618158E-01 -0.942427E-02  0.942427E-02   8.03877       8.04819    
  28  0.124106      -2.08662     -0.318120      0.318120       8.11238       8.43050    
  29  0.205090      -1.58431     -0.241539      0.241539       8.06856       8.31009    
  30  0.852960     -0.159043     -0.242472E-01  0.242472E-01   8.05030       8.07455    
  31  0.241701      -1.42005     -0.216497      0.216497       7.97053       8.18703    
  32  0.744368     -0.295220     -0.450084E-01  0.450084E-01   8.07625       8.12126    
  33  0.279909      -1.27329     -0.194122      0.194122       8.03087       8.22499    
  34  0.142971      -1.94511     -0.296547      0.296547       8.09995       8.39650    
  35  0.367233      -1.00176     -0.152725      0.152725       8.04889       8.20162    
  36  0.839044     -0.175493     -0.267551E-01  0.267551E-01   8.09327       8.12002    
  37  0.762369     -0.271325     -0.413655E-01  0.413655E-01   8.08671       8.12808    
  38  0.414704     -0.880189     -0.134191      0.134191       8.11598       8.25017    
  39  0.294445      -1.22266     -0.186404      0.186404       8.16966       8.35606    
  40  0.296874      -1.21445     -0.185151      0.185151       8.10620       8.29135    
  41  0.834777     -0.180590     -0.275323E-01  0.275323E-01   8.06667       8.09420    
  42  0.399354     -0.917907     -0.139941      0.139941       7.98780       8.12774    
  43  0.948666     -0.526981E-01 -0.803420E-02  0.803420E-02   8.10547       8.11351    
  44  0.306553E-01  -3.48495     -0.531306      0.531306       8.11213       8.64343    
  45  0.768324E-01  -2.56613     -0.391225      0.391225       8.17713       8.56835    
  46  0.723813     -0.323222     -0.492775E-01  0.492775E-01   8.08776       8.13703    
  47  0.912222     -0.918720E-01 -0.140065E-01  0.140065E-01   8.16632       8.18032    
  48  0.846322     -0.166855     -0.254382E-01  0.254382E-01   8.06512       8.09056    
  49  0.704090     -0.350850     -0.534896E-01  0.534896E-01   8.11654       8.17003    
  50  0.443839     -0.812294     -0.123840      0.123840       8.06810       8.19194    
  51  0.790462     -0.235137     -0.358484E-01  0.358484E-01   8.08698       8.12283    
  52  0.134239      -2.00813     -0.306154      0.306154       8.06114       8.36729    
  53  0.720618     -0.327646     -0.499520E-01  0.499520E-01   8.04755       8.09750    
  54  0.489652     -0.714061     -0.108864      0.108864       8.32632       8.43518    
  55  0.493891E-01  -3.00802     -0.458595      0.458595       8.08186       8.54046    
  56  0.524875     -0.644595     -0.982732E-01  0.982732E-01   8.14409       8.24237    
  57  0.919627     -0.837868E-01 -0.127739E-01  0.127739E-01   8.09236       8.10513    
  58  0.372709     -0.986956     -0.150469      0.150469       8.11627       8.26674    
  59  0.121203      -2.11029     -0.321729      0.321729       8.18731       8.50904    
  60  0.195183      -1.63382     -0.249087      0.249087       8.06036       8.30945    
  61  0.325168      -1.12341     -0.171272      0.171272       8.02849       8.19976    
  62  0.248863      -1.39085     -0.212046      0.212046       8.09568       8.30773    
  63  0.910643     -0.936046E-01 -0.142707E-01  0.142707E-01   8.08464       8.09891    
  64  0.131372E-01  -4.33230     -0.660491      0.660491       8.14492       8.80541    
  65  0.308708      -1.17536     -0.179192      0.179192       8.10859       8.28778    
  66  0.863163     -0.147151     -0.224343E-01  0.224343E-01   8.09541       8.11785    
  67  0.437001     -0.827819     -0.126207      0.126207       8.06856       8.19477    
  68  0.933437     -0.688822E-01 -0.105016E-01  0.105016E-01   8.15023       8.16074    
  69  0.595007     -0.519181     -0.791529E-01  0.791529E-01   8.22671       8.30586    
  70  0.184309      -1.69114     -0.257827      0.257827       7.98493       8.24275    
loop,thermsimp(1:2)       53  0.515130      0.512147E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    411          7.99          0.86          1.12         24.34          0.07          0.04         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      7.99
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       53
neval is:      410
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       53      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       54
neval is:      410


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      410     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.615000     -0.486133     -0.741145E-01  0.741145E-01   7.89002       7.96413    
   2  0.438442     -0.824528     -0.125705      0.125705       8.01090       8.13660    
   3  0.666371     -0.405908     -0.618837E-01  0.618837E-01   8.01589       8.07777    
   4  0.419797     -0.867984     -0.132330      0.132330       7.93671       8.06904    
   5  0.662493     -0.411746     -0.627736E-01  0.627736E-01   8.03877       8.10154    
   6  0.261021      -1.34315     -0.204773      0.204773       8.03164       8.23641    
   7  0.451731     -0.794667     -0.121153      0.121153       8.04862       8.16977    
   8  0.858047     -0.153096     -0.233406E-01  0.233406E-01   8.05030       8.07364    
   9  0.678039     -0.388550     -0.592373E-01  0.592373E-01   8.04047       8.09971    
  10  0.257304      -1.35750     -0.206960      0.206960       8.04747       8.25443    
  11  0.379774     -0.968178     -0.147606      0.147606       8.02250       8.17010    
  12  0.200314      -1.60787     -0.245131      0.245131       8.06512       8.31026    
  13  0.702955E-01  -2.65505     -0.404781      0.404781       8.06667       8.47145    
  14  0.846007     -0.167228     -0.254951E-01  0.254951E-01   8.04755       8.07304    
  15  0.692217     -0.367856     -0.560823E-01  0.560823E-01   8.08464       8.14072    
  16  0.830541     -0.185678     -0.283080E-01  0.283080E-01   8.09236       8.12066    
  17  0.162133E-02  -6.42451     -0.979462      0.979462       8.10547       9.08494    
  18  0.829216     -0.187275     -0.285514E-01  0.285514E-01   8.09541       8.12396    
  19  0.464918     -0.765894     -0.116766      0.116766       8.09327       8.21003    
  20  0.204157      -1.58887     -0.242234      0.242234       8.07625       8.31848    
  21  0.203429      -1.59244     -0.242779      0.242779       8.08698       8.32976    
  22  0.403935     -0.906500     -0.138202      0.138202       8.06750       8.20571    
  23  0.508037     -0.677201     -0.103244      0.103244       7.98780       8.09104    
  24  0.337702      -1.08559     -0.165506      0.165506       8.08671       8.25222    
  25  0.375672     -0.979039     -0.149261      0.149261       8.08776       8.23702    
  26  0.218755      -1.51980     -0.231705      0.231705       8.08733       8.31903    
  27  0.803422     -0.218876     -0.333692E-01  0.333692E-01   8.03963       8.07300    
  28  0.324101      -1.12670     -0.171774      0.171774       8.15023       8.32201    
  29  0.804001     -0.218155     -0.332592E-01  0.332592E-01   8.11654       8.14980    
  30  0.727676     -0.317899     -0.484661E-01  0.484661E-01   8.09754       8.14600    
  31  0.769479     -0.262042     -0.399502E-01  0.399502E-01   8.16632       8.20627    
  32  0.632293     -0.458402     -0.698867E-01  0.698867E-01   8.05256       8.12245    
  33  0.300459      -1.20244     -0.183321      0.183321       7.97053       8.15385    
  34  0.567362     -0.566759     -0.864064E-01  0.864064E-01   8.06810       8.15451    
  35  0.803345     -0.218971     -0.333837E-01  0.333837E-01   8.06856       8.10194    
  36  0.764706     -0.268264     -0.408988E-01  0.408988E-01   8.02849       8.06939    
  37  0.159444      -1.83606     -0.279921      0.279921       8.04889       8.32882    
  38  0.951670     -0.495367E-01 -0.755222E-02  0.755222E-02   8.09625       8.10380    
  39  0.769198     -0.262407     -0.400058E-01  0.400058E-01   8.03087       8.07088    
  40  0.916532     -0.871588E-01 -0.132880E-01  0.132880E-01   8.14409       8.15738    
  41  0.146117E-01  -4.22593     -0.644274      0.644274       8.04015       8.68443    
  42  0.196164      -1.62880     -0.248323      0.248323       7.98493       8.23325    
  43  0.399482     -0.917586     -0.139893      0.139893       8.11598       8.25587    
  44  0.646732     -0.435823     -0.664444E-01  0.664444E-01   8.07112       8.13757    
  45  0.207790      -1.57122     -0.239545      0.239545       8.11627       8.35581    
  46  0.276388      -1.28595     -0.196052      0.196052       8.06657       8.26263    
  47  0.410494     -0.890394     -0.135747      0.135747       8.10859       8.24434    
  48  0.437747     -0.826115     -0.125947      0.125947       8.10620       8.23214    
  49  0.414886     -0.879752     -0.134124      0.134124       8.22671       8.36083    
  50  0.453890     -0.789901     -0.120426      0.120426       8.09568       8.21611    
  51  0.141383      -1.95628     -0.298249      0.298249       8.05990       8.35815    
  52  0.264375      -1.33039     -0.202827      0.202827       8.06036       8.26319    
  53  0.598599     -0.513163     -0.782355E-01  0.782355E-01   8.06856       8.14679    
  54  0.716868     -0.332864     -0.507475E-01  0.507475E-01   7.97387       8.02461    
  55  0.547773     -0.601894     -0.917631E-01  0.917631E-01   8.16966       8.26142    
  56  0.920744     -0.825729E-01 -0.125888E-01  0.125888E-01   8.05853       8.07112    
  57  0.394656     -0.929742     -0.141746      0.141746       8.03863       8.18037    
  58  0.439395     -0.822357     -0.125374      0.125374       8.06114       8.18651    
  59  0.890216     -0.116291     -0.177294E-01  0.177294E-01   8.09995       8.11768    
  60  0.693208     -0.366425     -0.558641E-01  0.558641E-01   8.03442       8.09028    
  61  0.747783     -0.290642     -0.443105E-01  0.443105E-01   8.11238       8.15669    
  62  0.408813     -0.894498     -0.136373      0.136373       8.32632       8.46269    
  63  0.175963E-03  -8.64523      -1.31803       1.31803       8.00020       9.31823    
  64  0.715035     -0.335424     -0.511379E-01  0.511379E-01   7.99049       8.04162    
  65  0.895535     -0.110334     -0.168213E-01  0.168213E-01   8.18731       8.20413    
  66  0.332554      -1.10095     -0.167848      0.167848       8.08186       8.24971    
  67  0.594595     -0.519874     -0.792585E-01  0.792585E-01   8.17713       8.25639    
  68  0.883454     -0.123916     -0.188919E-01  0.188919E-01   8.11213       8.13102    
  69  0.727087     -0.318709     -0.485895E-01  0.485895E-01   8.07850       8.12709    
  70  0.760468     -0.273821     -0.417460E-01  0.417460E-01   7.99264       8.03438    
loop,thermsimp(1:2)       54  0.741145E-01  0.125705    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    412          8.13          0.86          1.12         24.30          0.11          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.13
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       54
neval is:      411
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       54      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       55
neval is:      411


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      411     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.626103     -0.468241     -0.713866E-01  0.713866E-01   7.89002       7.96140    
   2  0.909442     -0.949244E-01 -0.144719E-01  0.144719E-01   7.97387       7.98834    
   3  0.449837     -0.798870     -0.121794      0.121794       7.99264       8.11443    
   4  0.761598     -0.272336     -0.415196E-01  0.415196E-01   7.99049       8.03201    
   5  0.706800     -0.347007     -0.529038E-01  0.529038E-01   7.93671       7.98962    
   6  0.214343      -1.54018     -0.234811      0.234811       8.02849       8.26330    
   7  0.855661     -0.155881     -0.237651E-01  0.237651E-01   8.03087       8.05463    
   8  0.432924E-01  -3.13978     -0.478682      0.478682       8.05853       8.53721    
   9  0.902784     -0.102271     -0.155920E-01  0.155920E-01   8.03963       8.05522    
  10  0.706965     -0.346774     -0.528682E-01  0.528682E-01   8.04755       8.10042    
  11  0.826667     -0.190354     -0.290208E-01  0.290208E-01   8.05030       8.07932    
  12  0.824436     -0.193055     -0.294327E-01  0.294327E-01   8.01589       8.04532    
  13  0.442772     -0.814700     -0.124207      0.124207       8.03442       8.15863    
  14  0.416355     -0.876217     -0.133586      0.133586       7.98780       8.12138    
  15  0.268464      -1.31504     -0.200487      0.200487       8.04047       8.24096    
  16  0.779742     -0.248792     -0.379301E-01  0.379301E-01   8.03877       8.07670    
  17  0.406799E-01  -3.20202     -0.488171      0.488171       8.06856       8.55673    
  18  0.975397     -0.249106E-01 -0.379780E-02  0.379780E-02   8.09625       8.10005    
  19  0.425150E-01  -3.15790     -0.481444      0.481444       8.09995       8.58140    
  20  0.302481      -1.19574     -0.182298      0.182298       8.09236       8.27465    
  21  0.732033     -0.311930     -0.475560E-01  0.475560E-01   8.05256       8.10011    
  22  0.774561     -0.255459     -0.389466E-01  0.389466E-01   8.09541       8.13436    
  23  0.899897     -0.105475     -0.160804E-01  0.160804E-01   8.07850       8.09458    
  24  0.549624     -0.598520     -0.912487E-01  0.912487E-01   8.11213       8.20337    
  25  0.143543      -1.94112     -0.295938      0.295938       8.01090       8.30684    
  26  0.229055      -1.47379     -0.224691      0.224691       8.07112       8.29581    
  27  0.334206      -1.09600     -0.167093      0.167093       8.08464       8.25173    
  28  0.301620      -1.19859     -0.182733      0.182733       8.09754       8.28027    
  29  0.856030     -0.155449     -0.236994E-01  0.236994E-01   8.06856       8.09226    
  30  0.978878     -0.213482E-01 -0.325468E-02  0.325468E-02   8.11654       8.11979    
  31  0.890790E-01  -2.41823     -0.368677      0.368677       7.97053       8.33921    
  32  0.275076      -1.29071     -0.196777      0.196777       8.06810       8.26488    
  33  0.506865     -0.679511     -0.103596      0.103596       8.11238       8.21597    
  34  0.628553     -0.464334     -0.707911E-01  0.707911E-01   8.14409       8.21488    
  35  0.787972     -0.238293     -0.363295E-01  0.363295E-01   8.04862       8.08495    
  36  0.746168     -0.292804     -0.446401E-01  0.446401E-01   8.02250       8.06714    
  37  0.116954      -2.14598     -0.327170      0.327170       8.03863       8.36580    
  38  0.245368      -1.40500     -0.214202      0.214202       8.06114       8.27534    
  39  0.873952     -0.134729     -0.205404E-01  0.205404E-01   8.18731       8.20785    
  40  0.850596     -0.161818     -0.246703E-01  0.246703E-01   8.06750       8.09217    
  41  0.455763     -0.785783     -0.119798      0.119798       8.16632       8.28612    
  42  0.984333     -0.157910E-01 -0.240745E-02  0.240745E-02   8.09327       8.09567    
  43  0.956700     -0.442655E-01 -0.674860E-02  0.674860E-02   8.09568       8.10243    
  44  0.186161      -1.68114     -0.256302      0.256302       8.10620       8.36250    
  45  0.791379     -0.233979     -0.356717E-01  0.356717E-01   7.98493       8.02060    
  46  0.262937      -1.33584     -0.203659      0.203659       8.03164       8.23530    
  47  0.115228E-01  -4.46342     -0.680481      0.680481       8.08776       8.76824    
  48  0.324912      -1.12420     -0.171392      0.171392       8.10859       8.27998    
  49  0.164288      -1.80613     -0.275358      0.275358       8.08186       8.35722    
  50  0.334193E-02  -5.70121     -0.869190      0.869190       8.08671       8.95590    
  51  0.189130      -1.66532     -0.253890      0.253890       8.04747       8.30136    
  52  0.157956      -1.84544     -0.281350      0.281350       8.11598       8.39733    
  53  0.414399     -0.880925     -0.134303      0.134303       8.17713       8.31143    
  54  0.445375     -0.808838     -0.123313      0.123313       8.16966       8.29297    
  55  0.674924     -0.393155     -0.599393E-01  0.599393E-01   8.06657       8.12651    
  56  0.204431      -1.58752     -0.242030      0.242030       8.06036       8.30239    
  57  0.741769     -0.298718     -0.455417E-01  0.455417E-01   8.06512       8.11067    
  58  0.662845     -0.411215     -0.626926E-01  0.626926E-01   8.07625       8.13894    
  59  0.716249     -0.333728     -0.508792E-01  0.508792E-01   8.08733       8.13821    
  60  0.503649     -0.685876     -0.104567      0.104567       8.15023       8.25480    
  61  0.525560     -0.643292     -0.980745E-01  0.980745E-01   8.04889       8.14697    
  62  0.981258     -0.189199E-01 -0.288447E-02  0.288447E-02   8.08698       8.08986    
  63  0.892133     -0.114140     -0.174015E-01  0.174015E-01   8.11627       8.13367    
  64  0.239527E-01  -3.73167     -0.568920      0.568920       8.05990       8.62882    
  65  0.819895E-01  -2.50116     -0.381320      0.381320       8.22671       8.60803    
  66  0.567274     -0.566913     -0.864300E-01  0.864300E-01   8.32632       8.41275    
  67  0.543991     -0.608823     -0.928194E-01  0.928194E-01   8.06667       8.15949    
  68  0.962374     -0.383523E-01 -0.584708E-02  0.584708E-02   8.04015       8.04600    
  69  0.514511     -0.664538     -0.101314      0.101314       8.10547       8.20679    
  70  0.845541     -0.167779     -0.255791E-01  0.255791E-01   8.13032       8.15590    
loop,thermsimp(1:2)       55  0.713866E-01  0.144719E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    413          8.05          0.86          1.12         24.35          0.08          0.05         26.46
Just calling func    0   0         26.46


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    414          8.38          0.86          1.12         24.42          0.07          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.05
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       55
neval is:      413
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       55      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       56
neval is:      413


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      413     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.245842      -1.40307     -0.213908      0.213908       7.89002       8.10392    
   2  0.963480     -0.372033E-01 -0.567191E-02  0.567191E-02   7.97387       7.97954    
   3  0.633143     -0.457059     -0.696819E-01  0.696819E-01   7.93671       8.00640    
   4  0.939850E-02  -4.66721     -0.711549      0.711549       7.98493       8.69647    
   5  0.796978     -0.226928     -0.345968E-01  0.345968E-01   7.99049       8.02508    
   6  0.229125      -1.47349     -0.224644      0.224644       8.01589       8.24053    
   7  0.926958     -0.758467E-01 -0.115634E-01  0.115634E-01   8.04015       8.05172    
   8  0.687512     -0.374676     -0.571221E-01  0.571221E-01   8.03087       8.08799    
   9  0.695030     -0.363800     -0.554639E-01  0.554639E-01   8.03963       8.09509    
  10  0.900736     -0.104543     -0.159383E-01  0.159383E-01   8.02250       8.03844    
  11  0.867179     -0.142510     -0.217266E-01  0.217266E-01   8.03877       8.06049    
  12  0.879271     -0.128662     -0.196154E-01  0.196154E-01   8.05030       8.06992    
  13  0.197557      -1.62173     -0.247244      0.247244       8.04862       8.29586    
  14  0.790701     -0.234835     -0.358023E-01  0.358023E-01   8.08698       8.12278    
  15  0.807456     -0.213867     -0.326055E-01  0.326055E-01   8.06750       8.10011    
  16  0.688117     -0.373796     -0.569879E-01  0.569879E-01   8.06856       8.12554    
  17  0.227000      -1.48280     -0.226064      0.226064       8.07850       8.30456    
  18  0.374715     -0.981589     -0.149650      0.149650       8.09327       8.24292    
  19  0.176077      -1.73683     -0.264793      0.264793       8.09625       8.36104    
  20  0.446126E-01  -3.10974     -0.474102      0.474102       8.05256       8.52666    
  21  0.997763E-01  -2.30482     -0.351387      0.351387       8.04755       8.39894    
  22  0.142978E-01  -4.24765     -0.647585      0.647585       8.09568       8.74326    
  23  0.652216     -0.427379     -0.651570E-01  0.651570E-01   8.06512       8.13028    
  24  0.909797     -0.945339E-01 -0.144124E-01  0.144124E-01   7.99264       8.00705    
  25  0.145015      -1.93092     -0.294382      0.294382       8.11654       8.41092    
  26  0.189723      -1.66219     -0.253413      0.253413       7.98780       8.24121    
  27  0.260997      -1.34324     -0.204787      0.204787       8.06657       8.27136    
  28  0.167755      -1.78525     -0.272174      0.272174       8.11627       8.38844    
  29  0.148939      -1.90422     -0.290312      0.290312       8.09541       8.38572    
  30  0.209474      -1.56315     -0.238314      0.238314       8.08733       8.32564    
  31  0.594522     -0.519998     -0.792774E-01  0.792774E-01   8.07625       8.15553    
  32  0.401703     -0.912043     -0.139047      0.139047       8.04889       8.18794    
  33  0.306469      -1.18264     -0.180302      0.180302       8.13032       8.31062    
  34  0.879335     -0.128589     -0.196043E-01  0.196043E-01   8.03442       8.05402    
  35  0.920707     -0.826134E-01 -0.125950E-01  0.125950E-01   8.06667       8.07926    
  36  0.215616      -1.53425     -0.233908      0.233908       8.11213       8.34603    
  37  0.821708     -0.196370     -0.299381E-01  0.299381E-01   8.10547       8.13541    
  38  0.935240     -0.669517E-01 -0.102073E-01  0.102073E-01   8.18731       8.19751    
  39  0.691932     -0.368268     -0.561451E-01  0.561451E-01   8.14409       8.20024    
  40  0.493152     -0.706938     -0.107778      0.107778       8.11238       8.22015    
  41  0.362160      -1.01567     -0.154846      0.154846       8.03164       8.18648    
  42  0.636318     -0.452056     -0.689192E-01  0.689192E-01   8.04047       8.10939    
  43  0.178369      -1.72390     -0.262821      0.262821       8.08464       8.34746    
  44  0.987372     -0.127089E-01 -0.193756E-02  0.193756E-02   8.15023       8.15217    
  45  0.557690     -0.583953     -0.890278E-01  0.890278E-01   8.02849       8.11752    
  46  0.434391     -0.833811     -0.127120      0.127120       8.06810       8.19522    
  47  0.759572     -0.275001     -0.419258E-01  0.419258E-01   8.09236       8.13428    
  48  0.578559     -0.547214     -0.834267E-01  0.834267E-01   8.06114       8.14457    
  49  0.262392      -1.33792     -0.203975      0.203975       8.10859       8.31257    
  50  0.615619     -0.485127     -0.739610E-01  0.739610E-01   8.09754       8.17150    
  51  0.580502     -0.543861     -0.829156E-01  0.829156E-01   8.16632       8.24923    
  52  0.434749     -0.832986     -0.126995      0.126995       8.16966       8.29665    
  53  0.741569     -0.298987     -0.455827E-01  0.455827E-01   8.07112       8.11670    
  54  0.207475      -1.57274     -0.239776      0.239776       8.04747       8.28725    
  55  0.610742     -0.493081     -0.751737E-01  0.751737E-01   8.06036       8.13553    
  56  0.746759     -0.292013     -0.445195E-01  0.445195E-01   8.01090       8.05542    
  57  0.846394     -0.166771     -0.254254E-01  0.254254E-01   8.17713       8.20255    
  58  0.114011      -2.17146     -0.331055      0.331055       7.97053       8.30158    
  59  0.148375      -1.90801     -0.290890      0.290890       8.08186       8.37275    
  60  0.610037     -0.494236     -0.753498E-01  0.753498E-01   8.10620       8.18155    
  61  0.104069      -2.26270     -0.344965      0.344965       8.03863       8.38359    
  62  0.570721     -0.560855     -0.855064E-01  0.855064E-01   8.11598       8.20149    
  63  0.154528      -1.86738     -0.284695      0.284695       8.32632       8.61101    
  64  0.365341      -1.00692     -0.153513      0.153513       8.05853       8.21204    
  65  0.856377     -0.155044     -0.236376E-01  0.236376E-01   8.06856       8.09220    
  66  0.758370     -0.276584     -0.421673E-01  0.421673E-01   8.09995       8.14212    
  67  0.641541     -0.443881     -0.676729E-01  0.676729E-01   8.22671       8.29438    
  68  0.744629E-01  -2.59745     -0.396001      0.396001       8.05990       8.45590    
  69  0.186851      -1.67744     -0.255738      0.255738       8.08776       8.34349    
  70  0.431508     -0.840469     -0.128136      0.128136       8.05033       8.17847    
loop,thermsimp(1:2)       56  0.213908      0.567191E-02

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    415          8.09          0.86          1.12         24.30          0.07          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.09
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       56
neval is:      414
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       56      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       57
neval is:      414


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      415
neval,tstepnext:      414     415

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.303901      -1.19105     -0.181585      0.181585       7.97387       8.15545    
   2  0.729962     -0.314762     -0.479878E-01  0.479878E-01   7.93671       7.98470    
   3  0.788140     -0.238080     -0.362970E-01  0.362970E-01   7.99264       8.02893    
   4  0.718031     -0.331242     -0.505003E-01  0.505003E-01   7.99049       8.04099    
   5  0.603575     -0.504885     -0.769734E-01  0.769734E-01   8.02250       8.09947    
   6  0.287757      -1.24564     -0.189907      0.189907       8.04015       8.23006    
   7  0.690986     -0.369635     -0.563535E-01  0.563535E-01   8.03442       8.09077    
   8  0.976315     -0.239695E-01 -0.365432E-02  0.365432E-02   8.01090       8.01455    
   9  0.983892     -0.162393E-01 -0.247580E-02  0.247580E-02   8.03877       8.04124    
  10  0.858769     -0.152255     -0.232123E-01  0.232123E-01   8.05030       8.07351    
  11  0.968889     -0.316048E-01 -0.481838E-02  0.481838E-02   8.06667       8.07148    
  12  0.364921      -1.00807     -0.153688      0.153688       8.03087       8.18456    
  13  0.540930     -0.614466     -0.936798E-01  0.936798E-01   8.06856       8.16224    
  14  0.812278E-01  -2.51050     -0.382743      0.382743       8.03963       8.42237    
  15  0.919841     -0.835539E-01 -0.127384E-01  0.127384E-01   8.06750       8.08024    
  16  0.275462      -1.28930     -0.196564      0.196564       7.89002       8.08658    
  17  0.704362     -0.350463     -0.534307E-01  0.534307E-01   8.04047       8.09390    
  18  0.896809     -0.108913     -0.166045E-01  0.166045E-01   8.07112       8.08773    
  19  0.166873      -1.79052     -0.272978      0.272978       8.02849       8.30147    
  20  0.927791E-02  -4.68012     -0.713518      0.713518       8.08698       8.80050    
  21  0.906733     -0.979074E-01 -0.149267E-01  0.149267E-01   8.06856       8.08348    
  22  0.575421     -0.552654     -0.842560E-01  0.842560E-01   8.06512       8.14938    
  23  0.975069     -0.252469E-01 -0.384908E-02  0.384908E-02   8.09236       8.09620    
  24  0.610094     -0.494143     -0.753356E-01  0.753356E-01   8.10547       8.18081    
  25  0.823028     -0.194765     -0.296933E-01  0.296933E-01   8.06036       8.09005    
  26  0.709022     -0.343869     -0.524252E-01  0.524252E-01   8.09995       8.15238    
  27  0.956893     -0.440633E-01 -0.671777E-02  0.671777E-02   8.06114       8.06786    
  28  0.897850E-01  -2.41034     -0.367473      0.367473       8.15023       8.51771    
  29  0.836996     -0.177936     -0.271277E-01  0.271277E-01   8.07625       8.10338    
  30  0.688664     -0.373001     -0.568668E-01  0.568668E-01   8.09754       8.15440    
  31  0.587454     -0.531957     -0.811007E-01  0.811007E-01   8.05033       8.13143    
  32  0.880970     -0.126731     -0.193211E-01  0.193211E-01   8.10620       8.12552    
  33  0.506724     -0.679789     -0.103639      0.103639       8.03164       8.13528    
  34  0.802262     -0.220320     -0.335893E-01  0.335893E-01   8.04889       8.08248    
  35  0.764787E-01  -2.57074     -0.391928      0.391928       8.06810       8.46003    
  36  0.907101     -0.975014E-01 -0.148648E-01  0.148648E-01   8.18731       8.20217    
  37  0.797350     -0.226461     -0.345257E-01  0.345257E-01   8.14409       8.17862    
  38  0.257375      -1.35722     -0.206918      0.206918       8.11598       8.32290    
  39  0.643190     -0.441315     -0.672816E-01  0.672816E-01   8.17713       8.24441    
  40  0.513768     -0.665984     -0.101534      0.101534       8.05853       8.16006    
  41  0.850264     -0.162208     -0.247298E-01  0.247298E-01   8.11238       8.13711    
  42  0.200819      -1.60535     -0.244747      0.244747       8.01589       8.26063    
  43  0.331940      -1.10280     -0.168130      0.168130       7.98780       8.15593    
  44  0.900490     -0.104816     -0.159800E-01  0.159800E-01   8.09327       8.10925    
  45  0.618957     -0.479719     -0.731367E-01  0.731367E-01   8.16632       8.23945    
  46  0.395756     -0.926956     -0.141321      0.141321       8.06657       8.20790    
  47  0.528166     -0.638345     -0.973203E-01  0.973203E-01   8.04747       8.14479    
  48  0.586635     -0.533352     -0.813133E-01  0.813133E-01   8.22671       8.30802    
  49  0.705559     -0.348765     -0.531717E-01  0.531717E-01   8.04862       8.10179    
  50  0.191018      -1.65539     -0.252376      0.252376       8.16966       8.42204    
  51  0.581133     -0.542775     -0.827499E-01  0.827499E-01   7.97053       8.05328    
  52  0.297529      -1.21224     -0.184815      0.184815       8.07850       8.26332    
  53  0.532486     -0.630198     -0.960782E-01  0.960782E-01   8.13032       8.22640    
  54  0.396084     -0.926129     -0.141195      0.141195       8.10859       8.24979    
  55  0.209334      -1.56382     -0.238416      0.238416       8.08733       8.32574    
  56  0.632068     -0.458758     -0.699410E-01  0.699410E-01   8.08776       8.15770    
  57  0.941424     -0.603613E-01 -0.920251E-02  0.920251E-02   8.11213       8.12133    
  58  0.875379     -0.133099     -0.202919E-01  0.202919E-01   8.08464       8.10493    
  59  0.497903     -0.697350     -0.106316      0.106316       8.09625       8.20256    
  60  0.840483     -0.173779     -0.264938E-01  0.264938E-01   8.08186       8.10835    
  61  0.230101      -1.46924     -0.223996      0.223996       8.03863       8.26262    
  62  0.213210      -1.54548     -0.235619      0.235619       8.09541       8.33103    
  63  0.412073     -0.886554     -0.135161      0.135161       8.11627       8.25143    
  64  0.264912      -1.32836     -0.202518      0.202518       8.04755       8.25007    
  65  0.234943      -1.44841     -0.220821      0.220821       8.11654       8.33736    
  66  0.957879     -0.430340E-01 -0.656084E-02  0.656084E-02   8.05990       8.06646    
  67  0.458250     -0.780340     -0.118968      0.118968       8.05256       8.17153    
  68  0.218142E-01  -3.82520     -0.583179      0.583179       8.32632       8.90950    
  69  0.340067E-01  -3.38120     -0.515488      0.515488       7.98493       8.50041    
  70  0.897872     -0.107728     -0.164239E-01  0.164239E-01   8.08510       8.10152    
loop,thermsimp(1:2)       57  0.181585      0.479878E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    416          7.97          0.87          1.13         24.47          0.07          0.05         26.59
Just calling func    0   0         26.60


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    417          8.31          0.86          1.14         24.51          0.08          0.05         26.64
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.152457               415
loop is:       57
neval is:      416
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       57      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.152457               415
loop is:       58
neval is:      416


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 




neval>tstepnex so lower away!t
---> lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
     new SAtemp,tstepnext are :   0.762286E-01           484

 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      416     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.530208     -0.634486     -0.483660E-01  0.483660E-01   7.93671       7.98508    
   2  0.175946E-01  -4.04016     -0.307976      0.307976       8.01090       8.31888    
   3  0.419998     -0.867504     -0.661286E-01  0.661286E-01   7.99264       8.05877    
   4  0.448197E-01  -3.10511     -0.236698      0.236698       7.99049       8.22718    
   5  0.501784     -0.689586     -0.525662E-01  0.525662E-01   8.03877       8.09133    
   6  0.858173     -0.152949     -0.116591E-01  0.116591E-01   7.97053       7.98219    
   7  0.101932      -2.28345     -0.174064      0.174064       8.05990       8.23397    
   8  0.453268     -0.791273     -0.603176E-01  0.603176E-01   8.06114       8.12146    
   9  0.128092      -2.05501     -0.156650      0.156650       8.06667       8.22332    
  10  0.779644     -0.248918     -0.189746E-01  0.189746E-01   8.05030       8.06928    
  11  0.769943E-01  -2.56402     -0.195452      0.195452       8.06750       8.26296    
  12  0.140214      -1.96458     -0.149757      0.149757       8.04889       8.19865    
  13  0.571588     -0.559337     -0.426375E-01  0.426375E-01   8.06856       8.11119    
  14  0.455096     -0.787247     -0.600107E-01  0.600107E-01   7.89002       7.95003    
  15  0.594240     -0.520471     -0.396748E-01  0.396748E-01   8.07112       8.11080    
  16  0.833288     -0.182376     -0.139022E-01  0.139022E-01   8.06036       8.07426    
  17  0.807090E-01  -2.51691     -0.191860      0.191860       8.03442       8.22628    
  18  0.430313     -0.843242     -0.642791E-01  0.642791E-01   8.04047       8.10475    
  19  0.990463     -0.958277E-02 -0.730481E-03  0.730481E-03   8.09236       8.09309    
  20  0.907906     -0.966144E-01 -0.736478E-02  0.736478E-02   8.02250       8.02986    
  21  0.607469     -0.498455     -0.379965E-01  0.379965E-01   8.08510       8.12309    
  22  0.927102     -0.756916E-01 -0.576987E-02  0.576987E-02   8.04862       8.05439    
  23  0.379122     -0.969896     -0.739338E-01  0.739338E-01   8.07625       8.15018    
  24  0.183121E-01  -4.00019     -0.304929      0.304929       8.08464       8.38957    
  25  0.561966     -0.576313     -0.439315E-01  0.439315E-01   8.08186       8.12579    
  26  0.638772     -0.448208     -0.341662E-01  0.341662E-01   8.09327       8.12743    
  27  0.234202      -1.45157     -0.110651      0.110651       8.11213       8.22278    
  28  0.257221      -1.35782     -0.103505      0.103505       8.10620       8.20970    
  29  0.688379     -0.373416     -0.284650E-01  0.284650E-01   8.05033       8.07880    
  30  0.360237E-01  -3.32358     -0.253352      0.253352       8.03164       8.28499    
  31  0.849177     -0.163487     -0.124624E-01  0.124624E-01   8.11238       8.12484    
  32  0.324868E-01  -3.42692     -0.261229      0.261229       8.04747       8.30870    
  33  0.216483E-01  -3.83283     -0.292171      0.292171       8.06512       8.35730    
  34  0.794095     -0.230552     -0.175746E-01  0.175746E-01   8.09995       8.11753    
  35  0.453180     -0.791465     -0.603322E-01  0.603322E-01   8.09754       8.15787    
  36  0.286278      -1.25079     -0.953461E-01  0.953461E-01   7.97387       8.06921    
  37  0.931500     -0.709590E-01 -0.540911E-02  0.540911E-02   7.98780       7.99321    
  38  0.483424     -0.726861     -0.554076E-01  0.554076E-01   8.08776       8.14316    
  39  0.782276     -0.245547     -0.187177E-01  0.187177E-01   8.05853       8.07725    
  40  0.976661     -0.236156E-01 -0.180018E-02  0.180018E-02   8.06856       8.07036    
  41  0.707981     -0.345338     -0.263246E-01  0.263246E-01   8.05256       8.07888    
  42  0.101993      -2.28285     -0.174019      0.174019       8.14409       8.31811    
  43  0.690974E-01  -2.67224     -0.203701      0.203701       8.10547       8.30917    
  44  0.767576E-01  -2.56710     -0.195687      0.195687       8.03087       8.22656    
  45  0.584825     -0.536443     -0.408923E-01  0.408923E-01   8.18731       8.22820    
  46  0.588828     -0.529621     -0.403723E-01  0.403723E-01   8.09625       8.13662    
  47  0.894562     -0.111421     -0.849346E-02  0.849346E-02   8.06657       8.07507    
  48  0.260723      -1.34430     -0.102474      0.102474       8.13032       8.23279    
  49  0.773456E-01  -2.55947     -0.195105      0.195105       8.04015       8.23526    
  50  0.848651E-01  -2.46669     -0.188032      0.188032       8.16632       8.35435    
  51  0.992803     -0.722305E-02 -0.550603E-03  0.550603E-03   8.17713       8.17768    
  52  0.529202     -0.636386     -0.485108E-01  0.485108E-01   8.10859       8.15710    
  53  0.540374     -0.615494     -0.469183E-01  0.469183E-01   8.04755       8.09447    
  54  0.185914      -1.68247     -0.128252      0.128252       8.11627       8.24452    
  55  0.764153     -0.268988     -0.205046E-01  0.205046E-01   8.01589       8.03639    
  56  0.931974E-01  -2.37304     -0.180893      0.180893       8.03863       8.21952    
  57  0.753946     -0.282434     -0.215296E-01  0.215296E-01   8.07850       8.10003    
  58  0.279731      -1.27393     -0.971095E-01  0.971095E-01   8.02849       8.12560    
  59  0.790083     -0.235617     -0.179608E-01  0.179608E-01   8.22671       8.24467    
  60  0.179541      -1.71735     -0.130911      0.130911       8.11598       8.24689    
  61  0.424504     -0.856835     -0.653153E-01  0.653153E-01   8.08733       8.15264    
  62  0.359861      -1.02204     -0.779084E-01  0.779084E-01   8.09541       8.17332    
  63  0.234475      -1.45041     -0.110562      0.110562       8.11654       8.22710    
  64  0.320303      -1.13849     -0.867853E-01  0.867853E-01   8.16966       8.25645    
  65  0.558182     -0.583071     -0.444467E-01  0.444467E-01   8.03963       8.08407    
  66  0.460702     -0.775003     -0.590774E-01  0.590774E-01   8.06810       8.12718    
  67  0.627136E-01  -2.76918     -0.211090      0.211090       7.98493       8.19602    
  68  0.673665     -0.395022     -0.301120E-01  0.301120E-01   8.15023       8.18035    
  69  0.540500     -0.615261     -0.469005E-01  0.469005E-01   8.08698       8.13388    
  70  0.277195      -1.28303     -0.978038E-01  0.978038E-01   7.97118       8.06898    
loop,thermsimp(1:2)       58  0.483660E-01  0.307976    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    418          7.97          0.86          1.12         24.42          0.06          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    419          8.11          0.86          1.13         24.68          0.02          0.05         26.73
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      7.97
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       58
neval is:      418
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       58      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       59
neval is:      418


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      418     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.946919     -0.545412E-01 -0.415760E-02  0.415760E-02   7.89002       7.89417    
   2  0.224221      -1.49512     -0.113971      0.113971       7.97053       8.08450    
   3  0.699642     -0.357186     -0.272278E-01  0.272278E-01   7.93671       7.96394    
   4  0.490916     -0.711482     -0.542353E-01  0.542353E-01   7.98780       8.04203    
   5  0.204251      -1.58840     -0.121082      0.121082       8.02250       8.14358    
   6  0.356522      -1.03136     -0.786191E-01  0.786191E-01   8.01589       8.09450    
   7  0.745938     -0.293113     -0.223436E-01  0.223436E-01   8.04862       8.07096    
   8  0.451533     -0.795107     -0.606099E-01  0.606099E-01   7.99264       8.05325    
   9  0.101038      -2.29226     -0.174736      0.174736       7.97118       8.14591    
  10  0.826978     -0.189977     -0.144817E-01  0.144817E-01   7.97387       7.98835    
  11  0.212337      -1.54958     -0.118122      0.118122       8.05030       8.16842    
  12  0.490540     -0.712248     -0.542937E-01  0.542937E-01   8.06856       8.12285    
  13  0.672078     -0.397381     -0.302918E-01  0.302918E-01   8.06036       8.09065    
  14  0.690580     -0.370223     -0.282216E-01  0.282216E-01   8.06657       8.09480    
  15  0.513190     -0.667108     -0.508527E-01  0.508527E-01   8.05853       8.10938    
  16  0.268393      -1.31530     -0.100264      0.100264       8.05033       8.15060    
  17  0.896898     -0.108813     -0.829466E-02  0.829466E-02   8.05256       8.06085    
  18  0.911953     -0.921674E-01 -0.702579E-02  0.702579E-02   8.03963       8.04665    
  19  0.355703      -1.03366     -0.787943E-01  0.787943E-01   8.03877       8.11756    
  20  0.293818      -1.22479     -0.933643E-01  0.933643E-01   8.09236       8.18572    
  21  0.713392     -0.337724     -0.257442E-01  0.257442E-01   8.04755       8.07329    
  22  0.660627     -0.414565     -0.316017E-01  0.316017E-01   8.07850       8.11010    
  23  0.795097     -0.229291     -0.174785E-01  0.174785E-01   8.04047       8.05795    
  24  0.919484     -0.839428E-01 -0.639884E-02  0.639884E-02   8.07112       8.07752    
  25  0.976382     -0.239014E-01 -0.182197E-02  0.182197E-02   8.06856       8.07038    
  26  0.922195     -0.809991E-01 -0.617445E-02  0.617445E-02   8.09995       8.10613    
  27  0.436062     -0.829970     -0.632674E-01  0.632674E-01   8.06114       8.12441    
  28  0.271848      -1.30251     -0.992886E-01  0.992886E-01   8.08510       8.18439    
  29  0.389360     -0.943252     -0.719028E-01  0.719028E-01   8.11238       8.18428    
  30  0.314178E-01  -3.46038     -0.263780      0.263780       8.02849       8.29227    
  31  0.545460     -0.606126     -0.462041E-01  0.462041E-01   8.08186       8.12807    
  32  0.925479E-01  -2.38003     -0.181426      0.181426       8.06810       8.24953    
  33  0.971973     -0.284273E-01 -0.216697E-02  0.216697E-02   8.09327       8.09543    
  34  0.403500     -0.907578     -0.691834E-01  0.691834E-01   8.08698       8.15616    
  35  0.392926     -0.934133     -0.712077E-01  0.712077E-01   8.09625       8.16745    
  36  0.718758     -0.330230     -0.251730E-01  0.251730E-01   8.08776       8.11293    
  37  0.746082     -0.292920     -0.223289E-01  0.223289E-01   8.07625       8.09858    
  38  0.353478      -1.03993     -0.792727E-01  0.792727E-01   8.08733       8.16660    
  39  0.843229     -0.170517     -0.129983E-01  0.129983E-01   8.10859       8.12159    
  40  0.388011     -0.946720     -0.721672E-01  0.721672E-01   8.09754       8.16970    
  41  0.969569     -0.309034E-01 -0.235572E-02  0.235572E-02   8.09541       8.09777    
  42  0.441380E-01  -3.12043     -0.237866      0.237866       8.17713       8.41499    
  43  0.533000     -0.629233     -0.479656E-01  0.479656E-01   8.15023       8.19820    
  44  0.288396      -1.24342     -0.947843E-01  0.947843E-01   7.98493       8.07971    
  45  0.683115     -0.381092     -0.290501E-01  0.290501E-01   8.04889       8.07794    
  46  0.339511      -1.08025     -0.823459E-01  0.823459E-01   8.10620       8.18854    
  47  0.150420E-01  -4.19691     -0.319924      0.319924       8.03863       8.35855    
  48  0.141026      -1.95881     -0.149317      0.149317       8.11213       8.26144    
  49  0.421666     -0.863541     -0.658265E-01  0.658265E-01   8.06667       8.13249    
  50  0.953496     -0.476201E-01 -0.363001E-02  0.363001E-02   8.03442       8.03805    
  51  0.966647     -0.339215E-01 -0.258579E-02  0.258579E-02   8.03087       8.03346    
  52  0.365434      -1.00667     -0.767370E-01  0.767370E-01   8.11654       8.19328    
  53  0.314209      -1.15770     -0.882496E-01  0.882496E-01   7.99049       8.07874    
  54  0.612536     -0.490148     -0.373633E-01  0.373633E-01   8.18731       8.22467    
  55  0.962603     -0.381139E-01 -0.290537E-02  0.290537E-02   8.13032       8.13322    
  56  0.518973     -0.655904     -0.499986E-01  0.499986E-01   8.05990       8.10990    
  57  0.963657     -0.370202E-01 -0.282200E-02  0.282200E-02   8.04015       8.04297    
  58  0.423866     -0.858338     -0.654299E-01  0.654299E-01   8.11627       8.18170    
  59  0.195959      -1.62985     -0.124241      0.124241       8.22671       8.35095    
  60  0.108838      -2.21789     -0.169067      0.169067       8.11598       8.28505    
  61  0.196446      -1.62737     -0.124052      0.124052       8.16966       8.29371    
  62  0.950303     -0.509747E-01 -0.388573E-02  0.388573E-02   8.06750       8.07139    
  63  0.363538      -1.01187     -0.771336E-01  0.771336E-01   8.03164       8.10877    
  64  0.834223     -0.181254     -0.138168E-01  0.138168E-01   8.04747       8.06129    
  65  0.529644     -0.635549     -0.484470E-01  0.484470E-01   8.10547       8.15392    
  66  0.944564     -0.570321E-01 -0.434748E-02  0.434748E-02   8.14409       8.14844    
  67  0.534482     -0.626456     -0.477539E-01  0.477539E-01   8.01090       8.05865    
  68  0.238252      -1.43443     -0.109344      0.109344       8.16632       8.27566    
  69  0.335731      -1.09145     -0.831993E-01  0.831993E-01   8.06512       8.14832    
  70  0.396637     -0.924734     -0.704911E-01  0.704911E-01   7.97135       8.04185    
loop,thermsimp(1:2)       59  0.415760E-02  0.113971    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    420          8.49          0.86          1.13         24.45          0.08          0.05         26.58
Just calling func    0   0         26.58


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    421          8.21          0.86          1.13         24.33          0.08          0.05         26.45
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds

  420    8.2146        1.135     -1.881      3.295     -102.6      1.381    
                      0.3684      1.364     -99.70      3.711     0.8471E-01

                       2.270     -1.042      1.530      6816.      3286.    

                     -0.1838      0.000      0.000      0.000     -1.221    



                     -0.5000      0.000      0.000      6216.      471.8    

                       1.433     -5.820     -4.447     -8.561      6.674    

                      -15.08     -3.576      7615.      0.000     0.1025E+05



                       1371.     0.1738E+05 -3035.      8119.      4378.    

                       5614.     0.2762E-01 0.1890     0.7082E-02 0.1190    

                     -0.2486    -0.8813E-01 0.1984     0.1257     0.6231E-01



                     -0.4946    -0.7978      0.000     0.1013    -0.6297E-01

                      0.1846E-01 0.1167    -0.7116    -0.1420     0.4467E-01

                      0.4898E-01 0.1251    -0.6597     -1.226      6937.    



                      -1.060     -1.233     -2.227     -2.313    -0.3807    

                     -0.3252      9.215      8.677    -0.1882E+05 -4.000    

                     -0.5681     -2.155      9.289      8.873    -0.1908E+05



                      -4.000     0.4935    -0.4608      8.856      9.076    

                     -0.1908E+05 -7.000    -0.7354    -0.6401      9.025    

                       8.745    -0.1908E+05 -7.000    
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       3      8.21
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
 ----------------> IF (hstst<hstar) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ----------------> ELSE - return the better of pstar and the original point, which is here pstar
 ----------------------------> mycase(myrank+1)=4, mypoint..pstar, myval..hstar
 ---> ELSE  ther original point of the simplex is better than pstar 
 ----------------> IF (hstst-thermstst(myrank+1)<htherm(myimax)) THEN ! case 3 - return the contraction point
 ----------------------------> mycase(myrank+1)=3, mypoint..pstst, myval..hstst
 ---------------->ELSE ! case 4 - return the better of pstar and the original point of the simplex,here g(myimax,:)
 ----------------------------> mycase(myrank+1)=4, mypoint..g(myimax,:), myval..h(myimax)


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       59
neval is:      420
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       59      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       60
neval is:      420


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      420     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.347122      -1.05808     -0.806559E-01  0.806559E-01   7.89002       7.97067    
   2  0.605757     -0.501276     -0.382116E-01  0.382116E-01   7.93671       7.97493    
   3  0.690633     -0.370146     -0.282157E-01  0.282157E-01   7.97387       8.00208    
   4  0.400665     -0.914628     -0.697208E-01  0.697208E-01   8.03087       8.10059    
   5  0.862165     -0.148309     -0.113054E-01  0.113054E-01   8.03442       8.04572    
   6  0.874011     -0.134662     -0.102651E-01  0.102651E-01   7.97135       7.98162    
   7  0.389525     -0.942826     -0.718703E-01  0.718703E-01   7.98780       8.05967    
   8  0.102225E-01  -4.58317     -0.349368      0.349368       8.04015       8.38952    
   9  0.102697      -2.27597     -0.173494      0.173494       8.03963       8.21312    
  10  0.818271     -0.200561     -0.152885E-01  0.152885E-01   7.99264       8.00792    
  11  0.888768     -0.117920     -0.898884E-02  0.898884E-02   8.04047       8.04946    
  12  0.539210     -0.617651     -0.470827E-01  0.470827E-01   8.01090       8.05798    
  13  0.317914      -1.14597     -0.873560E-01  0.873560E-01   8.05256       8.13991    
  14  0.437422     -0.826857     -0.630301E-01  0.630301E-01   8.04747       8.11050    
  15  0.925263     -0.776773E-01 -0.592123E-02  0.592123E-02   8.06856       8.07448    
  16  0.422436     -0.861717     -0.656875E-01  0.656875E-01   8.04862       8.11430    
  17  0.965248     -0.353697E-01 -0.269618E-02  0.269618E-02   8.06750       8.07020    
  18  0.771278     -0.259706     -0.197970E-01  0.197970E-01   8.04755       8.06735    
  19  0.902488     -0.102600     -0.782106E-02  0.782106E-02   8.07112       8.07894    
  20  0.512816     -0.667839     -0.509084E-01  0.509084E-01   8.04889       8.09980    
  21  0.915966     -0.877758E-01 -0.669102E-02  0.669102E-02   7.99049       7.99718    
  22  0.612605     -0.490035     -0.373547E-01  0.373547E-01   7.98493       8.02228    
  23  0.323528      -1.12847     -0.860216E-01  0.860216E-01   7.97053       8.05655    
  24  0.206646      -1.57675     -0.120193      0.120193       8.06036       8.18055    
  25  0.481057     -0.731769     -0.557817E-01  0.557817E-01   8.01589       8.07167    
  26  0.287887E-01  -3.54777     -0.270442      0.270442       8.06657       8.33702    
  27  0.996968     -0.303648E-02 -0.231467E-03  0.231467E-03   8.09327       8.09350    
  28  0.132770      -2.01914     -0.153916      0.153916       8.09541       8.24933    
  29  0.716038     -0.334023     -0.254621E-01  0.254621E-01   8.07625       8.10171    
  30  0.229552      -1.47162     -0.112180      0.112180       8.09995       8.21213    
  31  0.236358      -1.44241     -0.109953      0.109953       8.03164       8.14159    
  32  0.542780     -0.611051     -0.465795E-01  0.465795E-01   8.05853       8.10511    
  33  0.875156     -0.133353     -0.101653E-01  0.101653E-01   8.05990       8.07007    
  34  0.988730     -0.113343E-01 -0.863999E-03  0.863999E-03   8.07850       8.07936    
  35  0.244332      -1.40923     -0.107423      0.107423       8.08776       8.19518    
  36  0.659246     -0.416659     -0.317613E-01  0.317613E-01   8.03877       8.07053    
  37  0.457872     -0.781166     -0.595472E-01  0.595472E-01   8.10859       8.16814    
  38  0.380652E-01  -3.26846     -0.249150      0.249150       8.06856       8.31771    
  39  0.358843      -1.02487     -0.781243E-01  0.781243E-01   8.06114       8.13926    
  40  0.846233     -0.166960     -0.127271E-01  0.127271E-01   8.08186       8.09459    
  41  0.359308      -1.02358     -0.780258E-01  0.780258E-01   8.06667       8.14469    
  42  0.533329     -0.628617     -0.479186E-01  0.479186E-01   8.13032       8.17824    
  43  0.645289     -0.438058     -0.333925E-01  0.333925E-01   8.02250       8.05589    
  44  0.311850      -1.16523     -0.888240E-01  0.888240E-01   7.97118       8.06000    
  45  0.270084      -1.30902     -0.997848E-01  0.997848E-01   8.06512       8.16491    
  46  0.530313     -0.634287     -0.483508E-01  0.483508E-01   8.14409       8.19244    
  47  0.975874     -0.244213E-01 -0.186160E-02  0.186160E-02   8.05033       8.05220    
  48  0.313811      -1.15896     -0.883463E-01  0.883463E-01   8.10547       8.19382    
  49  0.932688     -0.696844E-01 -0.531194E-02  0.531194E-02   8.08698       8.09229    
  50  0.357359      -1.02901     -0.784403E-01  0.784403E-01   8.08733       8.16577    
  51  0.545837     -0.605435     -0.461514E-01  0.461514E-01   8.09625       8.14240    
  52  0.954982     -0.460626E-01 -0.351129E-02  0.351129E-02   8.05030       8.05381    
  53  0.470912     -0.753083     -0.574065E-01  0.574065E-01   8.09754       8.15494    
  54  0.719568     -0.329104     -0.250871E-01  0.250871E-01   8.11627       8.14135    
  55  0.859620     -0.151265     -0.115307E-01  0.115307E-01   8.11238       8.12391    
  56  0.544817     -0.607304     -0.462940E-01  0.462940E-01   8.08510       8.13139    
  57  0.505571E-02  -5.28724     -0.403039      0.403039       8.09236       8.49539    
  58  0.412350     -0.885884     -0.675297E-01  0.675297E-01   8.10620       8.17373    
  59  0.335424      -1.09236     -0.832691E-01  0.832691E-01   8.11654       8.19981    
  60  0.908603     -0.958472E-01 -0.730630E-02  0.730630E-02   8.15023       8.15754    
  61  0.434554     -0.833434     -0.635315E-01  0.635315E-01   8.18731       8.25084    
  62  0.801863     -0.220817     -0.168326E-01  0.168326E-01   8.06810       8.08493    
  63  0.567796     -0.565993     -0.431449E-01  0.431449E-01   8.11213       8.15527    
  64  0.818165     -0.200691     -0.152984E-01  0.152984E-01   8.16632       8.18162    
  65  0.490355     -0.712626     -0.543225E-01  0.543225E-01   8.11598       8.17030    
  66  0.971730     -0.286771E-01 -0.218601E-02  0.218601E-02   8.02849       8.03067    
  67  0.373659     -0.984411     -0.750402E-01  0.750402E-01   8.16966       8.24470    
  68  0.179333      -1.71851     -0.131000      0.131000       8.22671       8.35771    
  69  0.352089      -1.04387     -0.795729E-01  0.795729E-01   8.03863       8.11820    
  70  0.247178      -1.39765     -0.106541      0.106541       8.21464       8.32118    
loop,thermsimp(1:2)       60  0.806559E-01  0.382116E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    422          8.03          0.86          1.12         24.30          0.07          0.05         26.41
Just calling func    0   0         26.41


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    423         14.46          0.86          1.12         24.41          0.07          0.05         26.52
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.03
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       60
neval is:      422
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       60      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       61
neval is:      422


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      422     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.663917     -0.409597     -0.312230E-01  0.312230E-01   7.89002       7.92124    
   2  0.718953     -0.329960     -0.251523E-01  0.251523E-01   7.93671       7.96187    
   3  0.454275     -0.789053     -0.601484E-01  0.601484E-01   7.97135       8.03150    
   4  0.253407E-01  -3.67534     -0.280166      0.280166       7.99049       8.27065    
   5  0.611947     -0.491110     -0.374366E-01  0.374366E-01   7.97387       8.01130    
   6  0.234016      -1.45237     -0.110712      0.110712       7.99264       8.10335    
   7  0.359481E-01  -3.32568     -0.253512      0.253512       7.98493       8.23844    
   8  0.222118E-01  -3.80713     -0.290212      0.290212       8.02849       8.31870    
   9  0.905838E-01  -2.40148     -0.183061      0.183061       8.03442       8.21748    
  10  0.791683     -0.233594     -0.178065E-01  0.178065E-01   8.04047       8.05828    
  11  0.557734     -0.583873     -0.445078E-01  0.445078E-01   8.05033       8.09484    
  12  0.936048E-01  -2.36867     -0.180561      0.180561       8.05030       8.23086    
  13  0.431059     -0.841510     -0.641471E-01  0.641471E-01   8.02250       8.08665    
  14  0.225758      -1.48829     -0.113450      0.113450       7.97053       8.08398    
  15  0.275181E-01  -3.59291     -0.273883      0.273883       8.01090       8.28478    
  16  0.802517     -0.220002     -0.167705E-01  0.167705E-01   7.98780       8.00457    
  17  0.423872     -0.858323     -0.654287E-01  0.654287E-01   7.97118       8.03661    
  18  0.300971      -1.20074     -0.915308E-01  0.915308E-01   8.04755       8.13908    
  19  0.479556     -0.734895     -0.560200E-01  0.560200E-01   8.05990       8.11592    
  20  0.621838     -0.475076     -0.362144E-01  0.362144E-01   8.06750       8.10372    
  21  0.397654     -0.922172     -0.702959E-01  0.702959E-01   8.03877       8.10906    
  22  0.664976     -0.408004     -0.311016E-01  0.311016E-01   8.01589       8.04699    
  23  0.288358      -1.24355     -0.947942E-01  0.947942E-01   8.06856       8.16335    
  24  0.442017     -0.816406     -0.622335E-01  0.622335E-01   8.07112       8.13336    
  25  0.150763E-01  -4.19463     -0.319751      0.319751       8.07850       8.39825    
  26  0.600886     -0.509350     -0.388271E-01  0.388271E-01   8.06810       8.10693    
  27  0.162927      -1.81446     -0.138313      0.138313       8.08698       8.22529    
  28  0.932743     -0.696251E-01 -0.530743E-02  0.530743E-02   8.09327       8.09857    
  29  0.997186     -0.281799E-02 -0.214812E-03  0.214812E-03   8.08186       8.08208    
  30  0.418339     -0.871463     -0.664304E-01  0.664304E-01   8.04889       8.11533    
  31  0.694800     -0.364132     -0.277572E-01  0.277572E-01   8.03087       8.05863    
  32  0.852711     -0.159334     -0.121458E-01  0.121458E-01   8.07625       8.08840    
  33  0.624847     -0.470249     -0.358464E-01  0.358464E-01   8.05853       8.09438    
  34  0.427649     -0.849453     -0.647526E-01  0.647526E-01   8.04747       8.11222    
  35  0.149871      -1.89798     -0.144681      0.144681       8.04862       8.19330    
  36  0.563430     -0.573713     -0.437333E-01  0.437333E-01   8.03863       8.08236    
  37  0.860100     -0.150706     -0.114881E-01  0.114881E-01   8.11238       8.12386    
  38  0.867090E-01  -2.44520     -0.186394      0.186394       8.08510       8.27149    
  39  0.847848     -0.165054     -0.125818E-01  0.125818E-01   8.06114       8.07372    
  40  0.782599E-01  -2.54772     -0.194209      0.194209       8.05256       8.24677    
  41  0.697889E-01  -2.66228     -0.202942      0.202942       8.11627       8.31921    
  42  0.422765     -0.860939     -0.656281E-01  0.656281E-01   8.03164       8.09727    
  43  0.158365      -1.84286     -0.140478      0.140478       8.09625       8.23673    
  44  0.518935     -0.655976     -0.500041E-01  0.500041E-01   8.06667       8.11667    
  45  0.430406     -0.843027     -0.642628E-01  0.642628E-01   8.09754       8.16180    
  46  0.639805     -0.446592     -0.340431E-01  0.340431E-01   8.11213       8.14617    
  47  0.830453E-01  -2.48837     -0.189685      0.189685       8.15023       8.33992    
  48  0.639384     -0.447250     -0.340932E-01  0.340932E-01   8.06512       8.09922    
  49  0.833791     -0.181773     -0.138563E-01  0.138563E-01   8.08733       8.10118    
  50  0.453972     -0.789720     -0.601992E-01  0.601992E-01   8.10859       8.16879    
  51  0.542088     -0.612327     -0.466768E-01  0.466768E-01   8.11598       8.16266    
  52  0.271321      -1.30445     -0.994365E-01  0.994365E-01   8.10620       8.20563    
  53  0.176790      -1.73279     -0.132088      0.132088       8.13032       8.26241    
  54  0.511778     -0.669865     -0.510629E-01  0.510629E-01   8.06036       8.11142    
  55  0.632948     -0.457366     -0.348644E-01  0.348644E-01   8.16632       8.20118    
  56  0.252444      -1.37657     -0.104934      0.104934       8.14409       8.24903    
  57  0.726388     -0.319671     -0.243681E-01  0.243681E-01   8.10547       8.12984    
  58  0.483977     -0.725718     -0.553204E-01  0.553204E-01   8.08776       8.14308    
  59  0.497846     -0.697465     -0.531668E-01  0.531668E-01   8.11654       8.16970    
  60  0.369093     -0.996706     -0.759775E-01  0.759775E-01   8.09995       8.17593    
  61  0.225129      -1.49108     -0.113663      0.113663       8.03963       8.15329    
  62  0.908331E-01  -2.39873     -0.182852      0.182852       8.16966       8.35251    
  63  0.196370      -1.62776     -0.124082      0.124082       8.09541       8.21949    
  64  0.448748     -0.801293     -0.610814E-01  0.610814E-01   8.18731       8.24839    
  65  0.175426      -1.74054     -0.132679      0.132679       8.06856       8.20124    
  66  0.399277     -0.918099     -0.699854E-01  0.699854E-01   8.21464       8.28462    
  67  0.417464     -0.873557     -0.665900E-01  0.665900E-01   8.06657       8.13316    
  68  0.593993     -0.520889     -0.397066E-01  0.397066E-01   8.22671       8.26641    
  69  0.718485     -0.330610     -0.252020E-01  0.252020E-01   8.04015       8.06535    
  70  0.294519      -1.22241     -0.931828E-01  0.931828E-01   8.02751       8.12069    
loop,thermsimp(1:2)       61  0.312230E-01  0.251523E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    424          8.02          0.86          1.12         24.34          0.08          0.05         26.45
Just calling func    0   0         26.45


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.02
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       61
neval is:      423
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       61      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       62
neval is:      423


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      423     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.985932     -0.141675E-01 -0.107997E-02  0.107997E-02   7.89002       7.89110    
   2  0.420912     -0.865330     -0.659629E-01  0.659629E-01   7.93671       8.00268    
   3  0.617210     -0.482545     -0.367838E-01  0.367838E-01   7.98780       8.02458    
   4  0.787846     -0.238453     -0.181770E-01  0.181770E-01   7.97387       7.99204    
   5  0.608770     -0.496315     -0.378334E-01  0.378334E-01   7.97135       8.00919    
   6  0.925975     -0.769083E-01 -0.586261E-02  0.586261E-02   7.97118       7.97704    
   7  0.545822     -0.605462     -0.461535E-01  0.461535E-01   8.01589       8.06204    
   8  0.240142      -1.42653     -0.108742      0.108742       8.04047       8.14921    
   9  0.800257     -0.222822     -0.169854E-01  0.169854E-01   8.03087       8.04785    
  10  0.250149      -1.38570     -0.105630      0.105630       8.04015       8.14578    
  11  0.814044     -0.205741     -0.156834E-01  0.156834E-01   8.06114       8.07682    
  12  0.897552     -0.108084     -0.823909E-02  0.823909E-02   8.08186       8.09010    
  13  0.807530     -0.213775     -0.162958E-01  0.162958E-01   8.03863       8.05492    
  14  0.369031     -0.996874     -0.759903E-01  0.759903E-01   7.97053       8.04652    
  15  0.892620     -0.113594     -0.865912E-02  0.865912E-02   8.02250       8.03116    
  16  0.992736     -0.729054E-02 -0.555748E-03  0.555748E-03   8.07625       8.07681    
  17  0.264259      -1.33083     -0.101447      0.101447       8.05853       8.15998    
  18  0.164586      -1.80432     -0.137541      0.137541       8.05033       8.18787    
  19  0.594739     -0.519633     -0.396109E-01  0.396109E-01   8.03164       8.07125    
  20  0.766319     -0.266156     -0.202887E-01  0.202887E-01   8.09327       8.11356    
  21  0.392663     -0.934804     -0.712588E-01  0.712588E-01   8.06512       8.13638    
  22  0.900399     -0.104917     -0.799771E-02  0.799771E-02   8.08733       8.09532    
  23  0.853164E-01  -2.46139     -0.187628      0.187628       7.99264       8.18026    
  24  0.753181     -0.283450     -0.216070E-01  0.216070E-01   8.06750       8.08911    
  25  0.801958     -0.220699     -0.168235E-01  0.168235E-01   8.06810       8.08492    
  26  0.840206     -0.174108     -0.132720E-01  0.132720E-01   8.03877       8.05204    
  27  0.899787     -0.105597     -0.804954E-02  0.804954E-02   8.06036       8.06841    
  28  0.555629     -0.587654     -0.447960E-01  0.447960E-01   8.04747       8.09227    
  29  0.117481E-01  -4.44406     -0.338765      0.338765       8.04889       8.38766    
  30  0.228476      -1.47632     -0.112538      0.112538       8.05990       8.17244    
  31  0.121877      -2.10474     -0.160442      0.160442       8.06667       8.22711    
  32  0.475375     -0.743652     -0.566875E-01  0.566875E-01   8.02751       8.08419    
  33  0.208734      -1.56669     -0.119427      0.119427       8.11238       8.23180    
  34  0.680231     -0.385322     -0.293726E-01  0.293726E-01   8.10547       8.13485    
  35  0.211647      -1.55284     -0.118371      0.118371       8.06657       8.18494    
  36  0.982763     -0.173870E-01 -0.132539E-02  0.132539E-02   8.07112       8.07245    
  37  0.819904     -0.198568     -0.151366E-01  0.151366E-01   8.04755       8.06269    
  38  0.282339      -1.26465     -0.964023E-01  0.964023E-01   8.08776       8.18416    
  39  0.391986     -0.936529     -0.713903E-01  0.713903E-01   8.11213       8.18352    
  40  0.218050      -1.52303     -0.116099      0.116099       8.03963       8.15573    
  41  0.236244      -1.44289     -0.109990      0.109990       8.09754       8.20753    
  42  0.544673     -0.607570     -0.463142E-01  0.463142E-01   8.11598       8.16229    
  43  0.721937     -0.325818     -0.248366E-01  0.248366E-01   8.06856       8.09339    
  44  0.649728     -0.431202     -0.328699E-01  0.328699E-01   8.10859       8.14146    
  45  0.641823     -0.443443     -0.338030E-01  0.338030E-01   8.11654       8.15034    
  46  0.597293     -0.515347     -0.392842E-01  0.392842E-01   8.09995       8.13924    
  47  0.467405     -0.760558     -0.579763E-01  0.579763E-01   8.04862       8.10659    
  48  0.676900     -0.390232     -0.297468E-01  0.297468E-01   8.16632       8.19606    
  49  0.925913     -0.769750E-01 -0.586770E-02  0.586770E-02   8.06856       8.07443    
  50  0.692551     -0.367374     -0.280044E-01  0.280044E-01   8.10620       8.13420    
  51  0.161390      -1.82393     -0.139036      0.139036       8.03442       8.17345    
  52  0.513279     -0.666936     -0.508396E-01  0.508396E-01   8.09541       8.14625    
  53  0.379540     -0.968796     -0.738500E-01  0.738500E-01   8.08698       8.16083    
  54  0.557165     -0.584894     -0.445856E-01  0.445856E-01   8.05030       8.09489    
  55  0.459054     -0.778587     -0.593506E-01  0.593506E-01   8.09625       8.15560    
  56  0.466253     -0.763026     -0.581644E-01  0.581644E-01   7.98493       8.04309    
  57  0.635692E-01  -2.75563     -0.210058      0.210058       8.05256       8.26262    
  58  0.591279     -0.525467     -0.400556E-01  0.400556E-01   8.18731       8.22736    
  59  0.344168      -1.06663     -0.813074E-01  0.813074E-01   8.14409       8.22540    
  60  0.119291      -2.12619     -0.162076      0.162076       8.13032       8.29240    
  61  0.399057E-01  -3.22124     -0.245550      0.245550       8.22671       8.47226    
  62  0.737545     -0.304428     -0.232061E-01  0.232061E-01   7.99049       8.01369    
  63  0.855773     -0.155750     -0.118726E-01  0.118726E-01   8.08510       8.09697    
  64  0.604062E-01  -2.80666     -0.213948      0.213948       8.21464       8.42859    
  65  0.659236     -0.416674     -0.317625E-01  0.317625E-01   8.01090       8.04266    
  66  0.738818     -0.302704     -0.230747E-01  0.230747E-01   8.02849       8.05156    
  67  0.577372     -0.549268     -0.418699E-01  0.418699E-01   8.11627       8.15814    
  68  0.219220      -1.51768     -0.115691      0.115691       8.15023       8.26592    
  69  0.318915      -1.14283     -0.871165E-01  0.871165E-01   8.16966       8.25678    
  70  0.599810     -0.511142     -0.389636E-01  0.389636E-01   8.01784       8.05680    
loop,thermsimp(1:2)       62  0.107997E-02  0.659629E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    425          8.28          0.87          1.12         24.41          0.07          0.05         26.52
Just calling func    0   0         26.52


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       2      8.28
 mycase(ii+1)=2: hstar-thermstar(myrank+1) > htherm(1) BUT  hstar-thermstar(myrank+1)<htherm(np1-myrank-1) i.e hstar<htherm(np1-1) or (np1-2) ... (np1-myrank-1) .. etc
 mycase(ii+1)=2: hstar > hmi but lower than htherm(myimax-1) 
 nonparal: hstar is not <hmin. but lower than some point, replace p(imax) with pstar and hmax with hstar
 nonparal: note that in nonparallel version it's different, it doesn't sort the objvalue array and it compares hstar to aNY point other than imax
  ---> do nothing and just return the reflection point pstar i.e. mycase(..)=2,mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar.
  ---> Note that this is the only case in which the processor does not do an extra function call


  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       62
neval is:      424
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       62      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       63
neval is:      424


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      424     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.984982     -0.151315E-01 -0.115345E-02  0.115345E-02   7.89002       7.89117    
   2  0.760415     -0.273890     -0.208783E-01  0.208783E-01   7.97118       7.99206    
   3  0.328612      -1.11288     -0.848330E-01  0.848330E-01   7.97387       8.05870    
   4  0.164880      -1.80254     -0.137405      0.137405       7.93671       8.07412    
   5  0.706606     -0.347282     -0.264728E-01  0.264728E-01   7.97135       7.99783    
   6  0.832070     -0.183839     -0.140138E-01  0.140138E-01   7.99049       8.00450    
   7  0.231505      -1.46315     -0.111534      0.111534       7.98780       8.09933    
   8  0.802671E-01  -2.52240     -0.192279      0.192279       8.02250       8.21478    
   9  0.116349      -2.15116     -0.163980      0.163980       8.01090       8.17488    
  10  0.874222     -0.134421     -0.102467E-01  0.102467E-01   7.98493       7.99517    
  11  0.729333     -0.315625     -0.240597E-01  0.240597E-01   7.97053       7.99459    
  12  0.301675      -1.19841     -0.913528E-01  0.913528E-01   8.03087       8.12222    
  13  0.496896     -0.699375     -0.533123E-01  0.533123E-01   8.02849       8.08180    
  14  0.692174     -0.367918     -0.280459E-01  0.280459E-01   8.03877       8.06681    
  15  0.717718     -0.331678     -0.252834E-01  0.252834E-01   8.03863       8.06391    
  16  0.867334E-01  -2.44492     -0.186372      0.186372       8.01784       8.20421    
  17  0.762934     -0.270584     -0.206262E-01  0.206262E-01   8.01589       8.03651    
  18  0.966741     -0.338246E-01 -0.257840E-02  0.257840E-02   8.04755       8.05013    
  19  0.375386     -0.979801     -0.746889E-01  0.746889E-01   8.06036       8.13505    
  20  0.878716     -0.129293     -0.985583E-02  0.985583E-02   8.03164       8.04149    
  21  0.238969      -1.43142     -0.109115      0.109115       8.07112       8.18024    
  22  0.939578     -0.623249E-01 -0.475094E-02  0.475094E-02   8.06856       8.07331    
  23  0.694828     -0.364091     -0.277541E-01  0.277541E-01   8.07625       8.10400    
  24  0.869149     -0.140241     -0.106903E-01  0.106903E-01   8.06114       8.07183    
  25  0.310010      -1.17115     -0.892752E-01  0.892752E-01   8.02751       8.11678    
  26  0.831753     -0.184219     -0.140428E-01  0.140428E-01   8.06810       8.08214    
  27  0.621050     -0.476344     -0.363110E-01  0.363110E-01   8.06750       8.10381    
  28  0.902274     -0.102837     -0.783914E-02  0.783914E-02   8.08186       8.08970    
  29  0.341345      -1.07486     -0.819353E-01  0.819353E-01   8.04747       8.12941    
  30  0.718647     -0.330385     -0.251848E-01  0.251848E-01   8.06856       8.09374    
  31  0.489532     -0.714305     -0.544504E-01  0.544504E-01   8.05030       8.10475    
  32  0.387793     -0.947282     -0.722100E-01  0.722100E-01   8.08733       8.15954    
  33  0.576785     -0.550285     -0.419475E-01  0.419475E-01   8.08510       8.12705    
  34  0.454048     -0.789552     -0.601865E-01  0.601865E-01   8.04862       8.10880    
  35  0.532728     -0.629744     -0.480045E-01  0.480045E-01   8.09327       8.14127    
  36  0.459832     -0.776895     -0.592216E-01  0.592216E-01   8.10620       8.16542    
  37  0.784910     -0.242187     -0.184615E-01  0.184615E-01   8.10547       8.12394    
  38  0.842297     -0.171622     -0.130825E-01  0.130825E-01   8.06512       8.07821    
  39  0.967556     -0.329823E-01 -0.251420E-02  0.251420E-02   8.09995       8.10247    
  40  0.126414      -2.06819     -0.157655      0.157655       8.10859       8.26625    
  41  0.407002     -0.898938     -0.685248E-01  0.685248E-01   8.04015       8.10868    
  42  0.903435     -0.101551     -0.774112E-02  0.774112E-02   8.09541       8.10315    
  43  0.430116     -0.843701     -0.643141E-01  0.643141E-01   8.04047       8.10478    
  44  0.675859     -0.391771     -0.298642E-01  0.298642E-01   8.11654       8.14640    
  45  0.444470     -0.810872     -0.618116E-01  0.618116E-01   8.09625       8.15806    
  46  0.728661     -0.316547     -0.241299E-01  0.241299E-01   8.03963       8.06376    
  47  0.143617      -1.94060     -0.147929      0.147929       8.11627       8.26420    
  48  0.729467E-01  -2.61803     -0.199568      0.199568       8.05853       8.25810    
  49  0.720547     -0.327745     -0.249835E-01  0.249835E-01   8.08698       8.11196    
  50  0.742905     -0.297187     -0.226541E-01  0.226541E-01   8.11598       8.13863    
  51  0.807330     -0.214023     -0.163147E-01  0.163147E-01   8.05990       8.07622    
  52  0.387442     -0.948190     -0.722792E-01  0.722792E-01   8.03442       8.10670    
  53  0.207045      -1.57482     -0.120046      0.120046       7.99264       8.11268    
  54  0.823983     -0.193606     -0.147583E-01  0.147583E-01   8.11213       8.12688    
  55  0.950173E-01  -2.35370     -0.179419      0.179419       8.08776       8.26718    
  56  0.662008     -0.412478     -0.314426E-01  0.314426E-01   8.06657       8.09802    
  57  0.640494E-01  -2.74810     -0.209484      0.209484       8.05033       8.25982    
  58  0.772515     -0.258104     -0.196749E-01  0.196749E-01   8.16632       8.18599    
  59  0.204175      -1.58878     -0.121110      0.121110       8.09754       8.21865    
  60  0.193223      -1.64391     -0.125313      0.125313       8.14409       8.26941    
  61  0.846602     -0.166525     -0.126939E-01  0.126939E-01   8.06667       8.07936    
  62  0.699262E-01  -2.66031     -0.202792      0.202792       8.18731       8.39010    
  63  0.581483     -0.542173     -0.413291E-01  0.413291E-01   8.11238       8.15371    
  64  0.497263     -0.698636     -0.532561E-01  0.532561E-01   8.16966       8.22292    
  65  0.912190     -0.919065E-01 -0.700590E-02  0.700590E-02   8.05256       8.05956    
  66  0.486665     -0.720179     -0.548982E-01  0.548982E-01   8.15023       8.20513    
  67  0.635633     -0.453135     -0.345418E-01  0.345418E-01   8.13032       8.16486    
  68  0.217422      -1.52591     -0.116318      0.116318       8.04889       8.16521    
  69  0.214720E-01  -3.84101     -0.292794      0.292794       8.21464       8.50743    
  70  0.256495      -1.36065     -0.103720      0.103720       8.27926       8.38298    
loop,thermsimp(1:2)       63  0.115345E-02  0.208783E-01

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    426          8.01          0.86          1.12         24.32          0.08          0.05         26.44
Just calling func    0   0         26.44


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    427          8.74          0.86          1.13         24.35          0.07          0.05         26.46
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       1      8.01
 mycase(ii+1)=1: hstar-thermstar(myrank+1) < htherm(1) where htherm(1) is the minimum
 nonparal: hstar < hmin. reflection did well i.e. hstar is lower than the current min (htherm(1))
  ---> expand further i.e. expand pbar in the direction of pstar --> call it pstst
  ---> call functn to get h at expansion pt pstst and call it hstst: PSTST,HSTST
  -------------> if hstst<hstar then return expansion point (pstst) i.e. mypoint(myrank+1,:)=pstst,myval(myrank+1)=hstst
  -------------> if hstst>=hstar then return reflection point (pstar) i.e. mypoint(myrank+1,:)=pstar,myval(myrank+1)=hstar



  myrank  mycase     myval
       0    ****      0.00




 CHECK cases
 -----IF at least one proces did not have case 4, then replace worst points and restart loop
 -----IF all processes had case 4, then shrink
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       63
neval is:      426
 ............
 ............
 ............
 ............
 At least one process did not have case 4 ---> replace the worst nprocs points of simplex with mypoint(1:nprocs) and restart loop
 -----> g(np1-nprocs+1:np1,:)=mypoint(1:nprocs,:)
 -----> h(np1-nprocs+1:np1)=myval(1:nprocs)
 -----> go to 250 (which starts main cycle if loop<nloop)
        loop,nloop are:       63      95
 right before GO TO 250



beginning of Main_loop, just augmented loop: loop=loop+1
T0,tstep,tfreq (these do not change):    2.43931      0.500000    
T0,tstep,tfreq (these do not change):             69
current SAtemp,tstepnext are:   0.762286E-01           484
loop is:       64
neval is:      426


Should I lower temperature?
check: neval>tstepnext?
---if yes: lower temp and get the new temp as SAtemp=SAtemp*Tstep and new tstepnext as tstepnext=tstepnext+Tfreq : 
---if no:  leave SAtemp and tstepnext as they are  lower temp and get the new temp as SAtemp=SAtemp*Tstep: 


 After checking wtr I should lower temperature i.e. out of the neval>tstepnext if statement 
next time, will lower temprature when neval>tstepnext:      484
neval,tstepnext:      426     484

compute and add thermal fluctuations: thermsimp,thermstar,thermstst 


   i      SArandom   logSArandom    SAtemp*log     thermsimp      h       htherm=h+thermsimp
   1  0.964311     -0.363416E-01 -0.277027E-02  0.277027E-02   7.89002       7.89279    
   2  0.186231      -1.68077     -0.128122      0.128122       7.97118       8.09930    
   3  0.127308      -2.06115     -0.157118      0.157118       7.97053       8.12765    
   4  0.305661      -1.18528     -0.903522E-01  0.903522E-01   7.98493       8.07528    
   5  0.685804     -0.377164     -0.287507E-01  0.287507E-01   7.97135       8.00011    
   6  0.713250     -0.337923     -0.257594E-01  0.257594E-01   7.99049       8.01624    
   7  0.562604     -0.575180     -0.438452E-01  0.438452E-01   8.01589       8.05973    
   8  0.410540     -0.890283     -0.678650E-01  0.678650E-01   8.03164       8.09950    
   9  0.667633     -0.404017     -0.307976E-01  0.307976E-01   8.04755       8.07835    
  10  0.111237      -2.19609     -0.167405      0.167405       7.97387       8.14127    
  11  0.987129     -0.129550E-01 -0.987540E-03  0.987540E-03   8.05256       8.05355    
  12  0.525481     -0.643442     -0.490487E-01  0.490487E-01   8.03963       8.08868    
  13  0.740553     -0.300358     -0.228959E-01  0.228959E-01   8.03863       8.06152    
  14  0.456748E-01  -3.08621     -0.235257      0.235257       8.03877       8.27402    
  15  0.831796     -0.184168     -0.140389E-01  0.140389E-01   8.06114       8.07518    
  16  0.798422     -0.225118     -0.171605E-01  0.171605E-01   8.06856       8.08572    
  17  0.985535     -0.145708E-01 -0.111071E-02  0.111071E-02   7.93671       7.93782    
  18  0.323340      -1.12905     -0.860658E-01  0.860658E-01   8.05990       8.14597    
  19  0.745026     -0.294336     -0.224368E-01  0.224368E-01   8.06512       8.08756    
  20  0.711871     -0.339858     -0.259069E-01  0.259069E-01   8.06667       8.09257    
  21  0.232875      -1.45725     -0.111084      0.111084       8.02849       8.13957    
  22  0.118192      -2.13545     -0.162782      0.162782       8.06810       8.23088    
  23  0.310641      -1.16912     -0.891201E-01  0.891201E-01   8.08186       8.17098    
  24  0.220899      -1.51005     -0.115109      0.115109       8.06856       8.18366    
  25  0.487797     -0.717856     -0.547211E-01  0.547211E-01   8.06657       8.12130    
  26  0.278848      -1.27709     -0.973506E-01  0.973506E-01   7.98780       8.08515    
  27  0.159355      -1.83662     -0.140003      0.140003       8.09995       8.23995    
  28  0.473156     -0.748329     -0.570441E-01  0.570441E-01   8.09541       8.15246    
  29  0.358980      -1.02449     -0.780953E-01  0.780953E-01   8.06750       8.14560    
  30  0.873266     -0.135515     -0.103301E-01  0.103301E-01   8.07625       8.08658    
  31  0.168201      -1.78260     -0.135885      0.135885       8.05030       8.18619    
  32  0.492581     -0.708096     -0.539771E-01  0.539771E-01   8.04047       8.09445    
  33  0.878329     -0.129734     -0.988947E-02  0.988947E-02   8.03442       8.04431    
  34  0.266147      -1.32371     -0.100904      0.100904       8.04015       8.14106    
  35  0.510485     -0.672394     -0.512557E-01  0.512557E-01   8.04862       8.09987    
  36  0.810074     -0.210630     -0.160560E-01  0.160560E-01   8.08698       8.10303    
  37  0.950614     -0.506467E-01 -0.386073E-02  0.386073E-02   7.99264       7.99650    
  38  0.329006      -1.11168     -0.847418E-01  0.847418E-01   8.02751       8.11225    
  39  0.934893E-01  -2.36991     -0.180655      0.180655       8.03087       8.21152    
  40  0.686671     -0.375900     -0.286543E-01  0.286543E-01   8.10547       8.13413    
  41  0.888060     -0.118716     -0.904958E-02  0.904958E-02   8.11213       8.12118    
  42  0.749618     -0.288192     -0.219684E-01  0.219684E-01   8.08510       8.10707    
  43  0.433754     -0.835279     -0.636721E-01  0.636721E-01   8.04747       8.11114    
  44  0.630341     -0.461494     -0.351790E-01  0.351790E-01   8.06036       8.09554    
  45  0.569388     -0.563194     -0.429315E-01  0.429315E-01   8.11598       8.15891    
  46  0.965872     -0.347242E-01 -0.264697E-02  0.264697E-02   8.09327       8.09591    
  47  0.797995     -0.225653     -0.172012E-01  0.172012E-01   8.11654       8.13374    
  48  0.716091     -0.333948     -0.254564E-01  0.254564E-01   8.11238       8.13783    
  49  0.339849      -1.07925     -0.822700E-01  0.822700E-01   8.09625       8.17852    
  50  0.202757      -1.59575     -0.121642      0.121642       8.08733       8.20897    
  51  0.266068      -1.32400     -0.100927      0.100927       8.13032       8.23125    
  52  0.985546E-01  -2.31715     -0.176633      0.176633       8.04889       8.22553    
  53  0.751309     -0.285938     -0.217967E-01  0.217967E-01   8.10620       8.12799    
  54  0.846042     -0.167187     -0.127444E-01  0.127444E-01   8.01090       8.02364    
  55  0.714380     -0.336340     -0.256387E-01  0.256387E-01   8.07112       8.09676    
  56  0.873273     -0.135507     -0.103295E-01  0.103295E-01   8.16632       8.17665    
  57  0.373211     -0.985610     -0.751317E-01  0.751317E-01   8.01784       8.09297    
  58  0.618869     -0.479862     -0.365792E-01  0.365792E-01   8.15023       8.18681    
  59  0.529025     -0.636720     -0.485362E-01  0.485362E-01   8.02250       8.07103    
  60  0.659913E-01  -2.71823     -0.207207      0.207207       8.09754       8.30474    
  61  0.541361E-01  -2.91625     -0.222302      0.222302       8.16966       8.39196    
  62  0.785735E-01  -2.54372     -0.193904      0.193904       8.05853       8.25243    
  63  0.569382     -0.563203     -0.429322E-01  0.429322E-01   8.05033       8.09327    
  64  0.564569     -0.571693     -0.435793E-01  0.435793E-01   8.11627       8.15985    
  65  0.689424     -0.371899     -0.283493E-01  0.283493E-01   8.10859       8.13694    
  66  0.992491     -0.753783E-02 -0.574598E-03  0.574598E-03   8.08776       8.08833    
  67  0.922665     -0.804887E-01 -0.613554E-02  0.613554E-02   8.14409       8.15023    
  68  0.497573     -0.698012     -0.532085E-01  0.532085E-01   8.27926       8.33247    
  69  0.594717     -0.519669     -0.396136E-01  0.396136E-01   8.18731       8.22692    
  70  0.132266      -2.02294     -0.154206      0.154206       8.01045       8.16466    
loop,thermsimp(1:2)       64  0.277027E-02  0.128122    

 sort simplex so values of h (with thermal fluctuations) are increasing in index. sort g and h acordingly


 calculate pbar [the centroid fo the vertices of best np1 MINUS nprocs points]
 do i=1,np1-nprocs .... pbar = pbar + g(i,:)


 assign each processor one of the nprocs worst points
 myimax=np1-myrank
 for example: if numprocs is 2 so that myrank is 0 or 1, we will have myimax=np1 for myrank=0 and myimax=np1-1 for myrank=1. 
 then reflect the worst point [g(myimax,:) ] through pbar and call this pstar and get obj value at pstar and call it hstar 

iter,obj,time:    428          8.65          0.86          1.12         24.35          0.10          0.05         26.48
Just calling func    0   0         26.48


reflection --> reflecting MY worst point i.e. g( myimax,:) through PBAR to get the reflection point PSTAR. 
(R) PSTAR = a * (PBAR - g(imax,:)) + PBAR 
(RR) HSTAR=functn(PSTAR,HSTAR) 

now each processor follows different instructions based on their hstar  
and they return a point mypoint with value myval in appropriate index corresponding to which proccessor. 
record what happened in appropriate engry of mycase 

iter,obj,time:    429          8.57          0.86          1.13         24.47          0.04          0.04         26.55
 share outcomes and figure out what the new simplex will look like
 First share outcomes MYCASE, MYPOINT and MYVAL
 right after mycase,mypoint,myval assignments: count number of function evaluations, print as appropriate
 nrounds is no of evals per processor (it can be >1 depending on mycase
 nevalp=nevalp+nrounds
 do 0 to nprocs and writes down what their mycase situation is (after broadcast)
 For case=1 where the reflection PSTAR gives a HSTAR lower than current min, we do  expansion to calculate a new PSTST through expanding and then compare that PSTST to PSTAR
 For case=2 where the reflection PSTAR gives a HSTAR higher than current min BUT lower than htherm(myimax-1), we do nothing (no new PSTST) 
 For case=3, where the reflection PSTAR gives a HSTAR higher than both the current min AND htherm(myimax-1)
 ............we do contraction to calculate a new PSTST by convx combo of pstar and pbar 
 ............then we compare PSTST to EITHER pstar OR the worst point of the original simplex (depending on which is better):  


  myrank  mycase     myval
       0       4      8.17
 mycase(ii+1)=3 or 4: hstar-thermstar(myrank+1) > htherm(1) AND  hstar-thermstar(myrank+1)>htherm(np1-myrank-1)
 nonparal: hstar > all func values except possibly hmax.  
 nonparal: if hstar<=hmax, replace p(imax) with pstar/ hmax with hstar test whether it is < func value at some point other than p(imax)
 reflection did not do any good i.e. hstar not better than the best AND not better than MY worst point (after imax)
 ---> contract by getting the convex combo of pstar and pbar: PSTST= b * pstar + (one-b) * pbar
 ---> compare the contraction point to EITHER pstar OR the worst point of the original simplex (depending on which is better):  
 ---> IF (hstar-thermstar(myrank+1)<htherm(myimax)) THEN i.e. (pstar is better of the two)
